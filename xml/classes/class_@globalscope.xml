<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_@globalscope.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/@GlobalScope.xml.</comment>
    <target refid="class-globalscope"></target>
    <section ids="globalscope class-globalscope" names="@globalscope class_@globalscope">
        <title>@GlobalScope</title>
        <paragraph>全局范围的常量和函数。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>全局范围的枚举常量和内置函数的列表。这是所有驻留在全局的，关于错误代码、键码、属性提示等的常量。</paragraph>
            <paragraph>单例也被记录在这里，因为它们可以从任何地方被访问。</paragraph>
            <paragraph>对于可以在任何脚本中访问的与 GDScript 相关的条目，请参阅 <reference internal="True" refuri="class_@gdscript#class-gdscript"><inline classes="std std-ref">@GDScript</inline></reference>。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/random_number_generation"><inline classes="doc">随机数生成</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="63"></colspec>
                    <colspec colwidth="85"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audioserver#class-audioserver"><inline classes="std std-ref">AudioServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-audioserver"><inline classes="std std-ref">AudioServer</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_cameraserver#class-cameraserver"><inline classes="std std-ref">CameraServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-cameraserver"><inline classes="std std-ref">CameraServer</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-classdb"><inline classes="std std-ref">ClassDB</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_displayserver#class-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorinterface#class-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_engine#class-engine"><inline classes="std std-ref">Engine</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-engine"><inline classes="std std-ref">Engine</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_enginedebugger#class-enginedebugger"><inline classes="std std-ref">EngineDebugger</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-enginedebugger"><inline classes="std std-ref">EngineDebugger</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_gdextensionmanager#class-gdextensionmanager"><inline classes="std std-ref">GDExtensionManager</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-gdextensionmanager"><inline classes="std std-ref">GDExtensionManager</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_geometry2d#class-geometry2d"><inline classes="std std-ref">Geometry2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-geometry2d"><inline classes="std std-ref">Geometry2D</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_geometry3d#class-geometry3d"><inline classes="std std-ref">Geometry3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-geometry3d"><inline classes="std std-ref">Geometry3D</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_ip#class-ip"><inline classes="std std-ref">IP</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-ip"><inline classes="std std-ref">IP</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_input#class-input"><inline classes="std std-ref">Input</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-input"><inline classes="std std-ref">Input</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_inputmap#class-inputmap"><inline classes="std std-ref">InputMap</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-inputmap"><inline classes="std std-ref">InputMap</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_javaclasswrapper#class-javaclasswrapper"><inline classes="std std-ref">JavaClassWrapper</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-javaclasswrapper"><inline classes="std std-ref">JavaClassWrapper</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_javascriptbridge#class-javascriptbridge"><inline classes="std std-ref">JavaScriptBridge</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-javascriptbridge"><inline classes="std std-ref">JavaScriptBridge</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_marshalls#class-marshalls"><inline classes="std std-ref">Marshalls</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-marshalls"><inline classes="std std-ref">Marshalls</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationmeshgenerator#class-navigationmeshgenerator"><inline classes="std std-ref">NavigationMeshGenerator</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-navigationmeshgenerator"><inline classes="std std-ref">NavigationMeshGenerator</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_os#class-os"><inline classes="std std-ref">OS</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-os"><inline classes="std std-ref">OS</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_performance#class-performance"><inline classes="std std-ref">Performance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-performance"><inline classes="std std-ref">Performance</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_physicsserver2dmanager#class-physicsserver2dmanager"><inline classes="std std-ref">PhysicsServer2DManager</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-physicsserver2dmanager"><inline classes="std std-ref">PhysicsServer2DManager</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_physicsserver3d#class-physicsserver3d"><inline classes="std std-ref">PhysicsServer3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-physicsserver3d"><inline classes="std std-ref">PhysicsServer3D</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_physicsserver3dmanager#class-physicsserver3dmanager"><inline classes="std std-ref">PhysicsServer3DManager</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-physicsserver3dmanager"><inline classes="std std-ref">PhysicsServer3DManager</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_projectsettings#class-projectsettings"><inline classes="std std-ref">ProjectSettings</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-projectsettings"><inline classes="std std-ref">ProjectSettings</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resourceloader#class-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resourcesaver#class-resourcesaver"><inline classes="std std-ref">ResourceSaver</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-resourcesaver"><inline classes="std std-ref">ResourceSaver</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resourceuid#class-resourceuid"><inline classes="std std-ref">ResourceUID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-resourceuid"><inline classes="std std-ref">ResourceUID</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textservermanager#class-textservermanager"><inline classes="std std-ref">TextServerManager</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-textservermanager"><inline classes="std std-ref">TextServerManager</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_themedb#class-themedb"><inline classes="std std-ref">ThemeDB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-themedb"><inline classes="std std-ref">ThemeDB</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_time#class-time"><inline classes="std std-ref">Time</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-time"><inline classes="std std-ref">Time</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_translationserver#class-translationserver"><inline classes="std std-ref">TranslationServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-translationserver"><inline classes="std std-ref">TranslationServer</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_workerthreadpool#class-workerthreadpool"><inline classes="std std-ref">WorkerThreadPool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-workerthreadpool"><inline classes="std std-ref">WorkerThreadPool</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrserver#class-xrserver"><inline classes="std std-ref">XRServer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-property-xrserver"><inline classes="std std-ref">XRServer</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="379"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-abs"><inline classes="std std-ref">abs</inline></reference>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-absf"><inline classes="std std-ref">absf</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-absi"><inline classes="std std-ref">absi</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-acos"><inline classes="std std-ref">acos</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-acosh"><inline classes="std std-ref">acosh</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-angle-difference"><inline classes="std std-ref">angle_difference</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-asin"><inline classes="std std-ref">asin</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-asinh"><inline classes="std std-ref">asinh</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-atan"><inline classes="std std-ref">atan</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-atan2"><inline classes="std std-ref">atan2</inline></reference>(y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-atanh"><inline classes="std std-ref">atanh</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-bezier-derivative"><inline classes="std std-ref">bezier_derivative</inline></reference>(start: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_1: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_2: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-bezier-interpolate"><inline classes="std std-ref">bezier_interpolate</inline></reference>(start: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_1: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_2: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-bytes-to-var"><inline classes="std std-ref">bytes_to_var</inline></reference>(bytes: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-bytes-to-var-with-objects"><inline classes="std std-ref">bytes_to_var_with_objects</inline></reference>(bytes: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-ceil"><inline classes="std std-ref">ceil</inline></reference>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-ceilf"><inline classes="std std-ref">ceilf</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-ceili"><inline classes="std std-ref">ceili</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-clamp"><inline classes="std std-ref">clamp</inline></reference>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, min: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, max: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-clampf"><inline classes="std std-ref">clampf</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-clampi"><inline classes="std std-ref">clampi</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-cos"><inline classes="std std-ref">cos</inline></reference>(angle_rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-cosh"><inline classes="std std-ref">cosh</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-cubic-interpolate"><inline classes="std std-ref">cubic_interpolate</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-cubic-interpolate-angle"><inline classes="std std-ref">cubic_interpolate_angle</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-cubic-interpolate-angle-in-time"><inline classes="std std-ref">cubic_interpolate_angle_in_time</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-cubic-interpolate-in-time"><inline classes="std std-ref">cubic_interpolate_in_time</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-db-to-linear"><inline classes="std std-ref">db_to_linear</inline></reference>(db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-deg-to-rad"><inline classes="std std-ref">deg_to_rad</inline></reference>(deg: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-ease"><inline classes="std std-ref">ease</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, curve: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-error-string"><inline classes="std std-ref">error_string</inline></reference>(error: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-exp"><inline classes="std std-ref">exp</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-floor"><inline classes="std std-ref">floor</inline></reference>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-floorf"><inline classes="std std-ref">floorf</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-floori"><inline classes="std std-ref">floori</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-fmod"><inline classes="std std-ref">fmod</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-fposmod"><inline classes="std std-ref">fposmod</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-hash"><inline classes="std std-ref">hash</inline></reference>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-instance-from-id"><inline classes="std std-ref">instance_from_id</inline></reference>(instance_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-inverse-lerp"><inline classes="std std-ref">inverse_lerp</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>(a: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-inf"><inline classes="std std-ref">is_inf</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-instance-id-valid"><inline classes="std std-ref">is_instance_id_valid</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-instance-valid"><inline classes="std std-ref">is_instance_valid</inline></reference>(instance: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-nan"><inline classes="std std-ref">is_nan</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-same"><inline classes="std std-ref">is_same</inline></reference>(a: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, b: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-is-zero-approx"><inline classes="std std-ref">is_zero_approx</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-lerp"><inline classes="std std-ref">lerp</inline></reference>(from: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, to: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, weight: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-lerp-angle"><inline classes="std std-ref">lerp_angle</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-lerpf"><inline classes="std std-ref">lerpf</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-linear-to-db"><inline classes="std std-ref">linear_to_db</inline></reference>(lin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-log"><inline classes="std std-ref">log</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-max"><inline classes="std std-ref">max</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-maxf"><inline classes="std std-ref">maxf</inline></reference>(a: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-maxi"><inline classes="std std-ref">maxi</inline></reference>(a: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, b: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-min"><inline classes="std std-ref">min</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-minf"><inline classes="std std-ref">minf</inline></reference>(a: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-mini"><inline classes="std std-ref">mini</inline></reference>(a: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, b: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-move-toward"><inline classes="std std-ref">move_toward</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-nearest-po2"><inline classes="std std-ref">nearest_po2</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-pingpong"><inline classes="std std-ref">pingpong</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-posmod"><inline classes="std std-ref">posmod</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-pow"><inline classes="std std-ref">pow</inline></reference>(base: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, exp: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-print"><inline classes="std std-ref">print</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-print-rich"><inline classes="std std-ref">print_rich</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-print-verbose"><inline classes="std std-ref">print_verbose</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-printerr"><inline classes="std std-ref">printerr</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-printraw"><inline classes="std std-ref">printraw</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-prints"><inline classes="std std-ref">prints</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-printt"><inline classes="std std-ref">printt</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-push-error"><inline classes="std std-ref">push_error</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-push-warning"><inline classes="std std-ref">push_warning</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-rad-to-deg"><inline classes="std std-ref">rad_to_deg</inline></reference>(rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-rand-from-seed"><inline classes="std std-ref">rand_from_seed</inline></reference>(seed: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-randf"><inline classes="std std-ref">randf</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-randf-range"><inline classes="std std-ref">randf_range</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-randfn"><inline classes="std std-ref">randfn</inline></reference>(mean: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, deviation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-randi"><inline classes="std std-ref">randi</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-randi-range"><inline classes="std std-ref">randi_range</inline></reference>(from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-randomize"><inline classes="std std-ref">randomize</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-remap"><inline classes="std std-ref">remap</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, istart: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, istop: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ostart: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ostop: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-rid-allocate-id"><inline classes="std std-ref">rid_allocate_id</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-rid-from-int64"><inline classes="std std-ref">rid_from_int64</inline></reference>(base: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-rotate-toward"><inline classes="std std-ref">rotate_toward</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-round"><inline classes="std std-ref">round</inline></reference>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-roundf"><inline classes="std std-ref">roundf</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-roundi"><inline classes="std std-ref">roundi</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-seed"><inline classes="std std-ref">seed</inline></reference>(base: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-sign"><inline classes="std std-ref">sign</inline></reference>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-signf"><inline classes="std std-ref">signf</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-signi"><inline classes="std std-ref">signi</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-sin"><inline classes="std std-ref">sin</inline></reference>(angle_rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-sinh"><inline classes="std std-ref">sinh</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-smoothstep"><inline classes="std std-ref">smoothstep</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-snapped"><inline classes="std std-ref">snapped</inline></reference>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, step: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-snappedf"><inline classes="std std-ref">snappedf</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-snappedi"><inline classes="std std-ref">snappedi</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, step: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-sqrt"><inline classes="std std-ref">sqrt</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-step-decimals"><inline classes="std std-ref">step_decimals</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-str"><inline classes="std std-ref">str</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-str-to-var"><inline classes="std std-ref">str_to_var</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-tan"><inline classes="std std-ref">tan</inline></reference>(angle_rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-tanh"><inline classes="std std-ref">tanh</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-type-convert"><inline classes="std std-ref">type_convert</inline></reference>(variant: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-type-string"><inline classes="std std-ref">type_string</inline></reference>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-typeof"><inline classes="std std-ref">typeof</inline></reference>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-var-to-bytes"><inline classes="std std-ref">var_to_bytes</inline></reference>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-var-to-bytes-with-objects"><inline classes="std std-ref">var_to_bytes_with_objects</inline></reference>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-var-to-str"><inline classes="std std-ref">var_to_str</inline></reference>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-weakref"><inline classes="std std-ref">weakref</inline></reference>(obj: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-wrap"><inline classes="std std-ref">wrap</inline></reference>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, min: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, max: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-wrapf"><inline classes="std std-ref">wrapf</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-globalscope-method-wrapi"><inline classes="std std-ref">wrapi</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-globalscope-side"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-side" names="enum_@globalscope_side">enum <strong>Side</strong>: <reference internal="True" refid="enum-globalscope-side"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-side-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-side-left" names="class_@globalscope_constant_side_left"><reference internal="True" refid="enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> <strong>SIDE_LEFT</strong> = <literal>0</literal></paragraph>
            <paragraph>左边，常用于 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 或 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 的派生类。</paragraph>
            <target refid="class-globalscope-constant-side-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-side-top" names="class_@globalscope_constant_side_top"><reference internal="True" refid="enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> <strong>SIDE_TOP</strong> = <literal>1</literal></paragraph>
            <paragraph>顶边，常用于 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 或 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 的派生类。</paragraph>
            <target refid="class-globalscope-constant-side-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-side-right" names="class_@globalscope_constant_side_right"><reference internal="True" refid="enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> <strong>SIDE_RIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>右边，常用于 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 或 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 的派生类。</paragraph>
            <target refid="class-globalscope-constant-side-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-side-bottom" names="class_@globalscope_constant_side_bottom"><reference internal="True" refid="enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> <strong>SIDE_BOTTOM</strong> = <literal>3</literal></paragraph>
            <paragraph>底边，常用于 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 或 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 的派生类。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-corner"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-corner" names="enum_@globalscope_corner">enum <strong>Corner</strong>: <reference internal="True" refid="enum-globalscope-corner"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-corner-top-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-corner-top-left" names="class_@globalscope_constant_corner_top_left"><reference internal="True" refid="enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> <strong>CORNER_TOP_LEFT</strong> = <literal>0</literal></paragraph>
            <paragraph>左上角。</paragraph>
            <target refid="class-globalscope-constant-corner-top-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-corner-top-right" names="class_@globalscope_constant_corner_top_right"><reference internal="True" refid="enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> <strong>CORNER_TOP_RIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph>右上角。</paragraph>
            <target refid="class-globalscope-constant-corner-bottom-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-corner-bottom-right" names="class_@globalscope_constant_corner_bottom_right"><reference internal="True" refid="enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> <strong>CORNER_BOTTOM_RIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>右下角。</paragraph>
            <target refid="class-globalscope-constant-corner-bottom-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-corner-bottom-left" names="class_@globalscope_constant_corner_bottom_left"><reference internal="True" refid="enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> <strong>CORNER_BOTTOM_LEFT</strong> = <literal>3</literal></paragraph>
            <paragraph>左下角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-orientation"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-orientation" names="enum_@globalscope_orientation">enum <strong>Orientation</strong>: <reference internal="True" refid="enum-globalscope-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-vertical"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-vertical" names="class_@globalscope_constant_vertical"><reference internal="True" refid="enum-globalscope-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>VERTICAL</strong> = <literal>1</literal></paragraph>
            <paragraph>通用垂直对齐，常用于 <reference internal="True" refuri="class_separator#class-separator"><inline classes="std std-ref">Separator</inline></reference>、<reference internal="True" refuri="class_scrollbar#class-scrollbar"><inline classes="std std-ref">ScrollBar</inline></reference>、<reference internal="True" refuri="class_slider#class-slider"><inline classes="std std-ref">Slider</inline></reference> 等。</paragraph>
            <target refid="class-globalscope-constant-horizontal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-horizontal" names="class_@globalscope_constant_horizontal"><reference internal="True" refid="enum-globalscope-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>HORIZONTAL</strong> = <literal>0</literal></paragraph>
            <paragraph>通用水平对齐，常用于 <reference internal="True" refuri="class_separator#class-separator"><inline classes="std std-ref">Separator</inline></reference>、<reference internal="True" refuri="class_scrollbar#class-scrollbar"><inline classes="std std-ref">ScrollBar</inline></reference>、<reference internal="True" refuri="class_slider#class-slider"><inline classes="std std-ref">Slider</inline></reference> 等。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-clockdirection"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-clockdirection" names="enum_@globalscope_clockdirection">enum <strong>ClockDirection</strong>: <reference internal="True" refid="enum-globalscope-clockdirection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-clockwise" names="class_@globalscope_constant_clockwise"><reference internal="True" refid="enum-globalscope-clockdirection"><inline classes="std std-ref">ClockDirection</inline></reference> <strong>CLOCKWISE</strong> = <literal>0</literal></paragraph>
            <paragraph>顺时针旋转。被一些方法使用（例如 <reference internal="True" refuri="class_image#class-image-method-rotate-90"><inline classes="std std-ref">Image.rotate_90</inline></reference>）。</paragraph>
            <target refid="class-globalscope-constant-counterclockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-counterclockwise" names="class_@globalscope_constant_counterclockwise"><reference internal="True" refid="enum-globalscope-clockdirection"><inline classes="std std-ref">ClockDirection</inline></reference> <strong>COUNTERCLOCKWISE</strong> = <literal>1</literal></paragraph>
            <paragraph>逆时针旋转。被一些方法使用（例如 <reference internal="True" refuri="class_image#class-image-method-rotate-90"><inline classes="std std-ref">Image.rotate_90</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-horizontalalignment"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-horizontalalignment" names="enum_@globalscope_horizontalalignment">enum <strong>HorizontalAlignment</strong>: <reference internal="True" refid="enum-globalscope-horizontalalignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-horizontal-alignment-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-horizontal-alignment-left" names="class_@globalscope_constant_horizontal_alignment_left"><reference internal="True" refid="enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>HORIZONTAL_ALIGNMENT_LEFT</strong> = <literal>0</literal></paragraph>
            <paragraph>水平左对齐，常用于文本派生类。</paragraph>
            <target refid="class-globalscope-constant-horizontal-alignment-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-horizontal-alignment-center" names="class_@globalscope_constant_horizontal_alignment_center"><reference internal="True" refid="enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>HORIZONTAL_ALIGNMENT_CENTER</strong> = <literal>1</literal></paragraph>
            <paragraph>水平居中对齐，常用于文本派生类。</paragraph>
            <target refid="class-globalscope-constant-horizontal-alignment-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-horizontal-alignment-right" names="class_@globalscope_constant_horizontal_alignment_right"><reference internal="True" refid="enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>HORIZONTAL_ALIGNMENT_RIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>水平右对齐，常用于文本派生类。</paragraph>
            <target refid="class-globalscope-constant-horizontal-alignment-fill"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-horizontal-alignment-fill" names="class_@globalscope_constant_horizontal_alignment_fill"><reference internal="True" refid="enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>HORIZONTAL_ALIGNMENT_FILL</strong> = <literal>3</literal></paragraph>
            <paragraph>扩展行以适应宽度，常用于文本派生类。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-verticalalignment"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-verticalalignment" names="enum_@globalscope_verticalalignment">enum <strong>VerticalAlignment</strong>: <reference internal="True" refid="enum-globalscope-verticalalignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-vertical-alignment-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-vertical-alignment-top" names="class_@globalscope_constant_vertical_alignment_top"><reference internal="True" refid="enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>VERTICAL_ALIGNMENT_TOP</strong> = <literal>0</literal></paragraph>
            <paragraph>垂直上对齐，常用于文本派生类。</paragraph>
            <target refid="class-globalscope-constant-vertical-alignment-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-vertical-alignment-center" names="class_@globalscope_constant_vertical_alignment_center"><reference internal="True" refid="enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>VERTICAL_ALIGNMENT_CENTER</strong> = <literal>1</literal></paragraph>
            <paragraph>垂直居中对齐，常用于文本派生类。</paragraph>
            <target refid="class-globalscope-constant-vertical-alignment-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-vertical-alignment-bottom" names="class_@globalscope_constant_vertical_alignment_bottom"><reference internal="True" refid="enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>VERTICAL_ALIGNMENT_BOTTOM</strong> = <literal>2</literal></paragraph>
            <paragraph>垂直下对齐，常用于文本派生类。</paragraph>
            <target refid="class-globalscope-constant-vertical-alignment-fill"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-vertical-alignment-fill" names="class_@globalscope_constant_vertical_alignment_fill"><reference internal="True" refid="enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>VERTICAL_ALIGNMENT_FILL</strong> = <literal>3</literal></paragraph>
            <paragraph>扩展行以适应高度，通常用于文本派生类。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-inlinealignment"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-inlinealignment" names="enum_@globalscope_inlinealignment">enum <strong>InlineAlignment</strong>: <reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-inline-alignment-top-to"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-top-to" names="class_@globalscope_constant_inline_alignment_top_to"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_TOP_TO</strong> = <literal>0</literal></paragraph>
            <paragraph>将内联对象（例如图像、表格）的顶部与 <literal>INLINE_ALIGNMENT_TO_*</literal> 常量指定的文本位置对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-center-to"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-center-to" names="class_@globalscope_constant_inline_alignment_center_to"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_CENTER_TO</strong> = <literal>1</literal></paragraph>
            <paragraph>将内联对象（例如图像、表格）的中心与 <literal>INLINE_ALIGNMENT_TO_*</literal> 常量指定的文本位置对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-baseline-to"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-baseline-to" names="class_@globalscope_constant_inline_alignment_baseline_to"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_BASELINE_TO</strong> = <literal>3</literal></paragraph>
            <paragraph>将内联对象（如图像、表格）的基线（用户定义）与<literal>INLINE_ALIGNMENT_TO_*</literal> 常数指定的文本位置对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-bottom-to"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-bottom-to" names="class_@globalscope_constant_inline_alignment_bottom_to"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_BOTTOM_TO</strong> = <literal>2</literal></paragraph>
            <paragraph>将内联对象（例如图像、表格）的底部与 <literal>INLINE_ALIGNMENT_TO_*</literal> 常量指定的文本位置对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-to-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-to-top" names="class_@globalscope_constant_inline_alignment_to_top"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_TO_TOP</strong> = <literal>0</literal></paragraph>
            <paragraph>将由 <literal>INLINE_ALIGNMENT_*_TO</literal> 常量指定的内联对象（例如图像、表格）的位置与文本顶部对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-to-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-to-center" names="class_@globalscope_constant_inline_alignment_to_center"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_TO_CENTER</strong> = <literal>4</literal></paragraph>
            <paragraph>将由 <literal>INLINE_ALIGNMENT_*_TO</literal> 常量指定的内联对象（例如图像、表格）的位置与文本中心对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-to-baseline"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-to-baseline" names="class_@globalscope_constant_inline_alignment_to_baseline"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_TO_BASELINE</strong> = <literal>8</literal></paragraph>
            <paragraph>将由 <literal>INLINE_ALIGNMENT_*_TO</literal> 常量指定的内联对象（例如图像、表格）的位置与文本基线对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-to-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-to-bottom" names="class_@globalscope_constant_inline_alignment_to_bottom"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_TO_BOTTOM</strong> = <literal>12</literal></paragraph>
            <paragraph>将内联对象（例如图像、表格）与文本底部对齐。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-top" names="class_@globalscope_constant_inline_alignment_top"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_TOP</strong> = <literal>0</literal></paragraph>
            <paragraph>将内联对象（例如图像、表格）的顶部与文本的顶部对齐。等效于 <literal>INLINE_ALIGNMENT_TOP_TO | INLINE_ALIGNMENT_TO_TOP</literal>。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-center" names="class_@globalscope_constant_inline_alignment_center"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_CENTER</strong> = <literal>5</literal></paragraph>
            <paragraph>将内联对象（例如图像、表格）的中心与文本的中心对齐。相当于 <literal>INLINE_ALIGNMENT_CENTER_TO | INLINE_ALIGNMENT_TO_CENTER</literal>。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-bottom" names="class_@globalscope_constant_inline_alignment_bottom"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_BOTTOM</strong> = <literal>14</literal></paragraph>
            <paragraph>将内联对象（例如图像、表格）的底部与文本底部对齐。等效于 <literal>INLINE_ALIGNMENT_BOTTOM_TO | INLINE_ALIGNMENT_TO_BOTTOM</literal>。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-image-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-image-mask" names="class_@globalscope_constant_inline_alignment_image_mask"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_IMAGE_MASK</strong> = <literal>3</literal></paragraph>
            <paragraph>用于 <literal>INLINE_ALIGNMENT_*_TO</literal> 对齐常量的位掩码。</paragraph>
            <target refid="class-globalscope-constant-inline-alignment-text-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-inline-alignment-text-mask" names="class_@globalscope_constant_inline_alignment_text_mask"><reference internal="True" refid="enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> <strong>INLINE_ALIGNMENT_TEXT_MASK</strong> = <literal>12</literal></paragraph>
            <paragraph>用于 <literal>INLINE_ALIGNMENT_TO_*</literal> 对齐常量的位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-eulerorder"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-eulerorder" names="enum_@globalscope_eulerorder">enum <strong>EulerOrder</strong>: <reference internal="True" refid="enum-globalscope-eulerorder"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-euler-order-xyz"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-euler-order-xyz" names="class_@globalscope_constant_euler_order_xyz"><reference internal="True" refid="enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>EULER_ORDER_XYZ</strong> = <literal>0</literal></paragraph>
            <paragraph>指定欧拉角应按 XYZ 顺序排列。组合时，顺序为 X、Y、Z。分解时，顺序相反，先 Z，再 Y，最后 X。</paragraph>
            <target refid="class-globalscope-constant-euler-order-xzy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-euler-order-xzy" names="class_@globalscope_constant_euler_order_xzy"><reference internal="True" refid="enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>EULER_ORDER_XZY</strong> = <literal>1</literal></paragraph>
            <paragraph>指定欧拉角应按 XZY 顺序排列。组合时，顺序为 X、Z、Y。分解时，顺序相反，先 Y，再 Z，最后 X。</paragraph>
            <target refid="class-globalscope-constant-euler-order-yxz"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-euler-order-yxz" names="class_@globalscope_constant_euler_order_yxz"><reference internal="True" refid="enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>EULER_ORDER_YXZ</strong> = <literal>2</literal></paragraph>
            <paragraph>指定欧拉角应按 YXZ 顺序排列。组合时，顺序为 Y、X、Z。分解时，顺序相反，先 Z，再 X，最后 Y。</paragraph>
            <target refid="class-globalscope-constant-euler-order-yzx"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-euler-order-yzx" names="class_@globalscope_constant_euler_order_yzx"><reference internal="True" refid="enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>EULER_ORDER_YZX</strong> = <literal>3</literal></paragraph>
            <paragraph>指定欧拉角应按 YZX 顺序排列。组合时，顺序为 Y、Z、X。分解时，顺序相反，先 X，再 Z，最后 Y。</paragraph>
            <target refid="class-globalscope-constant-euler-order-zxy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-euler-order-zxy" names="class_@globalscope_constant_euler_order_zxy"><reference internal="True" refid="enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>EULER_ORDER_ZXY</strong> = <literal>4</literal></paragraph>
            <paragraph>指定欧拉角应按 ZXY 顺序排列。组合时，顺序为 Z、X、Y。分解时，顺序相反，先 Y，再 X，最后 Z。</paragraph>
            <target refid="class-globalscope-constant-euler-order-zyx"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-euler-order-zyx" names="class_@globalscope_constant_euler_order_zyx"><reference internal="True" refid="enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>EULER_ORDER_ZYX</strong> = <literal>5</literal></paragraph>
            <paragraph>指定欧拉角应按 ZYX 顺序排列。组合时，顺序为 Z、Y、X。分解时，顺序相反，先 X，再 Y，最后 Z。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-key"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-key" names="enum_@globalscope_key">enum <strong>Key</strong>: <reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-key-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-none" names="class_@globalscope_constant_key_none"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>与任何键都不对应的枚举值。这用于初始化具有通用状态的 <reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 属性。</paragraph>
            <target refid="class-globalscope-constant-key-special"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-special" names="class_@globalscope_constant_key_special"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SPECIAL</strong> = <literal>4194304</literal></paragraph>
            <paragraph>应用此位的键码不可打印。</paragraph>
            <target refid="class-globalscope-constant-key-escape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-escape" names="class_@globalscope_constant_key_escape"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_ESCAPE</strong> = <literal>4194305</literal></paragraph>
            <paragraph>ESC 键。</paragraph>
            <target refid="class-globalscope-constant-key-tab"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-tab" names="class_@globalscope_constant_key_tab"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_TAB</strong> = <literal>4194306</literal></paragraph>
            <paragraph>Tab 键。</paragraph>
            <target refid="class-globalscope-constant-key-backtab"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-backtab" names="class_@globalscope_constant_key_backtab"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BACKTAB</strong> = <literal>4194307</literal></paragraph>
            <paragraph>Shift + Tab 键。</paragraph>
            <target refid="class-globalscope-constant-key-backspace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-backspace" names="class_@globalscope_constant_key_backspace"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BACKSPACE</strong> = <literal>4194308</literal></paragraph>
            <paragraph>退格键。</paragraph>
            <target refid="class-globalscope-constant-key-enter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-enter" names="class_@globalscope_constant_key_enter"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_ENTER</strong> = <literal>4194309</literal></paragraph>
            <paragraph>回车键（位于主键盘）。</paragraph>
            <target refid="class-globalscope-constant-key-kp-enter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-enter" names="class_@globalscope_constant_key_kp_enter"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_ENTER</strong> = <literal>4194310</literal></paragraph>
            <paragraph>小键盘区的回车键。</paragraph>
            <target refid="class-globalscope-constant-key-insert"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-insert" names="class_@globalscope_constant_key_insert"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_INSERT</strong> = <literal>4194311</literal></paragraph>
            <paragraph>Insert 键。</paragraph>
            <target refid="class-globalscope-constant-key-delete"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-delete" names="class_@globalscope_constant_key_delete"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_DELETE</strong> = <literal>4194312</literal></paragraph>
            <paragraph>Delete 键。</paragraph>
            <target refid="class-globalscope-constant-key-pause"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-pause" names="class_@globalscope_constant_key_pause"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PAUSE</strong> = <literal>4194313</literal></paragraph>
            <paragraph>Pause 键。</paragraph>
            <target refid="class-globalscope-constant-key-print"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-print" names="class_@globalscope_constant_key_print"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PRINT</strong> = <literal>4194314</literal></paragraph>
            <paragraph>Print Screen 键。</paragraph>
            <target refid="class-globalscope-constant-key-sysreq"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-sysreq" names="class_@globalscope_constant_key_sysreq"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SYSREQ</strong> = <literal>4194315</literal></paragraph>
            <paragraph>System Request 键。</paragraph>
            <target refid="class-globalscope-constant-key-clear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-clear" names="class_@globalscope_constant_key_clear"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_CLEAR</strong> = <literal>4194316</literal></paragraph>
            <paragraph>Clear 键。</paragraph>
            <target refid="class-globalscope-constant-key-home"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-home" names="class_@globalscope_constant_key_home"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_HOME</strong> = <literal>4194317</literal></paragraph>
            <paragraph>Home 键。</paragraph>
            <target refid="class-globalscope-constant-key-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-end" names="class_@globalscope_constant_key_end"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_END</strong> = <literal>4194318</literal></paragraph>
            <paragraph>End 键。</paragraph>
            <target refid="class-globalscope-constant-key-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-left" names="class_@globalscope_constant_key_left"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LEFT</strong> = <literal>4194319</literal></paragraph>
            <paragraph>左方向键。</paragraph>
            <target refid="class-globalscope-constant-key-up"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-up" names="class_@globalscope_constant_key_up"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_UP</strong> = <literal>4194320</literal></paragraph>
            <paragraph>上方向键。</paragraph>
            <target refid="class-globalscope-constant-key-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-right" names="class_@globalscope_constant_key_right"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_RIGHT</strong> = <literal>4194321</literal></paragraph>
            <paragraph>右方向键。</paragraph>
            <target refid="class-globalscope-constant-key-down"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-down" names="class_@globalscope_constant_key_down"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_DOWN</strong> = <literal>4194322</literal></paragraph>
            <paragraph>下方向键。</paragraph>
            <target refid="class-globalscope-constant-key-pageup"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-pageup" names="class_@globalscope_constant_key_pageup"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PAGEUP</strong> = <literal>4194323</literal></paragraph>
            <paragraph>Page Up 键。</paragraph>
            <target refid="class-globalscope-constant-key-pagedown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-pagedown" names="class_@globalscope_constant_key_pagedown"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PAGEDOWN</strong> = <literal>4194324</literal></paragraph>
            <paragraph>Page Down 键。</paragraph>
            <target refid="class-globalscope-constant-key-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-shift" names="class_@globalscope_constant_key_shift"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SHIFT</strong> = <literal>4194325</literal></paragraph>
            <paragraph>Shift 键。</paragraph>
            <target refid="class-globalscope-constant-key-ctrl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-ctrl" names="class_@globalscope_constant_key_ctrl"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_CTRL</strong> = <literal>4194326</literal></paragraph>
            <paragraph>Control 键。</paragraph>
            <target refid="class-globalscope-constant-key-meta"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-meta" names="class_@globalscope_constant_key_meta"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_META</strong> = <literal>4194327</literal></paragraph>
            <paragraph>Meta 键。</paragraph>
            <target refid="class-globalscope-constant-key-alt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-alt" names="class_@globalscope_constant_key_alt"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_ALT</strong> = <literal>4194328</literal></paragraph>
            <paragraph>Alt 键。</paragraph>
            <target refid="class-globalscope-constant-key-capslock"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-capslock" names="class_@globalscope_constant_key_capslock"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_CAPSLOCK</strong> = <literal>4194329</literal></paragraph>
            <paragraph>Caps Lock 键。</paragraph>
            <target refid="class-globalscope-constant-key-numlock"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-numlock" names="class_@globalscope_constant_key_numlock"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_NUMLOCK</strong> = <literal>4194330</literal></paragraph>
            <paragraph>Num Lock 键。</paragraph>
            <target refid="class-globalscope-constant-key-scrolllock"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-scrolllock" names="class_@globalscope_constant_key_scrolllock"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SCROLLLOCK</strong> = <literal>4194331</literal></paragraph>
            <paragraph>Scroll Lock 键。</paragraph>
            <target refid="class-globalscope-constant-key-f1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f1" names="class_@globalscope_constant_key_f1"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F1</strong> = <literal>4194332</literal></paragraph>
            <paragraph>F1 键。</paragraph>
            <target refid="class-globalscope-constant-key-f2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f2" names="class_@globalscope_constant_key_f2"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F2</strong> = <literal>4194333</literal></paragraph>
            <paragraph>F2 键。</paragraph>
            <target refid="class-globalscope-constant-key-f3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f3" names="class_@globalscope_constant_key_f3"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F3</strong> = <literal>4194334</literal></paragraph>
            <paragraph>F3 键。</paragraph>
            <target refid="class-globalscope-constant-key-f4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f4" names="class_@globalscope_constant_key_f4"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F4</strong> = <literal>4194335</literal></paragraph>
            <paragraph>F4 键。</paragraph>
            <target refid="class-globalscope-constant-key-f5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f5" names="class_@globalscope_constant_key_f5"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F5</strong> = <literal>4194336</literal></paragraph>
            <paragraph>F5 键。</paragraph>
            <target refid="class-globalscope-constant-key-f6"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f6" names="class_@globalscope_constant_key_f6"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F6</strong> = <literal>4194337</literal></paragraph>
            <paragraph>F6 键。</paragraph>
            <target refid="class-globalscope-constant-key-f7"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f7" names="class_@globalscope_constant_key_f7"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F7</strong> = <literal>4194338</literal></paragraph>
            <paragraph>F7 键。</paragraph>
            <target refid="class-globalscope-constant-key-f8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f8" names="class_@globalscope_constant_key_f8"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F8</strong> = <literal>4194339</literal></paragraph>
            <paragraph>F8 键。</paragraph>
            <target refid="class-globalscope-constant-key-f9"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f9" names="class_@globalscope_constant_key_f9"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F9</strong> = <literal>4194340</literal></paragraph>
            <paragraph>F9 键。</paragraph>
            <target refid="class-globalscope-constant-key-f10"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f10" names="class_@globalscope_constant_key_f10"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F10</strong> = <literal>4194341</literal></paragraph>
            <paragraph>F10 键。</paragraph>
            <target refid="class-globalscope-constant-key-f11"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f11" names="class_@globalscope_constant_key_f11"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F11</strong> = <literal>4194342</literal></paragraph>
            <paragraph>F11 键。</paragraph>
            <target refid="class-globalscope-constant-key-f12"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f12" names="class_@globalscope_constant_key_f12"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F12</strong> = <literal>4194343</literal></paragraph>
            <paragraph>F12 键。</paragraph>
            <target refid="class-globalscope-constant-key-f13"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f13" names="class_@globalscope_constant_key_f13"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F13</strong> = <literal>4194344</literal></paragraph>
            <paragraph>F13 键。</paragraph>
            <target refid="class-globalscope-constant-key-f14"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f14" names="class_@globalscope_constant_key_f14"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F14</strong> = <literal>4194345</literal></paragraph>
            <paragraph>F14 键。</paragraph>
            <target refid="class-globalscope-constant-key-f15"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f15" names="class_@globalscope_constant_key_f15"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F15</strong> = <literal>4194346</literal></paragraph>
            <paragraph>F15 键。</paragraph>
            <target refid="class-globalscope-constant-key-f16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f16" names="class_@globalscope_constant_key_f16"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F16</strong> = <literal>4194347</literal></paragraph>
            <paragraph>F16 键。</paragraph>
            <target refid="class-globalscope-constant-key-f17"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f17" names="class_@globalscope_constant_key_f17"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F17</strong> = <literal>4194348</literal></paragraph>
            <paragraph>F17 键。</paragraph>
            <target refid="class-globalscope-constant-key-f18"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f18" names="class_@globalscope_constant_key_f18"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F18</strong> = <literal>4194349</literal></paragraph>
            <paragraph>F18 键。</paragraph>
            <target refid="class-globalscope-constant-key-f19"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f19" names="class_@globalscope_constant_key_f19"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F19</strong> = <literal>4194350</literal></paragraph>
            <paragraph>F19 键。</paragraph>
            <target refid="class-globalscope-constant-key-f20"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f20" names="class_@globalscope_constant_key_f20"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F20</strong> = <literal>4194351</literal></paragraph>
            <paragraph>F20 键。</paragraph>
            <target refid="class-globalscope-constant-key-f21"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f21" names="class_@globalscope_constant_key_f21"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F21</strong> = <literal>4194352</literal></paragraph>
            <paragraph>F21 键。</paragraph>
            <target refid="class-globalscope-constant-key-f22"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f22" names="class_@globalscope_constant_key_f22"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F22</strong> = <literal>4194353</literal></paragraph>
            <paragraph>F22 键。</paragraph>
            <target refid="class-globalscope-constant-key-f23"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f23" names="class_@globalscope_constant_key_f23"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F23</strong> = <literal>4194354</literal></paragraph>
            <paragraph>F23 键。</paragraph>
            <target refid="class-globalscope-constant-key-f24"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f24" names="class_@globalscope_constant_key_f24"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F24</strong> = <literal>4194355</literal></paragraph>
            <paragraph>F24 键。</paragraph>
            <target refid="class-globalscope-constant-key-f25"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f25" names="class_@globalscope_constant_key_f25"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F25</strong> = <literal>4194356</literal></paragraph>
            <paragraph>F25 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f26"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f26" names="class_@globalscope_constant_key_f26"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F26</strong> = <literal>4194357</literal></paragraph>
            <paragraph>F26 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f27"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f27" names="class_@globalscope_constant_key_f27"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F27</strong> = <literal>4194358</literal></paragraph>
            <paragraph>F27 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f28"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f28" names="class_@globalscope_constant_key_f28"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F28</strong> = <literal>4194359</literal></paragraph>
            <paragraph>F28 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f29"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f29" names="class_@globalscope_constant_key_f29"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F29</strong> = <literal>4194360</literal></paragraph>
            <paragraph>F29 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f30"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f30" names="class_@globalscope_constant_key_f30"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F30</strong> = <literal>4194361</literal></paragraph>
            <paragraph>F30 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f31"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f31" names="class_@globalscope_constant_key_f31"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F31</strong> = <literal>4194362</literal></paragraph>
            <paragraph>F31 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f32" names="class_@globalscope_constant_key_f32"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F32</strong> = <literal>4194363</literal></paragraph>
            <paragraph>F32 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f33"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f33" names="class_@globalscope_constant_key_f33"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F33</strong> = <literal>4194364</literal></paragraph>
            <paragraph>F33 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f34"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f34" names="class_@globalscope_constant_key_f34"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F34</strong> = <literal>4194365</literal></paragraph>
            <paragraph>F34 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-f35"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f35" names="class_@globalscope_constant_key_f35"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F35</strong> = <literal>4194366</literal></paragraph>
            <paragraph>F35 键。由于 Windows 限制，仅支持 macOS 和 Linux。</paragraph>
            <target refid="class-globalscope-constant-key-kp-multiply"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-multiply" names="class_@globalscope_constant_key_kp_multiply"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_MULTIPLY</strong> = <literal>4194433</literal></paragraph>
            <paragraph>小键盘的星键/乘以键（*）。</paragraph>
            <target refid="class-globalscope-constant-key-kp-divide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-divide" names="class_@globalscope_constant_key_kp_divide"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_DIVIDE</strong> = <literal>4194434</literal></paragraph>
            <paragraph>小键盘的除以键（/）。</paragraph>
            <target refid="class-globalscope-constant-key-kp-subtract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-subtract" names="class_@globalscope_constant_key_kp_subtract"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_SUBTRACT</strong> = <literal>4194435</literal></paragraph>
            <paragraph>小键盘的减号键（-）。</paragraph>
            <target refid="class-globalscope-constant-key-kp-period"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-period" names="class_@globalscope_constant_key_kp_period"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_PERIOD</strong> = <literal>4194436</literal></paragraph>
            <paragraph>小键盘的点键（.）。</paragraph>
            <target refid="class-globalscope-constant-key-kp-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-add" names="class_@globalscope_constant_key_kp_add"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_ADD</strong> = <literal>4194437</literal></paragraph>
            <paragraph>小键盘的加号键（+）。</paragraph>
            <target refid="class-globalscope-constant-key-kp-0"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-0" names="class_@globalscope_constant_key_kp_0"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_0</strong> = <literal>4194438</literal></paragraph>
            <paragraph>小键盘的数字 0。</paragraph>
            <target refid="class-globalscope-constant-key-kp-1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-1" names="class_@globalscope_constant_key_kp_1"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_1</strong> = <literal>4194439</literal></paragraph>
            <paragraph>小键盘的数字 1。</paragraph>
            <target refid="class-globalscope-constant-key-kp-2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-2" names="class_@globalscope_constant_key_kp_2"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_2</strong> = <literal>4194440</literal></paragraph>
            <paragraph>小键盘的数字 2。</paragraph>
            <target refid="class-globalscope-constant-key-kp-3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-3" names="class_@globalscope_constant_key_kp_3"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_3</strong> = <literal>4194441</literal></paragraph>
            <paragraph>小键盘的数字 3。</paragraph>
            <target refid="class-globalscope-constant-key-kp-4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-4" names="class_@globalscope_constant_key_kp_4"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_4</strong> = <literal>4194442</literal></paragraph>
            <paragraph>小键盘的数字 4。</paragraph>
            <target refid="class-globalscope-constant-key-kp-5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-5" names="class_@globalscope_constant_key_kp_5"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_5</strong> = <literal>4194443</literal></paragraph>
            <paragraph>小键盘的数字 5。</paragraph>
            <target refid="class-globalscope-constant-key-kp-6"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-6" names="class_@globalscope_constant_key_kp_6"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_6</strong> = <literal>4194444</literal></paragraph>
            <paragraph>小键盘的数字 6。</paragraph>
            <target refid="class-globalscope-constant-key-kp-7"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-7" names="class_@globalscope_constant_key_kp_7"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_7</strong> = <literal>4194445</literal></paragraph>
            <paragraph>小键盘的数字 7。</paragraph>
            <target refid="class-globalscope-constant-key-kp-8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-8" names="class_@globalscope_constant_key_kp_8"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_8</strong> = <literal>4194446</literal></paragraph>
            <paragraph>小键盘的数字 8。</paragraph>
            <target refid="class-globalscope-constant-key-kp-9"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-kp-9" names="class_@globalscope_constant_key_kp_9"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KP_9</strong> = <literal>4194447</literal></paragraph>
            <paragraph>小键盘的数字 9。</paragraph>
            <target refid="class-globalscope-constant-key-menu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-menu" names="class_@globalscope_constant_key_menu"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_MENU</strong> = <literal>4194370</literal></paragraph>
            <paragraph>上下文菜单键。</paragraph>
            <target refid="class-globalscope-constant-key-hyper"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-hyper" names="class_@globalscope_constant_key_hyper"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_HYPER</strong> = <literal>4194371</literal></paragraph>
            <paragraph>超级键。（仅在 Linux/X11 上）。</paragraph>
            <target refid="class-globalscope-constant-key-help"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-help" names="class_@globalscope_constant_key_help"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_HELP</strong> = <literal>4194373</literal></paragraph>
            <paragraph>Help 键。</paragraph>
            <target refid="class-globalscope-constant-key-back"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-back" names="class_@globalscope_constant_key_back"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BACK</strong> = <literal>4194376</literal></paragraph>
            <paragraph>媒体返回键。不要与 Android 设备上的返回键相混淆。</paragraph>
            <target refid="class-globalscope-constant-key-forward"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-forward" names="class_@globalscope_constant_key_forward"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_FORWARD</strong> = <literal>4194377</literal></paragraph>
            <paragraph>媒体前进键。</paragraph>
            <target refid="class-globalscope-constant-key-stop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-stop" names="class_@globalscope_constant_key_stop"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_STOP</strong> = <literal>4194378</literal></paragraph>
            <paragraph>媒体停止播放键。</paragraph>
            <target refid="class-globalscope-constant-key-refresh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-refresh" names="class_@globalscope_constant_key_refresh"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_REFRESH</strong> = <literal>4194379</literal></paragraph>
            <paragraph>媒体刷新键。</paragraph>
            <target refid="class-globalscope-constant-key-volumedown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-volumedown" names="class_@globalscope_constant_key_volumedown"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_VOLUMEDOWN</strong> = <literal>4194380</literal></paragraph>
            <paragraph>音量降低键。</paragraph>
            <target refid="class-globalscope-constant-key-volumemute"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-volumemute" names="class_@globalscope_constant_key_volumemute"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_VOLUMEMUTE</strong> = <literal>4194381</literal></paragraph>
            <paragraph>静音键。</paragraph>
            <target refid="class-globalscope-constant-key-volumeup"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-volumeup" names="class_@globalscope_constant_key_volumeup"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_VOLUMEUP</strong> = <literal>4194382</literal></paragraph>
            <paragraph>音量升高键。</paragraph>
            <target refid="class-globalscope-constant-key-mediaplay"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mediaplay" names="class_@globalscope_constant_key_mediaplay"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_MEDIAPLAY</strong> = <literal>4194388</literal></paragraph>
            <paragraph>媒体播放键。</paragraph>
            <target refid="class-globalscope-constant-key-mediastop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mediastop" names="class_@globalscope_constant_key_mediastop"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_MEDIASTOP</strong> = <literal>4194389</literal></paragraph>
            <paragraph>媒体停止播放键。</paragraph>
            <target refid="class-globalscope-constant-key-mediaprevious"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mediaprevious" names="class_@globalscope_constant_key_mediaprevious"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_MEDIAPREVIOUS</strong> = <literal>4194390</literal></paragraph>
            <paragraph>上一首歌键。</paragraph>
            <target refid="class-globalscope-constant-key-medianext"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-medianext" names="class_@globalscope_constant_key_medianext"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_MEDIANEXT</strong> = <literal>4194391</literal></paragraph>
            <paragraph>下一首歌键。</paragraph>
            <target refid="class-globalscope-constant-key-mediarecord"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mediarecord" names="class_@globalscope_constant_key_mediarecord"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_MEDIARECORD</strong> = <literal>4194392</literal></paragraph>
            <paragraph>媒体录制键。</paragraph>
            <target refid="class-globalscope-constant-key-homepage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-homepage" names="class_@globalscope_constant_key_homepage"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_HOMEPAGE</strong> = <literal>4194393</literal></paragraph>
            <paragraph>主页键。</paragraph>
            <target refid="class-globalscope-constant-key-favorites"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-favorites" names="class_@globalscope_constant_key_favorites"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_FAVORITES</strong> = <literal>4194394</literal></paragraph>
            <paragraph>收藏键。</paragraph>
            <target refid="class-globalscope-constant-key-search"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-search" names="class_@globalscope_constant_key_search"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SEARCH</strong> = <literal>4194395</literal></paragraph>
            <paragraph>搜索键。</paragraph>
            <target refid="class-globalscope-constant-key-standby"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-standby" names="class_@globalscope_constant_key_standby"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_STANDBY</strong> = <literal>4194396</literal></paragraph>
            <paragraph>Standby 键。</paragraph>
            <target refid="class-globalscope-constant-key-openurl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-openurl" names="class_@globalscope_constant_key_openurl"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_OPENURL</strong> = <literal>4194397</literal></paragraph>
            <paragraph>打开 URL / 启动浏览器键。</paragraph>
            <target refid="class-globalscope-constant-key-launchmail"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launchmail" names="class_@globalscope_constant_key_launchmail"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHMAIL</strong> = <literal>4194398</literal></paragraph>
            <paragraph>启动邮箱键。</paragraph>
            <target refid="class-globalscope-constant-key-launchmedia"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launchmedia" names="class_@globalscope_constant_key_launchmedia"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHMEDIA</strong> = <literal>4194399</literal></paragraph>
            <paragraph>启动多媒体键。</paragraph>
            <target refid="class-globalscope-constant-key-launch0"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch0" names="class_@globalscope_constant_key_launch0"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH0</strong> = <literal>4194400</literal></paragraph>
            <paragraph>快捷启动键 0。</paragraph>
            <target refid="class-globalscope-constant-key-launch1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch1" names="class_@globalscope_constant_key_launch1"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH1</strong> = <literal>4194401</literal></paragraph>
            <paragraph>快捷启动键 1。</paragraph>
            <target refid="class-globalscope-constant-key-launch2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch2" names="class_@globalscope_constant_key_launch2"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH2</strong> = <literal>4194402</literal></paragraph>
            <paragraph>快捷启动键 2。</paragraph>
            <target refid="class-globalscope-constant-key-launch3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch3" names="class_@globalscope_constant_key_launch3"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH3</strong> = <literal>4194403</literal></paragraph>
            <paragraph>快捷启动键 3。</paragraph>
            <target refid="class-globalscope-constant-key-launch4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch4" names="class_@globalscope_constant_key_launch4"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH4</strong> = <literal>4194404</literal></paragraph>
            <paragraph>快捷启动键 4。</paragraph>
            <target refid="class-globalscope-constant-key-launch5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch5" names="class_@globalscope_constant_key_launch5"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH5</strong> = <literal>4194405</literal></paragraph>
            <paragraph>快捷启动键 5。</paragraph>
            <target refid="class-globalscope-constant-key-launch6"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch6" names="class_@globalscope_constant_key_launch6"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH6</strong> = <literal>4194406</literal></paragraph>
            <paragraph>快捷启动键 6。</paragraph>
            <target refid="class-globalscope-constant-key-launch7"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch7" names="class_@globalscope_constant_key_launch7"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH7</strong> = <literal>4194407</literal></paragraph>
            <paragraph>快捷启动键 7。</paragraph>
            <target refid="class-globalscope-constant-key-launch8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch8" names="class_@globalscope_constant_key_launch8"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH8</strong> = <literal>4194408</literal></paragraph>
            <paragraph>快捷启动键 8。</paragraph>
            <target refid="class-globalscope-constant-key-launch9"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launch9" names="class_@globalscope_constant_key_launch9"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCH9</strong> = <literal>4194409</literal></paragraph>
            <paragraph>快捷启动键 9。</paragraph>
            <target refid="class-globalscope-constant-key-launcha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launcha" names="class_@globalscope_constant_key_launcha"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHA</strong> = <literal>4194410</literal></paragraph>
            <paragraph>快捷启动键 A。</paragraph>
            <target refid="class-globalscope-constant-key-launchb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launchb" names="class_@globalscope_constant_key_launchb"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHB</strong> = <literal>4194411</literal></paragraph>
            <paragraph>快捷启动键 B。</paragraph>
            <target refid="class-globalscope-constant-key-launchc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launchc" names="class_@globalscope_constant_key_launchc"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHC</strong> = <literal>4194412</literal></paragraph>
            <paragraph>快捷启动键 C。</paragraph>
            <target refid="class-globalscope-constant-key-launchd"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launchd" names="class_@globalscope_constant_key_launchd"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHD</strong> = <literal>4194413</literal></paragraph>
            <paragraph>快捷启动键 D。</paragraph>
            <target refid="class-globalscope-constant-key-launche"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launche" names="class_@globalscope_constant_key_launche"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHE</strong> = <literal>4194414</literal></paragraph>
            <paragraph>快捷启动键 E。</paragraph>
            <target refid="class-globalscope-constant-key-launchf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-launchf" names="class_@globalscope_constant_key_launchf"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LAUNCHF</strong> = <literal>4194415</literal></paragraph>
            <paragraph>快捷启动键 F。</paragraph>
            <target refid="class-globalscope-constant-key-globe"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-globe" names="class_@globalscope_constant_key_globe"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_GLOBE</strong> = <literal>4194416</literal></paragraph>
            <paragraph>Mac / iPad 键盘上的“地球”键。</paragraph>
            <target refid="class-globalscope-constant-key-keyboard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-keyboard" names="class_@globalscope_constant_key_keyboard"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_KEYBOARD</strong> = <literal>4194417</literal></paragraph>
            <paragraph>iPad 键盘上的“屏幕键盘”键。</paragraph>
            <target refid="class-globalscope-constant-key-jis-eisu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-jis-eisu" names="class_@globalscope_constant_key_jis_eisu"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_JIS_EISU</strong> = <literal>4194418</literal></paragraph>
            <paragraph>Mac 键盘上的“英数”键。</paragraph>
            <target refid="class-globalscope-constant-key-jis-kana"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-jis-kana" names="class_@globalscope_constant_key_jis_kana"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_JIS_KANA</strong> = <literal>4194419</literal></paragraph>
            <paragraph>Mac 键盘上的“かな”键。</paragraph>
            <target refid="class-globalscope-constant-key-unknown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-unknown" names="class_@globalscope_constant_key_unknown"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_UNKNOWN</strong> = <literal>8388607</literal></paragraph>
            <paragraph>未知键。</paragraph>
            <target refid="class-globalscope-constant-key-space"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-space" names="class_@globalscope_constant_key_space"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SPACE</strong> = <literal>32</literal></paragraph>
            <paragraph>空格键。</paragraph>
            <target refid="class-globalscope-constant-key-exclam"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-exclam" names="class_@globalscope_constant_key_exclam"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_EXCLAM</strong> = <literal>33</literal></paragraph>
            <paragraph>! 键。</paragraph>
            <target refid="class-globalscope-constant-key-quotedbl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-quotedbl" names="class_@globalscope_constant_key_quotedbl"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_QUOTEDBL</strong> = <literal>34</literal></paragraph>
            <paragraph>" 键。</paragraph>
            <target refid="class-globalscope-constant-key-numbersign"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-numbersign" names="class_@globalscope_constant_key_numbersign"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_NUMBERSIGN</strong> = <literal>35</literal></paragraph>
            <paragraph># 键。</paragraph>
            <target refid="class-globalscope-constant-key-dollar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-dollar" names="class_@globalscope_constant_key_dollar"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_DOLLAR</strong> = <literal>36</literal></paragraph>
            <paragraph>$ 键。</paragraph>
            <target refid="class-globalscope-constant-key-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-percent" names="class_@globalscope_constant_key_percent"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PERCENT</strong> = <literal>37</literal></paragraph>
            <paragraph>% 键。</paragraph>
            <target refid="class-globalscope-constant-key-ampersand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-ampersand" names="class_@globalscope_constant_key_ampersand"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_AMPERSAND</strong> = <literal>38</literal></paragraph>
            <paragraph>&amp; 键。</paragraph>
            <target refid="class-globalscope-constant-key-apostrophe"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-apostrophe" names="class_@globalscope_constant_key_apostrophe"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_APOSTROPHE</strong> = <literal>39</literal></paragraph>
            <paragraph>' 键。</paragraph>
            <target refid="class-globalscope-constant-key-parenleft"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-parenleft" names="class_@globalscope_constant_key_parenleft"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PARENLEFT</strong> = <literal>40</literal></paragraph>
            <paragraph>( 键。</paragraph>
            <target refid="class-globalscope-constant-key-parenright"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-parenright" names="class_@globalscope_constant_key_parenright"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PARENRIGHT</strong> = <literal>41</literal></paragraph>
            <paragraph>) 键。</paragraph>
            <target refid="class-globalscope-constant-key-asterisk"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-asterisk" names="class_@globalscope_constant_key_asterisk"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_ASTERISK</strong> = <literal>42</literal></paragraph>
            <paragraph>* 键。</paragraph>
            <target refid="class-globalscope-constant-key-plus"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-plus" names="class_@globalscope_constant_key_plus"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PLUS</strong> = <literal>43</literal></paragraph>
            <bullet_list bullet="+">
                <list_item>
                    <paragraph>键。</paragraph>
                </list_item>
            </bullet_list>
            <target refid="class-globalscope-constant-key-comma"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-comma" names="class_@globalscope_constant_key_comma"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_COMMA</strong> = <literal>44</literal></paragraph>
            <paragraph>, 键。</paragraph>
            <target refid="class-globalscope-constant-key-minus"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-minus" names="class_@globalscope_constant_key_minus"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_MINUS</strong> = <literal>45</literal></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>键。</paragraph>
                </list_item>
            </bullet_list>
            <target refid="class-globalscope-constant-key-period"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-period" names="class_@globalscope_constant_key_period"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_PERIOD</strong> = <literal>46</literal></paragraph>
            <paragraph>. 键。</paragraph>
            <target refid="class-globalscope-constant-key-slash"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-slash" names="class_@globalscope_constant_key_slash"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SLASH</strong> = <literal>47</literal></paragraph>
            <paragraph>/ 键。</paragraph>
            <target refid="class-globalscope-constant-key-0"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-0" names="class_@globalscope_constant_key_0"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_0</strong> = <literal>48</literal></paragraph>
            <paragraph>数字 0 键。</paragraph>
            <target refid="class-globalscope-constant-key-1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-1" names="class_@globalscope_constant_key_1"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_1</strong> = <literal>49</literal></paragraph>
            <paragraph>数字 1 键。</paragraph>
            <target refid="class-globalscope-constant-key-2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-2" names="class_@globalscope_constant_key_2"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_2</strong> = <literal>50</literal></paragraph>
            <paragraph>数字 2 键。</paragraph>
            <target refid="class-globalscope-constant-key-3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-3" names="class_@globalscope_constant_key_3"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_3</strong> = <literal>51</literal></paragraph>
            <paragraph>数字 3 键。</paragraph>
            <target refid="class-globalscope-constant-key-4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-4" names="class_@globalscope_constant_key_4"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_4</strong> = <literal>52</literal></paragraph>
            <paragraph>数字 4 键。</paragraph>
            <target refid="class-globalscope-constant-key-5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-5" names="class_@globalscope_constant_key_5"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_5</strong> = <literal>53</literal></paragraph>
            <paragraph>数字 5 键。</paragraph>
            <target refid="class-globalscope-constant-key-6"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-6" names="class_@globalscope_constant_key_6"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_6</strong> = <literal>54</literal></paragraph>
            <paragraph>数字 6 键。</paragraph>
            <target refid="class-globalscope-constant-key-7"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-7" names="class_@globalscope_constant_key_7"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_7</strong> = <literal>55</literal></paragraph>
            <paragraph>数字 7 键。</paragraph>
            <target refid="class-globalscope-constant-key-8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-8" names="class_@globalscope_constant_key_8"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_8</strong> = <literal>56</literal></paragraph>
            <paragraph>数字 8 键。</paragraph>
            <target refid="class-globalscope-constant-key-9"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-9" names="class_@globalscope_constant_key_9"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_9</strong> = <literal>57</literal></paragraph>
            <paragraph>数字 9 键。</paragraph>
            <target refid="class-globalscope-constant-key-colon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-colon" names="class_@globalscope_constant_key_colon"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_COLON</strong> = <literal>58</literal></paragraph>
            <paragraph>: 键。</paragraph>
            <target refid="class-globalscope-constant-key-semicolon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-semicolon" names="class_@globalscope_constant_key_semicolon"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SEMICOLON</strong> = <literal>59</literal></paragraph>
            <paragraph>; 键。</paragraph>
            <target refid="class-globalscope-constant-key-less"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-less" names="class_@globalscope_constant_key_less"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_LESS</strong> = <literal>60</literal></paragraph>
            <paragraph>&lt; 键。</paragraph>
            <target refid="class-globalscope-constant-key-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-equal" names="class_@globalscope_constant_key_equal"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_EQUAL</strong> = <literal>61</literal></paragraph>
            <paragraph>= 键。</paragraph>
            <target refid="class-globalscope-constant-key-greater"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-greater" names="class_@globalscope_constant_key_greater"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_GREATER</strong> = <literal>62</literal></paragraph>
            <paragraph>&gt; 键。</paragraph>
            <target refid="class-globalscope-constant-key-question"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-question" names="class_@globalscope_constant_key_question"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_QUESTION</strong> = <literal>63</literal></paragraph>
            <paragraph>? 键。</paragraph>
            <target refid="class-globalscope-constant-key-at"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-at" names="class_@globalscope_constant_key_at"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_AT</strong> = <literal>64</literal></paragraph>
            <paragraph>@ 键。</paragraph>
            <target refid="class-globalscope-constant-key-a"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-a" names="class_@globalscope_constant_key_a"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_A</strong> = <literal>65</literal></paragraph>
            <paragraph>A 键。</paragraph>
            <target refid="class-globalscope-constant-key-b"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-b" names="class_@globalscope_constant_key_b"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_B</strong> = <literal>66</literal></paragraph>
            <paragraph>B 键。</paragraph>
            <target refid="class-globalscope-constant-key-c"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-c" names="class_@globalscope_constant_key_c"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_C</strong> = <literal>67</literal></paragraph>
            <paragraph>C 键。</paragraph>
            <target refid="class-globalscope-constant-key-d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-d" names="class_@globalscope_constant_key_d"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_D</strong> = <literal>68</literal></paragraph>
            <paragraph>D 键。</paragraph>
            <target refid="class-globalscope-constant-key-e"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-e" names="class_@globalscope_constant_key_e"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_E</strong> = <literal>69</literal></paragraph>
            <paragraph>E 键。</paragraph>
            <target refid="class-globalscope-constant-key-f"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-f" names="class_@globalscope_constant_key_f"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_F</strong> = <literal>70</literal></paragraph>
            <paragraph>F 键。</paragraph>
            <target refid="class-globalscope-constant-key-g"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-g" names="class_@globalscope_constant_key_g"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_G</strong> = <literal>71</literal></paragraph>
            <paragraph>G 键。</paragraph>
            <target refid="class-globalscope-constant-key-h"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-h" names="class_@globalscope_constant_key_h"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_H</strong> = <literal>72</literal></paragraph>
            <paragraph>H 键。</paragraph>
            <target refid="class-globalscope-constant-key-i"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-i" names="class_@globalscope_constant_key_i"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_I</strong> = <literal>73</literal></paragraph>
            <paragraph>I 键。</paragraph>
            <target refid="class-globalscope-constant-key-j"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-j" names="class_@globalscope_constant_key_j"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_J</strong> = <literal>74</literal></paragraph>
            <paragraph>J 键。</paragraph>
            <target refid="class-globalscope-constant-key-k"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-k" names="class_@globalscope_constant_key_k"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_K</strong> = <literal>75</literal></paragraph>
            <paragraph>K 键。</paragraph>
            <target refid="class-globalscope-constant-key-l"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-l" names="class_@globalscope_constant_key_l"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_L</strong> = <literal>76</literal></paragraph>
            <paragraph>L 键。</paragraph>
            <target refid="class-globalscope-constant-key-m"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-m" names="class_@globalscope_constant_key_m"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_M</strong> = <literal>77</literal></paragraph>
            <paragraph>M 键。</paragraph>
            <target refid="class-globalscope-constant-key-n"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-n" names="class_@globalscope_constant_key_n"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_N</strong> = <literal>78</literal></paragraph>
            <paragraph>N 键。</paragraph>
            <target refid="class-globalscope-constant-key-o"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-o" names="class_@globalscope_constant_key_o"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_O</strong> = <literal>79</literal></paragraph>
            <paragraph>O 键。</paragraph>
            <target refid="class-globalscope-constant-key-p"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-p" names="class_@globalscope_constant_key_p"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_P</strong> = <literal>80</literal></paragraph>
            <paragraph>P 键。</paragraph>
            <target refid="class-globalscope-constant-key-q"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-q" names="class_@globalscope_constant_key_q"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_Q</strong> = <literal>81</literal></paragraph>
            <paragraph>Q 键。</paragraph>
            <target refid="class-globalscope-constant-key-r"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-r" names="class_@globalscope_constant_key_r"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_R</strong> = <literal>82</literal></paragraph>
            <paragraph>R 键。</paragraph>
            <target refid="class-globalscope-constant-key-s"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-s" names="class_@globalscope_constant_key_s"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_S</strong> = <literal>83</literal></paragraph>
            <paragraph>S 键。</paragraph>
            <target refid="class-globalscope-constant-key-t"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-t" names="class_@globalscope_constant_key_t"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_T</strong> = <literal>84</literal></paragraph>
            <paragraph>T 键。</paragraph>
            <target refid="class-globalscope-constant-key-u"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-u" names="class_@globalscope_constant_key_u"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_U</strong> = <literal>85</literal></paragraph>
            <paragraph>U 键。</paragraph>
            <target refid="class-globalscope-constant-key-v"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-v" names="class_@globalscope_constant_key_v"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_V</strong> = <literal>86</literal></paragraph>
            <paragraph>V 键。</paragraph>
            <target refid="class-globalscope-constant-key-w"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-w" names="class_@globalscope_constant_key_w"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_W</strong> = <literal>87</literal></paragraph>
            <paragraph>W 键。</paragraph>
            <target refid="class-globalscope-constant-key-x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-x" names="class_@globalscope_constant_key_x"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_X</strong> = <literal>88</literal></paragraph>
            <paragraph>X 键。</paragraph>
            <target refid="class-globalscope-constant-key-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-y" names="class_@globalscope_constant_key_y"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_Y</strong> = <literal>89</literal></paragraph>
            <paragraph>Y 键。</paragraph>
            <target refid="class-globalscope-constant-key-z"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-z" names="class_@globalscope_constant_key_z"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_Z</strong> = <literal>90</literal></paragraph>
            <paragraph>Z 键。</paragraph>
            <target refid="class-globalscope-constant-key-bracketleft"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-bracketleft" names="class_@globalscope_constant_key_bracketleft"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BRACKETLEFT</strong> = <literal>91</literal></paragraph>
            <paragraph>[ 键。</paragraph>
            <target refid="class-globalscope-constant-key-backslash"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-backslash" names="class_@globalscope_constant_key_backslash"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BACKSLASH</strong> = <literal>92</literal></paragraph>
            <paragraph>\ 键。</paragraph>
            <target refid="class-globalscope-constant-key-bracketright"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-bracketright" names="class_@globalscope_constant_key_bracketright"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BRACKETRIGHT</strong> = <literal>93</literal></paragraph>
            <paragraph>] 键。</paragraph>
            <target refid="class-globalscope-constant-key-asciicircum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-asciicircum" names="class_@globalscope_constant_key_asciicircum"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_ASCIICIRCUM</strong> = <literal>94</literal></paragraph>
            <paragraph>^ 键。</paragraph>
            <target refid="class-globalscope-constant-key-underscore"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-underscore" names="class_@globalscope_constant_key_underscore"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_UNDERSCORE</strong> = <literal>95</literal></paragraph>
            <paragraph>_ 键。</paragraph>
            <target refid="class-globalscope-constant-key-quoteleft"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-quoteleft" names="class_@globalscope_constant_key_quoteleft"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_QUOTELEFT</strong> = <literal>96</literal></paragraph>
            <paragraph>` 键。</paragraph>
            <target refid="class-globalscope-constant-key-braceleft"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-braceleft" names="class_@globalscope_constant_key_braceleft"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BRACELEFT</strong> = <literal>123</literal></paragraph>
            <paragraph>{ 键。</paragraph>
            <target refid="class-globalscope-constant-key-bar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-bar" names="class_@globalscope_constant_key_bar"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BAR</strong> = <literal>124</literal></paragraph>
            <line_block>
                <line>键。</line>
            </line_block>
            <target refid="class-globalscope-constant-key-braceright"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-braceright" names="class_@globalscope_constant_key_braceright"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_BRACERIGHT</strong> = <literal>125</literal></paragraph>
            <paragraph>} 键。</paragraph>
            <target refid="class-globalscope-constant-key-asciitilde"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-asciitilde" names="class_@globalscope_constant_key_asciitilde"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_ASCIITILDE</strong> = <literal>126</literal></paragraph>
            <paragraph>~ 键。</paragraph>
            <target refid="class-globalscope-constant-key-yen"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-yen" names="class_@globalscope_constant_key_yen"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_YEN</strong> = <literal>165</literal></paragraph>
            <paragraph>¥ 键。</paragraph>
            <target refid="class-globalscope-constant-key-section"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-section" names="class_@globalscope_constant_key_section"><reference internal="True" refid="enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>KEY_SECTION</strong> = <literal>167</literal></paragraph>
            <paragraph>§ 键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-keymodifiermask"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-keymodifiermask" names="enum_@globalscope_keymodifiermask">flags <strong>KeyModifierMask</strong>: <reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-key-code-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-code-mask" names="class_@globalscope_constant_key_code_mask"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_CODE_MASK</strong> = <literal>8388607</literal></paragraph>
            <paragraph>键码掩码。</paragraph>
            <target refid="class-globalscope-constant-key-modifier-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-modifier-mask" names="class_@globalscope_constant_key_modifier_mask"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MODIFIER_MASK</strong> = <literal>532676608</literal></paragraph>
            <paragraph>修饰键掩码。</paragraph>
            <target refid="class-globalscope-constant-key-mask-cmd-or-ctrl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mask-cmd-or-ctrl" names="class_@globalscope_constant_key_mask_cmd_or_ctrl"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MASK_CMD_OR_CTRL</strong> = <literal>16777216</literal></paragraph>
            <paragraph>自动重映射为 macOS 上的 <reference internal="True" refid="class-globalscope-constant-key-meta"><inline classes="std std-ref">KEY_META</inline></reference> 和其他平台上的 <reference internal="True" refid="class-globalscope-constant-key-ctrl"><inline classes="std std-ref">KEY_CTRL</inline></reference>，此掩码在实际事件中从不设置，应仅用于键映射。</paragraph>
            <target refid="class-globalscope-constant-key-mask-shift"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mask-shift" names="class_@globalscope_constant_key_mask_shift"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MASK_SHIFT</strong> = <literal>33554432</literal></paragraph>
            <paragraph>Shift 键掩码。</paragraph>
            <target refid="class-globalscope-constant-key-mask-alt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mask-alt" names="class_@globalscope_constant_key_mask_alt"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MASK_ALT</strong> = <literal>67108864</literal></paragraph>
            <paragraph>Alt 或 Option（在 macOS 上）键掩码。</paragraph>
            <target refid="class-globalscope-constant-key-mask-meta"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mask-meta" names="class_@globalscope_constant_key_mask_meta"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MASK_META</strong> = <literal>134217728</literal></paragraph>
            <paragraph>命令（在 macOS 上）或 Meta/Windows 键掩码。</paragraph>
            <target refid="class-globalscope-constant-key-mask-ctrl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mask-ctrl" names="class_@globalscope_constant_key_mask_ctrl"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MASK_CTRL</strong> = <literal>268435456</literal></paragraph>
            <paragraph>Ctrl 键掩码。</paragraph>
            <target refid="class-globalscope-constant-key-mask-kpad"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mask-kpad" names="class_@globalscope_constant_key_mask_kpad"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MASK_KPAD</strong> = <literal>536870912</literal></paragraph>
            <paragraph>Keypad 键掩码。</paragraph>
            <target refid="class-globalscope-constant-key-mask-group-switch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-mask-group-switch" names="class_@globalscope_constant_key_mask_group_switch"><reference internal="True" refid="enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> <strong>KEY_MASK_GROUP_SWITCH</strong> = <literal>1073741824</literal></paragraph>
            <paragraph>Group Switch 键掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-keylocation"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-keylocation" names="enum_@globalscope_keylocation">enum <strong>KeyLocation</strong>: <reference internal="True" refid="enum-globalscope-keylocation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-key-location-unspecified"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-location-unspecified" names="class_@globalscope_constant_key_location_unspecified"><reference internal="True" refid="enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference> <strong>KEY_LOCATION_UNSPECIFIED</strong> = <literal>0</literal></paragraph>
            <paragraph>用于仅出现一次的键，或者当比较不需要区分 <literal>LEFT</literal> 和 <literal>RIGHT</literal> 版本时。</paragraph>
            <paragraph>例如，当使用 <reference internal="True" refuri="class_inputevent#class-inputevent-method-is-match"><inline classes="std std-ref">InputEvent.is_match</inline></reference> 时，具有 <reference internal="True" refid="class-globalscope-constant-key-location-unspecified"><inline classes="std std-ref">KEY_LOCATION_UNSPECIFIED</inline></reference> 的事件将与传递的事件上的任意 <reference internal="True" refid="enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference> 匹配。</paragraph>
            <target refid="class-globalscope-constant-key-location-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-location-left" names="class_@globalscope_constant_key_location_left"><reference internal="True" refid="enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference> <strong>KEY_LOCATION_LEFT</strong> = <literal>1</literal></paragraph>
            <paragraph>对键中位于左侧的键。</paragraph>
            <target refid="class-globalscope-constant-key-location-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-key-location-right" names="class_@globalscope_constant_key_location_right"><reference internal="True" refid="enum-globalscope-keylocation"><inline classes="std std-ref">KeyLocation</inline></reference> <strong>KEY_LOCATION_RIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>对键中位于右侧的键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-mousebutton"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-mousebutton" names="enum_@globalscope_mousebutton">enum <strong>MouseButton</strong>: <reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-mouse-button-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-none" names="class_@globalscope_constant_mouse_button_none"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>与任何鼠标按钮都不对应的枚举值。这用于初始化具有通用状态的 <reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> 属性。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-left" names="class_@globalscope_constant_mouse_button_left"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_LEFT</strong> = <literal>1</literal></paragraph>
            <paragraph>鼠标主键，通常分配给左键。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-right" names="class_@globalscope_constant_mouse_button_right"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_RIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>鼠标次键，通常分配给右键。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-middle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-middle" names="class_@globalscope_constant_mouse_button_middle"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_MIDDLE</strong> = <literal>3</literal></paragraph>
            <paragraph>鼠标中键。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-wheel-up"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-wheel-up" names="class_@globalscope_constant_mouse_button_wheel_up"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_WHEEL_UP</strong> = <literal>4</literal></paragraph>
            <paragraph>鼠标滚轮向上滚动。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-wheel-down"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-wheel-down" names="class_@globalscope_constant_mouse_button_wheel_down"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_WHEEL_DOWN</strong> = <literal>5</literal></paragraph>
            <paragraph>鼠标滚轮向下滚动。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-wheel-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-wheel-left" names="class_@globalscope_constant_mouse_button_wheel_left"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_WHEEL_LEFT</strong> = <literal>6</literal></paragraph>
            <paragraph>鼠标滚轮左键（仅在某些鼠标上有实现）。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-wheel-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-wheel-right" names="class_@globalscope_constant_mouse_button_wheel_right"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_WHEEL_RIGHT</strong> = <literal>7</literal></paragraph>
            <paragraph>鼠标滚轮右键（仅在某些鼠标上有实现）。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-xbutton1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-xbutton1" names="class_@globalscope_constant_mouse_button_xbutton1"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_XBUTTON1</strong> = <literal>8</literal></paragraph>
            <paragraph>鼠标额外键 1。有时会出现，通常位于鼠标的两侧。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-xbutton2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-xbutton2" names="class_@globalscope_constant_mouse_button_xbutton2"><reference internal="True" refid="enum-globalscope-mousebutton"><inline classes="std std-ref">MouseButton</inline></reference> <strong>MOUSE_BUTTON_XBUTTON2</strong> = <literal>9</literal></paragraph>
            <paragraph>鼠标额外键 2。有时会出现，通常位于鼠标的两侧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-mousebuttonmask"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-mousebuttonmask" names="enum_@globalscope_mousebuttonmask">flags <strong>MouseButtonMask</strong>: <reference internal="True" refid="enum-globalscope-mousebuttonmask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-mouse-button-mask-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-mask-left" names="class_@globalscope_constant_mouse_button_mask_left"><reference internal="True" refid="enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference> <strong>MOUSE_BUTTON_MASK_LEFT</strong> = <literal>1</literal></paragraph>
            <paragraph>鼠标主键掩码，通常用于左键。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-mask-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-mask-right" names="class_@globalscope_constant_mouse_button_mask_right"><reference internal="True" refid="enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference> <strong>MOUSE_BUTTON_MASK_RIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>鼠标次键掩码，通常用于右键。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-mask-middle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-mask-middle" names="class_@globalscope_constant_mouse_button_mask_middle"><reference internal="True" refid="enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference> <strong>MOUSE_BUTTON_MASK_MIDDLE</strong> = <literal>4</literal></paragraph>
            <paragraph>鼠标中键掩码。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-mask-mb-xbutton1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-mask-mb-xbutton1" names="class_@globalscope_constant_mouse_button_mask_mb_xbutton1"><reference internal="True" refid="enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference> <strong>MOUSE_BUTTON_MASK_MB_XBUTTON1</strong> = <literal>128</literal></paragraph>
            <paragraph>鼠标额外键 1 掩码。</paragraph>
            <target refid="class-globalscope-constant-mouse-button-mask-mb-xbutton2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-mouse-button-mask-mb-xbutton2" names="class_@globalscope_constant_mouse_button_mask_mb_xbutton2"><reference internal="True" refid="enum-globalscope-mousebuttonmask"><inline classes="std std-ref">MouseButtonMask</inline></reference> <strong>MOUSE_BUTTON_MASK_MB_XBUTTON2</strong> = <literal>256</literal></paragraph>
            <paragraph>鼠标额外键 2 掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-joybutton"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-joybutton" names="enum_@globalscope_joybutton">enum <strong>JoyButton</strong>: <reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-joy-button-invalid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-invalid" names="class_@globalscope_constant_joy_button_invalid"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_INVALID</strong> = <literal>-1</literal></paragraph>
            <paragraph>无效的游戏控制器按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-a"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-a" names="class_@globalscope_constant_joy_button_a"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_A</strong> = <literal>0</literal></paragraph>
            <paragraph>游戏控制器 SDL 按键 A。对应底部动作按钮：Sony Cross、Xbox A、Nintendo B。</paragraph>
            <target refid="class-globalscope-constant-joy-button-b"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-b" names="class_@globalscope_constant_joy_button_b"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_B</strong> = <literal>1</literal></paragraph>
            <paragraph>游戏控制器 SDL 按钮 B。对应右侧动作按钮：Sony Circle、Xbox B、Nintendo A。</paragraph>
            <target refid="class-globalscope-constant-joy-button-x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-x" names="class_@globalscope_constant_joy_button_x"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_X</strong> = <literal>2</literal></paragraph>
            <paragraph>游戏控制器 SDL 按钮 X。对应左侧动作按钮：Sony Square、Xbox X、Nintendo Y。</paragraph>
            <target refid="class-globalscope-constant-joy-button-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-y" names="class_@globalscope_constant_joy_button_y"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_Y</strong> = <literal>3</literal></paragraph>
            <paragraph>游戏控制器 SDL 按钮 Y。对应顶部动作按钮：Sony Triangle、Xbox Y、Nintendo X。</paragraph>
            <target refid="class-globalscope-constant-joy-button-back"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-back" names="class_@globalscope_constant_joy_button_back"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_BACK</strong> = <literal>4</literal></paragraph>
            <paragraph>游戏控制器 SDL back 按钮。对应于 Sony Select、Xbox Back、Nintendo - 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-guide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-guide" names="class_@globalscope_constant_joy_button_guide"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_GUIDE</strong> = <literal>5</literal></paragraph>
            <paragraph>游戏控制器 SDL guide 按钮。对应于索尼 PS、Xbox 的 Home 键。</paragraph>
            <target refid="class-globalscope-constant-joy-button-start"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-start" names="class_@globalscope_constant_joy_button_start"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_START</strong> = <literal>6</literal></paragraph>
            <paragraph>游戏控制器 SDL start 按钮。对应于 Sony Options、Xbox Menu、Nintendo + 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-left-stick"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-left-stick" names="class_@globalscope_constant_joy_button_left_stick"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_LEFT_STICK</strong> = <literal>7</literal></paragraph>
            <paragraph>游戏控制器 SDL 左摇杆按钮。对应于 Sony L3、Xbox L/LS 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-right-stick"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-right-stick" names="class_@globalscope_constant_joy_button_right_stick"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_RIGHT_STICK</strong> = <literal>8</literal></paragraph>
            <paragraph>游戏控制器 SDL 右摇杆按钮。对应于 Sony R3、Xbox R/RS 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-left-shoulder"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-left-shoulder" names="class_@globalscope_constant_joy_button_left_shoulder"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_LEFT_SHOULDER</strong> = <literal>9</literal></paragraph>
            <paragraph>游戏控制器 SDL 左肩按钮。对应于 Sony L1、Xbox LB 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-right-shoulder"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-right-shoulder" names="class_@globalscope_constant_joy_button_right_shoulder"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_RIGHT_SHOULDER</strong> = <literal>10</literal></paragraph>
            <paragraph>游戏控制器 SDL 右肩按钮。对应于 Sony R1、Xbox RB 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-dpad-up"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-dpad-up" names="class_@globalscope_constant_joy_button_dpad_up"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_DPAD_UP</strong> = <literal>11</literal></paragraph>
            <paragraph>游戏控制器方向键向上按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-dpad-down"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-dpad-down" names="class_@globalscope_constant_joy_button_dpad_down"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_DPAD_DOWN</strong> = <literal>12</literal></paragraph>
            <paragraph>游戏控制器方向键向下按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-dpad-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-dpad-left" names="class_@globalscope_constant_joy_button_dpad_left"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_DPAD_LEFT</strong> = <literal>13</literal></paragraph>
            <paragraph>游戏控制器方向键向左键。</paragraph>
            <target refid="class-globalscope-constant-joy-button-dpad-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-dpad-right" names="class_@globalscope_constant_joy_button_dpad_right"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_DPAD_RIGHT</strong> = <literal>14</literal></paragraph>
            <paragraph>游戏控制器方向键向右键。</paragraph>
            <target refid="class-globalscope-constant-joy-button-misc1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-misc1" names="class_@globalscope_constant_joy_button_misc1"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_MISC1</strong> = <literal>15</literal></paragraph>
            <paragraph>游戏控制器 SDL 杂项按钮。对应 Xbox 分享键、PS5 麦克风键、Nintendo Switch 捕捉键。</paragraph>
            <target refid="class-globalscope-constant-joy-button-paddle1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-paddle1" names="class_@globalscope_constant_joy_button_paddle1"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_PADDLE1</strong> = <literal>16</literal></paragraph>
            <paragraph>游戏控制器 SDL 拨片 1 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-paddle2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-paddle2" names="class_@globalscope_constant_joy_button_paddle2"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_PADDLE2</strong> = <literal>17</literal></paragraph>
            <paragraph>游戏控制器 SDL 拨片 2 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-paddle3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-paddle3" names="class_@globalscope_constant_joy_button_paddle3"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_PADDLE3</strong> = <literal>18</literal></paragraph>
            <paragraph>游戏控制器 SDL 拨片 3 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-paddle4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-paddle4" names="class_@globalscope_constant_joy_button_paddle4"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_PADDLE4</strong> = <literal>19</literal></paragraph>
            <paragraph>游戏控制器 SDL 拨片 4 按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-touchpad"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-touchpad" names="class_@globalscope_constant_joy_button_touchpad"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_TOUCHPAD</strong> = <literal>20</literal></paragraph>
            <paragraph>游戏控制器 SDL 触摸板按钮。</paragraph>
            <target refid="class-globalscope-constant-joy-button-sdl-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-sdl-max" names="class_@globalscope_constant_joy_button_sdl_max"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_SDL_MAX</strong> = <literal>21</literal></paragraph>
            <paragraph>SDL 游戏控制器按钮的数量。</paragraph>
            <target refid="class-globalscope-constant-joy-button-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-button-max" names="class_@globalscope_constant_joy_button_max"><reference internal="True" refid="enum-globalscope-joybutton"><inline classes="std std-ref">JoyButton</inline></reference> <strong>JOY_BUTTON_MAX</strong> = <literal>128</literal></paragraph>
            <paragraph>引擎所支持的最大游戏控制器按钮数。特定平台上的实际界限可能更低：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Android：</strong>最多 36 个按钮。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Linux：</strong>最多 80 个按钮。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Windows</strong> 和 <strong>macOS：</strong>最多 128 个按钮。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-joyaxis"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-joyaxis" names="enum_@globalscope_joyaxis">enum <strong>JoyAxis</strong>: <reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-joy-axis-invalid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-invalid" names="class_@globalscope_constant_joy_axis_invalid"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_INVALID</strong> = <literal>-1</literal></paragraph>
            <paragraph>无效的游戏控制器轴。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-left-x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-left-x" names="class_@globalscope_constant_joy_axis_left_x"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_LEFT_X</strong> = <literal>0</literal></paragraph>
            <paragraph>游戏控制器左操纵杆 x 轴。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-left-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-left-y" names="class_@globalscope_constant_joy_axis_left_y"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_LEFT_Y</strong> = <literal>1</literal></paragraph>
            <paragraph>游戏控制器左操纵杆 y 轴。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-right-x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-right-x" names="class_@globalscope_constant_joy_axis_right_x"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_RIGHT_X</strong> = <literal>2</literal></paragraph>
            <paragraph>游戏控制器右操纵杆 x 轴。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-right-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-right-y" names="class_@globalscope_constant_joy_axis_right_y"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_RIGHT_Y</strong> = <literal>3</literal></paragraph>
            <paragraph>游戏控制器右操纵杆 y 轴。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-trigger-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-trigger-left" names="class_@globalscope_constant_joy_axis_trigger_left"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_TRIGGER_LEFT</strong> = <literal>4</literal></paragraph>
            <paragraph>游戏控制器左扳机轴。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-trigger-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-trigger-right" names="class_@globalscope_constant_joy_axis_trigger_right"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_TRIGGER_RIGHT</strong> = <literal>5</literal></paragraph>
            <paragraph>游戏控制器左扳机轴。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-sdl-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-sdl-max" names="class_@globalscope_constant_joy_axis_sdl_max"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_SDL_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>SDL 游戏控制器轴的数量。</paragraph>
            <target refid="class-globalscope-constant-joy-axis-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-joy-axis-max" names="class_@globalscope_constant_joy_axis_max"><reference internal="True" refid="enum-globalscope-joyaxis"><inline classes="std std-ref">JoyAxis</inline></reference> <strong>JOY_AXIS_MAX</strong> = <literal>10</literal></paragraph>
            <paragraph>最大游戏控制器轴数：OpenVR 最多支持 5 个操纵杆，总共 10 个轴。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-midimessage"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-midimessage" names="enum_@globalscope_midimessage">enum <strong>MIDIMessage</strong>: <reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-midi-message-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-none" names="class_@globalscope_constant_midi_message_none"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>不对应任何 MIDI 消息。这是 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi-property-message"><inline classes="std std-ref">InputEventMIDI.message</inline></reference> 的默认值。</paragraph>
            <target refid="class-globalscope-constant-midi-message-note-off"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-note-off" names="class_@globalscope_constant_midi_message_note_off"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_NOTE_OFF</strong> = <literal>8</literal></paragraph>
            <paragraph>音符被释放时发送的 MIDI 消息。</paragraph>
            <paragraph><strong>注意：</strong>并非所有 MIDI 设备都会发送该消息；有些可能会发送 <reference internal="True" refid="class-globalscope-constant-midi-message-note-on"><inline classes="std std-ref">MIDI_MESSAGE_NOTE_ON</inline></reference>，并将 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi-property-velocity"><inline classes="std std-ref">InputEventMIDI.velocity</inline></reference> 设置为 <literal>0</literal>。</paragraph>
            <target refid="class-globalscope-constant-midi-message-note-on"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-note-on" names="class_@globalscope_constant_midi_message_note_on"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_NOTE_ON</strong> = <literal>9</literal></paragraph>
            <paragraph>音符被按下时发送的 MIDI 消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-aftertouch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-aftertouch" names="class_@globalscope_constant_midi_message_aftertouch"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_AFTERTOUCH</strong> = <literal>10</literal></paragraph>
            <paragraph>发送 MIDI 消息以指示音符被按下时的压力的变化，也称为触后。</paragraph>
            <target refid="class-globalscope-constant-midi-message-control-change"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-control-change" names="class_@globalscope_constant_midi_message_control_change"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_CONTROL_CHANGE</strong> = <literal>11</literal></paragraph>
            <paragraph>控制器值发生变化时发送的 MIDI 消息。MIDI 设备中不演奏音符的输入都属于控制器。包括音量滑块、平衡滑块、声像滑块，以及各种开关和踏板等。简要清单见 <reference name="General MIDI 规范" refuri="https://zh.wikipedia.org/zh-cn/General_MIDI#%E6%8E%A7%E5%88%B6%E5%99%A8%E4%BA%8B%E4%BB%B6%EF%BC%88Controller_events%EF%BC%89">General MIDI 规范</reference>。</paragraph>
            <target refid="class-globalscope-constant-midi-message-program-change"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-program-change" names="class_@globalscope_constant_midi_message_program_change"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_PROGRAM_CHANGE</strong> = <literal>12</literal></paragraph>
            <paragraph>MIDI 设备更改乐器（也叫<emphasis>音色</emphasis>或<emphasis>预设</emphasis>）时发送的 MIDI 消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-channel-pressure"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-channel-pressure" names="class_@globalscope_constant_midi_message_channel_pressure"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_CHANNEL_PRESSURE</strong> = <literal>13</literal></paragraph>
            <paragraph>表示整个通道的压力发生改变时发送的 MIDI 消息。部分 MIDI 设备可能用这个消息来代替 <reference internal="True" refid="class-globalscope-constant-midi-message-aftertouch"><inline classes="std std-ref">MIDI_MESSAGE_AFTERTOUCH</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-midi-message-pitch-bend"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-pitch-bend" names="class_@globalscope_constant_midi_message_pitch_bend"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_PITCH_BEND</strong> = <literal>14</literal></paragraph>
            <paragraph>音高弯曲器的值发生改变时发送的 MIDI 消息，音高弯曲器通常是 MIDI 设备上的滚轮。</paragraph>
            <target refid="class-globalscope-constant-midi-message-system-exclusive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-system-exclusive" names="class_@globalscope_constant_midi_message_system_exclusive"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_SYSTEM_EXCLUSIVE</strong> = <literal>240</literal></paragraph>
            <paragraph>MIDI 系统独占消息（SysEx）。这类消息并未标准化，取决于发送的 MIDI 设备。</paragraph>
            <paragraph><strong>注意：</strong>尚未实现从 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi"><inline classes="std std-ref">InputEventMIDI</inline></reference> 获取该消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-quarter-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-quarter-frame" names="class_@globalscope_constant_midi_message_quarter_frame"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_QUARTER_FRAME</strong> = <literal>241</literal></paragraph>
            <paragraph>每四分之一帧发送的 MIDI 消息，用于让连接的 MIDI 设备保持同步。与 <reference internal="True" refid="class-globalscope-constant-midi-message-timing-clock"><inline classes="std std-ref">MIDI_MESSAGE_TIMING_CLOCK</inline></reference> 相关。</paragraph>
            <paragraph><strong>注意：</strong>尚未实现从 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi"><inline classes="std std-ref">InputEventMIDI</inline></reference> 获取该消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-song-position-pointer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-song-position-pointer" names="class_@globalscope_constant_midi_message_song_position_pointer"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_SONG_POSITION_POINTER</strong> = <literal>242</literal></paragraph>
            <paragraph>跳转至当前序列或乐曲中的某个位置时发送的 MIDI 消息。</paragraph>
            <paragraph><strong>注意：</strong>尚未实现从 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi"><inline classes="std std-ref">InputEventMIDI</inline></reference> 获取该消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-song-select"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-song-select" names="class_@globalscope_constant_midi_message_song_select"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_SONG_SELECT</strong> = <literal>243</literal></paragraph>
            <paragraph>发送以选择要播放的序列或歌曲的 MIDI 消息。</paragraph>
            <paragraph><strong>注意：</strong>从 <reference internal="True" refuri="class_inputeventmidi#class-inputeventmidi"><inline classes="std std-ref">InputEventMIDI</inline></reference> 获取该消息的数据尚未实现。</paragraph>
            <target refid="class-globalscope-constant-midi-message-tune-request"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-tune-request" names="class_@globalscope_constant_midi_message_tune_request"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_TUNE_REQUEST</strong> = <literal>246</literal></paragraph>
            <paragraph>请求调校时发送的 MIDI 消息。适用于模拟合成器。大多数现代 MIDI 设备不需要这个消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-timing-clock"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-timing-clock" names="class_@globalscope_constant_midi_message_timing_clock"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_TIMING_CLOCK</strong> = <literal>248</literal></paragraph>
            <paragraph>在 <reference internal="True" refid="class-globalscope-constant-midi-message-quarter-frame"><inline classes="std std-ref">MIDI_MESSAGE_QUARTER_FRAME</inline></reference> 之后发送 24 次的 MIDI 消息，用于让连接的 MIDI 设备保持同步。</paragraph>
            <target refid="class-globalscope-constant-midi-message-start"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-start" names="class_@globalscope_constant_midi_message_start"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_START</strong> = <literal>250</literal></paragraph>
            <paragraph>发送以从头开始当前序列或歌曲的 MIDI 消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-continue"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-continue" names="class_@globalscope_constant_midi_message_continue"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_CONTINUE</strong> = <literal>251</literal></paragraph>
            <paragraph>发送以从当前序列或歌曲的暂停点恢复的 MIDI 消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-stop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-stop" names="class_@globalscope_constant_midi_message_stop"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_STOP</strong> = <literal>252</literal></paragraph>
            <paragraph>发送以暂停当前序列或歌曲的 MIDI 消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-active-sensing"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-active-sensing" names="class_@globalscope_constant_midi_message_active_sensing"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_ACTIVE_SENSING</strong> = <literal>254</literal></paragraph>
            <paragraph>MIDI 设备空闲时不断发送的 MIDI 消息，用于告知接收方连接仍然有效。大多数 MIDI 设备不会发送这个消息。</paragraph>
            <target refid="class-globalscope-constant-midi-message-system-reset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-midi-message-system-reset" names="class_@globalscope_constant_midi_message_system_reset"><reference internal="True" refid="enum-globalscope-midimessage"><inline classes="std std-ref">MIDIMessage</inline></reference> <strong>MIDI_MESSAGE_SYSTEM_RESET</strong> = <literal>255</literal></paragraph>
            <paragraph>用于将 MIDI 设备恢复至开机时的默认状态而发送的 MIDI 消息。MIDI 设备正在启动时不应该发送。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-error"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-error" names="enum_@globalscope_error">enum <strong>Error</strong>: <reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-ok"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-ok" names="class_@globalscope_constant_ok"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>OK</strong> = <literal>0</literal></paragraph>
            <paragraph>返回 <reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 的方法会在没有错误发生时返回 <reference internal="True" refid="class-globalscope-constant-ok"><inline classes="std std-ref">OK</inline></reference>。</paragraph>
            <paragraph>由于 <reference internal="True" refid="class-globalscope-constant-ok"><inline classes="std std-ref">OK</inline></reference> 的值为 0，并且所有其他错误常数都是正整数，因此返回值也可以用于布尔检查。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var error = method_that_returns_error()
if error != OK:
    printerr("Failure!")

# 或者，等价于：
if error:
    printerr("Still failing!")</literal_block>
            <paragraph><strong>注意：</strong>许多函数不返回错误代码，但会将错误信息打印到标准输出。</paragraph>
            <target refid="class-globalscope-constant-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-failed" names="class_@globalscope_constant_failed"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>FAILED</strong> = <literal>1</literal></paragraph>
            <paragraph>一般性错误。</paragraph>
            <target refid="class-globalscope-constant-err-unavailable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-unavailable" names="class_@globalscope_constant_err_unavailable"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_UNAVAILABLE</strong> = <literal>2</literal></paragraph>
            <paragraph>不可用的错误。</paragraph>
            <target refid="class-globalscope-constant-err-unconfigured"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-unconfigured" names="class_@globalscope_constant_err_unconfigured"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_UNCONFIGURED</strong> = <literal>3</literal></paragraph>
            <paragraph>未配置的错误。</paragraph>
            <target refid="class-globalscope-constant-err-unauthorized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-unauthorized" names="class_@globalscope_constant_err_unauthorized"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_UNAUTHORIZED</strong> = <literal>4</literal></paragraph>
            <paragraph>未经授权的错误。</paragraph>
            <target refid="class-globalscope-constant-err-parameter-range-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-parameter-range-error" names="class_@globalscope_constant_err_parameter_range_error"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_PARAMETER_RANGE_ERROR</strong> = <literal>5</literal></paragraph>
            <paragraph>参数范围错误。</paragraph>
            <target refid="class-globalscope-constant-err-out-of-memory"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-out-of-memory" names="class_@globalscope_constant_err_out_of_memory"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_OUT_OF_MEMORY</strong> = <literal>6</literal></paragraph>
            <paragraph>内存不足（OOM）错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-not-found"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-not-found" names="class_@globalscope_constant_err_file_not_found"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_NOT_FOUND</strong> = <literal>7</literal></paragraph>
            <paragraph>文件：未找到错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-bad-drive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-bad-drive" names="class_@globalscope_constant_err_file_bad_drive"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_BAD_DRIVE</strong> = <literal>8</literal></paragraph>
            <paragraph>文件：坏驱动器错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-bad-path"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-bad-path" names="class_@globalscope_constant_err_file_bad_path"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_BAD_PATH</strong> = <literal>9</literal></paragraph>
            <paragraph>文件：错误的路径错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-no-permission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-no-permission" names="class_@globalscope_constant_err_file_no_permission"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_NO_PERMISSION</strong> = <literal>10</literal></paragraph>
            <paragraph>文件：无权限错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-already-in-use"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-already-in-use" names="class_@globalscope_constant_err_file_already_in_use"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_ALREADY_IN_USE</strong> = <literal>11</literal></paragraph>
            <paragraph>文件：已在使用错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-cant-open"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-cant-open" names="class_@globalscope_constant_err_file_cant_open"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_CANT_OPEN</strong> = <literal>12</literal></paragraph>
            <paragraph>文件：无法打开错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-cant-write"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-cant-write" names="class_@globalscope_constant_err_file_cant_write"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_CANT_WRITE</strong> = <literal>13</literal></paragraph>
            <paragraph>文件：无法写入错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-cant-read"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-cant-read" names="class_@globalscope_constant_err_file_cant_read"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_CANT_READ</strong> = <literal>14</literal></paragraph>
            <paragraph>文件：无法读取错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-unrecognized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-unrecognized" names="class_@globalscope_constant_err_file_unrecognized"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_UNRECOGNIZED</strong> = <literal>15</literal></paragraph>
            <paragraph>文件：未识别的错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-corrupt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-corrupt" names="class_@globalscope_constant_err_file_corrupt"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_CORRUPT</strong> = <literal>16</literal></paragraph>
            <paragraph>文件：损坏错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-missing-dependencies"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-missing-dependencies" names="class_@globalscope_constant_err_file_missing_dependencies"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_MISSING_DEPENDENCIES</strong> = <literal>17</literal></paragraph>
            <paragraph>文件：缺少依赖项错误。</paragraph>
            <target refid="class-globalscope-constant-err-file-eof"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-file-eof" names="class_@globalscope_constant_err_file_eof"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_FILE_EOF</strong> = <literal>18</literal></paragraph>
            <paragraph>文件：文件结束（EOF）错误。</paragraph>
            <target refid="class-globalscope-constant-err-cant-open"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-cant-open" names="class_@globalscope_constant_err_cant_open"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CANT_OPEN</strong> = <literal>19</literal></paragraph>
            <paragraph>无法打开错误。</paragraph>
            <target refid="class-globalscope-constant-err-cant-create"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-cant-create" names="class_@globalscope_constant_err_cant_create"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CANT_CREATE</strong> = <literal>20</literal></paragraph>
            <paragraph>无法创建错误。</paragraph>
            <target refid="class-globalscope-constant-err-query-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-query-failed" names="class_@globalscope_constant_err_query_failed"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_QUERY_FAILED</strong> = <literal>21</literal></paragraph>
            <paragraph>查询失败错误。</paragraph>
            <target refid="class-globalscope-constant-err-already-in-use"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-already-in-use" names="class_@globalscope_constant_err_already_in_use"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_ALREADY_IN_USE</strong> = <literal>22</literal></paragraph>
            <paragraph>已在使用中错误。</paragraph>
            <target refid="class-globalscope-constant-err-locked"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-locked" names="class_@globalscope_constant_err_locked"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_LOCKED</strong> = <literal>23</literal></paragraph>
            <paragraph>锁定错误。</paragraph>
            <target refid="class-globalscope-constant-err-timeout"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-timeout" names="class_@globalscope_constant_err_timeout"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_TIMEOUT</strong> = <literal>24</literal></paragraph>
            <paragraph>超时错误。</paragraph>
            <target refid="class-globalscope-constant-err-cant-connect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-cant-connect" names="class_@globalscope_constant_err_cant_connect"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CANT_CONNECT</strong> = <literal>25</literal></paragraph>
            <paragraph>无法连接错误。</paragraph>
            <target refid="class-globalscope-constant-err-cant-resolve"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-cant-resolve" names="class_@globalscope_constant_err_cant_resolve"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CANT_RESOLVE</strong> = <literal>26</literal></paragraph>
            <paragraph>无法解决错误。</paragraph>
            <target refid="class-globalscope-constant-err-connection-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-connection-error" names="class_@globalscope_constant_err_connection_error"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CONNECTION_ERROR</strong> = <literal>27</literal></paragraph>
            <paragraph>连接错误。</paragraph>
            <target refid="class-globalscope-constant-err-cant-acquire-resource"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-cant-acquire-resource" names="class_@globalscope_constant_err_cant_acquire_resource"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CANT_ACQUIRE_RESOURCE</strong> = <literal>28</literal></paragraph>
            <paragraph>无法获取资源错误。</paragraph>
            <target refid="class-globalscope-constant-err-cant-fork"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-cant-fork" names="class_@globalscope_constant_err_cant_fork"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CANT_FORK</strong> = <literal>29</literal></paragraph>
            <paragraph>无法分叉进程错误。</paragraph>
            <target refid="class-globalscope-constant-err-invalid-data"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-invalid-data" names="class_@globalscope_constant_err_invalid_data"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_INVALID_DATA</strong> = <literal>30</literal></paragraph>
            <paragraph>无效数据错误。</paragraph>
            <target refid="class-globalscope-constant-err-invalid-parameter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-invalid-parameter" names="class_@globalscope_constant_err_invalid_parameter"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_INVALID_PARAMETER</strong> = <literal>31</literal></paragraph>
            <paragraph>无效参数错误。</paragraph>
            <target refid="class-globalscope-constant-err-already-exists"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-already-exists" names="class_@globalscope_constant_err_already_exists"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_ALREADY_EXISTS</strong> = <literal>32</literal></paragraph>
            <paragraph>已存在的错误。</paragraph>
            <target refid="class-globalscope-constant-err-does-not-exist"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-does-not-exist" names="class_@globalscope_constant_err_does_not_exist"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_DOES_NOT_EXIST</strong> = <literal>33</literal></paragraph>
            <paragraph>不存在的错误。</paragraph>
            <target refid="class-globalscope-constant-err-database-cant-read"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-database-cant-read" names="class_@globalscope_constant_err_database_cant_read"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_DATABASE_CANT_READ</strong> = <literal>34</literal></paragraph>
            <paragraph>数据库：读取错误。</paragraph>
            <target refid="class-globalscope-constant-err-database-cant-write"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-database-cant-write" names="class_@globalscope_constant_err_database_cant_write"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_DATABASE_CANT_WRITE</strong> = <literal>35</literal></paragraph>
            <paragraph>数据库：写入错误。</paragraph>
            <target refid="class-globalscope-constant-err-compilation-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-compilation-failed" names="class_@globalscope_constant_err_compilation_failed"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_COMPILATION_FAILED</strong> = <literal>36</literal></paragraph>
            <paragraph>编译失败错误。</paragraph>
            <target refid="class-globalscope-constant-err-method-not-found"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-method-not-found" names="class_@globalscope_constant_err_method_not_found"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_METHOD_NOT_FOUND</strong> = <literal>37</literal></paragraph>
            <paragraph>方法未找到错误。</paragraph>
            <target refid="class-globalscope-constant-err-link-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-link-failed" names="class_@globalscope_constant_err_link_failed"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_LINK_FAILED</strong> = <literal>38</literal></paragraph>
            <paragraph>链接失败错误。</paragraph>
            <target refid="class-globalscope-constant-err-script-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-script-failed" names="class_@globalscope_constant_err_script_failed"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_SCRIPT_FAILED</strong> = <literal>39</literal></paragraph>
            <paragraph>脚本失败错误。</paragraph>
            <target refid="class-globalscope-constant-err-cyclic-link"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-cyclic-link" names="class_@globalscope_constant_err_cyclic_link"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_CYCLIC_LINK</strong> = <literal>40</literal></paragraph>
            <paragraph>循环链接（导入循环）错误。</paragraph>
            <target refid="class-globalscope-constant-err-invalid-declaration"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-invalid-declaration" names="class_@globalscope_constant_err_invalid_declaration"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_INVALID_DECLARATION</strong> = <literal>41</literal></paragraph>
            <paragraph>无效声明错误。</paragraph>
            <target refid="class-globalscope-constant-err-duplicate-symbol"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-duplicate-symbol" names="class_@globalscope_constant_err_duplicate_symbol"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_DUPLICATE_SYMBOL</strong> = <literal>42</literal></paragraph>
            <paragraph>符号重复错误。</paragraph>
            <target refid="class-globalscope-constant-err-parse-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-parse-error" names="class_@globalscope_constant_err_parse_error"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_PARSE_ERROR</strong> = <literal>43</literal></paragraph>
            <paragraph>解析错误。</paragraph>
            <target refid="class-globalscope-constant-err-busy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-busy" names="class_@globalscope_constant_err_busy"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_BUSY</strong> = <literal>44</literal></paragraph>
            <paragraph>忙碌错误。</paragraph>
            <target refid="class-globalscope-constant-err-skip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-skip" names="class_@globalscope_constant_err_skip"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_SKIP</strong> = <literal>45</literal></paragraph>
            <paragraph>跳过错误。</paragraph>
            <target refid="class-globalscope-constant-err-help"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-help" names="class_@globalscope_constant_err_help"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_HELP</strong> = <literal>46</literal></paragraph>
            <paragraph>帮助错误。内部使用，用于将 <literal>--version</literal> 或 <literal>--help</literal> 作为选项传递给可执行文件的情况。</paragraph>
            <target refid="class-globalscope-constant-err-bug"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-bug" names="class_@globalscope_constant_err_bug"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_BUG</strong> = <literal>47</literal></paragraph>
            <paragraph>Bug 错误，由方法中的实现问题引起。</paragraph>
            <paragraph><strong>注意：</strong>如果内置方法返回此代码，请在 <reference name="GitHub 问题追踪器" refuri="https://github.com/godotengine/godot/issues">GitHub 问题追踪器</reference> 上开一个问题。</paragraph>
            <target refid="class-globalscope-constant-err-printer-on-fire"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-err-printer-on-fire" names="class_@globalscope_constant_err_printer_on_fire"><reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>ERR_PRINTER_ON_FIRE</strong> = <literal>48</literal></paragraph>
            <paragraph>打印机起火错误（这是个彩蛋，引擎中没有内置方法会返回此错误码）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-propertyhint"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-propertyhint" names="enum_@globalscope_propertyhint">enum <strong>PropertyHint</strong>: <reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-property-hint-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-none" names="class_@globalscope_constant_property_hint_none"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>该属性没有编辑器提示。</paragraph>
            <target refid="class-globalscope-constant-property-hint-range"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-range" names="class_@globalscope_constant_property_hint_range"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_RANGE</strong> = <literal>1</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 或 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 属性应在提示字符串 <literal>"最小值,最大值"</literal> 或 <literal>"最小值,最大值,步长"</literal> 指定的范围内。提示字符串可以选择包含 <literal>"or_greater"</literal> 和/或 <literal>"or_less"</literal>，从而允许手动输入高于最大值或低于最小值的值。</paragraph>
            <paragraph><strong>示例：</strong><literal>"-360,360,1,or_greater,or_less"</literal>。</paragraph>
            <paragraph>此外，还可以包含其他关键字：<literal>"exp"</literal> 用于指数范围编辑，<literal>"radians_as_degrees"</literal> 用于以度数编辑弧度角（范围的取值也使用度数），<literal>"degrees"</literal> 提示角度，<literal>"hide_slider"</literal> 则会隐藏滑块。</paragraph>
            <target refid="class-globalscope-constant-property-hint-enum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-enum" names="class_@globalscope_constant_property_hint_enum"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_ENUM</strong> = <literal>2</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 或 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性是枚举值，可通过提示字符串在指定的列表中选取。</paragraph>
            <paragraph>该提示字符串是逗号分隔的名称列表，例如 <literal>"Hello,Something,Else"</literal>。 <strong>不会</strong>从名称的任何一端删除空格。对于整数属性，列表中的第一个名称的值为 0，下一个名称的值为 1，依此类推。也可以通过将 <literal>:integer</literal> 附加到名称来显式指定值，例如 <literal>"Zero,One,Three:3,Four,Six:6"</literal>。</paragraph>
            <target refid="class-globalscope-constant-property-hint-enum-suggestion"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-enum-suggestion" names="class_@globalscope_constant_property_hint_enum_suggestion"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_ENUM_SUGGESTION</strong> = <literal>3</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性为枚举值，可以通过提示字符串在指定的列表中选取，例如 <literal>"Hello,Something,Else"</literal>。</paragraph>
            <paragraph>与 <reference internal="True" refid="class-globalscope-constant-property-hint-enum"><inline classes="std std-ref">PROPERTY_HINT_ENUM</inline></reference> 不同，具有该提示的属性仍然接受任意值并且可以为空。值列表用于建议可能的值。</paragraph>
            <target refid="class-globalscope-constant-property-hint-exp-easing"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-exp-easing" names="class_@globalscope_constant_property_hint_exp_easing"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_EXP_EASING</strong> = <literal>4</literal></paragraph>
            <paragraph>提示应通过指数缓动函数编辑 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 属性。提示字符串可以包括 <literal>"attenuation"</literal> 以水平翻转曲线，和/或 <literal>"positive_only"</literal> 以排除 in/out 缓动并限制值大于或等于零。</paragraph>
            <target refid="class-globalscope-constant-property-hint-link"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-link" names="class_@globalscope_constant_property_hint_link"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LINK</strong> = <literal>5</literal></paragraph>
            <paragraph>提示向量属性应该允许分量链接。例如，这能够让 <reference internal="True" refuri="class_vector2#class-vector2-property-x"><inline classes="std std-ref">Vector2.x</inline></reference> 和 <reference internal="True" refuri="class_vector2#class-vector2-property-y"><inline classes="std std-ref">Vector2.y</inline></reference> 被一起编辑。</paragraph>
            <target refid="class-globalscope-constant-property-hint-flags"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-flags" names="class_@globalscope_constant_property_hint_flags"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_FLAGS</strong> = <literal>6</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性为位掩码，位标志拥有名称。</paragraph>
            <paragraph>提示字符串为逗号分隔的名称列表，例如 <literal>"Bit0,Bit1,Bit2,Bit3"</literal>。名称两端的空白字符<strong>不会</strong>被移除。列表中的第一个名称的值为 1、然后是 2、接下来就是 4、8、16 等值。也可以通过在名称后加上 <literal>:整数</literal> 来指定显式的值，例如 <literal>"A:4,B:8,C:16"</literal>。你还可以对标志进行组合（<literal>"A:4,B:8,AB:12,C:16"</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>标志值最多为 <literal>1</literal>，最多为 <literal>2 ** 32 - 1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refid="class-globalscope-constant-property-hint-enum"><inline classes="std std-ref">PROPERTY_HINT_ENUM</inline></reference> 不同，不会考虑前一个显式值。如果提示为 <literal>"A:16,B,C"</literal>，则 A 为 16、B 为 2、C 为 4。</paragraph>
            <target refid="class-globalscope-constant-property-hint-layers-2d-render"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-layers-2d-render" names="class_@globalscope_constant_property_hint_layers_2d_render"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LAYERS_2D_RENDER</strong> = <literal>7</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性为位掩码，表示可命名的 2D 渲染层。</paragraph>
            <target refid="class-globalscope-constant-property-hint-layers-2d-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-layers-2d-physics" names="class_@globalscope_constant_property_hint_layers_2d_physics"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LAYERS_2D_PHYSICS</strong> = <literal>8</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性为位掩码，表示可命名的 2D 物理层。</paragraph>
            <target refid="class-globalscope-constant-property-hint-layers-2d-navigation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-layers-2d-navigation" names="class_@globalscope_constant_property_hint_layers_2d_navigation"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LAYERS_2D_NAVIGATION</strong> = <literal>9</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性为位掩码，表示可命名的 2D 导航层。</paragraph>
            <target refid="class-globalscope-constant-property-hint-layers-3d-render"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-layers-3d-render" names="class_@globalscope_constant_property_hint_layers_3d_render"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LAYERS_3D_RENDER</strong> = <literal>10</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性为位掩码，表示可命名的 3D 渲染层。</paragraph>
            <target refid="class-globalscope-constant-property-hint-layers-3d-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-layers-3d-physics" names="class_@globalscope_constant_property_hint_layers_3d_physics"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LAYERS_3D_PHYSICS</strong> = <literal>11</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性为位掩码，表示可命名的 3D 物理层。</paragraph>
            <target refid="class-globalscope-constant-property-hint-layers-3d-navigation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-layers-3d-navigation" names="class_@globalscope_constant_property_hint_layers_3d_navigation"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LAYERS_3D_NAVIGATION</strong> = <literal>12</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性为位掩码，表示可命名的 3D 导航层。</paragraph>
            <target refid="class-globalscope-constant-property-hint-layers-avoidance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-layers-avoidance" names="class_@globalscope_constant_property_hint_layers_avoidance"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LAYERS_AVOIDANCE</strong> = <literal>37</literal></paragraph>
            <paragraph>提示整数属性为位掩码，表示可命名的避障层。</paragraph>
            <target refid="class-globalscope-constant-property-hint-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-file" names="class_@globalscope_constant_property_hint_file"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_FILE</strong> = <literal>13</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性为文件的路径。编辑时会弹出选取路径的文件对话框。提示字符串可以设为一组带有通配符的筛选器，例如 <literal>"*.png,*.jpg"</literal>。</paragraph>
            <target refid="class-globalscope-constant-property-hint-dir"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-dir" names="class_@globalscope_constant_property_hint_dir"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_DIR</strong> = <literal>14</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性为目录的路径。编辑时会弹出选取路径的文件对话框。</paragraph>
            <target refid="class-globalscope-constant-property-hint-global-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-global-file" names="class_@globalscope_constant_property_hint_global_file"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_GLOBAL_FILE</strong> = <literal>15</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性为文件的绝对路径，位于项目文件夹之外。编辑时会弹出选取路径的文件对话框。提示字符串可以设为一组带有通配符的筛选器，例如 <literal>"*.png,*.jpg"</literal>。</paragraph>
            <target refid="class-globalscope-constant-property-hint-global-dir"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-global-dir" names="class_@globalscope_constant_property_hint_global_dir"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_GLOBAL_DIR</strong> = <literal>16</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性为目录的绝对路径，位于项目文件夹之外。编辑时会弹出选取路径的文件对话框。</paragraph>
            <target refid="class-globalscope-constant-property-hint-resource-type"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-resource-type" names="class_@globalscope_constant_property_hint_resource_type"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_RESOURCE_TYPE</strong> = <literal>17</literal></paragraph>
            <paragraph>提示属性是 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 派生类型的实例，可通过提示字符串指定（例如 <literal>"Texture2D"</literal>）。 编辑该属性会显示一个有效资源类型的弹出菜单用以实例化。</paragraph>
            <target refid="class-globalscope-constant-property-hint-multiline-text"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-multiline-text" names="class_@globalscope_constant_property_hint_multiline_text"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_MULTILINE_TEXT</strong> = <literal>18</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性为包含换行的文本。编辑是会显示文本输入字段，可以进行换行。</paragraph>
            <target refid="class-globalscope-constant-property-hint-expression"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-expression" names="class_@globalscope_constant_property_hint_expression"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_EXPRESSION</strong> = <literal>19</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性为 <reference internal="True" refuri="class_expression#class-expression"><inline classes="std std-ref">Expression</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-property-hint-placeholder-text"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-placeholder-text" names="class_@globalscope_constant_property_hint_placeholder_text"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_PLACEHOLDER_TEXT</strong> = <literal>20</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性在为空时应当显示占位文本。提示字符串为所使用的占位文本。</paragraph>
            <target refid="class-globalscope-constant-property-hint-color-no-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-color-no-alpha" names="class_@globalscope_constant_property_hint_color_no_alpha"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_COLOR_NO_ALPHA</strong> = <literal>21</literal></paragraph>
            <paragraph>提示一个 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性在编辑时不能影响其透明度（<reference internal="True" refuri="class_color#class-color-property-a"><inline classes="std std-ref">Color.a</inline></reference> 不可编辑）。</paragraph>
            <target refid="class-globalscope-constant-property-hint-object-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-object-id" names="class_@globalscope_constant_property_hint_object_id"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_OBJECT_ID</strong> = <literal>22</literal></paragraph>
            <paragraph>提示该属性的值是一个被编码为对象 ID 的对象，其类型在提示字符串中指定。被用于调试器。</paragraph>
            <target refid="class-globalscope-constant-property-hint-type-string"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-type-string" names="class_@globalscope_constant_property_hint_type_string"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_TYPE_STRING</strong> = <literal>23</literal></paragraph>
            <paragraph>如果属性为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，则提示该属性代表特定的类型（类）。这样就能使用创建对话框选择类型。该属性中存放的是所选类型，是一个字符串。</paragraph>
            <paragraph>如果属性为 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，则提示编辑器如何显示其中的元素。<literal>hint_string</literal> 必须使用 <literal>":"</literal> 和 <literal>"/"</literal> 对内嵌的类型进行编码。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># elem_type 数组。
hint_string = "%d:" % [elem_type]
hint_string = "%d/%d:%s" % [elem_type, elem_hint, elem_hint_string]
# elem_type 二维数组（elem_type 数组的数组）。
hint_string = "%d:%d:" % [TYPE_ARRAY, elem_type]
hint_string = "%d:%d/%d:%s" % [TYPE_ARRAY, elem_type, elem_hint, elem_hint_string]
# elem_type 三维数组（elem_type 数组的数组的数组）。
hint_string = "%d:%d:%d:" % [TYPE_ARRAY, TYPE_ARRAY, elem_type]
hint_string = "%d:%d:%d/%d:%s" % [TYPE_ARRAY, TYPE_ARRAY, elem_type, elem_hint, elem_hint_string]</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// elem_type 数组。
hintString = $"{elemType:D}:";
hintString = $"{elemType:}/{elemHint:D}:{elemHintString}";
// elem_type 二维数组（elem_type 数组的数组）。
hintString = $"{Variant.Type.Array:D}:{elemType:D}:";
hintString = $"{Variant.Type.Array:D}:{elemType:D}/{elemHint:D}:{elemHintString}";
// elem_type 三维数组（elem_type 数组的数组的数组）。
hintString = $"{Variant.Type.Array:D}:{Variant.Type.Array:D}:{elemType:D}:";
hintString = $"{Variant.Type.Array:D}:{Variant.Type.Array:D}:{elemType:D}/{elemHint:D}:{elemHintString}";</literal_block>
                </div>
            </container>
            <paragraph>示例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">hint_string = "%d:" % [TYPE_INT] # 整数数组。
hint_string = "%d/%d:1,10,1" % [TYPE_INT, PROPERTY_HINT_RANGE] # 整数数组（范围为 1 到 10）。
hint_string = "%d/%d:Zero,One,Two" % [TYPE_INT, PROPERTY_HINT_ENUM] # 整数数组（枚举）。
hint_string = "%d/%d:Zero,One,Three:3,Six:6" % [TYPE_INT, PROPERTY_HINT_ENUM] # 整数数组（枚举）。
hint_string = "%d/%d:*.png" % [TYPE_STRING, PROPERTY_HINT_FILE] # 字符串数组（文件路径）。
hint_string = "%d/%d:Texture2D" % [TYPE_OBJECT, PROPERTY_HINT_RESOURCE_TYPE] # 纹理数组。

hint_string = "%d:%d:" % [TYPE_ARRAY, TYPE_FLOAT] # 浮点数二维数组。
hint_string = "%d:%d/%d:" % [TYPE_ARRAY, TYPE_STRING, PROPERTY_HINT_MULTILINE_TEXT] # 多行字符串二维数组。
hint_string = "%d:%d/%d:-1,1,0.1" % [TYPE_ARRAY, TYPE_FLOAT, PROPERTY_HINT_RANGE] # 浮点数二维数组（范围为 -1 到 1）。
hint_string = "%d:%d/%d:Texture2D" % [TYPE_ARRAY, TYPE_OBJECT, PROPERTY_HINT_RESOURCE_TYPE] # 纹理二维数组。</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">hintString = $"{Variant.Type.Int:D}/{PropertyHint.Range:D}:1,10,1"; // 整数数组（范围为 1 到 10）。
hintString = $"{Variant.Type.Int:D}/{PropertyHint.Enum:D}:Zero,One,Two"; // 整数数组（枚举）。
hintString = $"{Variant.Type.Int:D}/{PropertyHint.Enum:D}:Zero,One,Three:3,Six:6"; // 整数数组（枚举）。
hintString = $"{Variant.Type.String:D}/{PropertyHint.File:D}:*.png"; // 字符串数组（文件路径）。
hintString = $"{Variant.Type.Object:D}/{PropertyHint.ResourceType:D}:Texture2D"; // 纹理数组。

hintString = $"{Variant.Type.Array:D}:{Variant.Type.Float:D}:"; // 浮点数二维数组。
hintString = $"{Variant.Type.Array:D}:{Variant.Type.String:D}/{PropertyHint.MultilineText:D}:"; // 多行字符串二维数组。
hintString = $"{Variant.Type.Array:D}:{Variant.Type.Float:D}/{PropertyHint.Range:D}:-1,1,0.1"; // 浮点数二维数组（范围为 -1 到 1）。
hintString = $"{Variant.Type.Array:D}:{Variant.Type.Object:D}/{PropertyHint.ResourceType:D}:Texture2D"; // 纹理二维数组。</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>后缀冒号是必须的，否则无法正确识别内置类型。</paragraph>
            <target refid="class-globalscope-constant-property-hint-node-path-to-edited-node"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-node-path-to-edited-node" names="class_@globalscope_constant_property_hint_node_path_to_edited_node"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE</strong> = <literal>24</literal></paragraph>
            <paragraph><strong>已弃用：</strong> This hint is not used by the engine.</paragraph>
            <target refid="class-globalscope-constant-property-hint-object-too-big"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-object-too-big" names="class_@globalscope_constant_property_hint_object_too_big"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_OBJECT_TOO_BIG</strong> = <literal>25</literal></paragraph>
            <paragraph>提示对象太大而无法通过调试器发送。</paragraph>
            <target refid="class-globalscope-constant-property-hint-node-path-valid-types"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-node-path-valid-types" names="class_@globalscope_constant_property_hint_node_path_valid_types"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_NODE_PATH_VALID_TYPES</strong> = <literal>26</literal></paragraph>
            <paragraph>提示该提示字符串为类型 <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> 的属性指定有效的节点类型。</paragraph>
            <target refid="class-globalscope-constant-property-hint-save-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-save-file" names="class_@globalscope_constant_property_hint_save_file"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_SAVE_FILE</strong> = <literal>27</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性是文件的路径。编辑它将显示一个文件对话框，用于选择文件要保存的路径。该对话框可以访问项目的目录。该提示字符串可以是一组带有通配符的筛选器，例如 <literal>"*.png,*.jpg"</literal>。另请参阅 <reference internal="True" refuri="class_filedialog#class-filedialog-property-filters"><inline classes="std std-ref">FileDialog.filters</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-property-hint-global-save-file"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-global-save-file" names="class_@globalscope_constant_property_hint_global_save_file"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_GLOBAL_SAVE_FILE</strong> = <literal>28</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 属性是文件的路径。编辑它将显示一个文件对话框，用于选择文件要保存的路径。该对话框可以访问整个文件系统。该提示字符串可以是一组带有通配符的筛选器，例如 <literal>"*.png,*.jpg"</literal>。另请参阅 <reference internal="True" refuri="class_filedialog#class-filedialog-property-filters"><inline classes="std std-ref">FileDialog.filters</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-property-hint-int-is-objectid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-int-is-objectid" names="class_@globalscope_constant_property_hint_int_is_objectid"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_INT_IS_OBJECTID</strong> = <literal>29</literal></paragraph>
            <paragraph><strong>已弃用：</strong> This hint is not used by the engine.</paragraph>
            <target refid="class-globalscope-constant-property-hint-int-is-pointer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-int-is-pointer" names="class_@globalscope_constant_property_hint_int_is_pointer"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_INT_IS_POINTER</strong> = <literal>30</literal></paragraph>
            <paragraph>提示 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 属性是一个指针。用于 GDExtension。</paragraph>
            <target refid="class-globalscope-constant-property-hint-array-type"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-array-type" names="class_@globalscope_constant_property_hint_array_type"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_ARRAY_TYPE</strong> = <literal>31</literal></paragraph>
            <paragraph>提示属性是一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，其存储类型在提示字符串中指定。</paragraph>
            <target refid="class-globalscope-constant-property-hint-locale-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-locale-id" names="class_@globalscope_constant_property_hint_locale_id"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LOCALE_ID</strong> = <literal>32</literal></paragraph>
            <paragraph>提示一个字符串属性是一个区域设置代码。编辑它将显示一个用于选择语言和地区的区域设置对话框。</paragraph>
            <target refid="class-globalscope-constant-property-hint-localizable-string"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-localizable-string" names="class_@globalscope_constant_property_hint_localizable_string"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_LOCALIZABLE_STRING</strong> = <literal>33</literal></paragraph>
            <paragraph>提示一个字典属性是字符串翻译映射。字典的键是区域设置代码，值是翻译后的字符串。</paragraph>
            <target refid="class-globalscope-constant-property-hint-node-type"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-node-type" names="class_@globalscope_constant_property_hint_node_type"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_NODE_TYPE</strong> = <literal>34</literal></paragraph>
            <paragraph>提示属性是 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 派生类型的实例，可以选择通过提示字符串指定（例如 <literal>"Node2D"</literal>）。编辑它将显示一个用于从场景中选取节点的对话框。</paragraph>
            <target refid="class-globalscope-constant-property-hint-hide-quaternion-edit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-hide-quaternion-edit" names="class_@globalscope_constant_property_hint_hide_quaternion_edit"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_HIDE_QUATERNION_EDIT</strong> = <literal>35</literal></paragraph>
            <paragraph>提示四元数属性应当禁用临时欧拉值编辑器。</paragraph>
            <target refid="class-globalscope-constant-property-hint-password"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-password" names="class_@globalscope_constant_property_hint_password"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_PASSWORD</strong> = <literal>36</literal></paragraph>
            <paragraph>提示字符串属性为密码，每一个字符都会被替换为秘密字符。</paragraph>
            <target refid="class-globalscope-constant-property-hint-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-hint-max" names="class_@globalscope_constant_property_hint_max"><reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> <strong>PROPERTY_HINT_MAX</strong> = <literal>38</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-propertyusageflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-propertyusageflags" names="enum_@globalscope_propertyusageflags">flags <strong>PropertyUsageFlags</strong>: <reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-property-usage-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-none" names="class_@globalscope_constant_property_usage_none"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>该属性不被存储，也不会显示在编辑器中。这是非导出属性的默认值。</paragraph>
            <target refid="class-globalscope-constant-property-usage-storage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-storage" names="class_@globalscope_constant_property_usage_storage"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_STORAGE</strong> = <literal>2</literal></paragraph>
            <paragraph>将属性序列化并保存到场景文件中（默认）。</paragraph>
            <target refid="class-globalscope-constant-property-usage-editor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-editor" names="class_@globalscope_constant_property_usage_editor"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_EDITOR</strong> = <literal>4</literal></paragraph>
            <paragraph>该属性将被显示在 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference>（默认）中。</paragraph>
            <target refid="class-globalscope-constant-property-usage-internal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-internal" names="class_@globalscope_constant_property_usage_internal"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_INTERNAL</strong> = <literal>8</literal></paragraph>
            <paragraph>该属性排除在类参考手册之外。</paragraph>
            <target refid="class-globalscope-constant-property-usage-checkable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-checkable" names="class_@globalscope_constant_property_usage_checkable"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_CHECKABLE</strong> = <literal>16</literal></paragraph>
            <paragraph>该属性可以在 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference> 中被勾选。</paragraph>
            <target refid="class-globalscope-constant-property-usage-checked"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-checked" names="class_@globalscope_constant_property_usage_checked"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_CHECKED</strong> = <literal>32</literal></paragraph>
            <paragraph>该属性在 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference> 中已被勾选。</paragraph>
            <target refid="class-globalscope-constant-property-usage-group"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-group" names="class_@globalscope_constant_property_usage_group"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_GROUP</strong> = <literal>64</literal></paragraph>
            <paragraph>用于在编辑器中将属性编组在一起。请参阅 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-property-usage-category"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-category" names="class_@globalscope_constant_property_usage_category"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_CATEGORY</strong> = <literal>128</literal></paragraph>
            <paragraph>在编辑器中用于为属性分类。</paragraph>
            <target refid="class-globalscope-constant-property-usage-subgroup"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-subgroup" names="class_@globalscope_constant_property_usage_subgroup"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_SUBGROUP</strong> = <literal>256</literal></paragraph>
            <paragraph>用于在子组（一个组下）中将编辑器中的属性编组在一起。请参阅 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-property-usage-class-is-bitfield"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-class-is-bitfield" names="class_@globalscope_constant_property_usage_class_is_bitfield"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_CLASS_IS_BITFIELD</strong> = <literal>512</literal></paragraph>
            <paragraph>该属性是一个位字段，即它包含多个被表示为位的标志。</paragraph>
            <target refid="class-globalscope-constant-property-usage-no-instance-state"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-no-instance-state" names="class_@globalscope_constant_property_usage_no_instance_state"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_NO_INSTANCE_STATE</strong> = <literal>1024</literal></paragraph>
            <paragraph>该属性不在 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 中保存其状态。</paragraph>
            <target refid="class-globalscope-constant-property-usage-restart-if-changed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-restart-if-changed" names="class_@globalscope_constant_property_usage_restart_if_changed"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_RESTART_IF_CHANGED</strong> = <literal>2048</literal></paragraph>
            <paragraph>编辑属性会提示用户重新启动编辑器。</paragraph>
            <target refid="class-globalscope-constant-property-usage-script-variable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-script-variable" names="class_@globalscope_constant_property_usage_script_variable"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_SCRIPT_VARIABLE</strong> = <literal>4096</literal></paragraph>
            <paragraph>该属性是一个脚本变量，应该被序列化并保存在场景文件中。</paragraph>
            <target refid="class-globalscope-constant-property-usage-store-if-null"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-store-if-null" names="class_@globalscope_constant_property_usage_store_if_null"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_STORE_IF_NULL</strong> = <literal>8192</literal></paragraph>
            <paragraph>即使 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 类型的属性值为 <literal>null</literal>，也会被存储。</paragraph>
            <target refid="class-globalscope-constant-property-usage-update-all-if-modified"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-update-all-if-modified" names="class_@globalscope_constant_property_usage_update_all_if_modified"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED</strong> = <literal>16384</literal></paragraph>
            <paragraph>如果该属性被修改，则所有检查器字段都将被刷新。</paragraph>
            <target refid="class-globalscope-constant-property-usage-script-default-value"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-script-default-value" names="class_@globalscope_constant_property_usage_script_default_value"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_SCRIPT_DEFAULT_VALUE</strong> = <literal>32768</literal></paragraph>
            <paragraph><strong>已弃用：</strong> This flag is not used by the engine.</paragraph>
            <target refid="class-globalscope-constant-property-usage-class-is-enum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-class-is-enum" names="class_@globalscope_constant_property_usage_class_is_enum"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_CLASS_IS_ENUM</strong> = <literal>65536</literal></paragraph>
            <paragraph>该属性是一个枚举，即它仅从其关联的枚举中获取被命名的整数常量。</paragraph>
            <target refid="class-globalscope-constant-property-usage-nil-is-variant"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-nil-is-variant" names="class_@globalscope_constant_property_usage_nil_is_variant"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_NIL_IS_VARIANT</strong> = <literal>131072</literal></paragraph>
            <paragraph>如果属性将 <literal>nil</literal> 作为默认值，则其类型将为 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-property-usage-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-array" names="class_@globalscope_constant_property_usage_array"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_ARRAY</strong> = <literal>262144</literal></paragraph>
            <paragraph>该属性为数组。</paragraph>
            <target refid="class-globalscope-constant-property-usage-always-duplicate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-always-duplicate" names="class_@globalscope_constant_property_usage_always_duplicate"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_ALWAYS_DUPLICATE</strong> = <literal>524288</literal></paragraph>
            <paragraph>当创建一个带有 <reference internal="True" refuri="class_resource#class-resource-method-duplicate"><inline classes="std std-ref">Resource.duplicate</inline></reference> 的 Resource，并且它的标志是在一个 Resource 的属性上设置的副本时候，无论 <literal>subresources</literal> 为多少，该属性永远都会被创建为副本。</paragraph>
            <target refid="class-globalscope-constant-property-usage-never-duplicate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-never-duplicate" names="class_@globalscope_constant_property_usage_never_duplicate"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_NEVER_DUPLICATE</strong> = <literal>1048576</literal></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_resource#class-resource-method-duplicate"><inline classes="std std-ref">Resource.duplicate</inline></reference> 复制资源时，如果该资源的某个属性上设有这个标志，则不会对该属性进行复制，无视 <literal>subresources</literal> 布尔型参数。</paragraph>
            <target refid="class-globalscope-constant-property-usage-high-end-gfx"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-high-end-gfx" names="class_@globalscope_constant_property_usage_high_end_gfx"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_HIGH_END_GFX</strong> = <literal>2097152</literal></paragraph>
            <paragraph>只有在支持现代渲染器（不包含 GLES3）的情况下该属性才会在编辑器中显示。</paragraph>
            <target refid="class-globalscope-constant-property-usage-node-path-from-scene-root"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-node-path-from-scene-root" names="class_@globalscope_constant_property_usage_node_path_from_scene_root"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_NODE_PATH_FROM_SCENE_ROOT</strong> = <literal>4194304</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> 属性将始终相对于场景根。对于本地资源来说最有用。</paragraph>
            <target refid="class-globalscope-constant-property-usage-resource-not-persistent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-resource-not-persistent" names="class_@globalscope_constant_property_usage_resource_not_persistent"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_RESOURCE_NOT_PERSISTENT</strong> = <literal>8388608</literal></paragraph>
            <paragraph>在动态创建资源时使用，即 Getter 将始终返回一个不同的实例。<reference internal="True" refuri="class_resourcesaver#class-resourcesaver"><inline classes="std std-ref">ResourceSaver</inline></reference> 需要该信息来正确保存这种资源。</paragraph>
            <target refid="class-globalscope-constant-property-usage-keying-increments"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-keying-increments" names="class_@globalscope_constant_property_usage_keying_increments"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_KEYING_INCREMENTS</strong> = <literal>16777216</literal></paragraph>
            <paragraph>插入该属性的动画关键帧将自动增加该值，从而可以轻松地为一行中的多个值设置关键帧。</paragraph>
            <target refid="class-globalscope-constant-property-usage-deferred-set-resource"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-deferred-set-resource" names="class_@globalscope_constant_property_usage_deferred_set_resource"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_DEFERRED_SET_RESOURCE</strong> = <literal>33554432</literal></paragraph>
            <paragraph><strong>已弃用：</strong> This flag is not used by the engine.</paragraph>
            <target refid="class-globalscope-constant-property-usage-editor-instantiate-object"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-editor-instantiate-object" names="class_@globalscope_constant_property_usage_editor_instantiate_object"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_EDITOR_INSTANTIATE_OBJECT</strong> = <literal>67108864</literal></paragraph>
            <paragraph>当该属性为 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 且基础对象为 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 时，则每当该节点是在编辑器中创建的，都会自动创建一个资源实例。</paragraph>
            <target refid="class-globalscope-constant-property-usage-editor-basic-setting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-editor-basic-setting" names="class_@globalscope_constant_property_usage_editor_basic_setting"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_EDITOR_BASIC_SETTING</strong> = <literal>134217728</literal></paragraph>
            <paragraph>该属性被视为基本设置，即使禁用高级模式时也会显现。用于项目设置。</paragraph>
            <target refid="class-globalscope-constant-property-usage-read-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-read-only" names="class_@globalscope_constant_property_usage_read_only"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_READ_ONLY</strong> = <literal>268435456</literal></paragraph>
            <paragraph>该属性在 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference> 中只读。</paragraph>
            <target refid="class-globalscope-constant-property-usage-secret"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-secret" names="class_@globalscope_constant_property_usage_secret"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_SECRET</strong> = <literal>536870912</literal></paragraph>
            <paragraph>具有该标志的导出预设属性包含机密信息，并与导出预设配置的其余部分分开存储。</paragraph>
            <target refid="class-globalscope-constant-property-usage-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-default" names="class_@globalscope_constant_property_usage_default"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_DEFAULT</strong> = <literal>6</literal></paragraph>
            <paragraph>默认用法（存储和编辑器）。</paragraph>
            <target refid="class-globalscope-constant-property-usage-no-editor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-property-usage-no-editor" names="class_@globalscope_constant_property_usage_no_editor"><reference internal="True" refid="enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference> <strong>PROPERTY_USAGE_NO_EDITOR</strong> = <literal>2</literal></paragraph>
            <paragraph>默认用法，但不在编辑器中显示属性（存储）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-methodflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-methodflags" names="enum_@globalscope_methodflags">flags <strong>MethodFlags</strong>: <reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-method-flag-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flag-normal" names="class_@globalscope_constant_method_flag_normal"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAG_NORMAL</strong> = <literal>1</literal></paragraph>
            <paragraph>普通方法的标志。</paragraph>
            <target refid="class-globalscope-constant-method-flag-editor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flag-editor" names="class_@globalscope_constant_method_flag_editor"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAG_EDITOR</strong> = <literal>2</literal></paragraph>
            <paragraph>编辑器方法的标志。</paragraph>
            <target refid="class-globalscope-constant-method-flag-const"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flag-const" names="class_@globalscope_constant_method_flag_const"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAG_CONST</strong> = <literal>4</literal></paragraph>
            <paragraph>常量方法的标志。</paragraph>
            <target refid="class-globalscope-constant-method-flag-virtual"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flag-virtual" names="class_@globalscope_constant_method_flag_virtual"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAG_VIRTUAL</strong> = <literal>8</literal></paragraph>
            <paragraph>虚方法的标志。</paragraph>
            <target refid="class-globalscope-constant-method-flag-vararg"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flag-vararg" names="class_@globalscope_constant_method_flag_vararg"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAG_VARARG</strong> = <literal>16</literal></paragraph>
            <paragraph>具有可变数量参数的方法的标志。</paragraph>
            <target refid="class-globalscope-constant-method-flag-static"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flag-static" names="class_@globalscope_constant_method_flag_static"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAG_STATIC</strong> = <literal>32</literal></paragraph>
            <paragraph>静态方法的标志。</paragraph>
            <target refid="class-globalscope-constant-method-flag-object-core"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flag-object-core" names="class_@globalscope_constant_method_flag_object_core"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAG_OBJECT_CORE</strong> = <literal>64</literal></paragraph>
            <paragraph>内部使用。允许不将核心虚拟方法（例如 <reference internal="True" refuri="class_object#class-object-private-method-notification"><inline classes="std std-ref">Object._notification</inline></reference>）转储到 JSON API。</paragraph>
            <target refid="class-globalscope-constant-method-flags-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-method-flags-default" names="class_@globalscope_constant_method_flags_default"><reference internal="True" refid="enum-globalscope-methodflags"><inline classes="std std-ref">MethodFlags</inline></reference> <strong>METHOD_FLAGS_DEFAULT</strong> = <literal>1</literal></paragraph>
            <paragraph>默认方法标志（正常）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-variant-type"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-variant-type" names="enum_@globalscope_variant.type">enum <strong>Variant.Type</strong>: <reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-type-nil"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-nil" names="class_@globalscope_constant_type_nil"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_NIL</strong> = <literal>0</literal></paragraph>
            <paragraph>变量为 <literal>null</literal>。</paragraph>
            <target refid="class-globalscope-constant-type-bool"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-bool" names="class_@globalscope_constant_type_bool"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_BOOL</strong> = <literal>1</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-int"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-int" names="class_@globalscope_constant_type_int"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_INT</strong> = <literal>2</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-float" names="class_@globalscope_constant_type_float"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_FLOAT</strong> = <literal>3</literal></paragraph>
            <paragraph>变量的类型为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-string"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-string" names="class_@globalscope_constant_type_string"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_STRING</strong> = <literal>4</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-vector2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-vector2" names="class_@globalscope_constant_type_vector2"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_VECTOR2</strong> = <literal>5</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-vector2i"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-vector2i" names="class_@globalscope_constant_type_vector2i"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_VECTOR2I</strong> = <literal>6</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-rect2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-rect2" names="class_@globalscope_constant_type_rect2"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_RECT2</strong> = <literal>7</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-rect2i"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-rect2i" names="class_@globalscope_constant_type_rect2i"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_RECT2I</strong> = <literal>8</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-vector3"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-vector3" names="class_@globalscope_constant_type_vector3"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_VECTOR3</strong> = <literal>9</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-vector3i"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-vector3i" names="class_@globalscope_constant_type_vector3i"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_VECTOR3I</strong> = <literal>10</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-transform2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-transform2d" names="class_@globalscope_constant_type_transform2d"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_TRANSFORM2D</strong> = <literal>11</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-vector4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-vector4" names="class_@globalscope_constant_type_vector4"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_VECTOR4</strong> = <literal>12</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-vector4i"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-vector4i" names="class_@globalscope_constant_type_vector4i"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_VECTOR4I</strong> = <literal>13</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-plane"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-plane" names="class_@globalscope_constant_type_plane"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PLANE</strong> = <literal>14</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-quaternion"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-quaternion" names="class_@globalscope_constant_type_quaternion"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_QUATERNION</strong> = <literal>15</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-aabb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-aabb" names="class_@globalscope_constant_type_aabb"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_AABB</strong> = <literal>16</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-basis"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-basis" names="class_@globalscope_constant_type_basis"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_BASIS</strong> = <literal>17</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-transform3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-transform3d" names="class_@globalscope_constant_type_transform3d"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_TRANSFORM3D</strong> = <literal>18</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-projection"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-projection" names="class_@globalscope_constant_type_projection"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PROJECTION</strong> = <literal>19</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-color" names="class_@globalscope_constant_type_color"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_COLOR</strong> = <literal>20</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-string-name"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-string-name" names="class_@globalscope_constant_type_string_name"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_STRING_NAME</strong> = <literal>21</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-node-path"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-node-path" names="class_@globalscope_constant_type_node_path"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_NODE_PATH</strong> = <literal>22</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-rid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-rid" names="class_@globalscope_constant_type_rid"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_RID</strong> = <literal>23</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-object"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-object" names="class_@globalscope_constant_type_object"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_OBJECT</strong> = <literal>24</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-callable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-callable" names="class_@globalscope_constant_type_callable"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_CALLABLE</strong> = <literal>25</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-signal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-signal" names="class_@globalscope_constant_type_signal"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_SIGNAL</strong> = <literal>26</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_signal#class-signal"><inline classes="std std-ref">Signal</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-dictionary"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-dictionary" names="class_@globalscope_constant_type_dictionary"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_DICTIONARY</strong> = <literal>27</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-array" names="class_@globalscope_constant_type_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_ARRAY</strong> = <literal>28</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-byte-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-byte-array" names="class_@globalscope_constant_type_packed_byte_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_BYTE_ARRAY</strong> = <literal>29</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-int32-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-int32-array" names="class_@globalscope_constant_type_packed_int32_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_INT32_ARRAY</strong> = <literal>30</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-int64-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-int64-array" names="class_@globalscope_constant_type_packed_int64_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_INT64_ARRAY</strong> = <literal>31</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-float32-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-float32-array" names="class_@globalscope_constant_type_packed_float32_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_FLOAT32_ARRAY</strong> = <literal>32</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-float64-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-float64-array" names="class_@globalscope_constant_type_packed_float64_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_FLOAT64_ARRAY</strong> = <literal>33</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-string-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-string-array" names="class_@globalscope_constant_type_packed_string_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_STRING_ARRAY</strong> = <literal>34</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-vector2-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-vector2-array" names="class_@globalscope_constant_type_packed_vector2_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_VECTOR2_ARRAY</strong> = <literal>35</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-vector3-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-vector3-array" names="class_@globalscope_constant_type_packed_vector3_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_VECTOR3_ARRAY</strong> = <literal>36</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-color-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-color-array" names="class_@globalscope_constant_type_packed_color_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_COLOR_ARRAY</strong> = <literal>37</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-packed-vector4-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-packed-vector4-array" names="class_@globalscope_constant_type_packed_vector4_array"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_PACKED_VECTOR4_ARRAY</strong> = <literal>38</literal></paragraph>
            <paragraph>变量类型为 <reference internal="True" refuri="class_packedvector4array#class-packedvector4array"><inline classes="std std-ref">PackedVector4Array</inline></reference>。</paragraph>
            <target refid="class-globalscope-constant-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-type-max" names="class_@globalscope_constant_type_max"><reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> <strong>TYPE_MAX</strong> = <literal>39</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-globalscope-variant-operator"></target>
            <paragraph classes="classref-enumeration" ids="enum-globalscope-variant-operator" names="enum_@globalscope_variant.operator">enum <strong>Variant.Operator</strong>: <reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-globalscope-constant-op-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-equal" names="class_@globalscope_constant_op_equal"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_EQUAL</strong> = <literal>0</literal></paragraph>
            <paragraph>相等运算符（<literal>==</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-not-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-not-equal" names="class_@globalscope_constant_op_not_equal"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_NOT_EQUAL</strong> = <literal>1</literal></paragraph>
            <paragraph>不等运算符（<literal>!=</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-less"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-less" names="class_@globalscope_constant_op_less"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_LESS</strong> = <literal>2</literal></paragraph>
            <paragraph>小于运算符（<literal>&lt;</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-less-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-less-equal" names="class_@globalscope_constant_op_less_equal"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_LESS_EQUAL</strong> = <literal>3</literal></paragraph>
            <paragraph>小于等于运算符（<literal>&lt;=</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-greater"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-greater" names="class_@globalscope_constant_op_greater"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_GREATER</strong> = <literal>4</literal></paragraph>
            <paragraph>大于运算符（<literal>&gt;</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-greater-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-greater-equal" names="class_@globalscope_constant_op_greater_equal"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_GREATER_EQUAL</strong> = <literal>5</literal></paragraph>
            <paragraph>大于等于运算符（<literal>&gt;=</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-add" names="class_@globalscope_constant_op_add"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_ADD</strong> = <literal>6</literal></paragraph>
            <paragraph>加法运算符（<literal>+</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-subtract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-subtract" names="class_@globalscope_constant_op_subtract"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_SUBTRACT</strong> = <literal>7</literal></paragraph>
            <paragraph>减法运算符（<literal>-</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-multiply"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-multiply" names="class_@globalscope_constant_op_multiply"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_MULTIPLY</strong> = <literal>8</literal></paragraph>
            <paragraph>乘法运算符（<literal>*</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-divide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-divide" names="class_@globalscope_constant_op_divide"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_DIVIDE</strong> = <literal>9</literal></paragraph>
            <paragraph>除法运算符（<literal>/</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-negate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-negate" names="class_@globalscope_constant_op_negate"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_NEGATE</strong> = <literal>10</literal></paragraph>
            <paragraph>一元减号运算符（<literal>-</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-positive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-positive" names="class_@globalscope_constant_op_positive"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_POSITIVE</strong> = <literal>11</literal></paragraph>
            <paragraph>一元加号运算符（<literal>+</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-module"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-module" names="class_@globalscope_constant_op_module"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_MODULE</strong> = <literal>12</literal></paragraph>
            <paragraph>余数/取模运算符（<literal>%</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-power"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-power" names="class_@globalscope_constant_op_power"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_POWER</strong> = <literal>13</literal></paragraph>
            <paragraph>幂运算符（<literal>**</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-shift-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-shift-left" names="class_@globalscope_constant_op_shift_left"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_SHIFT_LEFT</strong> = <literal>14</literal></paragraph>
            <paragraph>左移运算符（<literal>&lt;&lt;</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-shift-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-shift-right" names="class_@globalscope_constant_op_shift_right"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_SHIFT_RIGHT</strong> = <literal>15</literal></paragraph>
            <paragraph>右移运算符（<literal>&gt;&gt;</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-bit-and"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-bit-and" names="class_@globalscope_constant_op_bit_and"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_BIT_AND</strong> = <literal>16</literal></paragraph>
            <paragraph>按位与运算符（<literal>&amp;</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-bit-or"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-bit-or" names="class_@globalscope_constant_op_bit_or"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_BIT_OR</strong> = <literal>17</literal></paragraph>
            <paragraph>按位或运算符（<literal>|</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-bit-xor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-bit-xor" names="class_@globalscope_constant_op_bit_xor"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_BIT_XOR</strong> = <literal>18</literal></paragraph>
            <paragraph>按位异或运算符（<literal>^</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-bit-negate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-bit-negate" names="class_@globalscope_constant_op_bit_negate"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_BIT_NEGATE</strong> = <literal>19</literal></paragraph>
            <paragraph>按位非运算符（<literal>~</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-and"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-and" names="class_@globalscope_constant_op_and"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_AND</strong> = <literal>20</literal></paragraph>
            <paragraph>逻辑与运算符（<literal>and</literal> 或 <literal>&amp;&amp;</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-or"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-or" names="class_@globalscope_constant_op_or"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_OR</strong> = <literal>21</literal></paragraph>
            <paragraph>逻辑或运算符（<literal>or</literal> 或 <literal>||</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-xor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-xor" names="class_@globalscope_constant_op_xor"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_XOR</strong> = <literal>22</literal></paragraph>
            <paragraph>逻辑异或运算符（未在 GDScript 中实现）。</paragraph>
            <target refid="class-globalscope-constant-op-not"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-not" names="class_@globalscope_constant_op_not"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_NOT</strong> = <literal>23</literal></paragraph>
            <paragraph>逻辑非运算符（<literal>not</literal> 或 <literal>!</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-in"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-in" names="class_@globalscope_constant_op_in"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_IN</strong> = <literal>24</literal></paragraph>
            <paragraph>逻辑 IN 运算符（<literal>in</literal>）。</paragraph>
            <target refid="class-globalscope-constant-op-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-globalscope-constant-op-max" names="class_@globalscope_constant_op_max"><reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> <strong>OP_MAX</strong> = <literal>25</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-globalscope-variant-operator"><inline classes="std std-ref">Variant.Operator</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-globalscope-property-audioserver"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-audioserver" names="class_@globalscope_property_audioserver"><reference internal="True" refuri="class_audioserver#class-audioserver"><inline classes="std std-ref">AudioServer</inline></reference> <strong>AudioServer</strong> <reference internal="True" refid="class-globalscope-property-audioserver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_audioserver#class-audioserver"><inline classes="std std-ref">AudioServer</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-cameraserver"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-cameraserver" names="class_@globalscope_property_cameraserver"><reference internal="True" refuri="class_cameraserver#class-cameraserver"><inline classes="std std-ref">CameraServer</inline></reference> <strong>CameraServer</strong> <reference internal="True" refid="class-globalscope-property-cameraserver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_cameraserver#class-cameraserver"><inline classes="std std-ref">CameraServer</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-classdb"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-classdb" names="class_@globalscope_property_classdb"><reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> <strong>ClassDB</strong> <reference internal="True" refid="class-globalscope-property-classdb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-displayserver"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-displayserver" names="class_@globalscope_property_displayserver"><reference internal="True" refuri="class_displayserver#class-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference> <strong>DisplayServer</strong> <reference internal="True" refid="class-globalscope-property-displayserver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_displayserver#class-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-editorinterface"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-editorinterface" names="class_@globalscope_property_editorinterface"><reference internal="True" refuri="class_editorinterface#class-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference> <strong>EditorInterface</strong> <reference internal="True" refid="class-globalscope-property-editorinterface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_editorinterface#class-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference> 单例。</paragraph>
            <paragraph><strong>注意：</strong>仅在编辑器构建中可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-engine"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-engine" names="class_@globalscope_property_engine"><reference internal="True" refuri="class_engine#class-engine"><inline classes="std std-ref">Engine</inline></reference> <strong>Engine</strong> <reference internal="True" refid="class-globalscope-property-engine"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_engine#class-engine"><inline classes="std std-ref">Engine</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-enginedebugger"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-enginedebugger" names="class_@globalscope_property_enginedebugger"><reference internal="True" refuri="class_enginedebugger#class-enginedebugger"><inline classes="std std-ref">EngineDebugger</inline></reference> <strong>EngineDebugger</strong> <reference internal="True" refid="class-globalscope-property-enginedebugger"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_enginedebugger#class-enginedebugger"><inline classes="std std-ref">EngineDebugger</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-gdextensionmanager"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-gdextensionmanager" names="class_@globalscope_property_gdextensionmanager"><reference internal="True" refuri="class_gdextensionmanager#class-gdextensionmanager"><inline classes="std std-ref">GDExtensionManager</inline></reference> <strong>GDExtensionManager</strong> <reference internal="True" refid="class-globalscope-property-gdextensionmanager"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_gdextensionmanager#class-gdextensionmanager"><inline classes="std std-ref">GDExtensionManager</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-geometry2d"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-geometry2d" names="class_@globalscope_property_geometry2d"><reference internal="True" refuri="class_geometry2d#class-geometry2d"><inline classes="std std-ref">Geometry2D</inline></reference> <strong>Geometry2D</strong> <reference internal="True" refid="class-globalscope-property-geometry2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_geometry2d#class-geometry2d"><inline classes="std std-ref">Geometry2D</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-geometry3d"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-geometry3d" names="class_@globalscope_property_geometry3d"><reference internal="True" refuri="class_geometry3d#class-geometry3d"><inline classes="std std-ref">Geometry3D</inline></reference> <strong>Geometry3D</strong> <reference internal="True" refid="class-globalscope-property-geometry3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_geometry3d#class-geometry3d"><inline classes="std std-ref">Geometry3D</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-ip"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-ip" names="class_@globalscope_property_ip"><reference internal="True" refuri="class_ip#class-ip"><inline classes="std std-ref">IP</inline></reference> <strong>IP</strong> <reference internal="True" refid="class-globalscope-property-ip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_ip#class-ip"><inline classes="std std-ref">IP</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-input"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-input" names="class_@globalscope_property_input"><reference internal="True" refuri="class_input#class-input"><inline classes="std std-ref">Input</inline></reference> <strong>Input</strong> <reference internal="True" refid="class-globalscope-property-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_input#class-input"><inline classes="std std-ref">Input</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-inputmap"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-inputmap" names="class_@globalscope_property_inputmap"><reference internal="True" refuri="class_inputmap#class-inputmap"><inline classes="std std-ref">InputMap</inline></reference> <strong>InputMap</strong> <reference internal="True" refid="class-globalscope-property-inputmap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_inputmap#class-inputmap"><inline classes="std std-ref">InputMap</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-javaclasswrapper"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-javaclasswrapper" names="class_@globalscope_property_javaclasswrapper"><reference internal="True" refuri="class_javaclasswrapper#class-javaclasswrapper"><inline classes="std std-ref">JavaClassWrapper</inline></reference> <strong>JavaClassWrapper</strong> <reference internal="True" refid="class-globalscope-property-javaclasswrapper"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_javaclasswrapper#class-javaclasswrapper"><inline classes="std std-ref">JavaClassWrapper</inline></reference> 单例。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Android 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-javascriptbridge"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-javascriptbridge" names="class_@globalscope_property_javascriptbridge"><reference internal="True" refuri="class_javascriptbridge#class-javascriptbridge"><inline classes="std std-ref">JavaScriptBridge</inline></reference> <strong>JavaScriptBridge</strong> <reference internal="True" refid="class-globalscope-property-javascriptbridge"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_javascriptbridge#class-javascriptbridge"><inline classes="std std-ref">JavaScriptBridge</inline></reference> 单例。</paragraph>
            <paragraph><strong>注意：</strong>仅在 Web 平台上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-marshalls"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-marshalls" names="class_@globalscope_property_marshalls"><reference internal="True" refuri="class_marshalls#class-marshalls"><inline classes="std std-ref">Marshalls</inline></reference> <strong>Marshalls</strong> <reference internal="True" refid="class-globalscope-property-marshalls"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_marshalls#class-marshalls"><inline classes="std std-ref">Marshalls</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-nativemenu"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-nativemenu" names="class_@globalscope_property_nativemenu"><reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> <strong>NativeMenu</strong> <reference internal="True" refid="class-globalscope-property-nativemenu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_nativemenu#class-nativemenu"><inline classes="std std-ref">NativeMenu</inline></reference> 单例。</paragraph>
            <paragraph><strong>注意：</strong>仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-navigationmeshgenerator"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-navigationmeshgenerator" names="class_@globalscope_property_navigationmeshgenerator"><reference internal="True" refuri="class_navigationmeshgenerator#class-navigationmeshgenerator"><inline classes="std std-ref">NavigationMeshGenerator</inline></reference> <strong>NavigationMeshGenerator</strong> <reference internal="True" refid="class-globalscope-property-navigationmeshgenerator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationmeshgenerator#class-navigationmeshgenerator"><inline classes="std std-ref">NavigationMeshGenerator</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-navigationserver2d"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-navigationserver2d" names="class_@globalscope_property_navigationserver2d"><reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> <strong>NavigationServer2D</strong> <reference internal="True" refid="class-globalscope-property-navigationserver2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-navigationserver3d"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-navigationserver3d" names="class_@globalscope_property_navigationserver3d"><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> <strong>NavigationServer3D</strong> <reference internal="True" refid="class-globalscope-property-navigationserver3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-os"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-os" names="class_@globalscope_property_os"><reference internal="True" refuri="class_os#class-os"><inline classes="std std-ref">OS</inline></reference> <strong>OS</strong> <reference internal="True" refid="class-globalscope-property-os"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_os#class-os"><inline classes="std std-ref">OS</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-performance"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-performance" names="class_@globalscope_property_performance"><reference internal="True" refuri="class_performance#class-performance"><inline classes="std std-ref">Performance</inline></reference> <strong>Performance</strong> <reference internal="True" refid="class-globalscope-property-performance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_performance#class-performance"><inline classes="std std-ref">Performance</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-physicsserver2d"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-physicsserver2d" names="class_@globalscope_property_physicsserver2d"><reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> <strong>PhysicsServer2D</strong> <reference internal="True" refid="class-globalscope-property-physicsserver2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_physicsserver2d#class-physicsserver2d"><inline classes="std std-ref">PhysicsServer2D</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-physicsserver2dmanager"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-physicsserver2dmanager" names="class_@globalscope_property_physicsserver2dmanager"><reference internal="True" refuri="class_physicsserver2dmanager#class-physicsserver2dmanager"><inline classes="std std-ref">PhysicsServer2DManager</inline></reference> <strong>PhysicsServer2DManager</strong> <reference internal="True" refid="class-globalscope-property-physicsserver2dmanager"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_physicsserver2dmanager#class-physicsserver2dmanager"><inline classes="std std-ref">PhysicsServer2DManager</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-physicsserver3d"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-physicsserver3d" names="class_@globalscope_property_physicsserver3d"><reference internal="True" refuri="class_physicsserver3d#class-physicsserver3d"><inline classes="std std-ref">PhysicsServer3D</inline></reference> <strong>PhysicsServer3D</strong> <reference internal="True" refid="class-globalscope-property-physicsserver3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_physicsserver3d#class-physicsserver3d"><inline classes="std std-ref">PhysicsServer3D</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-physicsserver3dmanager"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-physicsserver3dmanager" names="class_@globalscope_property_physicsserver3dmanager"><reference internal="True" refuri="class_physicsserver3dmanager#class-physicsserver3dmanager"><inline classes="std std-ref">PhysicsServer3DManager</inline></reference> <strong>PhysicsServer3DManager</strong> <reference internal="True" refid="class-globalscope-property-physicsserver3dmanager"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_physicsserver3dmanager#class-physicsserver3dmanager"><inline classes="std std-ref">PhysicsServer3DManager</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-projectsettings"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-projectsettings" names="class_@globalscope_property_projectsettings"><reference internal="True" refuri="class_projectsettings#class-projectsettings"><inline classes="std std-ref">ProjectSettings</inline></reference> <strong>ProjectSettings</strong> <reference internal="True" refid="class-globalscope-property-projectsettings"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_projectsettings#class-projectsettings"><inline classes="std std-ref">ProjectSettings</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-renderingserver"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-renderingserver" names="class_@globalscope_property_renderingserver"><reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> <strong>RenderingServer</strong> <reference internal="True" refid="class-globalscope-property-renderingserver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-resourceloader"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-resourceloader" names="class_@globalscope_property_resourceloader"><reference internal="True" refuri="class_resourceloader#class-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference> <strong>ResourceLoader</strong> <reference internal="True" refid="class-globalscope-property-resourceloader"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_resourceloader#class-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-resourcesaver"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-resourcesaver" names="class_@globalscope_property_resourcesaver"><reference internal="True" refuri="class_resourcesaver#class-resourcesaver"><inline classes="std std-ref">ResourceSaver</inline></reference> <strong>ResourceSaver</strong> <reference internal="True" refid="class-globalscope-property-resourcesaver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_resourcesaver#class-resourcesaver"><inline classes="std std-ref">ResourceSaver</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-resourceuid"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-resourceuid" names="class_@globalscope_property_resourceuid"><reference internal="True" refuri="class_resourceuid#class-resourceuid"><inline classes="std std-ref">ResourceUID</inline></reference> <strong>ResourceUID</strong> <reference internal="True" refid="class-globalscope-property-resourceuid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_resourceuid#class-resourceuid"><inline classes="std std-ref">ResourceUID</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-textservermanager"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-textservermanager" names="class_@globalscope_property_textservermanager"><reference internal="True" refuri="class_textservermanager#class-textservermanager"><inline classes="std std-ref">TextServerManager</inline></reference> <strong>TextServerManager</strong> <reference internal="True" refid="class-globalscope-property-textservermanager"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_textservermanager#class-textservermanager"><inline classes="std std-ref">TextServerManager</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-themedb"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-themedb" names="class_@globalscope_property_themedb"><reference internal="True" refuri="class_themedb#class-themedb"><inline classes="std std-ref">ThemeDB</inline></reference> <strong>ThemeDB</strong> <reference internal="True" refid="class-globalscope-property-themedb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_themedb#class-themedb"><inline classes="std std-ref">ThemeDB</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-time"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-time" names="class_@globalscope_property_time"><reference internal="True" refuri="class_time#class-time"><inline classes="std std-ref">Time</inline></reference> <strong>Time</strong> <reference internal="True" refid="class-globalscope-property-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_time#class-time"><inline classes="std std-ref">Time</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-translationserver"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-translationserver" names="class_@globalscope_property_translationserver"><reference internal="True" refuri="class_translationserver#class-translationserver"><inline classes="std std-ref">TranslationServer</inline></reference> <strong>TranslationServer</strong> <reference internal="True" refid="class-globalscope-property-translationserver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_translationserver#class-translationserver"><inline classes="std std-ref">TranslationServer</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-workerthreadpool"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-workerthreadpool" names="class_@globalscope_property_workerthreadpool"><reference internal="True" refuri="class_workerthreadpool#class-workerthreadpool"><inline classes="std std-ref">WorkerThreadPool</inline></reference> <strong>WorkerThreadPool</strong> <reference internal="True" refid="class-globalscope-property-workerthreadpool"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_workerthreadpool#class-workerthreadpool"><inline classes="std std-ref">WorkerThreadPool</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-property-xrserver"></target>
            <paragraph classes="classref-property" ids="class-globalscope-property-xrserver" names="class_@globalscope_property_xrserver"><reference internal="True" refuri="class_xrserver#class-xrserver"><inline classes="std std-ref">XRServer</inline></reference> <strong>XRServer</strong> <reference internal="True" refid="class-globalscope-property-xrserver"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refuri="class_xrserver#class-xrserver"><inline classes="std std-ref">XRServer</inline></reference> 单例。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-globalscope-method-abs"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-abs" names="class_@globalscope_method_abs"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>abs</strong>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-abs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型参数 <literal>x</literal> 的绝对值（即非负值）。支持的类型：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> 。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = abs(-1)
# a=1

var b = abs(-1.2)
# b=1.2

var c = abs(Vector2(-3.5, -4))
# c=(3.5, 4)

var d = abs(Vector2i(-5, -6))
# d=(5, 6)

var e = abs(Vector3(-7, 8.5, -3.8))
# e=(7, 8.5, 3.8)

var f = abs(Vector3i(-7, -8, -9))
# f=(7, 8, 9)</literal_block>
            <paragraph><strong>注意：</strong>为了更好的类型安全，请使用 <reference internal="True" refid="class-globalscope-method-absf"><inline classes="std std-ref">absf</inline></reference>、<reference internal="True" refid="class-globalscope-method-absi"><inline classes="std std-ref">absi</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-abs"><inline classes="std std-ref">Vector2.abs</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i-method-abs"><inline classes="std std-ref">Vector2i.abs</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-abs"><inline classes="std std-ref">Vector3.abs</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i-method-abs"><inline classes="std std-ref">Vector3i.abs</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4-method-abs"><inline classes="std std-ref">Vector4.abs</inline></reference> 或 <reference internal="True" refuri="class_vector4i#class-vector4i-method-abs"><inline classes="std std-ref">Vector4i.abs</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-absf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-absf" names="class_@globalscope_method_absf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>absf</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-absf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回浮点参数 <literal>x</literal> 的绝对值（即正值）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># a=1.2
var a = absf(-1.2)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-absi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-absi" names="class_@globalscope_method_absi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>absi</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-absi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回整数参数 <literal>x</literal> 的绝对值（即正值）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># a=1
var a = absi(-1)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-acos"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-acos" names="class_@globalscope_method_acos"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>acos</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-acos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的反余弦，单位为弧度。用来获取余弦 <literal>x</literal> 的角度。<literal>x</literal> 会被钳制在 <literal>-1.0</literal> 和 <literal>1.0</literal>（包括）之间，因此 <reference internal="True" refid="class-globalscope-method-acos"><inline classes="std std-ref">acos</inline></reference> 不会返回 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 如果用 rad_to_deg(c) 转换，c为0.523599或30度
var c = acos(0.866025)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-acosh"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-acosh" names="class_@globalscope_method_acosh"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>acosh</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-acosh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回参数 x 的双曲弧（也称为反余弦），返回弧度值。使用它来获取在双曲空间中，如果参数 x 大于或等于 1 ，角的余弦的角度。对于参数 x 小于 1 的值，将返回 0 ，以防止 <reference internal="True" refid="class-globalscope-method-acosh"><inline classes="std std-ref">acosh</inline></reference> 返回 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = acosh(2) # 返回 1.31695789692482
cosh(a) # 返回 2

var b = acosh(-1) # 返回 0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-angle-difference"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-angle-difference" names="class_@globalscope_method_angle_difference"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angle_difference</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-angle-difference"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两个角度之间的差，范围为 <literal>[-PI, +PI]</literal> 。当 <literal>from</literal> 和 <literal>to</literal> 相反时，如果 <literal>from</literal> 小于 <literal>to</literal>，则返回 <literal>-PI</literal> ，否则返回 <literal>PI</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-asin"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-asin" names="class_@globalscope_method_asin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>asin</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-asin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的反正弦值，单位为弧度。用来获取正弦 <literal>x</literal> 的角度。<literal>x</literal> 会被钳制在 <literal>-1.0</literal> 和 <literal>1.0</literal>（包括）之间，因此 <reference internal="True" refid="class-globalscope-method-asin"><inline classes="std std-ref">asin</inline></reference> 不会返回 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 如果用 rad_to_deg(s) 转换，s为0.523599或30度
var s = asin(0.5)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-asinh"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-asinh" names="class_@globalscope_method_asinh"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>asinh</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-asinh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回参数 x 的双曲弧（也称为反正弦），返回弧度值。使用它来获取在双曲空间中，角的正弦角度。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = asinh(0.9) # 返回 0.8088669356527824
sinh(a) # 返回 0.9</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-atan"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-atan" names="class_@globalscope_method_atan"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>atan</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-atan"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的反正切值，单位是弧度。在三角函数中用它来得到一个角上切线的角度。</paragraph>
            <paragraph>该方法无法确定角度应该落在哪个象限。如果你同时拥有 <literal>y</literal> 和 <literal>x</literal>，请参见 <reference internal="True" refid="class-globalscope-method-atan2"><inline classes="std std-ref">atan2</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = atan(0.5) # a=0.463648</literal_block>
            <paragraph>如果 <literal>x</literal> 在 <literal>-PI/2</literal> 和 <literal>PI/2</literal>（包括）之间，<literal>atan(tan(x))</literal> 等于 <literal>x</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-atan2"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-atan2" names="class_@globalscope_method_atan2"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>atan2</strong>(y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-atan2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>y/x</literal> 的反正切值，单位为弧度。用来获得正切值为 <literal>y/x</literal> 的角度。为了计算该值，该方法考虑了两个参数的符号，以确定象限。</paragraph>
            <paragraph>重要提示：按照惯例，Y 坐标在前。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = atan2(0, -1) # a = 3.141593</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-atanh"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-atanh" names="class_@globalscope_method_atanh"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>atanh</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-atanh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的双曲弧（也称为反正切），以弧度为单位。如果 <literal>x</literal> 在 -1 和 1 之间（不包括 -1 和 1 ），则使用它从双曲空间中的角度的正切值获取角度。</paragraph>
            <paragraph>在数学中，只有在实数集中，-1 &lt; <literal>x</literal> &lt; 1 的情况下，双曲反正切才有意义。因此，为了预防 <reference internal="True" refid="class-globalscope-method-atanh"><inline classes="std std-ref">atanh</inline></reference> 返回 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> ，对于 <literal>x</literal> 等于或小于 -1 的值，返回负的 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> ；对于<literal>x</literal>等于或大于 1 的值，返回正的 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-inf"><inline classes="std std-ref">@GDScript.INF</inline></reference> 。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = atanh(0.9) # 返回 1.47221948958322
tanh(a) # 返回 0.9

var b = atanh(-2) # 返回 -inf
tanh(b) # 返回 -1</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-bezier-derivative"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-bezier-derivative" names="class_@globalscope_method_bezier_derivative"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>bezier_derivative</strong>(start: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_1: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_2: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-bezier-derivative"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由给定的 <literal>control_1</literal>、<literal>control_2</literal> 和 <literal>end</literal> 点定义的一维<reference name="贝塞尔曲线" refuri="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">贝塞尔曲线</reference>上 <literal>t</literal> 处的导数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-bezier-interpolate"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-bezier-interpolate" names="class_@globalscope_method_bezier_interpolate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>bezier_interpolate</strong>(start: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_1: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, control_2: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-bezier-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由给定的 <literal>control_1</literal>、<literal>control_2</literal> 和 <literal>end</literal> 点定义的一维<reference name="贝塞尔曲线" refuri="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">贝塞尔曲线</reference>上位于给定 <literal>t</literal> 的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-bytes-to-var"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-bytes-to-var" names="class_@globalscope_method_bytes_to_var"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>bytes_to_var</strong>(bytes: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-globalscope-method-bytes-to-var"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节数组解码回 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 值，无法解码对象。</paragraph>
            <paragraph><strong>注意：</strong>如果需要对象反序列化，请参见 <reference internal="True" refid="class-globalscope-method-bytes-to-var-with-objects"><inline classes="std std-ref">bytes_to_var_with_objects</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-bytes-to-var-with-objects"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-bytes-to-var-with-objects" names="class_@globalscope_method_bytes_to_var_with_objects"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>bytes_to_var_with_objects</strong>(bytes: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-globalscope-method-bytes-to-var-with-objects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节数组解码回 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 值。允许解码对象。</paragraph>
            <paragraph><strong>警告：</strong>反序列化的对象可能包含执行的代码。如果序列化对象的来源不受信任，则不要使用此选项，以避免潜在的安全威胁（远程执行代码）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-ceil"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-ceil" names="class_@globalscope_method_ceil"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>ceil</strong>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-ceil"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向上舍入 <literal>x</literal>（朝正无穷大方向），返回不小于 <literal>x</literal> 的最小整数。支持的类型：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var i = ceil(1.45) # i 为 2.0
i = ceil(1.001)    # i 为 2.0</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-floor"><inline classes="std std-ref">floor</inline></reference>、<reference internal="True" refid="class-globalscope-method-round"><inline classes="std std-ref">round</inline></reference>、<reference internal="True" refid="class-globalscope-method-snapped"><inline classes="std std-ref">snapped</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>为了更好的类型安全，使用 <reference internal="True" refid="class-globalscope-method-ceilf"><inline classes="std std-ref">ceilf</inline></reference>、<reference internal="True" refid="class-globalscope-method-ceili"><inline classes="std std-ref">ceili</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-ceil"><inline classes="std std-ref">Vector2.ceil</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-ceil"><inline classes="std std-ref">Vector3.ceil</inline></reference> 或 <reference internal="True" refuri="class_vector4#class-vector4-method-ceil"><inline classes="std std-ref">Vector4.ceil</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-ceilf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-ceilf" names="class_@globalscope_method_ceilf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>ceilf</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-ceilf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向上舍入 <literal>x</literal>（朝正无穷大），返回不小于 <literal>x</literal> 的最小整数。</paragraph>
            <paragraph><reference internal="True" refid="class-globalscope-method-ceil"><inline classes="std std-ref">ceil</inline></reference> 的类型安全版本，返回一个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-ceili"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-ceili" names="class_@globalscope_method_ceili"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>ceili</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-ceili"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向上舍入 <literal>x</literal>（朝正无穷大），返回不小于 <literal>x</literal> 的最小整数。</paragraph>
            <paragraph><reference internal="True" refid="class-globalscope-method-ceil"><inline classes="std std-ref">ceil</inline></reference> 的类型安全版本，返回一个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-clamp"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-clamp" names="class_@globalscope_method_clamp"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>clamp</strong>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, min: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, max: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-clamp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>钳制 <literal>value</literal>，返回不小于 <literal>min</literal> 且不大于 <literal>max</literal> 的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>。任何能够用小于和大于运算符进行比较的值都能工作。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = clamp(-10, -1, 5)
# a 是 -1

var b = clamp(8.1, 0.9, 5.5)
# b 是 5.5</literal_block>
            <paragraph><strong>注意：</strong>为了更好的类型安全，请使用 <reference internal="True" refid="class-globalscope-method-clampf"><inline classes="std std-ref">clampf</inline></reference>、<reference internal="True" refid="class-globalscope-method-clampi"><inline classes="std std-ref">clampi</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-clamp"><inline classes="std std-ref">Vector2.clamp</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i-method-clamp"><inline classes="std std-ref">Vector2i.clamp</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-clamp"><inline classes="std std-ref">Vector3.clamp</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i-method-clamp"><inline classes="std std-ref">Vector3i.clamp</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4-method-clamp"><inline classes="std std-ref">Vector4.clamp</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i-method-clamp"><inline classes="std std-ref">Vector4i.clamp</inline></reference> 或 <reference internal="True" refuri="class_color#class-color-method-clamp"><inline classes="std std-ref">Color.clamp</inline></reference>（该方法当前不受支持）。</paragraph>
            <paragraph><strong>注意：</strong>当在向量上使用该函数时，它<emphasis>不</emphasis>会执行逐分量钳制，并且如果 <literal>value &lt; min</literal> 则结果为 <literal>min</literal>，如果 <literal>value &gt; max</literal> 则为 <literal>max</literal>。要执行逐分量钳制，请使用上面列出的方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-clampf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-clampf" names="class_@globalscope_method_clampf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>clampf</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-clampf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>钳制 <literal>value</literal>，返回不小于 <literal>min</literal> 且不大于 <literal>max</literal> 的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var speed = 42.1
var a = clampf(speed, 1.0, 20.5) # a 是 20.5

speed = -10.0
var b = clampf(speed, -1.0, 1.0) # b 是 -1.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-clampi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-clampi" names="class_@globalscope_method_clampi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>clampi</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-clampi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>钳制 <literal>value</literal>，返回不小于 <literal>min</literal> 且不大于 <literal>max</literal> 的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var speed = 42
var a = clampi(speed, 1, 20) # a 是 20

speed = -10
var b = clampi(speed, -1, 1) # b 是 -1</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-cos"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-cos" names="class_@globalscope_method_cos"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cos</strong>(angle_rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-cos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回弧度角为 <literal>angle_rad</literal> 的余弦值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">cos(PI * 2)         # 返回 1.0
cos(PI)             # 返回 -1.0
cos(deg_to_rad(90)) # 返回 0.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-cosh"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-cosh" names="class_@globalscope_method_cosh"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cosh</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-cosh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回弧度角 <literal>x</literal> 的双曲余弦值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(cosh(1)) # 打印 1.543081</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-cubic-interpolate"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-cubic-interpolate" names="class_@globalscope_method_cubic_interpolate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cubic_interpolate</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-cubic-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>weight</literal> 定义的系数，以及 <literal>pre</literal> 和 <literal>post</literal> 值，在两个值之间进行三次插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-cubic-interpolate-angle"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-cubic-interpolate-angle" names="class_@globalscope_method_cubic_interpolate_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cubic_interpolate_angle</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-cubic-interpolate-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>weight</literal> 定义的系数，以及 <literal>pre</literal> 和 <literal>post</literal> 值，在两个旋转值之间的最短路径进行三次插值 。另见 <reference internal="True" refid="class-globalscope-method-lerp-angle"><inline classes="std std-ref">lerp_angle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-cubic-interpolate-angle-in-time"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-cubic-interpolate-angle-in-time" names="class_@globalscope_method_cubic_interpolate_angle_in_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cubic_interpolate_angle_in_time</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-cubic-interpolate-angle-in-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>weight</literal> 定义的系数，以及 <literal>pre</literal> 和 <literal>post</literal> 值，在两个旋转值之间的最短路径进行三次插值。另见 <reference internal="True" refid="class-globalscope-method-lerp-angle"><inline classes="std std-ref">lerp_angle</inline></reference>。</paragraph>
            <paragraph>它可以根据时间值执行比 <reference internal="True" refid="class-globalscope-method-cubic-interpolate"><inline classes="std std-ref">cubic_interpolate</inline></reference> 更平滑的插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-cubic-interpolate-in-time"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-cubic-interpolate-in-time" names="class_@globalscope_method_cubic_interpolate_in_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cubic_interpolate_in_time</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-cubic-interpolate-in-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>weight</literal> 定义的系数，以及 <literal>pre</literal> 和 <literal>post</literal> 值，在两个值之间进行三次插值。</paragraph>
            <paragraph>它可以根据时间值执行比 <reference internal="True" refid="class-globalscope-method-cubic-interpolate"><inline classes="std std-ref">cubic_interpolate</inline></reference> 更平滑的插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-db-to-linear"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-db-to-linear" names="class_@globalscope_method_db_to_linear"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>db_to_linear</strong>(db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-db-to-linear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从分贝转换为线性能量（音频）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-deg-to-rad"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-deg-to-rad" names="class_@globalscope_method_deg_to_rad"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>deg_to_rad</strong>(deg: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-deg-to-rad"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将角度值转换为弧度值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var r = deg_to_rad(180) # r 是 3.141593</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-ease"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-ease" names="class_@globalscope_method_ease"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>ease</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, curve: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-ease"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>基于用 <literal>curve</literal> 定义的缓动函数返回 <literal>x</literal> 的“缓动后”的值。该缓动函数是基于指数的。<literal>curve</literal> 可以是任意浮点数，具体数值会导致以下行为：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">- 低于 -1.0（开区间）：缓入缓出
- -1.0：线性
- 在 -1.0 和 0.0 之间（开区间）：缓出缓入
- 0.0：恒定
- 在 0.0 到 1.0 之间（开区间）：缓出
- 1.0：线性
- 大于 1.0（开区间）：缓入</literal_block>
            <paragraph><reference name="ease() 曲线值速查表" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/ease_cheatsheet.png">ease() 曲线值速查表</reference></paragraph>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-smoothstep"><inline classes="std std-ref">smoothstep</inline></reference>。如果你需要执行更高级的过渡，请使用 <reference internal="True" refuri="class_tween#class-tween-method-interpolate-value"><inline classes="std std-ref">Tween.interpolate_value</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-error-string"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-error-string" names="class_@globalscope_method_error_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>error_string</strong>(error: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-error-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为给定的 <reference internal="True" refid="enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 代码返回一个人类可读的名称。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(OK)                              # 输出 0
print(error_string(OK))                # 输出 OK
print(error_string(ERR_BUSY))          # 输出 Busy
print(error_string(ERR_OUT_OF_MEMORY)) # 输出 Out of memory</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-exp"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-exp" names="class_@globalscope_method_exp"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>exp</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-exp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>自然指数函数。计算数学常数 <emphasis>e</emphasis> 的 <literal>x</literal> 次方并返回它。</paragraph>
            <paragraph><emphasis>e</emphasis> 的近似值为 2.71828，可以使用 <literal>exp(1)</literal> 获得。</paragraph>
            <paragraph>求其他底数的指数应使用 <reference internal="True" refid="class-globalscope-method-pow"><inline classes="std std-ref">pow</inline></reference> 方法。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = exp(2) # 大约是 7.39</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-floor"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-floor" names="class_@globalscope_method_floor"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>floor</strong>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-floor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向下舍入 <literal>x</literal>（朝负无穷大），返回不大于 <literal>x</literal> 的最大整数。支持的类型：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = floor(2.99) # a 为 2.0
a = floor(-2.99)    # a 为 -3.0</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-ceil"><inline classes="std std-ref">ceil</inline></reference>、<reference internal="True" refid="class-globalscope-method-round"><inline classes="std std-ref">round</inline></reference>、<reference internal="True" refid="class-globalscope-method-snapped"><inline classes="std std-ref">snapped</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>为了更好的类型安全，请使用 <reference internal="True" refid="class-globalscope-method-floorf"><inline classes="std std-ref">floorf</inline></reference>、<reference internal="True" refid="class-globalscope-method-floori"><inline classes="std std-ref">floori</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-floor"><inline classes="std std-ref">Vector2.floor</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-floor"><inline classes="std std-ref">Vector3.floor</inline></reference> 或 <reference internal="True" refuri="class_vector4#class-vector4-method-floor"><inline classes="std std-ref">Vector4.floor</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-floorf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-floorf" names="class_@globalscope_method_floorf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>floorf</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-floorf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>x</literal> 向下舍入（向负无穷大），返回不超过 <literal>x</literal> 的最大整数。</paragraph>
            <paragraph>一个类型安全的 <reference internal="True" refid="class-globalscope-method-floor"><inline classes="std std-ref">floor</inline></reference> 版本，返回一个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-floori"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-floori" names="class_@globalscope_method_floori"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>floori</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-floori"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>x</literal> 向下舍入（向负无穷大），返回不超过 <literal>x</literal> 的最大整数。</paragraph>
            <paragraph>是 <reference internal="True" refid="class-globalscope-method-floor"><inline classes="std std-ref">floor</inline></reference> 的类型安全版本，返回一个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个函数与 <literal>int(x)</literal> <emphasis>不</emphasis> 一样，后者是向 0 取整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-fmod"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-fmod" names="class_@globalscope_method_fmod"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fmod</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-fmod"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 除以 <literal>y</literal> 的浮点型余数，符号与 <literal>x</literal>一致。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var remainder = fmod(7, 5.5) # remainder 是 1.5</literal_block>
            <paragraph>对于整数取余运算，请使用 <literal>%</literal> 运算符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-fposmod"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-fposmod" names="class_@globalscope_method_fposmod"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fposmod</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-fposmod"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 除以 <literal>y</literal> 的浮点模数，对正负数进行一致的循环。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(" (x)  (fmod(x, 1.5))   (fposmod(x, 1.5))")
for i in 7:
    var x = i * 0.5 - 1.5
    print("%4.1f           %4.1f  | %4.1f" % [x, fmod(x, 1.5), fposmod(x, 1.5)])</literal_block>
            <paragraph>输出：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve"> (x)  (fmod(x, 1.5))   (fposmod(x, 1.5))
-1.5           -0.0  |  0.0
-1.0           -1.0  |  0.5
-0.5           -0.5  |  1.0
 0.0            0.0  |  0.0
 0.5            0.5  |  0.5
 1.0            1.0  |  1.0
 1.5            0.0  |  0.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-hash"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-hash" names="class_@globalscope_method_hash"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>hash</strong>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-hash"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回传入的 <literal>variable</literal> 的整数哈希值。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">print(hash("a")) # 输出 177670</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Print(GD.Hash("a")); // 输出 177670</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-instance-from-id"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-instance-from-id" names="class_@globalscope_method_instance_from_id"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>instance_from_id</strong>(instance_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-instance-from-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>instance_id</literal> 所对应的 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>。所有对象都有唯一的实例 ID。参见 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var foo = "bar"

func _ready():
    var id = get_instance_id()
    var inst = instance_from_id(id)
    print(inst.foo) # 输出 bar</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public partial class MyNode : Node
{
    public string Foo { get; set; } = "bar";

    public override void _Ready()
    {
        ulong id = GetInstanceId();
        var inst = (MyNode)InstanceFromId(Id);
        GD.Print(inst.Foo); // 输出 bar
    }
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-inverse-lerp"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-inverse-lerp" names="class_@globalscope_method_inverse_lerp"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>inverse_lerp</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-inverse-lerp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回插值或外推的因子。范围用 <literal>from</literal> 和 <literal>to</literal>指定，插值后的值由 <literal>weight</literal> 指定。如果 <literal>weight</literal> 在 <literal>from</literal> 和 <literal>to</literal> 之间（包含），那么返回的值在 <literal>0.0</literal> 和 <literal>1.0</literal> 之间。如果 <literal>weight</literal> 在该范围之外，则返回的是外推因子（返回值小于 <literal>0.0</literal> 或大于 <literal>1.0</literal>）。如果不希望这样，请对 <reference internal="True" refid="class-globalscope-method-inverse-lerp"><inline classes="std std-ref">inverse_lerp</inline></reference> 的结果使用 <reference internal="True" refid="class-globalscope-method-clamp"><inline classes="std std-ref">clamp</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 下面的 `lerp()` 调用时的插值比例是 0.75。
var middle = lerp(20, 30, 0.75)
# middle 现在是 27.5。

# 现在，我们假装忘记了原来的比例，想要找到是多少。
var ratio = inverse_lerp(20, 30, 27.5)
# ratio 现在是 0.75。</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-lerp"><inline classes="std std-ref">lerp</inline></reference>，它执行本操作的逆操作；以及 <reference internal="True" refid="class-globalscope-method-remap"><inline classes="std std-ref">remap</inline></reference>，将一系列连续的值映射到另一个值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-equal-approx" names="class_@globalscope_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong>(a: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-equal-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>a</literal> 和 <literal>b</literal> 彼此近似相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph>这里，“近似相等”意味着 <literal>a</literal> 和 <literal>b</literal> 在彼此的一个小的内部 epsilon 内，该 epsilon 与数字的大小成比例。</paragraph>
            <paragraph>相同符号的无穷大值被认为是相等的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-finite" names="class_@globalscope_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-finite"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 是否为有限值，即不是 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference>、正无穷大或负无穷大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-inf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-inf" names="class_@globalscope_method_is_inf"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_inf</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-inf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>x</literal> 是正无穷大或负无穷大，则返回 <literal>true</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-instance-id-valid"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-instance-id-valid" names="class_@globalscope_method_is_instance_id_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_instance_id_valid</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-instance-id-valid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果与 <literal>id</literal> 对应的 Object 是有效的对象（例如没有从内存中删除），则返回 <literal>true</literal> 。所有对象都有唯一的实例 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-instance-valid"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-instance-valid" names="class_@globalscope_method_is_instance_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_instance_valid</strong>(instance: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-instance-valid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>instance</literal> 是有效的 Object（例如，没有从内存中删除），则返回 <literal>true</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-nan"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-nan" names="class_@globalscope_method_is_nan"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_nan</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-nan"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>x</literal> 是 NaN（“非数字”或无效）值，则返回 <literal>true</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-same"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-same" names="class_@globalscope_method_is_same"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_same</strong>(a: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, b: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-same"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <literal>a</literal> 和 <literal>b</literal> 为值类型时，如果他们相同，那么返回 <literal>true</literal>。当 <literal>a</literal> 和 <literal>b</literal> 为引用类型时，如果它们的引用对象相同，那么返回 <literal>true</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># Vector2 是值类型
var vec2_a = Vector2(0, 0)
var vec2_b = Vector2(0, 0)
var vec2_c = Vector2(1, 1)
is_same(vec2_a, vec2_a)  # true
is_same(vec2_a, vec2_b)  # true
is_same(vec2_a, vec2_c)  # false

# Array 是引用类型
var arr_a = []
var arr_b = []
is_same(arr_a, arr_a)  # true
is_same(arr_a, arr_b)  # false</literal_block>
            <paragraph>值类型的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 有：<literal>null</literal>、<reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>、<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>、<reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>、<reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>、<reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>、<reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>、<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>、<reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>、<reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>、<reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>、<reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference>、<reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>、<reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>、<reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>、<reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 和 <reference internal="True" refuri="class_signal#class-signal"><inline classes="std std-ref">Signal</inline></reference>。</paragraph>
            <paragraph>引用类型的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 有：<reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>、<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>、<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>、<reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>、<reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference>、<reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>、<reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference>、<reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>、<reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>、<reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>、<reference internal="True" refuri="class_packedvector4array#class-packedvector4array"><inline classes="std std-ref">PackedVector4Array</inline></reference> 和 <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-is-zero-approx"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-is-zero-approx" names="class_@globalscope_method_is_zero_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_zero_approx</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-is-zero-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>x</literal> 为零或几乎为零，则返回 <literal>true</literal>。比较是使用具有小内部 epsilon 的公差计算的。</paragraph>
            <paragraph>该函数比使用一个值为零的 <reference internal="True" refid="class-globalscope-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference> 更快。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-lerp"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-lerp" names="class_@globalscope_method_lerp"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>lerp</strong>(from: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, to: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, weight: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-lerp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过 <literal>weight</literal> 中定义的因子在两个值之间进行线性插值。要执行插值，<literal>weight</literal> 应介于 <literal>0.0</literal> 和 <literal>1.0</literal> 之间（包含）。但是，超出此范围的值也是允许的，并可用于执行<emphasis>外推</emphasis>。如果不需要，请在该函数的结果上使用 <reference internal="True" refid="class-globalscope-method-clamp"><inline classes="std std-ref">clamp</inline></reference>。</paragraph>
            <paragraph><literal>from</literal> 和 <literal>to</literal> 必须是同一类型。支持的类型：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>、<reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>、<reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">lerp(0, 4, 0.75) # 返回 3.0</literal_block>
            <paragraph>另请参阅执行本操作的逆操作的 <reference internal="True" refid="class-globalscope-method-inverse-lerp"><inline classes="std std-ref">inverse_lerp</inline></reference>。要使用 <reference internal="True" refid="class-globalscope-method-lerp"><inline classes="std std-ref">lerp</inline></reference> 执行缓动插值，请将其与 <reference internal="True" refid="class-globalscope-method-ease"><inline classes="std std-ref">ease</inline></reference> 或 <reference internal="True" refid="class-globalscope-method-smoothstep"><inline classes="std std-ref">smoothstep</inline></reference> 结合使用。另见 <reference internal="True" refid="class-globalscope-method-remap"><inline classes="std std-ref">remap</inline></reference>，可将一系列连续的值映射到另一个值。</paragraph>
            <paragraph><strong>注意：</strong>为了更好的类型安全，请使用 <reference internal="True" refid="class-globalscope-method-lerpf"><inline classes="std std-ref">lerpf</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-lerp"><inline classes="std std-ref">Vector2.lerp</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-lerp"><inline classes="std std-ref">Vector3.lerp</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4-method-lerp"><inline classes="std std-ref">Vector4.lerp</inline></reference>、<reference internal="True" refuri="class_color#class-color-method-lerp"><inline classes="std std-ref">Color.lerp</inline></reference>、<reference internal="True" refuri="class_quaternion#class-quaternion-method-slerp"><inline classes="std std-ref">Quaternion.slerp</inline></reference> 或 <reference internal="True" refuri="class_basis#class-basis-method-slerp"><inline classes="std std-ref">Basis.slerp</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-lerp-angle"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-lerp-angle" names="class_@globalscope_method_lerp_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>lerp_angle</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-lerp-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过 0.0 和 1.0 之间的 <literal>weight</literal> 值，在两个角度（以弧度为单位）之间进行线性插值。</paragraph>
            <paragraph>类似于 <reference internal="True" refid="class-globalscope-method-lerp"><inline classes="std std-ref">lerp</inline></reference>，但当角度环绕 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-tau"><inline classes="std std-ref">@GDScript.TAU</inline></reference> 时会正确插值。要使用 <reference internal="True" refid="class-globalscope-method-lerp-angle"><inline classes="std std-ref">lerp_angle</inline></reference> 执行缓动插值，请将其与 <reference internal="True" refid="class-globalscope-method-ease"><inline classes="std std-ref">ease</inline></reference> 或 <reference internal="True" refid="class-globalscope-method-smoothstep"><inline classes="std std-ref">smoothstep</inline></reference> 结合使用。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">extends Sprite
var elapsed = 0.0
func _process(delta):
    var min_angle = deg_to_rad(0.0)
    var max_angle = deg_to_rad(90.0)
    rotation = lerp_angle(min_angle, max_angle, elapsed)
    elapsed += delta</literal_block>
            <paragraph><strong>注意：</strong>该函数通过 <literal>from</literal> 和 <literal>to</literal> 之间的最短路径进行插值。然而，当这两个角度相距大致 <literal>PI + k * TAU</literal> 其中 <literal>k</literal> 为任意整数时，由于浮点数精度误差的缘故，要对插值的方向进行判断是很难的。例如，<literal>lerp_angle(0, PI, weight)</literal> 会逆时针插值，而 <literal>lerp_angle(0, PI + 5 * TAU, weight)</literal> 则会顺时针插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-lerpf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-lerpf" names="class_@globalscope_method_lerpf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>lerpf</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-lerpf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过 <literal>weight</literal> 中定义的因子在两个值之间进行线性插值。要执行插值，<literal>weight</literal> 应介于 <literal>0.0</literal> 和 <literal>1.0</literal> 之间（包含）。但是，超出此范围的值是允许的，并可用于执行 <emphasis>外推</emphasis>。如果不需要，请对此函数的结果使用 <reference internal="True" refid="class-globalscope-method-clampf"><inline classes="std std-ref">clampf</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">lerpf(0, 4, 0.75) # 返回 3.0</literal_block>
            <paragraph>另请参阅执行本操作的逆运算的 <reference internal="True" refid="class-globalscope-method-inverse-lerp"><inline classes="std std-ref">inverse_lerp</inline></reference>。要使用 <reference internal="True" refid="class-globalscope-method-lerp"><inline classes="std std-ref">lerp</inline></reference> 执行缓动插值，请将其与 <reference internal="True" refid="class-globalscope-method-ease"><inline classes="std std-ref">ease</inline></reference> 或 <reference internal="True" refid="class-globalscope-method-smoothstep"><inline classes="std std-ref">smoothstep</inline></reference> 结合使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-linear-to-db"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-linear-to-db" names="class_@globalscope_method_linear_to_db"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>linear_to_db</strong>(lin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-linear-to-db"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从线性能量转换为分贝（音频）。这可用于实现按预期运行的音量滑块（因为音量不是线性的）。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># “Slider”引用的是 HSlider、VSlider 等继承自 Range 的节点。
# 必须将其范围配置为 0 到 1。
# 如果只想修改特定总线的音量，请修改总线名称。
AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Master"), linear_to_db($Slider.value))</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-log"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-log" names="class_@globalscope_method_log"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>log</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-log"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的<reference name="自然对数" refuri="https://zh.wikipedia.org/zh-cn/%E8%87%AA%E7%84%B6%E5%B0%8D%E6%95%B8">自然对数</reference>（底数为 <reference name="[i]e[/i]" refuri="https://zh.wikipedia.org/zh-cn/E_(%E6%95%B0%E5%AD%A6%E5%B8%B8%E6%95%B0)">[i]e[/i]</reference>，<emphasis>e</emphasis> 约为 2.71828）。这是持续增长到一定程度所需的时间。</paragraph>
            <paragraph><strong>注意：</strong>这个函数与大多数计算器上的对数“log”函数不同，他们适用的底数是 10。要使用底数为 10 的对数，请使用 <literal>log(x) / log(10)</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">log(10) # 返回 2.302585</literal_block>
            <paragraph><strong>注意：</strong><literal>0</literal> 的对数返回 <literal>-inf</literal>，负值返回 <literal>-nan</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-max"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-max" names="class_@globalscope_method_max"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>max</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定数值中的最大值。该函数可以接受任意数量的参数。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">max(1, 7, 3, -6, 5) # 返回 7</literal_block>
            <paragraph><strong>注意：</strong>对向量使用时<emphasis>不会</emphasis>针对分量求最大值，选取最大值时只会使用 <literal>x &lt; y</literal> 进行比较。要求分量中的最大值，请使用 <reference internal="True" refuri="class_vector2#class-vector2-method-min"><inline classes="std std-ref">Vector2.min</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i-method-min"><inline classes="std std-ref">Vector2i.min</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-min"><inline classes="std std-ref">Vector3.min</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i-method-min"><inline classes="std std-ref">Vector3i.min</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4-method-min"><inline classes="std std-ref">Vector4.min</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i-method-min"><inline classes="std std-ref">Vector4i.min</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-maxf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-maxf" names="class_@globalscope_method_maxf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>maxf</strong>(a: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-maxf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 值中的最大值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">maxf(3.6, 24)   # 返回 24.0
maxf(-3.99, -4) # 返回 -3.99</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-maxi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-maxi" names="class_@globalscope_method_maxi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>maxi</strong>(a: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, b: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-maxi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值中的最大值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">maxi(1, 2)   # 返回 2
maxi(-3, -4) # 返回 -3</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-min"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-min" names="class_@globalscope_method_min"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>min</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定数值中的最小值。该函数可以接受任意数量的参数。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">min(1, 7, 3, -6, 5) # 返回 -6</literal_block>
            <paragraph><strong>注意：</strong>对向量使用时<emphasis>不会</emphasis>针对分量求最小值，选取最小值时只会使用 <literal>x &lt; y</literal> 进行比较。要求分量中的最小值，请使用 <reference internal="True" refuri="class_vector2#class-vector2-method-min"><inline classes="std std-ref">Vector2.min</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i-method-min"><inline classes="std std-ref">Vector2i.min</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-min"><inline classes="std std-ref">Vector3.min</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i-method-min"><inline classes="std std-ref">Vector3i.min</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4-method-min"><inline classes="std std-ref">Vector4.min</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i-method-min"><inline classes="std std-ref">Vector4i.min</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-minf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-minf" names="class_@globalscope_method_minf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>minf</strong>(a: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-minf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 值中的最小值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">minf(3.6, 24)   # 返回 3.6
minf(-3.99, -4) # 返回 -4.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-mini"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-mini" names="class_@globalscope_method_mini"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mini</strong>(a: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, b: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-mini"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回两个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值中的最小值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">mini(1, 2)   # 返回 1
mini(-3, -4) # 返回 -4</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-move-toward"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-move-toward" names="class_@globalscope_method_move_toward"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>move_toward</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-move-toward"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>from</literal> 向 <literal>to</literal> 移动，移动的长度是 <literal>delta</literal>。不会超过 <literal>to</literal>。</paragraph>
            <paragraph>使用负的 <literal>delta</literal> 值则向远离的方向移动。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">move_toward(5, 10, 4)    # Returns 9
move_toward(10, 5, 4)    # Returns 6
move_toward(5, 10, 9)    # Returns 10
move_toward(10, 5, -1.5) # Returns 11.5</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-nearest-po2"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-nearest-po2" names="class_@globalscope_method_nearest_po2"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>nearest_po2</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-nearest-po2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回大于等于 <literal>value</literal> 的最小的 2 的幂。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">nearest_po2(3) # 返回 4
nearest_po2(4) # 返回 4
nearest_po2(5) # 返回 8

nearest_po2(0)  # 返回 0（可能出乎意料）
nearest_po2(-1) # 返回 0（可能出乎意料）</literal_block>
            <paragraph><strong>警告：</strong>由于其实现方式，该函数会对小于等于 <literal>0</literal> 的值返回 <literal>0</literal> 而不是 <literal>1</literal>，例外是 <literal>value</literal> 为最小的负 64 位整数（<literal>-9223372036854775808</literal>）时，会将 <literal>value</literal> 原样返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-pingpong"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-pingpong" names="class_@globalscope_method_pingpong"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pingpong</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-pingpong"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>value</literal> 包裹在 <literal>0</literal> 和 <literal>length</literal> 之间。如果达到限制，函数返回的下一个值将减少到 <literal>0</literal> 侧或增加到 <literal>length</literal> 侧（像三角波）。如果 <literal>length</literal> 小于零，则变为正数。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">pingpong(-3.0, 3.0) # 返回 3.0
pingpong(-2.0, 3.0) # 返回 2.0
pingpong(-1.0, 3.0) # 返回 1.0
pingpong(0.0, 3.0)  # 返回 0.0
pingpong(1.0, 3.0)  # 返回 1.0
pingpong(2.0, 3.0)  # 返回 2.0
pingpong(3.0, 3.0)  # 返回 3.0
pingpong(4.0, 3.0)  # 返回 2.0
pingpong(5.0, 3.0)  # 返回 1.0
pingpong(6.0, 3.0)  # 返回 0.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-posmod"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-posmod" names="class_@globalscope_method_posmod"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>posmod</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-posmod"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 除以 <literal>y</literal> 的整数模数，对正负数进行一致的循环。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print("#(i)  (i % 3)   (posmod(i, 3))")
for i in range(-3, 4):
    print("%2d       %2d  | %2d" % [i, i % 3, posmod(i, 3)])</literal_block>
            <paragraph>结果：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">(i)  (i % 3)   (posmod(i, 3))
-3        0  |  0
-2       -2  |  1
-1       -1  |  2
 0        0  |  0
 1        1  |  1
 2        2  |  2
 3        0  |  0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-pow"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-pow" names="class_@globalscope_method_pow"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pow</strong>(base: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, exp: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-pow"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>base</literal> 的 <literal>exp</literal> 次幂的结果。</paragraph>
            <paragraph>在 GDScript 中，这相当于 <literal>**</literal> 运算符。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">pow(2, 5)   # 返回 32.0
pow(4, 1.5) # 返回 8.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-print"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-print" names="class_@globalscope_method_print"><abbreviation explanation="无返回值。">void</abbreviation> <strong>print</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-print"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以尽可能最佳的方式将一个或多个任意类型的参数转换为字符串，并将其打印到控制台。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var a = [1, 2, 3]
print("a", "b", a) # 输出 ab[1, 2, 3]</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var a = new Godot.Collections.Array { 1, 2, 3 };
GD.Print("a", "b", a); // 输出 ab[1, 2, 3]</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>请考虑使用 <reference internal="True" refid="class-globalscope-method-push-error"><inline classes="std std-ref">push_error</inline></reference> 和 <reference internal="True" refid="class-globalscope-method-push-warning"><inline classes="std std-ref">push_warning</inline></reference> 来打印错误和警告消息，而不是 <reference internal="True" refid="class-globalscope-method-print"><inline classes="std std-ref">print</inline></reference> 或 <reference internal="True" refid="class-globalscope-method-print-rich"><inline classes="std std-ref">print_rich</inline></reference>。这将它们与用于调试目的的打印消息区分开来，同时还会在打印错误或警告时显示堆栈跟踪。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-print-rich"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-print-rich" names="class_@globalscope_method_print_rich"><abbreviation explanation="无返回值。">void</abbreviation> <strong>print_rich</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-print-rich"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以尽可能最佳的方式将一个或多个任意类型的参数转换为字符串，并将其打印到控制台。</paragraph>
            <paragraph>支持以下 BBCode 标签： <literal>b</literal>、<literal>i</literal>、<literal>u</literal>、<literal>s</literal>、<literal>indent</literal>、<literal>code</literal>、<literal>url</literal>、<literal>center</literal>、<literal>right</literal>、<literal>color</literal>、<literal>bgcolor</literal>、<literal>fgcolor</literal>。</paragraph>
            <paragraph>颜色标签仅支持以下颜色名称：<literal>black</literal>、<literal>red</literal>、<literal>green</literal>、<literal>yellow</literal>、<literal>blue</literal>、<literal>magenta</literal>、<literal>pink</literal>、<literal>purple</literal>、<literal>cyan</literal>、<literal>white</literal>、<literal>orange</literal>、<literal>gray</literal>。不支持十六进制颜色代码。</paragraph>
            <paragraph>URL 标签仅支持在 URL 标签中包含 URL，不支持使用不同标题的 URL。</paragraph>
            <paragraph>当打印到标准输出时，支持的 BBCode 子集被转换为 ANSI 转义码以供终端仿真器显示。对 ANSI 转义码的支持可能因终端仿真器而异，尤其是斜体和删除线。在标准输出中，<literal>code</literal> 会使用较弱的文本表示，但字体不变。不支持的标签在标准输出中会原样保留。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">print_rich("[color=green][b]Hello world![/b][/color]") # 输出绿色的粗体“Hello world!”</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.PrintRich("[color=green][b]Hello world![/b][/color]"); // 输出绿色的粗体“Hello world!”</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>请考虑使用 <reference internal="True" refid="class-globalscope-method-push-error"><inline classes="std std-ref">push_error</inline></reference> 和 <reference internal="True" refid="class-globalscope-method-push-warning"><inline classes="std std-ref">push_warning</inline></reference> 来打印错误和警告消息，而不是 <reference internal="True" refid="class-globalscope-method-print"><inline classes="std std-ref">print</inline></reference> 或 <reference internal="True" refid="class-globalscope-method-print-rich"><inline classes="std std-ref">print_rich</inline></reference>。这将它们与用于调试目的的打印消息区分开来，同时还会在打印错误或警告时显示堆栈跟踪。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 中，只有 Windows 10 及后续版本能够在标准输出中正确显示 ANSI 转义码。</paragraph>
            <paragraph><strong>注意：</strong>在编辑器中显示的输出支持可点击的 <literal>[url=address]文本[/url]</literal> 标签。点击时， <literal>[url]</literal> 标签的 <literal>address</literal> 值由 <reference internal="True" refuri="class_os#class-os-method-shell-open"><inline classes="std std-ref">OS.shell_open</inline></reference> 处理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-print-verbose"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-print-verbose" names="class_@globalscope_method_print_verbose"><abbreviation explanation="无返回值。">void</abbreviation> <strong>print_verbose</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-print-verbose"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用了详细模式（<reference internal="True" refuri="class_os#class-os-method-is-stdout-verbose"><inline classes="std std-ref">OS.is_stdout_verbose</inline></reference> 返回 <literal>true</literal>），则尽可能以最佳方式将一个或多个任意类型的参数转换为字符串，并将它们打印到控制台。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-printerr"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-printerr" names="class_@globalscope_method_printerr"><abbreviation explanation="无返回值。">void</abbreviation> <strong>printerr</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-printerr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以尽可能最佳的方式将一个或多个参数作为字符串输出到标准错误行。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">printerr("prints to stderr")</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.PrintErr("prints to stderr");</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-printraw"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-printraw" names="class_@globalscope_method_printraw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>printraw</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-printraw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以尽可能最佳的方式将一个或多个参数作为字符串输出到操作系统终端。与 <reference internal="True" refid="class-globalscope-method-print"><inline classes="std std-ref">print</inline></reference> 不同的是，最后不会自动添加换行符。</paragraph>
            <paragraph><strong>注意：</strong>操作系统终端与编辑器的“输出”面板<emphasis>不同</emphasis>。从终端运行 Godot 时可以看到发送至操作系统终端的输出。在 Windows 上，需要用到 <literal>console.exe</literal> 可执行文件。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">printraw("A")
printraw("B")
printraw("C")
# 输出 ABC 到终端</literal_block>
                </div>
                <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.PrintRaw("A");
GD.PrintRaw("B");
GD.PrintRaw("C");
// 输出 ABC 到终端</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-prints"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-prints" names="class_@globalscope_method_prints"><abbreviation explanation="无返回值。">void</abbreviation> <strong>prints</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-prints"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个或多个参数打印到控制台，每个参数之间有一个空格。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">prints("A", "B", "C") # 输出 A B C</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.PrintS("A", "B", "C"); // 输出 A B C</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-printt"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-printt" names="class_@globalscope_method_printt"><abbreviation explanation="无返回值。">void</abbreviation> <strong>printt</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-printt"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个或多个参数打印到控制台，每个参数之间有一个制表符。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-9-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-9-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-9-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">printt("A", "B", "C") # 输出 A       B       C</literal_block>
                </div>
                <div aria-labelledby="tab-9-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-9-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.PrintT("A", "B", "C"); // 输出 A       B       C</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-push-error"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-push-error" names="class_@globalscope_method_push_error"><abbreviation explanation="无返回值。">void</abbreviation> <strong>push_error</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-push-error"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将错误消息推送到 Godot 的内置调试器和 OS 终端。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-10-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-10-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-10-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">push_error("test error") # 向调试器和终端打印 “test error” 作为错误调用</literal_block>
                </div>
                <div aria-labelledby="tab-10-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-10-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.PushError("test error"); // 向调试器和终端打印 “test error” 作为错误调用</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>该函数不会暂停项目执行。要在调试版本中打印错误消息并暂停项目执行，请改用 <literal>assert(false, "test error")</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-push-warning"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-push-warning" names="class_@globalscope_method_push_warning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>push_warning</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-push-warning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将警告消息推送到 Godot 的内置调试器和 OS 终端。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-11-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-11-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-11-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">push_warning("test warning") # 以警告的形式向调试器和终端输出 “test warning”</literal_block>
                </div>
                <div aria-labelledby="tab-11-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-11-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.PushWarning("test warning"); // 以警告的形式向调试器和终端输出 “test warning”</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-rad-to-deg"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-rad-to-deg" names="class_@globalscope_method_rad_to_deg"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rad_to_deg</strong>(rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-rad-to-deg"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将以弧度表示的角度转换为度。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">rad_to_deg(0.523599) # 返回 30
rad_to_deg(PI)       # 返回 180
rad_to_deg(PI * 2)   # 返回 360</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-rand-from-seed"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-rand-from-seed" names="class_@globalscope_method_rand_from_seed"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>rand_from_seed</strong>(seed: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-rand-from-seed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>给定一个 <literal>seed</literal>，返回一个大小为 <literal>2</literal> 的 <reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference>，其中第一个元素是随机化的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值，第二个元素与 <literal>seed</literal> 相同。传入相同的 <literal>seed</literal> 会一致地返回相同的数组。</paragraph>
            <paragraph><strong>注意：</strong>这里的“种子”是指伪随机数发生器的内部状态，目前实现为一个 64 位整数。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = rand_from_seed(4)

print(a[0]) # 输出 2879024997
print(a[1]) # 输出 4</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-randf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-randf" names="class_@globalscope_method_randf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>randf</strong>() <reference internal="True" refid="class-globalscope-method-randf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>0.0</literal> 和 <literal>1.0</literal>（包含）之间的随机浮点值。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-12-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-12-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-12-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-12-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-12-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-12-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">randf() # 返回示例 0.375671</literal_block>
                </div>
                <div aria-labelledby="tab-12-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-12-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Randf(); // 返回示例 0.375671</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-randf-range"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-randf-range" names="class_@globalscope_method_randf_range"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>randf_range</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-randf-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>from</literal> 和 <literal>to</literal>（包含）之间的随机浮点值。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-13-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-13-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-13-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-13-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-13-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-13-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">randf_range(0, 20.5) # 返回示例 7.45315
randf_range(-10, 10) # 返回示例 -3.844535</literal_block>
                </div>
                <div aria-labelledby="tab-13-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-13-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.RandRange(0.0, 20.5);   // 返回示例 7.45315
GD.RandRange(-10.0, 10.0); // 返回示例 -3.844535</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-randfn"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-randfn" names="class_@globalscope_method_randfn"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>randfn</strong>(mean: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, deviation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-randfn"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个<reference name="正态分布" refuri="https://en.wikipedia.org/wiki/Normal_distribution">正态分布</reference>的伪随机数，该正态分布具有指定 <literal>mean</literal> 和标准 <literal>deviation</literal>。这也被称为高斯分布。</paragraph>
            <paragraph><strong>注意：</strong>该方法使用 <reference name="Box-Muller 变换" refuri="https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform">Box-Muller 变换</reference>算法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-randi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-randi" names="class_@globalscope_method_randi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>randi</strong>() <reference internal="True" refid="class-globalscope-method-randi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个随机的无符号 32 位整数。使用余数获得区间 <literal>[0, N - 1]</literal> （其中 N 小于 2^32）的随机值。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-14-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-14-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-14-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-14-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-14-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-14-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">randi()           # 返回介于 0 到 2^32 - 1 之间的随机整数
randi() % 20      # 返回介于 0 到 19之间的随机整数
randi() % 100     # 返回介于 0 到 99 之间的随机整数
randi() % 100 + 1 # 返回介于 1 到 100 之间的随机整数</literal_block>
                </div>
                <div aria-labelledby="tab-14-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-14-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Randi();           // 返回介于 0 到 2^32 - 1 之间的随机整数
GD.Randi() % 20;      // 返回介于 0 到 19之间的随机整数
GD.Randi() % 100;     // 返回介于 0 到 99 之间的随机整数
GD.Randi() % 100 + 1; // 返回介于 1 到 100 之间的随机整数</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-randi-range"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-randi-range" names="class_@globalscope_method_randi_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>randi_range</strong>(from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-randi-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回介于 <literal>from</literal> 和 <literal>to</literal>（包含）之间的一个随机有符号 32 位整数。如果 <literal>to</literal> 小于 <literal>from</literal>，则它们将被交换。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-15-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-15-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-15-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-15-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-15-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-15-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">randi_range(0, 1)      # 返回 0 或 1
randi_range(-10, 1000) # 返回介于 -10 和 1000 之间的随机整数</literal_block>
                </div>
                <div aria-labelledby="tab-15-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-15-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.RandRange(0, 1);      // 返回 0 或 1
GD.RandRange(-10, 1000); // 返回介于 -10 和 1000 之间的随机整数</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-randomize"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-randomize" names="class_@globalscope_method_randomize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>randomize</strong>() <reference internal="True" refid="class-globalscope-method-randomize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>随机化随机数发生器的种子（或内部状态）。目前的实现使用一个基于设备时间的数字。</paragraph>
            <paragraph><strong>注意：</strong>该函数在项目运行时自动被调用。如果需要修复种子以获得一致、可重现的结果，请使用 <reference internal="True" refid="class-globalscope-method-seed"><inline classes="std std-ref">seed</inline></reference> 来初始化随机数生成器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-remap"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-remap" names="class_@globalscope_method_remap"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>remap</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, istart: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, istop: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ostart: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, ostop: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-remap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Maps a <literal>value</literal> from range <literal>[istart, istop]</literal> to <literal>[ostart, ostop]</literal>. See also <reference internal="True" refid="class-globalscope-method-lerp"><inline classes="std std-ref">lerp</inline></reference> and <reference internal="True" refid="class-globalscope-method-inverse-lerp"><inline classes="std std-ref">inverse_lerp</inline></reference>. If <literal>value</literal> is outside <literal>[istart, istop]</literal>, then the resulting value will also be outside <literal>[ostart, ostop]</literal>. If this is not desired, use <reference internal="True" refid="class-globalscope-method-clamp"><inline classes="std std-ref">clamp</inline></reference> on the result of this function.</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">remap(75, 0, 100, -1, 1) # Returns 0.5</literal_block>
            <paragraph>For complex use cases where multiple ranges are needed, consider using <reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> or <reference internal="True" refuri="class_gradient#class-gradient"><inline classes="std std-ref">Gradient</inline></reference> instead.</paragraph>
            <paragraph><strong>Note:</strong> If <literal>istart == istop</literal>, the return value is undefined (most likely NaN, INF, or -INF).</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-rid-allocate-id"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-rid-allocate-id" names="class_@globalscope_method_rid_allocate_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>rid_allocate_id</strong>() <reference internal="True" refid="class-globalscope-method-rid-allocate-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>分配一个唯一 ID，实现方可以用它来构造 RID。主要由原生扩展使用，用于实现服务器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-rid-from-int64"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-rid-from-int64" names="class_@globalscope_method_rid_from_int64"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>rid_from_int64</strong>(base: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-rid-from-int64"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 <literal>base</literal> 创建一个 RID。主要由原生扩展使用，用于构建服务器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-rotate-toward"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-rotate-toward" names="class_@globalscope_method_rotate_toward"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rotate_toward</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-rotate-toward"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>from</literal> 朝 <literal>to</literal> 旋转，旋转的量为 <literal>delta</literal>。不会越过 <literal>to</literal>。</paragraph>
            <paragraph>与 <reference internal="True" refid="class-globalscope-method-move-toward"><inline classes="std std-ref">move_toward</inline></reference> 类似，但是能够让夹角正确绕过 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-tau"><inline classes="std std-ref">@GDScript.TAU</inline></reference>。</paragraph>
            <paragraph>如果 <literal>delta</literal> 为负，则该函数会进行远离 <literal>to</literal> 的旋转，朝向相反的角度，但不会越过该角度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-round"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-round" names="class_@globalscope_method_round"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>round</strong>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-round"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>x</literal> 舍入到最接近的整数，中间情况远离 0 舍入。支持的类型：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">round(2.4) # 返回 2
round(2.5) # 返回 3
round(2.6) # 返回 3</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-floor"><inline classes="std std-ref">floor</inline></reference>、<reference internal="True" refid="class-globalscope-method-ceil"><inline classes="std std-ref">ceil</inline></reference>、<reference internal="True" refid="class-globalscope-method-snapped"><inline classes="std std-ref">snapped</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>为了更好的类型安全，使用 <reference internal="True" refid="class-globalscope-method-roundf"><inline classes="std std-ref">roundf</inline></reference>、<reference internal="True" refid="class-globalscope-method-roundi"><inline classes="std std-ref">roundi</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-round"><inline classes="std std-ref">Vector2.round</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-round"><inline classes="std std-ref">Vector3.round</inline></reference> 或 <reference internal="True" refuri="class_vector4#class-vector4-method-round"><inline classes="std std-ref">Vector4.round</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-roundf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-roundf" names="class_@globalscope_method_roundf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>roundf</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-roundf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>x</literal> 舍入到最接近的整数，中间情况远离 0 舍入。</paragraph>
            <paragraph><reference internal="True" refid="class-globalscope-method-round"><inline classes="std std-ref">round</inline></reference> 的类型安全版本，返回一个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-roundi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-roundi" names="class_@globalscope_method_roundi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>roundi</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-roundi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>x</literal> 舍入到最接近的整数，中间情况远离 0 舍入。</paragraph>
            <paragraph><reference internal="True" refid="class-globalscope-method-round"><inline classes="std std-ref">round</inline></reference> 的类型安全版本，返回一个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-seed"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-seed" names="class_@globalscope_method_seed"><abbreviation explanation="无返回值。">void</abbreviation> <strong>seed</strong>(base: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-seed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将随机数生成器的种子设置为 <literal>base</literal>。手动设置种子可以确保大多数随机函数的结果一致、可重复。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-16-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-16-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-16-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-16-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-16-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-16-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var my_seed = "Godot Rocks".hash()
seed(my_seed)
var a = randf() + randi()
seed(my_seed)
var b = randf() + randi()
# a 和 b 现在是一样的</literal_block>
                </div>
                <div aria-labelledby="tab-16-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-16-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">ulong mySeed = (ulong)GD.Hash("Godot Rocks");
GD.Seed(mySeed);
var a = GD.Randf() + GD.Randi();
GD.Seed(mySeed);
var b = GD.Randf() + GD.Randi();
// a 和 b 现在是一样的</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-sign"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-sign" names="class_@globalscope_method_sign"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>sign</strong>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-sign"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>x</literal> 相同类型的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>，负值返回 <literal>-1</literal>、正值返回 <literal>1</literal>，零则返回 <literal>0</literal>。如果是 <literal>nan</literal> 则返回 0。</paragraph>
            <paragraph>支持的类型有：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">sign(-6.0) # 返回 -1
sign(0.0)  # 返回 0
sign(6.0)  # 返回 1
sign(NAN)  # 返回 0

sign(Vector3(-6.0, 0.0, 6.0)) # 返回 (-1, 0, 1)</literal_block>
            <paragraph><strong>注意：</strong>为了更好的类型安全，请使用 <reference internal="True" refid="class-globalscope-method-signf"><inline classes="std std-ref">signf</inline></reference>、<reference internal="True" refid="class-globalscope-method-signi"><inline classes="std std-ref">signi</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-sign"><inline classes="std std-ref">Vector2.sign</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i-method-sign"><inline classes="std std-ref">Vector2i.sign</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-sign"><inline classes="std std-ref">Vector3.sign</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i-method-sign"><inline classes="std std-ref">Vector3i.sign</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4-method-sign"><inline classes="std std-ref">Vector4.sign</inline></reference> 或 <reference internal="True" refuri="class_vector4i#class-vector4i-method-sign"><inline classes="std std-ref">Vector4i.sign</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-signf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-signf" names="class_@globalscope_method_signf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>signf</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-signf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>x</literal> 为负，则返回 <literal>-1.0</literal>；如果 <literal>x</literal> 为正，则返回 <literal>1.0</literal>；如果 <literal>x</literal> 为零，则返回 <literal>0.0</literal>。如果 <literal>x</literal> 为 <literal>nan</literal> 则返回 0.0。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">signf(-6.5) # 返回 -1.0
signf(0.0)  # 返回 0.0
signf(6.5)  # 返回 1.0
signf(NAN)  # 返回 0.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-signi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-signi" names="class_@globalscope_method_signi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>signi</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-signi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>x</literal> 为负，则返回 <literal>-1</literal>；如果 <literal>x</literal> 为正，则返回 <literal>1</literal>；如果 <literal>x</literal> 为零，则返回 <literal>0</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">signi(-6) # 返回 -1
signi(0)  # 返回 0
signi(6)  # 返回 1</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-sin"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-sin" names="class_@globalscope_method_sin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>sin</strong>(angle_rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-sin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回弧度角 <literal>angle_rad</literal> 的正弦值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">sin(0.523599)       # 返回 0.5
sin(deg_to_rad(90)) # 返回 1.0</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-sinh"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-sinh" names="class_@globalscope_method_sinh"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>sinh</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-sinh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的双曲正弦值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = log(2.0) # 返回 0.693147
sinh(a) # 返回 0.75</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-smoothstep"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-smoothstep" names="class_@globalscope_method_smoothstep"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>smoothstep</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-smoothstep"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 在 <literal>0</literal> 和 <literal>1</literal> 之间平滑插值的结果，基于 <literal>x</literal> 相对于边 <literal>from</literal> 和 <literal>to</literal> 的位置。</paragraph>
            <paragraph>如果 <literal>x &lt;= from</literal>，则返回值为 <literal>0</literal>；如果 <literal>x &gt;= to</literal>，则返回值为 <literal>1</literal>。如果 <literal>x</literal> 位于 <literal>from</literal> 和 <literal>to</literal> 之间，则返回值遵循一条将 <literal>x</literal> 映射到 <literal>0</literal> 和 <literal>1</literal> 之间的 S 形曲线。</paragraph>
            <paragraph>这条 S 形曲线是三次 Hermite 插值器，由 <literal>f(y) = 3*y^2 - 2*y^3</literal> 给出，其中 <literal>y = (x-from) / (to-from)</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">smoothstep(0, 2, -5.0) # 返回 0.0
smoothstep(0, 2, 0.5) # 返回 0.15625
smoothstep(0, 2, 1.0) # 返回 0.5
smoothstep(0, 2, 2.0) # 返回 1.0</literal_block>
            <paragraph>与曲线值为 <literal>-1.6521</literal> 的 <reference internal="True" refid="class-globalscope-method-ease"><inline classes="std std-ref">ease</inline></reference> 相比，<reference internal="True" refid="class-globalscope-method-smoothstep"><inline classes="std std-ref">smoothstep</inline></reference> 返回最平滑的曲线，导数没有突然变化。如果需要执行更高级的过渡，请使用 <reference internal="True" refuri="class_tween#class-tween"><inline classes="std std-ref">Tween</inline></reference> 或 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference>。</paragraph>
            <paragraph><reference name="smoothstep() 与 ease(x, -1.6521) 返回值的比较" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/smoothstep_ease_comparison.png">smoothstep() 与 ease(x, -1.6521) 返回值的比较</reference></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-snapped"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-snapped" names="class_@globalscope_method_snapped"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>snapped</strong>(x: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, step: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-snapped"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最接近 <literal>x</literal> 的 <literal>step</literal> 的倍数。这也可用于将一个浮点数四舍五入为任意小数位数。</paragraph>
            <paragraph>返回值是与 <literal>step</literal> 相同类型的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>。支持的类型：<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">snapped(100, 32)  # 返回 96
snapped(3.14159, 0.01)  # 返回 3.14

snapped(Vector2(34, 70), Vector2(8, 8))  # 返回 (32, 72)</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-ceil"><inline classes="std std-ref">ceil</inline></reference>、<reference internal="True" refid="class-globalscope-method-floor"><inline classes="std std-ref">floor</inline></reference> 和 <reference internal="True" refid="class-globalscope-method-round"><inline classes="std std-ref">round</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>为了更好的类型安全，请使用 <reference internal="True" refid="class-globalscope-method-snappedf"><inline classes="std std-ref">snappedf</inline></reference>、<reference internal="True" refid="class-globalscope-method-snappedi"><inline classes="std std-ref">snappedi</inline></reference>、<reference internal="True" refuri="class_vector2#class-vector2-method-snapped"><inline classes="std std-ref">Vector2.snapped</inline></reference>、<reference internal="True" refuri="class_vector2i#class-vector2i-method-snapped"><inline classes="std std-ref">Vector2i.snapped</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-method-snapped"><inline classes="std std-ref">Vector3.snapped</inline></reference>、<reference internal="True" refuri="class_vector3i#class-vector3i-method-snapped"><inline classes="std std-ref">Vector3i.snapped</inline></reference>、<reference internal="True" refuri="class_vector4#class-vector4-method-snapped"><inline classes="std std-ref">Vector4.snapped</inline></reference>、<reference internal="True" refuri="class_vector4i#class-vector4i-method-snapped"><inline classes="std std-ref">Vector4i.snapped</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-snappedf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-snappedf" names="class_@globalscope_method_snappedf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>snappedf</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-snappedf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最接近 <literal>x</literal> 的 <literal>step</literal> 的倍数。也可用于将浮点数四舍五入为任意的小数位数。</paragraph>
            <paragraph><reference internal="True" refid="class-globalscope-method-snapped"><inline classes="std std-ref">snapped</inline></reference> 的类型安全版本，返回一个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">snappedf(32.0, 2.5)  # 返回 32.5
snappedf(3.14159, 0.01)  # 返回 3.14</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-snappedi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-snappedi" names="class_@globalscope_method_snappedi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>snappedi</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, step: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-snappedi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最接近 <literal>x</literal> 的 <literal>step</literal> 的倍数。</paragraph>
            <paragraph><reference internal="True" refid="class-globalscope-method-snapped"><inline classes="std std-ref">snapped</inline></reference> 的类型安全版本，返回一个 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">snappedi(53, 16)  # 返回 48
snappedi(4096, 100)  # 返回 4100</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-sqrt"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-sqrt" names="class_@globalscope_method_sqrt"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>sqrt</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-sqrt"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的平方根，其中 <literal>x</literal> 是一个非负数。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">sqrt(9)     # 返回 3
sqrt(10.24) # 返回 3.2
sqrt(-1)    # 返回 NaN</literal_block>
            <paragraph><strong>注意：</strong>负数的 <literal>x</literal> 会返回 NaN（“不是数字”）。在 C# 中，如果需要负输入，请使用 <literal>System.Numerics.Complex</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-step-decimals"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-step-decimals" names="class_@globalscope_method_step_decimals"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>step_decimals</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-step-decimals"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回小数点后第一个非零数字的位置。注意最大返回值是 10，这是实现中的设计决定。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var n = step_decimals(5)       # n 为 0
n = step_decimals(1.0005)      # n 为 4
n = step_decimals(0.000000005) # n 为 9</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-str"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-str" names="class_@globalscope_method_str"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>str</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-globalscope-method-str"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>尽可能以最佳方式将一个或多个任何 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型的参数转换为一个 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = [10, 20, 30]
var b = str(a)
print(len(a)) # 输出 3（数组中元素的数量）。
print(len(b)) # 输出 12（字符串“[10, 20, 30]”的长度）。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-str-to-var"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-str-to-var" names="class_@globalscope_method_str_to_var"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>str_to_var</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-globalscope-method-str-to-var"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refid="class-globalscope-method-var-to-str"><inline classes="std std-ref">var_to_str</inline></reference> 返回的已格式化的 <literal>string</literal> 转换为原始 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-17-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-17-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-17-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-17-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-17-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-17-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var data = '{ "a": 1, "b": 2 }' # data 是一个 String
var dict = str_to_var(data)     # dict 是一个 Dictionary
print(dict["a"])                # 输出 1</literal_block>
                </div>
                <div aria-labelledby="tab-17-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-17-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">string data = "{ \"a\": 1, \"b\": 2 }";           // data 是一个 string
var dict = GD.StrToVar(data).AsGodotDictionary(); // dict 是一个 Dictionary
GD.Print(dict["a"]);                              // 输出 1</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-tan"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-tan" names="class_@globalscope_method_tan"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>tan</strong>(angle_rad: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-tan"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回弧度角 <literal>angle_rad</literal> 的正切值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">tan(deg_to_rad(45)) # 返回 1</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-tanh"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-tanh" names="class_@globalscope_method_tanh"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>tanh</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-tanh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>x</literal> 的双曲正切值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = log(2.0) # 返回 0.693147
tanh(a)          # 返回 0.6</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-type-convert"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-type-convert" names="class_@globalscope_method_type_convert"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>type_convert</strong>(variant: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-type-convert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> 值将给定的 <literal>variant</literal> 转换为给定的 <literal>type</literal>。此方法对类型的处理十分宽松，可以在数组类型之间自动转换，将数值的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 转换为 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，也可以将大多数内容转换为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <paragraph>如果无法完成类型转换，此方法将返回该类型的默认值，例如 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 转换为 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 时将总是返回 <reference internal="True" refuri="class_vector2#class-vector2-constant-zero"><inline classes="std std-ref">Vector2.ZERO</inline></reference>。只要 <literal>type</literal> 是一个有效的 Variant 类型，此方法就永远不会显示错误消息。</paragraph>
            <paragraph>返回的值是一个 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>，但是其中的数据以及其类型将会与请求的类型相同。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">type_convert("Hi!", TYPE_INT) # 返回 0
type_convert("123", TYPE_INT) # 返回 123
type_convert(123.4, TYPE_INT) # 返回 123
type_convert(5, TYPE_VECTOR2) # 返回 (0, 0)
type_convert("Hi!", TYPE_NIL) # 返回 null</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-type-string"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-type-string" names="class_@globalscope_method_type_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>type_string</strong>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-type-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回类型 <literal>type</literal> 的人类可读名称，参数使用 <reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> 的值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(TYPE_INT) # 输出 2。
print(type_string(TYPE_INT)) # 输出“int”。
print(type_string(TYPE_STRING)) # 输出“String”。</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-typeof"><inline classes="std std-ref">typeof</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-typeof"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-typeof" names="class_@globalscope_method_typeof"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>typeof</strong>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-typeof"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回变量 <literal>variable</literal> 的内部类型，使用的是 <reference internal="True" refid="enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> 中的值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var json = JSON.new()
json.parse('["a", "b", "c"]')
var result = json.get_data()
if typeof(result) == TYPE_ARRAY:
    print(result[0]) # 输出 a
else:
    print("出乎意料的结果")</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-globalscope-method-type-string"><inline classes="std std-ref">type_string</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-var-to-bytes"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-var-to-bytes" names="class_@globalscope_method_var_to_bytes"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>var_to_bytes</strong>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-var-to-bytes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 值编码为字节数组，不编码对象。反序列化可以使用 <reference internal="True" refid="class-globalscope-method-bytes-to-var"><inline classes="std std-ref">bytes_to_var</inline></reference> 来完成。</paragraph>
            <paragraph><strong>注意：</strong>如果需要对象序列化，参见 <reference internal="True" refid="class-globalscope-method-var-to-bytes-with-objects"><inline classes="std std-ref">var_to_bytes_with_objects</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>编码 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 不受支持，无论数据如何，都会导致空值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-var-to-bytes-with-objects"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-var-to-bytes-with-objects" names="class_@globalscope_method_var_to_bytes_with_objects"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>var_to_bytes_with_objects</strong>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-var-to-bytes-with-objects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 值编码为字节数组。允许对对象进行编码（并且可能包括可执行代码）。反序列化可以使用 <reference internal="True" refid="class-globalscope-method-bytes-to-var-with-objects"><inline classes="std std-ref">bytes_to_var_with_objects</inline></reference> 来完成。</paragraph>
            <paragraph><strong>注意：</strong>编码 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 不受支持，无论数据如何，都会导致空值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-var-to-str"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-var-to-str" names="class_@globalscope_method_var_to_str"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>var_to_str</strong>(variable: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-var-to-str"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <literal>variable</literal> 转换为格式化的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，后续可以使用 <reference internal="True" refid="class-globalscope-method-str-to-var"><inline classes="std std-ref">str_to_var</inline></reference> 对其进行解析。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-18-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-18-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-18-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-18-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-18-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-18-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var a = { "a": 1, "b": 2 }
print(var_to_str(a))</literal_block>
                </div>
                <div aria-labelledby="tab-18-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-18-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var a = new Godot.Collections.Dictionary { ["a"] = 1, ["b"] = 2 };
GD.Print(GD.VarToStr(a));</literal_block>
                </div>
            </container>
            <paragraph>输出：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">{
    "a": 1,
    "b": 2
}</literal_block>
            <paragraph><strong>注意：</strong>不支持转换 <reference internal="True" refuri="class_signal#class-signal"><inline classes="std std-ref">Signal</inline></reference> 和 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>，这些类型无论有什么数据，转换后都是空值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-weakref"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-weakref" names="class_@globalscope_method_weakref"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>weakref</strong>(obj: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-weakref"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_weakref#class-weakref"><inline classes="std std-ref">WeakRef</inline></reference> 实例，其中包含对 <literal>obj</literal> 的弱引用。如果 <literal>obj</literal> 为 <literal>null</literal>，则返回空的 <reference internal="True" refuri="class_weakref#class-weakref"><inline classes="std std-ref">WeakRef</inline></reference> 实例。如果 <literal>obj</literal> 既不是 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 派生实例，也不是 <literal>null</literal>，则打印错误并返回 <literal>null</literal>。</paragraph>
            <paragraph>对对象的弱引用不足以使对象保持存活：当对引用对象的剩余引用都是弱引用时，垃圾回收可以自由销毁该引用对象并将其内存重新用于其他用途。但是，在对象实际被销毁之前，弱引用可能会返回该对象，即使不存在对它的强引用也是如此。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-wrap"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-wrap" names="class_@globalscope_method_wrap"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>wrap</strong>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, min: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, max: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-globalscope-method-wrap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>min</literal> 和 <literal>max</literal> 之间包裹 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <literal>value</literal>。可用于创建类似循环的行为或无限曲面。</paragraph>
            <paragraph>支持变体类型 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 和 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。如果任一参数是 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，则该函数返回 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，否则返回 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = wrap(4, 5, 10)
# a 为 9 （整数类型）

var a = wrap(7, 5, 10)
# a 为 7 （整数类型）

var a = wrap(10.5, 5, 10)
# a 为 5.5 （浮点类型）</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-wrapf"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-wrapf" names="class_@globalscope_method_wrapf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>wrapf</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-globalscope-method-wrapf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>min</literal> 和 <literal>max</literal> 之间将浮点数 <literal>value</literal> 循环。可用于创建类似循环的行为或无限曲面。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 在 5.0 和 9.9 之间无限循环
value = wrapf(value + 0.1, 5.0, 10.0)</literal_block>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 无限旋转（弧度）
angle = wrapf(angle + 0.1, 0.0, TAU)</literal_block>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 无限旋转（弧度）
angle = wrapf(angle + 0.1, -PI, PI)</literal_block>
            <paragraph><strong>注意：</strong>如果 <literal>min</literal> 为 <literal>0</literal>，则相当于 <reference internal="True" refid="class-globalscope-method-fposmod"><inline classes="std std-ref">fposmod</inline></reference>，因此请改用它。</paragraph>
            <paragraph>通过让用户控制最小值，<reference internal="True" refid="class-globalscope-method-wrapf"><inline classes="std std-ref">wrapf</inline></reference> 比使用 <reference internal="True" refid="class-globalscope-method-fposmod"><inline classes="std std-ref">fposmod</inline></reference> 方法更灵活。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-globalscope-method-wrapi"></target>
            <paragraph classes="classref-method" ids="class-globalscope-method-wrapi" names="class_@globalscope_method_wrapi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>wrapi</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-globalscope-method-wrapi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>min</literal> 和 <literal>max</literal> 之间环绕整数 <literal>value</literal>。 可用于创建类似循环的行为或无限曲面。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 在 5 和 9 之间无限循环
frame = wrapi(frame + 1, 5, 10)</literal_block>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># result 是 -2
var result = wrapi(-6, -5, -1)</literal_block>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
