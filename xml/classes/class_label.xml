<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_label.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="text" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Label.xml.</comment>
    <target refid="class-label"></target>
    <section ids="label class-label" names="label class_label">
        <title>Label</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于显示纯文本的控件。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于显示纯文本的控件。可以控制水平和垂直对齐方式以及文本在节点包围框内的换行方式。不支持粗体、斜体等富文本格式。这种需求请改用 <reference internal="True" refuri="class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="2D Dodge The Creeps 演示" refuri="https://godotengine.org/asset-library/asset/2712">2D Dodge The Creeps 演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="77"></colspec>
                    <colspec colwidth="106"></colspec>
                    <colspec colwidth="78"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-autowrap-mode"><inline classes="std std-ref">autowrap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-clip-text"><inline classes="std std-ref">clip_text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-ellipsis-char"><inline classes="std std-ref">ellipsis_char</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"…"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-horizontal-alignment"><inline classes="std std-ref">horizontal_alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-justification-flags"><inline classes="std std-ref">justification_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>163</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_labelsettings#class-labelsettings"><inline classes="std std-ref">LabelSettings</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-label-settings"><inline classes="std std-ref">label_settings</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-language"><inline classes="std std-ref">language</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-lines-skipped"><inline classes="std std-ref">lines_skipped</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-max-lines-visible"><inline classes="std std-ref">max_lines_visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>mouse_filter</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-mouse-filter"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_control#enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph>size_flags_vertical</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-size-flags-vertical"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-structured-text-bidi-override"><inline classes="std std-ref">structured_text_bidi_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-structured-text-bidi-override-options"><inline classes="std std-ref">structured_text_bidi_override_options</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-tab-stops"><inline classes="std std-ref">tab_stops</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedFloat32Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-text"><inline classes="std std-ref">text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-text-direction"><inline classes="std std-ref">text_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-text-overrun-behavior"><inline classes="std std-ref">text_overrun_behavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-uppercase"><inline classes="std std-ref">uppercase</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-vertical-alignment"><inline classes="std std-ref">vertical_alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-visible-characters"><inline classes="std std-ref">visible_characters</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-visible-characters-behavior"><inline classes="std std-ref">visible_characters_behavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-property-visible-ratio"><inline classes="std std-ref">visible_ratio</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="113"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-method-get-character-bounds"><inline classes="std std-ref">get_character_bounds</inline></reference>(pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-method-get-line-count"><inline classes="std std-ref">get_line_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-method-get-line-height"><inline classes="std std-ref">get_line_height</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-method-get-total-character-count"><inline classes="std std-ref">get_total_character_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-method-get-visible-line-count"><inline classes="std std-ref">get_visible_line_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="76"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-color-font-color"><inline classes="std std-ref">font_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-color-font-outline-color"><inline classes="std std-ref">font_outline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-color-font-shadow-color"><inline classes="std std-ref">font_shadow_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-constant-line-spacing"><inline classes="std std-ref">line_spacing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-constant-shadow-offset-x"><inline classes="std std-ref">shadow_offset_x</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-constant-shadow-offset-y"><inline classes="std std-ref">shadow_offset_y</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-constant-shadow-outline-size"><inline classes="std std-ref">shadow_outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-font-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-font-size-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label-theme-style-normal"><inline classes="std std-ref">normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-label-property-autowrap-mode"></target>
            <paragraph classes="classref-property" ids="class-label-property-autowrap-mode" names="class_label_property_autowrap_mode"><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>autowrap_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-autowrap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autowrap_mode</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>get_autowrap_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <reference internal="True" refuri="class_textserver#class-textserver-constant-autowrap-off"><inline classes="std std-ref">TextServer.AUTOWRAP_OFF</inline></reference> 以外的值，则文本将在节点的边界矩形内自动换行。如果你调整节点大小，就会自动更改其高度，从而显示所有文本。要了解每种模式的行为方式，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-clip-text"></target>
            <paragraph classes="classref-property" ids="class-label-property-clip-text" names="class_label_property_clip_text"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>clip_text</strong> = <literal>false</literal> <reference internal="True" refid="class-label-property-clip-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_text</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_clipping_text</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，Label 将仅显示位于其边界矩形内部的文本，并将水平裁剪文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-ellipsis-char"></target>
            <paragraph classes="classref-property" ids="class-label-property-ellipsis-char" names="class_label_property_ellipsis_char"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>ellipsis_char</strong> = <literal>"…"</literal> <reference internal="True" refid="class-label-property-ellipsis-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ellipsis_char</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_ellipsis_char</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于文本裁剪的省略字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-horizontal-alignment"></target>
            <paragraph classes="classref-property" ids="class-label-property-horizontal-alignment" names="class_label_property_horizontal_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>horizontal_alignment</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-horizontal-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_horizontal_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_horizontal_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制文本的水平对齐方式。支持左对齐、居中对齐、右对齐、填充（即两端对齐）。请将其设置为 <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-justification-flags"></target>
            <paragraph classes="classref-property" ids="class-label-property-justification-flags" names="class_label_property_justification_flags"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>justification_flags</strong> = <literal>163</literal> <reference internal="True" refid="class-label-property-justification-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_justification_flags</strong>(value: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>get_justification_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>行两端对齐规则。详见 <reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-label-settings"></target>
            <paragraph classes="classref-property" ids="class-label-property-label-settings" names="class_label_property_label_settings"><reference internal="True" refuri="class_labelsettings#class-labelsettings"><inline classes="std std-ref">LabelSettings</inline></reference> <strong>label_settings</strong> <reference internal="True" refid="class-label-property-label-settings"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_label_settings</strong>(value: <reference internal="True" refuri="class_labelsettings#class-labelsettings"><inline classes="std std-ref">LabelSettings</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_labelsettings#class-labelsettings"><inline classes="std std-ref">LabelSettings</inline></reference> <strong>get_label_settings</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_labelsettings#class-labelsettings"><inline classes="std std-ref">LabelSettings</inline></reference> 资源，可以在多个 <strong>Label</strong> 节点之间共享。优先于主题属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-language"></target>
            <paragraph classes="classref-property" ids="class-label-property-language" names="class_label_property_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>language</strong> = <literal>""</literal> <reference internal="True" refid="class-label-property-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-lines-skipped"></target>
            <paragraph classes="classref-property" ids="class-label-property-lines-skipped" names="class_label_property_lines_skipped"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>lines_skipped</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-lines-skipped"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_lines_skipped</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_lines_skipped</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>从 <reference internal="True" refid="class-label-property-text"><inline classes="std std-ref">text</inline></reference> 值的开头开始忽略且不显示的行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-max-lines-visible"></target>
            <paragraph classes="classref-property" ids="class-label-property-max-lines-visible" names="class_label_property_max_lines_visible"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_lines_visible</strong> = <literal>-1</literal> <reference internal="True" refid="class-label-property-max-lines-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_lines_visible</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_lines_visible</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>限制节点在屏幕上显示的文本行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-structured-text-bidi-override"></target>
            <paragraph classes="classref-property" ids="class-label-property-structured-text-bidi-override" names="class_label_property_structured_text_bidi_override"><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>structured_text_bidi_override</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-structured-text-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>get_structured_text_bidi_override</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为结构化文本设置 BiDi 算法覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-property" ids="class-label-property-structured-text-bidi-override-options" names="class_label_property_structured_text_bidi_override_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>structured_text_bidi_override_options</strong> = <literal>[]</literal> <reference internal="True" refid="class-label-property-structured-text-bidi-override-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override_options</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_structured_text_bidi_override_options</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 BiDi 覆盖的附加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-tab-stops"></target>
            <paragraph classes="classref-property" ids="class-label-property-tab-stops" names="class_label_property_tab_stops"><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>tab_stops</strong> = <literal>PackedFloat32Array()</literal> <reference internal="True" refid="class-label-property-tab-stops"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tab_stops</strong>(value: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>get_tab_stops</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将文本与给定的制表位对齐。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-text"></target>
            <paragraph classes="classref-property" ids="class-label-property-text" names="class_label_property_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>text</strong> = <literal>""</literal> <reference internal="True" refid="class-label-property-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要在屏幕上显示的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-text-direction"></target>
            <paragraph classes="classref-property" ids="class-label-property-text-direction" names="class_label_property_text_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>text_direction</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_direction</strong>(value: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_text_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>基础文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-text-overrun-behavior"></target>
            <paragraph classes="classref-property" ids="class-label-property-text-overrun-behavior" names="class_label_property_text_overrun_behavior"><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>text_overrun_behavior</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-text-overrun-behavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_overrun_behavior</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>get_text_overrun_behavior</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置文本超出节点的边界矩形时的裁剪行为。有关所有模式的描述，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-uppercase"></target>
            <paragraph classes="classref-property" ids="class-label-property-uppercase" names="class_label_property_uppercase"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uppercase</strong> = <literal>false</literal> <reference internal="True" refid="class-label-property-uppercase"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uppercase</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_uppercase</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，所有文本都将显示为大写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-vertical-alignment"></target>
            <paragraph classes="classref-property" ids="class-label-property-vertical-alignment" names="class_label_property_vertical_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>vertical_alignment</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-vertical-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vertical_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>get_vertical_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制文本的垂直对齐方式。支持顶部对齐、居中对齐、底部对齐和填充。将其设置为 <reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> 常量之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-visible-characters"></target>
            <paragraph classes="classref-property" ids="class-label-property-visible-characters" names="class_label_property_visible_characters"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>visible_characters</strong> = <literal>-1</literal> <reference internal="True" refid="class-label-property-visible-characters"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visible_characters</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_characters</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要显示的字符数。如果设置为 <literal>-1</literal>，则显示所有字符。这用于在对话框中为显示的文本设置动画。</paragraph>
            <paragraph><strong>注意：</strong>设置该属性会相应地更新 <reference internal="True" refid="class-label-property-visible-ratio"><inline classes="std std-ref">visible_ratio</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-visible-characters-behavior"></target>
            <paragraph classes="classref-property" ids="class-label-property-visible-characters-behavior" names="class_label_property_visible_characters_behavior"><reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>visible_characters_behavior</strong> = <literal>0</literal> <reference internal="True" refid="class-label-property-visible-characters-behavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visible_characters_behavior</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>get_visible_characters_behavior</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 <reference internal="True" refid="class-label-property-visible-characters"><inline classes="std std-ref">visible_characters</inline></reference> 或 <reference internal="True" refid="class-label-property-visible-ratio"><inline classes="std std-ref">visible_ratio</inline></reference> 被设置时的裁剪行为。有关详细信息，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-property-visible-ratio"></target>
            <paragraph classes="classref-property" ids="class-label-property-visible-ratio" names="class_label_property_visible_ratio"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>visible_ratio</strong> = <literal>1.0</literal> <reference internal="True" refid="class-label-property-visible-ratio"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visible_ratio</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_visible_ratio</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相对于字符总数（参见 <reference internal="True" refid="class-label-method-get-total-character-count"><inline classes="std std-ref">get_total_character_count</inline></reference>），要显示的字符的占比。如果设置为 <literal>1.0</literal>，则显示所有字符。如果设置为 <literal>0.5</literal>，则只显示一半的字符。这用于在对话框中为显示的文本设置动画。</paragraph>
            <paragraph><strong>注意：</strong>设置该属性会相应地更新 <reference internal="True" refid="class-label-property-visible-characters"><inline classes="std std-ref">visible_characters</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-label-method-get-character-bounds"></target>
            <paragraph classes="classref-method" ids="class-label-method-get-character-bounds" names="class_label_method_get_character_bounds"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_character_bounds</strong>(pos: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-label-method-get-character-bounds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位置 <literal>pos</literal> 处字符的边界矩形。如果字符是非视觉字符或 <literal>pos</literal> 超出有效范围，则返回空 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。如果字符是复合字素的一部分，则返回整个字素的边界矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-method-get-line-count"></target>
            <paragraph classes="classref-method" ids="class-label-method-get-line-count" names="class_label_method_get_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-label-method-get-line-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 Label 的文本行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-method-get-line-height"></target>
            <paragraph classes="classref-method" ids="class-label-method-get-line-height" names="class_label_method_get_line_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_height</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-label-method-get-line-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回行 <literal>line</literal> 的高度。</paragraph>
            <paragraph>如果 <literal>line</literal> 被设置为 <literal>-1</literal> ，则返回最大的行高。</paragraph>
            <paragraph>如果没有行，则返回字体大小，单位是像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-method-get-total-character-count"></target>
            <paragraph classes="classref-method" ids="class-label-method-get-total-character-count" names="class_label_method_get_total_character_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_total_character_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-label-method-get-total-character-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本中可打印的字符总数，不包括空格和换行符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-method-get-visible-line-count"></target>
            <paragraph classes="classref-method" ids="class-label-method-get-visible-line-count" names="class_label_method_get_visible_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_line_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-label-method-get-visible-line-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回显示的行数。如果 <strong>Label</strong> 的高度目前无法显示所有的行数，将会有用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-label-theme-color-font-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-color-font-color" names="class_label_theme_color_font_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-label-theme-color-font-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Label</strong> 标签的默认文本颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-color-font-outline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-color-font-outline-color" names="class_label_theme_color_font_outline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_outline_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-label-theme-color-font-outline-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本轮廓的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-color-font-shadow-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-color-font-shadow-color" names="class_label_theme_color_font_shadow_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_shadow_color</strong> = <literal>Color(0, 0, 0, 0)</literal> <reference internal="True" refid="class-label-theme-color-font-shadow-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本阴影效果的颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-constant-line-spacing"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-constant-line-spacing" names="class_label_theme_constant_line_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>line_spacing</strong> = <literal>3</literal> <reference internal="True" refid="class-label-theme-constant-line-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>多行 <strong>Label</strong> 中，行与行之间的垂直间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-constant-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-constant-outline-size" names="class_label_theme_constant_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>0</literal> <reference internal="True" refid="class-label-theme-constant-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文字轮廓的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果使用启用了 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference> 的字体，其 <reference internal="True" refuri="class_fontfile#class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">FontFile.msdf_pixel_range</inline></reference> 必须至少设置为 <reference internal="True" refid="class-label-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference> 的<emphasis>两倍</emphasis>，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。</paragraph>
            <paragraph><strong>注意：</strong>不建议使用大于字体大小一半的值，因为这种情况下字体轮廓可能无法完全闭合。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-constant-shadow-offset-x"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-constant-shadow-offset-x" names="class_label_theme_constant_shadow_offset_x"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_offset_x</strong> = <literal>1</literal> <reference internal="True" refid="class-label-theme-constant-shadow-offset-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本阴影的水平偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-constant-shadow-offset-y"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-constant-shadow-offset-y" names="class_label_theme_constant_shadow_offset_y"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_offset_y</strong> = <literal>1</literal> <reference internal="True" refid="class-label-theme-constant-shadow-offset-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本阴影的垂直偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-constant-shadow-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-constant-shadow-outline-size" names="class_label_theme_constant_shadow_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_outline_size</strong> = <literal>1</literal> <reference internal="True" refid="class-label-theme-constant-shadow-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>阴影轮廓的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-font-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-font-font" names="class_label_theme_font_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong> <reference internal="True" refid="class-label-theme-font-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于标签 <strong>Label</strong> 文本的字体 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-font-size-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-font-size-font-size" names="class_label_theme_font_size_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong> <reference internal="True" refid="class-label-theme-font-size-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>Label</strong> 文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label-theme-style-normal"></target>
            <paragraph classes="classref-themeproperty" ids="class-label-theme-style-normal" names="class_label_theme_style_normal"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>normal</strong> <reference internal="True" refid="class-label-theme-style-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <strong>Label</strong> 设置背景样式盒 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
