<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scenestate.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/SceneState.xml.</comment>
    <target refid="class-scenestate"></target>
    <section ids="scenestate class-scenestate" names="scenestate class_scenestate">
        <title>SceneState</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供对场景文件信息的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>维护一个与场景相关的资源、节点、导出的和重写的属性以及内置脚本的列表。无法从 <strong>SceneState</strong> 修改，只能读取。可用于在不实例化 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 的前提下观察其中的内容。</paragraph>
            <paragraph>这个类不能直接实例化，它是作为 <reference internal="True" refuri="class_packedscene#class-packedscene-method-get-state"><inline classes="std std-ref">PackedScene.get_state</inline></reference> 的结果为一个给定的场景检索的。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="158"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-binds"><inline classes="std std-ref">get_connection_binds</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-count"><inline classes="std std-ref">get_connection_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-flags"><inline classes="std std-ref">get_connection_flags</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-method"><inline classes="std std-ref">get_connection_method</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-signal"><inline classes="std std-ref">get_connection_signal</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-source"><inline classes="std std-ref">get_connection_source</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-target"><inline classes="std std-ref">get_connection_target</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-connection-unbinds"><inline classes="std std-ref">get_connection_unbinds</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-count"><inline classes="std std-ref">get_node_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-groups"><inline classes="std std-ref">get_node_groups</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-index"><inline classes="std std-ref">get_node_index</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-instance"><inline classes="std std-ref">get_node_instance</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-instance-placeholder"><inline classes="std std-ref">get_node_instance_placeholder</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-name"><inline classes="std std-ref">get_node_name</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-owner-path"><inline classes="std std-ref">get_node_owner_path</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-path"><inline classes="std std-ref">get_node_path</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, for_parent: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-property-count"><inline classes="std std-ref">get_node_property_count</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-property-name"><inline classes="std std-ref">get_node_property_name</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, prop_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-property-value"><inline classes="std std-ref">get_node_property_value</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, prop_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-get-node-type"><inline classes="std std-ref">get_node_type</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scenestate-method-is-node-instance-placeholder"><inline classes="std std-ref">is_node_instance_placeholder</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-scenestate-geneditstate"></target>
            <paragraph classes="classref-enumeration" ids="enum-scenestate-geneditstate" names="enum_scenestate_geneditstate">enum <strong>GenEditState</strong>: <reference internal="True" refid="enum-scenestate-geneditstate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-scenestate-constant-gen-edit-state-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenestate-constant-gen-edit-state-disabled" names="class_scenestate_constant_gen_edit_state_disabled"><reference internal="True" refid="enum-scenestate-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>如果传递给 <reference internal="True" refuri="class_packedscene#class-packedscene-method-instantiate"><inline classes="std std-ref">PackedScene.instantiate</inline></reference>，则会阻止对场景状态的编辑。</paragraph>
            <target refid="class-scenestate-constant-gen-edit-state-instance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenestate-constant-gen-edit-state-instance" names="class_scenestate_constant_gen_edit_state_instance"><reference internal="True" refid="enum-scenestate-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_INSTANCE</strong> = <literal>1</literal></paragraph>
            <paragraph>如果传递给 <reference internal="True" refuri="class_packedscene#class-packedscene-method-instantiate"><inline classes="std std-ref">PackedScene.instantiate</inline></reference>，则会把继承的场景资源提供给本地场景。</paragraph>
            <paragraph><strong>注意：</strong>仅在编辑器构建中可用。</paragraph>
            <target refid="class-scenestate-constant-gen-edit-state-main"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenestate-constant-gen-edit-state-main" names="class_scenestate_constant_gen_edit_state_main"><reference internal="True" refid="enum-scenestate-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_MAIN</strong> = <literal>2</literal></paragraph>
            <paragraph>如果传递给 <reference internal="True" refuri="class_packedscene#class-packedscene-method-instantiate"><inline classes="std std-ref">PackedScene.instantiate</inline></reference>，则会为本地场景提供本地场景资源。只有主场景应该接收主编辑状态。</paragraph>
            <paragraph><strong>注意：</strong>仅在编辑器构建中可用。</paragraph>
            <target refid="class-scenestate-constant-gen-edit-state-main-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-scenestate-constant-gen-edit-state-main-inherited" names="class_scenestate_constant_gen_edit_state_main_inherited"><reference internal="True" refid="enum-scenestate-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_MAIN_INHERITED</strong> = <literal>3</literal></paragraph>
            <paragraph>如果传递给 <reference internal="True" refuri="class_packedscene#class-packedscene-method-instantiate"><inline classes="std std-ref">PackedScene.instantiate</inline></reference>，则类似于 <reference internal="True" refid="class-scenestate-constant-gen-edit-state-main"><inline classes="std std-ref">GEN_EDIT_STATE_MAIN</inline></reference>，但适用于该场景被实例化为另一个场景的基类的情况。</paragraph>
            <paragraph><strong>注意：</strong>仅在编辑器构建中可用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scenestate-method-get-connection-binds"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-binds" names="class_scenestate_method_get_connection_binds"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_connection_binds</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-binds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>idx</literal> 处信号的绑定参数列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-connection-count"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-count" names="class_scenestate_method_get_connection_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_connection_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回场景中的信号连接数。</paragraph>
            <paragraph>用于查询其他 <literal>get_connection_*</literal> 方法中的连接元数据的 <literal>idx</literal> 参数，范围是 <literal>[0, get_connection_count() - 1]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-connection-flags"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-flags" names="class_scenestate_method_get_connection_flags"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_connection_flags</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>idx</literal> 处的信号的连接标志。见 <reference internal="True" refuri="class_object#enum-object-connectflags"><inline classes="std std-ref">ConnectFlags</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-connection-method"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-method" names="class_scenestate_method_get_connection_method"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_connection_method</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回连接到 <literal>idx</literal> 处信号的方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-connection-signal"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-signal" names="class_scenestate_method_get_connection_signal"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_connection_signal</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-signal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的信号的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-connection-source"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-source" names="class_scenestate_method_get_connection_source"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_connection_source</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-source"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回拥有 <literal>idx</literal> 处信号的节点路径，相对于根节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-connection-target"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-target" names="class_scenestate_method_get_connection_target"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_connection_target</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-target"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回到拥有连接到 <literal>idx</literal> 处的信号的方法的节点的路径，相对于根节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-connection-unbinds"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-connection-unbinds" names="class_scenestate_method_get_connection_unbinds"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_connection_unbinds</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-connection-unbinds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>idx</literal> 处信号的解绑参数数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-count"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-count" names="class_scenestate_method_get_node_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回场景中节点的数量。</paragraph>
            <paragraph><literal>idx</literal> 参数用于在其他 <literal>get_node_*</literal> 方法中查询节点数据，范围为 <literal>[0, get_node_count() - 1]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-groups"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-groups" names="class_scenestate_method_get_node_groups"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_node_groups</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-groups"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>idx</literal> 处的节点关联的组名列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-index"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-index" names="class_scenestate_method_get_node_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_index</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该节点的索引，这是它相对于其兄弟节点的位置。这仅在新节点被添加到一个实例化的或继承的场景，在基础场景的兄弟节点之间的情况下，才相关并被保存在场景中。尽管名称如此，但该索引与此处和其他方法中使用的 <literal>idx</literal> 参数无关。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-instance"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-instance" names="class_scenestate_method_get_node_instance"><reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> <strong>get_node_instance</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-instance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <literal>idx</literal> 处的节点返回一个 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference>（即从该节点开始的整个分支，包括其子节点和资源），如果该节点不是一个实例，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-instance-placeholder"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-instance-placeholder" names="class_scenestate_method_get_node_instance_placeholder"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_node_instance_placeholder</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-instance-placeholder"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>idx</literal> 处的节点是一个 <reference internal="True" refuri="class_instanceplaceholder#class-instanceplaceholder"><inline classes="std std-ref">InstancePlaceholder</inline></reference>，则返回所表示的场景文件的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-name"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-name" names="class_scenestate_method_get_node_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_node_name</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的节点的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-owner-path"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-owner-path" names="class_scenestate_method_get_node_owner_path"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_node_owner_path</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-owner-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回相对于根节点的位于 <literal>idx</literal> 处的节点的所有者的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-path"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-path" names="class_scenestate_method_get_node_path"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_node_path</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, for_parent: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>idx</literal> 处的节点的路径。</paragraph>
            <paragraph>如果 <literal>for_parent</literal> 为 <literal>true</literal>，则返回 <literal>idx</literal> 节点的父节点的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-property-count"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-property-count" names="class_scenestate_method_get_node_property_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_property_count</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-property-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>idx</literal> 处的节点的导出的或覆盖的属性数量。</paragraph>
            <paragraph><literal>prop_idx</literal> 参数介于区间 <literal>[0, get_node_property_count() - 1]</literal>，用于在其他 <literal>get_node_property_*</literal> 方法中查询节点属性数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-property-name"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-property-name" names="class_scenestate_method_get_node_property_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_node_property_name</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, prop_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-property-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的节点中，索引为 <literal>prop_idx</literal> 的属性的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-property-value"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-property-value" names="class_scenestate_method_get_node_property_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_node_property_value</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, prop_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-property-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的节点中，索引为 <literal>prop_idx</literal> 的属性的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-get-node-type"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-get-node-type" names="class_scenestate_method_get_node_type"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_node_type</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-get-node-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的节点的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scenestate-method-is-node-instance-placeholder"></target>
            <paragraph classes="classref-method" ids="class-scenestate-method-is-node-instance-placeholder" names="class_scenestate_method_is_node_instance_placeholder"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_node_instance_placeholder</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scenestate-method-is-node-instance-placeholder"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>idx</literal> 处的节点是一个 <reference internal="True" refuri="class_instanceplaceholder#class-instanceplaceholder"><inline classes="std std-ref">InstancePlaceholder</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
