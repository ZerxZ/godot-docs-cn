<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_spriteframes.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/SpriteFrames.xml.</comment>
    <target refid="class-spriteframes"></target>
    <section ids="spriteframes class-spriteframes" names="spriteframes class_spriteframes">
        <title>SpriteFrames</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>精灵帧库，用于 AnimatedSprite2D 和 AnimatedSprite3D。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference internal="True" refuri="class_animatedsprite2d#class-animatedsprite2d"><inline classes="std std-ref">AnimatedSprite2D</inline></reference> 和 <reference internal="True" refuri="class_animatedsprite3d#class-animatedsprite3d"><inline classes="std std-ref">AnimatedSprite3D</inline></reference> 节点的精灵帧库。包含帧和用于播放的动画信息。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="229"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-add-animation"><inline classes="std std-ref">add_animation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-add-frame"><inline classes="std std-ref">add_frame</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> duration=1.0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> at_position=-1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-clear-all"><inline classes="std std-ref">clear_all</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-get-animation-loop"><inline classes="std std-ref">get_animation_loop</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-get-animation-names"><inline classes="std std-ref">get_animation_names</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-get-animation-speed"><inline classes="std std-ref">get_animation_speed</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-get-frame-count"><inline classes="std std-ref">get_frame_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-get-frame-duration"><inline classes="std std-ref">get_frame_duration</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-get-frame-texture"><inline classes="std std-ref">get_frame_texture</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-has-animation"><inline classes="std std-ref">has_animation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-remove-animation"><inline classes="std std-ref">remove_animation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-remove-frame"><inline classes="std std-ref">remove_frame</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-rename-animation"><inline classes="std std-ref">rename_animation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> newname <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-set-animation-loop"><inline classes="std std-ref">set_animation_loop</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> loop <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-set-animation-speed"><inline classes="std std-ref">set_animation_speed</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fps <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spriteframes-method-set-frame"><inline classes="std std-ref">set_frame</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> duration=1.0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-spriteframes-method-add-animation"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-add-animation" names="class_spriteframes_method_add_animation">void <strong>add_animation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong></paragraph>
            <paragraph>向库中添加新动画 <literal>anim</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-add-frame"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-add-frame" names="class_spriteframes_method_add_frame">void <strong>add_frame</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> duration=1.0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> at_position=-1 <strong>)</strong></paragraph>
            <paragraph>向 <literal>anim</literal> 动画中添加一帧。如果 <literal>at_position</literal> 为 <literal>-1</literal>，则该帧会添加至该动画的末尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-clear"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-clear" names="class_spriteframes_method_clear">void <strong>clear</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong></paragraph>
            <paragraph>删除 <literal>anim</literal> 动画中的所有帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-clear-all"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-clear-all" names="class_spriteframes_method_clear_all">void <strong>clear_all</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>移除所有动画。将创建名为 <literal>default</literal> 的空动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-get-animation-loop"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-get-animation-loop" names="class_spriteframes_method_get_animation_loop"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_animation_loop</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>当指定的动画被配置为结束播放后循环时，返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-get-animation-names"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-get-animation-names" names="class_spriteframes_method_get_animation_names"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_animation_names</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个包含每个动画的名称的数组。值按字母顺序排列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-get-animation-speed"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-get-animation-speed" names="class_spriteframes_method_get_animation_speed"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_animation_speed</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>anim</literal> 动画的速度，单位为帧每秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-get-frame-count"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-get-frame-count" names="class_spriteframes_method_get_frame_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frame_count</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>anim</literal> 动画中的帧数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-get-frame-duration"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-get-frame-duration" names="class_spriteframes_method_get_frame_duration"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_frame_duration</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>anim</literal> 动画中 <literal>idx</literal> 帧的相对持续时间（默认为 <literal>1.0</literal>）。例如，持续时间为 <literal>2.0</literal> 的帧的显示长度是持续时间为 <literal>1.0</literal> 的帧的两倍。可以使用如下公式计算某一帧的绝对持续时间（单位为秒）：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">absolute_duration = relative_duration / (animation_fps * abs(playing_speed))</literal_block>
            <paragraph>在这个例子中，<literal>playing_speed</literal> 是 <reference internal="True" refuri="class_animatedsprite2d#class-animatedsprite2d-method-get-playing-speed"><inline classes="std std-ref">AnimatedSprite2D.get_playing_speed</inline></reference> 或 <reference internal="True" refuri="class_animatedsprite3d#class-animatedsprite3d-method-get-playing-speed"><inline classes="std std-ref">AnimatedSprite3D.get_playing_speed</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-get-frame-texture"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-get-frame-texture" names="class_spriteframes_method_get_frame_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_frame_texture</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>anim</literal> 动画中帧索引为 <literal>idx</literal> 的纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-has-animation"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-has-animation" names="class_spriteframes_method_has_animation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_animation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果 <literal>anim</literal> 动画存在，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-remove-animation"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-remove-animation" names="class_spriteframes_method_remove_animation">void <strong>remove_animation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim <strong>)</strong></paragraph>
            <paragraph>移除 <literal>anim</literal> 动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-remove-frame"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-remove-frame" names="class_spriteframes_method_remove_frame">void <strong>remove_frame</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
            <paragraph>移除 <literal>anim</literal> 动画中索引为 <literal>idx</literal> 的帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-rename-animation"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-rename-animation" names="class_spriteframes_method_rename_animation">void <strong>rename_animation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> newname <strong>)</strong></paragraph>
            <paragraph>将 <literal>anim</literal> 动画的名称更改为 <literal>newname</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-set-animation-loop"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-set-animation-loop" names="class_spriteframes_method_set_animation_loop">void <strong>set_animation_loop</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> loop <strong>)</strong></paragraph>
            <paragraph>如果 <literal>loop</literal> 为 <literal>true</literal>，则 <literal>anim</literal> 动画会在到达结尾时循环，逆序播放时则为到达开头时循环。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-set-animation-speed"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-set-animation-speed" names="class_spriteframes_method_set_animation_speed">void <strong>set_animation_speed</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fps <strong>)</strong></paragraph>
            <paragraph>设置 <literal>anim</literal> 动画的速度，单位为帧每秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spriteframes-method-set-frame"></target>
            <paragraph classes="classref-method" ids="class-spriteframes-method-set-frame" names="class_spriteframes_method_set_frame">void <strong>set_frame</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> anim, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> duration=1.0 <strong>)</strong></paragraph>
            <paragraph>设置 <literal>anim</literal> 动画中索引为 <literal>idx</literal> 的帧的纹理 <literal>texture</literal> 和持续时间 <literal>duration</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
