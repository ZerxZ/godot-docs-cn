<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_vector4.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Vector4.xml.</comment>
    <target refid="class-vector4"></target>
    <section ids="vector4 class-vector4" names="vector4 class_vector4">
        <title>Vector4</title>
        <paragraph>使用浮点数坐标的 4D 向量。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>包含四个元素的结构体，可用于代表 4D 坐标或任何数值的四元组。</paragraph>
            <paragraph>使用浮点数坐标。默认情况下，这些浮点值为 32 位精度，与始终为 64 位的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 并不相同。如果需要双精度，请在编译引擎时使用 <literal>precision=double</literal> 选项。</paragraph>
            <paragraph>对应的整数版本见 <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>在布尔语境中，如果 Vector4 等于 <literal>Vector4(0, 0, 0, 0)</literal> 则求值结果为 <literal>false</literal>。否则 Vector4 的求值结果始终为 <literal>true</literal>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="36"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-property-w"><inline classes="std std-ref">w</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-property-x"><inline classes="std std-ref">x</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-property-y"><inline classes="std std-ref">y</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-property-z"><inline classes="std std-ref">z</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="181"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-constructor-vector4"><inline classes="std std-ref">Vector4</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-constructor-vector4"><inline classes="std std-ref">Vector4</inline></reference>(from: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-constructor-vector4"><inline classes="std std-ref">Vector4</inline></reference>(from: <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-constructor-vector4"><inline classes="std std-ref">Vector4</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, w: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="354"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-abs"><inline classes="std std-ref">abs</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-ceil"><inline classes="std std-ref">ceil</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-clamp"><inline classes="std std-ref">clamp</inline></reference>(min: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, max: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-clampf"><inline classes="std std-ref">clampf</inline></reference>(min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-cubic-interpolate"><inline classes="std std-ref">cubic_interpolate</inline></reference>(b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, pre_a: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, post_b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-cubic-interpolate-in-time"><inline classes="std std-ref">cubic_interpolate_in_time</inline></reference>(b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, pre_a: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, post_b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_a_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-direction-to"><inline classes="std std-ref">direction_to</inline></reference>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-distance-squared-to"><inline classes="std std-ref">distance_squared_to</inline></reference>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-distance-to"><inline classes="std std-ref">distance_to</inline></reference>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-dot"><inline classes="std std-ref">dot</inline></reference>(with: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-floor"><inline classes="std std-ref">floor</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-inverse"><inline classes="std std-ref">inverse</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-is-normalized"><inline classes="std std-ref">is_normalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-is-zero-approx"><inline classes="std std-ref">is_zero_approx</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-length"><inline classes="std std-ref">length</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-length-squared"><inline classes="std std-ref">length_squared</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-lerp"><inline classes="std std-ref">lerp</inline></reference>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-max"><inline classes="std std-ref">max</inline></reference>(with: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-maxf"><inline classes="std std-ref">maxf</inline></reference>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-min"><inline classes="std std-ref">min</inline></reference>(with: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-minf"><inline classes="std std-ref">minf</inline></reference>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-normalized"><inline classes="std std-ref">normalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-posmod"><inline classes="std std-ref">posmod</inline></reference>(mod: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-posmodv"><inline classes="std std-ref">posmodv</inline></reference>(modv: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-round"><inline classes="std std-ref">round</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-sign"><inline classes="std std-ref">sign</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-snapped"><inline classes="std std-ref">snapped</inline></reference>(step: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-method-snappedf"><inline classes="std std-ref">snappedf</inline></reference>(step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="109"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-neq-vector4"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-mul-projection"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-mul-vector4"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-sum-vector4"><inline classes="std std-ref">operator +</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-dif-vector4"><inline classes="std std-ref">operator -</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-div-vector4"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-div-float"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-div-int"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-lt-vector4"><inline classes="std std-ref">operator &lt;</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-lte-vector4"><inline classes="std std-ref">operator &lt;=</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-eq-vector4"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-gt-vector4"><inline classes="std std-ref">operator &gt;</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-gte-vector4"><inline classes="std std-ref">operator &gt;=</inline></reference>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-unplus"><inline classes="std std-ref">operator unary+</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector4-operator-unminus"><inline classes="std std-ref">operator unary-</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="常量">
            <title>常量</title>
            <target refid="class-vector4-constant-axis-x"></target>
            <paragraph classes="classref-constant" ids="class-vector4-constant-axis-x" names="class_vector4_constant_axis_x"><strong>AXIS_X</strong> = <literal>0</literal> <reference internal="True" refid="class-vector4-constant-axis-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>X 轴的枚举值。由 <reference internal="True" refid="class-vector4-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference> 和 <reference internal="True" refid="class-vector4-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference> 返回。</paragraph>
            <target refid="class-vector4-constant-axis-y"></target>
            <paragraph classes="classref-constant" ids="class-vector4-constant-axis-y" names="class_vector4_constant_axis_y"><strong>AXIS_Y</strong> = <literal>1</literal> <reference internal="True" refid="class-vector4-constant-axis-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Y 轴的枚举值。由 <reference internal="True" refid="class-vector4-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference> 和 <reference internal="True" refid="class-vector4-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference> 返回。</paragraph>
            <target refid="class-vector4-constant-axis-z"></target>
            <paragraph classes="classref-constant" ids="class-vector4-constant-axis-z" names="class_vector4_constant_axis_z"><strong>AXIS_Z</strong> = <literal>2</literal> <reference internal="True" refid="class-vector4-constant-axis-z"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Z 轴的枚举值。由 <reference internal="True" refid="class-vector4-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference> 和 <reference internal="True" refid="class-vector4-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference> 返回。</paragraph>
            <target refid="class-vector4-constant-axis-w"></target>
            <paragraph classes="classref-constant" ids="class-vector4-constant-axis-w" names="class_vector4_constant_axis_w"><strong>AXIS_W</strong> = <literal>3</literal> <reference internal="True" refid="class-vector4-constant-axis-w"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>W 轴的枚举值。由 <reference internal="True" refid="class-vector4-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference> 和 <reference internal="True" refid="class-vector4-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference> 返回。</paragraph>
            <target refid="class-vector4-constant-zero"></target>
            <paragraph classes="classref-constant" ids="class-vector4-constant-zero" names="class_vector4_constant_zero"><strong>ZERO</strong> = <literal>Vector4(0, 0, 0, 0)</literal> <reference internal="True" refid="class-vector4-constant-zero"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>零向量，所有分量都设置为 <literal>0</literal> 的向量。</paragraph>
            <target refid="class-vector4-constant-one"></target>
            <paragraph classes="classref-constant" ids="class-vector4-constant-one" names="class_vector4_constant_one"><strong>ONE</strong> = <literal>Vector4(1, 1, 1, 1)</literal> <reference internal="True" refid="class-vector4-constant-one"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>一向量，所有分量都设置为 <literal>1</literal> 的向量。</paragraph>
            <target refid="class-vector4-constant-inf"></target>
            <paragraph classes="classref-constant" ids="class-vector4-constant-inf" names="class_vector4_constant_inf"><strong>INF</strong> = <literal>Vector4(inf, inf, inf, inf)</literal> <reference internal="True" refid="class-vector4-constant-inf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>无穷大向量，所有分量都设置为 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-inf"><inline classes="std std-ref">@GDScript.INF</inline></reference> 的向量。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-vector4-property-w"></target>
            <paragraph classes="classref-property" ids="class-vector4-property-w" names="class_vector4_property_w"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>w</strong> = <literal>0.0</literal> <reference internal="True" refid="class-vector4-property-w"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该向量的 W 分量。也可以通过使用索引位置 <literal>[3]</literal> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-property-x"></target>
            <paragraph classes="classref-property" ids="class-vector4-property-x" names="class_vector4_property_x"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>x</strong> = <literal>0.0</literal> <reference internal="True" refid="class-vector4-property-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向量的 X 分量。也可以通过使用索引位置 <literal>[0]</literal> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-property-y"></target>
            <paragraph classes="classref-property" ids="class-vector4-property-y" names="class_vector4_property_y"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>y</strong> = <literal>0.0</literal> <reference internal="True" refid="class-vector4-property-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向量的 Y 分量。也可以通过使用索引位置 <literal>[1]</literal> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-property-z"></target>
            <paragraph classes="classref-property" ids="class-vector4-property-z" names="class_vector4_property_z"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>z</strong> = <literal>0.0</literal> <reference internal="True" refid="class-vector4-property-z"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向量的 Z 分量。也可以通过使用索引位置 <literal>[2]</literal> 访问。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-vector4-constructor-vector4"></target>
            <paragraph classes="classref-constructor" ids="class-vector4-constructor-vector4" names="class_vector4_constructor_vector4"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>Vector4</strong>() <reference internal="True" refid="class-vector4-constructor-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造默认初始化的 <strong>Vector4</strong>，所有分量都为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>Vector4</strong>(from: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>Vector4</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>Vector4</strong>(from: <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference>)</paragraph>
            <paragraph>从给定的 <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> 构造新的 <strong>Vector4</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>Vector4</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, w: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
            <paragraph>返回具有给定分量的 <strong>Vector4</strong>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-vector4-method-abs"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-abs" names="class_vector4_method_abs"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>abs</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-abs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新向量，其所有分量都是绝对值，即正值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-ceil"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-ceil" names="class_vector4_method_ceil"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>ceil</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-ceil"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新向量，所有的分量都是向上舍入（正无穷大方向）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-clamp"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-clamp" names="class_vector4_method_clamp"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>clamp</strong>(min: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, max: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-clamp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新向量，每个分量都使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-clamp"><inline classes="std std-ref">@GlobalScope.clamp</inline></reference> 限制在 <literal>min</literal> 和 <literal>max</literal> 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-clampf"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-clampf" names="class_vector4_method_clampf"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>clampf</strong>(min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-clampf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns a new vector with all components clamped between <literal>min</literal> and <literal>max</literal>, by running <reference internal="True" refuri="class_@globalscope#class-globalscope-method-clamp"><inline classes="std std-ref">@GlobalScope.clamp</inline></reference> on each component.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-cubic-interpolate"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-cubic-interpolate" names="class_vector4_method_cubic_interpolate"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>cubic_interpolate</strong>(b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, pre_a: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, post_b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-cubic-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量和 <literal>b</literal> 之间进行三次插值 <literal>weight</literal> 处的结果，使用 <literal>pre_a</literal> 和 <literal>post_b</literal> 作为控制柄。<literal>weight</literal> 在 0.0 到 1.0 的范围内，代表插值的量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-cubic-interpolate-in-time"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-cubic-interpolate-in-time" names="class_vector4_method_cubic_interpolate_in_time"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>cubic_interpolate_in_time</strong>(b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, pre_a: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, post_b: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_a_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-cubic-interpolate-in-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量和 <literal>b</literal> 之间进行三次插值 <literal>weight</literal> 处的结果，使用 <literal>pre_a</literal> 和 <literal>post_b</literal> 作为控制柄。<literal>weight</literal> 在 0.0 到 1.0 的范围内，代表插值的量。</paragraph>
            <paragraph>通过使用时间值，可以比 <reference internal="True" refid="class-vector4-method-cubic-interpolate"><inline classes="std std-ref">cubic_interpolate</inline></reference> 进行更平滑的插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-direction-to"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-direction-to" names="class_vector4_method_direction_to"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>direction_to</strong>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-direction-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从该向量指向 <literal>to</literal> 的归一化向量。相当于使用 <literal>(b - a).normalized()</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-distance-squared-to"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-distance-squared-to" names="class_vector4_method_distance_squared_to"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_squared_to</strong>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-distance-squared-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量与 <literal>to</literal> 之间的距离的平方。</paragraph>
            <paragraph>该方法比 <reference internal="True" refid="class-vector4-method-distance-to"><inline classes="std std-ref">distance_to</inline></reference> 运行得更快，因此请在需要比较向量或者用于某些公式的平方距离时，优先使用这个方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-distance-to"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-distance-to" names="class_vector4_method_distance_to"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_to</strong>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-distance-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量与 <literal>to</literal> 之间的距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-dot"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-dot" names="class_vector4_method_dot"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>dot</strong>(with: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-dot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量与 <literal>with</literal> 的点积。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-floor"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-floor" names="class_vector4_method_floor"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>floor</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-floor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新的向量，所有的向量都被四舍五入，向负无穷大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-inverse"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-inverse" names="class_vector4_method_inverse"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>inverse</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-inverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量的逆向量。与 <literal>Vector4(1.0 / v.x, 1.0 / v.y, 1.0 / v.z, 1.0 / v.w)</literal> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-is-equal-approx" names="class_vector4_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-is-equal-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个向量与 <literal>to</literal> 大致相等，则返回 <literal>true</literal>，判断方法是对每个分量执行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-is-finite" names="class_vector4_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-is-finite"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该向量无穷，则返回 <literal>true</literal>，判断方法是对每个分量调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-finite"><inline classes="std std-ref">@GlobalScope.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-is-normalized"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-is-normalized" names="class_vector4_method_is_normalized"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_normalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-is-normalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该向量是归一化的，即长度约等于 1，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-is-zero-approx"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-is-zero-approx" names="class_vector4_method_is_zero_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_zero_approx</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-is-zero-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该向量的值大约为零，则返回 <literal>true</literal>，判断方法是对每个分量运行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-zero-approx"><inline classes="std std-ref">@GlobalScope.is_zero_approx</inline></reference>。</paragraph>
            <paragraph>该方法比使用 <reference internal="True" refid="class-vector4-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference> 和零向量比较要快。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-length"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-length" names="class_vector4_method_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个向量的长度，即大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-length-squared"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-length-squared" names="class_vector4_method_length_squared"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length_squared</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-length-squared"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个向量的平方长度，即平方大小。</paragraph>
            <paragraph>这个方法比 <reference internal="True" refid="class-vector4-method-length"><inline classes="std std-ref">length</inline></reference> 运行得更快，所以如果你需要比较向量或需要一些公式的平方距离时，更喜欢用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-lerp"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-lerp" names="class_vector4_method_lerp"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>lerp</strong>(to: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-lerp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此向量和 <literal>to</literal> 之间，按数量 <literal>weight</literal> 线性插值结果。<literal>weight</literal> 在 <literal>0.0</literal> 到 <literal>1.0</literal> 的范围内，代表插值的量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-max"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-max" names="class_vector4_method_max"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>max</strong>(with: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最大值，等价于 <literal>Vector4(maxf(x, with.x), maxf(y, with.y), maxf(z, with.z), maxf(w, with.w))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-max-axis-index"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-max-axis-index" names="class_vector4_method_max_axis_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_axis_index</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-max-axis-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量中最大值的轴。见 <literal>AXIS_*</literal> 常量。如果所有分量相等，则该方法返回 <reference internal="True" refid="class-vector4-constant-axis-x"><inline classes="std std-ref">AXIS_X</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-maxf"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-maxf" names="class_vector4_method_maxf"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>maxf</strong>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-maxf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最大值，等价于 <literal>Vector4(maxf(x, with), maxf(y, with), maxf(z, with), maxf(w, with))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-min"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-min" names="class_vector4_method_min"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>min</strong>(with: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最小值，等价于 <literal>Vector4(minf(x, with.x), minf(y, with.y), minf(z, with.z), minf(w, with.w))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-min-axis-index"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-min-axis-index" names="class_vector4_method_min_axis_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>min_axis_index</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-min-axis-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量中最小值的轴。见 <literal>AXIS_*</literal> 常量。如果所有分量相等，则该方法返回 <reference internal="True" refid="class-vector4-constant-axis-w"><inline classes="std std-ref">AXIS_W</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-minf"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-minf" names="class_vector4_method_minf"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>minf</strong>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-minf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最小值，等价于 <literal>Vector4(minf(x, with), minf(y, with), minf(z, with), minf(w, with))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-normalized"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-normalized" names="class_vector4_method_normalized"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>normalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-normalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the result of scaling the vector to unit length. Equivalent to <literal>v / v.length()</literal>. Returns <literal>(0, 0, 0, 0)</literal> if <literal>v.length() == 0</literal>. See also <reference internal="True" refid="class-vector4-method-is-normalized"><inline classes="std std-ref">is_normalized</inline></reference>.</paragraph>
            <paragraph><strong>Note:</strong> This function may return incorrect values if the input vector length is near zero.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-posmod"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-posmod" names="class_vector4_method_posmod"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>posmod</strong>(mod: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-posmod"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由该向量的分量与 <literal>mod</literal> 执行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-fposmod"><inline classes="std std-ref">@GlobalScope.fposmod</inline></reference> 运算后组成的向量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-posmodv"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-posmodv" names="class_vector4_method_posmodv"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>posmodv</strong>(modv: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-posmodv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由该向量的分量与 <literal>modv</literal> 的分量执行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-fposmod"><inline classes="std std-ref">@GlobalScope.fposmod</inline></reference> 运算后组成的向量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-round"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-round" names="class_vector4_method_round"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>round</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-round"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有分量都被四舍五入为最接近的整数的向量，中间情况向远离零的方向舍入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-sign"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-sign" names="class_vector4_method_sign"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>sign</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-sign"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的向量，分量如果为正则设为 <literal>1.0</literal>，如果为负则设为 <literal>-1.0</literal>，如果为零则设为 <literal>0.0</literal>。结果与对每个分量调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-sign"><inline classes="std std-ref">@GlobalScope.sign</inline></reference> 一致。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-snapped"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-snapped" names="class_vector4_method_snapped"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>snapped</strong>(step: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-snapped"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的向量，每个分量都吸附到了与 <literal>step</literal> 中对应分量最接近的倍数。也可以用于将分量四舍五入至小数点后的任意位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-method-snappedf"></target>
            <paragraph classes="classref-method" ids="class-vector4-method-snappedf" names="class_vector4_method_snappedf"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>snappedf</strong>(step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector4-method-snappedf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns a new vector with each component snapped to the nearest multiple of <literal>step</literal>. This can also be used to round the components to an arbitrary number of decimals.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-vector4-operator-neq-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-neq-vector4" names="class_vector4_operator_neq_vector4"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-neq-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果向量不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-vector4-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-mul-projection"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-mul-projection" names="class_vector4_operator_mul_projection"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference>) <reference internal="True" refid="class-vector4-operator-mul-projection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过给定 <reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> 矩阵的转置变换（乘以）该 <strong>Vector4</strong>。</paragraph>
            <paragraph>对于通过投影的逆进行的变换，可以使用 <literal>projection.inverse() * vector</literal> 代替。请参阅 <reference internal="True" refuri="class_projection#class-projection-method-inverse"><inline classes="std std-ref">Projection.inverse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-mul-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-mul-vector4" names="class_vector4_operator_mul_vector4"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-mul-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量乘以给定 <strong>Vector4</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector4(10, 20, 30, 40) * Vector4(3, 4, 5, 6)) # 输出 "(30, 80, 150, 240)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-mul-float" names="class_vector4_operator_mul_float"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-vector4-operator-mul-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量乘以给定的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector4(10, 20, 30, 40) * 2) # 输出 "(20, 40, 60, 80)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-mul-int" names="class_vector4_operator_mul_int"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-vector4-operator-mul-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量乘以给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-sum-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-sum-vector4" names="class_vector4_operator_sum_vector4"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator +</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-sum-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量加上给定 <strong>Vector4</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector4(10, 20, 30, 40) + Vector4(3, 4, 5, 6)) # 输出 "(13, 24, 35, 46)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-dif-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-dif-vector4" names="class_vector4_operator_dif_vector4"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator -</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-dif-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量减去给定 <strong>Vector4</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector4(10, 20, 30, 40) - Vector4(3, 4, 5, 6)) # 输出 "(7, 16, 25, 34)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-div-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-div-vector4" names="class_vector4_operator_div_vector4"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-div-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量除以给定 <strong>Vector4</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector4(10, 20, 30, 40) / Vector4(2, 5, 3, 4)) # 输出 "(5, 4, 10, 10)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-div-float" names="class_vector4_operator_div_float"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-vector4-operator-div-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量除以给定的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector4(10, 20, 30, 40) / 2 # 输出 "(5, 10, 15, 20)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-div-int" names="class_vector4_operator_div_int"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-vector4-operator-div-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector4</strong> 的每个分量除以给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-lt-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-lt-vector4" names="class_vector4_operator_lt_vector4"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-lt-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector4</strong> 向量，首先检查左向量的 X 值是否小于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值、Z 值、W 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-lte-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-lte-vector4" names="class_vector4_operator_lte_vector4"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;=</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-lte-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector4</strong> 向量，首先检查左向量的 X 值是否小于等于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值、Z 值、W 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-eq-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-eq-vector4" names="class_vector4_operator_eq_vector4"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-eq-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果向量完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-vector4-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-gt-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-gt-vector4" names="class_vector4_operator_gt_vector4"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-gt-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector4</strong> 向量，首先检查左向量的 X 值是否大于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值、Z 值、W 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-gte-vector4"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-gte-vector4" names="class_vector4_operator_gte_vector4"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;=</strong>(right: <reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference>) <reference internal="True" refid="class-vector4-operator-gte-vector4"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector4</strong> 向量，首先检查左向量的 X 值是否大于等于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值、Z 值、W 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-idx-int" names="class_vector4_operator_idx_int"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator []</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-vector4-operator-idx-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用向量分量的 <literal>index</literal> 来访问向量分量。<literal>v[0]</literal> 等价于 <literal>v.x</literal>，<literal>v[1]</literal> 等价于 <literal>v.y</literal>，<literal>v[2]</literal> 等价于 <literal>v.z</literal>，<literal>v[3]</literal> 等价于 <literal>v.w</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-unplus"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-unplus" names="class_vector4_operator_unplus"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator unary+</strong>() <reference internal="True" refid="class-vector4-operator-unplus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>+</literal> 不存在时相同的值。单目 <literal>+</literal> 没有作用，但有时可以使你的代码更具可读性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector4-operator-unminus"></target>
            <paragraph classes="classref-operator" ids="class-vector4-operator-unminus" names="class_vector4_operator_unminus"><reference internal="True" refid="class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator unary-</strong>() <reference internal="True" refid="class-vector4-operator-unminus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Vector4</strong> 的负值。和写 <literal>Vector4(-v.x, -v.y, -v.z, -v.w)</literal> 是一样的。该操作在保持相同幅度的同时，翻转向量的方向。对于浮点数，零也有正负两种。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
