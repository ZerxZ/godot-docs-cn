<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorscenepostimportplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorScenePostImportPlugin.xml.</comment>
    <target refid="class-editorscenepostimportplugin"></target>
    <section ids="editorscenepostimportplugin class-editorscenepostimportplugin" names="editorscenepostimportplugin class_editorscenepostimportplugin">
        <title>EditorScenePostImportPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于控制和修改导入场景的过程的插件。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这种插件类型的存在是为了修改导入场景的处理，允许在处理的每个阶段更改内容以及添加导入器选项。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="393"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-import-options"><inline classes="std std-ref">_get_import_options</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-internal-import-options"><inline classes="std std-ref">_get_internal_import_options</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-internal-option-update-view-required"><inline classes="std std-ref">_get_internal_option_update_view_required</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> option <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-internal-option-visibility"><inline classes="std std-ref">_get_internal_option_visibility</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> for_animation, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> option <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-option-visibility"><inline classes="std std-ref">_get_option_visibility</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> for_animation, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> option <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-internal-process"><inline classes="std std-ref">_internal_process</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> base_node, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node, <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> resource <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-post-process"><inline classes="std std-ref">_post_process</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> scene <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-private-method-pre-process"><inline classes="std std-ref">_pre_process</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> scene <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-method-add-import-option"><inline classes="std std-ref">add_import_option</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-method-add-import-option-advanced"><inline classes="std std-ref">add_import_option_advanced</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> default_value, <reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> hint=0, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> hint_string="", <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> usage_flags=6 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorscenepostimportplugin-method-get-option-value"><inline classes="std std-ref">get_option_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-editorscenepostimportplugin-internalimportcategory"></target>
            <paragraph classes="classref-enumeration" ids="enum-editorscenepostimportplugin-internalimportcategory" names="enum_editorscenepostimportplugin_internalimportcategory">enum <strong>InternalImportCategory</strong>:</paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-node"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-node" names="class_editorscenepostimportplugin_constant_internal_import_category_node"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_NODE</strong> = <literal>0</literal></paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-mesh-3d-node"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-mesh-3d-node" names="class_editorscenepostimportplugin_constant_internal_import_category_mesh_3d_node"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_MESH_3D_NODE</strong> = <literal>1</literal></paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-mesh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-mesh" names="class_editorscenepostimportplugin_constant_internal_import_category_mesh"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_MESH</strong> = <literal>2</literal></paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-material"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-material" names="class_editorscenepostimportplugin_constant_internal_import_category_material"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_MATERIAL</strong> = <literal>3</literal></paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-animation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-animation" names="class_editorscenepostimportplugin_constant_internal_import_category_animation"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_ANIMATION</strong> = <literal>4</literal></paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-animation-node"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-animation-node" names="class_editorscenepostimportplugin_constant_internal_import_category_animation_node"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_ANIMATION_NODE</strong> = <literal>5</literal></paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-skeleton-3d-node"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-skeleton-3d-node" names="class_editorscenepostimportplugin_constant_internal_import_category_skeleton_3d_node"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_SKELETON_3D_NODE</strong> = <literal>6</literal></paragraph>
            <target refid="class-editorscenepostimportplugin-constant-internal-import-category-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorscenepostimportplugin-constant-internal-import-category-max" names="class_editorscenepostimportplugin_constant_internal_import_category_max"><reference internal="True" refid="enum-editorscenepostimportplugin-internalimportcategory"><inline classes="std std-ref">InternalImportCategory</inline></reference> <strong>INTERNAL_IMPORT_CATEGORY_MAX</strong> = <literal>7</literal></paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorscenepostimportplugin-private-method-get-import-options"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-get-import-options" names="class_editorscenepostimportplugin_private_method__get_import_options">void <strong>_get_import_options</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖以添加常规导入选项。这些将出现在编辑器的主导入停靠面板中。通过 <reference internal="True" refid="class-editorscenepostimportplugin-method-add-import-option"><inline classes="std std-ref">add_import_option</inline></reference> 和 <reference internal="True" refid="class-editorscenepostimportplugin-method-add-import-option-advanced"><inline classes="std std-ref">add_import_option_advanced</inline></reference> 添加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-private-method-get-internal-import-options"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-get-internal-import-options" names="class_editorscenepostimportplugin_private_method__get_internal_import_options">void <strong>_get_internal_import_options</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖以添加内部导入选项。这些将出现在 3D 场景导入对话框中。通过 <reference internal="True" refid="class-editorscenepostimportplugin-method-add-import-option"><inline classes="std std-ref">add_import_option</inline></reference> 和 <reference internal="True" refid="class-editorscenepostimportplugin-method-add-import-option-advanced"><inline classes="std std-ref">add_import_option_advanced</inline></reference> 添加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-private-method-get-internal-option-update-view-required"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-get-internal-option-update-view-required" names="class_editorscenepostimportplugin_private_method__get_internal_option_update_view_required"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_internal_option_update_view_required</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> option <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在选项已更改时是否需要更新导入对话框的 3D 视图，若更新则返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-private-method-get-internal-option-visibility"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-get-internal-option-visibility" names="class_editorscenepostimportplugin_private_method__get_internal_option_visibility"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_internal_option_visibility</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> for_animation, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> option <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定的选项是否应该可见。忽略时返回 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-private-method-get-option-visibility"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-get-option-visibility" names="class_editorscenepostimportplugin_private_method__get_option_visibility"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_option_visibility</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> for_animation, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> option <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定的选项是否应该可见。忽略时返回 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-private-method-internal-process"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-internal-process" names="class_editorscenepostimportplugin_private_method__internal_process">void <strong>_internal_process</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> category, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> base_node, <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node, <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> resource <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>处理给定类别的特定节点或资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-private-method-post-process"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-post-process" names="class_editorscenepostimportplugin_private_method__post_process">void <strong>_post_process</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> scene <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>对场景进行后期处理。该方法会在最终场景配置完成后调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-private-method-pre-process"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-private-method-pre-process" names="class_editorscenepostimportplugin_private_method__pre_process">void <strong>_pre_process</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> scene <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>对场景进行预处理。该方法会在场景格式加载器加载场景后、尚未进行更改时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-method-add-import-option"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-method-add-import-option" names="class_editorscenepostimportplugin_method_add_import_option">void <strong>add_import_option</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>添加特定的导入选项（仅限名称和默认值）。该函数只能从 <reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-import-options"><inline classes="std std-ref">_get_import_options</inline></reference> 和 <reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-internal-import-options"><inline classes="std std-ref">_get_internal_import_options</inline></reference> 被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-method-add-import-option-advanced"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-method-add-import-option-advanced" names="class_editorscenepostimportplugin_method_add_import_option_advanced">void <strong>add_import_option_advanced</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> default_value, <reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference> hint=0, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> hint_string="", <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> usage_flags=6 <strong>)</strong></paragraph>
            <paragraph>添加特定的导入选项。该函数只能从 <reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-import-options"><inline classes="std std-ref">_get_import_options</inline></reference> 和 <reference internal="True" refid="class-editorscenepostimportplugin-private-method-get-internal-import-options"><inline classes="std std-ref">_get_internal_import_options</inline></reference> 被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorscenepostimportplugin-method-get-option-value"></target>
            <paragraph classes="classref-method" ids="class-editorscenepostimportplugin-method-get-option-value" names="class_editorscenepostimportplugin_method_get_option_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_option_value</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询选项的值。该函数只能从查询可见性的函数或处理函数中被调用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
