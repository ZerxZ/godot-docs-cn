<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_resource.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Resource.xml.</comment>
    <target refid="class-resource"></target>
    <section ids="resource class-resource" names="resource class_resource">
        <title>Resource</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>, <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference>, <reference internal="True" refuri="class_animationnode#class-animationnode"><inline classes="std std-ref">AnimationNode</inline></reference>, <reference internal="True" refuri="class_animationnodestatemachineplayback#class-animationnodestatemachineplayback"><inline classes="std std-ref">AnimationNodeStateMachinePlayback</inline></reference>, <reference internal="True" refuri="class_animationnodestatemachinetransition#class-animationnodestatemachinetransition"><inline classes="std std-ref">AnimationNodeStateMachineTransition</inline></reference>, <reference internal="True" refuri="class_audiobuslayout#class-audiobuslayout"><inline classes="std std-ref">AudioBusLayout</inline></reference>, <reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference>, <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>, <reference internal="True" refuri="class_bitmap#class-bitmap"><inline classes="std std-ref">BitMap</inline></reference>, <reference internal="True" refuri="class_bonemap#class-bonemap"><inline classes="std std-ref">BoneMap</inline></reference>, <reference internal="True" refuri="class_buttongroup#class-buttongroup"><inline classes="std std-ref">ButtonGroup</inline></reference>, <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference>, <reference internal="True" refuri="class_compositor#class-compositor"><inline classes="std std-ref">Compositor</inline></reference>, <reference internal="True" refuri="class_compositoreffect#class-compositoreffect"><inline classes="std std-ref">CompositorEffect</inline></reference>, <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, <reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference>, <reference internal="True" refuri="class_curve2d#class-curve2d"><inline classes="std std-ref">Curve2D</inline></reference>, <reference internal="True" refuri="class_curve3d#class-curve3d"><inline classes="std std-ref">Curve3D</inline></reference>, <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>, <reference internal="True" refuri="class_editorsettings#class-editorsettings"><inline classes="std std-ref">EditorSettings</inline></reference>, <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference>, <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, <reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference>, <reference internal="True" refuri="class_gltfaccessor#class-gltfaccessor"><inline classes="std std-ref">GLTFAccessor</inline></reference>, <reference internal="True" refuri="class_gltfanimation#class-gltfanimation"><inline classes="std std-ref">GLTFAnimation</inline></reference>, <reference internal="True" refuri="class_gltfbufferview#class-gltfbufferview"><inline classes="std std-ref">GLTFBufferView</inline></reference>, <reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference>, <reference internal="True" refuri="class_gltfdocument#class-gltfdocument"><inline classes="std std-ref">GLTFDocument</inline></reference>, <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference>, <reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference>, <reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference>, <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>, <reference internal="True" refuri="class_gltfphysicsbody#class-gltfphysicsbody"><inline classes="std std-ref">GLTFPhysicsBody</inline></reference>, <reference internal="True" refuri="class_gltfphysicsshape#class-gltfphysicsshape"><inline classes="std std-ref">GLTFPhysicsShape</inline></reference>, <reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference>, <reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference>, <reference internal="True" refuri="class_gltfspecgloss#class-gltfspecgloss"><inline classes="std std-ref">GLTFSpecGloss</inline></reference>, <reference internal="True" refuri="class_gltfstate#class-gltfstate"><inline classes="std std-ref">GLTFState</inline></reference>, <reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>, <reference internal="True" refuri="class_gltftexturesampler#class-gltftexturesampler"><inline classes="std std-ref">GLTFTextureSampler</inline></reference>, <reference internal="True" refuri="class_gradient#class-gradient"><inline classes="std std-ref">Gradient</inline></reference>, <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, <reference internal="True" refuri="class_importermesh#class-importermesh"><inline classes="std std-ref">ImporterMesh</inline></reference>, <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, <reference internal="True" refuri="class_json#class-json"><inline classes="std std-ref">JSON</inline></reference>, <reference internal="True" refuri="class_labelsettings#class-labelsettings"><inline classes="std std-ref">LabelSettings</inline></reference>, <reference internal="True" refuri="class_lightmapgidata#class-lightmapgidata"><inline classes="std std-ref">LightmapGIData</inline></reference>, <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>, <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, <reference internal="True" refuri="class_meshlibrary#class-meshlibrary"><inline classes="std std-ref">MeshLibrary</inline></reference>, <reference internal="True" refuri="class_missingresource#class-missingresource"><inline classes="std std-ref">MissingResource</inline></reference>, <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>, <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata2d#class-navigationmeshsourcegeometrydata2d"><inline classes="std std-ref">NavigationMeshSourceGeometryData2D</inline></reference>, <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference>, <reference internal="True" refuri="class_navigationpolygon#class-navigationpolygon"><inline classes="std std-ref">NavigationPolygon</inline></reference>, <reference internal="True" refuri="class_noise#class-noise"><inline classes="std std-ref">Noise</inline></reference>, <reference internal="True" refuri="class_occluder3d#class-occluder3d"><inline classes="std std-ref">Occluder3D</inline></reference>, <reference internal="True" refuri="class_occluderpolygon2d#class-occluderpolygon2d"><inline classes="std std-ref">OccluderPolygon2D</inline></reference>, <reference internal="True" refuri="class_oggpacketsequence#class-oggpacketsequence"><inline classes="std std-ref">OggPacketSequence</inline></reference>, <reference internal="True" refuri="class_openxraction#class-openxraction"><inline classes="std std-ref">OpenXRAction</inline></reference>, <reference internal="True" refuri="class_openxractionmap#class-openxractionmap"><inline classes="std std-ref">OpenXRActionMap</inline></reference>, <reference internal="True" refuri="class_openxractionset#class-openxractionset"><inline classes="std std-ref">OpenXRActionSet</inline></reference>, <reference internal="True" refuri="class_openxrinteractionprofile#class-openxrinteractionprofile"><inline classes="std std-ref">OpenXRInteractionProfile</inline></reference>, <reference internal="True" refuri="class_openxripbinding#class-openxripbinding"><inline classes="std std-ref">OpenXRIPBinding</inline></reference>, <reference internal="True" refuri="class_packeddatacontainer#class-packeddatacontainer"><inline classes="std std-ref">PackedDataContainer</inline></reference>, <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference>, <reference internal="True" refuri="class_physicsmaterial#class-physicsmaterial"><inline classes="std std-ref">PhysicsMaterial</inline></reference>, <reference internal="True" refuri="class_polygonpathfinder#class-polygonpathfinder"><inline classes="std std-ref">PolygonPathFinder</inline></reference>, <reference internal="True" refuri="class_rdshaderfile#class-rdshaderfile"><inline classes="std std-ref">RDShaderFile</inline></reference>, <reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference>, <reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference>, <reference internal="True" refuri="class_scenereplicationconfig#class-scenereplicationconfig"><inline classes="std std-ref">SceneReplicationConfig</inline></reference>, <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>, <reference internal="True" refuri="class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference>, <reference internal="True" refuri="class_shaderinclude#class-shaderinclude"><inline classes="std std-ref">ShaderInclude</inline></reference>, <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference>, <reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference>, <reference internal="True" refuri="class_shortcut#class-shortcut"><inline classes="std std-ref">Shortcut</inline></reference>, <reference internal="True" refuri="class_skeletonmodification2d#class-skeletonmodification2d"><inline classes="std std-ref">SkeletonModification2D</inline></reference>, <reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference>, <reference internal="True" refuri="class_skeletonprofile#class-skeletonprofile"><inline classes="std std-ref">SkeletonProfile</inline></reference>, <reference internal="True" refuri="class_skin#class-skin"><inline classes="std std-ref">Skin</inline></reference>, <reference internal="True" refuri="class_sky#class-sky"><inline classes="std std-ref">Sky</inline></reference>, <reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference>, <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>, <reference internal="True" refuri="class_syntaxhighlighter#class-syntaxhighlighter"><inline classes="std std-ref">SyntaxHighlighter</inline></reference>, <reference internal="True" refuri="class_texture#class-texture"><inline classes="std std-ref">Texture</inline></reference>, <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>, <reference internal="True" refuri="class_tilemappattern#class-tilemappattern"><inline classes="std std-ref">TileMapPattern</inline></reference>, <reference internal="True" refuri="class_tileset#class-tileset"><inline classes="std std-ref">TileSet</inline></reference>, <reference internal="True" refuri="class_tilesetsource#class-tilesetsource"><inline classes="std std-ref">TileSetSource</inline></reference>, <reference internal="True" refuri="class_translation#class-translation"><inline classes="std std-ref">Translation</inline></reference>, <reference internal="True" refuri="class_videostream#class-videostream"><inline classes="std std-ref">VideoStream</inline></reference>, <reference internal="True" refuri="class_videostreamplayback#class-videostreamplayback"><inline classes="std std-ref">VideoStreamPlayback</inline></reference>, <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference>, <reference internal="True" refuri="class_voxelgidata#class-voxelgidata"><inline classes="std std-ref">VoxelGIData</inline></reference>, <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference>, <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference>, <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference></paragraph>
        <paragraph>可序列化对象的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>资源是所有 Godot 特定资源类型的基类，主要作为数据容器。因为资源继承自 <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference>，所以进行了引用计数，不再使用时会被释放。资源也可以嵌套到其他资源里、保存到磁盘上。<reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 也是一种资源，它是 Godot 项目中最常用的 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 之一，独特的能力是可以将若干 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 保存起来、随意进行实例化。</paragraph>
            <paragraph>在 GDScript 中，可以根据 <reference internal="True" refid="class-resource-property-resource-path"><inline classes="std std-ref">resource_path</inline></reference> 从磁盘上加载资源，使用 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-load"><inline classes="std std-ref">@GDScript.load</inline></reference> 或 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-preload"><inline classes="std std-ref">@GDScript.preload</inline></reference> 即可。</paragraph>
            <paragraph>引擎会维护所有已加载资源的全局缓存，可以根据路径引用资源（见 <reference internal="True" refuri="class_resourceloader#class-resourceloader-method-has-cached"><inline classes="std std-ref">ResourceLoader.has_cached</inline></reference>）。资源会在首次加载时缓存，所有引用释放后就会从缓存中移除。如果缓存中存在某个资源，那么后续使用其路径进行加载的时候返回的就是缓存中的引用。</paragraph>
            <paragraph><strong>注意：</strong>在 C# 中，资源不再被使用后并不会立即被释放。相反，垃圾回收将定期运行，并释放不再使用的资源。这意味着未使用的资源在被删除之前会在内存中保留一段时间。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/resources"><inline classes="doc">资源</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/best_practices/node_alternatives"><inline classes="doc">何时以及如何避免为任何事情使用节点</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="83"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-property-resource-local-to-scene"><inline classes="std std-ref">resource_local_to_scene</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-property-resource-name"><inline classes="std std-ref">resource_name</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-property-resource-path"><inline classes="std std-ref">resource_path</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-property-resource-scene-unique-id"><inline classes="std std-ref">resource_scene_unique_id</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="113"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-private-method-get-rid"><inline classes="std std-ref">_get_rid</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-private-method-setup-local-to-scene"><inline classes="std std-ref">_setup_local_to_scene</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>(subresources: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-method-emit-changed"><inline classes="std std-ref">emit_changed</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-method-generate-scene-unique-id"><inline classes="std std-ref">generate_scene_unique_id</inline></reference>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-method-get-local-scene"><inline classes="std std-ref">get_local_scene</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-method-get-rid"><inline classes="std std-ref">get_rid</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-method-setup-local-to-scene"><inline classes="std std-ref">setup_local_to_scene</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resource-method-take-over-path"><inline classes="std std-ref">take_over_path</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-resource-signal-changed"></target>
            <paragraph classes="classref-signal" ids="class-resource-signal-changed" names="class_resource_signal_changed"><strong>changed</strong>() <reference internal="True" refid="class-resource-signal-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当资源发生更改时发出信号，通常是当其属性之一被修改时。另见 <reference internal="True" refid="class-resource-method-emit-changed"><inline classes="std std-ref">emit_changed</inline></reference> 。</paragraph>
            <paragraph><strong>注意：</strong>自定义资源的属性不会自动发出此信号。如有必要，需要创建一个 setter 来触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-signal-setup-local-to-scene-requested"></target>
            <paragraph classes="classref-signal" ids="class-resource-signal-setup-local-to-scene-requested" names="class_resource_signal_setup_local_to_scene_requested"><strong>setup_local_to_scene_requested</strong>() <reference internal="True" refid="class-resource-signal-setup-local-to-scene-requested"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> This signal is only emitted when the resource is created. Override <reference internal="True" refid="class-resource-private-method-setup-local-to-scene"><inline classes="std std-ref">_setup_local_to_scene</inline></reference> instead.</paragraph>
            <paragraph>由新复制的 <reference internal="True" refid="class-resource-property-resource-local-to-scene"><inline classes="std std-ref">resource_local_to_scene</inline></reference> 为 <literal>true</literal> 的资源发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-resource-property-resource-local-to-scene"></target>
            <paragraph classes="classref-property" ids="class-resource-property-resource-local-to-scene" names="class_resource_property_resource_local_to_scene"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>resource_local_to_scene</strong> = <literal>false</literal> <reference internal="True" refid="class-resource-property-resource-local-to-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_local_to_scene</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_local_to_scene</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，那么在本地场景的各个实例中，该资源都会被唯一化。在运行时，在某个场景中对该资源的修改不会影响其他实例（见 <reference internal="True" refuri="class_packedscene#class-packedscene-method-instantiate"><inline classes="std std-ref">PackedScene.instantiate</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>运行时，在已创建副本的资源上修改该属性不会有效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-property-resource-name"></target>
            <paragraph classes="classref-property" ids="class-resource-property-resource-name" names="class_resource_property_resource_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>resource_name</strong> = <literal>""</literal> <reference internal="True" refid="class-resource-property-resource-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_name</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_name</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>这个资源的可选名称。定义后会在“检查器”面板中显示这个值来代表该资源。对于内置脚本，该名称会在脚本编辑器中作为选项卡名称的一部分显示。</paragraph>
            <paragraph><strong>注意：</strong>某些资源格式不支持资源名称。仍然可以在编辑器中或通过代码设置名称，但重新加载资源时该名称将会丢失。例如，只有内置的脚本可以有资源名称，而存储在单独文件中的脚本则不能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-property-resource-path"></target>
            <paragraph classes="classref-property" ids="class-resource-property-resource-path" names="class_resource_property_resource_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>resource_path</strong> = <literal>""</literal> <reference internal="True" refid="class-resource-property-resource-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_path</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_path</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该资源的唯一路径。如果已被保存到磁盘，该值将是其文件路径。如果该资源仅包含在某一个场景中，该值将是 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 的文件路径后加上一个唯一标识符。</paragraph>
            <paragraph><strong>注意：</strong>如果之前已经加载了具有相同路径的资源，手动设置该属性可能会失败。如果有必要，请使用 <reference internal="True" refid="class-resource-method-take-over-path"><inline classes="std std-ref">take_over_path</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-property-resource-scene-unique-id"></target>
            <paragraph classes="classref-property" ids="class-resource-property-resource-scene-unique-id" names="class_resource_property_resource_scene_unique_id"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>resource_scene_unique_id</strong> <reference internal="True" refid="class-resource-property-resource-scene-unique-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scene_unique_id</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_scene_unique_id</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>An unique identifier relative to the this resource's scene. If left empty, the ID is automatically generated when this resource is saved inside a <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference>. If the resource is not inside a scene, this property is empty by default.</paragraph>
            <paragraph><strong>Note:</strong> When the <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> is saved, if multiple resources in the same scene use the same ID, only the earliest resource in the scene hierarchy keeps the original ID. The other resources are assigned new IDs from <reference internal="True" refid="class-resource-method-generate-scene-unique-id"><inline classes="std std-ref">generate_scene_unique_id</inline></reference>.</paragraph>
            <paragraph><strong>Note:</strong> Setting this property does not emit the <reference internal="True" refid="class-resource-signal-changed"><inline classes="std std-ref">changed</inline></reference> signal.</paragraph>
            <paragraph><strong>Warning:</strong> When setting, the ID must only consist of letters, numbers, and underscores. Otherwise, it will fail and default to a randomly generated ID.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-resource-private-method-get-rid"></target>
            <paragraph classes="classref-method" ids="class-resource-private-method-get-rid" names="class_resource_private_method__get_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>_get_rid</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-resource-private-method-get-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可以覆盖此方法，从而在调用 <reference internal="True" refid="class-resource-method-get-rid"><inline classes="std std-ref">get_rid</inline></reference> 时返回自定义 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-private-method-setup-local-to-scene"></target>
            <paragraph classes="classref-method" ids="class-resource-private-method-setup-local-to-scene" names="class_resource_private_method__setup_local_to_scene"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_setup_local_to_scene</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-resource-private-method-setup-local-to-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果原始资源的 <reference internal="True" refid="class-resource-property-resource-local-to-scene"><inline classes="std std-ref">resource_local_to_scene</inline></reference> 被设置为 <literal>true</literal>，则覆盖该方法以自定义从 <reference internal="True" refuri="class_packedscene#class-packedscene-method-instantiate"><inline classes="std std-ref">PackedScene.instantiate</inline></reference> 创建的新复制的资源。</paragraph>
            <paragraph><strong>示例：</strong>为实例化场景中的每个本地资源设置随机 <literal>damage</literal> 值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">extends Resource

var damage = 0

func _setup_local_to_scene():
    damage = randi_range(10, 40)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-method-duplicate"></target>
            <paragraph classes="classref-method" ids="class-resource-method-duplicate" names="class_resource_method_duplicate"><reference internal="True" refid="class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>duplicate</strong>(subresources: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-resource-method-duplicate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>制作该资源的副本，返回资源中，<literal>export</literal> 的属性以及 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-storage"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_STORAGE</inline></reference> 的属性都会从原始资源中复制。</paragraph>
            <paragraph>如果 <literal>subresources</literal> 为 <literal>false</literal>，则返回的是浅拷贝；子资源中的嵌套资源不会被复制，仍然会被共享。如果 <literal>subresources</literal> 为 <literal>true</literal>，则返回的是深拷贝；会制作嵌套子资源的副本，不会进行共享。</paragraph>
            <paragraph>带有 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-always-duplicate"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_ALWAYS_DUPLICATE</inline></reference> 标志的子资源属性始终会被复制，即便 <literal>subresources</literal> 为 <literal>false</literal>。而带有 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-never-duplicate"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_NEVER_DUPLICATE</inline></reference> 标志的子资源属性始终不会被复制，即便 <literal>subresources</literal> 为 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>对于自定义资源，如果定义 <reference internal="True" refuri="class_object#class-object-private-method-init"><inline classes="std std-ref">Object._init</inline></reference> 时使用了必填的参数，则此方法会失败。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-method-emit-changed"></target>
            <paragraph classes="classref-method" ids="class-resource-method-emit-changed" names="class_resource_method_emit_changed"><abbreviation explanation="无返回值。">void</abbreviation> <strong>emit_changed</strong>() <reference internal="True" refid="class-resource-method-emit-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>发出 <reference internal="True" refid="class-resource-signal-changed"><inline classes="std std-ref">changed</inline></reference> 更改信号。某些内置资源会自动调用此方法。</paragraph>
            <paragraph><strong>注意：</strong>对于自定义资源，推荐在发生任何有意义的变化时都调用此方法，例如修改属性时。这样能够保证依赖于此资源的自定义 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 能够正确更新其属性。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var damage:
    set(new_value):
        if damage != new_value:
            damage = new_value
            emit_changed()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-method-generate-scene-unique-id"></target>
            <paragraph classes="classref-method" ids="class-resource-method-generate-scene-unique-id" names="class_resource_method_generate_scene_unique_id"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>generate_scene_unique_id</strong>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-resource-method-generate-scene-unique-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Generates a unique identifier for a resource to be contained inside a <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference>, based on the current date, time, and a random value. The returned string is only composed of letters (<literal>a</literal> to <literal>y</literal>) and numbers (<literal>0</literal> to <literal>8</literal>). See also <reference internal="True" refid="class-resource-property-resource-scene-unique-id"><inline classes="std std-ref">resource_scene_unique_id</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-method-get-local-scene"></target>
            <paragraph classes="classref-method" ids="class-resource-method-get-local-scene" names="class_resource_method_get_local_scene"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_local_scene</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-resource-method-get-local-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-resource-property-resource-local-to-scene"><inline classes="std std-ref">resource_local_to_scene</inline></reference> 为 <literal>true</literal>，并且该资源是从 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 实例中加载的，则返回使用该资源的场景的根 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>。否则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-method-get-rid"></target>
            <paragraph classes="classref-method" ids="class-resource-method-get-rid" names="class_resource_method_get_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_rid</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-resource-method-get-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该资源的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>（或者空的 RID）。许多资源（如 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>、<reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 等）是存储在服务器（<reference internal="True" refuri="class_displayserver#class-displayserver"><inline classes="std std-ref">DisplayServer</inline></reference>、<reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 等）中的资源的高级抽象，所以这个函数将返回原始的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-method-setup-local-to-scene"></target>
            <paragraph classes="classref-method" ids="class-resource-method-setup-local-to-scene" names="class_resource_method_setup_local_to_scene"><abbreviation explanation="无返回值。">void</abbreviation> <strong>setup_local_to_scene</strong>() <reference internal="True" refid="class-resource-method-setup-local-to-scene"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> This method should only be called internally.</paragraph>
            <paragraph>调用 <reference internal="True" refid="class-resource-private-method-setup-local-to-scene"><inline classes="std std-ref">_setup_local_to_scene</inline></reference>。如果 <reference internal="True" refid="class-resource-property-resource-local-to-scene"><inline classes="std std-ref">resource_local_to_scene</inline></reference> 为 <literal>true</literal>，则场景实例中新复制的资源会自动从 <reference internal="True" refuri="class_packedscene#class-packedscene-method-instantiate"><inline classes="std std-ref">PackedScene.instantiate</inline></reference> 中调用该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resource-method-take-over-path"></target>
            <paragraph classes="classref-method" ids="class-resource-method-take-over-path" names="class_resource_method_take_over_path"><abbreviation explanation="无返回值。">void</abbreviation> <strong>take_over_path</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-resource-method-take-over-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refid="class-resource-property-resource-path"><inline classes="std std-ref">resource_path</inline></reference> 设置为 <literal>path</literal>，可能会覆盖这个路径对应的已有缓存条目。后续尝试通过路径加载覆盖后的资源时，会返回这个资源。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
