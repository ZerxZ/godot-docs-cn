<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_curve3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Curve3D.xml.</comment>
    <target refid="class-curve3d"></target>
    <section ids="curve3d class-curve3d" names="curve3d class_curve3d">
        <title>Curve3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>描述 3D 空间的贝兹尔曲线。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类描述了 3D 空间中的贝塞尔曲线。它主要用于给 <reference internal="True" refuri="class_path3d#class-path3d"><inline classes="std std-ref">Path3D</inline></reference> 提供一个形状，但也可以手动采样以用于其他目的。</paragraph>
            <paragraph>它保留沿曲线预先计算的点的缓存，以加速进一步的计算。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-property-bake-interval"><inline classes="std std-ref">bake_interval</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-property-point-count"><inline classes="std std-ref">point_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-property-up-vector-enabled"><inline classes="std std-ref">up_vector_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="245"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-add-point"><inline classes="std std-ref">add_point</inline></reference>(position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, in: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 0, 0), out: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 0, 0), index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-clear-points"><inline classes="std std-ref">clear_points</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-baked-length"><inline classes="std std-ref">get_baked_length</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-baked-points"><inline classes="std std-ref">get_baked_points</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-baked-tilts"><inline classes="std std-ref">get_baked_tilts</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-baked-up-vectors"><inline classes="std std-ref">get_baked_up_vectors</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-closest-offset"><inline classes="std std-ref">get_closest_offset</inline></reference>(to_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-closest-point"><inline classes="std std-ref">get_closest_point</inline></reference>(to_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-point-in"><inline classes="std std-ref">get_point_in</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-point-out"><inline classes="std std-ref">get_point_out</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-point-position"><inline classes="std std-ref">get_point_position</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-get-point-tilt"><inline classes="std std-ref">get_point_tilt</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-remove-point"><inline classes="std std-ref">remove_point</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-sample"><inline classes="std std-ref">sample</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-sample-baked"><inline classes="std std-ref">sample_baked</inline></reference>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, cubic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-sample-baked-up-vector"><inline classes="std std-ref">sample_baked_up_vector</inline></reference>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, apply_tilt: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-sample-baked-with-rotation"><inline classes="std std-ref">sample_baked_with_rotation</inline></reference>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, cubic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, apply_tilt: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-samplef"><inline classes="std std-ref">samplef</inline></reference>(fofs: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-set-point-in"><inline classes="std std-ref">set_point_in</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-set-point-out"><inline classes="std std-ref">set_point_out</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-set-point-position"><inline classes="std std-ref">set_point_position</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-set-point-tilt"><inline classes="std std-ref">set_point_tilt</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tilt: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-tessellate"><inline classes="std std-ref">tessellate</inline></reference>(max_stages: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 5, tolerance_degrees: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-curve3d-method-tessellate-even-length"><inline classes="std std-ref">tessellate_even_length</inline></reference>(max_stages: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 5, tolerance_length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.2) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-curve3d-property-bake-interval"></target>
            <paragraph classes="classref-property" ids="class-curve3d-property-bake-interval" names="class_curve3d_property_bake_interval"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>bake_interval</strong> = <literal>0.2</literal> <reference internal="True" refid="class-curve3d-property-bake-interval"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bake_interval</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_bake_interval</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相邻两个缓存点之间的距离，单位为米。改变它将迫使缓存在下次调用 <reference internal="True" refid="class-curve3d-method-get-baked-points"><inline classes="std std-ref">get_baked_points</inline></reference> 或 <reference internal="True" refid="class-curve3d-method-get-baked-length"><inline classes="std std-ref">get_baked_length</inline></reference> 函数时重新计算。距离越小，缓存中的点越多，占用的内存也越多，所以使用时要注意。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-property-point-count"></target>
            <paragraph classes="classref-property" ids="class-curve3d-property-point-count" names="class_curve3d_property_point_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>point_count</strong> = <literal>0</literal> <reference internal="True" refid="class-curve3d-property-point-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_count</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_point_count</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>描述该曲线的点的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-property-up-vector-enabled"></target>
            <paragraph classes="classref-property" ids="class-curve3d-property-up-vector-enabled" names="class_curve3d_property_up_vector_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>up_vector_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-curve3d-property-up-vector-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_up_vector_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_up_vector_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则曲线将烘焙用于定向的向量。当 <reference internal="True" refuri="class_pathfollow3d#class-pathfollow3d-property-rotation-mode"><inline classes="std std-ref">PathFollow3D.rotation_mode</inline></reference> 被设置为 <reference internal="True" refuri="class_pathfollow3d#class-pathfollow3d-constant-rotation-oriented"><inline classes="std std-ref">PathFollow3D.ROTATION_ORIENTED</inline></reference> 时使用。更改它会强制缓存被重新计算。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-curve3d-method-add-point"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-add-point" names="class_curve3d_method_add_point"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_point</strong>(position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, in: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 0, 0), out: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 0, 0), index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-curve3d-method-add-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个具有相对于曲线自身位置的指定 <literal>position</literal>，且带有控制点 <literal>in</literal> 和 <literal>out</literal> 的点。在点列表的末尾追加该新点。</paragraph>
            <paragraph>如果给定了 <literal>index</literal>，则将新点插入到由索引 <literal>index</literal> 标识的已有点之前。从 <literal>index</literal> 开始的每个已有点，都会在点列表中进一步向下移动。索引必须大于或等于 <literal>0</literal>，并且不得超过线段中已有点的数量。参见 <reference internal="True" refid="class-curve3d-property-point-count"><inline classes="std std-ref">point_count</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-clear-points"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-clear-points" names="class_curve3d_method_clear_points"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_points</strong>() <reference internal="True" refid="class-curve3d-method-clear-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从曲线中移除所有点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-baked-length"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-baked-length" names="class_curve3d_method_get_baked_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_baked_length</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-baked-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据缓存的点，返回曲线的总长度。给予足够的密度（见 <reference internal="True" refid="class-curve3d-property-bake-interval"><inline classes="std std-ref">bake_interval</inline></reference>），它应该是足够近似的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-baked-points"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-baked-points" names="class_curve3d_method_get_baked_points"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>get_baked_points</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-baked-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回缓存的点，类型为 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-baked-tilts"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-baked-tilts" names="class_curve3d_method_get_baked_tilts"><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>get_baked_tilts</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-baked-tilts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将倾斜缓存返回为一个 <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-baked-up-vectors"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-baked-up-vectors" names="class_curve3d_method_get_baked_up_vectors"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>get_baked_up_vectors</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-baked-up-vectors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将向上向量的缓存返回为一个 <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-curve3d-property-up-vector-enabled"><inline classes="std std-ref">up_vector_enabled</inline></reference> 为 <literal>false</literal>，则缓存将为空。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-closest-offset"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-closest-offset" names="class_curve3d_method_get_closest_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_closest_offset</strong>(to_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-closest-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回最接近 <literal>to_point</literal> 的偏移量。该偏移量被用于 <reference internal="True" refid="class-curve3d-method-sample-baked"><inline classes="std std-ref">sample_baked</inline></reference> 或 <reference internal="True" refid="class-curve3d-method-sample-baked-up-vector"><inline classes="std std-ref">sample_baked_up_vector</inline></reference>。</paragraph>
            <paragraph><literal>to_point</literal> 必须在该曲线的局部空间中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-closest-point"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-closest-point" names="class_curve3d_method_get_closest_point"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_closest_point</strong>(to_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-closest-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回已烘焙的线段上最接近 <literal>to_point</literal> 的点（在曲线的局部空间中）。</paragraph>
            <paragraph><literal>to_point</literal> 必须在该曲线的局部空间中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-point-in"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-point-in" names="class_curve3d_method_get_point_in"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_point_in</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-point-in"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指向顶点 <literal>idx</literal> 的控制点的位置。返回的位置是相对于顶点 <literal>idx</literal> 的。如果索引越界，则该函数将向控制台发送一个错误，并返回 <literal>(0, 0, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-point-out"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-point-out" names="class_curve3d_method_get_point_out"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_point_out</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-point-out"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回离向顶点 <literal>idx</literal> 的控制点的位置。返回的位置是相对于顶点 <literal>idx</literal> 的。如果索引越界，则该函数将向控制台发送一个错误，并返回 <literal>(0, 0, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-point-position"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-point-position" names="class_curve3d_method_get_point_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_point_position</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-point-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回顶点 <literal>idx</literal> 的位置。如果索引越界，则该函数将向控制台发送一个错误，并返回 <literal>(0, 0, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-get-point-tilt"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-get-point-tilt" names="class_curve3d_method_get_point_tilt"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_point_tilt</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-get-point-tilt"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回点 <literal>idx</literal> 的倾斜弧度角。如果索引越界，则该函数将向控制台发送一个错误，并返回 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-remove-point"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-remove-point" names="class_curve3d_method_remove_point"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_point</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-curve3d-method-remove-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从曲线上删除点 <literal>idx</literal>。如果 <literal>idx</literal> 越界，则会向控制台发送错误信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-sample"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-sample" names="class_curve3d_method_sample"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>sample</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-sample"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回顶点 <literal>idx</literal> 和顶点 <literal>idx + 1</literal> 之间的位置，其中 <literal>t</literal> 控制该点是否为第一个顶点（<literal>t = 0.0</literal>）、最后一个顶点（<literal>t = 1.0</literal>）或介于两者之间。超出范围（<literal>0.0 &gt;= t &lt;=1</literal>）的 <literal>t</literal> 的值会给出奇怪但可预测的结果。</paragraph>
            <paragraph>如果 <literal>idx</literal> 越界，它将被截断到第一个或最后一个顶点，而 <literal>t</literal> 将被忽略。如果曲线没有点，则该函数将向控制台发送一个错误，并返回 <literal>(0, 0, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-sample-baked"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-sample-baked" names="class_curve3d_method_sample_baked"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>sample_baked</strong>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, cubic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-sample-baked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回曲线内位于 <literal>offset</literal> 位置的一个点，其中 <literal>offset</literal> 为沿曲线的 3D 单位测量距离。为此，它会找到 <literal>offset</literal> 位于其间的两个缓存点，然后对值进行插值。如果 <literal>cubic</literal> 被设置为 <literal>true</literal>，则该插值是立方插值；如果被设置为 <literal>false</literal>，则该插值是线性插值。</paragraph>
            <paragraph>立方插值往往能更好地跟随曲线，但线性插值速度更快（而且通常足够精确）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-sample-baked-up-vector"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-sample-baked-up-vector" names="class_curve3d_method_sample_baked_up_vector"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>sample_baked_up_vector</strong>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, apply_tilt: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-sample-baked-up-vector"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回曲线内位于 <literal>offset</literal> 位置的向上向量，其中 <literal>offset</literal> 为沿曲线的 3D 单位测量距离。为此，它会找到 <literal>offset</literal> 位于其间的两个缓存向上向量，然后对值进行插值。如果 <literal>apply_tilt</literal> 为 <literal>true</literal>，则对插值后的向上向量应用插值后的倾斜。</paragraph>
            <paragraph>如果曲线没有向上向量，则该函数将向控制台发送一个错误，并返回 <literal>(0, 1, 0)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-sample-baked-with-rotation"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-sample-baked-with-rotation" names="class_curve3d_method_sample_baked_with_rotation"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>sample_baked_with_rotation</strong>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, cubic: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, apply_tilt: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-sample-baked-with-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>，其中 <literal>origin</literal> 作为点位置，<literal>basis.x</literal> 作为横向向量，<literal>basis.y</literal> 作为向上向量，<literal>basis.z</literal> 作为前向向量。当曲线长度为 0 时，将没有合理的方法来计算旋转，所有向量都会与全局空间轴对齐。另请参见 <reference internal="True" refid="class-curve3d-method-sample-baked"><inline classes="std std-ref">sample_baked</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-samplef"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-samplef" names="class_curve3d_method_samplef"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>samplef</strong>(fofs: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-samplef"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回顶点 <literal>fofs</literal> 的位置。该函数使用 <literal>fofs</literal> 的整数部分作为 <literal>idx</literal>，其小数部分作为 <literal>t</literal>，调用 <reference internal="True" refid="class-curve3d-method-sample"><inline classes="std std-ref">sample</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-set-point-in"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-set-point-in" names="class_curve3d_method_set_point_in"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_in</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-curve3d-method-set-point-in"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置通往顶点 <literal>idx</literal> 的控制点位置。如果索引超出范围，函数会向控制台发送错误信息。位置相对于顶点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-set-point-out"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-set-point-out" names="class_curve3d_method_set_point_out"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_out</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-curve3d-method-set-point-out"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置从顶点 <literal>idx</literal> 引出的控制点位置。如果索引超出范围，函数会向控制台发送错误信息。位置相对于顶点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-set-point-position"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-set-point-position" names="class_curve3d_method_set_point_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_position</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-curve3d-method-set-point-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置顶点 <literal>idx</literal> 的位置。如果索引超出范围，函数会向控制台发送错误信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-set-point-tilt"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-set-point-tilt" names="class_curve3d_method_set_point_tilt"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_tilt</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tilt: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-curve3d-method-set-point-tilt"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以弧度为单位，设置点 <literal>idx</literal> 的倾斜角度。如果索引超出范围，则该函数将向控制台发送一个错误。</paragraph>
            <paragraph>倾斜控制对象沿着路径行进时，沿着观察轴的旋转。在曲线控制 <reference internal="True" refuri="class_pathfollow3d#class-pathfollow3d"><inline classes="std std-ref">PathFollow3D</inline></reference> 的情况下，该倾斜是 <reference internal="True" refuri="class_pathfollow3d#class-pathfollow3d"><inline classes="std std-ref">PathFollow3D</inline></reference> 计算的自然倾斜的偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-tessellate"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-tessellate" names="class_curve3d_method_tessellate"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>tessellate</strong>(max_stages: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 5, tolerance_degrees: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-tessellate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回沿曲线的点的列表，点的密度由曲率控制。也就是说，弯曲的部分比直的部分有更多的点。</paragraph>
            <paragraph>这种近似会在每个点之间制作直段，然后将这些直段细分，直到得到的形状足够相似。</paragraph>
            <paragraph><literal>max_stages</literal> 控制曲线段在被认为足够近似之前可能会面临多少次细分。每次细分会将曲线段分成两半，因此默认的 5 个阶段可能意味着每个曲线段最多得到 32 个细分。请谨慎增加！</paragraph>
            <paragraph><literal>tolerance_degrees</literal> 控制曲线段在其中点偏离真实曲线的多少度会被细分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-curve3d-method-tessellate-even-length"></target>
            <paragraph classes="classref-method" ids="class-curve3d-method-tessellate-even-length" names="class_curve3d_method_tessellate_even_length"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>tessellate_even_length</strong>(max_stages: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 5, tolerance_length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.2) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-curve3d-method-tessellate-even-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回沿曲线的点列表，具有几乎均匀的密度。<literal>max_stages</literal> 控制曲线段在被认为足够近似之前可能面临多少次细分。每次细分将段分成两半，因此默认的 5 个阶段可能意味着每个曲线段最多 32 个细分。请谨慎增加！</paragraph>
            <paragraph><literal>tolerance_length</literal> 控制在必须细分线段之前两个相邻点之间的最大距离。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
