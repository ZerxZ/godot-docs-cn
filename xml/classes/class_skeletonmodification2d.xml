<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_skeletonmodification2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/SkeletonModification2D.xml.</comment>
    <target refid="class-skeletonmodification2d"></target>
    <section ids="skeletonmodification2d class-skeletonmodification2d" names="skeletonmodification2d class_skeletonmodification2d">
        <title>SkeletonModification2D</title>
        <paragraph><strong>实验性：</strong> This class may be changed or removed in future versions.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_skeletonmodification2dccdik#class-skeletonmodification2dccdik"><inline classes="std std-ref">SkeletonModification2DCCDIK</inline></reference>, <reference internal="True" refuri="class_skeletonmodification2dfabrik#class-skeletonmodification2dfabrik"><inline classes="std std-ref">SkeletonModification2DFABRIK</inline></reference>, <reference internal="True" refuri="class_skeletonmodification2djiggle#class-skeletonmodification2djiggle"><inline classes="std std-ref">SkeletonModification2DJiggle</inline></reference>, <reference internal="True" refuri="class_skeletonmodification2dlookat#class-skeletonmodification2dlookat"><inline classes="std std-ref">SkeletonModification2DLookAt</inline></reference>, <reference internal="True" refuri="class_skeletonmodification2dphysicalbones#class-skeletonmodification2dphysicalbones"><inline classes="std std-ref">SkeletonModification2DPhysicalBones</inline></reference>, <reference internal="True" refuri="class_skeletonmodification2dstackholder#class-skeletonmodification2dstackholder"><inline classes="std std-ref">SkeletonModification2DStackHolder</inline></reference>, <reference internal="True" refuri="class_skeletonmodification2dtwoboneik#class-skeletonmodification2dtwoboneik"><inline classes="std std-ref">SkeletonModification2DTwoBoneIK</inline></reference></paragraph>
        <paragraph>对 <reference internal="True" refuri="class_skeleton2d#class-skeleton2d"><inline classes="std std-ref">Skeleton2D</inline></reference> 中的 <reference internal="True" refuri="class_bone2d#class-bone2d"><inline classes="std std-ref">Bone2D</inline></reference> 进行操作的资源的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该资源提供了一个可以扩展的接口，因此在 <reference internal="True" refuri="class_skeleton2d#class-skeleton2d"><inline classes="std std-ref">Skeleton2D</inline></reference> 中的 <reference internal="True" refuri="class_bone2d#class-bone2d"><inline classes="std std-ref">Bone2D</inline></reference> 节点上运行的代码可以被混合并匹配在一起，以创建复杂的交互。</paragraph>
            <paragraph>这用于为 Godot 提供一套灵活而强大的反向运动学解决方案，该解决方案可以适用许多不同的用途。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="77"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-property-enabled"><inline classes="std std-ref">enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-property-execution-mode"><inline classes="std std-ref">execution_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="71"></colspec>
                    <colspec colwidth="210"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-private-method-draw-editor-gizmo"><inline classes="std std-ref">_draw_editor_gizmo</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-private-method-execute"><inline classes="std std-ref">_execute</inline></reference>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-private-method-setup-modification"><inline classes="std std-ref">_setup_modification</inline></reference>(modification_stack: <reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-method-clamp-angle"><inline classes="std std-ref">clamp_angle</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, invert: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-method-get-editor-draw-gizmo"><inline classes="std std-ref">get_editor_draw_gizmo</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-method-get-is-setup"><inline classes="std std-ref">get_is_setup</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-method-get-modification-stack"><inline classes="std std-ref">get_modification_stack</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-method-set-editor-draw-gizmo"><inline classes="std std-ref">set_editor_draw_gizmo</inline></reference>(draw_gizmo: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-skeletonmodification2d-method-set-is-setup"><inline classes="std std-ref">set_is_setup</inline></reference>(is_setup: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-skeletonmodification2d-property-enabled"></target>
            <paragraph classes="classref-property" ids="class-skeletonmodification2d-property-enabled" names="class_skeletonmodification2d_property_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-skeletonmodification2d-property-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该修改器的 <reference internal="True" refid="class-skeletonmodification2d-private-method-execute"><inline classes="std std-ref">_execute</inline></reference> 函数将被该 <reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference> 调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-property-execution-mode"></target>
            <paragraph classes="classref-property" ids="class-skeletonmodification2d-property-execution-mode" names="class_skeletonmodification2d_property_execution_mode"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>execution_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-skeletonmodification2d-property-execution-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_execution_mode</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_execution_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>修改器的执行模式。会告诉修改器栈何时执行该修改器。某修修改器存在只能在特定执行模式下可用的设置。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-skeletonmodification2d-private-method-draw-editor-gizmo"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-private-method-draw-editor-gizmo" names="class_skeletonmodification2d_private_method__draw_editor_gizmo"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw_editor_gizmo</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-skeletonmodification2d-private-method-draw-editor-gizmo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于绘制<strong>编辑器专用</strong>的修改器小工具。此函数只会在 Godot 编辑器中调用，并且可以被覆盖，来绘制自定义小工具。</paragraph>
            <paragraph><strong>注意：</strong>你需要使用来自 <reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d-method-get-skeleton"><inline classes="std std-ref">SkeletonModificationStack2D.get_skeleton</inline></reference> 的 Skeleton2D 及其绘制函数，因为 <strong>SkeletonModification2D</strong> 资源本身无法进行绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-private-method-execute"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-private-method-execute" names="class_skeletonmodification2d_private_method__execute"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_execute</strong>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-skeletonmodification2d-private-method-execute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>执行给定的修改器。修改器在此时执行应执行的函数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-private-method-setup-modification"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-private-method-setup-modification" names="class_skeletonmodification2d_private_method__setup_modification"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_setup_modification</strong>(modification_stack: <reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-skeletonmodification2d-private-method-setup-modification"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>安装修改器时调用。修改器在此时执行初始化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-method-clamp-angle"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-method-clamp-angle" names="class_skeletonmodification2d_method_clamp_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>clamp_angle</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, invert: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-skeletonmodification2d-method-clamp-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>接受角度并将其钳制在传入的 <literal>min</literal> 和 <literal>max</literal> 范围内。<literal>invert</literal> 会逆向钳制该角度，将其钳制在给定范围之外。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-method-get-editor-draw-gizmo"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-method-get-editor-draw-gizmo" names="class_skeletonmodification2d_method_get_editor_draw_gizmo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_editor_draw_gizmo</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-skeletonmodification2d-method-get-editor-draw-gizmo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个修改器是否会在 Godot 编辑器中调用 <reference internal="True" refid="class-skeletonmodification2d-private-method-draw-editor-gizmo"><inline classes="std std-ref">_draw_editor_gizmo</inline></reference> 绘制针对修改器的小工具。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-method-get-is-setup"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-method-get-is-setup" names="class_skeletonmodification2d_method_get_is_setup"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_is_setup</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-skeletonmodification2d-method-get-is-setup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此修改器是否已被成功安装。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-method-get-modification-stack"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-method-get-modification-stack" names="class_skeletonmodification2d_method_get_modification_stack"><reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference> <strong>get_modification_stack</strong>() <reference internal="True" refid="class-skeletonmodification2d-method-get-modification-stack"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该修改器绑定的 <reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference>。你可以通过这个修改器栈来访问修改器所操作的 Skeleton2D。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-method-set-editor-draw-gizmo"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-method-set-editor-draw-gizmo" names="class_skeletonmodification2d_method_set_editor_draw_gizmo"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_editor_draw_gizmo</strong>(draw_gizmo: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-skeletonmodification2d-method-set-editor-draw-gizmo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置这个修改器是否会在 Godot 编辑器中调用 <reference internal="True" refid="class-skeletonmodification2d-private-method-draw-editor-gizmo"><inline classes="std std-ref">_draw_editor_gizmo</inline></reference> 绘制针对修改器的小工具。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-skeletonmodification2d-method-set-is-setup"></target>
            <paragraph classes="classref-method" ids="class-skeletonmodification2d-method-set-is-setup" names="class_skeletonmodification2d_method_set_is_setup"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_is_setup</strong>(is_setup: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-skeletonmodification2d-method-set-is-setup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>允许你手动设置该修改器的安装状态。这个函数应很少使用，因为该修改器所绑定的 <reference internal="True" refuri="class_skeletonmodificationstack2d#class-skeletonmodificationstack2d"><inline classes="std std-ref">SkeletonModificationStack2D</inline></reference> 应该对该修改器进行安装。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
