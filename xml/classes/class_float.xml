<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_float.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/float.xml.</comment>
    <target refid="class-float"></target>
    <section ids="float class-float" names="float class_float">
        <title>float</title>
        <paragraph>浮点数内置类型。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>float</strong> 内置类型是 64 位双精度浮点数，相当于 C++ 中的 <literal>double</literal>。这个类型有 14 个可靠的十进制小数位精度。<strong>float</strong> 的最大值约为 <literal>1.79769e308</literal>，最小值约为 <literal>-1.79769e308</literal>。</paragraph>
            <paragraph>不过引擎中的许多方法和属性默认使用的都是 32 位单精度浮点数，相当于 C++ 中的 <literal>float</literal>，有 6 位可靠的十进制小数位精度。Godot 在 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 和 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 等数据结构中默认使用 32 位浮点数，但如果 Godot 编译时使用了 <literal>precision=double</literal> 选项，就会改为 64 位的 double。</paragraph>
            <paragraph>使用 <strong>float</strong> 类型进行的数学运算无法保证精确与稳定，经常会产生较小的误差。你通常应该使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-zero-approx"><inline classes="std std-ref">@GlobalScope.is_zero_approx</inline></reference> 方法来比较 <strong>float</strong> 值是否相等，不应该用 <literal>==</literal>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="维基百科：双精度浮点数格式" refuri="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">维基百科：双精度浮点数格式</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="维基百科：单精度浮点数格式" refuri="https://en.wikipedia.org/wiki/Single-precision_floating-point_format">维基百科：单精度浮点数格式</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="90"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-constructor-float"><inline classes="std std-ref">float</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-constructor-float"><inline classes="std std-ref">float</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-constructor-float"><inline classes="std std-ref">float</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-constructor-float"><inline classes="std std-ref">float</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-constructor-float"><inline classes="std std-ref">float</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="110"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-neq-float"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-neq-int"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-color"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-quaternion"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-vector2"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-vector2i"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-vector3"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-vector3i"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-vector4"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-vector4i"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-pow-float"><inline classes="std std-ref">operator **</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-pow-int"><inline classes="std std-ref">operator **</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-sum-float"><inline classes="std std-ref">operator +</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-sum-int"><inline classes="std std-ref">operator +</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-dif-float"><inline classes="std std-ref">operator -</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-dif-int"><inline classes="std std-ref">operator -</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-div-float"><inline classes="std std-ref">operator /</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-div-int"><inline classes="std std-ref">operator /</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-lt-float"><inline classes="std std-ref">operator &lt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-lt-int"><inline classes="std std-ref">operator &lt;</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-lte-float"><inline classes="std std-ref">operator &lt;=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-lte-int"><inline classes="std std-ref">operator &lt;=</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-eq-float"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-eq-int"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-gt-float"><inline classes="std std-ref">operator &gt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-gt-int"><inline classes="std std-ref">operator &gt;</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-gte-float"><inline classes="std std-ref">operator &gt;=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-gte-int"><inline classes="std std-ref">operator &gt;=</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-unplus"><inline classes="std std-ref">operator unary+</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-float-operator-unminus"><inline classes="std std-ref">operator unary-</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-float-constructor-float"></target>
            <paragraph classes="classref-constructor" ids="class-float-constructor-float" names="class_float_constructor_float"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>float</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造默认初始化的 <strong>float</strong>，会被设为 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>float</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>float</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>float</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 转换为 <strong>float</strong>，遵循与 <reference internal="True" refuri="class_string#class-string-method-to-float"><inline classes="std std-ref">String.to_float</inline></reference> 相同的规则。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>float</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> 值转换为浮点值，<literal>float(true)</literal> 将等于 1.0，<literal>float(false)</literal> 将等于 0.0。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>float</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值转换为浮点值，<literal>float(1)</literal> 将等于 <literal>1.0</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-float-operator-neq-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-neq-float" names="class_float_operator_neq_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个浮点数彼此不同，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-neq-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-neq-int" names="class_float_operator_neq_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果整数的值与浮点数不同，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-color"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-color" names="class_float_operator_mul_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的每个分量乘以给定的 <strong>float</strong>，包括 Alpha。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(1.5 * Color(0.5, 0.5, 0.5)) # 输出“(0.75, 0.75, 0.75, 1.5)”</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-quaternion" names="class_float_operator_mul_quaternion"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> 的每个分量乘以给定的 <strong>float</strong>。此操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-vector2"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-vector2" names="class_float_operator_mul_vector2"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 的每个分量乘以给定的 <strong>float</strong>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(2.5 * Vector2(1, 3)) # 输出 "(2.5, 7.5)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-vector2i"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-vector2i" names="class_float_operator_mul_vector2i"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 的每个分量乘以给定的 <strong>float</strong>。返回的是 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0.9 * Vector2i(10, 15)) # 输出 "(9, 13.5)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-vector3"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-vector3" names="class_float_operator_mul_vector3"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 的每个分量乘以给定的 <strong>float</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-vector3i"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-vector3i" names="class_float_operator_mul_vector3i"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> 的每个分量乘以给定的 <strong>float</strong>。返回的是 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0.9 * Vector3i(10, 15, 20)) # 输出 "(9, 13.5, 18)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-vector4"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-vector4" names="class_float_operator_mul_vector4"><reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> 的每个分量乘以给定的 <strong>float</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-vector4i"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-vector4i" names="class_float_operator_mul_vector4i"><reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> 的每个分量乘以给定的 <strong>float</strong>。返回的是 <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0.9 * Vector4i(10, 15, 20, -10))# 输出 "(9, 13.5, 18, -9)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-float" names="class_float_operator_mul_float"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将两个 <strong>float</strong> 相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-mul-int" names="class_float_operator_mul_int"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <strong>float</strong> 和 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 相乘。结果是 <strong>float</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-pow-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-pow-float" names="class_float_operator_pow_float"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator **</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <strong>float</strong> 提升到 <strong>float</strong> 次幂。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(39.0625**0.25) # 2.5</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-pow-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-pow-int" names="class_float_operator_pow_int"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator **</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <strong>float</strong> 提升到 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 次幂。结果为 <strong>float</strong>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0.9**3) # 0.729</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-sum-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-sum-float" names="class_float_operator_sum_float"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator +</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将两个浮点数相加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-sum-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-sum-int" names="class_float_operator_sum_int"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator +</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <strong>float</strong> 加上 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。结果为 <strong>float</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-dif-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-dif-float" names="class_float_operator_dif_float"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator -</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将一个浮点数减去另一个浮点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-dif-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-dif-int" names="class_float_operator_dif_int"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator -</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <strong>float</strong> 减去 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。结果为 <strong>float</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-div-float" names="class_float_operator_div_float"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator /</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将两个浮点数相除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-div-int" names="class_float_operator_div_int"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator /</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <strong>float</strong> 除以 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。结果是 <strong>float</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-lt-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-lt-float" names="class_float_operator_lt_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的浮点数小于右侧的，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-lt-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-lt-int" names="class_float_operator_lt_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>float</strong> 小于给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-lte-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-lte-float" names="class_float_operator_lte_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;=</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的浮点数小于等于右侧的，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-lte-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-lte-int" names="class_float_operator_lte_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;=</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>float</strong> 小于等于给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-eq-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-eq-float" names="class_float_operator_eq_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个浮点数完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点精度误差，考虑改用更可靠的 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference> 或 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-zero-approx"><inline classes="std std-ref">@GlobalScope.is_zero_approx</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-eq-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-eq-int" names="class_float_operator_eq_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>float</strong> 等于给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-gt-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-gt-float" names="class_float_operator_gt_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的浮点数大于右侧的，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-gt-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-gt-int" names="class_float_operator_gt_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>float</strong> 大于给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-gte-float"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-gte-float" names="class_float_operator_gte_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;=</strong> <strong>(</strong> <reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的浮点数大于等于右侧的，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-gte-int"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-gte-int" names="class_float_operator_gte_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;=</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>float</strong> 大于等于给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-unplus"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-unplus" names="class_float_operator_unplus"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator unary+</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回与 <literal>+</literal> 不存在时相同的值。单目 <literal>+</literal> 没有作用，但有时可以使你的代码更具可读性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-float-operator-unminus"></target>
            <paragraph classes="classref-operator" ids="class-float-operator-unminus" names="class_float_operator_unminus"><reference internal="True" refid="class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator unary-</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回该 <strong>float</strong> 的相反数。如果为正数，则将该数变为负数。如果为负数，则将该数变为正数。对于浮点数，数字零既可以是正数，也可以是负数。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
