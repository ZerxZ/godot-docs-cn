<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_quaternion.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Quaternion.xml.</comment>
    <target refid="class-quaternion"></target>
    <section ids="quaternion class-quaternion" names="quaternion class_quaternion">
        <title>Quaternion</title>
        <paragraph>代表 3D 旋转的单位四元数。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>四元数与 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 类似，实现的是旋转的矩阵表示。但 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 存储了旋转、缩放、切变，四元数只存储旋转。</paragraph>
            <paragraph>四元数的参数可以使用轴角对来指定，也可以通过欧拉角来指定。由于四元数的紧凑性以及在内存中的存储方式，部分运算（尤其是获取轴角和执行 SLERP）在防止浮点数误差方面更加高效稳健。</paragraph>
            <paragraph><strong>注意：</strong>四元数需要先归一化，才能用于旋转。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="使用 3D 变换" refuri="../tutorials/3d/using_transforms.html#interpolating-with-quaternions">使用 3D 变换</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击演示" refuri="https://godotengine.org/asset-library/asset/678">第三人称射击演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-w"><inline classes="std std-ref">w</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-x"><inline classes="std std-ref">x</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-y"><inline classes="std std-ref">y</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-z"><inline classes="std std-ref">z</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="187"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> arc_from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> arc_to <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> axis, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> angle <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> x, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> y, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> z, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> w <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="386"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-angle-to"><inline classes="std std-ref">angle_to</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-dot"><inline classes="std std-ref">dot</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-exp"><inline classes="std std-ref">exp</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-from-euler"><inline classes="std std-ref">from_euler</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> euler <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-get-angle"><inline classes="std std-ref">get_angle</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-get-axis"><inline classes="std std-ref">get_axis</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-get-euler"><inline classes="std std-ref">get_euler</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> order=2 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-inverse"><inline classes="std std-ref">inverse</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-is-normalized"><inline classes="std std-ref">is_normalized</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-length"><inline classes="std std-ref">length</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-length-squared"><inline classes="std std-ref">length_squared</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-log"><inline classes="std std-ref">log</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-normalized"><inline classes="std std-ref">normalized</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-slerp"><inline classes="std std-ref">slerp</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-slerpni"><inline classes="std std-ref">slerpni</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate"><inline classes="std std-ref">spherical_cubic_interpolate</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> b, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> pre_a, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> post_b, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate-in-time"><inline classes="std std-ref">spherical_cubic_interpolate_in_time</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> b, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> pre_a, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> post_b, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> b_t, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> pre_a_t, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> post_b_t <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="116"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-neq-quaternion"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-quaternion"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-vector3"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-sum-quaternion"><inline classes="std std-ref">operator +</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-dif-quaternion"><inline classes="std std-ref">operator -</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-div-float"><inline classes="std std-ref">operator /</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-div-int"><inline classes="std std-ref">operator /</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-eq-quaternion"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-unplus"><inline classes="std std-ref">operator unary+</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-unminus"><inline classes="std std-ref">operator unary-</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-quaternion-constant-identity"></target>
            <paragraph classes="classref-constant" ids="class-quaternion-constant-identity" names="class_quaternion_constant_identity"><strong>IDENTITY</strong> = <literal>Quaternion(0, 0, 0, 1)</literal></paragraph>
            <paragraph>单位四元数，代表无旋转。相当于单位 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 矩阵。如果一个向量被一个单位四元数变换，它不会改变。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-quaternion-property-w"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-w" names="class_quaternion_property_w"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>w</strong> = <literal>1.0</literal></paragraph>
            <paragraph>四元数的W分量（实数部分）。</paragraph>
            <paragraph>四元数分量通常不应该被直接操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-property-x"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-x" names="class_quaternion_property_x"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>x</strong> = <literal>0.0</literal></paragraph>
            <paragraph>四元数的X分量（虚轴<literal>i</literal>部分）。</paragraph>
            <paragraph>四元数分量通常不应直接操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-property-y"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-y" names="class_quaternion_property_y"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>y</strong> = <literal>0.0</literal></paragraph>
            <paragraph>四元数的Y分量（虚轴<literal>j</literal>部分）。</paragraph>
            <paragraph>四元数分量通常不应直接操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-property-z"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-z" names="class_quaternion_property_z"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>z</strong> = <literal>0.0</literal></paragraph>
            <paragraph>四元数的Z分量（虚轴<literal>k</literal>部分）。</paragraph>
            <paragraph>四元数分量通常不应该被直接操作。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-quaternion-constructor-quaternion"></target>
            <paragraph classes="classref-constructor" ids="class-quaternion-constructor-quaternion" names="class_quaternion_constructor_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造默认初始化的四元数，所有分量都被设置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>Quaternion</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> arc_from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> arc_to <strong>)</strong></paragraph>
            <paragraph>构造一个四元数，代表半径为 <literal>1.0</literal> 的球面上两个点之间最短的弧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> axis, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> angle <strong>)</strong></paragraph>
            <paragraph>构造一个四元数，它将围绕给定的轴旋转指定的角度。轴必须是一个归一化的向量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong> <strong>(</strong> <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>从给定的 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 构造一个四元数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> x, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> y, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> z, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> w <strong>)</strong></paragraph>
            <paragraph>构建一个由给定值定义的四元数。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="方法说明">
            <title>方法说明</title>
            <target refid="class-quaternion-method-angle-to"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-angle-to" names="class_quaternion_method_angle_to"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angle_to</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回这个四元数与 <literal>to</literal> 之间的角度。这是从一个旋转到另一个旋转所需的角度大小。</paragraph>
            <paragraph><strong>注意：</strong>该方法的浮点数误差异常地高，因此 <literal>is_zero_approx</literal> 等方法的结果不可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-dot"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-dot" names="class_quaternion_method_dot"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>dot</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回两个四元数的点积。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-exp"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-exp" names="class_quaternion_method_exp"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>exp</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该四元数的指数。该结果的旋转轴是该四元数的归一化旋转轴，该结果的角度是该四元数的向量部分的长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-from-euler"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-from-euler" names="class_quaternion_method_from_euler"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>from_euler</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> euler <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
            <paragraph>按 YXZ 旋转顺序从欧拉角构造一个四元数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-get-angle"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-get-angle" names="class_quaternion_method_get_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_angle</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该四元数表示的旋转角度。</paragraph>
            <paragraph><strong>注意：</strong>该四元数必须被归一化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-get-axis"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-get-axis" names="class_quaternion_method_get_axis"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_axis</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该四元数表示的旋转的旋转轴。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-get-euler"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-get-euler" names="class_quaternion_method_get_euler"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_euler</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> order=2 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>以欧拉角的形式返回该四元数的旋转。欧拉顺序取决于 <literal>order</literal> 参数，例如使用 YXZ 顺序：这个方法按照 Z、X、Y 的顺序分解。可能的取值见 <reference internal="True" refuri="class_@globalscope#enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> 枚举。返回向量的格式为 (X 角, Y 角, Z 角)。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-inverse"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-inverse" names="class_quaternion_method_inverse"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>inverse</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回四元数的取逆。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-is-equal-approx" names="class_quaternion_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该四元数和 <literal>to</literal> 近似相等，则返回 <literal>true</literal>，判断方法是通过在每个分量上运行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-is-finite" names="class_quaternion_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该四元数是有限的，则返回 <literal>true</literal>，判断方法是在每个分量上调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-finite"><inline classes="std std-ref">@GlobalScope.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-is-normalized"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-is-normalized" names="class_quaternion_method_is_normalized"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_normalized</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回四元数是否被归一化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-length"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-length" names="class_quaternion_method_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回四元数的长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-length-squared"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-length-squared" names="class_quaternion_method_length_squared"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length_squared</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回四元数的长度的平方。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-log"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-log" names="class_quaternion_method_log"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>log</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该四元数的对数。该结果的向量部分是该四元数的旋转轴乘以其旋转角度，该结果的实部为零。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-normalized"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-normalized" names="class_quaternion_method_normalized"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>normalized</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回四元数的副本，归一化为单位长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-slerp"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-slerp" names="class_quaternion_method_slerp"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>slerp</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该四元数与 <literal>to</literal> 之间的球面线性插值 <literal>weight</literal> 的结果。</paragraph>
            <paragraph><strong>注意：</strong>两个四元数都必须被归一化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-slerpni"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-slerpni" names="class_quaternion_method_slerpni"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>slerpni</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> to, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在这个四元数和 <literal>to</literal> 之间按照 <literal>weight</literal> 进行球面线性插值的结果，不会检查旋转路径是否大于 90 度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-spherical-cubic-interpolate"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-spherical-cubic-interpolate" names="class_quaternion_method_spherical_cubic_interpolate"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>spherical_cubic_interpolate</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> b, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> pre_a, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> post_b, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>在四元数 <literal>pre_a</literal>、这个向量、<literal>b</literal> 以及 <literal>post_b</literal> 之间按照给定的 <literal>weight</literal> 进行球面三次插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-spherical-cubic-interpolate-in-time"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-spherical-cubic-interpolate-in-time" names="class_quaternion_method_spherical_cubic_interpolate_in_time"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>spherical_cubic_interpolate_in_time</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> b, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> pre_a, <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> post_b, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> weight, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> b_t, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> pre_a_t, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> post_b_t <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>在四元数 <literal>pre_a</literal>、该向量、<literal>b</literal> 和 <literal>post_b</literal> 之间，按给定量 <literal>weight</literal> 执行三次球面插值。</paragraph>
            <paragraph>它可以根据时间值执行比 <reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate"><inline classes="std std-ref">spherical_cubic_interpolate</inline></reference> 更平滑的插值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id11" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-quaternion-operator-neq-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-neq-quaternion" names="class_quaternion_operator_neq_quaternion"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果四元数不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-quaternion-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-quaternion" names="class_quaternion_operator_mul_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>通过将这两个四元数相乘，来合成这两个四元数。效果是将第二个四元数（子）按照第一个四元数（父）进行旋转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-vector3"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-vector3" names="class_quaternion_operator_mul_vector3"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>使用给定的 <strong>Quaternion</strong> 旋转 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-float" names="class_quaternion_operator_mul_float"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量乘以给定的值。此操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-int" names="class_quaternion_operator_mul_int"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量乘以给定的值。此操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-sum-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-sum-quaternion" names="class_quaternion_operator_sum_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator +</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将左侧 <strong>Quaternion</strong> 的每个分量与右侧的 <strong>Quaternion</strong> 相加。这个运算本身没有意义，但可以用作更大表达式的一部分，例如求两个相近旋转的中间近似值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-dif-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-dif-quaternion" names="class_quaternion_operator_dif_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator -</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将左侧 <strong>Quaternion</strong> 的每个分量与右侧的 <strong>Quaternion</strong> 相减。这个运算本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-div-float" names="class_quaternion_operator_div_float"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator /</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量除以给定的值。此操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-div-int" names="class_quaternion_operator_div_int"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator /</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量除以给定的值。此操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-eq-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-eq-quaternion" names="class_quaternion_operator_eq_quaternion"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果四元数完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-quaternion-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-idx-int" names="class_quaternion_operator_idx_int"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator []</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
            <paragraph>使用索引访问四元数的分量。<literal>q[0]</literal> 等价于 <literal>q.x</literal>、<literal>q[1]</literal> 等价于 <literal>q.y</literal>、<literal>q[2]</literal> 等价于 <literal>q.z</literal>、<literal>q[3]</literal> 等价于<literal>q.w</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-unplus"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-unplus" names="class_quaternion_operator_unplus"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator unary+</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回与 <literal>+</literal> 不存在时相同的值。单目 <literal>+</literal> 没有作用，但有时可以使你的代码更具可读性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-unminus"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-unminus" names="class_quaternion_operator_unminus"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator unary-</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回该 <strong>Quaternion</strong> 的负值。和写 <literal>Quaternion(-q.x, -q.y, -q.z, -q.w)</literal> 相同。这个操作得到的是代表相同旋转的四元数。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
