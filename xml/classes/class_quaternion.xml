<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_quaternion.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Quaternion.xml.</comment>
    <target refid="class-quaternion"></target>
    <section ids="quaternion class-quaternion" names="quaternion class_quaternion">
        <title>Quaternion</title>
        <paragraph>代表 3D 旋转的单位四元数。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Quaternion</strong> 即四元数，是一种内置的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型，这种 4D 数据结构使用<reference name="哈密顿四元数" refuri="https://zh.wikipedia.org/zh-cn/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E6%97%8B%E8%BD%AC">哈密顿四元数</reference>来代表旋转。<reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 类型能够同时存储旋转和缩放，而四元数<emphasis>只能</emphasis>存储旋转。</paragraph>
            <paragraph><strong>Quaternion</strong> 由 4 个浮点分量组成：<reference internal="True" refid="class-quaternion-property-w"><inline classes="std std-ref">w</inline></reference>、<reference internal="True" refid="class-quaternion-property-x"><inline classes="std std-ref">x</inline></reference>、<reference internal="True" refid="class-quaternion-property-y"><inline classes="std std-ref">y</inline></reference>、<reference internal="True" refid="class-quaternion-property-z"><inline classes="std std-ref">z</inline></reference>。这些分量在内存中非常紧凑，因此部分运算更加高效、造成的浮点数误差也更低。<reference internal="True" refid="class-quaternion-method-get-angle"><inline classes="std std-ref">get_angle</inline></reference>、<reference internal="True" refid="class-quaternion-method-get-axis"><inline classes="std std-ref">get_axis</inline></reference>、<reference internal="True" refid="class-quaternion-method-slerp"><inline classes="std std-ref">slerp</inline></reference> 等方法与 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 中的版本相比也更快。</paragraph>
            <paragraph>四元数的入门知识请观看 <reference name="3Blue1Brown 的这个视频" refuri="https://www.bilibili.com/video/BV1SW411y7W1/">3Blue1Brown 的这个视频</reference>。四元数背后的数学原理并不需要理解，因为 Godot 提供了一些辅助方法能够帮你处理相关的情况。其中包含 <reference internal="True" refid="class-quaternion-method-slerp"><inline classes="std std-ref">slerp</inline></reference>、<reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate"><inline classes="std std-ref">spherical_cubic_interpolate</inline></reference> 以及 <literal>*</literal> 运算符。</paragraph>
            <paragraph><strong>注意：</strong>用于旋转前，必须将四元数归一化（见 <reference internal="True" refid="class-quaternion-method-normalized"><inline classes="std std-ref">normalized</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 和 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 类似，四元数的分量默认使用的是 32 位精度，而 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 则是 64 位。如果需要双精度，请使用 <literal>precision=double</literal> 选项编译引擎。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="3Blue1Brown 关于四元数的视频" refuri="https://www.youtube.com/watch?v=d4EgbgTm0Bg">3Blue1Brown 关于四元数的视频</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="在线四元数可视化" refuri="https://quaternions.online/">在线四元数可视化</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="使用 3D 变换" refuri="../tutorials/3d/using_transforms.html#interpolating-with-quaternions">使用 3D 变换</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="高级四元数可视化" refuri="https://iwatake2222.github.io/rotation_master/rotation_master.html">高级四元数可视化</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-w"><inline classes="std std-ref">w</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-x"><inline classes="std std-ref">x</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-y"><inline classes="std std-ref">y</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-property-z"><inline classes="std std-ref">z</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="190"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>(from: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>(arc_from: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, arc_to: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>(from: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, w: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="395"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-angle-to"><inline classes="std std-ref">angle_to</inline></reference>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-dot"><inline classes="std std-ref">dot</inline></reference>(with: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-exp"><inline classes="std std-ref">exp</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-from-euler"><inline classes="std std-ref">from_euler</inline></reference>(euler: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-get-angle"><inline classes="std std-ref">get_angle</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-get-axis"><inline classes="std std-ref">get_axis</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-get-euler"><inline classes="std std-ref">get_euler</inline></reference>(order: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-inverse"><inline classes="std std-ref">inverse</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-is-normalized"><inline classes="std std-ref">is_normalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-length"><inline classes="std std-ref">length</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-length-squared"><inline classes="std std-ref">length_squared</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-log"><inline classes="std std-ref">log</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-normalized"><inline classes="std std-ref">normalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-slerp"><inline classes="std std-ref">slerp</inline></reference>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-slerpni"><inline classes="std std-ref">slerpni</inline></reference>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate"><inline classes="std std-ref">spherical_cubic_interpolate</inline></reference>(b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, pre_a: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, post_b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate-in-time"><inline classes="std std-ref">spherical_cubic_interpolate_in_time</inline></reference>(b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, pre_a: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, post_b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_a_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="113"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-neq-quaternion"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-quaternion"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-vector3"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-sum-quaternion"><inline classes="std std-ref">operator +</inline></reference>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-dif-quaternion"><inline classes="std std-ref">operator -</inline></reference>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-div-float"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-div-int"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-eq-quaternion"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-unplus"><inline classes="std std-ref">operator unary+</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-quaternion-operator-unminus"><inline classes="std std-ref">operator unary-</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-quaternion-constant-identity"></target>
            <paragraph classes="classref-constant" ids="class-quaternion-constant-identity" names="class_quaternion_constant_identity"><strong>IDENTITY</strong> = <literal>Quaternion(0, 0, 0, 1)</literal> <reference internal="True" refid="class-quaternion-constant-identity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>单位四元数，代表无旋转。这与 <reference internal="True" refuri="class_basis#class-basis-constant-identity"><inline classes="std std-ref">Basis.IDENTITY</inline></reference> 具有相同的旋转。</paragraph>
            <paragraph>如果一个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 被该四元数旋转（乘以），则它不会改变。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-quaternion-property-w"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-w" names="class_quaternion_property_w"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>w</strong> = <literal>1.0</literal> <reference internal="True" refid="class-quaternion-property-w"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>四元数的 W 分量。这是“实数”的部分。</paragraph>
            <paragraph><strong>注意：</strong>四元数分量通常不应被直接操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-property-x"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-x" names="class_quaternion_property_x"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>x</strong> = <literal>0.0</literal> <reference internal="True" refid="class-quaternion-property-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>四元数的 X 分量。这是沿“虚数” <literal>i</literal> 轴的值。</paragraph>
            <paragraph><strong>注意：</strong>四元数分量通常不应被直接操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-property-y"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-y" names="class_quaternion_property_y"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>y</strong> = <literal>0.0</literal> <reference internal="True" refid="class-quaternion-property-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>四元数的 Y 分量。这是沿“虚数” <literal>j</literal> 轴的值。</paragraph>
            <paragraph><strong>注意：</strong>四元数分量通常不应被直接操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-property-z"></target>
            <paragraph classes="classref-property" ids="class-quaternion-property-z" names="class_quaternion_property_z"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>z</strong> = <literal>0.0</literal> <reference internal="True" refid="class-quaternion-property-z"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>四元数的 Z 分量。这是沿“虚数” <literal>k</literal> 轴的值。</paragraph>
            <paragraph><strong>注意：</strong>四元数分量通常不应被直接操作。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-quaternion-constructor-quaternion"></target>
            <paragraph classes="classref-constructor" ids="class-quaternion-constructor-quaternion" names="class_quaternion_constructor_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong>() <reference internal="True" refid="class-quaternion-constructor-quaternion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造一个与 <reference internal="True" refid="class-quaternion-constant-identity"><inline classes="std std-ref">IDENTITY</inline></reference> 相同的 <strong>Quaternion</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong>(from: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>Quaternion</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong>(arc_from: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, arc_to: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
            <paragraph>构造一个表示 <literal>arc_from</literal> 和 <literal>arc_to</literal> 之间最短弧的 <strong>Quaternion</strong>。这些可以想象为与球体表面相交的两个点，球面半径为 <literal>1.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
            <paragraph>构造一个 <strong>Quaternion</strong>，表示围绕 <literal>axis</literal> 旋转给定的 <literal>angle</literal> 弧度。该轴必须是一个归一化向量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong>(from: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>)</paragraph>
            <paragraph>根据给定的旋转 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 构造一个 <strong>Quaternion</strong>。</paragraph>
            <paragraph>该构造函数比 <reference internal="True" refuri="class_basis#class-basis-method-get-rotation-quaternion"><inline classes="std std-ref">Basis.get_rotation_quaternion</inline></reference> 更快，但给定的基必须是<emphasis>正交归一化的</emphasis>（请参阅 <reference internal="True" refuri="class_basis#class-basis-method-orthonormalized"><inline classes="std std-ref">Basis.orthonormalized</inline></reference>）。否则，构造函数将失败并返回 <reference internal="True" refid="class-quaternion-constant-identity"><inline classes="std std-ref">IDENTITY</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>Quaternion</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, z: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, w: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
            <paragraph>构造一个由给定值定义的 <strong>Quaternion</strong>。</paragraph>
            <paragraph><strong>注意：</strong>只有归一化的四元数才表示旋转；如果这些值没有归一化，则新的 <strong>Quaternion</strong> 将不是有效的旋转。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="方法说明">
            <title>方法说明</title>
            <target refid="class-quaternion-method-angle-to"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-angle-to" names="class_quaternion_method_angle_to"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angle_to</strong>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-angle-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个四元数与 <literal>to</literal> 之间的角度。这是从一个旋转到另一个旋转所需的角度大小。</paragraph>
            <paragraph><strong>注意：</strong>该方法的浮点数误差异常地高，因此 <literal>is_zero_approx</literal> 等方法的结果不可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-dot"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-dot" names="class_quaternion_method_dot"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>dot</strong>(with: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-dot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数与 <literal>with</literal> 的点积。</paragraph>
            <paragraph>等价于 <literal>(quat.x * with.x) + (quat.y * with.y) + (quat.z * with.z) + (quat.w * with.w)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-exp"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-exp" names="class_quaternion_method_exp"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>exp</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-exp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数的指数。该结果的旋转轴是该四元数的归一化旋转轴，该结果的角度是该四元数的向量部分的长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-from-euler"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-from-euler" names="class_quaternion_method_from_euler"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>from_euler</strong>(euler: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-quaternion-method-from-euler"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从给定的 <reference name="欧拉角" refuri="https://en.wikipedia.org/wiki/Euler_angles">欧拉角</reference>的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 弧度角构造一个新的 <strong>Quaternion</strong>。该方法始终使用 YXZ 约定（<reference internal="True" refuri="class_@globalscope#class-globalscope-constant-euler-order-yxz"><inline classes="std std-ref">@GlobalScope.EULER_ORDER_YXZ</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-get-angle"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-get-angle" names="class_quaternion_method_get_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_angle</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-get-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数表示的旋转角度。</paragraph>
            <paragraph><strong>注意：</strong>该四元数必须被归一化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-get-axis"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-get-axis" names="class_quaternion_method_get_axis"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_axis</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-get-axis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数表示的旋转的旋转轴。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-get-euler"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-get-euler" names="class_quaternion_method_get_euler"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_euler</strong>(order: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-get-euler"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数的旋转作为<reference name="欧拉角" refuri="https://en.wikipedia.org/wiki/Euler_angles">欧拉角</reference>弧度角的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。</paragraph>
            <paragraph>每个连续旋转的顺序可以使用 <literal>order</literal> 更改（请参阅 <reference internal="True" refuri="class_@globalscope#enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> 常量）。默认情况下，使用 YXZ 约定（<reference internal="True" refuri="class_@globalscope#class-globalscope-constant-euler-order-yxz"><inline classes="std std-ref">@GlobalScope.EULER_ORDER_YXZ</inline></reference>）：首先计算 Z（翻滚），然后计算 X（俯仰），最后计算 Y（偏航）。当使用相反的方法 <reference internal="True" refid="class-quaternion-method-from-euler"><inline classes="std std-ref">from_euler</inline></reference> 时，该顺序相反。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-inverse"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-inverse" names="class_quaternion_method_inverse"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>inverse</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-inverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数的逆版本，反转除 <reference internal="True" refid="class-quaternion-property-w"><inline classes="std std-ref">w</inline></reference> 之外的每个分量的符号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-is-equal-approx" names="class_quaternion_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-is-equal-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该四元数和 <literal>to</literal> 近似相等，则返回 <literal>true</literal>，判断方法是通过在每个分量上运行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-is-finite" names="class_quaternion_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-is-finite"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该四元数是有限的，则返回 <literal>true</literal>，判断方法是在每个分量上调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-finite"><inline classes="std std-ref">@GlobalScope.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-is-normalized"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-is-normalized" names="class_quaternion_method_is_normalized"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_normalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-is-normalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该四元数已被归一化，则返回 <literal>true</literal>。另见 <reference internal="True" refid="class-quaternion-method-normalized"><inline classes="std std-ref">normalized</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-length"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-length" names="class_quaternion_method_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数的长度，也被称为幅度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-length-squared"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-length-squared" names="class_quaternion_method_length_squared"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length_squared</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-length-squared"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数的长度的平方。</paragraph>
            <paragraph><strong>注意：</strong>该方法比 <reference internal="True" refid="class-quaternion-method-length"><inline classes="std std-ref">length</inline></reference> 更快，因此如果你只需要比较四元数的长度，则优先使用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-log"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-log" names="class_quaternion_method_log"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>log</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-log"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数的对数。将该四元数的旋转轴乘以它的旋转角度，并将结果存储在返回的四元数的向量部分（<reference internal="True" refid="class-quaternion-property-x"><inline classes="std std-ref">x</inline></reference>、<reference internal="True" refid="class-quaternion-property-y"><inline classes="std std-ref">y</inline></reference> 和 <reference internal="True" refid="class-quaternion-property-z"><inline classes="std std-ref">z</inline></reference>）中。返回的四元数的实数部分（<reference internal="True" refid="class-quaternion-property-w"><inline classes="std std-ref">w</inline></reference>）始终为 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-normalized"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-normalized" names="class_quaternion_method_normalized"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>normalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-normalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该四元数的副本，已归一化，因此其长度为 <literal>1.0</literal>。另见 <reference internal="True" refid="class-quaternion-method-is-normalized"><inline classes="std std-ref">is_normalized</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-slerp"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-slerp" names="class_quaternion_method_slerp"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>slerp</strong>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-slerp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <literal>to</literal> 四元数，在给定 <literal>weight</literal> 下执行球面线性插值并返回结果。该四元数和 <literal>to</literal> 都必须已归一化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-slerpni"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-slerpni" names="class_quaternion_method_slerpni"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>slerpni</strong>(to: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-slerpni"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定 <literal>weight</literal> 的情况下，使用 <literal>to</literal> 四元数执行球面线性插值并返回结果。与 <reference internal="True" refid="class-quaternion-method-slerp"><inline classes="std std-ref">slerp</inline></reference> 不同，该方法不检查旋转路径是否小于 90 度。该四元数和 <literal>to</literal> 都必须是归一化的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-spherical-cubic-interpolate"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-spherical-cubic-interpolate" names="class_quaternion_method_spherical_cubic_interpolate"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>spherical_cubic_interpolate</strong>(b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, pre_a: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, post_b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在四元数 <literal>pre_a</literal>、这个向量、<literal>b</literal> 以及 <literal>post_b</literal> 之间按照给定的 <literal>weight</literal> 进行球面三次插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-method-spherical-cubic-interpolate-in-time"></target>
            <paragraph classes="classref-method" ids="class-quaternion-method-spherical-cubic-interpolate-in-time" names="class_quaternion_method_spherical_cubic_interpolate_in_time"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>spherical_cubic_interpolate_in_time</strong>(b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, pre_a: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, post_b: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_a_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate-in-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在四元数 <literal>pre_a</literal>、该向量、<literal>b</literal> 和 <literal>post_b</literal> 之间，按给定量 <literal>weight</literal> 执行三次球面插值。</paragraph>
            <paragraph>它可以根据时间值执行比 <reference internal="True" refid="class-quaternion-method-spherical-cubic-interpolate"><inline classes="std std-ref">spherical_cubic_interpolate</inline></reference> 更平滑的插值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id11" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-quaternion-operator-neq-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-neq-quaternion" names="class_quaternion_operator_neq_quaternion"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <reference internal="True" refid="class-quaternion-operator-neq-quaternion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个四元数的分量不完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点精度误差，请考虑改用 <reference internal="True" refid="class-quaternion-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，这样更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-quaternion" names="class_quaternion_operator_mul_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <reference internal="True" refid="class-quaternion-operator-mul-quaternion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>组合（相乘）两个四元数。这会由该四元数（父项）旋转 <literal>right</literal> 四元数（子项）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-vector3"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-vector3" names="class_quaternion_operator_mul_vector3"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-quaternion-operator-mul-vector3"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>由该四元数旋转（乘以） <literal>right</literal> 向量，返回一个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-float" names="class_quaternion_operator_mul_float"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-quaternion-operator-mul-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量乘以右侧的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 值。</paragraph>
            <paragraph>该操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-mul-int" names="class_quaternion_operator_mul_int"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-quaternion-operator-mul-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量乘以右侧 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值。</paragraph>
            <paragraph>该操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-sum-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-sum-quaternion" names="class_quaternion_operator_sum_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator +</strong>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <reference internal="True" refid="class-quaternion-operator-sum-quaternion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将左侧 <strong>Quaternion</strong> 的每个分量添加到右侧 <strong>Quaternion</strong>。</paragraph>
            <paragraph>该操作本身没有意义，但可以用作更大表达式的一部分，例如用于近似两个相邻旋转之间的中间旋转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-dif-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-dif-quaternion" names="class_quaternion_operator_dif_quaternion"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator -</strong>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <reference internal="True" refid="class-quaternion-operator-dif-quaternion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将左侧 <strong>Quaternion</strong> 的每个分量减去右侧 <strong>Quaternion</strong>。</paragraph>
            <paragraph>该操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-div-float" names="class_quaternion_operator_div_float"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-quaternion-operator-div-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量除以右侧 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 值。</paragraph>
            <paragraph>该操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-div-int" names="class_quaternion_operator_div_int"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-quaternion-operator-div-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Quaternion</strong> 的每个分量除以右侧的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值。</paragraph>
            <paragraph>该操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-eq-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-eq-quaternion" names="class_quaternion_operator_eq_quaternion"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>) <reference internal="True" refid="class-quaternion-operator-eq-quaternion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个四元数的分量完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点精度误差，请考虑改用 <reference internal="True" refid="class-quaternion-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，这样更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-idx-int" names="class_quaternion_operator_idx_int"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator []</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-quaternion-operator-idx-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过索引访问该四元数的每个分量。</paragraph>
            <paragraph>索引 <literal>0</literal> 与 <reference internal="True" refid="class-quaternion-property-x"><inline classes="std std-ref">x</inline></reference> 相同，索引 <literal>1</literal> 与 <reference internal="True" refid="class-quaternion-property-y"><inline classes="std std-ref">y</inline></reference> 相同，索引 <literal>2</literal> 与 <reference internal="True" refid="class-quaternion-property-z"><inline classes="std std-ref">z</inline></reference> 相同，索引 <literal>3</literal> 与 <reference internal="True" refid="class-quaternion-property-w"><inline classes="std std-ref">w</inline></reference> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-unplus"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-unplus" names="class_quaternion_operator_unplus"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator unary+</strong>() <reference internal="True" refid="class-quaternion-operator-unplus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>+</literal> 不存在时相同的值。单目 <literal>+</literal> 没有作用，但有时可以使你的代码更具可读性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-quaternion-operator-unminus"></target>
            <paragraph classes="classref-operator" ids="class-quaternion-operator-unminus" names="class_quaternion_operator_unminus"><reference internal="True" refid="class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator unary-</strong>() <reference internal="True" refid="class-quaternion-operator-unminus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Quaternion</strong> 的负值。这与将所有分量乘以 <literal>-1</literal> 相同。这个操作得到的是代表相同旋转的四元数。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
