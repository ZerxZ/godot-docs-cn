<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_nativemenu.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/NativeMenu.xml.</comment>
    <target refid="class-nativemenu"></target>
    <section ids="nativemenu class-nativemenu" names="nativemenu class_nativemenu">
        <title>NativeMenu</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>操作系统原生菜单的服务器接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>NativeMenu</strong> 处理对 OS 原生全局菜单栏和弹出菜单的低级访问。</paragraph>
            <paragraph><strong>注意：</strong>这是低级 API，请考虑使用将 <reference internal="True" refuri="class_menubar#class-menubar-property-prefer-global-menu"><inline classes="std std-ref">MenuBar.prefer_global_menu</inline></reference> 设置为 <literal>true</literal> 的 <reference internal="True" refuri="class_menubar#class-menubar"><inline classes="std std-ref">MenuBar</inline></reference>，以及将 <reference internal="True" refuri="class_popupmenu#class-popupmenu-property-prefer-native-menu"><inline classes="std std-ref">PopupMenu.prefer_native_menu</inline></reference> 设置为 <literal>true</literal> 的 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>。</paragraph>
            <paragraph>要创建一个菜单，请使用 <reference internal="True" refid="class-nativemenu-method-create-menu"><inline classes="std std-ref">create_menu</inline></reference>，使用 <literal>add_*_item</literal> 方法添加菜单项。要移除一个菜单，请使用 <reference internal="True" refid="class-nativemenu-method-free-menu"><inline classes="std std-ref">free_menu</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var menu

func _menu_callback(item_id):
    if item_id == "ITEM_CUT":
        cut()
    elif item_id == "ITEM_COPY":
        copy()
    elif item_id == "ITEM_PASTE":
        paste()

func _enter_tree():
    # 创建新菜单并添加项目：
    menu = NativeMenu.create_menu()
    NativeMenu.add_item(menu, "Cut", _menu_callback, Callable(), "ITEM_CUT")
    NativeMenu.add_item(menu, "Copy", _menu_callback, Callable(), "ITEM_COPY")
    NativeMenu.add_separator(menu)
    NativeMenu.add_item(menu, "Paste", _menu_callback, Callable(), "ITEM_PASTE")

func _on_button_pressed():
    # 在鼠标位置显示弹出菜单：
    NativeMenu.popup(menu, DisplayServer.mouse_get_position())

func _exit_tree():
    # 当不再需要时移除菜单：
    NativeMenu.free_menu(menu)</literal_block>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="471"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-check-item"><inline classes="std std-ref">add_check_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-icon-check-item"><inline classes="std std-ref">add_icon_check_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-icon-item"><inline classes="std std-ref">add_icon_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-icon-radio-check-item"><inline classes="std std-ref">add_icon_radio_check_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-item"><inline classes="std std-ref">add_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-multistate-item"><inline classes="std std-ref">add_multistate_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, default_state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-radio-check-item"><inline classes="std std-ref">add_radio_check_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-separator"><inline classes="std std-ref">add_separator</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-add-submenu-item"><inline classes="std std-ref">add_submenu_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, submenu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-clear"><inline classes="std std-ref">clear</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-create-menu"><inline classes="std std-ref">create_menu</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-find-item-index-with-submenu"><inline classes="std std-ref">find_item_index_with_submenu</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, submenu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-find-item-index-with-tag"><inline classes="std std-ref">find_item_index_with_tag</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-find-item-index-with-text"><inline classes="std std-ref">find_item_index_with_text</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-free-menu"><inline classes="std std-ref">free_menu</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-accelerator"><inline classes="std std-ref">get_item_accelerator</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-callback"><inline classes="std std-ref">get_item_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-count"><inline classes="std std-ref">get_item_count</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-icon"><inline classes="std std-ref">get_item_icon</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-indentation-level"><inline classes="std std-ref">get_item_indentation_level</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-key-callback"><inline classes="std std-ref">get_item_key_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-max-states"><inline classes="std std-ref">get_item_max_states</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-state"><inline classes="std std-ref">get_item_state</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-submenu"><inline classes="std std-ref">get_item_submenu</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-tag"><inline classes="std std-ref">get_item_tag</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-text"><inline classes="std std-ref">get_item_text</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-item-tooltip"><inline classes="std std-ref">get_item_tooltip</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-minimum-width"><inline classes="std std-ref">get_minimum_width</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-popup-close-callback"><inline classes="std std-ref">get_popup_close_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-popup-open-callback"><inline classes="std std-ref">get_popup_open_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-size"><inline classes="std std-ref">get_size</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-system-menu"><inline classes="std std-ref">get_system_menu</inline></reference>(menu_id: <reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-get-system-menu-name"><inline classes="std std-ref">get_system_menu_name</inline></reference>(menu_id: <reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-has-feature"><inline classes="std std-ref">has_feature</inline></reference>(feature: <reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-has-menu"><inline classes="std std-ref">has_menu</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-has-system-menu"><inline classes="std std-ref">has_system_menu</inline></reference>(menu_id: <reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-is-item-checkable"><inline classes="std std-ref">is_item_checkable</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-is-item-checked"><inline classes="std std-ref">is_item_checked</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-is-item-disabled"><inline classes="std std-ref">is_item_disabled</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-is-item-hidden"><inline classes="std std-ref">is_item_hidden</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-is-item-radio-checkable"><inline classes="std std-ref">is_item_radio_checkable</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-is-opened"><inline classes="std std-ref">is_opened</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-is-system-menu"><inline classes="std std-ref">is_system_menu</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-popup"><inline classes="std std-ref">popup</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-remove-item"><inline classes="std std-ref">remove_item</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-interface-direction"><inline classes="std std-ref">set_interface_direction</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, is_rtl: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-accelerator"><inline classes="std std-ref">set_item_accelerator</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-callback"><inline classes="std std-ref">set_item_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-checkable"><inline classes="std std-ref">set_item_checkable</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-checked"><inline classes="std std-ref">set_item_checked</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-disabled"><inline classes="std std-ref">set_item_disabled</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-hidden"><inline classes="std std-ref">set_item_hidden</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-hover-callbacks"><inline classes="std std-ref">set_item_hover_callbacks</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-icon"><inline classes="std std-ref">set_item_icon</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-indentation-level"><inline classes="std std-ref">set_item_indentation_level</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, level: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-key-callback"><inline classes="std std-ref">set_item_key_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-max-states"><inline classes="std std-ref">set_item_max_states</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-radio-checkable"><inline classes="std std-ref">set_item_radio_checkable</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-state"><inline classes="std std-ref">set_item_state</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-submenu"><inline classes="std std-ref">set_item_submenu</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, submenu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-tag"><inline classes="std std-ref">set_item_tag</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-text"><inline classes="std std-ref">set_item_text</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-item-tooltip"><inline classes="std std-ref">set_item_tooltip</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-minimum-width"><inline classes="std std-ref">set_minimum_width</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-popup-close-callback"><inline classes="std std-ref">set_popup_close_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nativemenu-method-set-popup-open-callback"><inline classes="std std-ref">set_popup_open_callback</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-nativemenu-feature"></target>
            <paragraph classes="classref-enumeration" ids="enum-nativemenu-feature" names="enum_nativemenu_feature">enum <strong>Feature</strong>: <reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-nativemenu-constant-feature-global-menu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-feature-global-menu" names="class_nativemenu_constant_feature_global_menu"><reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_GLOBAL_MENU</strong> = <literal>0</literal></paragraph>
            <paragraph><strong>NativeMenu</strong> 支持原生全局主菜单。</paragraph>
            <target refid="class-nativemenu-constant-feature-popup-menu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-feature-popup-menu" names="class_nativemenu_constant_feature_popup_menu"><reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_POPUP_MENU</strong> = <literal>1</literal></paragraph>
            <paragraph><strong>NativeMenu</strong> 支持原生弹出菜单。</paragraph>
            <target refid="class-nativemenu-constant-feature-open-close-callback"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-feature-open-close-callback" names="class_nativemenu_constant_feature_open_close_callback"><reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_OPEN_CLOSE_CALLBACK</strong> = <literal>2</literal></paragraph>
            <paragraph><strong>NativeMenu</strong> 支持菜单打开和关闭回调。</paragraph>
            <target refid="class-nativemenu-constant-feature-hover-callback"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-feature-hover-callback" names="class_nativemenu_constant_feature_hover_callback"><reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_HOVER_CALLBACK</strong> = <literal>3</literal></paragraph>
            <paragraph><strong>NativeMenu</strong> 支持菜单项悬停回调。</paragraph>
            <target refid="class-nativemenu-constant-feature-key-callback"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-feature-key-callback" names="class_nativemenu_constant_feature_key_callback"><reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_KEY_CALLBACK</strong> = <literal>4</literal></paragraph>
            <paragraph><strong>NativeMenu</strong> 支持菜单项加速器/键回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-nativemenu-systemmenus"></target>
            <paragraph classes="classref-enumeration" ids="enum-nativemenu-systemmenus" names="enum_nativemenu_systemmenus">enum <strong>SystemMenus</strong>: <reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-nativemenu-constant-invalid-menu-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-invalid-menu-id" names="class_nativemenu_constant_invalid_menu_id"><reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference> <strong>INVALID_MENU_ID</strong> = <literal>0</literal></paragraph>
            <paragraph>无效的特殊系统菜单 ID。</paragraph>
            <target refid="class-nativemenu-constant-main-menu-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-main-menu-id" names="class_nativemenu_constant_main_menu_id"><reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference> <strong>MAIN_MENU_ID</strong> = <literal>1</literal></paragraph>
            <paragraph>全局主菜单 ID。</paragraph>
            <target refid="class-nativemenu-constant-application-menu-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-application-menu-id" names="class_nativemenu_constant_application_menu_id"><reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference> <strong>APPLICATION_MENU_ID</strong> = <literal>2</literal></paragraph>
            <paragraph>应用程序（macOS 上“Apple”菜单后的第一个菜单）菜单 ID。</paragraph>
            <target refid="class-nativemenu-constant-window-menu-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-window-menu-id" names="class_nativemenu_constant_window_menu_id"><reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference> <strong>WINDOW_MENU_ID</strong> = <literal>3</literal></paragraph>
            <paragraph>“窗口”菜单 ID（在 macOS 上，该菜单包括标准窗口控制项和打开的窗口列表）。</paragraph>
            <target refid="class-nativemenu-constant-help-menu-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-help-menu-id" names="class_nativemenu_constant_help_menu_id"><reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference> <strong>HELP_MENU_ID</strong> = <literal>4</literal></paragraph>
            <paragraph>“帮助”菜单 ID（在 macOS 上，该菜单包括帮助搜索栏）。</paragraph>
            <target refid="class-nativemenu-constant-dock-menu-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-nativemenu-constant-dock-menu-id" names="class_nativemenu_constant_dock_menu_id"><reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference> <strong>DOCK_MENU_ID</strong> = <literal>5</literal></paragraph>
            <paragraph>Dock 图标右键菜单 ID（在 macOS 上，该菜单包括标准应用程序控制项和打开的窗口列表）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-nativemenu-method-add-check-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-check-item" names="class_nativemenu_method_add_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_check_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加新的可勾选菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上会忽略 <literal>accelerator</literal> 和 <literal>key_callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-icon-check-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-icon-check-item" names="class_nativemenu_method_add_icon_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_icon_check_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-icon-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加新的可勾选菜单项，显示的文本为 <literal>label</literal>，图标为 <literal>icon</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上会忽略 <literal>accelerator</literal> 和 <literal>key_callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-icon-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-icon-item" names="class_nativemenu_method_add_icon_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_icon_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-icon-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加新的菜单项，显示的文本为 <literal>label</literal>，图标为 <literal>icon</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上会忽略 <literal>accelerator</literal> 和 <literal>key_callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-icon-radio-check-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-icon-radio-check-item" names="class_nativemenu_method_add_icon_radio_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_icon_radio_check_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-icon-radio-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加新的单选菜单项，显示的文本为 <literal>label</literal>，图标为 <literal>icon</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>单选菜单项只负责显示选中标记，并没有任何内置检查行为，必须手动进行选中、取消选中的操作。关于如何进行控制的更多信息见 <reference internal="True" refid="class-nativemenu-method-set-item-checked"><inline classes="std std-ref">set_item_checked</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上会忽略 <literal>accelerator</literal> 和 <literal>key_callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-item" names="class_nativemenu_method_add_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单添加新的菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上会忽略 <literal>accelerator</literal> 和 <literal>key_callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-multistate-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-multistate-item" names="class_nativemenu_method_add_multistate_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_multistate_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, default_state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-multistate-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加新的菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>与常规的二态菜单项不同，多状态菜单项的状态可以多于两个，由 <literal>max_states</literal> 定义。每点击或激活该菜单项一次，状态就会加一。默认值由 <literal>default_state</literal> 定义。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>默认情况下不会展示当前菜单项的状态，应该手动更改。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上会忽略 <literal>accelerator</literal> 和 <literal>key_callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-radio-check-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-radio-check-item" names="class_nativemenu_method_add_radio_check_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_radio_check_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable(), tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, accelerator: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> = 0, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-radio-check-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加新的单选菜单项，显示的文本为 <literal>label</literal>。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph>还可以定义键盘快捷键 <literal>accelerator</literal>，按下后即便该菜单按钮尚未打开，也会进行触发。<literal>accelerator</literal> 通常是将 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>单选菜单项只负责显示选中标记，并没有任何内置检查行为，必须手动进行选中、取消选中的操作。关于如何进行控制的更多信息见 <reference internal="True" refid="class-nativemenu-method-set-item-checked"><inline classes="std std-ref">set_item_checked</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> 和 <literal>key_callback</literal> Callable 均只接受一个 Variant 参数，传入 Callable 的参数是传给 <literal>tag</literal> 的参数。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>在 Windows 上会忽略 <literal>accelerator</literal> 和 <literal>key_callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-separator"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-separator" names="class_nativemenu_method_add_separator"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_separator</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-separator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加分隔符。分隔符也会占据一个索引号。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-add-submenu-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-add-submenu-item" names="class_nativemenu_method_add_submenu_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_submenu_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, submenu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-nativemenu-method-add-submenu-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向 ID 为 <literal>rid</literal> 的全局菜单中添加作为子菜单的菜单项。<literal>submenu_rid</literal> 参数为全局菜单根菜单项的 RID，会在点击该菜单项时显示。</paragraph>
            <paragraph>返回插入菜单项的索引，不保证与 <literal>index</literal> 的值相同。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-clear"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-clear" names="class_nativemenu_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-nativemenu-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从全局菜单中移除所有菜单项 <literal>rid</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-create-menu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-create-menu" names="class_nativemenu_method_create_menu"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>create_menu</strong>() <reference internal="True" refid="class-nativemenu-method-create-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>新建全局菜单对象。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-find-item-index-with-submenu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-find-item-index-with-submenu" names="class_nativemenu_method_find_item_index_with_submenu"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find_item_index_with_submenu</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, submenu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-find-item-index-with-submenu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由 <literal>submenu_rid</literal> 指定的子菜单项的索引。索引由引擎自动分配给每个菜单项，无法手动设置。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-find-item-index-with-tag"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-find-item-index-with-tag" names="class_nativemenu_method_find_item_index_with_tag"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find_item_index_with_tag</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-find-item-index-with-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有指定 <literal>tag</literal> 的菜单项的索引。引擎会自动为每个菜单项分配索引，无法手动设置。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-find-item-index-with-text"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-find-item-index-with-text" names="class_nativemenu_method_find_item_index_with_text"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find_item_index_with_text</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-find-item-index-with-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有指定 <literal>text</literal> 的菜单项的索引。引擎会自动为每个菜单项分配索引，无法手动设置。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-free-menu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-free-menu" names="class_nativemenu_method_free_menu"><abbreviation explanation="无返回值。">void</abbreviation> <strong>free_menu</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-nativemenu-method-free-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>释放该 <strong>NativeMenu</strong> 所创建的全局菜单对象。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-accelerator"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-accelerator" names="class_nativemenu_method_get_item_accelerator"><reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> <strong>get_item_accelerator</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-accelerator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的快捷键。快捷键是能够激活该菜单项的特殊按键组合，无论该控件是否有焦点。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-callback" names="class_nativemenu_method_get_item_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>get_item_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的回调。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-count"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-count" names="class_nativemenu_method_get_item_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_count</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局菜单 <literal>rid</literal> 中的菜单项的数量。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-icon"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-icon" names="class_nativemenu_method_get_item_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_item_icon</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的图标。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-indentation-level"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-indentation-level" names="class_nativemenu_method_get_item_indentation_level"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_indentation_level</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-indentation-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的水平偏移量。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-key-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-key-callback" names="class_nativemenu_method_get_item_key_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>get_item_key_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-key-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的快捷键回调。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-max-states"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-max-states" names="class_nativemenu_method_get_item_max_states"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_max_states</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-max-states"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回多状态项的状态数。详见 <reference internal="True" refid="class-nativemenu-method-add-multistate-item"><inline classes="std std-ref">add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-state"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-state" names="class_nativemenu_method_get_item_state"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_state</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回多状态项的状态。详见 <reference internal="True" refid="class-nativemenu-method-add-multistate-item"><inline classes="std std-ref">add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-submenu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-submenu" names="class_nativemenu_method_get_item_submenu"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_item_submenu</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-submenu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的子菜单 ID。关于如何添加子菜单的更多信息见 <reference internal="True" refid="class-nativemenu-method-add-submenu-item"><inline classes="std std-ref">add_submenu_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-tag"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-tag" names="class_nativemenu_method_get_item_tag"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_item_tag</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定菜单项的元数据，可能是任何类型。元数据可以使用 <reference internal="True" refid="class-nativemenu-method-set-item-tag"><inline classes="std std-ref">set_item_tag</inline></reference> 设置，该方法提供了一种将上下文数据分配给菜单项的简单方式。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-text"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-text" names="class_nativemenu_method_get_item_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_item_text</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项的文本。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-item-tooltip"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-item-tooltip" names="class_nativemenu_method_get_item_tooltip"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_item_tooltip</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-item-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>idx</literal> 的菜单项所关联的工具提示。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-minimum-width"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-minimum-width" names="class_nativemenu_method_get_minimum_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_minimum_width</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-minimum-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局菜单的最小宽度。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-popup-close-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-popup-close-callback" names="class_nativemenu_method_get_popup_close_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>get_popup_close_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-popup-close-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局菜单的关闭回调。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-popup-open-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-popup-open-callback" names="class_nativemenu_method_get_popup_open_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>get_popup_open_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-popup-open-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局菜单的打开回调。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-size"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-size" names="class_nativemenu_method_get_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_size</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局菜单的大小。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-system-menu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-system-menu" names="class_nativemenu_method_get_system_menu"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_system_menu</strong>(menu_id: <reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-system-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回特殊系统菜单的 RID。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-get-system-menu-name"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-get-system-menu-name" names="class_nativemenu_method_get_system_menu_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_system_menu_name</strong>(menu_id: <reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-get-system-menu-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回特殊系统菜单的可读名称。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-has-feature"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-has-feature" names="class_nativemenu_method_has_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_feature</strong>(feature: <reference internal="True" refid="enum-nativemenu-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-has-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果当前的 <strong>NativeMenu</strong> 支持指定的特性 <literal>feature</literal>，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-has-menu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-has-menu" names="class_nativemenu_method_has_menu"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_menu</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-has-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>rid</literal> 是有效的全局菜单，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-has-system-menu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-has-system-menu" names="class_nativemenu_method_has_system_menu"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_system_menu</strong>(menu_id: <reference internal="True" refid="enum-nativemenu-systemmenus"><inline classes="std std-ref">SystemMenus</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-has-system-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果支持特殊系统菜单则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-is-item-checkable"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-is-item-checkable" names="class_nativemenu_method_is_item_checkable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_checkable</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-is-item-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果索引为 <literal>idx</literal> 的菜单项能够以某种方式被勾选，即有复选框或单选按钮，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-is-item-checked"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-is-item-checked" names="class_nativemenu_method_is_item_checked"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_checked</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-is-item-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果索引 <literal>idx</literal> 处的菜单项被勾选，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-is-item-disabled"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-is-item-disabled" names="class_nativemenu_method_is_item_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_disabled</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-is-item-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果索引 <literal>idx</literal> 处的菜单项被禁用，则返回 <literal>true</literal>。禁用后，无法选择它，也无法调用其动作。</paragraph>
            <paragraph>有关如何禁用菜单项的更多信息，请参阅 <reference internal="True" refid="class-nativemenu-method-set-item-disabled"><inline classes="std std-ref">set_item_disabled</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-is-item-hidden"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-is-item-hidden" names="class_nativemenu_method_is_item_hidden"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_hidden</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-is-item-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果索引 <literal>idx</literal> 处的菜单项被隐藏，则返回 <literal>true</literal>。</paragraph>
            <paragraph>有关如何隐藏菜单项的更多信息，请参阅 <reference internal="True" refid="class-nativemenu-method-set-item-hidden"><inline classes="std std-ref">set_item_hidden</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-is-item-radio-checkable"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-is-item-radio-checkable" names="class_nativemenu_method_is_item_radio_checkable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_radio_checkable</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-is-item-radio-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果索引为 <literal>idx</literal> 的菜单项为单选按钮风格，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>仅为装饰作用；必须自行为单选组添加勾选、取消勾选的逻辑。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-is-opened"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-is-opened" names="class_nativemenu_method_is_opened"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_opened</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-is-opened"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果菜单当前已打开，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-is-system-menu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-is-system-menu" names="class_nativemenu_method_is_system_menu"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_system_menu</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-nativemenu-method-is-system-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果全局菜单为特殊系统菜单则返回 <literal>true</literal> 。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-popup"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-popup" names="class_nativemenu_method_popup"><abbreviation explanation="无返回值。">void</abbreviation> <strong>popup</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-nativemenu-method-popup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在屏幕坐标中的 <literal>position</literal> 处显示全局菜单。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-remove-item"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-remove-item" names="class_nativemenu_method_remove_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_item</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-nativemenu-method-remove-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从全局菜单 <literal>rid</literal> 中移除索引 <literal>idx</literal> 处的菜单项。</paragraph>
            <paragraph><strong>注意：</strong>被移除菜单项之后的菜单项的索引将移动一格。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-interface-direction"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-interface-direction" names="class_nativemenu_method_set_interface_direction"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_interface_direction</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, is_rtl: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-interface-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>is_rtl</literal> 为 <literal>true</literal>，则设置菜单文本布局方向为从右到左。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-accelerator"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-accelerator" names="class_nativemenu_method_set_item_accelerator"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_accelerator</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, keycode: <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-accelerator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的快捷键。<literal>keycode</literal> 可以是单一 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference>，也可以是 <reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference> 和 <reference internal="True" refuri="class_@globalscope#enum-globalscope-key"><inline classes="std std-ref">Key</inline></reference> 用按位或操作进行的组合，例如 <literal>KEY_MASK_CTRL | KEY_A</literal>（<literal classes="kbd">Ctrl + A</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-callback" names="class_nativemenu_method_set_item_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的回调。回调会在按下菜单项时发出。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> Callable 只接受一个 Variant 参数，传入 Callable 的参数是创建菜单项时传给 <literal>tag</literal> 参数的值。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-checkable"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-checkable" names="class_nativemenu_method_set_item_checkable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_checkable</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项是否为复选框。如果为 <literal>false</literal>，则会将该菜单项的类型设置为纯文本。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-checked"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-checked" names="class_nativemenu_method_set_item_checked"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_checked</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的勾选状态。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-disabled"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-disabled" names="class_nativemenu_method_set_item_disabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_disabled</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用/禁用索引为 <literal>idx</literal> 的菜单项。禁用状态下无法被选中，也无法激活动作。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-hidden"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-hidden" names="class_nativemenu_method_set_item_hidden"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_hidden</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>隐藏/显示索引为 <literal>idx</literal> 的菜单项。当它被隐藏时，项目不会出现在菜单中，并且无法调用其操作。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-hover-callbacks"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-hover-callbacks" names="class_nativemenu_method_set_item_hover_callbacks"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_hover_callbacks</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-hover-callbacks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的回调。回调会在菜单项被悬停时发出。</paragraph>
            <paragraph><strong>注意：</strong><literal>callback</literal> Callable 需要接受一个 Variant 参数，传入 Callable 的参数是创建菜单项时传给 <literal>tag</literal> 参数的值。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-icon"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-icon" names="class_nativemenu_method_set_item_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_icon</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>替换指定索引 <literal>idx</literal> 的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 图标。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <paragraph><strong>注意：</strong>macOS Dock 菜单项不支持该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-indentation-level"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-indentation-level" names="class_nativemenu_method_set_item_indentation_level"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_indentation_level</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, level: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-indentation-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的水平偏移量。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-key-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-key-callback" names="class_nativemenu_method_set_item_key_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_key_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key_callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-key-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的回调。回调会在激活快捷键时发出。</paragraph>
            <paragraph><strong>注意：</strong><literal>key_callback</literal> Callable 只接受一个 Variant 参数，传入 Callable 的参数是创建菜单项时传给 <literal>tag</literal> 参数的值。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-max-states"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-max-states" names="class_nativemenu_method_set_item_max_states"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_max_states</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_states: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-max-states"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置多状态项的状态数。详见 <reference internal="True" refid="class-nativemenu-method-add-multistate-item"><inline classes="std std-ref">add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-radio-checkable"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-radio-checkable" names="class_nativemenu_method_set_item_radio_checkable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_radio_checkable</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checkable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-radio-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>idx</literal> 的菜单项设置为单选按钮风格。如果为 <literal>false</literal>，则会将该菜单项的类型设置为纯文本。</paragraph>
            <paragraph><strong>注意：</strong>仅为装饰作用；必须自行为单选组添加选中、取消选中的逻辑。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-state"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-state" names="class_nativemenu_method_set_item_state"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_state</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, state: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置多状态项的状态。详见 <reference internal="True" refid="class-nativemenu-method-add-multistate-item"><inline classes="std std-ref">add_multistate_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-submenu"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-submenu" names="class_nativemenu_method_set_item_submenu"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_submenu</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, submenu_rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-submenu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引 <literal>idx</literal> 处菜单项的子菜单 RID。子菜单是一个全局菜单，点击该菜单项时将显示该菜单。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-tag"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-tag" names="class_nativemenu_method_set_item_tag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_tag</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tag: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-tag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定菜单项的元数据，可以是任何类型。后续可以使用 <reference internal="True" refid="class-nativemenu-method-get-item-tag"><inline classes="std std-ref">get_item_tag</inline></reference> 获取，它提供了一种将上下文数据分配给项目的简单方式。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-text"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-text" names="class_nativemenu_method_set_item_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_text</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的文本。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-item-tooltip"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-item-tooltip" names="class_nativemenu_method_set_item_tooltip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_tooltip</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-item-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>idx</literal> 的菜单项的工具提示 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-minimum-width"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-minimum-width" names="class_nativemenu_method_set_minimum_width"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_minimum_width</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-minimum-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置全局菜单的最小宽度。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-popup-close-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-popup-close-callback" names="class_nativemenu_method_set_popup_close_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_popup_close_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-popup-close-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册可调用函数，以在菜单即将显示时发出。</paragraph>
            <paragraph><strong>注意：</strong>操作系统可以模拟菜单打开来跟踪菜单项更改和全局快捷键，在这种情况下不会触发相应的关闭回调。使用 <reference internal="True" refid="class-nativemenu-method-is-opened"><inline classes="std std-ref">is_opened</inline></reference> 检查菜单当前是否已打开。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nativemenu-method-set-popup-open-callback"></target>
            <paragraph classes="classref-method" ids="class-nativemenu-method-set-popup-open-callback" names="class_nativemenu_method_set_popup_open_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_popup_open_callback</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-nativemenu-method-set-popup-open-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册可调用函数以在菜单关闭后发出。</paragraph>
            <paragraph><strong>注意：</strong>该方法仅在 macOS 上实现。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
