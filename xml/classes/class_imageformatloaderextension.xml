<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_imageformatloaderextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ImageFormatLoaderExtension.xml.</comment>
    <target refid="class-imageformatloaderextension"></target>
    <section ids="imageformatloaderextension class-imageformatloaderextension" names="imageformatloaderextension class_imageformatloaderextension">
        <title>ImageFormatLoaderExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_imageformatloader#class-imageformatloader"><inline classes="std std-ref">ImageFormatLoader</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于创建 <reference internal="True" refuri="class_imageformatloader#class-imageformatloader"><inline classes="std std-ref">ImageFormatLoader</inline></reference> 扩展的基类（添加对额外图像格式的支持）。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该引擎支持多种开箱即用的图像格式（PNG、SVG、JPEG、WebP 等），但也可以选择通过扩展该类，来实现对其他图像格式的支持。</paragraph>
            <paragraph>请务必遵守文档中的返回类型和值。应该创建它的一个实例，并在初始化阶段调用 <reference internal="True" refid="class-imageformatloaderextension-method-add-format-loader"><inline classes="std std-ref">add_format_loader</inline></reference> 来注册该加载器。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="292"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imageformatloaderextension-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imageformatloaderextension-private-method-load-image"><inline classes="std std-ref">_load_image</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> image, <reference internal="True" refuri="class_fileaccess#class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> fileaccess, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_imageformatloader#enum-imageformatloader-loaderflags"><inline classes="std std-ref">LoaderFlags</inline></reference>&gt; flags, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imageformatloaderextension-method-add-format-loader"><inline classes="std std-ref">add_format_loader</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imageformatloaderextension-method-remove-format-loader"><inline classes="std std-ref">remove_format_loader</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-imageformatloaderextension-private-method-get-recognized-extensions"></target>
            <paragraph classes="classref-method" ids="class-imageformatloaderextension-private-method-get-recognized-extensions" names="class_imageformatloaderextension_private_method__get_recognized_extensions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_recognized_extensions</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该图像格式的文件扩展名列表。具有给定扩展名的文件将被视为图像文件并使用该类加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-imageformatloaderextension-private-method-load-image"></target>
            <paragraph classes="classref-method" ids="class-imageformatloaderextension-private-method-load-image" names="class_imageformatloaderextension_private_method__load_image"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_load_image</strong> <strong>(</strong> <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> image, <reference internal="True" refuri="class_fileaccess#class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> fileaccess, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_imageformatloader#enum-imageformatloader-loaderflags"><inline classes="std std-ref">LoaderFlags</inline></reference>&gt; flags, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> scale <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>将 <literal>fileaccess</literal> 的内容加载至提供的 <literal>image</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-imageformatloaderextension-method-add-format-loader"></target>
            <paragraph classes="classref-method" ids="class-imageformatloaderextension-method-add-format-loader" names="class_imageformatloaderextension_method_add_format_loader">void <strong>add_format_loader</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将这个格式加载器添加至引擎，使其能够识别 <reference internal="True" refid="class-imageformatloaderextension-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference> 返回的文件扩展名。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-imageformatloaderextension-method-remove-format-loader"></target>
            <paragraph classes="classref-method" ids="class-imageformatloaderextension-method-remove-format-loader" names="class_imageformatloaderextension_method_remove_format_loader">void <strong>remove_format_loader</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从引擎中移除这个格式加载器。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
