<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_audiostreaminteractive.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/interactive_music/doc_classes/AudioStreamInteractive.xml.</comment>
    <target refid="class-audiostreaminteractive"></target>
    <section ids="audiostreaminteractive class-audiostreaminteractive" names="audiostreaminteractive class_audiostreaminteractive">
        <title>AudioStreamInteractive</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>以可交互的形式播放音乐的音频流，包含若干剪辑和一张过渡表。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这是一种能够以可交互的形式播放音乐的音频流，包含若干剪辑和一张过渡表。必须先添加剪辑，再使用 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference> 添加过渡规则。这种音频流还导出了一个用于控制 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference>、<reference internal="True" refuri="class_audiostreamplayer2d#class-audiostreamplayer2d"><inline classes="std std-ref">AudioStreamPlayer2D</inline></reference>、<reference internal="True" refuri="class_audiostreamplayer3d#class-audiostreamplayer3d"><inline classes="std std-ref">AudioStreamPlayer3D</inline></reference> 播放的属性参数。</paragraph>
            <paragraph>用法是先填充一些剪辑，然后配置过渡表。音频流会根据过渡表选择要播放的剪辑，并根据表中定义的对应过渡规则平滑地将当前音乐过渡到新的剪辑。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="73"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-property-clip-count"><inline classes="std std-ref">clip_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-property-initial-clip"><inline classes="std std-ref">initial_clip</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="566"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_time: <reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference>, to_time: <reference internal="True" refid="enum-audiostreaminteractive-transitiontotime"><inline classes="std std-ref">TransitionToTime</inline></reference>, fade_mode: <reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference>, fade_beats: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, use_filler_clip: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, filler_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, hold_previous: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-erase-transition"><inline classes="std std-ref">erase_transition</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">AutoAdvanceMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-clip-auto-advance"><inline classes="std std-ref">get_clip_auto_advance</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-clip-auto-advance-next-clip"><inline classes="std std-ref">get_clip_auto_advance_next_clip</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-clip-name"><inline classes="std std-ref">get_clip_name</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-clip-stream"><inline classes="std std-ref">get_clip_stream</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-transition-fade-beats"><inline classes="std std-ref">get_transition_fade_beats</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-transition-fade-mode"><inline classes="std std-ref">get_transition_fade_mode</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-transition-filler-clip"><inline classes="std std-ref">get_transition_filler_clip</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-transition-from-time"><inline classes="std std-ref">get_transition_from_time</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-transition-list"><inline classes="std std-ref">get_transition_list</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-audiostreaminteractive-transitiontotime"><inline classes="std std-ref">TransitionToTime</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-get-transition-to-time"><inline classes="std std-ref">get_transition_to_time</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-has-transition"><inline classes="std std-ref">has_transition</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-is-transition-holding-previous"><inline classes="std std-ref">is_transition_holding_previous</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-is-transition-using-filler-clip"><inline classes="std std-ref">is_transition_using_filler_clip</inline></reference>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-set-clip-auto-advance"><inline classes="std std-ref">set_clip_auto_advance</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mode: <reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">AutoAdvanceMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-set-clip-auto-advance-next-clip"><inline classes="std std-ref">set_clip_auto_advance_next_clip</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, auto_advance_next_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-set-clip-name"><inline classes="std std-ref">set_clip_name</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreaminteractive-method-set-clip-stream"><inline classes="std std-ref">set_clip_stream</inline></reference>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-audiostreaminteractive-transitionfromtime"></target>
            <paragraph classes="classref-enumeration" ids="enum-audiostreaminteractive-transitionfromtime" names="enum_audiostreaminteractive_transitionfromtime">enum <strong>TransitionFromTime</strong>: <reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audiostreaminteractive-constant-transition-from-time-immediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-transition-from-time-immediate" names="class_audiostreaminteractive_constant_transition_from_time_immediate"><reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference> <strong>TRANSITION_FROM_TIME_IMMEDIATE</strong> = <literal>0</literal></paragraph>
            <paragraph>尽快开始过渡，不等待任何特定的时间位置。</paragraph>
            <target refid="class-audiostreaminteractive-constant-transition-from-time-next-beat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-transition-from-time-next-beat" names="class_audiostreaminteractive_constant_transition_from_time_next_beat"><reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference> <strong>TRANSITION_FROM_TIME_NEXT_BEAT</strong> = <literal>1</literal></paragraph>
            <paragraph>剪辑播放至下一拍时过渡。</paragraph>
            <target refid="class-audiostreaminteractive-constant-transition-from-time-next-bar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-transition-from-time-next-bar" names="class_audiostreaminteractive_constant_transition_from_time_next_bar"><reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference> <strong>TRANSITION_FROM_TIME_NEXT_BAR</strong> = <literal>2</literal></paragraph>
            <paragraph>剪辑播放至下一节时过渡。</paragraph>
            <target refid="class-audiostreaminteractive-constant-transition-from-time-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-transition-from-time-end" names="class_audiostreaminteractive_constant_transition_from_time_end"><reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference> <strong>TRANSITION_FROM_TIME_END</strong> = <literal>3</literal></paragraph>
            <paragraph>剪辑播放完成时过渡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-audiostreaminteractive-transitiontotime"></target>
            <paragraph classes="classref-enumeration" ids="enum-audiostreaminteractive-transitiontotime" names="enum_audiostreaminteractive_transitiontotime">enum <strong>TransitionToTime</strong>: <reference internal="True" refid="enum-audiostreaminteractive-transitiontotime"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audiostreaminteractive-constant-transition-to-time-same-position"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-transition-to-time-same-position" names="class_audiostreaminteractive_constant_transition_to_time_same_position"><reference internal="True" refid="enum-audiostreaminteractive-transitiontotime"><inline classes="std std-ref">TransitionToTime</inline></reference> <strong>TRANSITION_TO_TIME_SAME_POSITION</strong> = <literal>0</literal></paragraph>
            <paragraph>过渡至目标剪辑中的相同位置。适用于两个剪辑长度一致、需要进行过渡的场合。</paragraph>
            <target refid="class-audiostreaminteractive-constant-transition-to-time-start"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-transition-to-time-start" names="class_audiostreaminteractive_constant_transition_to_time_start"><reference internal="True" refid="enum-audiostreaminteractive-transitiontotime"><inline classes="std std-ref">TransitionToTime</inline></reference> <strong>TRANSITION_TO_TIME_START</strong> = <literal>1</literal></paragraph>
            <paragraph>过渡至目标剪辑的开头。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-audiostreaminteractive-fademode"></target>
            <paragraph classes="classref-enumeration" ids="enum-audiostreaminteractive-fademode" names="enum_audiostreaminteractive_fademode">enum <strong>FadeMode</strong>: <reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audiostreaminteractive-constant-fade-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-fade-disabled" names="class_audiostreaminteractive_constant_fade_disabled"><reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference> <strong>FADE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>过渡时不使用淡入淡出。适用于从剪辑结尾过渡至剪辑开头，双方均有开头/结尾的情况。</paragraph>
            <target refid="class-audiostreaminteractive-constant-fade-in"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-fade-in" names="class_audiostreaminteractive_constant_fade_in"><reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference> <strong>FADE_IN</strong> = <literal>1</literal></paragraph>
            <paragraph>在下一剪辑中使用淡入，播放完当前剪辑。</paragraph>
            <target refid="class-audiostreaminteractive-constant-fade-out"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-fade-out" names="class_audiostreaminteractive_constant_fade_out"><reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference> <strong>FADE_OUT</strong> = <literal>2</literal></paragraph>
            <paragraph>在当前剪辑中使用淡出，下一剪辑自行开始。</paragraph>
            <target refid="class-audiostreaminteractive-constant-fade-cross"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-fade-cross" names="class_audiostreaminteractive_constant_fade_cross"><reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference> <strong>FADE_CROSS</strong> = <literal>3</literal></paragraph>
            <paragraph>在剪辑之间使用交叉渐变。</paragraph>
            <target refid="class-audiostreaminteractive-constant-fade-automatic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-fade-automatic" names="class_audiostreaminteractive_constant_fade_automatic"><reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference> <strong>FADE_AUTOMATIC</strong> = <literal>4</literal></paragraph>
            <paragraph>使用根据过渡来源和目标决定的过渡逻辑。建议默认使用这个选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-audiostreaminteractive-autoadvancemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-audiostreaminteractive-autoadvancemode" names="enum_audiostreaminteractive_autoadvancemode">enum <strong>AutoAdvanceMode</strong>: <reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audiostreaminteractive-constant-auto-advance-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-auto-advance-disabled" names="class_audiostreaminteractive_constant_auto_advance_disabled"><reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">AutoAdvanceMode</inline></reference> <strong>AUTO_ADVANCE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用自动推进（默认）。</paragraph>
            <target refid="class-audiostreaminteractive-constant-auto-advance-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-auto-advance-enabled" names="class_audiostreaminteractive_constant_auto_advance_enabled"><reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">AutoAdvanceMode</inline></reference> <strong>AUTO_ADVANCE_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>启用自动推进，必须指定剪辑。</paragraph>
            <target refid="class-audiostreaminteractive-constant-auto-advance-return-to-hold"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audiostreaminteractive-constant-auto-advance-return-to-hold" names="class_audiostreaminteractive_constant_auto_advance_return_to_hold"><reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">AutoAdvanceMode</inline></reference> <strong>AUTO_ADVANCE_RETURN_TO_HOLD</strong> = <literal>2</literal></paragraph>
            <paragraph>启用自动推进，不指定剪辑，而是恢复播放保持的剪辑（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="常量">
            <title>常量</title>
            <target refid="class-audiostreaminteractive-constant-clip-any"></target>
            <paragraph classes="classref-constant" ids="class-audiostreaminteractive-constant-clip-any" names="class_audiostreaminteractive_constant_clip_any"><strong>CLIP_ANY</strong> = <literal>-1</literal> <reference internal="True" refid="class-audiostreaminteractive-constant-clip-any"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该常量表示过渡对来源或目标是任何剪辑的情况均适用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-audiostreaminteractive-property-clip-count"></target>
            <paragraph classes="classref-property" ids="class-audiostreaminteractive-property-clip-count" names="class_audiostreaminteractive_property_clip_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>clip_count</strong> = <literal>0</literal> <reference internal="True" refid="class-audiostreaminteractive-property-clip-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_count</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_clip_count</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该交互式播放器中包含的剪辑数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-property-initial-clip"></target>
            <paragraph classes="classref-property" ids="class-audiostreaminteractive-property-initial-clip" names="class_audiostreaminteractive_property_initial_clip"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>initial_clip</strong> = <literal>0</literal> <reference internal="True" refid="class-audiostreaminteractive-property-initial-clip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_initial_clip</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_initial_clip</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>初始剪辑的索引号，播放该音频流时会首先播放该剪辑。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-audiostreaminteractive-method-add-transition"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-add-transition" names="class_audiostreaminteractive_method_add_transition"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_transition</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from_time: <reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference>, to_time: <reference internal="True" refid="enum-audiostreaminteractive-transitiontotime"><inline classes="std std-ref">TransitionToTime</inline></reference>, fade_mode: <reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference>, fade_beats: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, use_filler_clip: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, filler_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, hold_previous: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加两个剪辑之间的过渡。请提供来源剪辑和目标剪辑的索引号，或者使用 <reference internal="True" refid="class-audiostreaminteractive-constant-clip-any"><inline classes="std std-ref">CLIP_ANY</inline></reference> 常量表示过渡自/至任意剪辑。</paragraph>
            <paragraph>* <literal>from_time</literal> 表示触发后当前剪辑开始过渡的时机。</paragraph>
            <paragraph>* <literal>to_time</literal> 表示下一剪辑开始播放的时间。</paragraph>
            <paragraph>* <literal>fade_mode</literal> 表示两个剪辑之间的过渡方式。如果不确定，请使用 <reference internal="True" refid="class-audiostreaminteractive-constant-fade-automatic"><inline classes="std std-ref">FADE_AUTOMATIC</inline></reference>，会根据实际情况使用最常见的渐隐类型。</paragraph>
            <paragraph>* <literal>fade_beats</literal> 表示过渡所需的节拍数。可以使用小数。</paragraph>
            <paragraph>* <literal>use_filler_clip</literal> 表示来源和目标剪辑之间会使用填充剪辑。</paragraph>
            <paragraph>* <literal>filler_clip</literal> 为填充剪辑的索引号。</paragraph>
            <paragraph>* 如果使用了 <literal>hold_previous</literal>，则会记住该剪辑。配合 <reference internal="True" refid="class-audiostreaminteractive-constant-auto-advance-return-to-hold"><inline classes="std std-ref">AUTO_ADVANCE_RETURN_TO_HOLD</inline></reference> 使用可以在另一个剪辑播放完成后回到该剪辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-erase-transition"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-erase-transition" names="class_audiostreaminteractive_method_erase_transition"><abbreviation explanation="无返回值。">void</abbreviation> <strong>erase_transition</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audiostreaminteractive-method-erase-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>擦除过渡，需要提供剪辑索引号 <literal>from_clip</literal> 和 <literal>to_clip</literal>。两者均可使用 <reference internal="True" refid="class-audiostreaminteractive-constant-clip-any"><inline classes="std std-ref">CLIP_ANY</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-clip-auto-advance"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-clip-auto-advance" names="class_audiostreaminteractive_method_get_clip_auto_advance"><reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">AutoAdvanceMode</inline></reference> <strong>get_clip_auto_advance</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-clip-auto-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回剪辑是否启用了自动推进。见 <reference internal="True" refid="class-audiostreaminteractive-method-set-clip-auto-advance"><inline classes="std std-ref">set_clip_auto_advance</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-clip-auto-advance-next-clip"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-clip-auto-advance-next-clip" names="class_audiostreaminteractive_method_get_clip_auto_advance_next_clip"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_clip_auto_advance_next_clip</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-clip-auto-advance-next-clip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>clip_index</literal> 所引用的剪辑会自动推进至哪个剪辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-clip-name"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-clip-name" names="class_audiostreaminteractive_method_get_clip_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_clip_name</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-clip-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回剪辑的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-clip-stream"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-clip-stream" names="class_audiostreaminteractive_method_get_clip_stream"><reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> <strong>get_clip_stream</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-clip-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与剪辑关联的 <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-transition-fade-beats"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-transition-fade-beats" names="class_audiostreaminteractive_method_get_transition_fade_beats"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_transition_fade_beats</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-transition-fade-beats"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡的时间，单位为拍（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-transition-fade-mode"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-transition-fade-mode" names="class_audiostreaminteractive_method_get_transition_fade_mode"><reference internal="True" refid="enum-audiostreaminteractive-fademode"><inline classes="std std-ref">FadeMode</inline></reference> <strong>get_transition_fade_mode</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-transition-fade-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡的模式（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-transition-filler-clip"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-transition-filler-clip" names="class_audiostreaminteractive_method_get_transition_filler_clip"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_transition_filler_clip</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-transition-filler-clip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡的填充剪辑（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-transition-from-time"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-transition-from-time" names="class_audiostreaminteractive_method_get_transition_from_time"><reference internal="True" refid="enum-audiostreaminteractive-transitionfromtime"><inline classes="std std-ref">TransitionFromTime</inline></reference> <strong>get_transition_from_time</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-transition-from-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡的来源时间位置（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-transition-list"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-transition-list" names="class_audiostreaminteractive_method_get_transition_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_transition_list</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-transition-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡列表（来源、目标互相穿插）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-get-transition-to-time"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-get-transition-to-time" names="class_audiostreaminteractive_method_get_transition_to_time"><reference internal="True" refid="enum-audiostreaminteractive-transitiontotime"><inline classes="std std-ref">TransitionToTime</inline></reference> <strong>get_transition_to_time</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-get-transition-to-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡的目标时间位置（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-has-transition"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-has-transition" names="class_audiostreaminteractive_method_has_transition"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_transition</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-has-transition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果存在给定的过渡则返回 true（通过 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference> 添加）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-is-transition-holding-previous"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-is-transition-holding-previous" names="class_audiostreaminteractive_method_is_transition_holding_previous"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_transition_holding_previous</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-is-transition-holding-previous"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡是否使用了<emphasis>保持上一个</emphasis>功能（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-is-transition-using-filler-clip"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-is-transition-using-filler-clip" names="class_audiostreaminteractive_method_is_transition_using_filler_clip"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_transition_using_filler_clip</strong>(from_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreaminteractive-method-is-transition-using-filler-clip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回过渡是否使用了<emphasis>填充剪辑</emphasis>功能（见 <reference internal="True" refid="class-audiostreaminteractive-method-add-transition"><inline classes="std std-ref">add_transition</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-set-clip-auto-advance"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-set-clip-auto-advance" names="class_audiostreaminteractive_method_set_clip_auto_advance"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_auto_advance</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mode: <reference internal="True" refid="enum-audiostreaminteractive-autoadvancemode"><inline classes="std std-ref">AutoAdvanceMode</inline></reference>) <reference internal="True" refid="class-audiostreaminteractive-method-set-clip-auto-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过更改自动前进模式来设置剪辑是否自动前进。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-set-clip-auto-advance-next-clip"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-set-clip-auto-advance-next-clip" names="class_audiostreaminteractive_method_set_clip_auto_advance_next_clip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_auto_advance_next_clip</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, auto_advance_next_clip: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audiostreaminteractive-method-set-clip-auto-advance-next-clip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置下一个剪辑的索引，此剪辑完成后将自动前进到该索引。如果正在播放的剪辑循环播放，则自动前进将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-set-clip-name"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-set-clip-name" names="class_audiostreaminteractive_method_set_clip_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_name</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-audiostreaminteractive-method-set-clip-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当前剪辑的名称（方便识别）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreaminteractive-method-set-clip-stream"></target>
            <paragraph classes="classref-method" ids="class-audiostreaminteractive-method-set-clip-stream" names="class_audiostreaminteractive_method_set_clip_stream"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_stream</strong>(clip_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>) <reference internal="True" refid="class-audiostreaminteractive-method-set-clip-stream"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与当前剪辑关联的 <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
