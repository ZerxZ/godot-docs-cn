<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_openxrinterface.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/openxr/doc_classes/OpenXRInterface.xml.</comment>
    <target refid="class-openxrinterface"></target>
    <section ids="openxrinterface class-openxrinterface" names="openxrinterface class_openxrinterface">
        <title>OpenXRInterface</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>OpenXR 接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>OpenXR 接口允许 Godot 与 OpenXR 运行时进行交互，并使创建 XR 体验和游戏成为可能。</paragraph>
            <paragraph>由于 OpenXR 的需要，该接口的工作方式与其他基于插件的 XR 接口略有不同。它需要在 Godot 启动时被初始化。若需要启用 OpenXR，相关设置可以在游戏项目设置中的 XR 标题下找到。你确实需要标记一个视口以与 XR 一起使用，以便 Godot 知道应该将哪个渲染结果输出到头戴式设备。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/xr/setting_up_xr"><inline classes="doc">设置 XR</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="100"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-property-display-refresh-rate"><inline classes="std std-ref">display_refresh_rate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-property-foveation-dynamic"><inline classes="std std-ref">foveation_dynamic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-property-foveation-level"><inline classes="std std-ref">foveation_level</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-property-render-target-size-multiplier"><inline classes="std std-ref">render_target_size_multiplier</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-property-vrs-min-radius"><inline classes="std std-ref">vrs_min_radius</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>20.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-property-vrs-strength"><inline classes="std std-ref">vrs_strength</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="74"></colspec>
                    <colspec colwidth="223"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-action-sets"><inline classes="std std-ref">get_action_sets</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-available-display-refresh-rates"><inline classes="std std-ref">get_available_display_refresh_rates</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-hand-joint-angular-velocity"><inline classes="std std-ref">get_hand_joint_angular_velocity</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-hand-joint-flags"><inline classes="std std-ref">get_hand_joint_flags</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-hand-joint-linear-velocity"><inline classes="std std-ref">get_hand_joint_linear_velocity</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-hand-joint-position"><inline classes="std std-ref">get_hand_joint_position</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-hand-joint-radius"><inline classes="std std-ref">get_hand_joint_radius</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-hand-joint-rotation"><inline classes="std std-ref">get_hand_joint_rotation</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-openxrinterface-handtrackedsource"><inline classes="std std-ref">HandTrackedSource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-hand-tracking-source"><inline classes="std std-ref">get_hand_tracking_source</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">HandMotionRange</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-get-motion-range"><inline classes="std std-ref">get_motion_range</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-is-action-set-active"><inline classes="std std-ref">is_action_set_active</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-is-eye-gaze-interaction-supported"><inline classes="std std-ref">is_eye_gaze_interaction_supported</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-is-foveation-supported"><inline classes="std std-ref">is_foveation_supported</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-is-hand-interaction-supported"><inline classes="std std-ref">is_hand_interaction_supported</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-is-hand-tracking-supported"><inline classes="std std-ref">is_hand_tracking_supported</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-set-action-set-active"><inline classes="std std-ref">set_action_set_active</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrinterface-method-set-motion-range"><inline classes="std std-ref">set_motion_range</inline></reference>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, motion_range: <reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">HandMotionRange</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-openxrinterface-signal-instance-exiting"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-instance-exiting" names="class_openxrinterface_signal_instance_exiting"><strong>instance_exiting</strong>() <reference internal="True" refid="class-openxrinterface-signal-instance-exiting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知我们的 OpenXR 实例正在退出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-signal-pose-recentered"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-pose-recentered" names="class_openxrinterface_signal_pose_recentered"><strong>pose_recentered</strong>() <reference internal="True" refid="class-openxrinterface-signal-pose-recentered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知用户队列玩家位置的重新居中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-signal-refresh-rate-changed"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-refresh-rate-changed" names="class_openxrinterface_signal_refresh_rate_changed"><strong>refresh_rate_changed</strong>(refresh_rate: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-openxrinterface-signal-refresh-rate-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知用户 HMD 刷新率发生了变化。</paragraph>
            <paragraph><strong>注意：</strong>仅在 XR 运行时支持刷新率扩展时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-signal-session-begun"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-session-begun" names="class_openxrinterface_signal_session_begun"><strong>session_begun</strong>() <reference internal="True" refid="class-openxrinterface-signal-session-begun"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知我们的 OpenXR 会话已经开始。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-signal-session-focussed"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-session-focussed" names="class_openxrinterface_signal_session_focussed"><strong>session_focussed</strong>() <reference internal="True" refid="class-openxrinterface-signal-session-focussed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知我们的 OpenXR 会话现在获得了焦点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-signal-session-loss-pending"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-session-loss-pending" names="class_openxrinterface_signal_session_loss_pending"><strong>session_loss_pending</strong>() <reference internal="True" refid="class-openxrinterface-signal-session-loss-pending"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知我们的 OpenXR 会话正处于丢失过程中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-signal-session-stopping"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-session-stopping" names="class_openxrinterface_signal_session_stopping"><strong>session_stopping</strong>() <reference internal="True" refid="class-openxrinterface-signal-session-stopping"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知我们的 OpenXR 会话正在停止。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-signal-session-visible"></target>
            <paragraph classes="classref-signal" ids="class-openxrinterface-signal-session-visible" names="class_openxrinterface_signal_session_visible"><strong>session_visible</strong>() <reference internal="True" refid="class-openxrinterface-signal-session-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知我们的 OpenXR 会话现在可见（输出正在发送到 HMD）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-openxrinterface-hand"></target>
            <paragraph classes="classref-enumeration" ids="enum-openxrinterface-hand" names="enum_openxrinterface_hand">enum <strong>Hand</strong>: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-openxrinterface-constant-hand-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-left" names="class_openxrinterface_constant_hand_left"><reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference> <strong>HAND_LEFT</strong> = <literal>0</literal></paragraph>
            <paragraph>左手。</paragraph>
            <target refid="class-openxrinterface-constant-hand-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-right" names="class_openxrinterface_constant_hand_right"><reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference> <strong>HAND_RIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph>右手。</paragraph>
            <target refid="class-openxrinterface-constant-hand-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-max" names="class_openxrinterface_constant_hand_max"><reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference> <strong>HAND_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>手部枚举的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-openxrinterface-handmotionrange"></target>
            <paragraph classes="classref-enumeration" ids="enum-openxrinterface-handmotionrange" names="enum_openxrinterface_handmotionrange">enum <strong>HandMotionRange</strong>: <reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-openxrinterface-constant-hand-motion-range-unobstructed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-motion-range-unobstructed" names="class_openxrinterface_constant_hand_motion_range_unobstructed"><reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">HandMotionRange</inline></reference> <strong>HAND_MOTION_RANGE_UNOBSTRUCTED</strong> = <literal>0</literal></paragraph>
            <paragraph>全手范围，如果用户握紧双手，我们会握紧拳头。</paragraph>
            <target refid="class-openxrinterface-constant-hand-motion-range-conform-to-controller"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-motion-range-conform-to-controller" names="class_openxrinterface_constant_hand_motion_range_conform_to_controller"><reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">HandMotionRange</inline></reference> <strong>HAND_MOTION_RANGE_CONFORM_TO_CONTROLLER</strong> = <literal>1</literal></paragraph>
            <paragraph>符合控制器，如果用户合上手，则跟踪的数据符合控制器的形状。</paragraph>
            <target refid="class-openxrinterface-constant-hand-motion-range-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-motion-range-max" names="class_openxrinterface_constant_hand_motion_range_max"><reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">HandMotionRange</inline></reference> <strong>HAND_MOTION_RANGE_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>运动范围枚举的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-openxrinterface-handtrackedsource"></target>
            <paragraph classes="classref-enumeration" ids="enum-openxrinterface-handtrackedsource" names="enum_openxrinterface_handtrackedsource">enum <strong>HandTrackedSource</strong>: <reference internal="True" refid="enum-openxrinterface-handtrackedsource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-openxrinterface-constant-hand-tracked-source-unknown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-tracked-source-unknown" names="class_openxrinterface_constant_hand_tracked_source_unknown"><reference internal="True" refid="enum-openxrinterface-handtrackedsource"><inline classes="std std-ref">HandTrackedSource</inline></reference> <strong>HAND_TRACKED_SOURCE_UNKNOWN</strong> = <literal>0</literal></paragraph>
            <paragraph>手部跟踪数据的来源未知（该扩展可能不受支持）。</paragraph>
            <target refid="class-openxrinterface-constant-hand-tracked-source-unobstructed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-tracked-source-unobstructed" names="class_openxrinterface_constant_hand_tracked_source_unobstructed"><reference internal="True" refid="enum-openxrinterface-handtrackedsource"><inline classes="std std-ref">HandTrackedSource</inline></reference> <strong>HAND_TRACKED_SOURCE_UNOBSTRUCTED</strong> = <literal>1</literal></paragraph>
            <paragraph>手部跟踪的来源是畅通的，这意味着使用了准确的手部跟踪方法，例如光学手部跟踪、数据手套等。</paragraph>
            <target refid="class-openxrinterface-constant-hand-tracked-source-controller"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-tracked-source-controller" names="class_openxrinterface_constant_hand_tracked_source_controller"><reference internal="True" refid="enum-openxrinterface-handtrackedsource"><inline classes="std std-ref">HandTrackedSource</inline></reference> <strong>HAND_TRACKED_SOURCE_CONTROLLER</strong> = <literal>2</literal></paragraph>
            <paragraph>手部跟踪的来源是控制器，骨骼位置是根据控制器输入推断的。</paragraph>
            <target refid="class-openxrinterface-constant-hand-tracked-source-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-tracked-source-max" names="class_openxrinterface_constant_hand_tracked_source_max"><reference internal="True" refid="enum-openxrinterface-handtrackedsource"><inline classes="std std-ref">HandTrackedSource</inline></reference> <strong>HAND_TRACKED_SOURCE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>手部跟踪源枚举的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-openxrinterface-handjoints"></target>
            <paragraph classes="classref-enumeration" ids="enum-openxrinterface-handjoints" names="enum_openxrinterface_handjoints">enum <strong>HandJoints</strong>: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-palm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-palm" names="class_openxrinterface_constant_hand_joint_palm"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_PALM</strong> = <literal>0</literal></paragraph>
            <paragraph>掌关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-wrist"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-wrist" names="class_openxrinterface_constant_hand_joint_wrist"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_WRIST</strong> = <literal>1</literal></paragraph>
            <paragraph>腕关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-thumb-metacarpal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-thumb-metacarpal" names="class_openxrinterface_constant_hand_joint_thumb_metacarpal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_THUMB_METACARPAL</strong> = <literal>2</literal></paragraph>
            <paragraph>掌骨拇指关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-thumb-proximal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-thumb-proximal" names="class_openxrinterface_constant_hand_joint_thumb_proximal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_THUMB_PROXIMAL</strong> = <literal>3</literal></paragraph>
            <paragraph>拇指近端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-thumb-distal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-thumb-distal" names="class_openxrinterface_constant_hand_joint_thumb_distal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_THUMB_DISTAL</strong> = <literal>4</literal></paragraph>
            <paragraph>拇指远端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-thumb-tip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-thumb-tip" names="class_openxrinterface_constant_hand_joint_thumb_tip"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_THUMB_TIP</strong> = <literal>5</literal></paragraph>
            <paragraph>拇指尖端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-index-metacarpal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-index-metacarpal" names="class_openxrinterface_constant_hand_joint_index_metacarpal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_INDEX_METACARPAL</strong> = <literal>6</literal></paragraph>
            <paragraph>掌骨食指关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-index-proximal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-index-proximal" names="class_openxrinterface_constant_hand_joint_index_proximal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_INDEX_PROXIMAL</strong> = <literal>7</literal></paragraph>
            <paragraph>食指近端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-index-intermediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-index-intermediate" names="class_openxrinterface_constant_hand_joint_index_intermediate"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_INDEX_INTERMEDIATE</strong> = <literal>8</literal></paragraph>
            <paragraph>食指中间关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-index-distal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-index-distal" names="class_openxrinterface_constant_hand_joint_index_distal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_INDEX_DISTAL</strong> = <literal>9</literal></paragraph>
            <paragraph>食指远端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-index-tip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-index-tip" names="class_openxrinterface_constant_hand_joint_index_tip"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_INDEX_TIP</strong> = <literal>10</literal></paragraph>
            <paragraph>食指尖端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-middle-metacarpal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-middle-metacarpal" names="class_openxrinterface_constant_hand_joint_middle_metacarpal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_MIDDLE_METACARPAL</strong> = <literal>11</literal></paragraph>
            <paragraph>掌骨中指关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-middle-proximal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-middle-proximal" names="class_openxrinterface_constant_hand_joint_middle_proximal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_MIDDLE_PROXIMAL</strong> = <literal>12</literal></paragraph>
            <paragraph>中指近端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-middle-intermediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-middle-intermediate" names="class_openxrinterface_constant_hand_joint_middle_intermediate"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_MIDDLE_INTERMEDIATE</strong> = <literal>13</literal></paragraph>
            <paragraph>中指中间关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-middle-distal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-middle-distal" names="class_openxrinterface_constant_hand_joint_middle_distal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_MIDDLE_DISTAL</strong> = <literal>14</literal></paragraph>
            <paragraph>中指远端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-middle-tip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-middle-tip" names="class_openxrinterface_constant_hand_joint_middle_tip"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_MIDDLE_TIP</strong> = <literal>15</literal></paragraph>
            <paragraph>中指尖端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-ring-metacarpal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-ring-metacarpal" names="class_openxrinterface_constant_hand_joint_ring_metacarpal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_RING_METACARPAL</strong> = <literal>16</literal></paragraph>
            <paragraph>环指掌骨关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-ring-proximal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-ring-proximal" names="class_openxrinterface_constant_hand_joint_ring_proximal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_RING_PROXIMAL</strong> = <literal>17</literal></paragraph>
            <paragraph>环指近端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-ring-intermediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-ring-intermediate" names="class_openxrinterface_constant_hand_joint_ring_intermediate"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_RING_INTERMEDIATE</strong> = <literal>18</literal></paragraph>
            <paragraph>环指中间关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-ring-distal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-ring-distal" names="class_openxrinterface_constant_hand_joint_ring_distal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_RING_DISTAL</strong> = <literal>19</literal></paragraph>
            <paragraph>环指远端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-ring-tip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-ring-tip" names="class_openxrinterface_constant_hand_joint_ring_tip"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_RING_TIP</strong> = <literal>20</literal></paragraph>
            <paragraph>环指尖端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-little-metacarpal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-little-metacarpal" names="class_openxrinterface_constant_hand_joint_little_metacarpal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_LITTLE_METACARPAL</strong> = <literal>21</literal></paragraph>
            <paragraph>掌骨小指关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-little-proximal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-little-proximal" names="class_openxrinterface_constant_hand_joint_little_proximal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_LITTLE_PROXIMAL</strong> = <literal>22</literal></paragraph>
            <paragraph>小指近端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-little-intermediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-little-intermediate" names="class_openxrinterface_constant_hand_joint_little_intermediate"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_LITTLE_INTERMEDIATE</strong> = <literal>23</literal></paragraph>
            <paragraph>小指中间关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-little-distal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-little-distal" names="class_openxrinterface_constant_hand_joint_little_distal"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_LITTLE_DISTAL</strong> = <literal>24</literal></paragraph>
            <paragraph>小指远端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-little-tip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-little-tip" names="class_openxrinterface_constant_hand_joint_little_tip"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_LITTLE_TIP</strong> = <literal>25</literal></paragraph>
            <paragraph>小指尖端关节。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-max" names="class_openxrinterface_constant_hand_joint_max"><reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference> <strong>HAND_JOINT_MAX</strong> = <literal>26</literal></paragraph>
            <paragraph>手关节枚举的最大值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-openxrinterface-handjointflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-openxrinterface-handjointflags" names="enum_openxrinterface_handjointflags">flags <strong>HandJointFlags</strong>: <reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-none" names="class_openxrinterface_constant_hand_joint_none"><reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference> <strong>HAND_JOINT_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>没有标志被设置。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-orientation-valid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-orientation-valid" names="class_openxrinterface_constant_hand_joint_orientation_valid"><reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference> <strong>HAND_JOINT_ORIENTATION_VALID</strong> = <literal>1</literal></paragraph>
            <paragraph>如果设置，则方向数据有效；否则，方向数据不可靠，且不应被使用。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-orientation-tracked"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-orientation-tracked" names="class_openxrinterface_constant_hand_joint_orientation_tracked"><reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference> <strong>HAND_JOINT_ORIENTATION_TRACKED</strong> = <literal>2</literal></paragraph>
            <paragraph>如果设置，则方向数据来自跟踪数据；否则，该方向数据包含预测数据。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-position-valid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-position-valid" names="class_openxrinterface_constant_hand_joint_position_valid"><reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference> <strong>HAND_JOINT_POSITION_VALID</strong> = <literal>4</literal></paragraph>
            <paragraph>如果设置，则位置数据有效；否则，该位置数据不可靠，且不应被使用。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-position-tracked"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-position-tracked" names="class_openxrinterface_constant_hand_joint_position_tracked"><reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference> <strong>HAND_JOINT_POSITION_TRACKED</strong> = <literal>8</literal></paragraph>
            <paragraph>如果设置，则位置数据来自跟踪数据；否则，该位置数据包含预测数据。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-linear-velocity-valid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-linear-velocity-valid" names="class_openxrinterface_constant_hand_joint_linear_velocity_valid"><reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference> <strong>HAND_JOINT_LINEAR_VELOCITY_VALID</strong> = <literal>16</literal></paragraph>
            <paragraph>如果设置，则线速度数据有效；否则，线速度数据不可靠，且不应被使用。</paragraph>
            <target refid="class-openxrinterface-constant-hand-joint-angular-velocity-valid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-openxrinterface-constant-hand-joint-angular-velocity-valid" names="class_openxrinterface_constant_hand_joint_angular_velocity_valid"><reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference> <strong>HAND_JOINT_ANGULAR_VELOCITY_VALID</strong> = <literal>32</literal></paragraph>
            <paragraph>如果设置，则角速度数据是有效的；否则，角速度数据不可靠，且不应被使用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-openxrinterface-property-display-refresh-rate"></target>
            <paragraph classes="classref-property" ids="class-openxrinterface-property-display-refresh-rate" names="class_openxrinterface_property_display_refresh_rate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>display_refresh_rate</strong> = <literal>0.0</literal> <reference internal="True" refid="class-openxrinterface-property-display-refresh-rate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_display_refresh_rate</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_display_refresh_rate</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前 HMD 的显示刷新率。仅当 OpenXR 运行时支持该功能并且接口已被初始化后才会有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-property-foveation-dynamic"></target>
            <paragraph classes="classref-property" ids="class-openxrinterface-property-foveation-dynamic" names="class_openxrinterface_property_foveation_dynamic"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>foveation_dynamic</strong> = <literal>false</literal> <reference internal="True" refid="class-openxrinterface-property-foveation-dynamic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_foveation_dynamic</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_foveation_dynamic</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用动态注视点调整，必须先初始化接口才能访问该功能。如果启用，注视点将在低和 <reference internal="True" refid="class-openxrinterface-property-foveation-level"><inline classes="std std-ref">foveation_level</inline></reference> 之间自动调整。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于兼容性渲染器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-property-foveation-level"></target>
            <paragraph classes="classref-property" ids="class-openxrinterface-property-foveation-level" names="class_openxrinterface_property_foveation_level"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>foveation_level</strong> = <literal>0</literal> <reference internal="True" refid="class-openxrinterface-property-foveation-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_foveation_level</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_foveation_level</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将注视点级别设置为从 0（关闭）到 3（高），必须先初始化接口，然后才能访问该接口。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于兼容性渲染器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-property-render-target-size-multiplier"></target>
            <paragraph classes="classref-property" ids="class-openxrinterface-property-render-target-size-multiplier" names="class_openxrinterface_property_render_target_size_multiplier"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>render_target_size_multiplier</strong> = <literal>1.0</literal> <reference internal="True" refid="class-openxrinterface-property-render-target-size-multiplier"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_render_target_size_multiplier</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_render_target_size_multiplier</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前 HMD 的渲染大小乘数。必须在接触初始化之前设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-property-vrs-min-radius"></target>
            <paragraph classes="classref-property" ids="class-openxrinterface-property-vrs-min-radius" names="class_openxrinterface_property_vrs_min_radius"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>vrs_min_radius</strong> = <literal>20.0</literal> <reference internal="True" refid="class-openxrinterface-property-vrs-min-radius"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vrs_min_radius</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_vrs_min_radius</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 VRS 用作屏幕大小的百分比，则焦点周围可保证完全质量的最小半径。</paragraph>
            <paragraph><strong>注意：</strong>仅限 Mobile 和 Forward+ 渲染器。需要将 <reference internal="True" refuri="class_viewport#class-viewport-property-vrs-mode"><inline classes="std std-ref">Viewport.vrs_mode</inline></reference> 设置为 <reference internal="True" refuri="class_viewport#class-viewport-constant-vrs-xr"><inline classes="std std-ref">Viewport.VRS_XR</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-property-vrs-strength"></target>
            <paragraph classes="classref-property" ids="class-openxrinterface-property-vrs-strength" names="class_openxrinterface_property_vrs_strength"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>vrs_strength</strong> = <literal>1.0</literal> <reference internal="True" refid="class-openxrinterface-property-vrs-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vrs_strength</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_vrs_strength</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于计算 VRS 密度图的强度。该值越大，VRS 越明显。这会以牺牲质量为代价来提高性能。</paragraph>
            <paragraph><strong>注意：</strong>仅限 Mobile 和 Forward+ 渲染器。需要将 <reference internal="True" refuri="class_viewport#class-viewport-property-vrs-mode"><inline classes="std std-ref">Viewport.vrs_mode</inline></reference> 设置为 <reference internal="True" refuri="class_viewport#class-viewport-constant-vrs-xr"><inline classes="std std-ref">Viewport.VRS_XR</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-openxrinterface-method-get-action-sets"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-action-sets" names="class_openxrinterface_method_get_action_sets"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_action_sets</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-action-sets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回向 Godot 注册的动作集的列表（在运行时从动作映射加载）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-available-display-refresh-rates"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-available-display-refresh-rates" names="class_openxrinterface_method_get_available_display_refresh_rates"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_available_display_refresh_rates</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-available-display-refresh-rates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前 HMD 支持的显示刷新率。仅当 OpenXR 运行时支持该功能并且接口已被初始化后才会返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-hand-joint-angular-velocity"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-hand-joint-angular-velocity" names="class_openxrinterface_method_get_hand_joint_angular_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_hand_joint_angular_velocity</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-hand-joint-angular-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_xrhandtracker#class-xrhandtracker-method-get-hand-joint-angular-velocity"><inline classes="std std-ref">XRHandTracker.get_hand_joint_angular_velocity</inline></reference> obtained from <reference internal="True" refuri="class_xrserver#class-xrserver-method-get-tracker"><inline classes="std std-ref">XRServer.get_tracker</inline></reference> instead.</paragraph>
            <paragraph>如果启用了手部跟踪，则返回 OpenXR 提供的手（<literal>hand</literal>）的关节（<literal>joint</literal>）的角速度。这是相对于 <reference internal="True" refuri="class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> 而言的！</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-hand-joint-flags"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-hand-joint-flags" names="class_openxrinterface_method_get_hand_joint_flags"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-openxrinterface-handjointflags"><inline classes="std std-ref">HandJointFlags</inline></reference>] <strong>get_hand_joint_flags</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-hand-joint-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_xrhandtracker#class-xrhandtracker-method-get-hand-joint-flags"><inline classes="std std-ref">XRHandTracker.get_hand_joint_flags</inline></reference> obtained from <reference internal="True" refuri="class_xrserver#class-xrserver-method-get-tracker"><inline classes="std std-ref">XRServer.get_tracker</inline></reference> instead.</paragraph>
            <paragraph>如果启用了手动跟踪，则返回通知我们跟踪数据有效性的标志。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-hand-joint-linear-velocity"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-hand-joint-linear-velocity" names="class_openxrinterface_method_get_hand_joint_linear_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_hand_joint_linear_velocity</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-hand-joint-linear-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_xrhandtracker#class-xrhandtracker-method-get-hand-joint-linear-velocity"><inline classes="std std-ref">XRHandTracker.get_hand_joint_linear_velocity</inline></reference> obtained from <reference internal="True" refuri="class_xrserver#class-xrserver-method-get-tracker"><inline classes="std std-ref">XRServer.get_tracker</inline></reference> instead.</paragraph>
            <paragraph>如果启用了手部跟踪，则返回 OpenXR 提供的手（<literal>hand</literal>）的关节（<literal>joint</literal>）的线速度。这是相对于没有应用世界尺度的 <reference internal="True" refuri="class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> 而言的！</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-hand-joint-position"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-hand-joint-position" names="class_openxrinterface_method_get_hand_joint_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_hand_joint_position</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-hand-joint-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_xrhandtracker#class-xrhandtracker-method-get-hand-joint-transform"><inline classes="std std-ref">XRHandTracker.get_hand_joint_transform</inline></reference> obtained from <reference internal="True" refuri="class_xrserver#class-xrserver-method-get-tracker"><inline classes="std std-ref">XRServer.get_tracker</inline></reference> instead.</paragraph>
            <paragraph>如果启用了手部跟踪，则返回 OpenXR 提供的手（<literal>hand</literal>）的关节（<literal>joint</literal>）的位置。这是相对于没有应用世界尺度的 <reference internal="True" refuri="class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> 而言的！</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-hand-joint-radius"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-hand-joint-radius" names="class_openxrinterface_method_get_hand_joint_radius"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_hand_joint_radius</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-hand-joint-radius"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_xrhandtracker#class-xrhandtracker-method-get-hand-joint-radius"><inline classes="std std-ref">XRHandTracker.get_hand_joint_radius</inline></reference> obtained from <reference internal="True" refuri="class_xrserver#class-xrserver-method-get-tracker"><inline classes="std std-ref">XRServer.get_tracker</inline></reference> instead.</paragraph>
            <paragraph>如果启用了手部跟踪，则返回 OpenXR 提供的手（<literal>hand</literal>）的关节（<literal>joint</literal>）的半径。这是没有应用世界尺度的情况！</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-hand-joint-rotation"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-hand-joint-rotation" names="class_openxrinterface_method_get_hand_joint_rotation"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>get_hand_joint_rotation</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, joint: <reference internal="True" refid="enum-openxrinterface-handjoints"><inline classes="std std-ref">HandJoints</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-hand-joint-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_xrhandtracker#class-xrhandtracker-method-get-hand-joint-transform"><inline classes="std std-ref">XRHandTracker.get_hand_joint_transform</inline></reference> obtained from <reference internal="True" refuri="class_xrserver#class-xrserver-method-get-tracker"><inline classes="std std-ref">XRServer.get_tracker</inline></reference> instead.</paragraph>
            <paragraph>如果启用了手部跟踪，则返回 OpenXR 提供的手（<literal>hand</literal>）的关节（<literal>joint</literal>）的旋转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-hand-tracking-source"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-hand-tracking-source" names="class_openxrinterface_method_get_hand_tracking_source"><reference internal="True" refid="enum-openxrinterface-handtrackedsource"><inline classes="std std-ref">HandTrackedSource</inline></reference> <strong>get_hand_tracking_source</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-hand-tracking-source"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_xrhandtracker#class-xrhandtracker-property-hand-tracking-source"><inline classes="std std-ref">XRHandTracker.hand_tracking_source</inline></reference> obtained from <reference internal="True" refuri="class_xrserver#class-xrserver-method-get-tracker"><inline classes="std std-ref">XRServer.get_tracker</inline></reference> instead.</paragraph>
            <paragraph>如果启用了手部跟踪并且支持手部跟踪源，则获取 <literal>hand</literal> 的手部跟踪数据源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-get-motion-range"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-get-motion-range" names="class_openxrinterface_method_get_motion_range"><reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">HandMotionRange</inline></reference> <strong>get_motion_range</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-get-motion-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用了手部跟踪并且支持运动范围，则获取 <literal>hand</literal> 当前配置的运动范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-is-action-set-active"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-is-action-set-active" names="class_openxrinterface_method_is_action_set_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_action_set_active</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-is-action-set-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的动作集处于活动状态，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-is-eye-gaze-interaction-supported"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-is-eye-gaze-interaction-supported" names="class_openxrinterface_method_is_eye_gaze_interaction_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_eye_gaze_interaction_supported</strong>() <reference internal="True" refid="class-openxrinterface-method-is-eye-gaze-interaction-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回眼睛注视交互扩展的功能。</paragraph>
            <paragraph><strong>注意：</strong>这仅在 OpenXR 被初始化后返回一个有效值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-is-foveation-supported"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-is-foveation-supported" names="class_openxrinterface_method_is_foveation_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_foveation_supported</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-is-foveation-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果支持 OpenXR 的注视点扩展，则返回 <literal>true</literal>，在返回有效值之前必须初始化该接口。</paragraph>
            <paragraph><strong>注意：</strong>该功能仅在兼容性渲染器上可用，并且目前仅在某些独立头戴设备上可用。对于 Vulkan，在桌面上将 <reference internal="True" refuri="class_viewport#class-viewport-property-vrs-mode"><inline classes="std std-ref">Viewport.vrs_mode</inline></reference> 设置为 <literal>VRS_XR</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-is-hand-interaction-supported"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-is-hand-interaction-supported" names="class_openxrinterface_method_is_hand_interaction_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_hand_interaction_supported</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-openxrinterface-method-is-hand-interaction-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果支持并启用了 OpenXR 的手部交互配置文件，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>仅在初始化 OpenXR 后才返回有效值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-is-hand-tracking-supported"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-is-hand-tracking-supported" names="class_openxrinterface_method_is_hand_tracking_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_hand_tracking_supported</strong>() <reference internal="True" refid="class-openxrinterface-method-is-hand-tracking-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果支持且已启用 OpenXR 的手部跟踪，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这仅在 OpenXR 已被初始化后返回一个有效值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-set-action-set-active"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-set-action-set-active" names="class_openxrinterface_method_set_action_set_active"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_action_set_active</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, active: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-openxrinterface-method-set-action-set-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的动作集设置为活动或非活动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrinterface-method-set-motion-range"></target>
            <paragraph classes="classref-method" ids="class-openxrinterface-method-set-motion-range" names="class_openxrinterface_method_set_motion_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_motion_range</strong>(hand: <reference internal="True" refid="enum-openxrinterface-hand"><inline classes="std std-ref">Hand</inline></reference>, motion_range: <reference internal="True" refid="enum-openxrinterface-handmotionrange"><inline classes="std std-ref">HandMotionRange</inline></reference>) <reference internal="True" refid="class-openxrinterface-method-set-motion-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用了手部跟踪并且支持运动范围，请将 <literal>hand</literal> 当前配置的运动范围设置为 <literal>motion_range</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
