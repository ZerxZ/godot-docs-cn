<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_treeitem.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TreeItem.xml.</comment>
    <target refid="class-treeitem"></target>
    <section ids="treeitem class-treeitem" names="treeitem class_treeitem">
        <title>TreeItem</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>代表 <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 中某个项目的内部控件。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 控件中的单个项目。可以包含其他 <strong>TreeItem</strong> 作为子级，从而创建层级结构。还可以包含文本和按钮。<strong>TreeItem</strong> 不是 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，在 <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 内部使用。</paragraph>
            <paragraph>要创建 <strong>TreeItem</strong>，请使用 <reference internal="True" refuri="class_tree#class-tree-method-create-item"><inline classes="std std-ref">Tree.create_item</inline></reference> 或 <reference internal="True" refid="class-treeitem-method-create-child"><inline classes="std std-ref">create_child</inline></reference>。要移除 <strong>TreeItem</strong>，请使用 <reference internal="True" refuri="class_object#class-object-method-free"><inline classes="std std-ref">Object.free</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>按钮的 ID 值为 32 位，与始终为 64 位的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 不同。取值范围为 <literal>-2147483648</literal> 到 <literal>2147483647</literal>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="77"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-property-collapsed"><inline classes="std std-ref">collapsed</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-property-custom-minimum-height"><inline classes="std std-ref">custom_minimum_height</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-property-disable-folding"><inline classes="std std-ref">disable_folding</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-property-visible"><inline classes="std std-ref">visible</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="261"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-add-button"><inline classes="std std-ref">add_button</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, tooltip_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-add-child"><inline classes="std std-ref">add_child</inline></reference>(child: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-call-recursive"><inline classes="std std-ref">call_recursive</inline></reference>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-clear-custom-bg-color"><inline classes="std std-ref">clear_custom_bg_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-clear-custom-color"><inline classes="std std-ref">clear_custom_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-create-child"><inline classes="std std-ref">create_child</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-deselect"><inline classes="std std-ref">deselect</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-erase-button"><inline classes="std std-ref">erase_button</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-autowrap-mode"><inline classes="std std-ref">get_autowrap_mode</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-button"><inline classes="std std-ref">get_button</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-button-by-id"><inline classes="std std-ref">get_button_by_id</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-button-color"><inline classes="std std-ref">get_button_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-button-count"><inline classes="std std-ref">get_button_count</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-button-id"><inline classes="std std-ref">get_button_id</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-button-tooltip-text"><inline classes="std std-ref">get_button_tooltip_text</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-cell-mode"><inline classes="std std-ref">get_cell_mode</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-child"><inline classes="std std-ref">get_child</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-child-count"><inline classes="std std-ref">get_child_count</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-children"><inline classes="std std-ref">get_children</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-custom-bg-color"><inline classes="std std-ref">get_custom_bg_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-custom-color"><inline classes="std std-ref">get_custom_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-custom-draw-callback"><inline classes="std std-ref">get_custom_draw_callback</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-custom-font"><inline classes="std std-ref">get_custom_font</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-custom-font-size"><inline classes="std std-ref">get_custom_font_size</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-expand-right"><inline classes="std std-ref">get_expand_right</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-first-child"><inline classes="std std-ref">get_first_child</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-icon"><inline classes="std std-ref">get_icon</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-icon-max-width"><inline classes="std std-ref">get_icon_max_width</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-icon-modulate"><inline classes="std std-ref">get_icon_modulate</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-icon-region"><inline classes="std std-ref">get_icon_region</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-index"><inline classes="std std-ref">get_index</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-language"><inline classes="std std-ref">get_language</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-metadata"><inline classes="std std-ref">get_metadata</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-next"><inline classes="std std-ref">get_next</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-next-in-tree"><inline classes="std std-ref">get_next_in_tree</inline></reference>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-next-visible"><inline classes="std std-ref">get_next_visible</inline></reference>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-parent"><inline classes="std std-ref">get_parent</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-prev"><inline classes="std std-ref">get_prev</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-prev-in-tree"><inline classes="std std-ref">get_prev_in_tree</inline></reference>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-prev-visible"><inline classes="std std-ref">get_prev_visible</inline></reference>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-range"><inline classes="std std-ref">get_range</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-range-config"><inline classes="std std-ref">get_range_config</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-structured-text-bidi-override"><inline classes="std std-ref">get_structured_text_bidi_override</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-structured-text-bidi-override-options"><inline classes="std std-ref">get_structured_text_bidi_override_options</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-suffix"><inline classes="std std-ref">get_suffix</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-text"><inline classes="std std-ref">get_text</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-text-alignment"><inline classes="std std-ref">get_text_alignment</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-text-direction"><inline classes="std std-ref">get_text_direction</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-text-overrun-behavior"><inline classes="std std-ref">get_text_overrun_behavior</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-tooltip-text"><inline classes="std std-ref">get_tooltip_text</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-get-tree"><inline classes="std std-ref">get_tree</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-any-collapsed"><inline classes="std std-ref">is_any_collapsed</inline></reference>(only_visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-button-disabled"><inline classes="std std-ref">is_button_disabled</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-checked"><inline classes="std std-ref">is_checked</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-custom-set-as-button"><inline classes="std std-ref">is_custom_set_as_button</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-edit-multiline"><inline classes="std std-ref">is_edit_multiline</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-editable"><inline classes="std std-ref">is_editable</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-indeterminate"><inline classes="std std-ref">is_indeterminate</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-selectable"><inline classes="std std-ref">is_selectable</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-selected"><inline classes="std std-ref">is_selected</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-is-visible-in-tree"><inline classes="std std-ref">is_visible_in_tree</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-move-after"><inline classes="std std-ref">move_after</inline></reference>(item: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-move-before"><inline classes="std std-ref">move_before</inline></reference>(item: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-propagate-check"><inline classes="std std-ref">propagate_check</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, emit_signal: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-remove-child"><inline classes="std std-ref">remove_child</inline></reference>(child: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-select"><inline classes="std std-ref">select</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-autowrap-mode"><inline classes="std std-ref">set_autowrap_mode</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, autowrap_mode: <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-button"><inline classes="std std-ref">set_button</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-button-color"><inline classes="std std-ref">set_button_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-button-disabled"><inline classes="std std-ref">set_button_disabled</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-button-tooltip-text"><inline classes="std std-ref">set_button_tooltip_text</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-cell-mode"><inline classes="std std-ref">set_cell_mode</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mode: <reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-checked"><inline classes="std std-ref">set_checked</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-collapsed-recursive"><inline classes="std std-ref">set_collapsed_recursive</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-custom-as-button"><inline classes="std std-ref">set_custom_as_button</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-custom-bg-color"><inline classes="std std-ref">set_custom_bg_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, just_outline: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-custom-color"><inline classes="std std-ref">set_custom_color</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-custom-draw"><inline classes="std std-ref">set_custom_draw</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, callback: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-custom-draw-callback"><inline classes="std std-ref">set_custom_draw_callback</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-custom-font"><inline classes="std std-ref">set_custom_font</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-custom-font-size"><inline classes="std std-ref">set_custom_font_size</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-edit-multiline"><inline classes="std std-ref">set_edit_multiline</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, multiline: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-editable"><inline classes="std std-ref">set_editable</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-expand-right"><inline classes="std std-ref">set_expand_right</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-icon"><inline classes="std std-ref">set_icon</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-icon-max-width"><inline classes="std std-ref">set_icon_max_width</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-icon-modulate"><inline classes="std std-ref">set_icon_modulate</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-icon-region"><inline classes="std std-ref">set_icon_region</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, region: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-indeterminate"><inline classes="std std-ref">set_indeterminate</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, indeterminate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-language"><inline classes="std std-ref">set_language</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-metadata"><inline classes="std std-ref">set_metadata</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-range"><inline classes="std std-ref">set_range</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-range-config"><inline classes="std std-ref">set_range_config</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, expr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-selectable"><inline classes="std std-ref">set_selectable</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-structured-text-bidi-override"><inline classes="std std-ref">set_structured_text_bidi_override</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, parser: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-structured-text-bidi-override-options"><inline classes="std std-ref">set_structured_text_bidi_override_options</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-suffix"><inline classes="std std-ref">set_suffix</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-text"><inline classes="std std-ref">set_text</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-text-alignment"><inline classes="std std-ref">set_text_alignment</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text_alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-text-direction"><inline classes="std std-ref">set_text_direction</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, direction: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-text-overrun-behavior"><inline classes="std std-ref">set_text_overrun_behavior</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, overrun_behavior: <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-set-tooltip-text"><inline classes="std std-ref">set_tooltip_text</inline></reference>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-treeitem-method-uncollapse-tree"><inline classes="std std-ref">uncollapse_tree</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-treeitem-treecellmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-treeitem-treecellmode" names="enum_treeitem_treecellmode">enum <strong>TreeCellMode</strong>: <reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-treeitem-constant-cell-mode-string"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-treeitem-constant-cell-mode-string" names="class_treeitem_constant_cell_mode_string"><reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference> <strong>CELL_MODE_STRING</strong> = <literal>0</literal></paragraph>
            <paragraph>Cell shows a string label. When editable, the text can be edited using a <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference>, or a <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> popup if <reference internal="True" refid="class-treeitem-method-set-edit-multiline"><inline classes="std std-ref">set_edit_multiline</inline></reference> is used.</paragraph>
            <target refid="class-treeitem-constant-cell-mode-check"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-treeitem-constant-cell-mode-check" names="class_treeitem_constant_cell_mode_check"><reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference> <strong>CELL_MODE_CHECK</strong> = <literal>1</literal></paragraph>
            <paragraph>Cell shows a checkbox, optionally with text. The checkbox can be pressed, released, or indeterminate (via <reference internal="True" refid="class-treeitem-method-set-indeterminate"><inline classes="std std-ref">set_indeterminate</inline></reference>). The checkbox can't be clicked unless the cell is editable.</paragraph>
            <target refid="class-treeitem-constant-cell-mode-range"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-treeitem-constant-cell-mode-range" names="class_treeitem_constant_cell_mode_range"><reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference> <strong>CELL_MODE_RANGE</strong> = <literal>2</literal></paragraph>
            <paragraph>Cell shows a numeric range. When editable, it can be edited using a range slider. Use <reference internal="True" refid="class-treeitem-method-set-range"><inline classes="std std-ref">set_range</inline></reference> to set the value and <reference internal="True" refid="class-treeitem-method-set-range-config"><inline classes="std std-ref">set_range_config</inline></reference> to configure the range.</paragraph>
            <paragraph>This cell can also be used in a text dropdown mode when you assign a text with <reference internal="True" refid="class-treeitem-method-set-text"><inline classes="std std-ref">set_text</inline></reference>. Separate options with a comma, e.g. <literal>"Option1,Option2,Option3"</literal>.</paragraph>
            <target refid="class-treeitem-constant-cell-mode-icon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-treeitem-constant-cell-mode-icon" names="class_treeitem_constant_cell_mode_icon"><reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference> <strong>CELL_MODE_ICON</strong> = <literal>3</literal></paragraph>
            <paragraph>Cell shows an icon. It can't be edited nor display text.</paragraph>
            <target refid="class-treeitem-constant-cell-mode-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-treeitem-constant-cell-mode-custom" names="class_treeitem_constant_cell_mode_custom"><reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference> <strong>CELL_MODE_CUSTOM</strong> = <literal>4</literal></paragraph>
            <paragraph>Cell shows as a clickable button. It will display an arrow similar to <reference internal="True" refuri="class_optionbutton#class-optionbutton"><inline classes="std std-ref">OptionButton</inline></reference>, but doesn't feature a dropdown (for that you can use <reference internal="True" refid="class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">CELL_MODE_RANGE</inline></reference>). Clicking the button emits the <reference internal="True" refuri="class_tree#class-tree-signal-item-edited"><inline classes="std std-ref">Tree.item_edited</inline></reference> signal. The button is flat by default, you can use <reference internal="True" refid="class-treeitem-method-set-custom-as-button"><inline classes="std std-ref">set_custom_as_button</inline></reference> to display it with a <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>.</paragraph>
            <paragraph>This mode also supports custom drawing using <reference internal="True" refid="class-treeitem-method-set-custom-draw-callback"><inline classes="std std-ref">set_custom_draw_callback</inline></reference>.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-treeitem-property-collapsed"></target>
            <paragraph classes="classref-property" ids="class-treeitem-property-collapsed" names="class_treeitem_property_collapsed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>collapsed</strong> <reference internal="True" refid="class-treeitem-property-collapsed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collapsed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_collapsed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 TreeItem 被折叠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-property-custom-minimum-height"></target>
            <paragraph classes="classref-property" ids="class-treeitem-property-custom-minimum-height" names="class_treeitem_property_custom_minimum_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>custom_minimum_height</strong> <reference internal="True" refid="class-treeitem-property-custom-minimum-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_minimum_height</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_custom_minimum_height</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>自定义最小高度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-property-disable-folding"></target>
            <paragraph classes="classref-property" ids="class-treeitem-property-disable-folding" names="class_treeitem_property_disable_folding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>disable_folding</strong> <reference internal="True" refid="class-treeitem-property-disable-folding"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_disable_folding</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_folding_disabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则这个 TreeItem 禁用折叠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-property-visible"></target>
            <paragraph classes="classref-property" ids="class-treeitem-property-visible" names="class_treeitem_property_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>visible</strong> <reference internal="True" refid="class-treeitem-property-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visible</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>TreeItem</strong> 可见（默认）。</paragraph>
            <paragraph>请注意，如果将 <strong>TreeItem</strong> 设置为不可见，则其子项也将不可见。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-treeitem-method-add-button"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-add-button" names="class_treeitem_method_add_button"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_button</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, tooltip_text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-treeitem-method-add-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>column</literal> 列添加一个带有 <reference internal="True" refuri="class_texture#class-texture"><inline classes="std std-ref">Texture</inline></reference> <literal>button</literal> 的按钮。<literal>id</literal> 用于标识按钮。如果未指定，则使用下一个可用索引，可以在此方法之前调用 <reference internal="True" refid="class-treeitem-method-get-button-count"><inline classes="std std-ref">get_button_count</inline></reference> 来获取该索引。另外，该按钮还可以通过 <literal>disabled</literal> 禁用、通过 <literal>tooltip_text</literal> 设置工具提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-add-child"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-add-child" names="class_treeitem_method_add_child"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_child</strong>(child: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>) <reference internal="True" refid="class-treeitem-method-add-child"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将已解除父子关系的 <strong>TreeItem</strong> 添加为这个树项的直接子项。<literal>child</literal> 树项必须不是任何 <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 的一部分，也不能有任何 <strong>TreeItem</strong> 父级。另见 <reference internal="True" refid="class-treeitem-method-remove-child"><inline classes="std std-ref">remove_child</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-call-recursive"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-call-recursive" names="class_treeitem_method_call_recursive"><abbreviation explanation="无返回值。">void</abbreviation> <strong>call_recursive</strong>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-treeitem-method-call-recursive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>递归调用在实际 TreeItem 及其子项上的 <literal>method</literal>。将参数作为一个逗号分隔列表传递。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-clear-custom-bg-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-clear-custom-bg-color" names="class_treeitem_method_clear_custom_bg_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_custom_bg_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-clear-custom-bg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重置指定列默认的背景颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-clear-custom-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-clear-custom-color" names="class_treeitem_method_clear_custom_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_custom_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-clear-custom-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重置指定列默认的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-create-child"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-create-child" names="class_treeitem_method_create_child"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>create_child</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-treeitem-method-create-child"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建项目并添加为子项。</paragraph>
            <paragraph>新建的项目会插入到索引 <literal>index</literal> 位置（默认的 <literal>-1</literal> 表示最后的位置），如果 <literal>index</literal> 比子项数量大则会作为最后一项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-deselect"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-deselect" names="class_treeitem_method_deselect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>deselect</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-deselect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>取消选择指定列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-erase-button"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-erase-button" names="class_treeitem_method_erase_button"><abbreviation explanation="无返回值。">void</abbreviation> <strong>erase_button</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-erase-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除列 <literal>column</literal> 中索引 <literal>button_index</literal> 处的按钮。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-autowrap-mode"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-autowrap-mode" names="class_treeitem_method_get_autowrap_mode"><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>get_autowrap_mode</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-autowrap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定列 <literal>column</literal> 的文本自动换行模式。默认为 <reference internal="True" refuri="class_textserver#class-textserver-constant-autowrap-off"><inline classes="std std-ref">TextServer.AUTOWRAP_OFF</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-button"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-button" names="class_treeitem_method_get_button"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_button</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>column</literal> 列中索引为 <literal>button_index</literal> 的按钮的 <reference internal="True" refuri="class_texture#class-texture"><inline classes="std std-ref">Texture</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-button-by-id"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-button-by-id" names="class_treeitem_method_get_button_by_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_button_by_id</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-button-by-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果在 <literal>column</literal> 列中存在 ID 为 <literal>id</literal> 的按钮，则返回其索引号，否则返回 -1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-button-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-button-color" names="class_treeitem_method_get_button_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_button_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-button-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回列 <literal>column</literal> 中 ID 为 <literal>id</literal> 的按钮的颜色。如果指定的按钮不存在，则返回 <reference internal="True" refuri="class_color#class-color-constant-black"><inline classes="std std-ref">Color.BLACK</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-button-count"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-button-count" names="class_treeitem_method_get_button_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_button_count</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-button-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>column</literal> 列中按钮的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-button-id"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-button-id" names="class_treeitem_method_get_button_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_button_id</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-button-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>column</literal> 列中索引为 <literal>button_index</literal> 的按钮的 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-button-tooltip-text"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-button-tooltip-text" names="class_treeitem_method_get_button_tooltip_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_button_tooltip_text</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-button-tooltip-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>column</literal> 列中索引为 <literal>button_index</literal> 的按钮的工具提示字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-cell-mode"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-cell-mode" names="class_treeitem_method_get_cell_mode"><reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference> <strong>get_cell_mode</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-cell-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该列的单元格模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-child"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-child" names="class_treeitem_method_get_child"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_child</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-get-child"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按其 <literal>index</literal> 返回一个子项（参见 <reference internal="True" refid="class-treeitem-method-get-child-count"><inline classes="std std-ref">get_child_count</inline></reference>）。该方法通常被用于迭代一个项目的所有子项。</paragraph>
            <paragraph>负索引将从最后一个访问孩子。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-child-count"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-child-count" names="class_treeitem_method_get_child_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_child_count</strong>() <reference internal="True" refid="class-treeitem-method-get-child-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回子项的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-children"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-children" names="class_treeitem_method_get_children"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>] <strong>get_children</strong>() <reference internal="True" refid="class-treeitem-method-get-children"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回引用该项目子级的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-custom-bg-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-custom-bg-color" names="class_treeitem_method_get_custom_bg_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_custom_bg_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-custom-bg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回列 <literal>column</literal> 的自定义背景色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-custom-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-custom-color" names="class_treeitem_method_get_custom_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_custom_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-custom-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回列 <literal>column</literal> 的自定义颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-custom-draw-callback"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-custom-draw-callback" names="class_treeitem_method_get_custom_draw_callback"><reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> <strong>get_custom_draw_callback</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-custom-draw-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回列 <literal>column</literal> 的自定义回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-custom-font"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-custom-font" names="class_treeitem_method_get_custom_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_custom_font</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-custom-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于在 <literal>column</literal> 列绘制文本的自定义字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-custom-font-size"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-custom-font-size" names="class_treeitem_method_get_custom_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_custom_font_size</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-custom-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回用于在 <literal>column</literal> 列绘制文本的自定义字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-expand-right"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-expand-right" names="class_treeitem_method_get_expand_right"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_expand_right</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-expand-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置了 <literal>expand_right</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-first-child"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-first-child" names="class_treeitem_method_get_first_child"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_first_child</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-first-child"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 TreeItem 的第一个子项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-icon"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-icon" names="class_treeitem_method_get_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_icon</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定列的图标 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。如果未设置图标，则会出错。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-icon-max-width"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-icon-max-width" names="class_treeitem_method_get_icon_max_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_icon_max_width</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-icon-max-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定列 <literal>column</literal> 中图标所允许的最大宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-icon-modulate"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-icon-modulate" names="class_treeitem_method_get_icon_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_icon_modulate</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-icon-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回调制列的图标的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-icon-region"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-icon-region" names="class_treeitem_method_get_icon_region"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_icon_region</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-icon-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图标 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 的区域，类型为 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-index"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-index" names="class_treeitem_method_get_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_index</strong>() <reference internal="True" refid="class-treeitem-method-get-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该节点在树中的顺序。例如对第一个子项调用时，得到的位置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-language"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-language" names="class_treeitem_method_get_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目文本的语言代码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-metadata"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-metadata" names="class_treeitem_method_get_metadata"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_metadata</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-metadata"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回使用 <reference internal="True" refid="class-treeitem-method-set-metadata"><inline classes="std std-ref">set_metadata</inline></reference> 为指定列设置的元数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-next"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-next" names="class_treeitem_method_get_next"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_next</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-next"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中的下一个兄弟 TreeItem，如果没有，则返回一个空对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-next-in-tree"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-next-in-tree" names="class_treeitem_method_get_next_in_tree"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_next_in_tree</strong>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-treeitem-method-get-next-in-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中下一个可见的同级 TreeItem（按照深度优先顺序搜索），如果不存在则返回 <literal>null</literal> 对象。</paragraph>
            <paragraph>如果启用了 <literal>wrap</literal>，则当在最后一个元素调用时，该方法将环绕到树中的第一个可见元素，否则它将返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-next-visible"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-next-visible" names="class_treeitem_method_get_next_visible"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_next_visible</strong>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-treeitem-method-get-next-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中下一个可见的同级 TreeItem（按照深度优先顺序搜索），如果不存在则返回 <literal>null</literal> 对象。</paragraph>
            <paragraph>如果启用了 <literal>wrap</literal>，则当在最后一个可见元素调用时，该方法将环绕到树中的第一个可见元素，否则它将返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-parent"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-parent" names="class_treeitem_method_get_parent"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_parent</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回父级 TreeItem，如果没有，则返回一个空对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-prev"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-prev" names="class_treeitem_method_get_prev"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_prev</strong>() <reference internal="True" refid="class-treeitem-method-get-prev"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中的前一个兄弟 TreeItem，如果没有，则返回一个空对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-prev-in-tree"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-prev-in-tree" names="class_treeitem_method_get_prev_in_tree"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_prev_in_tree</strong>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-treeitem-method-get-prev-in-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中前一个同级 TreeItem（按照深度优先顺序搜索），如果不存在则返回 <literal>null</literal> 对象。</paragraph>
            <paragraph>如果启用了 <literal>wrap</literal>，则在第一个可见元素上调用时，该方法将环绕到树中的最后一个可见元素，否则它将返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-prev-visible"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-prev-visible" names="class_treeitem_method_get_prev_visible"><reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_prev_visible</strong>(wrap: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-treeitem-method-get-prev-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回树中前一个可见的同级 TreeItem（按照深度优先顺序搜索），如果不存在则返回 <literal>null</literal> 对象。</paragraph>
            <paragraph>如果启用了 <literal>wrap</literal>，则在第一个可见元素上调用时，该方法将环绕到树中的最后一个可见元素，否则它将返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-range"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-range" names="class_treeitem_method_get_range"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_range</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">CELL_MODE_RANGE</inline></reference> 列的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-range-config"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-range-config" names="class_treeitem_method_get_range_config"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_range_config</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-get-range-config"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含给定列的范围参数的字典。键是“min”、“max”、“step”和“expr”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-structured-text-bidi-override"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-structured-text-bidi-override" names="class_treeitem_method_get_structured_text_bidi_override"><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>get_structured_text_bidi_override</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-structured-text-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the BiDi algorithm override set for this cell.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-structured-text-bidi-override-options" names="class_treeitem_method_get_structured_text_bidi_override_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_structured_text_bidi_override_options</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-structured-text-bidi-override-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the additional BiDi options set for this cell.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-suffix"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-suffix" names="class_treeitem_method_get_suffix"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_suffix</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-suffix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取显示在列值后面的后缀字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-text"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-text" names="class_treeitem_method_get_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定列的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-text-alignment"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-text-alignment" names="class_treeitem_method_get_text_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_text_alignment</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-text-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定列的文本对齐方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-text-direction"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-text-direction" names="class_treeitem_method_get_text_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_text_direction</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目文本的基础书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-text-overrun-behavior"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-text-overrun-behavior" names="class_treeitem_method_get_text_overrun_behavior"><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>get_text_overrun_behavior</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-text-overrun-behavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当给定 <literal>column</literal> 中文本超出项目的边界矩形时的裁剪行为。默认情况下它是 <reference internal="True" refuri="class_textserver#class-textserver-constant-overrun-trim-ellipsis"><inline classes="std std-ref">TextServer.OVERRUN_TRIM_ELLIPSIS</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-tooltip-text"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-tooltip-text" names="class_treeitem_method_get_tooltip_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_tooltip_text</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-tooltip-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的工具提示文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-get-tree"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-get-tree" names="class_treeitem_method_get_tree"><reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> <strong>get_tree</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-get-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回拥有此 TreeItem 的 <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-any-collapsed"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-any-collapsed" names="class_treeitem_method_is_any_collapsed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_any_collapsed</strong>(only_visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-treeitem-method-is-any-collapsed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个 <strong>TreeItem</strong> 或其任意子级为折叠状态，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果 <literal>only_visible</literal> 为 <literal>true</literal>，则会忽略不可见的 <strong>TreeItem</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-button-disabled"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-button-disabled" names="class_treeitem_method_is_button_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_button_disabled</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-is-button-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定列 <literal>column</literal> 上索引为 <literal>button_index</literal> 的按钮被禁用，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-checked"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-checked" names="class_treeitem_method_is_checked"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_checked</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-is-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的列 <literal>column</literal> 被勾选，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-custom-set-as-button"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-custom-set-as-button" names="class_treeitem_method_is_custom_set_as_button"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_custom_set_as_button</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-is-custom-set-as-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the cell was made into a button with <reference internal="True" refid="class-treeitem-method-set-custom-as-button"><inline classes="std std-ref">set_custom_as_button</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-edit-multiline"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-edit-multiline" names="class_treeitem_method_is_edit_multiline"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_edit_multiline</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-is-edit-multiline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的列 <literal>column</literal> 可多行编辑，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-editable"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-editable" names="class_treeitem_method_is_editable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_editable</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-is-editable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的列 <literal>column</literal> 可编辑，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-indeterminate"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-indeterminate" names="class_treeitem_method_is_indeterminate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_indeterminate</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-is-indeterminate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的列 <literal>column</literal> 未确定，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-selectable"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-selectable" names="class_treeitem_method_is_selectable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_selectable</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-is-selectable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的列 <literal>column</literal> 可选，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-selected"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-selected" names="class_treeitem_method_is_selected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_selected</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-is-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的列 <literal>column</literal> 被选中，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-is-visible-in-tree"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-is-visible-in-tree" names="class_treeitem_method_is_visible_in_tree"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible_in_tree</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-treeitem-method-is-visible-in-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if <reference internal="True" refid="class-treeitem-property-visible"><inline classes="std std-ref">visible</inline></reference> is <literal>true</literal> and all its ancestors are also visible.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-move-after"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-move-after" names="class_treeitem_method_move_after"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_after</strong>(item: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>) <reference internal="True" refid="class-treeitem-method-move-after"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将这个 TreeItem 移动至给定的 <literal>item</literal> 之后。</paragraph>
            <paragraph><strong>注意：</strong>无法移动至根部，也无法移动根部。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-move-before"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-move-before" names="class_treeitem_method_move_before"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_before</strong>(item: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>) <reference internal="True" refid="class-treeitem-method-move-before"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将这个 TreeItem 移动至给定的 <literal>item</literal> 之前。</paragraph>
            <paragraph><strong>注意：</strong>无法移动至根部，也无法移动根部。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-propagate-check"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-propagate-check" names="class_treeitem_method_propagate_check"><abbreviation explanation="无返回值。">void</abbreviation> <strong>propagate_check</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, emit_signal: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-treeitem-method-propagate-check"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该项的勾选状态传播给给定 <literal>column</literal> 的子项和父项。可以通过连接到 <reference internal="True" refuri="class_tree#class-tree-signal-check-propagated-to-item"><inline classes="std std-ref">Tree.check_propagated_to_item</inline></reference> 来处理受该方法调用影响的项目。受影响的项目的处理顺序如下：调用该方法的项目、该项的子项，最后是该项的父项。如果 <literal>emit_signal</literal> 为 <literal>false</literal>，则不会发出 <reference internal="True" refuri="class_tree#class-tree-signal-check-propagated-to-item"><inline classes="std std-ref">Tree.check_propagated_to_item</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-remove-child"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-remove-child" names="class_treeitem_method_remove_child"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_child</strong>(child: <reference internal="True" refid="class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>) <reference internal="True" refid="class-treeitem-method-remove-child"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的子项 <strong>TreeItem</strong> 和它的所有子项从 <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 中移除。注意，它并未从内存中释放该项，所以之后可重新使用（见 <reference internal="True" refid="class-treeitem-method-add-child"><inline classes="std std-ref">add_child</inline></reference>）。要完全删除 <strong>TreeItem</strong>，请使用 <reference internal="True" refuri="class_object#class-object-method-free"><inline classes="std std-ref">Object.free</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果你想要将一个子项移动到其他 <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 中，则不必手动先移除再添加，你可以使用 <reference internal="True" refid="class-treeitem-method-move-before"><inline classes="std std-ref">move_before</inline></reference> 或 <reference internal="True" refid="class-treeitem-method-move-after"><inline classes="std std-ref">move_after</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-select"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-select" names="class_treeitem_method_select"><abbreviation explanation="无返回值。">void</abbreviation> <strong>select</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-select"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选中 <literal>column</literal> 指定的列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-autowrap-mode"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-autowrap-mode" names="class_treeitem_method_set_autowrap_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autowrap_mode</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, autowrap_mode: <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-autowrap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定 <literal>column</literal> 的自动换行模式。如果设置为 <reference internal="True" refuri="class_textserver#class-textserver-constant-autowrap-off"><inline classes="std std-ref">TextServer.AUTOWRAP_OFF</inline></reference> 以外的值，则文本将在节点的边界矩形内换行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-button"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-button" names="class_treeitem_method_set_button"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_button</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定列中索引为 <literal>button_index</literal> 的按钮 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 设置为 <literal>button</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-button-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-button-color" names="class_treeitem_method_set_button_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_button_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-button-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定列中索引为 <literal>button_index</literal> 的按钮颜色设置为 <literal>color</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-button-disabled"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-button-disabled" names="class_treeitem_method_set_button_disabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_button_disabled</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-button-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则禁用给定列 <literal>column</literal> 中索引为 <literal>button_index</literal> 的按钮。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-button-tooltip-text"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-button-tooltip-text" names="class_treeitem_method_set_button_tooltip_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_button_tooltip_text</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-button-tooltip-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定 <literal>column</literal> 中索引 <literal>button_index</literal> 处按钮的工具提示文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-cell-mode"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-cell-mode" names="class_treeitem_method_set_cell_mode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cell_mode</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mode: <reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-cell-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the given column's cell mode to <literal>mode</literal>. This determines how the cell is displayed and edited. See <reference internal="True" refid="enum-treeitem-treecellmode"><inline classes="std std-ref">TreeCellMode</inline></reference> constants for details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-checked"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-checked" names="class_treeitem_method_set_checked"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_checked</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>checked</literal> 为 <literal>true</literal>，则给定列 <literal>column</literal> 处于勾选状态。会清空该列的中间状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-collapsed-recursive"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-collapsed-recursive" names="class_treeitem_method_set_collapsed_recursive"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collapsed_recursive</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-collapsed-recursive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>折叠或展开该 <strong>TreeItem</strong> 及该项的所有子级。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-custom-as-button"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-custom-as-button" names="class_treeitem_method_set_custom_as_button"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_as_button</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-custom-as-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Makes a cell with <reference internal="True" refid="class-treeitem-constant-cell-mode-custom"><inline classes="std std-ref">CELL_MODE_CUSTOM</inline></reference> display as a non-flat button with a <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-custom-bg-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-custom-bg-color" names="class_treeitem_method_set_custom_bg_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_bg_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, just_outline: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-treeitem-method-set-custom-bg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的自定义背景颜色，以及是否只将其作为一个轮廓。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-custom-color"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-custom-color" names="class_treeitem_method_set_custom_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_color</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-custom-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的自定义颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-custom-draw"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-custom-draw" names="class_treeitem_method_set_custom_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_draw</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, callback: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-custom-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-treeitem-method-set-custom-draw-callback"><inline classes="std std-ref">set_custom_draw_callback</inline></reference> instead.</paragraph>
            <paragraph>将给定列的自定义绘制回调设置为 <literal>object</literal> 上的 <literal>callback</literal> 方法。</paragraph>
            <paragraph>名为 <literal>callback</literal> 的方法应接受两个参数：被绘制的 <strong>TreeItem</strong> 及其作为一个 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 的位置和大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-custom-draw-callback"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-custom-draw-callback" names="class_treeitem_method_set_custom_draw_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_draw_callback</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-custom-draw-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the given column's custom draw callback. Use an empty <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> (<literal>Callable()</literal>) to clear the custom callback. The cell has to be in <reference internal="True" refid="class-treeitem-constant-cell-mode-custom"><inline classes="std std-ref">CELL_MODE_CUSTOM</inline></reference> to use this feature.</paragraph>
            <paragraph>The <literal>callback</literal> should accept two arguments: the <strong>TreeItem</strong> that is drawn and its position and size as a <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-custom-font"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-custom-font" names="class_treeitem_method_set_custom_font"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_font</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-custom-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于在给定列 <literal>column</literal> 中绘制文本的自定义字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-custom-font-size"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-custom-font-size" names="class_treeitem_method_set_custom_font_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_font_size</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-custom-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置用于在给定列 <literal>column</literal> 中绘制文本的自定义字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-edit-multiline"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-edit-multiline" names="class_treeitem_method_set_edit_multiline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_edit_multiline</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, multiline: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-edit-multiline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>multiline</literal> 为 <literal>true</literal>，则给定的列 <literal>column</literal> 可进行多行编辑。</paragraph>
            <paragraph><strong>注意：</strong>这个选项仅影响编辑该列时所出现控件的类型（<reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference> 或 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference>）。即便该列不可进行多行编辑，也可以通过 <reference internal="True" refid="class-treeitem-method-set-text"><inline classes="std std-ref">set_text</inline></reference> 来设置多行的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-editable"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-editable" names="class_treeitem_method_set_editable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_editable</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-editable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，则给定的列 <literal>column</literal> 可编辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-expand-right"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-expand-right" names="class_treeitem_method_set_expand_right"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_expand_right</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-expand-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enable</literal> 为 <literal>true</literal>，则给定的列 <literal>column</literal> 向右扩展。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-icon"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-icon" names="class_treeitem_method_set_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_icon</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the given cell's icon <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>. The cell has to be in <reference internal="True" refid="class-treeitem-constant-cell-mode-icon"><inline classes="std std-ref">CELL_MODE_ICON</inline></reference> mode.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-icon-max-width"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-icon-max-width" names="class_treeitem_method_set_icon_max_width"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_icon_max_width</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, width: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-icon-max-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列 <literal>column</literal> 所允许的最大图标宽度。这是在图标默认大小和 <reference internal="True" refuri="class_tree#class-tree-theme-constant-icon-max-width"><inline classes="std std-ref">Tree.icon_max_width</inline></reference> 的基础上的限制。高度会根据图标的长宽比调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-icon-modulate"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-icon-modulate" names="class_treeitem_method_set_icon_modulate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_icon_modulate</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-icon-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用 <literal>modulate</literal> 调制给定列的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-icon-region"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-icon-region" names="class_treeitem_method_set_icon_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_icon_region</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, region: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-icon-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的图标的纹理区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-indeterminate"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-indeterminate" names="class_treeitem_method_set_indeterminate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_indeterminate</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, indeterminate: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-indeterminate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>indeterminate</literal> 为 <literal>true</literal>，则给定列 <literal>column</literal> 被标记为未决状态。</paragraph>
            <paragraph><strong>注意：</strong>如果从 <literal>false</literal> 设置为 <literal>true</literal>，则该列的勾选状态会被清除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-language"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-language" names="class_treeitem_method_set_language"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置项目文本的语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-metadata"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-metadata" names="class_treeitem_method_set_metadata"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_metadata</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-metadata"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的元数据，之后可用 <reference internal="True" refid="class-treeitem-method-get-metadata"><inline classes="std std-ref">get_metadata</inline></reference> 进行检索。例如，这可用于存储对原始数据的引用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-range"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-range" names="class_treeitem_method_set_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_range</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refid="class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">CELL_MODE_RANGE</inline></reference> 列的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-range-config"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-range-config" names="class_treeitem_method_set_range_config"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_range_config</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, expr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-treeitem-method-set-range-config"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置列的可接受值的范围。该列必须处于 <reference internal="True" refid="class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">CELL_MODE_RANGE</inline></reference> 模式。</paragraph>
            <paragraph>如果 <literal>expr</literal> 为 <literal>true</literal>，则编辑模式滑块将使用与 <reference internal="True" refuri="class_range#class-range-property-exp-edit"><inline classes="std std-ref">Range.exp_edit</inline></reference> 一样的指数刻度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-selectable"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-selectable" names="class_treeitem_method_set_selectable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_selectable</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-selectable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>selectable</literal> 为 <literal>true</literal>，则给定列 <literal>column</literal> 可选。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-structured-text-bidi-override"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-structured-text-bidi-override" names="class_treeitem_method_set_structured_text_bidi_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, parser: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-structured-text-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Set BiDi algorithm override for the structured text. Has effect for cells that display text.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-structured-text-bidi-override-options" names="class_treeitem_method_set_structured_text_bidi_override_options"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override_options</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, args: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-structured-text-bidi-override-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Set additional options for BiDi override. Has effect for cells that display text.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-suffix"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-suffix" names="class_treeitem_method_set_suffix"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_suffix</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-suffix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字符串，显示在列的值之后（例如，单位的缩写）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-text"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-text" names="class_treeitem_method_set_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的文本值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-text-alignment"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-text-alignment" names="class_treeitem_method_set_text_alignment"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_alignment</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text_alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-text-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的文本对齐方式。可能的值见 <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-text-direction"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-text-direction" names="class_treeitem_method_set_text_direction"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_direction</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, direction: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置项目文本的基础书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-text-overrun-behavior"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-text-overrun-behavior" names="class_treeitem_method_set_text_overrun_behavior"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_overrun_behavior</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, overrun_behavior: <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-text-overrun-behavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置当文本超出给定 <literal>column</literal> 中项目的边界矩形时的裁剪行为。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-set-tooltip-text"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-set-tooltip-text" names="class_treeitem_method_set_tooltip_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tooltip_text</strong>(column: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-treeitem-method-set-tooltip-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定列的工具提示文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-treeitem-method-uncollapse-tree"></target>
            <paragraph classes="classref-method" ids="class-treeitem-method-uncollapse-tree" names="class_treeitem_method_uncollapse_tree"><abbreviation explanation="无返回值。">void</abbreviation> <strong>uncollapse_tree</strong>() <reference internal="True" refid="class-treeitem-method-uncollapse-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>展开显示该 <strong>TreeItem</strong> 所需的所有 <strong>TreeItem</strong>，即所有祖先 <strong>TreeItem</strong>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
