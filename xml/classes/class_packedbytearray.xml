<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_packedbytearray.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/PackedByteArray.xml.</comment>
    <target refid="class-packedbytearray"></target>
    <section ids="packedbytearray class-packedbytearray" names="packedbytearray class_packedbytearray">
        <title>PackedByteArray</title>
        <paragraph>字节紧缩数组。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>An array specifically designed to hold bytes. Packs data tightly, so it saves memory for large array sizes.</paragraph>
            <paragraph><strong>PackedByteArray</strong> also provides methods to encode/decode various types to/from bytes. The way values are encoded is an implementation detail and shouldn't be relied upon when interacting with external apps.</paragraph>
            <paragraph><strong>Note:</strong> Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use <reference internal="True" refid="class-packedbytearray-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>. This is <emphasis>not</emphasis> the case for built-in properties and methods. The returned packed array of these are a copies, and changing it will <emphasis>not</emphasis> affect the original value. To update a built-in property you need to modify the returned array, and then assign it to the property again.</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="135"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-constructor-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-constructor-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>(from: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-constructor-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>(from: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="191"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-append"><inline classes="std std-ref">append</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-append-array"><inline classes="std std-ref">append_array</inline></reference>(array: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-bsearch"><inline classes="std std-ref">bsearch</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, before: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-compress"><inline classes="std std-ref">compress</inline></reference>(compression_mode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-count"><inline classes="std std-ref">count</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-double"><inline classes="std std-ref">decode_double</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-float"><inline classes="std std-ref">decode_float</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-half"><inline classes="std std-ref">decode_half</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-s8"><inline classes="std std-ref">decode_s8</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-s16"><inline classes="std std-ref">decode_s16</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-s32"><inline classes="std std-ref">decode_s32</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-s64"><inline classes="std std-ref">decode_s64</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-u8"><inline classes="std std-ref">decode_u8</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-u16"><inline classes="std std-ref">decode_u16</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-u32"><inline classes="std std-ref">decode_u32</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-u64"><inline classes="std std-ref">decode_u64</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-var"><inline classes="std std-ref">decode_var</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decode-var-size"><inline classes="std std-ref">decode_var_size</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decompress"><inline classes="std std-ref">decompress</inline></reference>(buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, compression_mode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-decompress-dynamic"><inline classes="std std-ref">decompress_dynamic</inline></reference>(max_output_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, compression_mode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-double"><inline classes="std std-ref">encode_double</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-float"><inline classes="std std-ref">encode_float</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-half"><inline classes="std std-ref">encode_half</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-s8"><inline classes="std std-ref">encode_s8</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-s16"><inline classes="std std-ref">encode_s16</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-s32"><inline classes="std std-ref">encode_s32</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-s64"><inline classes="std std-ref">encode_s64</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-u8"><inline classes="std std-ref">encode_u8</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-u16"><inline classes="std std-ref">encode_u16</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-u32"><inline classes="std std-ref">encode_u32</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-u64"><inline classes="std std-ref">encode_u64</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-encode-var"><inline classes="std std-ref">encode_var</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-fill"><inline classes="std std-ref">fill</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-find"><inline classes="std std-ref">find</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-get-string-from-ascii"><inline classes="std std-ref">get_string_from_ascii</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-get-string-from-utf8"><inline classes="std std-ref">get_string_from_utf8</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-get-string-from-utf16"><inline classes="std std-ref">get_string_from_utf16</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-get-string-from-utf32"><inline classes="std std-ref">get_string_from_utf32</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-get-string-from-wchar"><inline classes="std std-ref">get_string_from_wchar</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-has"><inline classes="std std-ref">has</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-has-encoded-var"><inline classes="std std-ref">has_encoded_var</inline></reference>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-hex-encode"><inline classes="std std-ref">hex_encode</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-insert"><inline classes="std std-ref">insert</inline></reference>(at_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-push-back"><inline classes="std std-ref">push_back</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-remove-at"><inline classes="std std-ref">remove_at</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-resize"><inline classes="std std-ref">resize</inline></reference>(new_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-reverse"><inline classes="std std-ref">reverse</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-rfind"><inline classes="std std-ref">rfind</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-set"><inline classes="std std-ref">set</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-size"><inline classes="std std-ref">size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-slice"><inline classes="std std-ref">slice</inline></reference>(begin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2147483647) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-sort"><inline classes="std std-ref">sort</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-to-float32-array"><inline classes="std std-ref">to_float32_array</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-to-float64-array"><inline classes="std std-ref">to_float64_array</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-to-int32-array"><inline classes="std std-ref">to_int32_array</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-method-to-int64-array"><inline classes="std std-ref">to_int64_array</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="133"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-operator-neq-packedbytearray"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-operator-sum-packedbytearray"><inline classes="std std-ref">operator +</inline></reference>(right: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-operator-eq-packedbytearray"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedbytearray-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-packedbytearray-constructor-packedbytearray"></target>
            <paragraph classes="classref-constructor" ids="class-packedbytearray-constructor-packedbytearray" names="class_packedbytearray_constructor_packedbytearray"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>PackedByteArray</strong>() <reference internal="True" refid="class-packedbytearray-constructor-packedbytearray"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造空的 <strong>PackedByteArray</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>PackedByteArray</strong>(from: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>PackedByteArray</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>PackedByteArray</strong>(from: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
            <paragraph>构造新 <strong>PackedByteArray</strong>。你还可以传入通用 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 进行转换。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-packedbytearray-method-append"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-append" names="class_packedbytearray_method_append"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>append</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-append"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向数组末尾追加一个元素（<reference internal="True" refid="class-packedbytearray-method-push-back"><inline classes="std std-ref">push_back</inline></reference> 的别名）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-append-array"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-append-array" names="class_packedbytearray_method_append_array"><abbreviation explanation="无返回值。">void</abbreviation> <strong>append_array</strong>(array: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-append-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该数组的末尾追加一个 <strong>PackedByteArray</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-bsearch"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-bsearch" names="class_packedbytearray_method_bsearch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bsearch</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, before: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-packedbytearray-method-bsearch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用二进法查找已有值的索引（如果该值尚未存在于数组中，则为保持排序顺序的插入索引）。传递 <literal>before</literal> 说明符是可选的。如果该参数为 <literal>false</literal>，则返回的索引位于数组中该值的所有已有的条目之后。</paragraph>
            <paragraph><strong>注意：</strong>在未排序的数组上调用 <reference internal="True" refid="class-packedbytearray-method-bsearch"><inline classes="std std-ref">bsearch</inline></reference> 会产生预料之外的行为。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-clear"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-clear" names="class_packedbytearray_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-packedbytearray-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空数组。相当于调用 <reference internal="True" refid="class-packedbytearray-method-resize"><inline classes="std std-ref">resize</inline></reference> 时指定大小为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-compress"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-compress" names="class_packedbytearray_method_compress"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>compress</strong>(compression_mode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-compress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的 <strong>PackedByteArray</strong>，其中的数据已压缩。请将压缩模式设置为 <reference internal="True" refuri="class_fileaccess#enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-count"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-count" names="class_packedbytearray_method_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>count</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回元素在数组中出现的次数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-double"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-double" names="class_packedbytearray_method_decode_double"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>decode_double</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-double"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 64 位浮点数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-float"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-float" names="class_packedbytearray_method_decode_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>decode_float</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 32 位浮点数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-half"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-half" names="class_packedbytearray_method_decode_half"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>decode_half</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-half"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 16 位浮点数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-s8"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-s8" names="class_packedbytearray_method_decode_s8"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_s8</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-s8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 8 位有符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-s16"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-s16" names="class_packedbytearray_method_decode_s16"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_s16</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-s16"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 16 位有符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-s32"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-s32" names="class_packedbytearray_method_decode_s32"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_s32</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-s32"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 32 位有符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-s64"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-s64" names="class_packedbytearray_method_decode_s64"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_s64</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-s64"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 64 位有符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-u8"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-u8" names="class_packedbytearray_method_decode_u8"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_u8</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-u8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 8 位无符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-u16"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-u16" names="class_packedbytearray_method_decode_u16"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_u16</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-u16"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 16 位无符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-u32"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-u32" names="class_packedbytearray_method_decode_u32"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_u32</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-u32"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 32 位无符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-u64"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-u64" names="class_packedbytearray_method_decode_u64"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_u64</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-u64"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 64 位无符号整数，起始位置字节偏移量为 <literal>byte_offset</literal>。字节数不足时会失败。如果无法解码有效的数字，则返回 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-var"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-var" names="class_packedbytearray_method_decode_var"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>decode_var</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-var"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>，起始位置字节偏移量为 <literal>byte_offset</literal>。如果无法解码有效的变体，或者其值派生自 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 而 <literal>allow_objects</literal> 为 <literal>false</literal>，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decode-var-size"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decode-var-size" names="class_packedbytearray_method_decode_var_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>decode_var_size</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decode-var-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将字节序列解码为 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 的大小，起始位置字节偏移量为 <literal>byte_offset</literal>。要求起始位置后至少有 4 个字节的数据，否则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decompress"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decompress" names="class_packedbytearray_method_decompress"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>decompress</strong>(buffer_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, compression_mode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decompress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的 <strong>PackedByteArray</strong>，其中的数据已解压。请将 <literal>buffer_size</literal> 设置为数据解压后的大小。请将压缩模式设置为 <reference internal="True" refuri="class_fileaccess#enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> 常量。</paragraph>
            <paragraph><strong>注意：</strong>不保证解压缩可以处理未经 Godot 压缩的数据，例如，如果使用 deflate 压缩模式压缩的数据缺少校验和或标头。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-decompress-dynamic"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-decompress-dynamic" names="class_packedbytearray_method_decompress_dynamic"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>decompress_dynamic</strong>(max_output_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, compression_mode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-decompress-dynamic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的 <strong>PackedByteArray</strong>，其中的数据已解压。请将压缩模式设置为 <reference internal="True" refuri="class_fileaccess#enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> 常量。<strong>这个方法只接受 brotli、gzip 和 deflate 压缩模式。</strong></paragraph>
            <paragraph>这个方法可能比 <reference internal="True" refid="class-packedbytearray-method-decompress"><inline classes="std std-ref">decompress</inline></reference> 慢，因为在解压时可能需要多次重新分配输出缓冲区，而 <reference internal="True" refid="class-packedbytearray-method-decompress"><inline classes="std std-ref">decompress</inline></reference> 则在一开始就知道输出缓冲区的大小。</paragraph>
            <paragraph>GZIP 的最大压缩率为 1032:1，这意味着较小的压缩后负载很有可能解压出非常巨大的输出。为了防止这种情况，你可以通过 <literal>max_output_size</literal> 提供允许这个函数分配的最大字节数。传入 -1 则不限制输出。传入正数且解压超过该字节数时，会返回错误。</paragraph>
            <paragraph><strong>注意：</strong>不保证解压缩可以处理未经 Godot 压缩的数据，例如，如果使用 deflate 压缩模式压缩的数据缺少校验和或标头。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-duplicate"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-duplicate" names="class_packedbytearray_method_duplicate"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>duplicate</strong>() <reference internal="True" refid="class-packedbytearray-method-duplicate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建该数组的副本，并将该副本返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-double"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-double" names="class_packedbytearray_method_encode_double"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_double</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-double"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 64 位浮点数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 8 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-float"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-float" names="class_packedbytearray_method_encode_float"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_float</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 32 位浮点数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 4 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-half"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-half" names="class_packedbytearray_method_encode_half"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_half</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-half"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 16 位浮点数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 2 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-s8"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-s8" names="class_packedbytearray_method_encode_s8"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_s8</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-s8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 8 位有符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 1 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-s16"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-s16" names="class_packedbytearray_method_encode_s16"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_s16</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-s16"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 16 位有符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 2 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-s32"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-s32" names="class_packedbytearray_method_encode_s32"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_s32</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-s32"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 32 位无符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 4 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-s64"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-s64" names="class_packedbytearray_method_encode_s64"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_s64</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-s64"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 64 位有符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 8 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-u8"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-u8" names="class_packedbytearray_method_encode_u8"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_u8</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-u8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 8 位无符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 1 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-u16"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-u16" names="class_packedbytearray_method_encode_u16"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_u16</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-u16"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 16 位无符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 2 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-u32"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-u32" names="class_packedbytearray_method_encode_u32"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_u32</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-u32"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 32 位无符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 4 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-u64"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-u64" names="class_packedbytearray_method_encode_u64"><abbreviation explanation="无返回值。">void</abbreviation> <strong>encode_u64</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-encode-u64"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 64 位无符号整数编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。从偏移量位置开始，该数组必须还分配有至少 8 个字节的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-encode-var"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-encode-var" names="class_packedbytearray_method_encode_var"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>encode_var</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-packedbytearray-method-encode-var"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 编码为字节序列，起始位置字节偏移量为 <literal>byte_offset</literal>。必须分配有足够的空间，空间大小取决于编码后变体的大小。如果 <literal>allow_objects</literal> 为 <literal>false</literal>，则不允许派生自 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 的值，只会将其 ID 进行序列化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-fill"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-fill" names="class_packedbytearray_method_fill"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fill</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-fill"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将数组中的所有元素都设为给定的值。通常与 <reference internal="True" refid="class-packedbytearray-method-resize"><inline classes="std std-ref">resize</inline></reference> 一起使用，创建给定大小的数组并初始化元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-find"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-find" names="class_packedbytearray_method_find"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-find"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在数组中搜索值并返回其索引，如果未找到则返回 <literal>-1</literal> 。可选地，可以传递起始搜索索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-get-string-from-ascii"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-get-string-from-ascii" names="class_packedbytearray_method_get_string_from_ascii"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_string_from_ascii</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-get-string-from-ascii"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 ASCII/Latin-1 编码的数组转换为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。如果内容仅为 ASCII/Latin-1，则是比 <reference internal="True" refid="class-packedbytearray-method-get-string-from-utf8"><inline classes="std std-ref">get_string_from_utf8</inline></reference> 更快的选择。与 UTF-8 函数不同，这个函数会将数组中的每个字节都映射到一个字符。多字节序列无法正确解析。要解析用户的输入内容，请始终使用 <reference internal="True" refid="class-packedbytearray-method-get-string-from-utf8"><inline classes="std std-ref">get_string_from_utf8</inline></reference>。这是 <reference internal="True" refuri="class_string#class-string-method-to-ascii-buffer"><inline classes="std std-ref">String.to_ascii_buffer</inline></reference> 的逆运算。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-get-string-from-utf8"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-get-string-from-utf8" names="class_packedbytearray_method_get_string_from_utf8"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_string_from_utf8</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-get-string-from-utf8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 UTF-8 编码的数组转换为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。比 <reference internal="True" refid="class-packedbytearray-method-get-string-from-ascii"><inline classes="std std-ref">get_string_from_ascii</inline></reference> 慢，但支持 UTF-8 编码的数据。不确定数据来源时请使用此函数。对于用户的输入内容，应始终首选此函数。如果源数组不是有效的 UTF-8 字符串，则返回空字符串。这是 <reference internal="True" refuri="class_string#class-string-method-to-utf8-buffer"><inline classes="std std-ref">String.to_utf8_buffer</inline></reference> 的逆运算。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-get-string-from-utf16"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-get-string-from-utf16" names="class_packedbytearray_method_get_string_from_utf16"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_string_from_utf16</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-get-string-from-utf16"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 UTF-16 编码的数组转换为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。如果缺少 BOM，则假定为系统字节序。如果源数组不是有效的 UTF-16 字符串，则返回空字符串。这是 <reference internal="True" refuri="class_string#class-string-method-to-utf16-buffer"><inline classes="std std-ref">String.to_utf16_buffer</inline></reference> 的逆运算。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-get-string-from-utf32"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-get-string-from-utf32" names="class_packedbytearray_method_get_string_from_utf32"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_string_from_utf32</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-get-string-from-utf32"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 UTF-32 编码的数组转换为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。假定为系统字节序。如果源数组不是有效的 UTF-32 字符串，则返回空字符串。这是 <reference internal="True" refuri="class_string#class-string-method-to-utf32-buffer"><inline classes="std std-ref">String.to_utf32_buffer</inline></reference> 的逆运算。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-get-string-from-wchar"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-get-string-from-wchar" names="class_packedbytearray_method_get_string_from_wchar"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_string_from_wchar</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-get-string-from-wchar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将宽字符（<literal>wchar_t</literal>，在 Windows 上为 UTF-16，在其他平台上为 UTF-32）编码的数组转换为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。如果源数组不是有效的宽字符串，则返回空字符串。这是 <reference internal="True" refuri="class_string#class-string-method-to-wchar-buffer"><inline classes="std std-ref">String.to_wchar_buffer</inline></reference> 的逆运算。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-has"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-has" names="class_packedbytearray_method_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-has"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该数组包含 <literal>value</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-has-encoded-var"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-has-encoded-var" names="class_packedbytearray_method_has_encoded_var"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_encoded_var</strong>(byte_offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-has-encoded-var"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果可以从字节偏移量 <literal>byte_offset</literal> 处解码出有效的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>，则返回 <literal>true</literal>。其他情况，或者当该值派生自 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 而 <literal>allow_objects</literal> 为 <literal>false</literal> 时，则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-hex-encode"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-hex-encode" names="class_packedbytearray_method_hex_encode"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>hex_encode</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-hex-encode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该数组的十六进制表示，类型为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var array = PackedByteArray([11, 46, 255])
print(array.hex_encode()) # 输出：0b2eff</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var array = new byte[] {11, 46, 255};
GD.Print(array.HexEncode()); // 输出：0b2eff</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-insert"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-insert" names="class_packedbytearray_method_insert"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>insert</strong>(at_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-insert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在数组中给定的位置插入一个新元素。这个位置必须是有效的，或者是在数组的末端（<literal>idx == size()</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-is-empty"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-is-empty" names="class_packedbytearray_method_is_empty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_empty</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-is-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该数组为空时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-push-back"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-push-back" names="class_packedbytearray_method_push_back"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>push_back</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-push-back"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在数组的末尾追加一个元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-remove-at"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-remove-at" names="class_packedbytearray_method_remove_at"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_at</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-remove-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从数组中删除位于索引的元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-resize"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-resize" names="class_packedbytearray_method_resize"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>resize</strong>(new_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-resize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置数组的大小。如果数组被增大，则保留数组末端的元素。如果数组被缩小，则将数组截断到新的大小。调用一次 <reference internal="True" refid="class-packedbytearray-method-resize"><inline classes="std std-ref">resize</inline></reference> 并分配新值比逐个添加新元素要快。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-reverse"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-reverse" names="class_packedbytearray_method_reverse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reverse</strong>() <reference internal="True" refid="class-packedbytearray-method-reverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将数组中的元素逆序排列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-rfind"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-rfind" names="class_packedbytearray_method_rfind"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>rfind</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-rfind"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>逆序搜索数组。还可以传递起始搜索位置索引。如果为负，则起始索引被视为相对于数组的结尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-set"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-set" names="class_packedbytearray_method_set"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-method-set"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>改变给定索引处的字节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-size"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-size" names="class_packedbytearray_method_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回数组中元素的个数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-slice"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-slice" names="class_packedbytearray_method_slice"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>slice</strong>(begin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2147483647) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-slice"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>PackedByteArray</strong> 的切片，是从 <literal>begin</literal>（含）到 <literal>end</literal>（不含）的全新 <strong>PackedByteArray</strong>。</paragraph>
            <paragraph><literal>begin</literal> 和 <literal>end</literal> 的绝对值会按数组大小进行限制，所以 <literal>end</literal> 的默认值会切到数组大小为止（即 <literal>arr.slice(1)</literal> 是 <literal>arr.slice(1, arr.size())</literal> 的简写）。</paragraph>
            <paragraph>如果 <literal>begin</literal> 或 <literal>end</literal> 为负，则表示相对于数组的末尾（即 <literal>arr.slice(0, -2)</literal> 是 <literal>arr.slice(0, arr.size() - 2)</literal> 的简写）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-sort"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-sort" names="class_packedbytearray_method_sort"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sort</strong>() <reference internal="True" refid="class-packedbytearray-method-sort"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该数组中的元素按升序排列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-to-float32-array"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-to-float32-array" names="class_packedbytearray_method_to_float32_array"><reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> <strong>to_float32_array</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-to-float32-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将数据转换为 <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> 的副本，每 4 个字节块转换为一个 32 位浮点数（C++ 的 <literal>float</literal>）。</paragraph>
            <paragraph>输入数组的大小必须为 4 的倍数（32 位浮点数的大小）。新数组的大小为 <literal>byte_array.size() / 4</literal>。</paragraph>
            <paragraph>如果原始数据无法转换为 32 位浮点数，则最终的数据未定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-to-float64-array"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-to-float64-array" names="class_packedbytearray_method_to_float64_array"><reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference> <strong>to_float64_array</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-to-float64-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将数据转换为 <reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference> 的副本，每 8 个字节块转换为一个 64 位浮点数（C++ 的 <literal>double</literal>）。</paragraph>
            <paragraph>输入数组的大小必须为 8 的倍数（64 位浮点数的大小）。新数组的大小为 <literal>byte_array.size() / 8</literal>。</paragraph>
            <paragraph>如果原始数据无法转换为 64 位浮点数，则最终的数据未定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-to-int32-array"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-to-int32-array" names="class_packedbytearray_method_to_int32_array"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>to_int32_array</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-to-int32-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将数据转换为 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> 的副本，每 4 个字节块转换为一个 32 位有符号整数（C++ 的 <literal>int32_t</literal>）。</paragraph>
            <paragraph>输入数组的大小必须为 4 的倍数（32 位整数的大小）。新数组的大小为 <literal>byte_array.size() / 4</literal>。</paragraph>
            <paragraph>如果原始数据无法转换为 32 位有符号整数，则最终的数据未定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-method-to-int64-array"></target>
            <paragraph classes="classref-method" ids="class-packedbytearray-method-to-int64-array" names="class_packedbytearray_method_to_int64_array"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>to_int64_array</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedbytearray-method-to-int64-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将数据转换为 <reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> 的副本，每 8 个字节块转换为一个 64 位有符号整数（C++ 的 <literal>int64_t</literal>）。</paragraph>
            <paragraph>输入数组的大小必须为 8 的倍数（64 位整数的大小）。新数组的大小为 <literal>byte_array.size() / 8</literal>。</paragraph>
            <paragraph>如果原始数据无法转换为 64 位有符号整数，则最终的数据未定义。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-packedbytearray-operator-neq-packedbytearray"></target>
            <paragraph classes="classref-operator" ids="class-packedbytearray-operator-neq-packedbytearray" names="class_packedbytearray_operator_neq_packedbytearray"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-packedbytearray-operator-neq-packedbytearray"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果数组内容不同，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-operator-sum-packedbytearray"></target>
            <paragraph classes="classref-operator" ids="class-packedbytearray-operator-sum-packedbytearray" names="class_packedbytearray_operator_sum_packedbytearray"><reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>operator +</strong>(right: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-packedbytearray-operator-sum-packedbytearray"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的 <strong>PackedByteArray</strong>，新数组的内容为此数组在末尾加上 <literal>right</literal>。为了提高性能，请考虑改用 <reference internal="True" refid="class-packedbytearray-method-append-array"><inline classes="std std-ref">append_array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-operator-eq-packedbytearray"></target>
            <paragraph classes="classref-operator" ids="class-packedbytearray-operator-eq-packedbytearray" names="class_packedbytearray_operator_eq_packedbytearray"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-packedbytearray-operator-eq-packedbytearray"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个数组的内容相同，即对应索引号的字节相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedbytearray-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-packedbytearray-operator-idx-int" names="class_packedbytearray_operator_idx_int"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator []</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedbytearray-operator-idx-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引 <literal>index</literal> 处的字节。负数索引可以从末尾开始访问元素。使用越界的索引会报错。</paragraph>
            <paragraph>请注意，返回的字节是 64 位 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
