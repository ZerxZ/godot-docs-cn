<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_regexmatch.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/regex/doc_classes/RegExMatch.xml.</comment>
    <target refid="class-regexmatch"></target>
    <section ids="regexmatch class-regexmatch" names="regexmatch class_regexmatch">
        <title>RegExMatch</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>包含 <reference internal="True" refuri="class_regex#class-regex"><inline classes="std std-ref">RegEx</inline></reference> 搜索的结果。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>包含由 <reference internal="True" refuri="class_regex#class-regex-method-search"><inline classes="std std-ref">RegEx.search</inline></reference> 和 <reference internal="True" refuri="class_regex#class-regex-method-search-all"><inline classes="std std-ref">RegEx.search_all</inline></reference> 返回的单个 <reference internal="True" refuri="class_regex#class-regex"><inline classes="std std-ref">RegEx</inline></reference> 匹配结果。它可以用来查找匹配的位置和范围以及它的捕获组，并且可以提取其子字符串。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="25"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-regexmatch-property-names"><inline classes="std std-ref">names</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{}</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-regexmatch-property-strings"><inline classes="std std-ref">strings</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedStringArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-regexmatch-property-subject"><inline classes="std std-ref">subject</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="111"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-regexmatch-method-get-end"><inline classes="std std-ref">get_end</inline></reference>(name: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-regexmatch-method-get-group-count"><inline classes="std std-ref">get_group_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-regexmatch-method-get-start"><inline classes="std std-ref">get_start</inline></reference>(name: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-regexmatch-method-get-string"><inline classes="std std-ref">get_string</inline></reference>(name: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-regexmatch-property-names"></target>
            <paragraph classes="classref-property" ids="class-regexmatch-property-names" names="class_regexmatch_property_names"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>names</strong> = <literal>{}</literal> <reference internal="True" refid="class-regexmatch-property-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_names</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>命名组的字典和它相应的组号。只有被匹配的组才被包括在内。如果多个组有相同的名称，该名称将指第一个匹配的组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-regexmatch-property-strings"></target>
            <paragraph classes="classref-property" ids="class-regexmatch-property-strings" names="class_regexmatch_property_strings"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>strings</strong> = <literal>PackedStringArray()</literal> <reference internal="True" refid="class-regexmatch-property-strings"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_strings</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>匹配项及其捕获组的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-regexmatch-property-subject"></target>
            <paragraph classes="classref-property" ids="class-regexmatch-property-subject" names="class_regexmatch_property_subject"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>subject</strong> = <literal>""</literal> <reference internal="True" refid="class-regexmatch-property-subject"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_subject</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与搜索模式一起使用的源字符串，以找到这个匹配结果。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-regexmatch-method-get-end"></target>
            <paragraph classes="classref-method" ids="class-regexmatch-method-get-end" names="class_regexmatch_method_get_end"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_end</strong>(name: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-regexmatch-method-get-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回源字符串中匹配的结束位置。捕获组的结束位置可以通过提供其组号的整数或其字符串名称（如果它是一个命名组）来检索。默认值为 0，指的是整个表达式。</paragraph>
            <paragraph>如果该组没有匹配或不存在，则返回 -1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-regexmatch-method-get-group-count"></target>
            <paragraph classes="classref-method" ids="class-regexmatch-method-get-group-count" names="class_regexmatch_method_get_group_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_group_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-regexmatch-method-get-group-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回捕获组的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-regexmatch-method-get-start"></target>
            <paragraph classes="classref-method" ids="class-regexmatch-method-get-start" names="class_regexmatch_method_get_start"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_start</strong>(name: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-regexmatch-method-get-start"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回源字符串中匹配的起始位置。捕获组的起始位置可以通过提供它的组号作为一个整数或它的字符串名称（如果它是一个命名组）来检索。默认值为 0，指的是整个表达式。</paragraph>
            <paragraph>如果组没有匹配或不存在，返回 -1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-regexmatch-method-get-string"></target>
            <paragraph classes="classref-method" ids="class-regexmatch-method-get-string" names="class_regexmatch_method_get_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_string</strong>(name: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-regexmatch-method-get-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回源字符串中匹配的子串。捕获组可以通过提供它的组号作为整数或它的字符串名称（如果它是一个命名组）来检索。默认值为 0，指的是整个表达式。</paragraph>
            <paragraph>如果组没有匹配或不存在，则返回一个空字符串。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
