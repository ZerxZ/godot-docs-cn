<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_xmlparser.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/XMLParser.xml.</comment>
    <target refid="class-xmlparser"></target>
    <section ids="xmlparser class-xmlparser" names="xmlparser class_xmlparser">
        <title>XMLParser</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>为创建 XML 文件解析器提供低阶接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Provides a low-level interface for creating parsers for <reference name="XML" refuri="https://en.wikipedia.org/wiki/XML">XML</reference> files. This class can serve as base to make custom XML parsers.</paragraph>
            <paragraph>To parse XML, you must open a file with the <reference internal="True" refid="class-xmlparser-method-open"><inline classes="std std-ref">open</inline></reference> method or a buffer with the <reference internal="True" refid="class-xmlparser-method-open-buffer"><inline classes="std std-ref">open_buffer</inline></reference> method. Then, the <reference internal="True" refid="class-xmlparser-method-read"><inline classes="std std-ref">read</inline></reference> method must be called to parse the next nodes. Most of the methods take into consideration the currently parsed node.</paragraph>
            <paragraph>Here is an example of using <strong>XMLParser</strong> to parse an SVG file (which is based on XML), printing each element and its attributes as a dictionary:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var parser = XMLParser.new()
parser.open("path/to/file.svg")
while parser.read() != ERR_FILE_EOF:
    if parser.get_node_type() == XMLParser.NODE_ELEMENT:
        var node_name = parser.get_node_name()
        var attributes_dict = {}
        for idx in range(parser.get_attribute_count()):
            attributes_dict[parser.get_attribute_name(idx)] = parser.get_attribute_value(idx)
        print("The ", node_name, " element has the following attributes: ", attributes_dict)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var parser = new XmlParser();
parser.Open("path/to/file.svg");
while (parser.Read() != Error.FileEof)
{
    if (parser.GetNodeType() == XmlParser.NodeType.Element)
    {
        var nodeName = parser.GetNodeName();
        var attributesDict = new Godot.Collections.Dictionary();
        for (int idx = 0; idx &lt; parser.GetAttributeCount(); idx++)
        {
            attributesDict[parser.GetAttributeName(idx)] = parser.GetAttributeValue(idx);
        }
        GD.Print($"The {nodeName} element has the following attributes: {attributesDict}");
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="42"></colspec>
                    <colspec colwidth="144"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-attribute-count"><inline classes="std std-ref">get_attribute_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-attribute-name"><inline classes="std std-ref">get_attribute_name</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-attribute-value"><inline classes="std std-ref">get_attribute_value</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-current-line"><inline classes="std std-ref">get_current_line</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-named-attribute-value"><inline classes="std std-ref">get_named_attribute_value</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-named-attribute-value-safe"><inline classes="std std-ref">get_named_attribute_value_safe</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-node-data"><inline classes="std std-ref">get_node_data</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-node-name"><inline classes="std std-ref">get_node_name</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-node-offset"><inline classes="std std-ref">get_node_offset</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-get-node-type"><inline classes="std std-ref">get_node_type</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-has-attribute"><inline classes="std std-ref">has_attribute</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-open"><inline classes="std std-ref">open</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-open-buffer"><inline classes="std std-ref">open_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-read"><inline classes="std std-ref">read</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-seek"><inline classes="std std-ref">seek</inline></reference>(position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xmlparser-method-skip-section"><inline classes="std std-ref">skip_section</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-xmlparser-nodetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-xmlparser-nodetype" names="enum_xmlparser_nodetype">enum <strong>NodeType</strong>: <reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-xmlparser-constant-node-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xmlparser-constant-node-none" names="class_xmlparser_constant_node_none"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>NODE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>没有节点，未打开文件或缓冲区。</paragraph>
            <target refid="class-xmlparser-constant-node-element"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xmlparser-constant-node-element" names="class_xmlparser_constant_node_element"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>NODE_ELEMENT</strong> = <literal>1</literal></paragraph>
            <paragraph>元素节点类型，也称作标签，例如 <literal>&lt;title&gt;</literal>。</paragraph>
            <target refid="class-xmlparser-constant-node-element-end"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xmlparser-constant-node-element-end" names="class_xmlparser_constant_node_element_end"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>NODE_ELEMENT_END</strong> = <literal>2</literal></paragraph>
            <paragraph>元素结束节点类型，例如 <literal>&lt;/title&gt;</literal>。</paragraph>
            <target refid="class-xmlparser-constant-node-text"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xmlparser-constant-node-text" names="class_xmlparser_constant_node_text"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>NODE_TEXT</strong> = <literal>3</literal></paragraph>
            <paragraph>文本节点类型，即不在元素中的文本。包含空白字符。</paragraph>
            <target refid="class-xmlparser-constant-node-comment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xmlparser-constant-node-comment" names="class_xmlparser_constant_node_comment"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>NODE_COMMENT</strong> = <literal>4</literal></paragraph>
            <paragraph>注释节点类型，例如 <literal>&lt;!--A comment--&gt;</literal>。</paragraph>
            <target refid="class-xmlparser-constant-node-cdata"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xmlparser-constant-node-cdata" names="class_xmlparser_constant_node_cdata"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>NODE_CDATA</strong> = <literal>5</literal></paragraph>
            <paragraph>CDATA（字符数据）部分对应的节点类型，例如 <literal>&lt;![CDATA[CDATA section]]&gt;</literal>。</paragraph>
            <target refid="class-xmlparser-constant-node-unknown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xmlparser-constant-node-unknown" names="class_xmlparser_constant_node_unknown"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>NODE_UNKNOWN</strong> = <literal>6</literal></paragraph>
            <paragraph>未知节点类型。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-xmlparser-method-get-attribute-count"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-attribute-count" names="class_xmlparser_method_get_attribute_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_attribute_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-attribute-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前解析元素中属性的数量。</paragraph>
            <paragraph><strong>注意：</strong>如果在当前解析的节点不是 <reference internal="True" refid="class-xmlparser-constant-node-element"><inline classes="std std-ref">NODE_ELEMENT</inline></reference> 或 <reference internal="True" refid="class-xmlparser-constant-node-element-end"><inline classes="std std-ref">NODE_ELEMENT_END</inline></reference> 时调用这个方法，则该计数不会更新，仍然反映的是之前的元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-attribute-name"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-attribute-name" names="class_xmlparser_method_get_attribute_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_attribute_name</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-attribute-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前解析元素中某个属性的名称，属性由 <literal>idx</literal> 索引指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-attribute-value"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-attribute-value" names="class_xmlparser_method_get_attribute_value"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_attribute_value</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-attribute-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前解析元素中某个属性的取值，属性由 <literal>idx</literal> 索引指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-current-line"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-current-line" names="class_xmlparser_method_get_current_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_current_line</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-current-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回解析文件中的当前行，从 0 开始计数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-named-attribute-value"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-named-attribute-value" names="class_xmlparser_method_get_named_attribute_value"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_named_attribute_value</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-named-attribute-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前解析元素中某个属性的取值，属性由名称 <literal>name</literal> 指定。如果该元素没有符合要求的属性，则会引发错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-named-attribute-value-safe"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-named-attribute-value-safe" names="class_xmlparser_method_get_named_attribute_value_safe"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_named_attribute_value_safe</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-named-attribute-value-safe"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前解析元素中某个属性的取值，属性由名称 <literal>name</literal> 指定。如果该元素没有符合要求的属性，则会返回空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-node-data"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-node-data" names="class_xmlparser_method_get_node_data"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_node_data</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-node-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本节点的内容。如果当前解析节点是其他类型，则会引发错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-node-name"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-node-name" names="class_xmlparser_method_get_node_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_node_name</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-node-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回元素节点的名称。如果当前解析的节点为文本节点，则该方法会引发错误。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-xmlparser-constant-node-cdata"><inline classes="std std-ref">NODE_CDATA</inline></reference> 节点的内容和 <reference internal="True" refid="class-xmlparser-constant-node-comment"><inline classes="std std-ref">NODE_COMMENT</inline></reference> 节点的注释字符串也均被认为是名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-node-offset"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-node-offset" names="class_xmlparser_method_get_node_offset"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_offset</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-get-node-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前解析节点相对于文件或缓冲区开始处的字节偏移量。通常等价于读取位置之前的字符数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-get-node-type"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-get-node-type" names="class_xmlparser_method_get_node_type"><reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> <strong>get_node_type</strong>() <reference internal="True" refid="class-xmlparser-method-get-node-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前节点的类型。请使用 <reference internal="True" refid="enum-xmlparser-nodetype"><inline classes="std std-ref">NodeType</inline></reference> 常量进行比较。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-has-attribute"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-has-attribute" names="class_xmlparser_method_has_attribute"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_attribute</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-has-attribute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果当前解析元素存在名为 <literal>name</literal> 的属性，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-is-empty"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-is-empty" names="class_xmlparser_method_is_empty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_empty</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xmlparser-method-is-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果当前解析元素为空则返回 <literal>true</literal>，例如 <literal>&lt;element /&gt;</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-open"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-open" names="class_xmlparser_method_open"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>open</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-xmlparser-method-open"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>打开 XML 文件 <literal>file</literal> 进行解析。这个方法返回的是错误码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-open-buffer"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-open-buffer" names="class_xmlparser_method_open_buffer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>open_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-xmlparser-method-open-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>打开 XML 原始缓冲区 <literal>buffer</literal> 进行解析。这个方法返回的是错误码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-read"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-read" names="class_xmlparser_method_read"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>read</strong>() <reference internal="True" refid="class-xmlparser-method-read"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>解析文件的下一个节点。这个方法返回的是错误码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-seek"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-seek" names="class_xmlparser_method_seek"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>seek</strong>(position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-xmlparser-method-seek"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将缓冲区光标移动到某一偏移量（相对于开始位置）并在那里读取下一个节点。这个方法返回的是错误码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xmlparser-method-skip-section"></target>
            <paragraph classes="classref-method" ids="class-xmlparser-method-skip-section" names="class_xmlparser_method_skip_section"><abbreviation explanation="无返回值。">void</abbreviation> <strong>skip_section</strong>() <reference internal="True" refid="class-xmlparser-method-skip-section"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>跳过当前部分。如果当前解析的节点包含其他内部节点，则会忽略这些节点，光标将跳转到当前元素的结尾处。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
