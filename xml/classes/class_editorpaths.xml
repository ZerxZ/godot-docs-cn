<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorpaths.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorPaths.xml.</comment>
    <target refid="class-editorpaths"></target>
    <section ids="editorpaths class-editorpaths" names="editorpaths class_editorpaths">
        <title>EditorPaths</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>编辑器专用单例，返回特定于操作系统的各种数据文件夹和文件的路径。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个仅供编辑器使用的单例，可返回特定于操作系统的，到各种数据文件夹和文件的路径。它可以在编辑器插件中使用，以确保文件被保存在各个操作系统的正确位置。</paragraph>
            <paragraph><strong>注意：</strong>这个单例在导出的项目中是不可访问的。尝试在导出的项目中访问它会产生脚本错误，因为该单例没有被声明。为防止导出项目中出现脚本错误，请使用 <reference internal="True" refuri="class_engine#class-engine-method-has-singleton"><inline classes="std std-ref">Engine.has_singleton</inline></reference> 检查单例是否可用后再使用该单例。</paragraph>
            <paragraph><strong>注意：</strong>在 Linux/BSD 平台上，Godot 遵守 <reference name="XDG 基本目录规范" refuri="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG 基本目录规范</reference>。可以按照规范覆盖环境变量，来更改编辑器和项目数据路径。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/data_paths"><inline classes="doc">Godot 项目中的文件路径</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="104"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorpaths-method-get-cache-dir"><inline classes="std std-ref">get_cache_dir</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorpaths-method-get-config-dir"><inline classes="std std-ref">get_config_dir</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorpaths-method-get-data-dir"><inline classes="std std-ref">get_data_dir</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorpaths-method-get-project-settings-dir"><inline classes="std std-ref">get_project_settings_dir</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorpaths-method-get-self-contained-file"><inline classes="std std-ref">get_self_contained_file</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorpaths-method-is-self-contained"><inline classes="std std-ref">is_self_contained</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorpaths-method-get-cache-dir"></target>
            <paragraph classes="classref-method" ids="class-editorpaths-method-get-cache-dir" names="class_editorpaths_method_get_cache_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_cache_dir</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回用户缓存文件夹的绝对路径。该文件夹应该用于临时数据，关闭编辑器时应该能够安全地移除这些数据（例如生成的资源预览图）。</paragraph>
            <paragraph><strong>各平台的默认路径：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">- Windows: %LOCALAPPDATA%\Godot\
- macOS: ~/Library/Caches/Godot/
- Linux: ~/.cache/godot/</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorpaths-method-get-config-dir"></target>
            <paragraph classes="classref-method" ids="class-editorpaths-method-get-config-dir" names="class_editorpaths_method_get_config_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_config_dir</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回用户配置文件夹的绝对路径。该文件夹应该用于<emphasis>持久化</emphasis>的用户配置文件。</paragraph>
            <paragraph><strong>各平台的默认路径：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">- Windows: %APPDATA%\Godot\                    （同 `get_data_dir()`）
- macOS: ~/Library/Application Support/Godot/  （同 `get_data_dir()`）
- Linux: ~/.config/godot/</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorpaths-method-get-data-dir"></target>
            <paragraph classes="classref-method" ids="class-editorpaths-method-get-data-dir" names="class_editorpaths_method_get_data_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_data_dir</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回用户数据文件夹的绝对路径。该文件夹应该用于<emphasis>持久化</emphasis>的用户数据文件，例如已安装的导出模板。</paragraph>
            <paragraph><strong>各平台的默认路径：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">- Windows：%APPDATA%\Godot\                    （同 `get_config_dir()` ）
- macOS：~/Library/Application Support/Godot/  （同 `get_config_dir()` ）
- Linux：~/.local/share/godot/</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorpaths-method-get-project-settings-dir"></target>
            <paragraph classes="classref-method" ids="class-editorpaths-method-get-project-settings-dir" names="class_editorpaths_method_get_project_settings_dir"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_project_settings_dir</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回针对项目的编辑器设置路径。各个项目在设置路径中都有一个独立的子目录，用于保存针对项目的编辑器设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorpaths-method-get-self-contained-file"></target>
            <paragraph classes="classref-method" ids="class-editorpaths-method-get-self-contained-file" names="class_editorpaths_method_get_self_contained_file"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_self_contained_file</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回自包含文件的绝对路径，该文件会使当前 Godot 编辑器实例被视为是自包含的。如果当前 Godot 编辑器实例不是自包含的，则返回一个空字符串。另见 <reference internal="True" refid="class-editorpaths-method-is-self-contained"><inline classes="std std-ref">is_self_contained</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorpaths-method-is-self-contained"></target>
            <paragraph classes="classref-method" ids="class-editorpaths-method-is-self-contained" names="class_editorpaths_method_is_self_contained"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_self_contained</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果编辑器被标记为是自包含的，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。启用自包含模式后，用户配置、数据和缓存文件将保被存在编辑器二进制文件旁边的 <literal>editor_data/</literal> 文件夹中。这使得便携使用更容易，并确保 Godot 编辑器最大限度地减少将文件写入到它自己的文件夹之外的情况。自包含模式不适用于导出的项目。</paragraph>
            <paragraph>当编辑器未运行时，可以通过在与编辑器二进制文件或 macOS .app 捆绑包相同的文件夹中创建名为 <literal>._sc_</literal> 或 <literal>_sc_</literal> 的文件来启用自包含模式。另见 <reference internal="True" refid="class-editorpaths-method-get-self-contained-file"><inline classes="std std-ref">get_self_contained_file</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，应当在使用自包含模式前手动移除隔离标志，见<reference name="《在 macOS 上运行》" refuri="https://docs.godotengine.org/en/stable/tutorials/export/running_on_macos.html">《在 macOS 上运行》</reference>。</paragraph>
            <paragraph><strong>注意：</strong>在 macOS 上，将 <literal>_sc_</literal> 或任何其他文件放入 .app 捆绑包中会破坏其数字签名，使其不再便携，请考虑改为放在与 .app 捆绑包相同的文件夹中。</paragraph>
            <paragraph><strong>注意：</strong>Godot 的 Steam 版本默认使用自包含模式。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
