<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_upnp.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/upnp/doc_classes/UPNP.xml.</comment>
    <target refid="class-upnp"></target>
    <section ids="upnp class-upnp" names="upnp class_upnp">
        <title>UPNP</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>通用即插即用（UPnP）功能，用于网络设备的发现、查询及端口映射。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类可用于在本地网络中发现兼容的 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 并在这些设备上执行命令，如管理端口映射（用于端口转发/NAT 穿透）和查询本地及远程网络 IP 地址。请注意，这个类的方法都是同步的，会阻塞调用线程。</paragraph>
            <paragraph>要转发指定端口（此处为 <literal>7777</literal>，请注意 <reference internal="True" refid="class-upnp-method-discover"><inline classes="std std-ref">discover</inline></reference> 和 <reference internal="True" refid="class-upnp-method-add-port-mapping"><inline classes="std std-ref">add_port_mapping</inline></reference> 都可能返回错误，应进行检查）：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var upnp = UPNP.new()
upnp.discover()
upnp.add_port_mapping(7777)</literal_block>
            <paragraph>要关闭指定端口（例如结束使用后）：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">upnp.delete_port_mapping(port)</literal_block>
            <paragraph><strong>注意：</strong>UPnP 发现会阻塞当前线程。要在不阻塞主线程的前提下执行发现，请像这样使用 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference>：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># UPnP 端口映射建立完成时发出（无论成败）。
signal upnp_completed(error)

# 请将其替换为你自己的服务器端口号，在 1024 和 65535 之间。
const SERVER_PORT = 3928
var thread = null

func _upnp_setup(server_port):
    # UPNP 查询比较耗时。
    var upnp = UPNP.new()
    var err = upnp.discover()

    if err != OK:
        push_error(str(err))
        emit_signal("upnp_completed", err)
        return

    if upnp.get_gateway() and upnp.get_gateway().is_valid_gateway():
        upnp.add_port_mapping(server_port, server_port, ProjectSettings.get_setting("application/config/name"), "UDP")
        upnp.add_port_mapping(server_port, server_port, ProjectSettings.get_setting("application/config/name"), "TCP")
        emit_signal("upnp_completed", OK)

func _ready():
    thread = Thread.new()
    thread.start(_upnp_setup.bind(SERVER_PORT))

func _exit_tree():
    # 游戏退出但线程还在运行时，在此处等待线程完成。
    thread.wait_to_finish()</literal_block>
            <paragraph><strong>术语：</strong>UPnP 网络中，“网关”（gateway，或称“互联网网关设备”，internet gateway device，简称 IGD）指的是在局域网中让计算机能够访问互联网（“广域网”，wide area network，WAN）的网络设备。这些网关经常也叫做“路由器”。</paragraph>
            <paragraph><strong>陷阱：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>前文解释过，这些调用都是阻塞的，不应该在主线程上执行，一次就能阻塞上很多秒。用用线程吧！</paragraph>
                </list_item>
                <list_item>
                    <paragraph>网络是实打实的混乱。数据包可能会在传输过程中丢失或者被过滤掉，地址、空闲端口、端口映射有可能发生变化，设备可以随时离开或者加入网络。请考虑周全，老老实实地检查错误并进行处理，处理错误时请尽量友好：添加简洁的报错 UI、超时处理、重试机制。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>端口映射是随时会变的（也可以被删除），网关的远程/外部 IP 也可能发生改变。你应该考虑定期重新查询外部 IP、尝试更新/刷新端口映射（例如每隔 5 分钟或者在发生网络错误时执行）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>并不是所有的设备都支持 UPnP，有些用户还会禁用 UPnP 支持。你需要处理这种情况（例如编写文档，要求用户手动进行端口映射，或者加入接力/镜像服务器、NAT 打洞、STUN/TURN 等 NAT 穿透的备用方案）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>请考虑映射冲突时该怎么办。可能在同一个网络上同时有多个用户想要来玩你的游戏，或者有其他应用程序用了一样的端口。请把端口号做成可配置的，最好能够自动选择（失败时重试其他端口）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>拓展阅读：</strong>如果你想了解更多关于 UPnP（尤其是 Internet Gateway Device（IGD）和 Port Control Protocol（PCP）），可以首先查看<reference name="维基百科" refuri="https://en.wikipedia.org/wiki/Universal_Plug_and_Play">维基百科</reference>，技术规范可以在 <reference name="Open Connectivity 基金会" refuri="https://openconnectivity.org/developer/specifications/upnp-resources/upnp/">Open Connectivity 基金会</reference>找到，Godot 的实现基于的是 <reference name="MiniUPnP 客户端" refuri="https://github.com/miniupnp/miniupnp">MiniUPnP 客户端</reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="73"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-property-discover-ipv6"><inline classes="std std-ref">discover_ipv6</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-property-discover-local-port"><inline classes="std std-ref">discover_local_port</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-property-discover-multicast-if"><inline classes="std std-ref">discover_multicast_if</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="272"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-add-device"><inline classes="std std-ref">add_device</inline></reference>(device: <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-add-port-mapping"><inline classes="std std-ref">add_port_mapping</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, port_internal: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, desc: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", proto: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "UDP", duration: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-clear-devices"><inline classes="std std-ref">clear_devices</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-delete-port-mapping"><inline classes="std std-ref">delete_port_mapping</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, proto: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "UDP") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-discover"><inline classes="std std-ref">discover</inline></reference>(timeout: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2000, ttl: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2, device_filter: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "InternetGatewayDevice")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-get-device"><inline classes="std std-ref">get_device</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-get-device-count"><inline classes="std std-ref">get_device_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-get-gateway"><inline classes="std std-ref">get_gateway</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-query-external-address"><inline classes="std std-ref">query_external_address</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-remove-device"><inline classes="std std-ref">remove_device</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-upnp-method-set-device"><inline classes="std std-ref">set_device</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, device: <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-upnp-upnpresult"></target>
            <paragraph classes="classref-enumeration" ids="enum-upnp-upnpresult" names="enum_upnp_upnpresult">enum <strong>UPNPResult</strong>: <reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-upnp-constant-upnp-result-success"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-success" names="class_upnp_constant_upnp_result_success"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_SUCCESS</strong> = <literal>0</literal></paragraph>
            <paragraph>UPNP 命令或发现成功。</paragraph>
            <target refid="class-upnp-constant-upnp-result-not-authorized"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-not-authorized" names="class_upnp_constant_upnp_result_not_authorized"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_NOT_AUTHORIZED</strong> = <literal>1</literal></paragraph>
            <paragraph>未授权在 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 上使用该命令。当用户在其路由器上禁用 UPNP 时，可能会被返回。</paragraph>
            <target refid="class-upnp-constant-upnp-result-port-mapping-not-found"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-port-mapping-not-found" names="class_upnp_constant_upnp_result_port_mapping_not_found"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_PORT_MAPPING_NOT_FOUND</strong> = <literal>2</literal></paragraph>
            <paragraph>在给定的 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 上没有找到给定端口、协议组合的端口映射。</paragraph>
            <target refid="class-upnp-constant-upnp-result-inconsistent-parameters"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-inconsistent-parameters" names="class_upnp_constant_upnp_result_inconsistent_parameters"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INCONSISTENT_PARAMETERS</strong> = <literal>3</literal></paragraph>
            <paragraph>参数不一致。</paragraph>
            <target refid="class-upnp-constant-upnp-result-no-such-entry-in-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-no-such-entry-in-array" names="class_upnp_constant_upnp_result_no_such_entry_in_array"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY</strong> = <literal>4</literal></paragraph>
            <paragraph>数组中没有此条目。如果在 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 上没有找到给定的端口、协议组合，可能会被返回。</paragraph>
            <target refid="class-upnp-constant-upnp-result-action-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-action-failed" names="class_upnp_constant_upnp_result_action_failed"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_ACTION_FAILED</strong> = <literal>5</literal></paragraph>
            <paragraph>操作失败。</paragraph>
            <target refid="class-upnp-constant-upnp-result-src-ip-wildcard-not-permitted"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-src-ip-wildcard-not-permitted" names="class_upnp_constant_upnp_result_src_ip_wildcard_not_permitted"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED</strong> = <literal>6</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 不允许源 IP 地址的通配符值。</paragraph>
            <target refid="class-upnp-constant-upnp-result-ext-port-wildcard-not-permitted"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-ext-port-wildcard-not-permitted" names="class_upnp_constant_upnp_result_ext_port_wildcard_not_permitted"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED</strong> = <literal>7</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 不允许外部端口的通配符值。</paragraph>
            <target refid="class-upnp-constant-upnp-result-int-port-wildcard-not-permitted"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-int-port-wildcard-not-permitted" names="class_upnp_constant_upnp_result_int_port_wildcard_not_permitted"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED</strong> = <literal>8</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 不允许内部端口的通配符值。</paragraph>
            <target refid="class-upnp-constant-upnp-result-remote-host-must-be-wildcard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-remote-host-must-be-wildcard" names="class_upnp_constant_upnp_result_remote_host_must_be_wildcard"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD</strong> = <literal>9</literal></paragraph>
            <paragraph>远程主机值必须是通配符。</paragraph>
            <target refid="class-upnp-constant-upnp-result-ext-port-must-be-wildcard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-ext-port-must-be-wildcard" names="class_upnp_constant_upnp_result_ext_port_must_be_wildcard"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD</strong> = <literal>10</literal></paragraph>
            <paragraph>外部端口值必须是通配符。</paragraph>
            <target refid="class-upnp-constant-upnp-result-no-port-maps-available"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-no-port-maps-available" names="class_upnp_constant_upnp_result_no_port_maps_available"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_NO_PORT_MAPS_AVAILABLE</strong> = <literal>11</literal></paragraph>
            <paragraph>没有可用的端口映射。如果端口映射功能不可用，也可能被返回。</paragraph>
            <target refid="class-upnp-constant-upnp-result-conflict-with-other-mechanism"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-conflict-with-other-mechanism" names="class_upnp_constant_upnp_result_conflict_with_other_mechanism"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM</strong> = <literal>12</literal></paragraph>
            <paragraph>与其他机制冲突。如果一个端口映射与现有的冲突，可能会被返回，而不是<reference internal="True" refid="class-upnp-constant-upnp-result-conflict-with-other-mapping"><inline classes="std std-ref">UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING</inline></reference>。</paragraph>
            <target refid="class-upnp-constant-upnp-result-conflict-with-other-mapping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-conflict-with-other-mapping" names="class_upnp_constant_upnp_result_conflict_with_other_mapping"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING</strong> = <literal>13</literal></paragraph>
            <paragraph>与现有的端口映射相冲突。</paragraph>
            <target refid="class-upnp-constant-upnp-result-same-port-values-required"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-same-port-values-required" names="class_upnp_constant_upnp_result_same_port_values_required"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_SAME_PORT_VALUES_REQUIRED</strong> = <literal>14</literal></paragraph>
            <paragraph>外部和内部端口值必须相同。</paragraph>
            <target refid="class-upnp-constant-upnp-result-only-permanent-lease-supported"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-only-permanent-lease-supported" names="class_upnp_constant_upnp_result_only_permanent_lease_supported"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED</strong> = <literal>15</literal></paragraph>
            <paragraph>只支持永久租用。在添加端口映射时，不要使用 <literal>duration</literal> 参数。</paragraph>
            <target refid="class-upnp-constant-upnp-result-invalid-gateway"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-invalid-gateway" names="class_upnp_constant_upnp_result_invalid_gateway"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INVALID_GATEWAY</strong> = <literal>16</literal></paragraph>
            <paragraph>无效网关。</paragraph>
            <target refid="class-upnp-constant-upnp-result-invalid-port"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-invalid-port" names="class_upnp_constant_upnp_result_invalid_port"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INVALID_PORT</strong> = <literal>17</literal></paragraph>
            <paragraph>无效端口。</paragraph>
            <target refid="class-upnp-constant-upnp-result-invalid-protocol"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-invalid-protocol" names="class_upnp_constant_upnp_result_invalid_protocol"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INVALID_PROTOCOL</strong> = <literal>18</literal></paragraph>
            <paragraph>无效协议。</paragraph>
            <target refid="class-upnp-constant-upnp-result-invalid-duration"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-invalid-duration" names="class_upnp_constant_upnp_result_invalid_duration"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INVALID_DURATION</strong> = <literal>19</literal></paragraph>
            <paragraph>无效持续时间。</paragraph>
            <target refid="class-upnp-constant-upnp-result-invalid-args"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-invalid-args" names="class_upnp_constant_upnp_result_invalid_args"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INVALID_ARGS</strong> = <literal>20</literal></paragraph>
            <paragraph>无效参数。</paragraph>
            <target refid="class-upnp-constant-upnp-result-invalid-response"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-invalid-response" names="class_upnp_constant_upnp_result_invalid_response"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INVALID_RESPONSE</strong> = <literal>21</literal></paragraph>
            <paragraph>无效响应。</paragraph>
            <target refid="class-upnp-constant-upnp-result-invalid-param"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-invalid-param" names="class_upnp_constant_upnp_result_invalid_param"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_INVALID_PARAM</strong> = <literal>22</literal></paragraph>
            <paragraph>无效参数。</paragraph>
            <target refid="class-upnp-constant-upnp-result-http-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-http-error" names="class_upnp_constant_upnp_result_http_error"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_HTTP_ERROR</strong> = <literal>23</literal></paragraph>
            <paragraph>HTTP 错误。</paragraph>
            <target refid="class-upnp-constant-upnp-result-socket-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-socket-error" names="class_upnp_constant_upnp_result_socket_error"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_SOCKET_ERROR</strong> = <literal>24</literal></paragraph>
            <paragraph>套接字错误。</paragraph>
            <target refid="class-upnp-constant-upnp-result-mem-alloc-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-mem-alloc-error" names="class_upnp_constant_upnp_result_mem_alloc_error"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_MEM_ALLOC_ERROR</strong> = <literal>25</literal></paragraph>
            <paragraph>分配内存时出错。</paragraph>
            <target refid="class-upnp-constant-upnp-result-no-gateway"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-no-gateway" names="class_upnp_constant_upnp_result_no_gateway"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_NO_GATEWAY</strong> = <literal>26</literal></paragraph>
            <paragraph>没有可用的网关。你可能需要先调用 <reference internal="True" refid="class-upnp-method-discover"><inline classes="std std-ref">discover</inline></reference> ，否则发现没有检测到任何有效的 IGD（InternetGatewayDevices）。</paragraph>
            <target refid="class-upnp-constant-upnp-result-no-devices"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-no-devices" names="class_upnp_constant_upnp_result_no_devices"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_NO_DEVICES</strong> = <literal>27</literal></paragraph>
            <paragraph>没有可用的设备。你可能需要先调用 <reference internal="True" refid="class-upnp-method-discover"><inline classes="std std-ref">discover</inline></reference>，或者发现没有检测到任何有效的 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>。</paragraph>
            <target refid="class-upnp-constant-upnp-result-unknown-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-upnp-constant-upnp-result-unknown-error" names="class_upnp_constant_upnp_result_unknown_error"><reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference> <strong>UPNP_RESULT_UNKNOWN_ERROR</strong> = <literal>28</literal></paragraph>
            <paragraph>未知错误。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-upnp-property-discover-ipv6"></target>
            <paragraph classes="classref-property" ids="class-upnp-property-discover-ipv6" names="class_upnp_property_discover_ipv6"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>discover_ipv6</strong> = <literal>false</literal> <reference internal="True" refid="class-upnp-property-discover-ipv6"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_discover_ipv6</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_discover_ipv6</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 IPv6 用于 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 发现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-property-discover-local-port"></target>
            <paragraph classes="classref-property" ids="class-upnp-property-discover-local-port" names="class_upnp_property_discover_local_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>discover_local_port</strong> = <literal>0</literal> <reference internal="True" refid="class-upnp-property-discover-local-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_discover_local_port</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_discover_local_port</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>0</literal>，系统会自动选择用于发现的本地端口。如果为 <literal>1</literal>，将从源端口 1900 进行发现（与目的端口相同）。否则，将使用该值作为端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-property-discover-multicast-if"></target>
            <paragraph classes="classref-property" ids="class-upnp-property-discover-multicast-if" names="class_upnp_property_discover_multicast_if"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>discover_multicast_if</strong> = <literal>""</literal> <reference internal="True" refid="class-upnp-property-discover-multicast-if"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_discover_multicast_if</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_discover_multicast_if</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于发现的多播接口。如果为空，则使用默认的多播接口。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-upnp-method-add-device"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-add-device" names="class_upnp_method_add_device"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_device</strong>(device: <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>) <reference internal="True" refid="class-upnp-method-add-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 添加到已发现设备的列表中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-add-port-mapping"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-add-port-mapping" names="class_upnp_method_add_port_mapping"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_port_mapping</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, port_internal: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, desc: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", proto: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "UDP", duration: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-upnp-method-add-port-mapping"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加映射，针对给定的协议 <literal>proto</literal>（<literal>"TCP"</literal> 或 <literal>"UDP"</literal>，默认为 UDP），将默认网关（见 <reference internal="True" refid="class-upnp-method-get-gateway"><inline classes="std std-ref">get_gateway</inline></reference>）上的外部端口 <literal>port</literal>（在 1 到 65535 之间，不过推荐使用 1024 以上的端口）映射到本机上的内部端口 <literal>port_internal</literal>。如果该网关上已经存在给定的端口与协议的组合，这个方法会尝试进行覆盖。如果不希望如此，你可以使用 <reference internal="True" refid="class-upnp-method-get-gateway"><inline classes="std std-ref">get_gateway</inline></reference> 手动获取网关，获取到后调用其 <reference internal="True" refid="class-upnp-method-add-port-mapping"><inline classes="std std-ref">add_port_mapping</inline></reference> 方法。请注意，使用 UPnP 转发公认端口（1024 以下）在有些设备上可能会失败。</paragraph>
            <paragraph>如果端口的映射已存在，有些网关设备可能会对其进行更新，有些则会因为冲突而拒绝这个命令，尤其当现有端口映射不是由 UPnP 创建的，或者指向的是别的网络地址（或设备）的时候。</paragraph>
            <paragraph>如果 <literal>port_internal</literal> 为 <literal>0</literal>（默认），表示内外部端口相同（使用 <literal>port</literal> 的值）。</paragraph>
            <paragraph>描述（<literal>desc</literal>）会显示在一些路由器的管理界面上，可以用来识别添加映射的程序。</paragraph>
            <paragraph>映射的租赁时长 <literal>duration</literal> 可以通过指定秒数来限定。默认的 <literal>0</literal> 表示没有时长，即永久租赁，有些设备只支持这种永久租赁。请注意，无论是否永久都只是一种请求，网关仍然可以随时移除映射（通常发生在重启网关后外部 IP 地址发生变化时，也有些型号会在映射不再活动，即若干分钟无流量时移除）。如果非 <literal>0</literal>（永久），技术规格所允许的范围是 <literal>120</literal>（2 分钟）到 <literal>86400</literal> 秒（24 小时）。</paragraph>
            <paragraph>可能的返回值见 <reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-clear-devices"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-clear-devices" names="class_upnp_method_clear_devices"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_devices</strong>() <reference internal="True" refid="class-upnp-method-clear-devices"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除已发现设备的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-delete-port-mapping"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-delete-port-mapping" names="class_upnp_method_delete_port_mapping"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>delete_port_mapping</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, proto: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "UDP") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-upnp-method-delete-port-mapping"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果默认网关上存在对给定端口和协议组合的端口映射，则将其删除（见 <reference internal="True" refid="class-upnp-method-get-gateway"><inline classes="std std-ref">get_gateway</inline></reference>）。<literal>port</literal> 必须是 1 和 65535 之间的有效端口，<literal>proto</literal> 可以是 <literal>"TCP"</literal> 或 <literal>"UDP"</literal>。拒绝的原因可能是映射指向其他地址、端口为公认端口（1024 以下）、映射不是由 UPnP 添加的。可能的返回值见 <reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-discover"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-discover" names="class_upnp_method_discover"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>discover</strong>(timeout: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2000, ttl: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2, device_filter: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "InternetGatewayDevice") <reference internal="True" refid="class-upnp-method-discover"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>发现本地的 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>。清除先前发现的设备的列表。</paragraph>
            <paragraph>默认情况下会过滤 IGD（InternetGatewayDevice）类型的设备，因为这些设备管理端口转发。<literal>timeout</literal> 是等待响应的时间，单位为毫秒。<literal>ttl</literal> 是生存时间；请在你知道自己在做什么的时候才碰这个参数。</paragraph>
            <paragraph>可能的返回值见 <reference internal="True" refid="enum-upnp-upnpresult"><inline classes="std std-ref">UPNPResult</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-get-device"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-get-device" names="class_upnp_method_get_device"><reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> <strong>get_device</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-upnp-method-get-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定 <literal>index</literal> 处的 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-get-device-count"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-get-device-count" names="class_upnp_method_get_device_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_device_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-upnp-method-get-device-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回已发现的 <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> 的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-get-gateway"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-get-gateway" names="class_upnp_method_get_gateway"><reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference> <strong>get_gateway</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-upnp-method-get-gateway"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回默认网关。这是第一个发现的<reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>，也是一个有效的IGD（InternetGatewayDevice）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-query-external-address"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-query-external-address" names="class_upnp_method_query_external_address"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>query_external_address</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-upnp-method-query-external-address"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回默认网关的外部 <reference internal="True" refuri="class_ip#class-ip"><inline classes="std std-ref">IP</inline></reference> 地址字符串（见 <reference internal="True" refid="class-upnp-method-get-gateway"><inline classes="std std-ref">get_gateway</inline></reference>）。错误时返回空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-remove-device"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-remove-device" names="class_upnp_method_remove_device"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_device</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-upnp-method-remove-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>index</literal> 处的设备从已发现的设备列表中移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-upnp-method-set-device"></target>
            <paragraph classes="classref-method" ids="class-upnp-method-set-device" names="class_upnp_method_set_device"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_device</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, device: <reference internal="True" refuri="class_upnpdevice#class-upnpdevice"><inline classes="std std-ref">UPNPDevice</inline></reference>) <reference internal="True" refid="class-upnp-method-set-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>index</literal> 处的设备从已发现的设备列表中设置为 <literal>device</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
