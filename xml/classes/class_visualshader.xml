<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshader.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/VisualShader.xml.</comment>
    <target refid="class-visualshader"></target>
    <section ids="visualshader class-visualshader" names="visualshader class_visualshader">
        <title>VisualShader</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>带有可视化编辑器的自定义着色器程序。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类提供了一个类似图形的可视化编辑器，用于创建 <reference internal="True" refuri="class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference>。尽管 <strong>VisualShader</strong> 不需要编码，但它们与脚本着色器共享相同的逻辑。它们使用可以相互连接的 <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> 来控制着色器的流。可视化着色器图在幕后被转换为脚本着色器。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/shaders/visual_shaders"><inline classes="doc">使用可视化着色器</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="63"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-property-graph-offset"><inline classes="std std-ref">graph_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="262"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-add-node"><inline classes="std std-ref">add_node</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> node, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-add-varying"><inline classes="std std-ref">add_varying</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refid="enum-visualshader-varyingmode"><inline classes="std std-ref">VaryingMode</inline></reference> mode, <reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-can-connect-nodes"><inline classes="std std-ref">can_connect_nodes</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-connect-nodes"><inline classes="std std-ref">connect_nodes</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-connect-nodes-forced"><inline classes="std std-ref">connect_nodes_forced</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-disconnect-nodes"><inline classes="std std-ref">disconnect_nodes</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-get-node"><inline classes="std std-ref">get_node</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-get-node-connections"><inline classes="std std-ref">get_node_connections</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-get-node-list"><inline classes="std std-ref">get_node_list</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-get-node-position"><inline classes="std std-ref">get_node_position</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-get-valid-node-id"><inline classes="std std-ref">get_valid_node_id</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-has-varying"><inline classes="std std-ref">has_varying</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-is-node-connection"><inline classes="std std-ref">is_node_connection</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-remove-node"><inline classes="std std-ref">remove_node</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-remove-varying"><inline classes="std std-ref">remove_varying</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-replace-node"><inline classes="std std-ref">replace_node</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> new_class <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-set-mode"><inline classes="std std-ref">set_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> mode <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshader-method-set-node-position"><inline classes="std std-ref">set_node_position</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshader-type"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshader-type" names="enum_visualshader_type">enum <strong>Type</strong>:</paragraph>
            <target refid="class-visualshader-constant-type-vertex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-vertex" names="class_visualshader_constant_type_vertex"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_VERTEX</strong> = <literal>0</literal></paragraph>
            <paragraph>顶点着色器，对顶点进行操作。</paragraph>
            <target refid="class-visualshader-constant-type-fragment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-fragment" names="class_visualshader_constant_type_fragment"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_FRAGMENT</strong> = <literal>1</literal></paragraph>
            <paragraph>片段着色器，对片段（像素）进行操作。</paragraph>
            <target refid="class-visualshader-constant-type-light"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-light" names="class_visualshader_constant_type_light"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_LIGHT</strong> = <literal>2</literal></paragraph>
            <paragraph>用于光线计算的着色器。</paragraph>
            <target refid="class-visualshader-constant-type-start"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-start" names="class_visualshader_constant_type_start"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_START</strong> = <literal>3</literal></paragraph>
            <paragraph>粒子着色器的“开始”阶段所使用的函数。</paragraph>
            <target refid="class-visualshader-constant-type-process"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-process" names="class_visualshader_constant_type_process"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_PROCESS</strong> = <literal>4</literal></paragraph>
            <paragraph>粒子着色器的“处理”阶段所使用的函数。</paragraph>
            <target refid="class-visualshader-constant-type-collide"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-collide" names="class_visualshader_constant_type_collide"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_COLLIDE</strong> = <literal>5</literal></paragraph>
            <paragraph>粒子着色器的“碰撞”阶段所使用的函数（粒子碰撞处理器）。</paragraph>
            <target refid="class-visualshader-constant-type-start-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-start-custom" names="class_visualshader_constant_type_start_custom"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_START_CUSTOM</strong> = <literal>6</literal></paragraph>
            <paragraph>粒子着色器的“开始”阶段所使用的函数，带自定义输出。</paragraph>
            <target refid="class-visualshader-constant-type-process-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-process-custom" names="class_visualshader_constant_type_process_custom"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_PROCESS_CUSTOM</strong> = <literal>7</literal></paragraph>
            <paragraph>粒子着色器的“处理”阶段所使用的函数，带自定义输出。</paragraph>
            <target refid="class-visualshader-constant-type-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-sky" names="class_visualshader_constant_type_sky"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_SKY</strong> = <literal>8</literal></paragraph>
            <paragraph>3D 环境中天空的着色器。</paragraph>
            <target refid="class-visualshader-constant-type-fog"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-fog" names="class_visualshader_constant_type_fog"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_FOG</strong> = <literal>9</literal></paragraph>
            <paragraph>为体积雾贴图的每个片段体素运行的一种计算着色器。</paragraph>
            <target refid="class-visualshader-constant-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-type-max" names="class_visualshader_constant_type_max"><reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_MAX</strong> = <literal>10</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshader-varyingmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshader-varyingmode" names="enum_visualshader_varyingmode">enum <strong>VaryingMode</strong>:</paragraph>
            <target refid="class-visualshader-constant-varying-mode-vertex-to-frag-light"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-mode-vertex-to-frag-light" names="class_visualshader_constant_varying_mode_vertex_to_frag_light"><reference internal="True" refid="enum-visualshader-varyingmode"><inline classes="std std-ref">VaryingMode</inline></reference> <strong>VARYING_MODE_VERTEX_TO_FRAG_LIGHT</strong> = <literal>0</literal></paragraph>
            <paragraph>Varying 从 <literal>Vertex</literal> 函数传到 <literal>Fragment</literal> 和 <literal>Light</literal> 函数。</paragraph>
            <target refid="class-visualshader-constant-varying-mode-frag-to-light"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-mode-frag-to-light" names="class_visualshader_constant_varying_mode_frag_to_light"><reference internal="True" refid="enum-visualshader-varyingmode"><inline classes="std std-ref">VaryingMode</inline></reference> <strong>VARYING_MODE_FRAG_TO_LIGHT</strong> = <literal>1</literal></paragraph>
            <paragraph>Varying 从 <literal>Fragment</literal> 函数传到 <literal>Light</literal> 函数。</paragraph>
            <target refid="class-visualshader-constant-varying-mode-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-mode-max" names="class_visualshader_constant_varying_mode_max"><reference internal="True" refid="enum-visualshader-varyingmode"><inline classes="std std-ref">VaryingMode</inline></reference> <strong>VARYING_MODE_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshader-varyingmode"><inline classes="std std-ref">VaryingMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshader-varyingtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshader-varyingtype" names="enum_visualshader_varyingtype">enum <strong>VaryingType</strong>:</paragraph>
            <target refid="class-visualshader-constant-varying-type-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-float" names="class_visualshader_constant_varying_type_float"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_FLOAT</strong> = <literal>0</literal></paragraph>
            <paragraph>Varying 的类型为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-int"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-int" names="class_visualshader_constant_varying_type_int"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_INT</strong> = <literal>1</literal></paragraph>
            <paragraph>Varying 的类型为 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-uint" names="class_visualshader_constant_varying_type_uint"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_UINT</strong> = <literal>2</literal></paragraph>
            <paragraph>Varying 的类型为无符号 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-vector-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-vector-2d" names="class_visualshader_constant_varying_type_vector_2d"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_VECTOR_2D</strong> = <literal>3</literal></paragraph>
            <paragraph>Varying 的类型为 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-vector-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-vector-3d" names="class_visualshader_constant_varying_type_vector_3d"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_VECTOR_3D</strong> = <literal>4</literal></paragraph>
            <paragraph>Varying 的类型为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-vector-4d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-vector-4d" names="class_visualshader_constant_varying_type_vector_4d"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_VECTOR_4D</strong> = <literal>5</literal></paragraph>
            <paragraph>Varying 的类型为 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-boolean"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-boolean" names="class_visualshader_constant_varying_type_boolean"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_BOOLEAN</strong> = <literal>6</literal></paragraph>
            <paragraph>Varying 的类型为 <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-transform"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-transform" names="class_visualshader_constant_varying_type_transform"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_TRANSFORM</strong> = <literal>7</literal></paragraph>
            <paragraph>Varying 的类型为 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>。</paragraph>
            <target refid="class-visualshader-constant-varying-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshader-constant-varying-type-max" names="class_visualshader_constant_varying_type_max"><reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> <strong>VARYING_TYPE_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="常量">
            <title>常量</title>
            <target refid="class-visualshader-constant-node-id-invalid"></target>
            <paragraph classes="classref-constant" ids="class-visualshader-constant-node-id-invalid" names="class_visualshader_constant_node_id_invalid"><strong>NODE_ID_INVALID</strong> = <literal>-1</literal></paragraph>
            <paragraph>表示无效的 <strong>VisualShader</strong> 节点。</paragraph>
            <target refid="class-visualshader-constant-node-id-output"></target>
            <paragraph classes="classref-constant" ids="class-visualshader-constant-node-id-output" names="class_visualshader_constant_node_id_output"><strong>NODE_ID_OUTPUT</strong> = <literal>0</literal></paragraph>
            <paragraph>表示 <strong>VisualShader</strong> 的输出节点。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshader-property-graph-offset"></target>
            <paragraph classes="classref-property" ids="class-visualshader-property-graph-offset" names="class_visualshader_property_graph_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>graph_offset</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_graph_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_graph_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>整个图的偏移向量。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-visualshader-method-add-node"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-add-node" names="class_visualshader_method_add_node">void <strong>add_node</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> node, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>向着色器中添加指定的节点 <literal>node</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-add-varying"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-add-varying" names="class_visualshader_method_add_varying">void <strong>add_varying</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refid="enum-visualshader-varyingmode"><inline classes="std std-ref">VaryingMode</inline></reference> mode, <reference internal="True" refid="enum-visualshader-varyingtype"><inline classes="std std-ref">VaryingType</inline></reference> type <strong>)</strong></paragraph>
            <paragraph>向着色器中添加新的 varying 值节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-can-connect-nodes"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-can-connect-nodes" names="class_visualshader_method_can_connect_nodes"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_connect_nodes</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定节点和端口可以连接在一起，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-connect-nodes"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-connect-nodes" names="class_visualshader_method_connect_nodes"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>connect_nodes</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong></paragraph>
            <paragraph>连接指定的节点和端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-connect-nodes-forced"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-connect-nodes-forced" names="class_visualshader_method_connect_nodes_forced">void <strong>connect_nodes_forced</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong></paragraph>
            <paragraph>连接指定的节点和端口，即使它们无法连接。这样的连接是无效的，将不能正常工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-disconnect-nodes"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-disconnect-nodes" names="class_visualshader_method_disconnect_nodes">void <strong>disconnect_nodes</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong></paragraph>
            <paragraph>连接指定的节点和端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-get-node"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-get-node" names="class_visualshader_method_get_node"><reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>get_node</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回具有指定 <literal>type</literal> 和 <literal>id</literal> 的着色器节点实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-get-node-connections"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-get-node-connections" names="class_visualshader_method_get_node_connections"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>get_node_connections</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回具有指定类型的连接节点的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-get-node-list"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-get-node-list" names="class_visualshader_method_get_node_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_node_list</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回着色器中具有指定类型的所有节点的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-get-node-position"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-get-node-position" names="class_visualshader_method_get_node_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_node_position</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定节点在着色器图中的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-get-valid-node-id"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-get-valid-node-id" names="class_visualshader_method_get_valid_node_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_valid_node_id</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回能够加入到着色器图中的下一个有效节点 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-has-varying"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-has-varying" names="class_visualshader_method_has_varying"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_varying</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果着色器中存在名为 <literal>name</literal> 的 varying 则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-is-node-connection"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-is-node-connection" names="class_visualshader_method_is_node_connection"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_node_connection</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from_port, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_node, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> to_port <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定的节点和端口连接存在，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-remove-node"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-remove-node" names="class_visualshader_method_remove_node">void <strong>remove_node</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>从着色器中删除指定的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-remove-varying"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-remove-varying" names="class_visualshader_method_remove_varying">void <strong>remove_varying</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>返回名为 <literal>name</literal> 的 varying 值节点。如果不存在该名称的节点则输出错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-replace-node"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-replace-node" names="class_visualshader_method_replace_node">void <strong>replace_node</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> new_class <strong>)</strong></paragraph>
            <paragraph>将指定节点替换为新类型的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-set-mode"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-set-mode" names="class_visualshader_method_set_mode">void <strong>set_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> mode <strong>)</strong></paragraph>
            <paragraph>设置该着色器的模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshader-method-set-node-position"></target>
            <paragraph classes="classref-method" ids="class-visualshader-method-set-node-position" names="class_visualshader_method_set_node_position">void <strong>set_node_position</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference> type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong></paragraph>
            <paragraph>设置指定节点的位置。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
