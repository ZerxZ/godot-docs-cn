<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_richtextlabel.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/RichTextLabel.xml.</comment>
    <target refid="class-richtextlabel"></target>
    <section ids="richtextlabel class-richtextlabel" names="richtextlabel class_richtextlabel">
        <title>RichTextLabel</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于显示文本的控件，文本中能够包含不同的字体样式、图片以及基础格式。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于显示文本的控件，文本中能够包含自定义字体、图片以及基础格式。<strong>RichTextLabel</strong> 使用内部标签栈管理这些内容。它还可以适应给定的宽度和高度。</paragraph>
            <paragraph><strong>注意：</strong>对 <reference internal="True" refid="class-richtextlabel-property-text"><inline classes="std std-ref">text</inline></reference> 赋值会将标签栈清空并根据该属性的内容重建。对 <reference internal="True" refid="class-richtextlabel-property-text"><inline classes="std std-ref">text</inline></reference> 所做的任何编辑都将擦除之前从 <reference internal="True" refid="class-richtextlabel-method-append-text"><inline classes="std std-ref">append_text</inline></reference> 和 <literal>push_*</literal> / <reference internal="True" refid="class-richtextlabel-method-pop"><inline classes="std std-ref">pop</inline></reference> 方法等其他手动来源所做的编辑。</paragraph>
            <paragraph><strong>注意：</strong>RichTextLabel 不支持纠缠的 BBCode 标签。例如，请不要使用 <literal>[b]加粗[i]加粗斜体[/b]斜体[/i]</literal>，请改为 <literal>[b]加粗[i]加粗斜体[/i][/b][i]斜体[/i]</literal>。</paragraph>
            <paragraph><strong>注意：</strong><literal>push_*/pop</literal> 函数不会影响 BBCode。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_label#class-label"><inline classes="std std-ref">Label</inline></reference> 不同，<strong>RichTextLabel</strong> 没有使文本水平居中的<emphasis>属性</emphasis>。请启用 <reference internal="True" refid="class-richtextlabel-property-bbcode-enabled"><inline classes="std std-ref">bbcode_enabled</inline></reference> 并将文本包围在 <literal>[center]</literal> 标签中，类似：<literal>[center]示例[/center]</literal>。目前也没有垂直对齐文本的内置方法，但这可以通过使用锚点/容器和 <reference internal="True" refid="class-richtextlabel-property-fit-content"><inline classes="std std-ref">fit_content</inline></reference> 属性来模拟。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/bbcode_in_richtextlabel"><inline classes="doc">RichTextLabel 中的 BBCode</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="GUI 富文本/BBcode 演示" refuri="https://godotengine.org/asset-library/asset/132">GUI 富文本/BBcode 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="操作系统测试演示" refuri="https://godotengine.org/asset-library/asset/677">操作系统测试演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="77"></colspec>
                    <colspec colwidth="114"></colspec>
                    <colspec colwidth="75"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-autowrap-mode"><inline classes="std std-ref">autowrap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-bbcode-enabled"><inline classes="std std-ref">bbcode_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>clip_contents</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-clip-contents"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-context-menu-enabled"><inline classes="std std-ref">context_menu_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-custom-effects"><inline classes="std std-ref">custom_effects</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-deselect-on-focus-loss-enabled"><inline classes="std std-ref">deselect_on_focus_loss_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-drag-and-drop-selection-enabled"><inline classes="std std-ref">drag_and_drop_selection_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-fit-content"><inline classes="std std-ref">fit_content</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-hint-underlined"><inline classes="std std-ref">hint_underlined</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-language"><inline classes="std std-ref">language</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-meta-underlined"><inline classes="std std-ref">meta_underlined</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-progress-bar-delay"><inline classes="std std-ref">progress_bar_delay</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1000</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-scroll-active"><inline classes="std std-ref">scroll_active</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-scroll-following"><inline classes="std std-ref">scroll_following</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-selection-enabled"><inline classes="std std-ref">selection_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-shortcut-keys-enabled"><inline classes="std std-ref">shortcut_keys_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-structured-text-bidi-override"><inline classes="std std-ref">structured_text_bidi_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-structured-text-bidi-override-options"><inline classes="std std-ref">structured_text_bidi_override_options</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-tab-size"><inline classes="std std-ref">tab_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-text"><inline classes="std std-ref">text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-text-direction"><inline classes="std std-ref">text_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-visible-characters"><inline classes="std std-ref">visible_characters</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-visible-characters-behavior"><inline classes="std std-ref">visible_characters_behavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-property-visible-ratio"><inline classes="std std-ref">visible_ratio</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="590"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-add-image"><inline classes="std std-ref">add_image</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> image, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> height=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1), <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align=5, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key=null, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> pad=false, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> tooltip="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> size_in_percent=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-add-text"><inline classes="std std-ref">add_text</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-append-text"><inline classes="std std-ref">append_text</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> bbcode <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-deselect"><inline classes="std std-ref">deselect</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-character-line"><inline classes="std std-ref">get_character_line</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> character <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-character-paragraph"><inline classes="std std-ref">get_character_paragraph</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> character <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-content-height"><inline classes="std std-ref">get_content_height</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-content-width"><inline classes="std std-ref">get_content_width</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-line-count"><inline classes="std std-ref">get_line_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-line-offset"><inline classes="std std-ref">get_line_offset</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-menu"><inline classes="std std-ref">get_menu</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-paragraph-count"><inline classes="std std-ref">get_paragraph_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-paragraph-offset"><inline classes="std std-ref">get_paragraph_offset</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> paragraph <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-parsed-text"><inline classes="std std-ref">get_parsed_text</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-selected-text"><inline classes="std std-ref">get_selected_text</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-selection-from"><inline classes="std std-ref">get_selection_from</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-selection-to"><inline classes="std std-ref">get_selection_to</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-total-character-count"><inline classes="std std-ref">get_total_character_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vscrollbar#class-vscrollbar"><inline classes="std std-ref">VScrollBar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-v-scroll-bar"><inline classes="std std-ref">get_v_scroll_bar</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-visible-line-count"><inline classes="std std-ref">get_visible_line_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-get-visible-paragraph-count"><inline classes="std std-ref">get_visible_paragraph_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-install-effect"><inline classes="std std-ref">install_effect</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> effect <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-is-menu-visible"><inline classes="std std-ref">is_menu_visible</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-menu-option"><inline classes="std std-ref">menu_option</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> option <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-newline"><inline classes="std std-ref">newline</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-parse-bbcode"><inline classes="std std-ref">parse_bbcode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> bbcode <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-parse-expressions-for-values"><inline classes="std std-ref">parse_expressions_for_values</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> expressions <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-pop"><inline classes="std std-ref">pop</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-pop-all"><inline classes="std std-ref">pop_all</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-pop-context"><inline classes="std std-ref">pop_context</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-bgcolor"><inline classes="std std-ref">push_bgcolor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> bgcolor <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-bold"><inline classes="std std-ref">push_bold</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-bold-italics"><inline classes="std std-ref">push_bold_italics</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-cell"><inline classes="std std-ref">push_cell</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-color"><inline classes="std std-ref">push_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-context"><inline classes="std std-ref">push_context</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-customfx"><inline classes="std std-ref">push_customfx</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference> effect, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> env <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-dropcap"><inline classes="std std-ref">push_dropcap</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> dropcap_margins=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1), <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> outline_color=Color(0, 0, 0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-fgcolor"><inline classes="std std-ref">push_fgcolor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> fgcolor <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-font"><inline classes="std std-ref">push_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-font-size"><inline classes="std std-ref">push_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-hint"><inline classes="std std-ref">push_hint</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> description <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-indent"><inline classes="std std-ref">push_indent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-italics"><inline classes="std std-ref">push_italics</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-language"><inline classes="std std-ref">push_language</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-list"><inline classes="std std-ref">push_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refid="enum-richtextlabel-listtype"><inline classes="std std-ref">ListType</inline></reference> type, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> capitalize, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> bullet="•" <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-meta"><inline classes="std std-ref">push_meta</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-mono"><inline classes="std std-ref">push_mono</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-normal"><inline classes="std std-ref">push_normal</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-outline-color"><inline classes="std std-ref">push_outline_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-outline-size"><inline classes="std std-ref">push_outline_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-paragraph"><inline classes="std std-ref">push_paragraph</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment, <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> base_direction=0, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language="", <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> st_parser=0, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=163, <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> tab_stops=PackedFloat32Array() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-strikethrough"><inline classes="std std-ref">push_strikethrough</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-table"><inline classes="std std-ref">push_table</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> columns, <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> align_to_row=-1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-push-underline"><inline classes="std std-ref">push_underline</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-remove-paragraph"><inline classes="std std-ref">remove_paragraph</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> paragraph <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-scroll-to-line"><inline classes="std std-ref">scroll_to_line</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-scroll-to-paragraph"><inline classes="std std-ref">scroll_to_paragraph</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> paragraph <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-scroll-to-selection"><inline classes="std std-ref">scroll_to_selection</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-select-all"><inline classes="std std-ref">select_all</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-set-cell-border-color"><inline classes="std std-ref">set_cell_border_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-set-cell-padding"><inline classes="std std-ref">set_cell_padding</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> padding <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-set-cell-row-background-color"><inline classes="std std-ref">set_cell_row_background_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> odd_row_bg, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> even_row_bg <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-set-cell-size-override"><inline classes="std std-ref">set_cell_size_override</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> min_size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> max_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-set-table-column-expand"><inline classes="std std-ref">set_table_column_expand</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> expand, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> ratio=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference>&gt; mask, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> image, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> height=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1), <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align=5, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> pad=false, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> tooltip="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> size_in_percent=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="94"></colspec>
                    <colspec colwidth="29"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-default-color"><inline classes="std std-ref">default_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-font-outline-color"><inline classes="std std-ref">font_outline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-font-selected-color"><inline classes="std std-ref">font_selected_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-font-shadow-color"><inline classes="std std-ref">font_shadow_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-selection-color"><inline classes="std std-ref">selection_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.1, 0.1, 1, 0.8)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-table-border"><inline classes="std std-ref">table_border</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-table-even-row-bg"><inline classes="std std-ref">table_even_row_bg</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-color-table-odd-row-bg"><inline classes="std std-ref">table_odd_row_bg</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-line-separation"><inline classes="std std-ref">line_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-shadow-offset-x"><inline classes="std std-ref">shadow_offset_x</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-shadow-offset-y"><inline classes="std std-ref">shadow_offset_y</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-shadow-outline-size"><inline classes="std std-ref">shadow_outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-table-h-separation"><inline classes="std std-ref">table_h_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-table-v-separation"><inline classes="std std-ref">table_v_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-text-highlight-h-padding"><inline classes="std std-ref">text_highlight_h_padding</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-constant-text-highlight-v-padding"><inline classes="std std-ref">text_highlight_v_padding</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-bold-font"><inline classes="std std-ref">bold_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-bold-italics-font"><inline classes="std std-ref">bold_italics_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-italics-font"><inline classes="std std-ref">italics_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-mono-font"><inline classes="std std-ref">mono_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-normal-font"><inline classes="std std-ref">normal_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-size-bold-font-size"><inline classes="std std-ref">bold_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-size-bold-italics-font-size"><inline classes="std std-ref">bold_italics_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-size-italics-font-size"><inline classes="std std-ref">italics_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-size-mono-font-size"><inline classes="std std-ref">mono_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-font-size-normal-font-size"><inline classes="std std-ref">normal_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-style-focus"><inline classes="std std-ref">focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-richtextlabel-theme-style-normal"><inline classes="std std-ref">normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="信号">
            <title>信号</title>
            <target refid="class-richtextlabel-signal-finished"></target>
            <paragraph classes="classref-signal" ids="class-richtextlabel-signal-finished" names="class_richtextlabel_signal_finished"><strong>finished</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当文档完全加载时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-signal-meta-clicked"></target>
            <paragraph classes="classref-signal" ids="class-richtextlabel-signal-meta-clicked" names="class_richtextlabel_signal_meta_clicked"><strong>meta_clicked</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> meta <strong>)</strong></paragraph>
            <paragraph>当用户点击元标记之间的内容时触发。如果元是在文本中定义的，例如 <literal>[url={"data"="hi"}]hi[/url]</literal>，则该信号的参数为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 类型。如果需要特定类型或对象，则必须使用 <reference internal="True" refid="class-richtextlabel-method-push-meta"><inline classes="std std-ref">push_meta</inline></reference> 方法将数据手动插入标签栈。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-signal-meta-hover-ended"></target>
            <paragraph classes="classref-signal" ids="class-richtextlabel-signal-meta-hover-ended" names="class_richtextlabel_signal_meta_hover_ended"><strong>meta_hover_ended</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> meta <strong>)</strong></paragraph>
            <paragraph>当鼠标退出元标签时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-signal-meta-hover-started"></target>
            <paragraph classes="classref-signal" ids="class-richtextlabel-signal-meta-hover-started" names="class_richtextlabel_signal_meta_hover_started"><strong>meta_hover_started</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> meta <strong>)</strong></paragraph>
            <paragraph>当鼠标进入元标签时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="枚举">
            <title>枚举</title>
            <target refid="enum-richtextlabel-listtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-richtextlabel-listtype" names="enum_richtextlabel_listtype">enum <strong>ListType</strong>:</paragraph>
            <target refid="class-richtextlabel-constant-list-numbers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-list-numbers" names="class_richtextlabel_constant_list_numbers"><reference internal="True" refid="enum-richtextlabel-listtype"><inline classes="std std-ref">ListType</inline></reference> <strong>LIST_NUMBERS</strong> = <literal>0</literal></paragraph>
            <paragraph>每个列表项都有数字标记。</paragraph>
            <target refid="class-richtextlabel-constant-list-letters"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-list-letters" names="class_richtextlabel_constant_list_letters"><reference internal="True" refid="enum-richtextlabel-listtype"><inline classes="std std-ref">ListType</inline></reference> <strong>LIST_LETTERS</strong> = <literal>1</literal></paragraph>
            <paragraph>每个列表项都有字母标记。</paragraph>
            <target refid="class-richtextlabel-constant-list-roman"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-list-roman" names="class_richtextlabel_constant_list_roman"><reference internal="True" refid="enum-richtextlabel-listtype"><inline classes="std std-ref">ListType</inline></reference> <strong>LIST_ROMAN</strong> = <literal>2</literal></paragraph>
            <paragraph>每个列表项都有罗马数字标记。</paragraph>
            <target refid="class-richtextlabel-constant-list-dots"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-list-dots" names="class_richtextlabel_constant_list_dots"><reference internal="True" refid="enum-richtextlabel-listtype"><inline classes="std std-ref">ListType</inline></reference> <strong>LIST_DOTS</strong> = <literal>3</literal></paragraph>
            <paragraph>每个列表项都有实心圆标记。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-richtextlabel-menuitems"></target>
            <paragraph classes="classref-enumeration" ids="enum-richtextlabel-menuitems" names="enum_richtextlabel_menuitems">enum <strong>MenuItems</strong>:</paragraph>
            <target refid="class-richtextlabel-constant-menu-copy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-menu-copy" names="class_richtextlabel_constant_menu_copy"><reference internal="True" refid="enum-richtextlabel-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_COPY</strong> = <literal>0</literal></paragraph>
            <paragraph>复制选中的文本。</paragraph>
            <target refid="class-richtextlabel-constant-menu-select-all"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-menu-select-all" names="class_richtextlabel_constant_menu_select_all"><reference internal="True" refid="enum-richtextlabel-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_SELECT_ALL</strong> = <literal>1</literal></paragraph>
            <paragraph>全选 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 文本。</paragraph>
            <target refid="class-richtextlabel-constant-menu-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-menu-max" names="class_richtextlabel_constant_menu_max"><reference internal="True" refid="enum-richtextlabel-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> <strong>MENU_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-richtextlabel-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-richtextlabel-imageupdatemask"></target>
            <paragraph classes="classref-enumeration" ids="enum-richtextlabel-imageupdatemask" names="enum_richtextlabel_imageupdatemask">flags <strong>ImageUpdateMask</strong>:</paragraph>
            <target refid="class-richtextlabel-constant-update-texture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-texture" names="class_richtextlabel_constant_update_texture"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_TEXTURE</strong> = <literal>1</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会更改图像纹理。</paragraph>
            <target refid="class-richtextlabel-constant-update-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-size" names="class_richtextlabel_constant_update_size"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_SIZE</strong> = <literal>2</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会更改图像大小。</paragraph>
            <target refid="class-richtextlabel-constant-update-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-color" names="class_richtextlabel_constant_update_color"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_COLOR</strong> = <literal>4</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会更改图像颜色。</paragraph>
            <target refid="class-richtextlabel-constant-update-alignment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-alignment" names="class_richtextlabel_constant_update_alignment"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_ALIGNMENT</strong> = <literal>8</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会更改图像内联对齐方式。</paragraph>
            <target refid="class-richtextlabel-constant-update-region"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-region" names="class_richtextlabel_constant_update_region"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_REGION</strong> = <literal>16</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会更改图像纹理区块。</paragraph>
            <target refid="class-richtextlabel-constant-update-pad"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-pad" names="class_richtextlabel_constant_update_pad"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_PAD</strong> = <literal>32</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会更改图像填充。</paragraph>
            <target refid="class-richtextlabel-constant-update-tooltip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-tooltip" names="class_richtextlabel_constant_update_tooltip"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_TOOLTIP</strong> = <literal>64</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会更改图像工具提示。</paragraph>
            <target refid="class-richtextlabel-constant-update-width-in-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-richtextlabel-constant-update-width-in-percent" names="class_richtextlabel_constant_update_width_in_percent"><reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference> <strong>UPDATE_WIDTH_IN_PERCENT</strong> = <literal>128</literal></paragraph>
            <paragraph>如果设置了该位，<reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 会将图像宽度更改自/为百分比。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-richtextlabel-property-autowrap-mode"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-autowrap-mode" names="class_richtextlabel_property_autowrap_mode"><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>autowrap_mode</strong> = <literal>3</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_autowrap_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>get_autowrap_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <reference internal="True" refuri="class_textserver#class-textserver-constant-autowrap-off"><inline classes="std std-ref">TextServer.AUTOWRAP_OFF</inline></reference> 以外的值，则文本将在节点的边界矩形内换行。要了解每种模式的行为，请参见 <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-bbcode-enabled"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-bbcode-enabled" names="class_richtextlabel_property_bbcode_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>bbcode_enabled</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_use_bbcode</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_bbcode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该标签使用 BBCode 格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-context-menu-enabled"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-context-menu-enabled" names="class_richtextlabel_property_context_menu_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>context_menu_enabled</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_context_menu_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_context_menu_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时右键单击会显示上下文菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-custom-effects"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-custom-effects" names="class_richtextlabel_property_custom_effects"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>custom_effects</strong> = <literal>[]</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_effects</strong> <strong>(</strong> <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_effects</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前配置的自定义效果。这是一个<reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference>的数组。</paragraph>
            <paragraph>要添加一个自定义效果，使用<reference internal="True" refid="class-richtextlabel-method-install-effect"><inline classes="std std-ref">install_effect</inline></reference>会更方便。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-deselect-on-focus-loss-enabled"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-deselect-on-focus-loss-enabled" names="class_richtextlabel_property_deselect_on_focus_loss_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>deselect_on_focus_loss_enabled</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_deselect_on_focus_loss_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_deselect_on_focus_loss_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在丢失焦点时会取消选中文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-drag-and-drop-selection-enabled"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-drag-and-drop-selection-enabled" names="class_richtextlabel_property_drag_and_drop_selection_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>drag_and_drop_selection_enabled</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_drag_and_drop_selection_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drag_and_drop_selection_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则允许拖放选中的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-fit-content"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-fit-content" names="class_richtextlabel_property_fit_content"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>fit_content</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_fit_content</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_fit_content_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该标签的最小尺寸会自动更新，适应其内容，与 <reference internal="True" refuri="class_label#class-label"><inline classes="std std-ref">Label</inline></reference> 的行为相匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-hint-underlined"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-hint-underlined" names="class_richtextlabel_property_hint_underlined"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>hint_underlined</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_hint_underline</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_hint_underlined</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该标签节点会在 hint 标记下，加下划线，例如 <literal>[hint=description]{text}[/hint]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-language"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-language" names="class_richtextlabel_property_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>language</strong> = <literal>""</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_language</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-meta-underlined"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-meta-underlined" names="class_richtextlabel_property_meta_underlined"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>meta_underlined</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_meta_underline</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_meta_underlined</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会在元标签下划线，例如 <literal>[url]{text}[/url]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-progress-bar-delay"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-progress-bar-delay" names="class_richtextlabel_property_progress_bar_delay"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>progress_bar_delay</strong> = <literal>1000</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_progress_bar_delay</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_progress_bar_delay</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>加载进度条显示的延迟时间，单位为毫秒。将其设置为 <literal>-1</literal> 将完全禁用进度条。</paragraph>
            <paragraph><strong>注意：</strong>仅当 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference> 已启用时才会显示进度条。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-scroll-active"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-scroll-active" names="class_richtextlabel_property_scroll_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_active</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_scroll_active</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_scroll_active</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则滚动条可见。将此设置为 <literal>false</literal> 不会完全阻止滚动。见<reference internal="True" refid="class-richtextlabel-method-scroll-to-line"><inline classes="std std-ref">scroll_to_line</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-scroll-following"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-scroll-following" names="class_richtextlabel_property_scroll_following"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_following</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_scroll_follow</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_scroll_following</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则窗口向下滚动以自动显示新内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-selection-enabled"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-selection-enabled" names="class_richtextlabel_property_selection_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>selection_enabled</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_selection_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_selection_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，标签允许文本选择。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-shortcut-keys-enabled"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-shortcut-keys-enabled" names="class_richtextlabel_property_shortcut_keys_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shortcut_keys_enabled</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shortcut_keys_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_shortcut_keys_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时，即使上下文菜单已被禁用，也会启用该上下文菜单的快捷键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-structured-text-bidi-override"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-structured-text-bidi-override" names="class_richtextlabel_property_structured_text_bidi_override"><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>structured_text_bidi_override</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_structured_text_bidi_override</strong> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>get_structured_text_bidi_override</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为结构化文本设置 BiDi 算法覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-structured-text-bidi-override-options" names="class_richtextlabel_property_structured_text_bidi_override_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>structured_text_bidi_override_options</strong> = <literal>[]</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_structured_text_bidi_override_options</strong> <strong>(</strong> <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_structured_text_bidi_override_options</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 BiDi 覆盖的附加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-tab-size"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-tab-size" names="class_richtextlabel_property_tab_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>tab_size</strong> = <literal>4</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_tab_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_tab_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与单个制表符长度关联的空格数。不影响文本标签中的 <literal>\t</literal>，只影响缩进标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-text"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-text" names="class_richtextlabel_property_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>text</strong> = <literal>""</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_text</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该标签的在 BBCode 格式中的文本。不代表对内部标签堆栈的手动修改。编辑时擦除通过其他方法所做的更改。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-richtextlabel-property-bbcode-enabled"><inline classes="std std-ref">bbcode_enabled</inline></reference> 为 <literal>true</literal>，则不建议将 <literal>+=</literal> 运算符与 <reference internal="True" refid="class-richtextlabel-property-text"><inline classes="std std-ref">text</inline></reference> 一起使用（例如 <literal>text += "some string"</literal>）因为它会替换整个文本并可能导致速度变慢。它还将擦除使用 <literal>push_*</literal> 方法添加到堆栈中的所有 BBCode。请改用 <reference internal="True" refid="class-richtextlabel-method-append-text"><inline classes="std std-ref">append_text</inline></reference> 添加文本，除非你绝对需要关闭在之前的方法调用中打开的标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-text-direction"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-text-direction" names="class_richtextlabel_property_text_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>text_direction</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_text_direction</strong> <strong>(</strong> <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_text_direction</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>基础文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-threaded"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-threaded" names="class_richtextlabel_property_threaded"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>threaded</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_threaded</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_threaded</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则文本处理在后台线程中完成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-visible-characters"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-visible-characters" names="class_richtextlabel_property_visible_characters"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>visible_characters</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visible_characters</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_characters</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要显示的字符数。如果设置为 <literal>-1</literal>，则显示所有字符。这用于在对话框中为显示的文本设置动画。</paragraph>
            <paragraph><strong>注意：</strong>设置该属性会相应地更新 <reference internal="True" refid="class-richtextlabel-property-visible-ratio"><inline classes="std std-ref">visible_ratio</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-visible-characters-behavior"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-visible-characters-behavior" names="class_richtextlabel_property_visible_characters_behavior"><reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>visible_characters_behavior</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visible_characters_behavior</strong> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference> <strong>get_visible_characters_behavior</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 <reference internal="True" refid="class-richtextlabel-property-visible-characters"><inline classes="std std-ref">visible_characters</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-property-visible-ratio"><inline classes="std std-ref">visible_ratio</inline></reference> 被设置时的裁剪行为。有关详细信息，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-visiblecharactersbehavior"><inline classes="std std-ref">VisibleCharactersBehavior</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-property-visible-ratio"></target>
            <paragraph classes="classref-property" ids="class-richtextlabel-property-visible-ratio" names="class_richtextlabel_property_visible_ratio"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>visible_ratio</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visible_ratio</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_visible_ratio</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相对于字符总数（参见 <reference internal="True" refid="class-richtextlabel-method-get-total-character-count"><inline classes="std std-ref">get_total_character_count</inline></reference>），要显示的字符的占比。如果设置为 <literal>1.0</literal>，则显示所有字符。如果设置为 <literal>0.5</literal>，则只显示一半的字符。这用于在对话框中为显示的文本设置动画。</paragraph>
            <paragraph><strong>注意：</strong>设置该属性会相应地更新 <reference internal="True" refid="class-richtextlabel-property-visible-characters"><inline classes="std std-ref">visible_characters</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-richtextlabel-method-add-image"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-add-image" names="class_richtextlabel_method_add_image">void <strong>add_image</strong> <strong>(</strong> <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> image, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> height=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1), <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align=5, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key=null, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> pad=false, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> tooltip="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> size_in_percent=false <strong>)</strong></paragraph>
            <paragraph>将图像的开始和结束标签添加到标签栈中，可选择提供 <literal>width</literal> 和 <literal>height</literal> 来调整图像大小，提供 <literal>color</literal> 来给图像混色， <literal>region</literal> 只使用图像的一部分。</paragraph>
            <paragraph>如果 <literal>width</literal> 或 <literal>height</literal> 被设置为 0，图像的大小将被调整以保持原始长宽比。</paragraph>
            <paragraph>如果未设置 <literal>width</literal> 和 <literal>height</literal>，但设置了 <literal>region</literal>，则将使用该区域的矩形。</paragraph>
            <paragraph><literal>key</literal> 是一个可选标识符，可用于通过 <reference internal="True" refid="class-richtextlabel-method-update-image"><inline classes="std std-ref">update_image</inline></reference> 修改图像。</paragraph>
            <paragraph>如果设置了 <literal>pad</literal>，并且该图像小于 <literal>width</literal> 和 <literal>height</literal> 指定的大小，则添加图像填充以匹配大小而不是放大图像。</paragraph>
            <paragraph>如果设置了 <literal>size_in_percent</literal>，则 <literal>width</literal> 和 <literal>height</literal> 值是控件宽度的百分比而不是像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-add-text"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-add-text" names="class_richtextlabel_method_add_text">void <strong>add_text</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text <strong>)</strong></paragraph>
            <paragraph>将非 BBCode 解析的原始文本添加到标签栈中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-append-text"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-append-text" names="class_richtextlabel_method_append_text">void <strong>append_text</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> bbcode <strong>)</strong></paragraph>
            <paragraph>解析 <literal>bbcode</literal> 并根据需要将标签添加到标签栈中。</paragraph>
            <paragraph><strong>注意：</strong>使用该方法，无法关闭在之前的 <reference internal="True" refid="class-richtextlabel-method-append-text"><inline classes="std std-ref">append_text</inline></reference> 调用中打开的标签。这样做是为了提高性能，尤其是在更新大型 RichTextLabel 时，因为每次都重建整个 BBCode 会比较慢。如果你绝对需要在接下来的方法调用中关闭标签，请追加 <reference internal="True" refid="class-richtextlabel-property-text"><inline classes="std std-ref">text</inline></reference> 而不是使用 <reference internal="True" refid="class-richtextlabel-method-append-text"><inline classes="std std-ref">append_text</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-clear"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-clear" names="class_richtextlabel_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清空标签栈。</paragraph>
            <paragraph><strong>注意：</strong>这个方法不会修改 <reference internal="True" refid="class-richtextlabel-property-text"><inline classes="std std-ref">text</inline></reference>，但将 <reference internal="True" refid="class-richtextlabel-property-text"><inline classes="std std-ref">text</inline></reference> 设置为空字符串也能清空标签栈。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-deselect"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-deselect" names="class_richtextlabel_method_deselect">void <strong>deselect</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除当前选择。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-character-line"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-character-line" names="class_richtextlabel_method_get_character_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_character_line</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> character <strong>)</strong></paragraph>
            <paragraph>返回提供的字符位置的行号。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-character-paragraph"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-character-paragraph" names="class_richtextlabel_method_get_character_paragraph"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_character_paragraph</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> character <strong>)</strong></paragraph>
            <paragraph>返回提供的字符位置的段号。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-content-height"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-content-height" names="class_richtextlabel_method_get_content_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_content_height</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回内容的高度。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-content-width"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-content-width" names="class_richtextlabel_method_get_content_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_content_width</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回内容的宽度。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-line-count"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-line-count" names="class_richtextlabel_method_get_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回文本中的总行数。自动换行的文本计为多行。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-line-offset"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-line-offset" names="class_richtextlabel_method_get_line_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line <strong>)</strong></paragraph>
            <paragraph>返回位于提供的索引处的行的垂直偏移量。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-menu"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-menu" names="class_richtextlabel_method_get_menu"><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> <strong>get_menu</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <strong>RichTextLabel</strong> 的 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>。默认情况下，这个菜单会在右键单击 <strong>RichTextLabel</strong> 时显示。</paragraph>
            <paragraph>你可以加入自定义的菜单项，或者移除标准菜单项。请确保你的 ID 与标准 ID 不冲突（见 <reference internal="True" refid="enum-richtextlabel-menuitems"><inline classes="std std-ref">MenuItems</inline></reference>）。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var menu = get_menu()
    # 移除“全选”菜单项。
    menu.remove_item(MENU_SELECT_ALL)
    # 添加自定义菜单项。
    menu.add_separator()
    menu.add_item("制作文本副本", MENU_MAX + 1)
    # 连接回调。
    menu.id_pressed.connect(_on_item_pressed)

func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        add_text("\n" + get_parsed_text())</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    var menu = GetMenu();
    // 移除“全选”菜单项。
    menu.RemoveItem(RichTextLabel.MenuItems.SelectAll);
    // 添加自定义菜单项。
    menu.AddSeparator();
    menu.AddItem("制作文本副本", RichTextLabel.MenuItems.Max + 1);
    // 添加事件处理器。
    menu.IdPressed += OnItemPressed;
}

public void OnItemPressed(int id)
{
    if (id == TextEdit.MenuItems.Max + 1)
    {
        AddText("\n" + GetParsedText());
    }
}</literal_block>
                </div>
            </container>
            <paragraph><strong>警告：</strong>这是必要的内部节点，将其移除或释放可能导致崩溃。如果你想要将其隐藏，或者隐藏其子节点，请使用其 <reference internal="True" refuri="class_window#class-window-property-visible"><inline classes="std std-ref">Window.visible</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-paragraph-count"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-paragraph-count" names="class_richtextlabel_method_get_paragraph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_paragraph_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回段落的总数（换行符或标记栈文本标签中的 <literal>p</literal> 标签）。自动换行的文本视为一个段落。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-paragraph-offset"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-paragraph-offset" names="class_richtextlabel_method_get_paragraph_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_paragraph_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> paragraph <strong>)</strong></paragraph>
            <paragraph>返回位于提供的索引处的段落的垂直偏移量。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-parsed-text"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-parsed-text" names="class_richtextlabel_method_get_parsed_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_parsed_text</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回没有 BBCode 标记的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-selected-text"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-selected-text" names="class_richtextlabel_method_get_selected_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_selected_text</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前选中的文本。不包括 BBCode。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-selection-from"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-selection-from" names="class_richtextlabel_method_get_selection_from"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_from</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果选区处于活动状态，则返回当前选区第一个字符的索引，否则返回 <literal>-1</literal>。不包括 BBCode。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-selection-to"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-selection-to" names="class_richtextlabel_method_get_selection_to"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selection_to</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果选择处于活动状态，则返回当前选区最后一个字符的索引，否则返回 <literal>-1</literal>。不包括 BBCode。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-total-character-count"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-total-character-count" names="class_richtextlabel_method_get_total_character_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_total_character_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回文本标签的总字符数。不包括 BBCode。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-v-scroll-bar"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-v-scroll-bar" names="class_richtextlabel_method_get_v_scroll_bar"><reference internal="True" refuri="class_vscrollbar#class-vscrollbar"><inline classes="std std-ref">VScrollBar</inline></reference> <strong>get_v_scroll_bar</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回垂直滚动条。</paragraph>
            <paragraph><strong>警告：</strong>这是一个必需的内部节点，删除和释放它可能会导致崩溃。如果你希望隐藏它或其任何子项，请使用它们的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-visible"><inline classes="std std-ref">CanvasItem.visible</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-visible-line-count"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-visible-line-count" names="class_richtextlabel_method_get_visible_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_line_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回可见行数。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回的是文档已加载部分的值。请使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-get-visible-paragraph-count"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-get-visible-paragraph-count" names="class_richtextlabel_method_get_visible_paragraph_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visible_paragraph_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回可见段落的数量。如果段落中至少有一行是可见的，则该段落被认为是可见的。</paragraph>
            <paragraph><strong>注意：</strong>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则此方法返回文档已加载部分的值。使用 <reference internal="True" refid="class-richtextlabel-method-is-ready"><inline classes="std std-ref">is_ready</inline></reference> 或 <reference internal="True" refid="class-richtextlabel-signal-finished"><inline classes="std std-ref">finished</inline></reference> 来确定文档是否已完全加载。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-install-effect"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-install-effect" names="class_richtextlabel_method_install_effect">void <strong>install_effect</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> effect <strong>)</strong></paragraph>
            <paragraph>安装自定义效果。这也可以在 RichTextLabel 检查器中使用 <reference internal="True" refid="class-richtextlabel-property-custom-effects"><inline classes="std std-ref">custom_effects</inline></reference> 属性来完成。<literal>effect</literal> 应该是一个有效的 <reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference>。</paragraph>
            <paragraph>RichTextEffect 示例：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># effect.gd
class_name MyCustomEffect
extends RichTextEffect

var bbcode = "my_custom_effect"

# ...</literal_block>
            <paragraph>通过脚本在 RichTextLabel 中注册上述效果：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># rich_text_label.gd
extends RichTextLabel

func _ready():
    install_effect(MyCustomEffect.new())

    # 或者，如果在扩展 RichTextEffect 的脚本中不使用“class_name”：
    install_effect(preload("res://effect.gd").new())</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-is-menu-visible"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-is-menu-visible" names="class_richtextlabel_method_is_menu_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_menu_visible</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回菜单是否可见。请使用这个方法来代替 <literal>get_menu().visible</literal>，可以提高性能（因为避免了菜单的创建）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-is-ready"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-is-ready" names="class_richtextlabel_method_is_ready"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_ready</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果启用了 <reference internal="True" refid="class-richtextlabel-property-threaded"><inline classes="std std-ref">threaded</inline></reference>，则在后台线程完成文本处理后，返回 <literal>true</literal>，否则始终返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-menu-option"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-menu-option" names="class_richtextlabel_method_menu_option">void <strong>menu_option</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> option <strong>)</strong></paragraph>
            <paragraph>执行 <reference internal="True" refid="enum-richtextlabel-menuitems"><inline classes="std std-ref">MenuItems</inline></reference> 枚举中定义的给定操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-newline"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-newline" names="class_richtextlabel_method_newline">void <strong>newline</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加一个换行标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-parse-bbcode"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-parse-bbcode" names="class_richtextlabel_method_parse_bbcode">void <strong>parse_bbcode</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> bbcode <strong>)</strong></paragraph>
            <paragraph><reference internal="True" refid="class-richtextlabel-method-append-text"><inline classes="std std-ref">append_text</inline></reference> 的赋值版本。清空标签栈并插入新内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-parse-expressions-for-values"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-parse-expressions-for-values" names="class_richtextlabel_method_parse_expressions_for_values"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>parse_expressions_for_values</strong> <strong>(</strong> <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> expressions <strong>)</strong></paragraph>
            <paragraph>将 BBCode 参数 <literal>expressions</literal> 解析为字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-pop"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-pop" names="class_richtextlabel_method_pop">void <strong>pop</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>终止当前标签。使用 <literal>push_*</literal> 方法之后手动关闭 BBCodes。不需要遵循 <literal>add_*</literal> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-pop-all"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-pop-all" names="class_richtextlabel_method_pop_all">void <strong>pop_all</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>终止由 <literal>push_*</literal> 方法打开的所有标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-pop-context"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-pop-context" names="class_richtextlabel_method_pop_context">void <strong>pop_context</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>终止上一次 <reference internal="True" refid="class-richtextlabel-method-push-context"><inline classes="std std-ref">push_context</inline></reference> 调用后打开的标签（包括上下文标记）；或者如果堆栈上没有上下文标记，则终止所有标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-bgcolor"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-bgcolor" names="class_richtextlabel_method_push_bgcolor">void <strong>push_bgcolor</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> bgcolor <strong>)</strong></paragraph>
            <paragraph>向标签栈中添加 <literal>[bgcolor]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-bold"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-bold" names="class_richtextlabel_method_push_bold">void <strong>push_bold</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[font]</literal> 标签，字体为黑体。如果当前没有 <literal>[i]</literal> 标签，则与添加 <literal>[b]</literal> 标签相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-bold-italics"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-bold-italics" names="class_richtextlabel_method_push_bold_italics">void <strong>push_bold_italics</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[font]</literal> 标签，字体为粗斜体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-cell"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-cell" names="class_richtextlabel_method_push_cell">void <strong>push_cell</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[cell]</literal> 标签。必须位于 <literal>[table]</literal> 标签内。详见 <reference internal="True" refid="class-richtextlabel-method-push-table"><inline classes="std std-ref">push_table</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-color"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-color" names="class_richtextlabel_method_push_color">void <strong>push_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[color]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-context"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-context" names="class_richtextlabel_method_push_context">void <strong>push_context</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将上下文标记添加到标记堆栈。请参阅 <reference internal="True" refid="class-richtextlabel-method-pop-context"><inline classes="std std-ref">pop_context</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-customfx"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-customfx" names="class_richtextlabel_method_push_customfx">void <strong>push_customfx</strong> <strong>(</strong> <reference internal="True" refuri="class_richtexteffect#class-richtexteffect"><inline classes="std std-ref">RichTextEffect</inline></reference> effect, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> env <strong>)</strong></paragraph>
            <paragraph>将一个自定义效果标签添加到标签栈。效果不需要在 <reference internal="True" refid="class-richtextlabel-property-custom-effects"><inline classes="std std-ref">custom_effects</inline></reference> 中。环境被直接传入给效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-dropcap"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-dropcap" names="class_richtextlabel_method_push_dropcap">void <strong>push_dropcap</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> string, <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> dropcap_margins=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1), <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> outline_color=Color(0, 0, 0, 0) <strong>)</strong></paragraph>
            <paragraph>将 <literal>[dropcap]</literal> 标签添加到标签堆栈中。首字下沉是一种装饰性元素，位于段落开头，比其余文本要大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-fgcolor"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-fgcolor" names="class_richtextlabel_method_push_fgcolor">void <strong>push_fgcolor</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> fgcolor <strong>)</strong></paragraph>
            <paragraph>向标签栈中添加 <literal>[fgcolor]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-font"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-font" names="class_richtextlabel_method_push_font">void <strong>push_font</strong> <strong>(</strong> <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=0 <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[font]</literal> 标签。在其有效期内覆盖默认字体。</paragraph>
            <paragraph>将 <literal>font_size</literal> 设置为 <literal>0</literal> 会使用默认字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-font-size"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-font-size" names="class_richtextlabel_method_push_font_size">void <strong>push_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[font_size]</literal> 标签。在其有效期内覆盖默认字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-hint"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-hint" names="class_richtextlabel_method_push_hint">void <strong>push_hint</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> description <strong>)</strong></paragraph>
            <paragraph>向标签栈中添加 <literal>[hint]</literal> 标签。类似于 BBCode 的 <literal>[hint=something]{text}[/hint]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-indent"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-indent" names="class_richtextlabel_method_push_indent">void <strong>push_indent</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level <strong>)</strong></paragraph>
            <paragraph>添加一个 <literal>[indent]</literal> 标签到标签栈。将 <literal>level</literal> 乘以当前 <reference internal="True" refid="class-richtextlabel-property-tab-size"><inline classes="std std-ref">tab_size</inline></reference> 以确定新的边距长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-italics"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-italics" names="class_richtextlabel_method_push_italics">void <strong>push_italics</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[font]</literal> 标签，字体为斜体。如果当前不在 <literal>[b]</literal> 标签中，则与添加 <literal>[i]</literal> 标签相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-language"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-language" names="class_richtextlabel_method_push_language">void <strong>push_language</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong></paragraph>
            <paragraph>添加用于文本塑形算法和 Open-Type 字体功能的语言代码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-list"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-list" names="class_richtextlabel_method_push_list">void <strong>push_list</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> level, <reference internal="True" refid="enum-richtextlabel-listtype"><inline classes="std std-ref">ListType</inline></reference> type, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> capitalize, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> bullet="•" <strong>)</strong></paragraph>
            <paragraph>将 <literal>[ol]</literal> 或 <literal>[ul]</literal> 标签添加到标签堆栈中。将 <literal>level</literal> 乘以当前 <reference internal="True" refid="class-richtextlabel-property-tab-size"><inline classes="std std-ref">tab_size</inline></reference> 来确定新的边距长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-meta"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-meta" names="class_richtextlabel_method_push_meta">void <strong>push_meta</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> data <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加元标签。类似于 BBCode 的 <literal>[url=something]{text}[/url]</literal>，但支持非 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 元数据类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-mono"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-mono" names="class_richtextlabel_method_push_mono">void <strong>push_mono</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[font]</literal> 标签，该标签为等宽字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-normal"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-normal" names="class_richtextlabel_method_push_normal">void <strong>push_normal</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加具有正常字体的 <literal>[font]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-outline-color"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-outline-color" names="class_richtextlabel_method_push_outline_color">void <strong>push_outline_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[outline_color]</literal> 标签。在其有效期内为文本添加轮廓。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-outline-size"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-outline-size" names="class_richtextlabel_method_push_outline_size">void <strong>push_outline_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> outline_size <strong>)</strong></paragraph>
            <paragraph>在标签栈中添加 <literal>[outline_size]</literal> 标签。在其有效期内覆盖默认的文本轮廓大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-paragraph"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-paragraph" names="class_richtextlabel_method_push_paragraph">void <strong>push_paragraph</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment, <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> base_direction=0, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language="", <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> st_parser=0, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=163, <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> tab_stops=PackedFloat32Array() <strong>)</strong></paragraph>
            <paragraph>向标签栈中添加 <literal>[p]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-strikethrough"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-strikethrough" names="class_richtextlabel_method_push_strikethrough">void <strong>push_strikethrough</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>向标签栈中添加 <literal>[s]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-table"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-table" names="class_richtextlabel_method_push_table">void <strong>push_table</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> columns, <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> align_to_row=-1 <strong>)</strong></paragraph>
            <paragraph>向标签栈中添加 <literal>[table=columns,inline_align]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-push-underline"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-push-underline" names="class_richtextlabel_method_push_underline">void <strong>push_underline</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>向标签栈中添加 <literal>[u]</literal> 标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-remove-paragraph"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-remove-paragraph" names="class_richtextlabel_method_remove_paragraph"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>remove_paragraph</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> paragraph <strong>)</strong></paragraph>
            <paragraph>从标签中移除一段内容。如果该段落存在，则返回 <literal>true</literal>。</paragraph>
            <paragraph><literal>paragraph</literal> 参数是要移除的段落的索引，它可以在 <literal>[0, get_paragraph_count() - 1]</literal> 区间内取值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-scroll-to-line"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-scroll-to-line" names="class_richtextlabel_method_scroll_to_line">void <strong>scroll_to_line</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line <strong>)</strong></paragraph>
            <paragraph>滚动窗口，让第一行与 <literal>line</literal> 匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-scroll-to-paragraph"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-scroll-to-paragraph" names="class_richtextlabel_method_scroll_to_paragraph">void <strong>scroll_to_paragraph</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> paragraph <strong>)</strong></paragraph>
            <paragraph>滚动窗口，让第一行与 <literal>paragraph</literal> 的第一行匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-scroll-to-selection"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-scroll-to-selection" names="class_richtextlabel_method_scroll_to_selection">void <strong>scroll_to_selection</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>滚动到当前选区的开头。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-select-all"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-select-all" names="class_richtextlabel_method_select_all">void <strong>select_all</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>全选文本。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-richtextlabel-property-selection-enabled"><inline classes="std std-ref">selection_enabled</inline></reference> 为 <literal>false</literal>，则不会进行选择。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-set-cell-border-color"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-set-cell-border-color" names="class_richtextlabel_method_set_cell_border_color">void <strong>set_cell_border_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>设置表格的单元格边框颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-set-cell-padding"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-set-cell-padding" names="class_richtextlabel_method_set_cell_padding">void <strong>set_cell_padding</strong> <strong>(</strong> <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> padding <strong>)</strong></paragraph>
            <paragraph>设置表格的单元格内边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-set-cell-row-background-color"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-set-cell-row-background-color" names="class_richtextlabel_method_set_cell_row_background_color">void <strong>set_cell_row_background_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> odd_row_bg, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> even_row_bg <strong>)</strong></paragraph>
            <paragraph>设置某个表格单元格的颜色。可以为交替行指定单独的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-set-cell-size-override"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-set-cell-size-override" names="class_richtextlabel_method_set_cell_size_override">void <strong>set_cell_size_override</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> min_size, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> max_size <strong>)</strong></paragraph>
            <paragraph>设置某个表格单元格的最小和最大尺寸覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-set-table-column-expand"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-set-table-column-expand" names="class_richtextlabel_method_set_table_column_expand">void <strong>set_table_column_expand</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> expand, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> ratio=1 <strong>)</strong></paragraph>
            <paragraph>编辑选定列的扩展选项。如果 <literal>expand</literal> 为 <literal>true</literal>，则该列按其扩展比率相对于其他列的比率进行扩展。</paragraph>
            <paragraph>例如，比率为 3 和 4 的两列，加上 70 像素的可用宽度，将分别扩展 30 和 40 像素。</paragraph>
            <paragraph>如果 <literal>expand</literal> 为 <literal>false</literal>，则该列将不会对总比率产生影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-method-update-image"></target>
            <paragraph classes="classref-method" ids="class-richtextlabel-method-update-image" names="class_richtextlabel_method_update_image">void <strong>update_image</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> key, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-richtextlabel-imageupdatemask"><inline classes="std std-ref">ImageUpdateMask</inline></reference>&gt; mask, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> image, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> height=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color=Color(1, 1, 1, 1), <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> inline_align=5, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> pad=false, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> tooltip="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> size_in_percent=false <strong>)</strong></paragraph>
            <paragraph>使用键 <literal>key</literal> 更新已有图像。仅更新 <literal>mask</literal> 位指定的属性。请参阅 <reference internal="True" refid="class-richtextlabel-method-add-image"><inline classes="std std-ref">add_image</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-richtextlabel-theme-color-default-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-default-color" names="class_richtextlabel_theme_color_default_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>default_color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <paragraph>默认文本颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-color-font-outline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-font-outline-color" names="class_richtextlabel_theme_color_font_outline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_outline_color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <paragraph>文本轮廓的默认色调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-color-font-selected-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-font-selected-color" names="class_richtextlabel_theme_color_font_selected_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_selected_color</strong> = <literal>Color(0, 0, 0, 0)</literal></paragraph>
            <paragraph>选中文本的颜色，当 <reference internal="True" refid="class-richtextlabel-property-selection-enabled"><inline classes="std std-ref">selection_enabled</inline></reference> 为 <literal>true</literal> 时使用。如果等于 <literal>Color(0, 0, 0, 0)</literal>，则它将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-color-font-shadow-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-font-shadow-color" names="class_richtextlabel_theme_color_font_shadow_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_shadow_color</strong> = <literal>Color(0, 0, 0, 0)</literal></paragraph>
            <paragraph>字体阴影的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-color-selection-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-selection-color" names="class_richtextlabel_theme_color_selection_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>selection_color</strong> = <literal>Color(0.1, 0.1, 1, 0.8)</literal></paragraph>
            <paragraph>选择框的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-color-table-border"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-table-border" names="class_richtextlabel_theme_color_table_border"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>table_border</strong> = <literal>Color(0, 0, 0, 0)</literal></paragraph>
            <paragraph>默认单元格边框颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-color-table-even-row-bg"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-table-even-row-bg" names="class_richtextlabel_theme_color_table_even_row_bg"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>table_even_row_bg</strong> = <literal>Color(0, 0, 0, 0)</literal></paragraph>
            <paragraph>偶数行的默认背景色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-color-table-odd-row-bg"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-color-table-odd-row-bg" names="class_richtextlabel_theme_color_table_odd_row_bg"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>table_odd_row_bg</strong> = <literal>Color(0, 0, 0, 0)</literal></paragraph>
            <paragraph>奇数行的默认背景色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-line-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-line-separation" names="class_richtextlabel_theme_constant_line_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>line_separation</strong> = <literal>0</literal></paragraph>
            <paragraph>行之间的垂直空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-outline-size" names="class_richtextlabel_theme_constant_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>0</literal></paragraph>
            <paragraph>文字轮廓的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果使用启用了 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference> 的字体，其 <reference internal="True" refuri="class_fontfile#class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">FontFile.msdf_pixel_range</inline></reference> 必须至少设置为 <reference internal="True" refid="class-richtextlabel-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference> 的<emphasis>两倍</emphasis>，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-shadow-offset-x"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-shadow-offset-x" names="class_richtextlabel_theme_constant_shadow_offset_x"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_offset_x</strong> = <literal>1</literal></paragraph>
            <paragraph>字体阴影的水平偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-shadow-offset-y"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-shadow-offset-y" names="class_richtextlabel_theme_constant_shadow_offset_y"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_offset_y</strong> = <literal>1</literal></paragraph>
            <paragraph>字体阴影的垂直偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-shadow-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-shadow-outline-size" names="class_richtextlabel_theme_constant_shadow_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_outline_size</strong> = <literal>1</literal></paragraph>
            <paragraph>阴影轮廓的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-table-h-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-table-h-separation" names="class_richtextlabel_theme_constant_table_h_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>table_h_separation</strong> = <literal>3</literal></paragraph>
            <paragraph>表中元素的水平间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-table-v-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-table-v-separation" names="class_richtextlabel_theme_constant_table_v_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>table_v_separation</strong> = <literal>3</literal></paragraph>
            <paragraph>表中元素的垂直间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-text-highlight-h-padding"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-text-highlight-h-padding" names="class_richtextlabel_theme_constant_text_highlight_h_padding"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>text_highlight_h_padding</strong> = <literal>3</literal></paragraph>
            <paragraph>由 <literal>[fgcolor]</literal> 和 <literal>[bgcolor]</literal> 标记绘制的框周围的水平填充。这不会影响文本选择的外观。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-constant-text-highlight-v-padding"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-constant-text-highlight-v-padding" names="class_richtextlabel_theme_constant_text_highlight_v_padding"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>text_highlight_v_padding</strong> = <literal>3</literal></paragraph>
            <paragraph>由 <literal>[fgcolor]</literal> 和 <literal>[bgcolor]</literal> 标记绘制的框周围的垂直填充。这不会影响文本选择的外观。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-bold-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-bold-font" names="class_richtextlabel_theme_font_bold_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>bold_font</strong></paragraph>
            <paragraph>用于粗体字的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-bold-italics-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-bold-italics-font" names="class_richtextlabel_theme_font_bold_italics_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>bold_italics_font</strong></paragraph>
            <paragraph>用于粗斜体文字的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-italics-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-italics-font" names="class_richtextlabel_theme_font_italics_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>italics_font</strong></paragraph>
            <paragraph>用于斜体字的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-mono-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-mono-font" names="class_richtextlabel_theme_font_mono_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>mono_font</strong></paragraph>
            <paragraph>用于等宽文本的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-normal-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-normal-font" names="class_richtextlabel_theme_font_normal_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>normal_font</strong></paragraph>
            <paragraph>默认的文本字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-size-bold-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-size-bold-font-size" names="class_richtextlabel_theme_font_size_bold_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bold_font_size</strong></paragraph>
            <paragraph>用于粗体文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-size-bold-italics-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-size-bold-italics-font-size" names="class_richtextlabel_theme_font_size_bold_italics_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bold_italics_font_size</strong></paragraph>
            <paragraph>用于粗斜体文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-size-italics-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-size-italics-font-size" names="class_richtextlabel_theme_font_size_italics_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>italics_font_size</strong></paragraph>
            <paragraph>用于斜体文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-size-mono-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-size-mono-font-size" names="class_richtextlabel_theme_font_size_mono_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mono_font_size</strong></paragraph>
            <paragraph>用于等宽文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-font-size-normal-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-font-size-normal-font-size" names="class_richtextlabel_theme_font_size_normal_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>normal_font_size</strong></paragraph>
            <paragraph>默认文本字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-style-focus"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-style-focus" names="class_richtextlabel_theme_style_focus"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>focus</strong></paragraph>
            <paragraph>该 <strong>RichTextLabel</strong> 处于聚焦状态时使用的背景。<reference internal="True" refid="class-richtextlabel-theme-style-focus"><inline classes="std std-ref">focus</inline></reference> <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 显示在基础 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <emphasis>之上</emphasis>，所以应该使用部分透明的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，确保基础 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 仍然可见。代表轮廓或下划线的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 可以很好地实现这个目的。要禁用聚焦的视觉效果，请指定 <reference internal="True" refuri="class_styleboxempty#class-styleboxempty"><inline classes="std std-ref">StyleBoxEmpty</inline></reference> 资源。请注意，禁用聚焦的视觉效果会影响使用键盘/手柄进行导航的可用性，所以出于可访问性的原因，不建议这样做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-richtextlabel-theme-style-normal"></target>
            <paragraph classes="classref-themeproperty" ids="class-richtextlabel-theme-style-normal" names="class_richtextlabel_theme_style_normal"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>normal</strong></paragraph>
            <paragraph><strong>RichTextLabel</strong> 的正常背景。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
