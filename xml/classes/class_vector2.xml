<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_vector2.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Vector2.xml.</comment>
    <target refid="class-vector2"></target>
    <section ids="vector2 class-vector2" names="vector2 class_vector2">
        <title>Vector2</title>
        <paragraph>使用浮点数坐标的 2D 向量。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>包含两个元素的结构体，可用于代表 2D 坐标或任何数值的二元组。</paragraph>
            <paragraph>使用浮点数坐标。默认情况下，这些浮点值为 32 位精度，与始终为 64 位的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 并不相同。如果需要双精度，请在编译引擎时使用 <literal>precision=double</literal> 选项。</paragraph>
            <paragraph>对应的整数版本见 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>在布尔语境中，如果 Vector2 等于 <literal>Vector2(0, 0)</literal> 则求值结果为 <literal>false</literal>。否则 Vector2 的求值结果始终为 <literal>true</literal>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/index"><inline classes="doc">数学文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/vector_math"><inline classes="doc">向量数学</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/vectors_advanced"><inline classes="doc">高等向量数学</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3Blue1Brown《线性代数的本质》" refuri="https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab">3Blue1Brown《线性代数的本质》</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="矩阵变换演示" refuri="https://godotengine.org/asset-library/asset/2787">矩阵变换演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="所有 2D 演示" refuri="https://github.com/godotengine/godot-demo-projects/tree/master/2d">所有 2D 演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="36"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-property-x"><inline classes="std std-ref">x</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-property-y"><inline classes="std std-ref">y</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="119"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-constructor-vector2"><inline classes="std std-ref">Vector2</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-constructor-vector2"><inline classes="std std-ref">Vector2</inline></reference>(from: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-constructor-vector2"><inline classes="std std-ref">Vector2</inline></reference>(from: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-constructor-vector2"><inline classes="std std-ref">Vector2</inline></reference>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="354"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-abs"><inline classes="std std-ref">abs</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-angle"><inline classes="std std-ref">angle</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-angle-to"><inline classes="std std-ref">angle_to</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-angle-to-point"><inline classes="std std-ref">angle_to_point</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-aspect"><inline classes="std std-ref">aspect</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-bezier-derivative"><inline classes="std std-ref">bezier_derivative</inline></reference>(control_1: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, control_2: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, end: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-bezier-interpolate"><inline classes="std std-ref">bezier_interpolate</inline></reference>(control_1: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, control_2: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, end: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-bounce"><inline classes="std std-ref">bounce</inline></reference>(n: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-ceil"><inline classes="std std-ref">ceil</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-clamp"><inline classes="std std-ref">clamp</inline></reference>(min: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, max: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-clampf"><inline classes="std std-ref">clampf</inline></reference>(min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-cross"><inline classes="std std-ref">cross</inline></reference>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-cubic-interpolate"><inline classes="std std-ref">cubic_interpolate</inline></reference>(b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, pre_a: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, post_b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-cubic-interpolate-in-time"><inline classes="std std-ref">cubic_interpolate_in_time</inline></reference>(b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, pre_a: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, post_b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_a_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-direction-to"><inline classes="std std-ref">direction_to</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-distance-squared-to"><inline classes="std std-ref">distance_squared_to</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-distance-to"><inline classes="std std-ref">distance_to</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-dot"><inline classes="std std-ref">dot</inline></reference>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-floor"><inline classes="std std-ref">floor</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-from-angle"><inline classes="std std-ref">from_angle</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-is-normalized"><inline classes="std std-ref">is_normalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-is-zero-approx"><inline classes="std std-ref">is_zero_approx</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-length"><inline classes="std std-ref">length</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-length-squared"><inline classes="std std-ref">length_squared</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-lerp"><inline classes="std std-ref">lerp</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-limit-length"><inline classes="std std-ref">limit_length</inline></reference>(length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-max"><inline classes="std std-ref">max</inline></reference>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-maxf"><inline classes="std std-ref">maxf</inline></reference>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-min"><inline classes="std std-ref">min</inline></reference>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-minf"><inline classes="std std-ref">minf</inline></reference>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-move-toward"><inline classes="std std-ref">move_toward</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-normalized"><inline classes="std std-ref">normalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-orthogonal"><inline classes="std std-ref">orthogonal</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-posmod"><inline classes="std std-ref">posmod</inline></reference>(mod: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-posmodv"><inline classes="std std-ref">posmodv</inline></reference>(modv: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-project"><inline classes="std std-ref">project</inline></reference>(b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-reflect"><inline classes="std std-ref">reflect</inline></reference>(line: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-rotated"><inline classes="std std-ref">rotated</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-round"><inline classes="std std-ref">round</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-sign"><inline classes="std std-ref">sign</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-slerp"><inline classes="std std-ref">slerp</inline></reference>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-slide"><inline classes="std std-ref">slide</inline></reference>(n: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-snapped"><inline classes="std std-ref">snapped</inline></reference>(step: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-method-snappedf"><inline classes="std std-ref">snappedf</inline></reference>(step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="112"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-neq-vector2"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-mul-transform2d"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-mul-vector2"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-sum-vector2"><inline classes="std std-ref">operator +</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-dif-vector2"><inline classes="std std-ref">operator -</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-div-vector2"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-div-float"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-div-int"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-lt-vector2"><inline classes="std std-ref">operator &lt;</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-lte-vector2"><inline classes="std std-ref">operator &lt;=</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-eq-vector2"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-gt-vector2"><inline classes="std std-ref">operator &gt;</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-gte-vector2"><inline classes="std std-ref">operator &gt;=</inline></reference>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-unplus"><inline classes="std std-ref">operator unary+</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-vector2-operator-unminus"><inline classes="std std-ref">operator unary-</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-vector2-constant-axis-x"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-axis-x" names="class_vector2_constant_axis_x"><strong>AXIS_X</strong> = <literal>0</literal> <reference internal="True" refid="class-vector2-constant-axis-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>X 轴的枚举值。由 <reference internal="True" refid="class-vector2-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference> 和 <reference internal="True" refid="class-vector2-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference> 返回。</paragraph>
            <target refid="class-vector2-constant-axis-y"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-axis-y" names="class_vector2_constant_axis_y"><strong>AXIS_Y</strong> = <literal>1</literal> <reference internal="True" refid="class-vector2-constant-axis-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Y 轴的枚举值。由 <reference internal="True" refid="class-vector2-method-max-axis-index"><inline classes="std std-ref">max_axis_index</inline></reference> 和 <reference internal="True" refid="class-vector2-method-min-axis-index"><inline classes="std std-ref">min_axis_index</inline></reference> 返回。</paragraph>
            <target refid="class-vector2-constant-zero"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-zero" names="class_vector2_constant_zero"><strong>ZERO</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-vector2-constant-zero"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>零向量，所有分量都设置为 <literal>0</literal> 的向量。</paragraph>
            <target refid="class-vector2-constant-one"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-one" names="class_vector2_constant_one"><strong>ONE</strong> = <literal>Vector2(1, 1)</literal> <reference internal="True" refid="class-vector2-constant-one"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>一向量，所有分量都设置为 <literal>1</literal> 的向量。</paragraph>
            <target refid="class-vector2-constant-inf"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-inf" names="class_vector2_constant_inf"><strong>INF</strong> = <literal>Vector2(inf, inf)</literal> <reference internal="True" refid="class-vector2-constant-inf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>无穷大向量，所有分量都设置为 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-inf"><inline classes="std std-ref">@GDScript.INF</inline></reference> 的向量。</paragraph>
            <target refid="class-vector2-constant-left"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-left" names="class_vector2_constant_left"><strong>LEFT</strong> = <literal>Vector2(-1, 0)</literal> <reference internal="True" refid="class-vector2-constant-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>左单位向量。代表左的方向。</paragraph>
            <target refid="class-vector2-constant-right"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-right" names="class_vector2_constant_right"><strong>RIGHT</strong> = <literal>Vector2(1, 0)</literal> <reference internal="True" refid="class-vector2-constant-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>右单位向量。代表右的方向。</paragraph>
            <target refid="class-vector2-constant-up"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-up" names="class_vector2_constant_up"><strong>UP</strong> = <literal>Vector2(0, -1)</literal> <reference internal="True" refid="class-vector2-constant-up"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>上单位向量。在 2D 中 Y 是向下的，所以这个向量指向 -Y。</paragraph>
            <target refid="class-vector2-constant-down"></target>
            <paragraph classes="classref-constant" ids="class-vector2-constant-down" names="class_vector2_constant_down"><strong>DOWN</strong> = <literal>Vector2(0, 1)</literal> <reference internal="True" refid="class-vector2-constant-down"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>下单位向量。在 2D 中 Y 是向下的，所以这个向量指向 +Y。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-vector2-property-x"></target>
            <paragraph classes="classref-property" ids="class-vector2-property-x" names="class_vector2_property_x"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>x</strong> = <literal>0.0</literal> <reference internal="True" refid="class-vector2-property-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向量的 X 分量。也可以通过使用索引位置 <literal>[0]</literal> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-property-y"></target>
            <paragraph classes="classref-property" ids="class-vector2-property-y" names="class_vector2_property_y"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>y</strong> = <literal>0.0</literal> <reference internal="True" refid="class-vector2-property-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向量的 Y 分量。也可以通过使用索引位置 <literal>[1]</literal> 访问。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-vector2-constructor-vector2"></target>
            <paragraph classes="classref-constructor" ids="class-vector2-constructor-vector2" names="class_vector2_constructor_vector2"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>Vector2</strong>() <reference internal="True" refid="class-vector2-constructor-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造默认初始化的 <strong>Vector2</strong>，所有分量均为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>Vector2</strong>(from: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>Vector2</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>Vector2</strong>(from: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
            <paragraph>从 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 构造新的 <strong>Vector2</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>Vector2</strong>(x: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, y: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
            <paragraph>从给定的 <literal>x</literal> 和 <literal>y</literal> 构造新的 <strong>Vector2</strong>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="方法说明">
            <title>方法说明</title>
            <target refid="class-vector2-method-abs"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-abs" names="class_vector2_method_abs"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>abs</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-abs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新向量，其所有分量都是绝对值，即正值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-angle"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-angle" names="class_vector2_method_angle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angle</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量与 X 轴正方向的夹角，单位为弧度。X 轴正方向为 <literal>(1, 0)</literal> 向量。</paragraph>
            <paragraph>例如，<literal>Vector2.RIGHT.angle()</literal> 将返回 0，<literal>Vector2.DOWN.angle()</literal> 将返回 <literal>PI / 2</literal>（四分之一圈，即 90 度），<literal>Vector2(1, -1).angle()</literal> 将返回 <literal>-PI / 4</literal>（负八分之一圈，即 -45 度）。</paragraph>
            <paragraph><reference name="返回夹角图示。" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/vector2_angle.png">返回夹角图示。</reference></paragraph>
            <paragraph>相当于使用该向量的 <reference internal="True" refid="class-vector2-property-y"><inline classes="std std-ref">y</inline></reference> 和 <reference internal="True" refid="class-vector2-property-x"><inline classes="std std-ref">x</inline></reference> 作为参数对 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-atan2"><inline classes="std std-ref">@GlobalScope.atan2</inline></reference> 进行调用的结果：<literal>atan2(y, x)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-angle-to"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-angle-to" names="class_vector2_method_angle_to"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angle_to</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-angle-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定向量的夹角，单位为弧度。</paragraph>
            <paragraph><reference name="返回夹角示意图。" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/vector2_angle_to.png">返回夹角示意图。</reference></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-angle-to-point"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-angle-to-point" names="class_vector2_method_angle_to_point"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>angle_to_point</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-angle-to-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回连接两点的直线与 X 轴之间的夹角，单位为弧度。</paragraph>
            <paragraph><literal>a.angle_to_point(b)</literal> 等价于 <literal>(b - a).angle()</literal>。</paragraph>
            <paragraph><reference name="返回夹角示意图。" refuri="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/vector2_angle_to_point.png">返回夹角示意图。</reference></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-aspect"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-aspect" names="class_vector2_method_aspect"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>aspect</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-aspect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量的长宽比，即 <reference internal="True" refid="class-vector2-property-x"><inline classes="std std-ref">x</inline></reference> 与 <reference internal="True" refid="class-vector2-property-y"><inline classes="std std-ref">y</inline></reference> 的比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-bezier-derivative"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-bezier-derivative" names="class_vector2_method_bezier_derivative"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>bezier_derivative</strong>(control_1: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, control_2: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, end: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-bezier-derivative"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回<reference name="贝赛尔曲线" refuri="https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A">贝赛尔曲线</reference>上 <literal>t</literal> 处的导数，该曲线由此向量和控制点 <literal>control_1</literal>、<literal>control_2</literal>、终点 <literal>end</literal> 定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-bezier-interpolate"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-bezier-interpolate" names="class_vector2_method_bezier_interpolate"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>bezier_interpolate</strong>(control_1: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, control_2: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, end: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-bezier-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回<reference name="贝赛尔曲线" refuri="https://zh.wikipedia.org/zh-cn/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A">贝赛尔曲线</reference>上 <literal>t</literal> 处的点，该曲线由此向量和控制点 <literal>control_1</literal>、<literal>control_2</literal>、终点 <literal>end</literal> 定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-bounce"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-bounce" names="class_vector2_method_bounce"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>bounce</strong>(n: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-bounce"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the vector "bounced off" from a line defined by the given normal <literal>n</literal> perpendicular to the line.</paragraph>
            <paragraph><strong>Note:</strong> <reference internal="True" refid="class-vector2-method-bounce"><inline classes="std std-ref">bounce</inline></reference> performs the operation that most engines and frameworks call <literal>reflect()</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-ceil"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-ceil" names="class_vector2_method_ceil"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>ceil</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-ceil"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新向量，所有的分量都是向上舍入（正无穷大方向）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-clamp"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-clamp" names="class_vector2_method_clamp"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>clamp</strong>(min: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, max: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-clamp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新向量，每个分量都使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-clamp"><inline classes="std std-ref">@GlobalScope.clamp</inline></reference> 限制在 <literal>min</literal> 和 <literal>max</literal> 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-clampf"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-clampf" names="class_vector2_method_clampf"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>clampf</strong>(min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-clampf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns a new vector with all components clamped between <literal>min</literal> and <literal>max</literal>, by running <reference internal="True" refuri="class_@globalscope#class-globalscope-method-clamp"><inline classes="std std-ref">@GlobalScope.clamp</inline></reference> on each component.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-cross"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-cross" names="class_vector2_method_cross"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cross</strong>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-cross"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the 2D analog of the cross product for this vector and <literal>with</literal>.</paragraph>
            <paragraph>This is the signed area of the parallelogram formed by the two vectors. If the second vector is clockwise from the first vector, then the cross product is the positive area. If counter-clockwise, the cross product is the negative area. If the two vectors are parallel this returns zero, making it useful for testing if two vectors are parallel.</paragraph>
            <paragraph><strong>Note:</strong> Cross product is not defined in 2D mathematically. This method embeds the 2D vectors in the XY plane of 3D space and uses their cross product's Z component as the analog.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-cubic-interpolate"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-cubic-interpolate" names="class_vector2_method_cubic_interpolate"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>cubic_interpolate</strong>(b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, pre_a: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, post_b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-cubic-interpolate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量和 <literal>b</literal> 之间进行三次插值 <literal>weight</literal> 处的结果，使用 <literal>pre_a</literal> 和 <literal>post_b</literal> 作为控制柄。<literal>weight</literal> 在 0.0 到 1.0 的范围内，代表插值的量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-cubic-interpolate-in-time"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-cubic-interpolate-in-time" names="class_vector2_method_cubic_interpolate_in_time"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>cubic_interpolate_in_time</strong>(b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, pre_a: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, post_b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, pre_a_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, post_b_t: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-cubic-interpolate-in-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量和 <literal>b</literal> 之间进行三次插值 <literal>weight</literal> 处的结果，使用 <literal>pre_a</literal> 和 <literal>post_b</literal> 作为控制柄。<literal>weight</literal> 在 0.0 到 1.0 的范围内，代表插值的量。</paragraph>
            <paragraph>通过使用时间值，可以比 <reference internal="True" refid="class-vector2-method-cubic-interpolate"><inline classes="std std-ref">cubic_interpolate</inline></reference> 进行更平滑的插值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-direction-to"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-direction-to" names="class_vector2_method_direction_to"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>direction_to</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-direction-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从该向量指向 <literal>to</literal> 的归一化向量。相当于使用 <literal>(b - a).normalized()</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-distance-squared-to"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-distance-squared-to" names="class_vector2_method_distance_squared_to"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_squared_to</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-distance-squared-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量与 <literal>to</literal> 之间的距离的平方。</paragraph>
            <paragraph>该方法比 <reference internal="True" refid="class-vector2-method-distance-to"><inline classes="std std-ref">distance_to</inline></reference> 运行得更快，因此请在需要比较向量或者用于某些公式的平方距离时，优先使用这个方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-distance-to"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-distance-to" names="class_vector2_method_distance_to"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_to</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-distance-to"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量与 <literal>to</literal> 之间的距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-dot"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-dot" names="class_vector2_method_dot"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>dot</strong>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-dot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the dot product of this vector and <literal>with</literal>. This can be used to compare the angle between two vectors. For example, this can be used to determine whether an enemy is facing the player.</paragraph>
            <paragraph>The dot product will be <literal>0</literal> for a right angle (90 degrees), greater than 0 for angles narrower than 90 degrees and lower than 0 for angles wider than 90 degrees.</paragraph>
            <paragraph>When using unit (normalized) vectors, the result will always be between <literal>-1.0</literal> (180 degree angle) when the vectors are facing opposite directions, and <literal>1.0</literal> (0 degree angle) when the vectors are aligned.</paragraph>
            <paragraph><strong>Note:</strong> <literal>a.dot(b)</literal> is equivalent to <literal>b.dot(a)</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-floor"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-floor" names="class_vector2_method_floor"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>floor</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-floor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新的向量，所有的向量都被四舍五入，向负无穷大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-from-angle"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-from-angle" names="class_vector2_method_from_angle"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>from_angle</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-vector2-method-from-angle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建单位 <strong>Vector2</strong> 并将其旋转到给定的 <literal>angle</literal>，单位为弧度。相当于执行 <literal>Vector2(cos(angle), sin(angle))</literal> 或 <literal>Vector2.RIGHT.rotated(angle)</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector2.from_angle(0)) # 输出 (1, 0)。
print(Vector2(1, 0).angle()) # 输出 0，即上一行所使用的角度。
print(Vector2.from_angle(PI / 2)) # 输出 (0, 1)。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-is-equal-approx" names="class_vector2_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-is-equal-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个向量与 <literal>to</literal> 大致相等，则返回 <literal>true</literal>，判断方法是对每个分量执行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-is-finite" names="class_vector2_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-is-finite"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该向量无穷，则返回 <literal>true</literal>，判断方法是对每个分量调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-finite"><inline classes="std std-ref">@GlobalScope.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-is-normalized"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-is-normalized" names="class_vector2_method_is_normalized"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_normalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-is-normalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该向量是归一化的，即长度约等于 1，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-is-zero-approx"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-is-zero-approx" names="class_vector2_method_is_zero_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_zero_approx</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-is-zero-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该向量的值大约为零，则返回 <literal>true</literal>，判断方法是对每个分量运行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-zero-approx"><inline classes="std std-ref">@GlobalScope.is_zero_approx</inline></reference>。</paragraph>
            <paragraph>该方法比使用 <reference internal="True" refid="class-vector2-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference> 和零向量比较要快。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-length"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-length" names="class_vector2_method_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个向量的长度，即大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-length-squared"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-length-squared" names="class_vector2_method_length_squared"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>length_squared</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-length-squared"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个向量的平方长度，即平方大小。</paragraph>
            <paragraph>这个方法比 <reference internal="True" refid="class-vector2-method-length"><inline classes="std std-ref">length</inline></reference> 运行得更快，所以如果你需要比较向量或需要一些公式的平方距离时，更喜欢用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-lerp"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-lerp" names="class_vector2_method_lerp"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>lerp</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-lerp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此向量和 <literal>to</literal> 之间，按数量 <literal>weight</literal> 线性插值结果。<literal>weight</literal> 在 <literal>0.0</literal> 到 <literal>1.0</literal> 的范围内，代表插值的量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-limit-length"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-limit-length" names="class_vector2_method_limit_length"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>limit_length</strong>(length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-limit-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回应用了最大长度限制的向量，长度被限制到 <literal>length</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-max"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-max" names="class_vector2_method_max"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>max</strong>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最大值，等价于 <literal>Vector2(maxf(x, with.x), maxf(y, with.y))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-max-axis-index"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-max-axis-index" names="class_vector2_method_max_axis_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_axis_index</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-max-axis-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量中最大值的轴。见 <literal>AXIS_*</literal> 常量。如果所有分量相等，则该方法返回 <reference internal="True" refid="class-vector2-constant-axis-x"><inline classes="std std-ref">AXIS_X</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-maxf"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-maxf" names="class_vector2_method_maxf"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>maxf</strong>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-maxf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最大值，等价于 <literal>Vector2(maxf(x, with), maxf(y, with))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-min"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-min" names="class_vector2_method_min"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>min</strong>(with: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最小值，等价于 <literal>Vector2(minf(x, with.x), minf(y, with.y))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-min-axis-index"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-min-axis-index" names="class_vector2_method_min_axis_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>min_axis_index</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-min-axis-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该向量中最小值的轴。见 <literal>AXIS_*</literal> 常量。如果所有分量相等，则该方法返回 <reference internal="True" refid="class-vector2-constant-axis-y"><inline classes="std std-ref">AXIS_Y</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-minf"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-minf" names="class_vector2_method_minf"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>minf</strong>(with: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-minf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自身与 <literal>with</literal> 各分量的最小值，等价于 <literal>Vector2(minf(x, with), minf(y, with))</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-move-toward"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-move-toward" names="class_vector2_method_move_toward"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>move_toward</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-move-toward"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个新向量，该向量朝 <literal>to</literal> 移动了固定的量 <literal>delta</literal>。不会超过最终值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-normalized"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-normalized" names="class_vector2_method_normalized"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>normalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-normalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the result of scaling the vector to unit length. Equivalent to <literal>v / v.length()</literal>. Returns <literal>(0, 0)</literal> if <literal>v.length() == 0</literal>. See also <reference internal="True" refid="class-vector2-method-is-normalized"><inline classes="std std-ref">is_normalized</inline></reference>.</paragraph>
            <paragraph><strong>Note:</strong> This function may return incorrect values if the input vector length is near zero.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-orthogonal"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-orthogonal" names="class_vector2_method_orthogonal"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>orthogonal</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-orthogonal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个与原来相比逆时针旋转 90 度的垂直向量，长度不变。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-posmod"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-posmod" names="class_vector2_method_posmod"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>posmod</strong>(mod: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-posmod"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由该向量的分量与 <literal>mod</literal> 执行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-fposmod"><inline classes="std std-ref">@GlobalScope.fposmod</inline></reference> 运算后组成的向量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-posmodv"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-posmodv" names="class_vector2_method_posmodv"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>posmodv</strong>(modv: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-posmodv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回由该向量的分量与 <literal>modv</literal> 的分量执行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-fposmod"><inline classes="std std-ref">@GlobalScope.fposmod</inline></reference> 运算后组成的向量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-project"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-project" names="class_vector2_method_project"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>project</strong>(b: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-project"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将该向量投影到给定的 <literal>b</literal> 向量上所得到的新向量。得到的新向量与 <literal>b</literal> 平行。另见 <reference internal="True" refid="class-vector2-method-slide"><inline classes="std std-ref">slide</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果 <literal>b</literal> 向量为零向量，得到的新向量的分量均为 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-reflect"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-reflect" names="class_vector2_method_reflect"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>reflect</strong>(line: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-reflect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the result of reflecting the vector from a line defined by the given direction vector <literal>line</literal>.</paragraph>
            <paragraph><strong>Note:</strong> <reference internal="True" refid="class-vector2-method-reflect"><inline classes="std std-ref">reflect</inline></reference> differs from what other engines and frameworks call <literal>reflect()</literal>. In other engines, <literal>reflect()</literal> takes a normal direction which is a direction perpendicular to the line. In Godot, you specify the direction of the line directly. See also <reference internal="True" refid="class-vector2-method-bounce"><inline classes="std std-ref">bounce</inline></reference> which does what most engines call <literal>reflect()</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-rotated"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-rotated" names="class_vector2_method_rotated"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>rotated</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-rotated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将这个向量旋转 <literal>angle</literal> 的结果（单位为弧度）。另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-deg-to-rad"><inline classes="std std-ref">@GlobalScope.deg_to_rad</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-round"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-round" names="class_vector2_method_round"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>round</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-round"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有分量都被四舍五入为最接近的整数的向量，中间情况向远离零的方向舍入。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-sign"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-sign" names="class_vector2_method_sign"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>sign</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-sign"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的向量，分量如果为正则设为 <literal>1.0</literal>，如果为负则设为 <literal>-1.0</literal>，如果为零则设为 <literal>0.0</literal>。结果与对每个分量调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-sign"><inline classes="std std-ref">@GlobalScope.sign</inline></reference> 一致。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-slerp"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-slerp" names="class_vector2_method_slerp"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>slerp</strong>(to: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-slerp"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在这个向量和 <literal>to</literal> 之间进行 <literal>weight</literal> 的球面线性插值的结果。<literal>weight</literal> 在 0.0 和 1.0 的范围内，代表插值的量。</paragraph>
            <paragraph>如果输入向量的长度不同，这个函数也会对长度进行插值处理。对于输入向量中存在长度为零的向量的特殊情况，这个方法的行为与 <reference internal="True" refid="class-vector2-method-lerp"><inline classes="std std-ref">lerp</inline></reference> 一致。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-slide"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-slide" names="class_vector2_method_slide"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>slide</strong>(n: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-slide"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将该向量沿着法线为 <literal>n</literal> 的直线滑动所得到的新向量。得到的新向量与 <literal>n</literal> 垂直，等价于将该向量减去在 <literal>n</literal> 上的投影。另见 <reference internal="True" refid="class-vector2-method-project"><inline classes="std std-ref">project</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>向量 <literal>n</literal> 必须为归一化的向量。另见 <reference internal="True" refid="class-vector2-method-normalized"><inline classes="std std-ref">normalized</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-snapped"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-snapped" names="class_vector2_method_snapped"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>snapped</strong>(step: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-snapped"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的向量，每个分量都吸附到了与 <literal>step</literal> 中对应分量最接近的倍数。也可以用于将分量四舍五入至小数点后的任意位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-method-snappedf"></target>
            <paragraph classes="classref-method" ids="class-vector2-method-snappedf" names="class_vector2_method_snappedf"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>snappedf</strong>(step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-vector2-method-snappedf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns a new vector with each component snapped to the nearest multiple of <literal>step</literal>. This can also be used to round the components to an arbitrary number of decimals.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id11" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-vector2-operator-neq-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-neq-vector2" names="class_vector2_operator_neq_vector2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-neq-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果向量不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-vector2-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-mul-transform2d"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-mul-transform2d" names="class_vector2_operator_mul_transform2d"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-vector2-operator-mul-transform2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>假设该变换的基是正交的（即旋转/反射可以，缩放/倾斜不行），将 <strong>Vector2</strong> 逆向变换（乘以）给定的 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> 变换矩阵。</paragraph>
            <paragraph><literal>vector * transform</literal> 相当于 <literal>transform.inverse() * vector</literal>。请参阅 <reference internal="True" refuri="class_transform2d#class-transform2d-method-inverse"><inline classes="std std-ref">Transform2D.inverse</inline></reference>。</paragraph>
            <paragraph>对于通过仿射变换的逆进行的变换（例如缩放），可以使用 <literal>transform.affine_inverse() * vector</literal> 代替。请参阅 <reference internal="True" refuri="class_transform2d#class-transform2d-method-affine-inverse"><inline classes="std std-ref">Transform2D.affine_inverse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-mul-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-mul-vector2" names="class_vector2_operator_mul_vector2"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-mul-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量乘以给定 <strong>Vector2</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector2(10, 20) * Vector2(3, 4)) # 输出 "(30, 80)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-mul-float" names="class_vector2_operator_mul_float"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-vector2-operator-mul-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量乘以给定的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-mul-int" names="class_vector2_operator_mul_int"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-vector2-operator-mul-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量乘以给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-sum-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-sum-vector2" names="class_vector2_operator_sum_vector2"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator +</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-sum-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量加上给定 <strong>Vector2</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector2(10, 20) + Vector2(3, 4)) # 输出 "(13, 24)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-dif-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-dif-vector2" names="class_vector2_operator_dif_vector2"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator -</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-dif-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量减去给定 <strong>Vector2</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector2(10, 20) - Vector2(3, 4)) # 输出 "(7, 16)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-div-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-div-vector2" names="class_vector2_operator_div_vector2"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-div-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量除以给定 <strong>Vector2</strong> 的对应分量。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(Vector2(10, 20) / Vector2(2, 5)) # 输出 "(5, 4)"</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-div-float" names="class_vector2_operator_div_float"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-vector2-operator-div-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量除以给定的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-div-int" names="class_vector2_operator_div_int"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-vector2-operator-div-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>Vector2</strong> 的每个分量除以给定的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-lt-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-lt-vector2" names="class_vector2_operator_lt_vector2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-lt-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector2</strong> 向量，首先检查左向量的 X 值是否小于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-lte-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-lte-vector2" names="class_vector2_operator_lte_vector2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;=</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-lte-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector2</strong> 向量，首先检查左向量的 X 值是否小于等于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-eq-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-eq-vector2" names="class_vector2_operator_eq_vector2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-eq-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果向量完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-vector2-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-gt-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-gt-vector2" names="class_vector2_operator_gt_vector2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-gt-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector2</strong> 向量，首先检查左向量的 X 值是否大于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-gte-vector2"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-gte-vector2" names="class_vector2_operator_gte_vector2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;=</strong>(right: <reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-vector2-operator-gte-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>比较两个 <strong>Vector2</strong> 向量，首先检查左向量的 X 值是否大于等于 <literal>right</literal> 向量的 X 值。如果 X 值完全相等，则用相同的方法检查两个向量的 Y 值。该运算符可用于向量排序。</paragraph>
            <paragraph><strong>注意：</strong>包含 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference> 元素的向量的行为与其他向量不同。因此，如果包含 NaN，则这个方法的结果可能不准确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-idx-int" names="class_vector2_operator_idx_int"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator []</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-vector2-operator-idx-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用向量分量的 <literal>index</literal> 来访问向量分量。<literal>v[0]</literal> 等价于 <literal>v.x</literal>、<literal>v[1]</literal> 等价于 <literal>v.y</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-unplus"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-unplus" names="class_vector2_operator_unplus"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator unary+</strong>() <reference internal="True" refid="class-vector2-operator-unplus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>+</literal> 不存在时相同的值。单目 <literal>+</literal> 没有作用，但有时可以使你的代码更具可读性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-vector2-operator-unminus"></target>
            <paragraph classes="classref-operator" ids="class-vector2-operator-unminus" names="class_vector2_operator_unminus"><reference internal="True" refid="class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator unary-</strong>() <reference internal="True" refid="class-vector2-operator-unminus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Vector2</strong> 的负值。和写 <literal>Vector2(-v.x, -v.y)</literal> 是一样的。该操作在保持相同幅度的同时，翻转向量的方向。对于浮点数，零也有正负两种。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
