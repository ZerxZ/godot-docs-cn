<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_voxelgidata.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VoxelGIData.xml.</comment>
    <target refid="class-voxelgidata"></target>
    <section ids="voxelgidata class-voxelgidata" names="voxelgidata class_voxelgidata">
        <title>VoxelGIData</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>包含用于 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 节点的烘焙体素全局光照数据。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>VoxelGIData</strong> 包含烘焙的体素全局照明，用于 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 节点。<strong>VoxelGIData</strong> 还提供了若干用来调整全局照明最终外观的属性。这些属性可以在运行时调整，无须再次烘焙 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 节点。</paragraph>
            <paragraph><strong>注意：</strong>为了防止基于文本的场景文件（<literal>.tscn</literal>）过度增长，导致加载和保存速度变慢，请始终将 <strong>VoxelGIData</strong> 保存为外部二进制资源文件（<literal>.res</literal>），不要将其嵌入到场景中。做法是点击 <strong>VoxelGIData</strong> 资源旁边的下拉箭头，选择<strong>编辑</strong>，点击检查器顶部的软盘图标，然后选择<strong>另存为...</strong>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-property-bias"><inline classes="std std-ref">bias</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-property-dynamic-range"><inline classes="std std-ref">dynamic_range</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-property-energy"><inline classes="std std-ref">energy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-property-interior"><inline classes="std std-ref">interior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-property-normal-bias"><inline classes="std std-ref">normal_bias</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-property-propagation"><inline classes="std std-ref">propagation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-property-use-two-bounces"><inline classes="std std-ref">use_two_bounces</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="440"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-method-allocate"><inline classes="std std-ref">allocate</inline></reference>(to_cell_xform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>, octree_size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, octree_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, data_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, distance_field: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, level_counts: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-method-get-bounds"><inline classes="std std-ref">get_bounds</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-method-get-data-cells"><inline classes="std std-ref">get_data_cells</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-method-get-level-counts"><inline classes="std std-ref">get_level_counts</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-method-get-octree-cells"><inline classes="std std-ref">get_octree_cells</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-method-get-octree-size"><inline classes="std std-ref">get_octree_size</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgidata-method-get-to-cell-xform"><inline classes="std std-ref">get_to_cell_xform</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-voxelgidata-property-bias"></target>
            <paragraph classes="classref-property" ids="class-voxelgidata-property-bias" names="class_voxelgidata_property_bias"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>bias</strong> = <literal>1.5</literal> <reference internal="True" refid="class-voxelgidata-property-bias"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bias</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_bias</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>间接光照和反射所使用的法线偏移。较高的值可以减少非粗糙材质中可见的自反射，但会增加光线泄漏并让间接光照看上去更扁平。如果要优先隐藏自反射而不是追求光照质量，请将 <reference internal="True" refid="class-voxelgidata-property-bias"><inline classes="std std-ref">bias</inline></reference> 设为 <literal>0.0</literal>，并将 <reference internal="True" refid="class-voxelgidata-property-normal-bias"><inline classes="std std-ref">normal_bias</inline></reference> 设为 <literal>1.0</literal> 和 <literal>2.0</literal> 之间的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-property-dynamic-range"></target>
            <paragraph classes="classref-property" ids="class-voxelgidata-property-dynamic-range" names="class_voxelgidata_property_dynamic_range"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>dynamic_range</strong> = <literal>2.0</literal> <reference internal="True" refid="class-voxelgidata-property-dynamic-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_dynamic_range</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_dynamic_range</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要使用的动态范围（<literal>1.0</literal> 代表低动态范围场景亮度）。较高的值可用于提供更明亮的间接光照，但会在较暗的区域产生更多可见的色带效果（包括间接光照和反射）。为了避免色带效果，建议将其设置得尽可能低，避免出现明显的亮度截断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-property-energy"></target>
            <paragraph classes="classref-property" ids="class-voxelgidata-property-energy" names="class_voxelgidata_property_energy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>energy</strong> = <literal>1.0</literal> <reference internal="True" refid="class-voxelgidata-property-energy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_energy</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_energy</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 节点产生的间接照明和反射的能量。值越高，间接照明越亮。如果间接照明看起来过于平坦，请尝试减少 <reference internal="True" refid="class-voxelgidata-property-propagation"><inline classes="std std-ref">propagation</inline></reference>，同时增加 <reference internal="True" refid="class-voxelgidata-property-energy"><inline classes="std std-ref">energy</inline></reference>。另请参阅影响间接照明有效亮度的 <reference internal="True" refid="class-voxelgidata-property-use-two-bounces"><inline classes="std std-ref">use_two_bounces</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-property-interior"></target>
            <paragraph classes="classref-property" ids="class-voxelgidata-property-interior" names="class_voxelgidata_property_interior"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>interior</strong> = <literal>false</literal> <reference internal="True" refid="class-voxelgidata-property-interior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_interior</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_interior</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 节点会忽略 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 光照。如果为 <literal>false</literal>，则 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 节点会考虑 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 光照。<reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 光照会实时更新，这意味着无需再次烘焙 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 节点即可对其进行更改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-property-normal-bias"></target>
            <paragraph classes="classref-property" ids="class-voxelgidata-property-normal-bias" names="class_voxelgidata_property_normal_bias"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>normal_bias</strong> = <literal>0.0</literal> <reference internal="True" refid="class-voxelgidata-property-normal-bias"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_normal_bias</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_normal_bias</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于间接照明和反射的法线偏置。较高的值能够减少在非粗糙材质中可见的自反射，但会导致更多可见的漏光问题，间接照明看起来也会更平坦。另见 <reference internal="True" refid="class-voxelgidata-property-bias"><inline classes="std std-ref">bias</inline></reference>。要优先隐藏自反射，而不是提高照明质量，请将 <reference internal="True" refid="class-voxelgidata-property-bias"><inline classes="std std-ref">bias</inline></reference> 设置为 <literal>0.0</literal>，并将 <reference internal="True" refid="class-voxelgidata-property-normal-bias"><inline classes="std std-ref">normal_bias</inline></reference> 设置为介于 <literal>1.0</literal> 和 <literal>2.0</literal> 之间的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-property-propagation"></target>
            <paragraph classes="classref-property" ids="class-voxelgidata-property-propagation" names="class_voxelgidata_property_propagation"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>propagation</strong> = <literal>0.5</literal> <reference internal="True" refid="class-voxelgidata-property-propagation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_propagation</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_propagation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当光线从表面反弹时使用的乘数。较高的值会导致更亮的间接照明。如果间接照明看起来过于平坦，请尝试减少 <reference internal="True" refid="class-voxelgidata-property-propagation"><inline classes="std std-ref">propagation</inline></reference> 同时增加 <reference internal="True" refid="class-voxelgidata-property-energy"><inline classes="std std-ref">energy</inline></reference>。另请参阅影响间接照明的有效亮度的 <reference internal="True" refid="class-voxelgidata-property-use-two-bounces"><inline classes="std std-ref">use_two_bounces</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-property-use-two-bounces"></target>
            <paragraph classes="classref-property" ids="class-voxelgidata-property-use-two-bounces" names="class_voxelgidata_property_use_two_bounces"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_two_bounces</strong> = <literal>true</literal> <reference internal="True" refid="class-voxelgidata-property-use-two-bounces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_two_bounces</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_two_bounces</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则执行两次间接照明反弹而不是一次。这使得以一个较低的性能成本，使间接照明看起来更自然、更明亮。第二次反弹在反射中也是可见的。如果启用 <reference internal="True" refid="class-voxelgidata-property-use-two-bounces"><inline classes="std std-ref">use_two_bounces</inline></reference> 后场景显得太亮，请调整 <reference internal="True" refid="class-voxelgidata-property-propagation"><inline classes="std std-ref">propagation</inline></reference> 和 <reference internal="True" refid="class-voxelgidata-property-energy"><inline classes="std std-ref">energy</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-voxelgidata-method-allocate"></target>
            <paragraph classes="classref-method" ids="class-voxelgidata-method-allocate" names="class_voxelgidata_method_allocate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>allocate</strong>(to_cell_xform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, aabb: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>, octree_size: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, octree_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, data_cells: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, distance_field: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, level_counts: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-voxelgidata-method-allocate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-method-get-bounds"></target>
            <paragraph classes="classref-method" ids="class-voxelgidata-method-get-bounds" names="class_voxelgidata_method_get_bounds"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>get_bounds</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-voxelgidata-method-get-bounds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>，表示已烘焙体素数据的边界，烘焙后应该与 <reference internal="True" refuri="class_voxelgi#class-voxelgi-property-size"><inline classes="std std-ref">VoxelGI.size</inline></reference> 相匹配（仅包含表示大小的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>如果修改了大小但没有对 VoxelGI 数据进行烘焙，则 <reference internal="True" refid="class-voxelgidata-method-get-bounds"><inline classes="std std-ref">get_bounds</inline></reference> 和 <reference internal="True" refuri="class_voxelgi#class-voxelgi-property-size"><inline classes="std std-ref">VoxelGI.size</inline></reference> 的值将不匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-method-get-data-cells"></target>
            <paragraph classes="classref-method" ids="class-voxelgidata-method-get-data-cells" names="class_voxelgidata_method_get_data_cells"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_data_cells</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-voxelgidata-method-get-data-cells"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-method-get-level-counts"></target>
            <paragraph classes="classref-method" ids="class-voxelgidata-method-get-level-counts" names="class_voxelgidata_method_get_level_counts"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_level_counts</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-voxelgidata-method-get-level-counts"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-method-get-octree-cells"></target>
            <paragraph classes="classref-method" ids="class-voxelgidata-method-get-octree-cells" names="class_voxelgidata_method_get_octree_cells"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_octree_cells</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-voxelgidata-method-get-octree-cells"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-method-get-octree-size"></target>
            <paragraph classes="classref-method" ids="class-voxelgidata-method-get-octree-size" names="class_voxelgidata_method_get_octree_size"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_octree_size</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-voxelgidata-method-get-octree-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgidata-method-get-to-cell-xform"></target>
            <paragraph classes="classref-method" ids="class-voxelgidata-method-get-to-cell-xform" names="class_voxelgidata_method_get_to_cell_xform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_to_cell_xform</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-voxelgidata-method-get-to-cell-xform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
