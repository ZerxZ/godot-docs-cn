<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_convexpolygonshape2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ConvexPolygonShape2D.xml.</comment>
    <target refid="class-convexpolygonshape2d"></target>
    <section ids="convexpolygonshape2d class-convexpolygonshape2d" names="convexpolygonshape2d class_convexpolygonshape2d">
        <title>ConvexPolygonShape2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于物理碰撞的 2D 凸多边形形状。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>2D 凸多边形形状，旨在用于物理。<reference internal="True" refuri="class_collisionpolygon2d#class-collisionpolygon2d"><inline classes="std std-ref">CollisionPolygon2D</inline></reference> 为 <reference internal="True" refuri="class_collisionpolygon2d#class-collisionpolygon2d-constant-build-solids"><inline classes="std std-ref">CollisionPolygon2D.BUILD_SOLIDS</inline></reference> 模式时内部会使用这个类。</paragraph>
            <paragraph><strong>ConvexPolygonShape2D</strong> 是<emphasis>实心</emphasis>的，与空心的 <reference internal="True" refuri="class_concavepolygonshape2d#class-concavepolygonshape2d"><inline classes="std std-ref">ConcavePolygonShape2D</inline></reference> 不同，如果对象完全位于其内部，也能够检测到碰撞。因此更适于检测和物理。</paragraph>
            <paragraph><strong>凸分解：</strong>凹多边形可以拆分为多个凸多边形。这样就能够让动态物理体拥有复杂的凹碰撞（以消耗性能为代价），做法是使用多个 <reference internal="True" refuri="class_convexpolygonshape3d#class-convexpolygonshape3d"><inline classes="std std-ref">ConvexPolygonShape3D</inline></reference> 节点，或者使用 <reference internal="True" refuri="class_collisionpolygon2d#class-collisionpolygon2d-constant-build-solids"><inline classes="std std-ref">CollisionPolygon2D.BUILD_SOLIDS</inline></reference> 模式的 <reference internal="True" refuri="class_collisionpolygon2d#class-collisionpolygon2d"><inline classes="std std-ref">CollisionPolygon2D</inline></reference> 节点。要根据精灵生成碰撞多边形，请选中 <reference internal="True" refuri="class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 节点，前往出现在视口上方的 <strong>Sprite2D</strong> 菜单，然后选择<strong>创建 Polygon2D 同级</strong>。</paragraph>
            <paragraph><strong>性能：</strong><strong>ConvexPolygonShape2D</strong> 检查碰撞的速度比 <reference internal="True" refuri="class_concavepolygonshape2d#class-concavepolygonshape2d"><inline classes="std std-ref">ConcavePolygonShape2D</inline></reference> 要快，但比 <reference internal="True" refuri="class_circleshape2d#class-circleshape2d"><inline classes="std std-ref">CircleShape2D</inline></reference>、<reference internal="True" refuri="class_rectangleshape2d#class-rectangleshape2d"><inline classes="std std-ref">RectangleShape2D</inline></reference> 等基本碰撞形状要慢。通常应该仅限于中等大小的对象，在无法使用基本形状精确表示碰撞时使用。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="26"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-convexpolygonshape2d-property-points"><inline classes="std std-ref">points</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedVector2Array()</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="148"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-convexpolygonshape2d-method-set-point-cloud"><inline classes="std std-ref">set_point_cloud</inline></reference>(point_cloud: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-convexpolygonshape2d-property-points"></target>
            <paragraph classes="classref-property" ids="class-convexpolygonshape2d-property-points" names="class_convexpolygonshape2d_property_points"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>points</strong> = <literal>PackedVector2Array()</literal> <reference internal="True" refid="class-convexpolygonshape2d-property-points"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_points</strong>(value: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_points</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该多边形构成凸包的顶点列表。顺时针顺序或逆时针顺序都有可能。</paragraph>
            <paragraph><strong>警告：</strong>请务必将这个属性设置为能够形成凸包的顶点列表。可以使用 <reference internal="True" refid="class-convexpolygonshape2d-method-set-point-cloud"><inline classes="std std-ref">set_point_cloud</inline></reference> 从任意顶点集生成凸包。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> for more details.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-convexpolygonshape2d-method-set-point-cloud"></target>
            <paragraph classes="classref-method" ids="class-convexpolygonshape2d-method-set-point-cloud" names="class_convexpolygonshape2d_method_set_point_cloud"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_cloud</strong>(point_cloud: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>) <reference internal="True" refid="class-convexpolygonshape2d-method-set-point-cloud"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据提供的点集，使用凸包算法分配 <reference internal="True" refid="class-convexpolygonshape2d-property-points"><inline classes="std std-ref">points</inline></reference> 属性，移除所有不必要的点。详见 <reference internal="True" refuri="class_geometry2d#class-geometry2d-method-convex-hull"><inline classes="std std-ref">Geometry2D.convex_hull</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
