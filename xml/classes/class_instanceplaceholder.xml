<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_instanceplaceholder.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/InstancePlaceholder.xml.</comment>
    <target refid="class-instanceplaceholder"></target>
    <section ids="instanceplaceholder class-instanceplaceholder" names="instanceplaceholder class_instanceplaceholder">
        <title>InstancePlaceholder</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 根 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 的占位符。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>在编辑器中为实例化的场景打开<strong>加载为占位符</strong>选项会导致在运行游戏时将其替换为 <strong>InstancePlaceholder</strong>。这样就可以将场景的实际加载推迟到调用 <reference internal="True" refid="class-instanceplaceholder-method-create-instance"><inline classes="std std-ref">create_instance</inline></reference> 时。这对于通过选择性加载部分场景来避免一次性加载大场景很有用。</paragraph>
            <paragraph><strong>InstancePlaceholder</strong> 不具备变换属性。因此任何子节点都会相对于 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 从 (0, 0) 点开始定位，而不是在编辑器中显示的父节点。用一个具有变换属性的场景来替换占位符，将使子节点再次相对于它们的父节点进行变换。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="184"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-instanceplaceholder-method-create-instance"><inline classes="std std-ref">create_instance</inline></reference>(replace: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, custom_scene: <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-instanceplaceholder-method-get-instance-path"><inline classes="std std-ref">get_instance_path</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-instanceplaceholder-method-get-stored-values"><inline classes="std std-ref">get_stored_values</inline></reference>(with_order: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-instanceplaceholder-method-create-instance"></target>
            <paragraph classes="classref-method" ids="class-instanceplaceholder-method-create-instance" names="class_instanceplaceholder_method_create_instance"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>create_instance</strong>(replace: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, custom_scene: <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> = null) <reference internal="True" refid="class-instanceplaceholder-method-create-instance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>调用这个方法会实际载入节点。创建的节点会被放置在场景树中该 <strong>InstancePlaceholder</strong> 的<emphasis>上方</emphasis>。出于方便的考虑，还会返回该 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 的引用。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-instanceplaceholder-method-create-instance"><inline classes="std std-ref">create_instance</inline></reference> 不是线程安全的。从线程中调用时请使用 <reference internal="True" refuri="class_object#class-object-method-call-deferred"><inline classes="std std-ref">Object.call_deferred</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-instanceplaceholder-method-get-instance-path"></target>
            <paragraph classes="classref-method" ids="class-instanceplaceholder-method-get-instance-path" names="class_instanceplaceholder_method_get_instance_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_instance_path</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-instanceplaceholder-method-get-instance-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取调用 <reference internal="True" refid="class-instanceplaceholder-method-create-instance"><inline classes="std std-ref">create_instance</inline></reference> 时默认加载的 <reference internal="True" refuri="class_packedscene#class-packedscene"><inline classes="std std-ref">PackedScene</inline></reference> 资源文件的路径。不是线程安全的。如果从线程调用，请使用 <reference internal="True" refuri="class_object#class-object-method-call-deferred"><inline classes="std std-ref">Object.call_deferred</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-instanceplaceholder-method-get-stored-values"></target>
            <paragraph classes="classref-method" ids="class-instanceplaceholder-method-get-stored-values" names="class_instanceplaceholder_method_get_stored_values"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_stored_values</strong>(with_order: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-instanceplaceholder-method-get-stored-values"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在调用 <reference internal="True" refid="class-instanceplaceholder-method-create-instance"><inline classes="std std-ref">create_instance</inline></reference> 时会应用到节点上的属性列表。</paragraph>
            <paragraph>如果 <literal>with_order</literal> 为 <literal>true</literal>，会在字典中加入 <literal>.order</literal> 字段（注意有个前缀的点）。这个 <literal>.order</literal> 字段是属性名称 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，指定属性的应用顺序（索引为 0 的是第一个）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
