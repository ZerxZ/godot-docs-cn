<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_audioeffectpitchshift.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AudioEffectPitchShift.xml.</comment>
    <target refid="class-audioeffectpitchshift"></target>
    <section ids="audioeffectpitchshift class-audioeffectpitchshift" names="audioeffectpitchshift class_audioeffectpitchshift">
        <title>AudioEffectPitchShift</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>为音频总线添加音高变换的音频效果。</paragraph>
        <paragraph>升高或降低原始声音的音高。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>允许独立于速度调制音高。所有频率都可以增加或减少，而对瞬态的影响最小。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/audio/audio_buses"><inline classes="doc">音频总线</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="52"></colspec>
                    <colspec colwidth="72"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioeffectpitchshift-property-fft-size"><inline classes="std std-ref">fft_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioeffectpitchshift-property-oversampling"><inline classes="std std-ref">oversampling</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioeffectpitchshift-property-pitch-scale"><inline classes="std std-ref">pitch_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-audioeffectpitchshift-fftsize"></target>
            <paragraph classes="classref-enumeration" ids="enum-audioeffectpitchshift-fftsize" names="enum_audioeffectpitchshift_fftsize">enum <strong>FFTSize</strong>: <reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audioeffectpitchshift-constant-fft-size-256"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioeffectpitchshift-constant-fft-size-256" names="class_audioeffectpitchshift_constant_fft_size_256"><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>FFT_SIZE_256</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 256 个样本的缓冲器进行快速傅里叶变换。最低延迟，但随着时间的推移最不稳定。</paragraph>
            <target refid="class-audioeffectpitchshift-constant-fft-size-512"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioeffectpitchshift-constant-fft-size-512" names="class_audioeffectpitchshift_constant_fft_size_512"><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>FFT_SIZE_512</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 512 个样本的缓冲器进行快速傅里叶变换。低延迟，但随着时间的推移不太稳定。</paragraph>
            <target refid="class-audioeffectpitchshift-constant-fft-size-1024"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioeffectpitchshift-constant-fft-size-1024" names="class_audioeffectpitchshift_constant_fft_size_1024"><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>FFT_SIZE_1024</strong> = <literal>2</literal></paragraph>
            <paragraph>使用 1024 个样本的缓冲器进行快速傅里叶变换。这是延迟和随着时间的推移的稳定性之间的折衷。</paragraph>
            <target refid="class-audioeffectpitchshift-constant-fft-size-2048"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioeffectpitchshift-constant-fft-size-2048" names="class_audioeffectpitchshift_constant_fft_size_2048"><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>FFT_SIZE_2048</strong> = <literal>3</literal></paragraph>
            <paragraph>使用 2048 个样本的缓冲器进行快速傅里叶变换。高延迟，但随着时间的推移稳定。</paragraph>
            <target refid="class-audioeffectpitchshift-constant-fft-size-4096"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioeffectpitchshift-constant-fft-size-4096" names="class_audioeffectpitchshift_constant_fft_size_4096"><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>FFT_SIZE_4096</strong> = <literal>4</literal></paragraph>
            <paragraph>使用 4096 个样本的缓冲器进行快速傅里叶变换。延迟最高，但随着时间的推移最稳定。</paragraph>
            <target refid="class-audioeffectpitchshift-constant-fft-size-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioeffectpitchshift-constant-fft-size-max" names="class_audioeffectpitchshift_constant_fft_size_max"><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>FFT_SIZE_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-audioeffectpitchshift-property-fft-size"></target>
            <paragraph classes="classref-property" ids="class-audioeffectpitchshift-property-fft-size" names="class_audioeffectpitchshift_property_fft_size"><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>fft_size</strong> = <literal>3</literal> <reference internal="True" refid="class-audioeffectpitchshift-property-fft-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fft_size</strong>(value: <reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-audioeffectpitchshift-fftsize"><inline classes="std std-ref">FFTSize</inline></reference> <strong>get_fft_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference name="快速傅里叶变换" refuri="https://en.wikipedia.org/wiki/Fast_Fourier_transform">快速傅里叶变换</reference>缓冲区的大小。较高的数值可以使效果随时间平滑，但有较大的延迟。这种较高的延迟对有突然幅度变化的声音的影响特别明显。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioeffectpitchshift-property-oversampling"></target>
            <paragraph classes="classref-property" ids="class-audioeffectpitchshift-property-oversampling" names="class_audioeffectpitchshift_property_oversampling"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>oversampling</strong> = <literal>4</literal> <reference internal="True" refid="class-audioeffectpitchshift-property-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_oversampling</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_oversampling</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要使用的过采样系数。更高的值会带来更好的质量，但对 CPU 的要求更高，如果 CPU 跟不上，可能会导致音频破裂。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioeffectpitchshift-property-pitch-scale"></target>
            <paragraph classes="classref-property" ids="class-audioeffectpitchshift-property-pitch-scale" names="class_audioeffectpitchshift_property_pitch_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pitch_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-audioeffectpitchshift-property-pitch-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pitch_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_pitch_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要使用的音高缩放。<literal>1.0</literal> 是默认的音高，声音会按原样播放。<reference internal="True" refid="class-audioeffectpitchshift-property-pitch-scale"><inline classes="std std-ref">pitch_scale</inline></reference> 的范围从 <literal>0.0</literal>（无限低的音高，听不见）到 <literal>16</literal>（比初始音高要高 16 倍）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
