<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_rdshaderspirv.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/RDShaderSPIRV.xml.</comment>
    <target refid="class-rdshaderspirv"></target>
    <section ids="rdshaderspirv class-rdshaderspirv" names="rdshaderspirv class_rdshaderspirv">
        <title>RDShaderSPIRV</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>SPIR-V 中间表示，是 <reference internal="True" refuri="class_rdshaderfile#class-rdshaderfile"><inline classes="std std-ref">RDShaderFile</inline></reference> 的一部分（由 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 使用）。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>RDShaderSPIRV</strong> 代表 <reference internal="True" refuri="class_rdshaderfile#class-rdshaderfile"><inline classes="std std-ref">RDShaderFile</inline></reference> 不同着色器阶段的 <reference name="SPIR-V" refuri="https://www.khronos.org/spir/">SPIR-V</reference> 代码，以及可能的编译错误消息。SPIR-V 是一种低阶着色器中间表示。这种中间表示无法直接用于 GPU 渲染，但可以被编译为 GPU 能够理解的二进制着色器。与编译后的着色器不同，SPIR-V 可以在不同 GPU 型号以及驱动版本之间移植。</paragraph>
            <paragraph>这个对象由 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 使用。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="112"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-bytecode-compute"><inline classes="std std-ref">bytecode_compute</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedByteArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-bytecode-fragment"><inline classes="std std-ref">bytecode_fragment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedByteArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-control"><inline classes="std std-ref">bytecode_tesselation_control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedByteArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-evaluation"><inline classes="std std-ref">bytecode_tesselation_evaluation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedByteArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-bytecode-vertex"><inline classes="std std-ref">bytecode_vertex</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedByteArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-compile-error-compute"><inline classes="std std-ref">compile_error_compute</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-compile-error-fragment"><inline classes="std std-ref">compile_error_fragment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-control"><inline classes="std std-ref">compile_error_tesselation_control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-evaluation"><inline classes="std std-ref">compile_error_tesselation_evaluation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-property-compile-error-vertex"><inline classes="std std-ref">compile_error_vertex</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="200"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-method-get-stage-bytecode"><inline classes="std std-ref">get_stage_bytecode</inline></reference>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-method-get-stage-compile-error"><inline classes="std std-ref">get_stage_compile_error</inline></reference>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-method-set-stage-bytecode"><inline classes="std std-ref">set_stage_bytecode</inline></reference>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, bytecode: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdshaderspirv-method-set-stage-compile-error"><inline classes="std std-ref">set_stage_compile_error</inline></reference>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, compile_error: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-rdshaderspirv-property-bytecode-compute"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-bytecode-compute" names="class_rdshaderspirv_property_bytecode_compute"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>bytecode_compute</strong> = <literal>PackedByteArray()</literal> <reference internal="True" refid="class-rdshaderspirv-property-bytecode-compute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, bytecode: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>计算着色器阶段的 SPIR-V 字节码。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-bytecode-fragment"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-bytecode-fragment" names="class_rdshaderspirv_property_bytecode_fragment"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>bytecode_fragment</strong> = <literal>PackedByteArray()</literal> <reference internal="True" refid="class-rdshaderspirv-property-bytecode-fragment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, bytecode: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>片段着色器阶段的 SPIR-V 字节码。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-bytecode-tesselation-control"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-bytecode-tesselation-control" names="class_rdshaderspirv_property_bytecode_tesselation_control"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>bytecode_tesselation_control</strong> = <literal>PackedByteArray()</literal> <reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, bytecode: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>曲面细分控制着色器阶段的 SPIR-V 字节码。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-bytecode-tesselation-evaluation"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-bytecode-tesselation-evaluation" names="class_rdshaderspirv_property_bytecode_tesselation_evaluation"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>bytecode_tesselation_evaluation</strong> = <literal>PackedByteArray()</literal> <reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-evaluation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, bytecode: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>曲面细分求值着色器阶段的 SPIR-V 字节码。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-bytecode-vertex"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-bytecode-vertex" names="class_rdshaderspirv_property_bytecode_vertex"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>bytecode_vertex</strong> = <literal>PackedByteArray()</literal> <reference internal="True" refid="class-rdshaderspirv-property-bytecode-vertex"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, bytecode: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>顶点着色器阶段的 SPIR-V 字节码。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-compile-error-compute"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-compile-error-compute" names="class_rdshaderspirv_property_compile_error_compute"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>compile_error_compute</strong> = <literal>""</literal> <reference internal="True" refid="class-rdshaderspirv-property-compile-error-compute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, compile_error: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>计算着色器阶段的编译错误信息（由 SPIR-V 编译器和 Godot 设置）。如果为空，则着色器成功编译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-compile-error-fragment"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-compile-error-fragment" names="class_rdshaderspirv_property_compile_error_fragment"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>compile_error_fragment</strong> = <literal>""</literal> <reference internal="True" refid="class-rdshaderspirv-property-compile-error-fragment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, compile_error: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>片段着色器阶段的编译错误信息（由 SPIR-V 编译器和 Godot 设置）。如果为空，则着色器成功编译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-compile-error-tesselation-control"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-compile-error-tesselation-control" names="class_rdshaderspirv_property_compile_error_tesselation_control"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>compile_error_tesselation_control</strong> = <literal>""</literal> <reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, compile_error: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>曲面细分控制着色器阶段的编译错误信息（由 SPIR-V 编译器和 Godot 设置）。如果为空，则着色器成功编译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-compile-error-tesselation-evaluation"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-compile-error-tesselation-evaluation" names="class_rdshaderspirv_property_compile_error_tesselation_evaluation"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>compile_error_tesselation_evaluation</strong> = <literal>""</literal> <reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-evaluation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, compile_error: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>曲面细分求值着色器阶段的编译错误信息（由 SPIR-V 编译器和 Godot 设置）。如果为空，则着色器成功编译。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-property-compile-error-vertex"></target>
            <paragraph classes="classref-property" ids="class-rdshaderspirv-property-compile-error-vertex" names="class_rdshaderspirv_property_compile_error_vertex"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>compile_error_vertex</strong> = <literal>""</literal> <reference internal="True" refid="class-rdshaderspirv-property-compile-error-vertex"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, compile_error: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>顶点着色器阶段的编译错误信息（由 SPIR-V 编译器和 Godot 设置）。如果为空，则着色器成功编译。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-rdshaderspirv-method-get-stage-bytecode"></target>
            <paragraph classes="classref-method" ids="class-rdshaderspirv-method-get-stage-bytecode" names="class_rdshaderspirv_method_get_stage_bytecode"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rdshaderspirv-method-get-stage-bytecode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>等价于获取 <reference internal="True" refid="class-rdshaderspirv-property-bytecode-compute"><inline classes="std std-ref">bytecode_compute</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-fragment"><inline classes="std std-ref">bytecode_fragment</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-control"><inline classes="std std-ref">bytecode_tesselation_control</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-evaluation"><inline classes="std std-ref">bytecode_tesselation_evaluation</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-vertex"><inline classes="std std-ref">bytecode_vertex</inline></reference> 的其中之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-method-get-stage-compile-error"></target>
            <paragraph classes="classref-method" ids="class-rdshaderspirv-method-get-stage-compile-error" names="class_rdshaderspirv_method_get_stage_compile_error"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-rdshaderspirv-method-get-stage-compile-error"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定着色器阶段 <literal>stage</literal> 的编译错误消息。等价于获取 <reference internal="True" refid="class-rdshaderspirv-property-compile-error-compute"><inline classes="std std-ref">compile_error_compute</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-fragment"><inline classes="std std-ref">compile_error_fragment</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-control"><inline classes="std std-ref">compile_error_tesselation_control</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-evaluation"><inline classes="std std-ref">compile_error_tesselation_evaluation</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-vertex"><inline classes="std std-ref">compile_error_vertex</inline></reference> 的其中之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-method-set-stage-bytecode"></target>
            <paragraph classes="classref-method" ids="class-rdshaderspirv-method-set-stage-bytecode" names="class_rdshaderspirv_method_set_stage_bytecode"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_bytecode</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, bytecode: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-rdshaderspirv-method-set-stage-bytecode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定着色器阶段 <literal>stage</literal> 的 SPIR-V 字节码 <literal>bytecode</literal>。等价于设置 <reference internal="True" refid="class-rdshaderspirv-property-bytecode-compute"><inline classes="std std-ref">bytecode_compute</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-fragment"><inline classes="std std-ref">bytecode_fragment</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-control"><inline classes="std std-ref">bytecode_tesselation_control</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-tesselation-evaluation"><inline classes="std std-ref">bytecode_tesselation_evaluation</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-bytecode-vertex"><inline classes="std std-ref">bytecode_vertex</inline></reference> 的其中之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdshaderspirv-method-set-stage-compile-error"></target>
            <paragraph classes="classref-method" ids="class-rdshaderspirv-method-set-stage-compile-error" names="class_rdshaderspirv_method_set_stage_compile_error"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_stage_compile_error</strong>(stage: <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference>, compile_error: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-rdshaderspirv-method-set-stage-compile-error"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定着色器阶段 <literal>stage</literal> 的编译错误消息。等价于设置 <reference internal="True" refid="class-rdshaderspirv-property-compile-error-compute"><inline classes="std std-ref">compile_error_compute</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-fragment"><inline classes="std std-ref">compile_error_fragment</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-control"><inline classes="std std-ref">compile_error_tesselation_control</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-tesselation-evaluation"><inline classes="std std-ref">compile_error_tesselation_evaluation</inline></reference>、<reference internal="True" refid="class-rdshaderspirv-property-compile-error-vertex"><inline classes="std std-ref">compile_error_vertex</inline></reference> 的其中之一。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
