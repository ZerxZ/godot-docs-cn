<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_resourceimporterlayeredtexture.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ResourceImporterLayeredTexture.xml.</comment>
    <target refid="class-resourceimporterlayeredtexture"></target>
    <section ids="resourceimporterlayeredtexture class-resourceimporterlayeredtexture" names="resourceimporterlayeredtexture class_resourceimporterlayeredtexture">
        <title>ResourceImporterLayeredTexture</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resourceimporter#class-resourceimporter"><inline classes="std std-ref">ResourceImporter</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>导入 3 维纹理（<reference internal="True" refuri="class_texture3d#class-texture3d"><inline classes="std std-ref">Texture3D</inline></reference>）、<reference internal="True" refuri="class_texture2darray#class-texture2darray"><inline classes="std std-ref">Texture2DArray</inline></reference>、<reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 或 <reference internal="True" refuri="class_cubemaparray#class-cubemaparray"><inline classes="std std-ref">CubemapArray</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这会导入一个三维纹理，然后可以在自定义着色器中将其用作 <reference internal="True" refuri="class_fogmaterial#class-fogmaterial"><inline classes="std std-ref">FogMaterial</inline></reference> 密度图或 <reference internal="True" refuri="class_gpuparticlesattractorvectorfield3d#class-gpuparticlesattractorvectorfield3d"><inline classes="std std-ref">GPUParticlesAttractorVectorField3D</inline></reference>。另请参见 <reference internal="True" refuri="class_resourceimportertexture#class-resourceimportertexture"><inline classes="std std-ref">ResourceImporterTexture</inline></reference> 和 <reference internal="True" refuri="class_resourceimportertextureatlas#class-resourceimportertextureatlas"><inline classes="std std-ref">ResourceImporterTextureAtlas</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/assets_pipeline/importing_images"><inline classes="doc">导入图像</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="105"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-compress-channel-pack"><inline classes="std std-ref">compress/channel_pack</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-compress-hdr-compression"><inline classes="std std-ref">compress/hdr_compression</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-compress-high-quality"><inline classes="std std-ref">compress/high_quality</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-compress-lossy-quality"><inline classes="std std-ref">compress/lossy_quality</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.7</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-compress-mode"><inline classes="std std-ref">compress/mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-mipmaps-generate"><inline classes="std std-ref">mipmaps/generate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-mipmaps-limit"><inline classes="std std-ref">mipmaps/limit</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceimporterlayeredtexture-property-slices-arrangement"><inline classes="std std-ref">slices/arrangement</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-resourceimporterlayeredtexture-property-compress-channel-pack"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-compress-channel-pack" names="class_resourceimporterlayeredtexture_property_compress/channel_pack"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>compress/channel_pack</strong> = <literal>0</literal></paragraph>
            <paragraph>控制在导入的纹理中应如何使用颜色通道。</paragraph>
            <paragraph><strong>sRGB 友好：</strong>阻止使用 RG 颜色格式，因为它不支持 sRGB 颜色。</paragraph>
            <paragraph><strong>优化：</strong>如果纹理不使用蓝色通道，则允许使用 RG 颜色格式。如果可以丢弃纹理的蓝色通道（所有像素的蓝色值必须为 <literal>0</literal>），则可以减少内存使用量。</paragraph>
            <paragraph><strong>法线贴图（RG 通道）：</strong>这会强制使用 RG 颜色格式导入纹理中的所有图层，以减少内存使用量，仅保留红色和绿色通道。这仅对具有 VRAM 压缩或 Basis Universal 压缩模式的纹理有影响。该模式仅适用于分层纹理（<reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference>、<reference internal="True" refuri="class_cubemaparray#class-cubemaparray"><inline classes="std std-ref">CubemapArray</inline></reference>、<reference internal="True" refuri="class_texture2darray#class-texture2darray"><inline classes="std std-ref">Texture2DArray</inline></reference> 和 <reference internal="True" refuri="class_texture3d#class-texture3d"><inline classes="std std-ref">Texture3D</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceimporterlayeredtexture-property-compress-hdr-compression"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-compress-hdr-compression" names="class_resourceimporterlayeredtexture_property_compress/hdr_compression"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>compress/hdr_compression</strong> = <literal>1</literal></paragraph>
            <paragraph>控制如何对 HDR 图像执行 VRAM 压缩。</paragraph>
            <paragraph><strong>禁用：</strong>永远不要对 HDR 纹理使用 VRAM 压缩，无论它们是否透明。相反，该纹理会被转换为 RGBE9995（每通道 9 位 + 5 位指数 = 每像素 32 位），与半浮点或单精度浮点图像格式相比，会减少内存使用量。</paragraph>
            <paragraph><strong>仅不透明：</strong>仅对不透明 HDR 纹理使用 VRAM 压缩。这是由于 HDR 格式的限制，因为没有支持 VRAM 压缩且同时支持透明度的 HDR 格式。</paragraph>
            <paragraph><strong>始终：</strong>强制 VRAM 压缩，即使对于具有 Alpha 通道的 HDR 纹理也是如此。为此，在导入时将丢弃 Alpha 通道。</paragraph>
            <paragraph><strong>注意：</strong>仅对 Radiance HDR（<literal>.hdr</literal>）和 OpenEXR（<literal>.exr</literal>）图像有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceimporterlayeredtexture-property-compress-high-quality"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-compress-high-quality" names="class_resourceimporterlayeredtexture_property_compress/high_quality"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>compress/high_quality</strong> = <literal>false</literal></paragraph>
            <paragraph>如果为 <literal>true</literal>，则在桌面平台上使用 BPTC 压缩，在移动平台上使用 ASTC 压缩。使用 BPTC 时，BC7 被用于 SDR 纹理，BC6H 被用于 HDR 纹理。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则在桌面平台上使用速度更快但质量较低的 S3TC 压缩，在移动/Web 平台上使用 ETC2。使用 S3TC 时，DXT1 (BC1) 被用于不透明纹理，DXT5 (BC3) 被用于透明或法线贴图（RGTC）纹理。</paragraph>
            <paragraph>BPTC 和 ASTC 支持 HDR 纹理的 VRAM 压缩，但 S3TC 和 ETC2 不支持（请参阅 <reference internal="True" refid="class-resourceimporterlayeredtexture-property-compress-hdr-compression"><inline classes="std std-ref">compress/hdr_compression</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceimporterlayeredtexture-property-compress-lossy-quality"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-compress-lossy-quality" names="class_resourceimporterlayeredtexture_property_compress/lossy_quality"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>compress/lossy_quality</strong> = <literal>0.7</literal></paragraph>
            <paragraph>使用<strong>有损</strong>压缩模式时使用的质量。值越高，质量越好，但文件大小越大。有损质量不会影响导入纹理的内存使用情况，只会影响它在磁盘上的文件大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceimporterlayeredtexture-property-compress-mode"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-compress-mode" names="class_resourceimporterlayeredtexture_property_compress/mode"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>compress/mode</strong> = <literal>1</literal></paragraph>
            <paragraph>要使用的压缩模式。每种压缩模式都提供不同的权衡：</paragraph>
            <paragraph><strong>无损：</strong>原始质量、高内存占用、高磁盘占用、导入速度快。</paragraph>
            <paragraph><strong>有损：</strong>质量降低、高内存占用、低磁盘占用、导入速度快。</paragraph>
            <paragraph><strong>VRAM 压缩：</strong>质量降低、低内存占用、低磁盘占用、导入速度最慢。仅适用于 3D 场景中的纹理，不适用于 2D 元素。</paragraph>
            <paragraph><strong>VRAM 未压缩：</strong>原始质量、高内存占用、最高磁盘占用、导入速度最快。</paragraph>
            <paragraph><strong>Basis Universal：</strong>质量降低、低内存占用、最低磁盘占用、导入速度慢。仅适用于 3D 场景中的纹理，不适用于 2D 元素。</paragraph>
            <paragraph>有关更多详细信息，请参阅手册中的 <reference name="压缩模式" refuri="../tutorials/assets_pipeline/importing_images.html#compress-mode">压缩模式</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceimporterlayeredtexture-property-mipmaps-generate"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-mipmaps-generate" names="class_resourceimporterlayeredtexture_property_mipmaps/generate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>mipmaps/generate</strong> = <literal>true</literal></paragraph>
            <paragraph>如果为 <literal>true</literal>，则在导入时生成较小版本的纹理。例如，64×64 纹理将生成 6 个多级渐远纹理（32×32、16×16、8×8、4×4、2×2、1×1）。这样做有几个好处：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>纹理在远处（3D 中）或由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 缩放（2D 中）而缩小时不会变得具有颗粒感。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果纹理显示在远处，性能将会提高，因为对原始纹理的较小版本进行采样速度更快并且需要更少的内存带宽。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>多级渐远纹理的缺点是它们使内存占用增加大约 33%（对于 <reference internal="True" refuri="class_texture2darray#class-texture2darray"><inline classes="std std-ref">Texture2DArray</inline></reference>、<reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 和 <reference internal="True" refuri="class_cubemaparray#class-cubemaparray"><inline classes="std std-ref">CubemapArray</inline></reference>）或 14%（对于 <reference internal="True" refuri="class_texture3d#class-texture3d"><inline classes="std std-ref">Texture3D</inline></reference>）。</paragraph>
            <paragraph>建议在 3D 中启用多级渐远纹理。但是，在 2D 中，仅当你的项目明显受益于启用多级渐远纹理 时才应启用该功能。如果相机从不大幅缩小，启用多级渐远纹理不会有任何好处，但内存占用会增加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceimporterlayeredtexture-property-mipmaps-limit"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-mipmaps-limit" names="class_resourceimporterlayeredtexture_property_mipmaps/limit"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mipmaps/limit</strong> = <literal>-1</literal></paragraph>
            <paragraph>未实现。目前，更改后没有效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceimporterlayeredtexture-property-slices-arrangement"></target>
            <paragraph classes="classref-property" ids="class-resourceimporterlayeredtexture-property-slices-arrangement" names="class_resourceimporterlayeredtexture_property_slices/arrangement"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>slices/arrangement</strong> = <literal>1</literal></paragraph>
            <paragraph>控制立方体贴图纹理的内部布局方式。使用高分辨率立方体贴图时，与 <strong>1×6</strong> 和 <strong>6×1</strong> 相比，<strong>2×3</strong> and <strong>3×2</strong> 不太容易超出硬件纹理大小限制。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
