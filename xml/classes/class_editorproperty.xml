<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorproperty.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorProperty.xml.</comment>
    <target refid="class-editorproperty"></target>
    <section ids="editorproperty class-editorproperty" names="editorproperty class_editorproperty">
        <title>EditorProperty</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于编辑属性的自定义控件，可以添加到 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference> 中。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于编辑属性的自定义控件，可以添加到 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference> 中。通过 <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin"><inline classes="std std-ref">EditorInspectorPlugin</inline></reference> 添加。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="65"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-property-checkable"><inline classes="std std-ref">checkable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-property-checked"><inline classes="std std-ref">checked</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-property-deletable"><inline classes="std std-ref">deletable</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-property-draw-warning"><inline classes="std std-ref">draw_warning</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-property-keying"><inline classes="std std-ref">keying</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-property-label"><inline classes="std std-ref">label</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-property-read-only"><inline classes="std std-ref">read_only</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="251"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-private-method-set-read-only"><inline classes="std std-ref">_set_read_only</inline></reference>(read_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-private-method-update-property"><inline classes="std std-ref">_update_property</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-method-add-focusable"><inline classes="std std-ref">add_focusable</inline></reference>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-method-emit-changed"><inline classes="std std-ref">emit_changed</inline></reference>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, field: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", changing: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-method-get-edited-object"><inline classes="std std-ref">get_edited_object</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-method-get-edited-property"><inline classes="std std-ref">get_edited_property</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-method-set-bottom-editor"><inline classes="std std-ref">set_bottom_editor</inline></reference>(editor: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorproperty-method-update-property"><inline classes="std std-ref">update_property</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-editorproperty-signal-multiple-properties-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-multiple-properties-changed" names="class_editorproperty_signal_multiple_properties_changed"><strong>multiple_properties_changed</strong>(properties: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-multiple-properties-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果想要同时修改多个属性，请发出它。如果属性是通过 <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin-private-method-parse-property"><inline classes="std std-ref">EditorInspectorPlugin._parse_property</inline></reference> 添加的，请勿使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-object-id-selected"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-object-id-selected" names="class_editorproperty_signal_object_id_selected"><strong>object_id_selected</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-object-id-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>子检查器会使用。如果选择的是对象 ID，则触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-property-can-revert-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-property-can-revert-changed" names="class_editorproperty_signal_property_can_revert_changed"><strong>property_can_revert_changed</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, can_revert: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-property-can-revert-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当属性的可恢复性（即，它是否具有非默认值并因此显示为带有恢复图标）发生变化时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-property-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-property-changed" names="class_editorproperty_signal_property_changed"><strong>property_changed</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, field: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, changing: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-property-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>不要手动触发，使用 <reference internal="True" refid="class-editorproperty-method-emit-changed"><inline classes="std std-ref">emit_changed</inline></reference> 方法代替。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-property-checked"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-property-checked" names="class_editorproperty_signal_property_checked"><strong>property_checked</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, checked: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-property-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>勾选某个属性时发出。内部使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-property-deleted"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-property-deleted" names="class_editorproperty_signal_property_deleted"><strong>property_deleted</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-property-deleted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除某个属性时发出。内部使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-property-keyed"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-property-keyed" names="class_editorproperty_signal_property_keyed"><strong>property_keyed</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-property-keyed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果你想将此值添加这个值为动画键，请触发它（首先检查是否启用了键控）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-property-keyed-with-value"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-property-keyed-with-value" names="class_editorproperty_signal_property_keyed_with_value"><strong>property_keyed_with_value</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-property-keyed-with-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果你想用一个单一的值来键入一个属性，请触发它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-property-pinned"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-property-pinned" names="class_editorproperty_signal_property_pinned"><strong>property_pinned</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, pinned: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-property-pinned"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果想要对某个属性进行标记（或者取消标记），让它无论是否与默认值相等都进行保存，请发出它。</paragraph>
            <paragraph>默认值指节点刚刚实例化后属性的取值，可以来自继承/实例化链上的祖先场景、脚本或内置类。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-resource-selected"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-resource-selected" names="class_editorproperty_signal_resource_selected"><strong>resource_selected</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, resource: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-resource-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果你想编辑一个子资源，请将此信号与资源一起发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-signal-selected"></target>
            <paragraph classes="classref-signal" ids="class-editorproperty-signal-selected" names="class_editorproperty_signal_selected"><strong>selected</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, focusable_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-editorproperty-signal-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择时触发。内部使用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-editorproperty-property-checkable"></target>
            <paragraph classes="classref-property" ids="class-editorproperty-property-checkable" names="class_editorproperty_property_checkable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>checkable</strong> = <literal>false</literal> <reference internal="True" refid="class-editorproperty-property-checkable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_checkable</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_checkable</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检查器，该属性可勾选时设置为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-property-checked"></target>
            <paragraph classes="classref-property" ids="class-editorproperty-property-checked" names="class_editorproperty_property_checked"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>checked</strong> = <literal>false</literal> <reference internal="True" refid="class-editorproperty-property-checked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_checked</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_checked</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检查器，该属性已勾选时设置为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-property-deletable"></target>
            <paragraph classes="classref-property" ids="class-editorproperty-property-deletable" names="class_editorproperty_property_deletable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>deletable</strong> = <literal>false</literal> <reference internal="True" refid="class-editorproperty-property-deletable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_deletable</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_deletable</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检查器，该属性可以被用户删除时设置为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-property-draw-warning"></target>
            <paragraph classes="classref-property" ids="class-editorproperty-property-draw-warning" names="class_editorproperty_property_draw_warning"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>draw_warning</strong> = <literal>false</literal> <reference internal="True" refid="class-editorproperty-property-draw-warning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_warning</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_draw_warning</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检查器，该属性用编辑器主题的警告色绘制时设置为 <literal>true</literal>。用于可编辑子节点的属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-property-keying"></target>
            <paragraph classes="classref-property" ids="class-editorproperty-property-keying" names="class_editorproperty_property_keying"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>keying</strong> = <literal>false</literal> <reference internal="True" refid="class-editorproperty-property-keying"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_keying</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_keying</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检查器，该属性可以被添加为动画关键帧时设置为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-property-label"></target>
            <paragraph classes="classref-property" ids="class-editorproperty-property-label" names="class_editorproperty_property_label"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>label</strong> = <literal>""</literal> <reference internal="True" refid="class-editorproperty-property-label"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_label</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_label</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置此属性可改变标签（如果你想显示标签）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-property-read-only"></target>
            <paragraph classes="classref-property" ids="class-editorproperty-property-read-only" names="class_editorproperty_property_read_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>read_only</strong> = <literal>false</literal> <reference internal="True" refid="class-editorproperty-property-read-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_read_only</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_read_only</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于检查器，该属性为只读时设置为 <literal>true</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorproperty-private-method-set-read-only"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-private-method-set-read-only" names="class_editorproperty_private_method__set_read_only"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_read_only</strong>(read_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorproperty-private-method-set-read-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当属性的只读状态被改变时被调用。它可用于将自定义控件改变为只读或可修改的状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-private-method-update-property"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-private-method-update-property" names="class_editorproperty_private_method__update_property"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_update_property</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorproperty-private-method-update-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当这个虚函数被调用时，你必须更新你的编辑器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-method-add-focusable"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-method-add-focusable" names="class_editorproperty_method_add_focusable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_focusable</strong>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-editorproperty-method-add-focusable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果添加的任何控件可以获得键盘焦点，将其添加到此处。这样可以确保在检查器被刷新时恢复焦点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-method-emit-changed"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-method-emit-changed" names="class_editorproperty_method_emit_changed"><abbreviation explanation="无返回值。">void</abbreviation> <strong>emit_changed</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, field: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", changing: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-editorproperty-method-emit-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果一个或几个属性发生了变化，必然会调用这个函数。<literal>field</literal> 用于你的编辑器可以单独修改字段的情况（例如，Vector3.x）。<literal>changing</literal> 参数可以避免编辑器请求刷新该属性（如果不确定，请保留为 <literal>false</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-method-get-edited-object"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-method-get-edited-object" names="class_editorproperty_method_get_edited_object"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>get_edited_object</strong>() <reference internal="True" refid="class-editorproperty-method-get-edited-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取被编辑的对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-method-get-edited-property"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-method-get-edited-property" names="class_editorproperty_method_get_edited_property"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_edited_property</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorproperty-method-get-edited-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取被编辑的属性。如果你的编辑器适用于单个属性（通过 <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin-private-method-parse-property"><inline classes="std std-ref">EditorInspectorPlugin._parse_property</inline></reference> 添加），则返回该属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-method-set-bottom-editor"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-method-set-bottom-editor" names="class_editorproperty_method_set_bottom_editor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bottom_editor</strong>(editor: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-editorproperty-method-set-bottom-editor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>editor</literal> 控件放在属性标签的下方。该控件必须事先用 <reference internal="True" refuri="class_node#class-node-method-add-child"><inline classes="std std-ref">Node.add_child</inline></reference> 添加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorproperty-method-update-property"></target>
            <paragraph classes="classref-method" ids="class-editorproperty-method-update-property" names="class_editorproperty_method_update_property"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update_property</strong>() <reference internal="True" refid="class-editorproperty-method-update-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制刷新属性显示。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
