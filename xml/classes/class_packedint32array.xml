<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_packedint32array.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/PackedInt32Array.xml.</comment>
    <target refid="class-packedint32array"></target>
    <section ids="packedint32array class-packedint32array" names="packedint32array class_packedint32array">
        <title>PackedInt32Array</title>
        <paragraph>32 位整数紧缩数组。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>专门设计用于存放 32 位整数值的数组。数据是紧密存放的，因此能够在数组较大时节省内存。</paragraph>
            <paragraph><strong>注意：</strong>该类型存储的是 32 位有符号整数，也就是说它可以取区间 <literal>[-2^31, 2^31 - 1]</literal> 内的值，即 <literal>[-2147483648, 2147483647]</literal>。超过界限时会从另一端绕回。相比之下，<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 使用带符号的 64 位整数，可以容纳更大的值。紧密存放 64 位整数见 <reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>紧缩数组始终按引用传递。如果需要获取数组的副本，独立于原始数组进行修改，请使用 <reference internal="True" refid="class-packedint32array-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>。内置属性及方法<emphasis>无需考虑</emphasis>该规则，返回的紧缩数组是副本，对其进行修改<emphasis>不影响</emphasis>原值。更新内置属性时，请在修改返回的数组后，将其赋值回该属性。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="140"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-constructor-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-constructor-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>(from: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-constructor-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>(from: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="138"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-append"><inline classes="std std-ref">append</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-append-array"><inline classes="std std-ref">append_array</inline></reference>(array: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-bsearch"><inline classes="std std-ref">bsearch</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, before: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-count"><inline classes="std std-ref">count</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-fill"><inline classes="std std-ref">fill</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-find"><inline classes="std std-ref">find</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-has"><inline classes="std std-ref">has</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-insert"><inline classes="std std-ref">insert</inline></reference>(at_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-push-back"><inline classes="std std-ref">push_back</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-remove-at"><inline classes="std std-ref">remove_at</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-resize"><inline classes="std std-ref">resize</inline></reference>(new_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-reverse"><inline classes="std std-ref">reverse</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-rfind"><inline classes="std std-ref">rfind</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-set"><inline classes="std std-ref">set</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-size"><inline classes="std std-ref">size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-slice"><inline classes="std std-ref">slice</inline></reference>(begin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2147483647) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-sort"><inline classes="std std-ref">sort</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-method-to-byte-array"><inline classes="std std-ref">to_byte_array</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="137"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-operator-neq-packedint32array"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-operator-sum-packedint32array"><inline classes="std std-ref">operator +</inline></reference>(right: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-operator-eq-packedint32array"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedint32array-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-packedint32array-constructor-packedint32array"></target>
            <paragraph classes="classref-constructor" ids="class-packedint32array-constructor-packedint32array" names="class_packedint32array_constructor_packedint32array"><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>PackedInt32Array</strong>() <reference internal="True" refid="class-packedint32array-constructor-packedint32array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造空的 <strong>PackedInt32Array</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>PackedInt32Array</strong>(from: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>PackedInt32Array</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>PackedInt32Array</strong>(from: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
            <paragraph>构造新 <strong>PackedInt32Array</strong>。你还可以传入通用 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 进行转换。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-packedint32array-method-append"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-append" names="class_packedint32array_method_append"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>append</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-method-append"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向数组末尾追加一个元素（<reference internal="True" refid="class-packedint32array-method-push-back"><inline classes="std std-ref">push_back</inline></reference> 的别名）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-append-array"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-append-array" names="class_packedint32array_method_append_array"><abbreviation explanation="无返回值。">void</abbreviation> <strong>append_array</strong>(array: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-packedint32array-method-append-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该数组的末尾追加一个 <strong>PackedInt32Array</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-bsearch"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-bsearch" names="class_packedint32array_method_bsearch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bsearch</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, before: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-packedint32array-method-bsearch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用二进法查找已有值的索引（如果该值尚未存在于数组中，则为保持排序顺序的插入索引）。传递 <literal>before</literal> 说明符是可选的。如果该参数为 <literal>false</literal>，则返回的索引位于数组中该值的所有已有的条目之后。</paragraph>
            <paragraph><strong>注意：</strong>在未排序的数组上调用 <reference internal="True" refid="class-packedint32array-method-bsearch"><inline classes="std std-ref">bsearch</inline></reference> 会产生预料之外的行为。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-clear"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-clear" names="class_packedint32array_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-packedint32array-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空数组。相当于调用 <reference internal="True" refid="class-packedint32array-method-resize"><inline classes="std std-ref">resize</inline></reference> 时指定大小为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-count"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-count" names="class_packedint32array_method_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>count</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回元素在数组中出现的次数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-duplicate"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-duplicate" names="class_packedint32array_method_duplicate"><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>duplicate</strong>() <reference internal="True" refid="class-packedint32array-method-duplicate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建该数组的副本，并将该副本返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-fill"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-fill" names="class_packedint32array_method_fill"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fill</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-method-fill"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将数组中的所有元素都设为给定的值。通常与 <reference internal="True" refid="class-packedint32array-method-resize"><inline classes="std std-ref">resize</inline></reference> 一起使用，创建给定大小的数组并初始化元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-find"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-find" names="class_packedint32array_method_find"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-find"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在数组中搜索值并返回其索引，如果未找到则返回 <literal>-1</literal> 。可选地，可以传递起始搜索索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-has"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-has" names="class_packedint32array_method_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-has"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该数组包含 <literal>value</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-insert"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-insert" names="class_packedint32array_method_insert"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>insert</strong>(at_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-method-insert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在数组中的给定位置插入新的整数。位置必须有效，或者位于数组末尾（<literal>idx == size()</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-is-empty"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-is-empty" names="class_packedint32array_method_is_empty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_empty</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-is-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该数组为空时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-push-back"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-push-back" names="class_packedint32array_method_push_back"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>push_back</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-method-push-back"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个值添加到数组中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-remove-at"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-remove-at" names="class_packedint32array_method_remove_at"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_at</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-method-remove-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从数组中删除位于索引的元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-resize"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-resize" names="class_packedint32array_method_resize"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>resize</strong>(new_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-method-resize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置数组的大小。如果数组被增大，则保留数组末端的元素。如果数组被缩小，则将数组截断到新的大小。调用一次 <reference internal="True" refid="class-packedint32array-method-resize"><inline classes="std std-ref">resize</inline></reference> 并分配新值比逐个添加新元素要快。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-reverse"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-reverse" names="class_packedint32array_method_reverse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reverse</strong>() <reference internal="True" refid="class-packedint32array-method-reverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将数组中的元素逆序排列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-rfind"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-rfind" names="class_packedint32array_method_rfind"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>rfind</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-rfind"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>逆序搜索数组。还可以传递起始搜索位置索引。如果为负，则起始索引被视为相对于数组的结尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-set"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-set" names="class_packedint32array_method_set"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-method-set"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更改给定索引处的整数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-size"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-size" names="class_packedint32array_method_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回数组中元素的个数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-slice"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-slice" names="class_packedint32array_method_slice"><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>slice</strong>(begin: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 2147483647) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-slice"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>PackedInt32Array</strong> 的切片，是从 <literal>begin</literal>（含）到 <literal>end</literal>（不含）的全新 <strong>PackedInt32Array</strong>。</paragraph>
            <paragraph><literal>begin</literal> 和 <literal>end</literal> 的绝对值会按数组大小进行限制，所以 <literal>end</literal> 的默认值会切到数组大小为止（即 <literal>arr.slice(1)</literal> 是 <literal>arr.slice(1, arr.size())</literal> 的简写）。</paragraph>
            <paragraph>如果 <literal>begin</literal> 或 <literal>end</literal> 为负，则表示相对于数组的末尾（即 <literal>arr.slice(0, -2)</literal> 是 <literal>arr.slice(0, arr.size() - 2)</literal> 的简写）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-sort"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-sort" names="class_packedint32array_method_sort"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sort</strong>() <reference internal="True" refid="class-packedint32array-method-sort"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该数组中的元素按升序排列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-method-to-byte-array"></target>
            <paragraph classes="classref-method" ids="class-packedint32array-method-to-byte-array" names="class_packedint32array_method_to_byte_array"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>to_byte_array</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedint32array-method-to-byte-array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回数据的副本，将其中的每个元素都编码为 4 个字节，放入 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> 中。</paragraph>
            <paragraph>新数组的大小为 <literal>int32_array.size() * 4</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-packedint32array-operator-neq-packedint32array"></target>
            <paragraph classes="classref-operator" ids="class-packedint32array-operator-neq-packedint32array" names="class_packedint32array_operator_neq_packedint32array"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-packedint32array-operator-neq-packedint32array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果数组内容不同，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-operator-sum-packedint32array"></target>
            <paragraph classes="classref-operator" ids="class-packedint32array-operator-sum-packedint32array" names="class_packedint32array_operator_sum_packedint32array"><reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>operator +</strong>(right: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-packedint32array-operator-sum-packedint32array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的 <strong>PackedInt32Array</strong>，新数组的内容为此数组在末尾加上 <literal>right</literal>。为了提高性能，请考虑改用 <reference internal="True" refid="class-packedint32array-method-append-array"><inline classes="std std-ref">append_array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-operator-eq-packedint32array"></target>
            <paragraph classes="classref-operator" ids="class-packedint32array-operator-eq-packedint32array" names="class_packedint32array_operator_eq_packedint32array"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-packedint32array-operator-eq-packedint32array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个数组的内容相同，即对应索引号的整数相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedint32array-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-packedint32array-operator-idx-int" names="class_packedint32array_operator_idx_int"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator []</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-packedint32array-operator-idx-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引 <literal>index</literal> 处的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>。负数索引可以从末尾开始访问元素。使用超出数组范围的索引会导致出错。</paragraph>
            <paragraph>注意，<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 类型为 64 位，与该数组中所存储的值不同。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
