<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_httprequest.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/HTTPRequest.xml.</comment>
    <target refid="class-httprequest"></target>
    <section ids="httprequest class-httprequest" names="httprequest class_httprequest">
        <title>HTTPRequest</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>具有发送 HTTP(S) 请求能力的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>一种具有发送 HTTP 请求能力的节点。内部使用 <reference internal="True" refuri="class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference>。</paragraph>
            <paragraph>可用于发出 HTTP 请求，即通过 HTTP 下载或上传文件或网络内容。</paragraph>
            <paragraph><strong>警告：</strong>请参阅 <reference internal="True" refuri="class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference> 中的注释和警告以了解限制，尤其是有关 TLS 安全性的限制。</paragraph>
            <paragraph><strong>注意：</strong>导出到 Android 时，在导出项目或使用一键部署前，请确保在 Android 导出预设中启用 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信都将被 Android 阻止。</paragraph>
            <paragraph><strong>联系 REST API 并打印其返回字段之一的示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    # 创建一个 HTTP 请求节点并连接其完成信号。
    var http_request = HTTPRequest.new()
    add_child(http_request)
    http_request.request_completed.connect(self._http_request_completed)

    # 执行一个 GET 请求。以下 URL 会将写入作为 JSON 返回。
    var error = http_request.request("https://httpbin.org/get")
    if error != OK:
        push_error("在HTTP请求中发生了一个错误。")

    # 执行一个 POST 请求。 以下 URL 会将写入作为 JSON 返回。
    # 注意：不要使用单个 HTTPRequest 节点同时发出请求。
    # 下面的代码片段仅供参考。
    var body = JSON.new().stringify({"name": "Godette"})
    error = http_request.request("https://httpbin.org/post", [], HTTPClient.METHOD_POST, body)
    if error != OK:
        push_error("在HTTP请求中发生了一个错误。")

# 当 HTTP 请求完成时调用。
func _http_request_completed(result, response_code, headers, body):
    var json = JSON.new()
    json.parse(body.get_string_from_utf8())
    var response = json.get_data()

    # 将打印 HTTPRequest 节点使用的用户代理字符串（由 httpbin.org 识别）。
    print(response.headers["User-Agent"])</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    // 创建一个 HTTP 请求节点并连接其完成信号。
    var httpRequest = new HttpRequest();
    AddChild(httpRequest);
    httpRequest.RequestCompleted += HttpRequestCompleted;

    // 执行一个 GET 请求。以下 URL 会将写入作为 JSON 返回。
    Error error = httpRequest.Request("https://httpbin.org/get");
    if (error != Error.Ok)
    {
        GD.PushError("在HTTP请求中发生了一个错误。");
    }

    // 执行一个 POST 请求。 以下 URL 会将写入作为 JSON 返回。
    // 注意：不要使用单个 HTTPRequest 节点同时发出请求。
    // 下面的代码片段仅供参考。
    string body = new Json().Stringify(new Godot.Collections.Dictionary
    {
        { "name", "Godette" }
    });
    error = httpRequest.Request("https://httpbin.org/post", null, HttpClient.Method.Post, body);
    if (error != Error.Ok)
    {
        GD.PushError("在HTTP请求中发生了一个错误。");
    }
}

// 当 HTTP 请求完成时调用。
private void HttpRequestCompleted(long result, long responseCode, string[] headers, byte[] body)
{
    var json = new Json();
    json.Parse(body.GetStringFromUtf8());
    var response = json.GetData().AsGodotDictionary();

    // 将打印 HTTPRequest 节点使用的用户代理字符串（由 httpbin.org 识别）。
    GD.Print((response["headers"].AsGodotDictionary())["User-Agent"]);
}</literal_block>
                </div>
            </container>
            <paragraph><strong>使用 HTTPRequest 加载和显示图像的示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    # 创建一个 HTTP 请求节点并连接其完成信号。
    var http_request = HTTPRequest.new()
    add_child(http_request)
    http_request.request_completed.connect(self._http_request_completed)

    # 执行一个 HTTP 请求。下面的 URL 将写入作为一个 PNG 图像返回。
    var error = http_request.request("https://via.placeholder.com/512")
    if error != OK:
        push_error("在HTTP请求中发生了一个错误。")

# 当 HTTP 请求完成时调用。
func _http_request_completed(result, response_code, headers, body):
    if result != HTTPRequest.RESULT_SUCCESS:
        push_error("无法下载图像。尝试一个不同的图像。")

    var image = Image.new()
    var error = image.load_png_from_buffer(body)
    if error != OK:
        push_error("无法加载图像。")

    var texture = ImageTexture.create_from_image(image)

    # 在 TextureRect 节点中显示图像。
    var texture_rect = TextureRect.new()
    add_child(texture_rect)
    texture_rect.texture = texture</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    // 创建一个 HTTP 请求节点并连接其完成信号。
    var httpRequest = new HttpRequest();
    AddChild(httpRequest);
    httpRequest.RequestCompleted += HttpRequestCompleted;

    // 执行一个 HTTP 请求。下面的 URL 将写入作为一个 PNG 图像返回。
    Error error = httpRequest.Request("https://via.placeholder.com/512");
    if (error != Error.Ok)
    {
        GD.PushError("在HTTP请求中发生了一个错误。");
    }
}

// 当 HTTP 请求完成时调用。
private void HttpRequestCompleted(long result, long responseCode, string[] headers, byte[] body)
{
    if (result != (long)HttpRequest.Result.Success)
    {
        GD.PushError("无法下载图像。尝试一个不同的图像。");
    }
    var image = new Image();
    Error error = image.LoadPngFromBuffer(body);
    if (error != Error.Ok)
    {
        GD.PushError("无法加载图像。");
    }

    var texture = ImageTexture.CreateFromImage(image);

    // 在 TextureRect 节点中显示图像。
    var textureRect = new TextureRect();
    AddChild(textureRect);
    textureRect.Texture = texture;
}</literal_block>
                </div>
            </container>
            <paragraph><strong>Gzipped 响应体</strong>：HTTPRequest 将自动处理响应体的解压缩。除非已经指定了一个，否则 <literal>Accept-Encoding</literal> 报头将自动添加到你的每个请求中。任何带有 <literal>Content-Encoding: gzip</literal> 报头的响应都将自动解压，并作为未压缩的字节传送给你。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/http_request_class"><inline classes="doc">发出 HTTP 请求</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/ssl_certificates"><inline classes="doc">TLS 证书</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="76"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-property-accept-gzip"><inline classes="std std-ref">accept_gzip</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-property-body-size-limit"><inline classes="std std-ref">body_size_limit</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-property-download-chunk-size"><inline classes="std std-ref">download_chunk_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>65536</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-property-download-file"><inline classes="std std-ref">download_file</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-property-max-redirects"><inline classes="std std-ref">max_redirects</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>8</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-property-timeout"><inline classes="std std-ref">timeout</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-property-use-threads"><inline classes="std std-ref">use_threads</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="327"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-cancel-request"><inline classes="std std-ref">cancel_request</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-get-body-size"><inline classes="std std-ref">get_body_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-get-downloaded-bytes"><inline classes="std std-ref">get_downloaded_bytes</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_httpclient#enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-get-http-client-status"><inline classes="std std-ref">get_http_client_status</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-request"><inline classes="std std-ref">request</inline></reference>(url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, custom_headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> = PackedStringArray(), method: <reference internal="True" refuri="class_httpclient#enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> = 0, request_data: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-request-raw"><inline classes="std std-ref">request_raw</inline></reference>(url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, custom_headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> = PackedStringArray(), method: <reference internal="True" refuri="class_httpclient#enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> = 0, request_data_raw: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> = PackedByteArray())</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-set-http-proxy"><inline classes="std std-ref">set_http_proxy</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-set-https-proxy"><inline classes="std std-ref">set_https_proxy</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-httprequest-method-set-tls-options"><inline classes="std std-ref">set_tls_options</inline></reference>(client_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-httprequest-signal-request-completed"></target>
            <paragraph classes="classref-signal" ids="class-httprequest-signal-request-completed" names="class_httprequest_signal_request_completed"><strong>request_completed</strong>(result: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, response_code: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, body: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-httprequest-signal-request-completed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求完成时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-httprequest-result"></target>
            <paragraph classes="classref-enumeration" ids="enum-httprequest-result" names="enum_httprequest_result">enum <strong>Result</strong>: <reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-httprequest-constant-result-success"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-success" names="class_httprequest_constant_result_success"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_SUCCESS</strong> = <literal>0</literal></paragraph>
            <paragraph>请求成功。</paragraph>
            <target refid="class-httprequest-constant-result-chunked-body-size-mismatch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-chunked-body-size-mismatch" names="class_httprequest_constant_result_chunked_body_size_mismatch"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_CHUNKED_BODY_SIZE_MISMATCH</strong> = <literal>1</literal></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个枚举的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <target refid="class-httprequest-constant-result-cant-connect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-cant-connect" names="class_httprequest_constant_result_cant_connect"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_CANT_CONNECT</strong> = <literal>2</literal></paragraph>
            <paragraph>连接时请求失败。</paragraph>
            <target refid="class-httprequest-constant-result-cant-resolve"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-cant-resolve" names="class_httprequest_constant_result_cant_resolve"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_CANT_RESOLVE</strong> = <literal>3</literal></paragraph>
            <paragraph>解析时请求失败。</paragraph>
            <target refid="class-httprequest-constant-result-connection-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-connection-error" names="class_httprequest_constant_result_connection_error"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_CONNECTION_ERROR</strong> = <literal>4</literal></paragraph>
            <paragraph>因连接（读写）错误而失败。</paragraph>
            <target refid="class-httprequest-constant-result-tls-handshake-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-tls-handshake-error" names="class_httprequest_constant_result_tls_handshake_error"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_TLS_HANDSHAKE_ERROR</strong> = <literal>5</literal></paragraph>
            <paragraph>TLS 握手时请求失败。</paragraph>
            <target refid="class-httprequest-constant-result-no-response"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-no-response" names="class_httprequest_constant_result_no_response"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_NO_RESPONSE</strong> = <literal>6</literal></paragraph>
            <paragraph>请求（目前还）没有获得相应。</paragraph>
            <target refid="class-httprequest-constant-result-body-size-limit-exceeded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-body-size-limit-exceeded" names="class_httprequest_constant_result_body_size_limit_exceeded"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_BODY_SIZE_LIMIT_EXCEEDED</strong> = <literal>7</literal></paragraph>
            <paragraph>请求超出了大小上限，见 <reference internal="True" refid="class-httprequest-property-body-size-limit"><inline classes="std std-ref">body_size_limit</inline></reference>。</paragraph>
            <target refid="class-httprequest-constant-result-body-decompress-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-body-decompress-failed" names="class_httprequest_constant_result_body_decompress_failed"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_BODY_DECOMPRESS_FAILED</strong> = <literal>8</literal></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个枚举的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <target refid="class-httprequest-constant-result-request-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-request-failed" names="class_httprequest_constant_result_request_failed"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_REQUEST_FAILED</strong> = <literal>9</literal></paragraph>
            <paragraph>请求失败（目前未使用）。</paragraph>
            <target refid="class-httprequest-constant-result-download-file-cant-open"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-download-file-cant-open" names="class_httprequest_constant_result_download_file_cant_open"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_DOWNLOAD_FILE_CANT_OPEN</strong> = <literal>10</literal></paragraph>
            <paragraph>HTTPRequest 无法打开下载文件。</paragraph>
            <target refid="class-httprequest-constant-result-download-file-write-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-download-file-write-error" names="class_httprequest_constant_result_download_file_write_error"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_DOWNLOAD_FILE_WRITE_ERROR</strong> = <literal>11</literal></paragraph>
            <paragraph>HTTPRequest 无法写入下载文件。</paragraph>
            <target refid="class-httprequest-constant-result-redirect-limit-reached"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-redirect-limit-reached" names="class_httprequest_constant_result_redirect_limit_reached"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_REDIRECT_LIMIT_REACHED</strong> = <literal>12</literal></paragraph>
            <paragraph>请求超出了重定向次数上限，见 <reference internal="True" refid="class-httprequest-property-max-redirects"><inline classes="std std-ref">max_redirects</inline></reference>。</paragraph>
            <target refid="class-httprequest-constant-result-timeout"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-httprequest-constant-result-timeout" names="class_httprequest_constant_result_timeout"><reference internal="True" refid="enum-httprequest-result"><inline classes="std std-ref">Result</inline></reference> <strong>RESULT_TIMEOUT</strong> = <literal>13</literal></paragraph>
            <paragraph>请求由于超时而失败。如果本就希望请求花费较长的时间，请尝试增大 <reference internal="True" refid="class-httprequest-property-timeout"><inline classes="std std-ref">timeout</inline></reference>，或将其设为 <literal>0.0</literal> 从而完全移除超时。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-httprequest-property-accept-gzip"></target>
            <paragraph classes="classref-property" ids="class-httprequest-property-accept-gzip" names="class_httprequest_property_accept_gzip"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>accept_gzip</strong> = <literal>true</literal> <reference internal="True" refid="class-httprequest-property-accept-gzip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_accept_gzip</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_accepting_gzip</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，这个报头会被添加到每个请求中：<literal>Accept-Encoding: gzip, deflate</literal> 告诉服务器可以压缩响应正文。</paragraph>
            <paragraph>任何声明 <literal>gzip</literal> 或 <literal>deflate</literal> 的 <literal>Content-Encoding</literal> 的响应正文，将被自动解压缩，并且未压缩的字节将通过 <reference internal="True" refid="class-httprequest-signal-request-completed"><inline classes="std std-ref">request_completed</inline></reference> 被传递。</paragraph>
            <paragraph>如果用户指定了自己的 <literal>Accept-Encoding</literal> 报头，那么无论 <reference internal="True" refid="class-httprequest-property-accept-gzip"><inline classes="std std-ref">accept_gzip</inline></reference> 是什么，都不会添加任何报头。</paragraph>
            <paragraph>如果为 <literal>false</literal>，这将不会添加报头，并且不会对响应正文执行任何解压缩。响应正文的原始字节将通过 <reference internal="True" refid="class-httprequest-signal-request-completed"><inline classes="std std-ref">request_completed</inline></reference> 返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-property-body-size-limit"></target>
            <paragraph classes="classref-property" ids="class-httprequest-property-body-size-limit" names="class_httprequest_property_body_size_limit"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>body_size_limit</strong> = <literal>-1</literal> <reference internal="True" refid="class-httprequest-property-body-size-limit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_body_size_limit</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_body_size_limit</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>响应正文的最大允许大小。如果响应正文被压缩，这将用作解压缩的正文的最大允许大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-property-download-chunk-size"></target>
            <paragraph classes="classref-property" ids="class-httprequest-property-download-chunk-size" names="class_httprequest_property_download_chunk_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>download_chunk_size</strong> = <literal>65536</literal> <reference internal="True" refid="class-httprequest-property-download-chunk-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_download_chunk_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_download_chunk_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用的缓冲区大小和每次迭代读取的最大字节数。参阅 <reference internal="True" refuri="class_httpclient#class-httpclient-property-read-chunk-size"><inline classes="std std-ref">HTTPClient.read_chunk_size</inline></reference>。</paragraph>
            <paragraph>下载小文件时将其设置为较低的值，以降低内存使用量，但会降低下载速度，例如 4096 表示 4 KiB。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-property-download-file"></target>
            <paragraph classes="classref-property" ids="class-httprequest-property-download-file" names="class_httprequest_property_download_file"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>download_file</strong> = <literal>""</literal> <reference internal="True" refid="class-httprequest-property-download-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_download_file</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_download_file</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要下载到的文件。将任何接收到的文件输出到其中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-property-max-redirects"></target>
            <paragraph classes="classref-property" ids="class-httprequest-property-max-redirects" names="class_httprequest_property_max_redirects"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_redirects</strong> = <literal>8</literal> <reference internal="True" refid="class-httprequest-property-max-redirects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_redirects</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_redirects</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许的最大重定向数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-property-timeout"></target>
            <paragraph classes="classref-property" ids="class-httprequest-property-timeout" names="class_httprequest_property_timeout"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>timeout</strong> = <literal>0.0</literal> <reference internal="True" refid="class-httprequest-property-timeout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_timeout</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_timeout</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>请求超时前等待的秒数。如果 <reference internal="True" refid="class-httprequest-property-timeout"><inline classes="std std-ref">timeout</inline></reference> 为 <literal>0.0</literal>，则请求不会超时。对于简单的请求，例如与 REST API 通信，建议将 <reference internal="True" refid="class-httprequest-property-timeout"><inline classes="std std-ref">timeout</inline></reference> 设为与服务器响应时间匹配的值（例如 <literal>1.0</literal> 和 <literal>10.0</literal> 之间）。这样能够防止由于服务器响应时间的变化而造成的超时，同时仍然允许应用程序检测到请求超时。对于大型请求，例如下载文件，建议将 <reference internal="True" refid="class-httprequest-property-timeout"><inline classes="std std-ref">timeout</inline></reference> 设置为 <literal>0.0</literal> 禁用超时功能。这样有助于防止由于超时而让大型传输失败。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-property-use-threads"></target>
            <paragraph classes="classref-property" ids="class-httprequest-property-use-threads" names="class_httprequest_property_use_threads"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_threads</strong> = <literal>false</literal> <reference internal="True" refid="class-httprequest-property-use-threads"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_threads</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_threads</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时，将启用多线程提高性能。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-httprequest-method-cancel-request"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-cancel-request" names="class_httprequest_method_cancel_request"><abbreviation explanation="无返回值。">void</abbreviation> <strong>cancel_request</strong>() <reference internal="True" refid="class-httprequest-method-cancel-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>取消当前请求。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-get-body-size"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-get-body-size" names="class_httprequest_method_get_body_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_body_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httprequest-method-get-body-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回响应体长度。</paragraph>
            <paragraph><strong>注意：</strong>部分 Web 服务器可能不发送响应体长度，此时返回值将为 <literal>-1</literal>。如果使用分块传输编码，响应体的长度也将为 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-get-downloaded-bytes"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-get-downloaded-bytes" names="class_httprequest_method_get_downloaded_bytes"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_downloaded_bytes</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httprequest-method-get-downloaded-bytes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 HTTPRequest 已下载的字节数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-get-http-client-status"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-get-http-client-status" names="class_httprequest_method_get_http_client_status"><reference internal="True" refuri="class_httpclient#enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference> <strong>get_http_client_status</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-httprequest-method-get-http-client-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内部 <reference internal="True" refuri="class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference> 的当前状态。见 <reference internal="True" refuri="class_httpclient#enum-httpclient-status"><inline classes="std std-ref">Status</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-request"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-request" names="class_httprequest_method_request"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>request</strong>(url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, custom_headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> = PackedStringArray(), method: <reference internal="True" refuri="class_httpclient#enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> = 0, request_data: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-httprequest-method-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在底层的 <reference internal="True" refuri="class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference> 上创建请求。如果没有配置错误，它会尝试使用 <reference internal="True" refuri="class_httpclient#class-httpclient-method-connect-to-host"><inline classes="std std-ref">HTTPClient.connect_to_host</inline></reference> 连接并将参数传递给 <reference internal="True" refuri="class_httpclient#class-httpclient-method-request"><inline classes="std std-ref">HTTPClient.request</inline></reference>。</paragraph>
            <paragraph>如果成功创建请求，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>。（并不意味着服务器已响应），如果不在树中，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unconfigured"><inline classes="std std-ref">@GlobalScope.ERR_UNCONFIGURED</inline></reference>；如果仍在处理先前的请求，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-busy"><inline classes="std std-ref">@GlobalScope.ERR_BUSY</inline></reference>；如果给定的字符串不是有效的 URL 格式，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference>；或者如果不使用线程并且 <reference internal="True" refuri="class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference> 无法连接到主机，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-connect"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CONNECT</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>当 <literal>method</literal> 为 <reference internal="True" refuri="class_httpclient#class-httpclient-constant-method-get"><inline classes="std std-ref">HTTPClient.METHOD_GET</inline></reference> 时，通过 <literal>request_data</literal> 发送的有效载荷可能会被服务器忽略，甚至导致服务器拒绝请求（见 <reference name="RFC 7231 第 4.3.1 节" refuri="https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.1">RFC 7231 第 4.3.1 节</reference>了解更多详情）。作为一种变通方法，可以在 URL 中将数据作为查询字符串发送（有关示例，请参见 <reference internal="True" refuri="class_string#class-string-method-uri-encode"><inline classes="std std-ref">String.uri_encode</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>建议使用传输加密（TLS）并避免在 HTTP GET URL 参数中发送敏感信息（例如登录凭据）。考虑改用 HTTP POST 请求或 HTTP 报头来获取此类信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-request-raw"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-request-raw" names="class_httprequest_method_request_raw"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>request_raw</strong>(url: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, custom_headers: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> = PackedStringArray(), method: <reference internal="True" refuri="class_httpclient#enum-httpclient-method"><inline classes="std std-ref">Method</inline></reference> = 0, request_data_raw: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> = PackedByteArray()) <reference internal="True" refid="class-httprequest-method-request-raw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在底层的<reference internal="True" refuri="class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference>上创建请求，使用一个原始字节数组作为请求主体。如果没有配置错误，它会尝试使用 <reference internal="True" refuri="class_httpclient#class-httpclient-method-connect-to-host"><inline classes="std std-ref">HTTPClient.connect_to_host</inline></reference> 连接并将参数传递给 <reference internal="True" refuri="class_httpclient#class-httpclient-method-request"><inline classes="std std-ref">HTTPClient.request</inline></reference>。</paragraph>
            <paragraph>如果请求创建成功，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>。（并不意味着服务器已响应），<reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-unconfigured"><inline classes="std std-ref">@GlobalScope.ERR_UNCONFIGURED</inline></reference> 如果不在树中，<reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-busy"><inline classes="std std-ref">@GlobalScope.ERR_BUSY</inline></reference> 如果仍在处理先前的请求，<reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference> 如果给定的字符串不是有效的 URL 格式，或 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-connect"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CONNECT</inline></reference>如果不使用线程并且 <reference internal="True" refuri="class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference> 无法连接到主机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-set-http-proxy"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-set-http-proxy" names="class_httprequest_method_set_http_proxy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_http_proxy</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-httprequest-method-set-http-proxy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 HTTP 请求使用的代理服务器。</paragraph>
            <paragraph>如果 <literal>host</literal> 为空或者 <literal>port</literal> 为 -1，则会取消设置代理服务器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-set-https-proxy"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-set-https-proxy" names="class_httprequest_method_set_https_proxy"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_https_proxy</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-httprequest-method-set-https-proxy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 HTTPS 请求使用的代理服务器。</paragraph>
            <paragraph>如果 <literal>host</literal> 为空或者 <literal>port</literal> 为 -1，则会取消设置代理服务器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-httprequest-method-set-tls-options"></target>
            <paragraph classes="classref-method" ids="class-httprequest-method-set-tls-options" names="class_httprequest_method_set_tls_options"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tls_options</strong>(client_options: <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference>) <reference internal="True" refid="class-httprequest-method-set-tls-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置连接到 HTTPS 服务器时使用的 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference>。见 <reference internal="True" refuri="class_tlsoptions#class-tlsoptions-method-client"><inline classes="std std-ref">TLSOptions.client</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
