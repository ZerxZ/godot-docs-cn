<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_geometry2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Geometry2D.xml.</comment>
    <target refid="class-geometry2d"></target>
    <section ids="geometry2d class-geometry2d" names="geometry2d class_geometry2d">
        <title>Geometry2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供常见 2D 几何运算的方法。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>为创建几何形状，计算形状之间的交集，以及处理 2D 中的各种其他几何操作提供了一组辅助函数。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="55"></colspec>
                    <colspec colwidth="294"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-clip-polygons"><inline classes="std std-ref">clip_polygons</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-clip-polyline-with-polygon"><inline classes="std std-ref">clip_polyline_with_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polyline, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-convex-hull"><inline classes="std std-ref">convex_hull</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> points <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-decompose-polygon-in-convex"><inline classes="std std-ref">decompose_polygon_in_convex</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-exclude-polygons"><inline classes="std std-ref">exclude_polygons</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-get-closest-point-to-segment"><inline classes="std std-ref">get_closest_point_to_segment</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-get-closest-point-to-segment-uncapped"><inline classes="std std-ref">get_closest_point_to_segment_uncapped</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-get-closest-points-between-segments"><inline classes="std std-ref">get_closest_points_between_segments</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> p1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> q1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> p2, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> q2 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-intersect-polygons"><inline classes="std std-ref">intersect_polygons</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-intersect-polyline-with-polygon"><inline classes="std std-ref">intersect_polyline_with_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polyline, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-is-point-in-circle"><inline classes="std std-ref">is_point_in_circle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> circle_position, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> circle_radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-is-point-in-polygon"><inline classes="std std-ref">is_point_in_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-is-polygon-clockwise"><inline classes="std std-ref">is_polygon_clockwise</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-line-intersects-line"><inline classes="std std-ref">line_intersects_line</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> dir_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_b, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> dir_b <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-make-atlas"><inline classes="std std-ref">make_atlas</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> sizes <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-merge-polygons"><inline classes="std std-ref">merge_polygons</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-offset-polygon"><inline classes="std std-ref">offset_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> delta, <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> join_type=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-offset-polyline"><inline classes="std std-ref">offset_polyline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polyline, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> delta, <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> join_type=0, <reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference> end_type=3 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-point-is-inside-triangle"><inline classes="std std-ref">point_is_inside_triangle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> b, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> c <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-segment-intersects-circle"><inline classes="std std-ref">segment_intersects_circle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> segment_from, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> segment_to, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> circle_position, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> circle_radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-segment-intersects-segment"><inline classes="std std-ref">segment_intersects_segment</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> to_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_b, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> to_b <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-triangulate-delaunay"><inline classes="std std-ref">triangulate_delaunay</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> points <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-geometry2d-method-triangulate-polygon"><inline classes="std std-ref">triangulate_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-geometry2d-polybooleanoperation"></target>
            <paragraph classes="classref-enumeration" ids="enum-geometry2d-polybooleanoperation" names="enum_geometry2d_polybooleanoperation">enum <strong>PolyBooleanOperation</strong>:</paragraph>
            <target refid="class-geometry2d-constant-operation-union"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-operation-union" names="class_geometry2d_constant_operation_union"><reference internal="True" refid="enum-geometry2d-polybooleanoperation"><inline classes="std std-ref">PolyBooleanOperation</inline></reference> <strong>OPERATION_UNION</strong> = <literal>0</literal></paragraph>
            <paragraph>创建区域，其中主体或剪辑多边形（或两者）被填充。</paragraph>
            <target refid="class-geometry2d-constant-operation-difference"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-operation-difference" names="class_geometry2d_constant_operation_difference"><reference internal="True" refid="enum-geometry2d-polybooleanoperation"><inline classes="std std-ref">PolyBooleanOperation</inline></reference> <strong>OPERATION_DIFFERENCE</strong> = <literal>1</literal></paragraph>
            <paragraph>创建主体多边形被填充的区域，但剪辑多边形被填充的区域除外。</paragraph>
            <target refid="class-geometry2d-constant-operation-intersection"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-operation-intersection" names="class_geometry2d_constant_operation_intersection"><reference internal="True" refid="enum-geometry2d-polybooleanoperation"><inline classes="std std-ref">PolyBooleanOperation</inline></reference> <strong>OPERATION_INTERSECTION</strong> = <literal>2</literal></paragraph>
            <paragraph>创建主体和剪辑多边形都被填充的区域。</paragraph>
            <target refid="class-geometry2d-constant-operation-xor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-operation-xor" names="class_geometry2d_constant_operation_xor"><reference internal="True" refid="enum-geometry2d-polybooleanoperation"><inline classes="std std-ref">PolyBooleanOperation</inline></reference> <strong>OPERATION_XOR</strong> = <literal>3</literal></paragraph>
            <paragraph>创建主体或剪辑多边形被填充的区域，但不是两者都被填充的区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-geometry2d-polyjointype"></target>
            <paragraph classes="classref-enumeration" ids="enum-geometry2d-polyjointype" names="enum_geometry2d_polyjointype">enum <strong>PolyJoinType</strong>:</paragraph>
            <target refid="class-geometry2d-constant-join-square"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-join-square" names="class_geometry2d_constant_join_square"><reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> <strong>JOIN_SQUARE</strong> = <literal>0</literal></paragraph>
            <paragraph>在 <literal>1 * delta</literal> 的所有凸边连接处均匀地应用平方。</paragraph>
            <target refid="class-geometry2d-constant-join-round"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-join-round" names="class_geometry2d_constant_join_round"><reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> <strong>JOIN_ROUND</strong> = <literal>1</literal></paragraph>
            <paragraph>虽然扁平化路径不可能完美地追踪一个弧线，但它们可以通过一系列弧弦来近似。</paragraph>
            <target refid="class-geometry2d-constant-join-miter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-join-miter" names="class_geometry2d_constant_join_miter"><reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> <strong>JOIN_MITER</strong> = <literal>2</literal></paragraph>
            <paragraph>对斜接有一个必要的限制，因为以非常尖锐的角度连接的边缘偏移会产生过长和过窄的 "尖刺"。对于任何给定的边缘连接，当斜接偏移会超过最大距离时，就采用 "方形 "连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-geometry2d-polyendtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-geometry2d-polyendtype" names="enum_geometry2d_polyendtype">enum <strong>PolyEndType</strong>:</paragraph>
            <target refid="class-geometry2d-constant-end-polygon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-end-polygon" names="class_geometry2d_constant_end_polygon"><reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference> <strong>END_POLYGON</strong> = <literal>0</literal></paragraph>
            <paragraph>端点使用 <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> 值连接，路径被填充为多边形。</paragraph>
            <target refid="class-geometry2d-constant-end-joined"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-end-joined" names="class_geometry2d_constant_end_joined"><reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference> <strong>END_JOINED</strong> = <literal>1</literal></paragraph>
            <paragraph>端点使用 <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> 值连接，路径被填充为多边形线。</paragraph>
            <target refid="class-geometry2d-constant-end-butt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-end-butt" names="class_geometry2d_constant_end_butt"><reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference> <strong>END_BUTT</strong> = <literal>2</literal></paragraph>
            <paragraph>端点是方形的，没有延伸。</paragraph>
            <target refid="class-geometry2d-constant-end-square"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-end-square" names="class_geometry2d_constant_end_square"><reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference> <strong>END_SQUARE</strong> = <literal>3</literal></paragraph>
            <paragraph>端点被平方化并扩展了 <literal>delta</literal> 单位。</paragraph>
            <target refid="class-geometry2d-constant-end-round"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-geometry2d-constant-end-round" names="class_geometry2d_constant_end_round"><reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference> <strong>END_ROUND</strong> = <literal>4</literal></paragraph>
            <paragraph>端点被四舍五入，并以 <literal>delta</literal> 为单位进行扩展。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-geometry2d-method-clip-polygons"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-clip-polygons" names="class_geometry2d_method_clip_polygons"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>clip_polygons</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
            <paragraph>根据 <literal>polygon_b</literal> 裁剪 <literal>polygon_a</literal>，并返回一组裁剪后的多边形。这会在多边形之间执行 <reference internal="True" refid="class-geometry2d-constant-operation-difference"><inline classes="std std-ref">OPERATION_DIFFERENCE</inline></reference>。如果 <literal>polygon_b</literal> 与 <literal>polygon_a</literal> 完全重叠，则返回一个空数组。</paragraph>
            <paragraph>如果 <literal>polygon_b</literal> 被 <literal>polygon_a</literal> 包围，则返回一个外多边形（边界）和一个内多边形（孔），可以通过调用 <reference internal="True" refid="class-geometry2d-method-is-polygon-clockwise"><inline classes="std std-ref">is_polygon_clockwise</inline></reference> 来区分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-clip-polyline-with-polygon"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-clip-polyline-with-polygon" names="class_geometry2d_method_clip_polyline_with_polygon"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>clip_polyline_with_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polyline, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>根据 <literal>polygon</literal> 裁剪 <literal>polyline</literal>，并返回一组裁剪后的折线。这会在折线和多边形之间执行 <reference internal="True" refid="class-geometry2d-constant-operation-difference"><inline classes="std std-ref">OPERATION_DIFFERENCE</inline></reference>。这个操作可以被认为是用一个封闭的形状切割一条线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-convex-hull"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-convex-hull" names="class_geometry2d_method_convex_hull"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>convex_hull</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> points <strong>)</strong></paragraph>
            <paragraph>给出一个 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 的数组，以逆时针的顺序返回凸面的点的列表。最后一个点与第一个点相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-decompose-polygon-in-convex"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-decompose-polygon-in-convex" names="class_geometry2d_method_decompose_polygon_in_convex"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>decompose_polygon_in_convex</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>将 <literal>polygon</literal> 分解为多个凸面，并返回一个 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> 的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-exclude-polygons"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-exclude-polygons" names="class_geometry2d_method_exclude_polygons"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>exclude_polygons</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
            <paragraph>相互排除由 <literal>polygon_a</literal> 和 <literal>polygon_b</literal> 的交集（参见 <reference internal="True" refid="class-geometry2d-method-intersect-polygons"><inline classes="std std-ref">intersect_polygons</inline></reference>）定义的公共区域，并返回一组排除的多边形。这会在多边形之间执行 <reference internal="True" refid="class-geometry2d-constant-operation-xor"><inline classes="std std-ref">OPERATION_XOR</inline></reference>。换句话说，返回各多边形之间除公共区域之外的所有区域。</paragraph>
            <paragraph>该操作可能会产生一个外多边形（边界）和一个内多边形（孔），这可以通过调用 <reference internal="True" refid="class-geometry2d-method-is-polygon-clockwise"><inline classes="std std-ref">is_polygon_clockwise</inline></reference> 来区分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-get-closest-point-to-segment"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-get-closest-point-to-segment" names="class_geometry2d_method_get_closest_point_to_segment"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_closest_point_to_segment</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s2 <strong>)</strong></paragraph>
            <paragraph>返回 2D 线段 (<literal>s1</literal>, <literal>s2</literal>) 上与 <literal>point</literal> 最接近的 2D 点。返回的点始终在指定的线段上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-get-closest-point-to-segment-uncapped"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-get-closest-point-to-segment-uncapped" names="class_geometry2d_method_get_closest_point_to_segment_uncapped"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_closest_point_to_segment_uncapped</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> s2 <strong>)</strong></paragraph>
            <paragraph>返回 2D 直线 (<literal>s1</literal>, <literal>s2</literal>) 上与 <literal>point</literal> 最接近的 2D 点。返回的点可能在 (<literal>s1</literal>, <literal>s2</literal>) 线段上，也有可能不在，即直线上该线段之外的部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-get-closest-points-between-segments"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-get-closest-points-between-segments" names="class_geometry2d_method_get_closest_points_between_segments"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_closest_points_between_segments</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> p1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> q1, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> p2, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> q2 <strong>)</strong></paragraph>
            <paragraph>给定两个 2D 线段 (<literal>p1</literal>, <literal>q1</literal>) 和 (<literal>p2</literal>, <literal>q2</literal>)，找出这两个线段见距离最近的两个点。返回 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>，包含 (<literal>p1</literal>, <literal>q1</literal>) 和 (<literal>p2</literal>, <literal>q2</literal>) 上的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-intersect-polygons"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-intersect-polygons" names="class_geometry2d_method_intersect_polygons"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>intersect_polygons</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
            <paragraph>将 <literal>polygon_a</literal> 与 <literal>polygon_b</literal> 相交，并返回一组相交的多边形。这会在多边形之间执行 <reference internal="True" refid="class-geometry2d-constant-operation-intersection"><inline classes="std std-ref">OPERATION_INTERSECTION</inline></reference>。换句话说，返回由各多边形共享的公共区域。如果没有交集，则返回一个空数组。</paragraph>
            <paragraph>该操作可能会产生一个外多边形（边界）和一个内多边形（孔），这可以通过调用 <reference internal="True" refid="class-geometry2d-method-is-polygon-clockwise"><inline classes="std std-ref">is_polygon_clockwise</inline></reference> 来区分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-intersect-polyline-with-polygon"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-intersect-polyline-with-polygon" names="class_geometry2d_method_intersect_polyline_with_polygon"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>intersect_polyline_with_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polyline, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>将 <literal>polyline</literal> 与 <literal>polygon</literal> 相交，并返回一组相交的折线。这会在折线和多边形之间执行 <reference internal="True" refid="class-geometry2d-constant-operation-intersection"><inline classes="std std-ref">OPERATION_INTERSECTION</inline></reference>。这个操作可以被认为是用一个封闭的形状切割一条线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-is-point-in-circle"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-is-point-in-circle" names="class_geometry2d_method_is_point_in_circle"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_point_in_circle</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> circle_position, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> circle_radius <strong>)</strong></paragraph>
            <paragraph>如果 <literal>point</literal> 在圆内或恰好位于圆的边界<emphasis>上</emphasis>，则返回 <literal>true</literal>；否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-is-point-in-polygon"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-is-point-in-polygon" names="class_geometry2d_method_is_point_in_polygon"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_point_in_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>如果 <literal>point</literal> 在 <literal>polygon</literal> 内或者它恰好位于多边形的边界<emphasis>上</emphasis>，则返回 <literal>true</literal>；否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-is-polygon-clockwise"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-is-polygon-clockwise" names="class_geometry2d_method_is_polygon_clockwise"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_polygon_clockwise</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>如果 <literal>polygon</literal> 的顶点按顺时针顺序排序，则返回 <literal>true</literal>；否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-line-intersects-line"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-line-intersects-line" names="class_geometry2d_method_line_intersects_line"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>line_intersects_line</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> dir_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_b, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> dir_b <strong>)</strong></paragraph>
            <paragraph>检查两条直线 (<literal>from_a</literal>, <literal>dir_a</literal>) 和 (<literal>from_b</literal>, <literal>dir_b</literal>) 是否相交。如果相交，则返回交点 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>。如果不相交，则返回 <literal>null</literal>。</paragraph>
            <paragraph><strong>注意：</strong>直线使用方向向量指定，而不是终点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-make-atlas"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-make-atlas" names="class_geometry2d_method_make_atlas"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>make_atlas</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> sizes <strong>)</strong></paragraph>
            <paragraph>给定一个表示图块的 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 数组，构建一个图集。返回的字典有两个键：<literal>points</literal> 是一个 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>，指定每个图块的位置；<literal>size</literal> 包含整个图集的整体大小，是一个 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-merge-polygons"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-merge-polygons" names="class_geometry2d_method_merge_polygons"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>merge_polygons</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_a, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon_b <strong>)</strong></paragraph>
            <paragraph>合并（结合）<literal>polygon_a</literal> 和 <literal>polygon_b</literal>，并返回一组合并的多边形。这在多边形之间执行 <reference internal="True" refid="class-geometry2d-constant-operation-union"><inline classes="std std-ref">OPERATION_UNION</inline></reference>。</paragraph>
            <paragraph>该操作可能会产生一个外部多边形（边界）和多个内部多边形（孔），可以通过调用 <reference internal="True" refid="class-geometry2d-method-is-polygon-clockwise"><inline classes="std std-ref">is_polygon_clockwise</inline></reference> 来区分它们。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-offset-polygon"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-offset-polygon" names="class_geometry2d_method_offset_polygon"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>offset_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> delta, <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> join_type=0 <strong>)</strong></paragraph>
            <paragraph>按 <literal>delta</literal> 单位（像素）膨胀或缩小 <literal>polygon</literal>。如果 <literal>delta</literal> 为正，则使多边形向外增长。如果 <literal>delta</literal> 为负，则使多边形向内收缩。返回一个多边形数组，因为膨胀/收缩可能会产生多个离散的多边形。如果 <literal>delta</literal> 为负，且其绝对值大约超过多边形的最小边界矩形尺寸，则返回一个空数组。</paragraph>
            <paragraph>每个多边形的顶点将根据 <literal>join_type</literal> 决定进行舍入，参见 <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference>。</paragraph>
            <paragraph>该操作可能会产生一个外部多边形（边界）和内部多边形（孔），这可以通过调用 <reference internal="True" refid="class-geometry2d-method-is-polygon-clockwise"><inline classes="std std-ref">is_polygon_clockwise</inline></reference> 来区分。</paragraph>
            <paragraph><strong>注意：</strong>要具体平移多边形的顶点，将它们乘以一个 <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var polygon = PackedVector2Array([Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100)])
var offset = Vector2(50, 50)
polygon = Transform2D(0, offset) * polygon
print(polygon) # 输出 [(50, 50), (150, 50), (150, 150), (50, 150)]</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var polygon = new Vector2[] { new Vector2(0, 0), new Vector2(100, 0), new Vector2(100, 100), new Vector2(0, 100) };
var offset = new Vector2(50, 50);
polygon = new Transform2D(0, offset) * polygon;
GD.Print((Variant)polygon); // 输出 [(50, 50), (150, 50), (150, 150), (50, 150)]</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-offset-polyline"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-offset-polyline" names="class_geometry2d_method_offset_polyline"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array[]</inline></reference> <strong>offset_polyline</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polyline, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> delta, <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference> join_type=0, <reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference> end_type=3 <strong>)</strong></paragraph>
            <paragraph>将 <literal>polyline</literal> 膨胀或缩小 <literal>delta</literal> 个单位（像素），以产生多边形。如果 <literal>delta</literal> 为正，则使折线向外增长。返回一组多边形，因为膨胀/收缩可能会产生多个离散的多边形。如果 <literal>delta</literal> 为负，则返回一个空数组。</paragraph>
            <paragraph>每个多边形的顶点将由 <literal>join_type</literal> 决定进行舍入，参见 <reference internal="True" refid="enum-geometry2d-polyjointype"><inline classes="std std-ref">PolyJoinType</inline></reference>。</paragraph>
            <paragraph>每个多边形的端点将由 <literal>end_type</literal> 决定进行舍入，参见 <reference internal="True" refid="enum-geometry2d-polyendtype"><inline classes="std std-ref">PolyEndType</inline></reference>。</paragraph>
            <paragraph>该操作可能会产生一个外多边形（边界）和一个内多边形（孔），这可以通过调用 <reference internal="True" refid="class-geometry2d-method-is-polygon-clockwise"><inline classes="std std-ref">is_polygon_clockwise</inline></reference> 来区分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-point-is-inside-triangle"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-point-is-inside-triangle" names="class_geometry2d_method_point_is_inside_triangle"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>point_is_inside_triangle</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> point, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> b, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> c <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>point</literal> 是否位于由 <literal>a</literal>、<literal>b</literal>、<literal>c</literal> 指定的三角形中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-segment-intersects-circle"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-segment-intersects-circle" names="class_geometry2d_method_segment_intersects_circle"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>segment_intersects_circle</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> segment_from, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> segment_to, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> circle_position, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> circle_radius <strong>)</strong></paragraph>
            <paragraph>给定 2D 线段 (<literal>segment_from</literal>, <literal>segment_to</literal>)，返回该线段与圆相交的位置（0 和 1 之间的数），这个圆位于 <literal>circle_position</literal>，半径为 <literal>circle_radius</literal>。如果该线段与圆不相交，则返回 -1（同样也适用于这条线段的延长线所在的直线与圆相交，而线段本身不相交的情况）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-segment-intersects-segment"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-segment-intersects-segment" names="class_geometry2d_method_segment_intersects_segment"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>segment_intersects_segment</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> to_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> from_b, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> to_b <strong>)</strong></paragraph>
            <paragraph>检查两条线段 (<literal>from_a</literal>, <literal>to_a</literal>) 和 (<literal>from_b</literal>, <literal>to_b</literal>) 是否相交。如果相交，则返回交点 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>。如果不相交，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-triangulate-delaunay"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-triangulate-delaunay" names="class_geometry2d_method_triangulate_delaunay"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>triangulate_delaunay</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> points <strong>)</strong></paragraph>
            <paragraph>对由离散的 <literal>points</literal> 集指定的区域进行三角化，使得任何点都不在任何生成的三角形的外接圆内。返回一个 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>，其中每个三角形由 <literal>points</literal> 中的三个连续点的索引组成（即返回的数组将具有 <literal>n * 3</literal> 个元素，其中 <literal>n</literal> 是找到的三角形的数量）。如果三角化没有成功，则返回一个空的 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-geometry2d-method-triangulate-polygon"></target>
            <paragraph classes="classref-method" ids="class-geometry2d-method-triangulate-polygon" names="class_geometry2d_method_triangulate_polygon"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>triangulate_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>对由 <literal>polygon</literal> 中的点指定的多边形进行三角化。 返回一个 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>，其中每个三角形由 <literal>polygon</literal> 中的三个连续点的索引组成（即返回的数组将具有 <literal>n * 3</literal> 个元素，其中 <literal>n</literal> 是找到的三角形的数量）。输出三角形将始终为逆时针旋转，如果为顺时针旋转，则轮廓将翻转。如果三角化没有成功，则返回一个空的 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
