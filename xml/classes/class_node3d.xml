<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_node3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Node3D.xml.</comment>
    <target refid="class-node3d"></target>
    <section ids="node3d class-node3d" names="node3d class_node3d">
        <title>Node3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_audiolistener3d#class-audiolistener3d"><inline classes="std std-ref">AudioListener3D</inline></reference>, <reference internal="True" refuri="class_audiostreamplayer3d#class-audiostreamplayer3d"><inline classes="std std-ref">AudioStreamPlayer3D</inline></reference>, <reference internal="True" refuri="class_boneattachment3d#class-boneattachment3d"><inline classes="std std-ref">BoneAttachment3D</inline></reference>, <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>, <reference internal="True" refuri="class_collisionpolygon3d#class-collisionpolygon3d"><inline classes="std std-ref">CollisionPolygon3D</inline></reference>, <reference internal="True" refuri="class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference>, <reference internal="True" refuri="class_gridmap#class-gridmap"><inline classes="std std-ref">GridMap</inline></reference>, <reference internal="True" refuri="class_importermeshinstance3d#class-importermeshinstance3d"><inline classes="std std-ref">ImporterMeshInstance3D</inline></reference>, <reference internal="True" refuri="class_joint3d#class-joint3d"><inline classes="std std-ref">Joint3D</inline></reference>, <reference internal="True" refuri="class_lightmapprobe#class-lightmapprobe"><inline classes="std std-ref">LightmapProbe</inline></reference>, <reference internal="True" refuri="class_marker3d#class-marker3d"><inline classes="std std-ref">Marker3D</inline></reference>, <reference internal="True" refuri="class_navigationlink3d#class-navigationlink3d"><inline classes="std std-ref">NavigationLink3D</inline></reference>, <reference internal="True" refuri="class_navigationobstacle3d#class-navigationobstacle3d"><inline classes="std std-ref">NavigationObstacle3D</inline></reference>, <reference internal="True" refuri="class_navigationregion3d#class-navigationregion3d"><inline classes="std std-ref">NavigationRegion3D</inline></reference>, <reference internal="True" refuri="class_openxrcompositionlayer#class-openxrcompositionlayer"><inline classes="std std-ref">OpenXRCompositionLayer</inline></reference>, <reference internal="True" refuri="class_openxrhand#class-openxrhand"><inline classes="std std-ref">OpenXRHand</inline></reference>, <reference internal="True" refuri="class_path3d#class-path3d"><inline classes="std std-ref">Path3D</inline></reference>, <reference internal="True" refuri="class_pathfollow3d#class-pathfollow3d"><inline classes="std std-ref">PathFollow3D</inline></reference>, <reference internal="True" refuri="class_raycast3d#class-raycast3d"><inline classes="std std-ref">RayCast3D</inline></reference>, <reference internal="True" refuri="class_remotetransform3d#class-remotetransform3d"><inline classes="std std-ref">RemoteTransform3D</inline></reference>, <reference internal="True" refuri="class_shapecast3d#class-shapecast3d"><inline classes="std std-ref">ShapeCast3D</inline></reference>, <reference internal="True" refuri="class_skeleton3d#class-skeleton3d"><inline classes="std std-ref">Skeleton3D</inline></reference>, <reference internal="True" refuri="class_skeletonmodifier3d#class-skeletonmodifier3d"><inline classes="std std-ref">SkeletonModifier3D</inline></reference>, <reference internal="True" refuri="class_springarm3d#class-springarm3d"><inline classes="std std-ref">SpringArm3D</inline></reference>, <reference internal="True" refuri="class_vehiclewheel3d#class-vehiclewheel3d"><inline classes="std std-ref">VehicleWheel3D</inline></reference>, <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference>, <reference internal="True" refuri="class_xrfacemodifier3d#class-xrfacemodifier3d"><inline classes="std std-ref">XRFaceModifier3D</inline></reference>, <reference internal="True" refuri="class_xrnode3d#class-xrnode3d"><inline classes="std std-ref">XRNode3D</inline></reference>, <reference internal="True" refuri="class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference></paragraph>
        <paragraph>最基本的 3D 游戏对象，所有 3D 相关节点的父类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>最基本的 3D 游戏对象，具有 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 和可见性设置。所有其他的 3D 游戏对象都继承自 <strong>Node3D</strong>。在 3D 项目中，请使用 <strong>Node3D</strong> 作为父节点对子节点进行移动、缩放、旋转和显示/隐藏。</paragraph>
            <paragraph>除非该 <strong>Node3D</strong> 对象被设置为顶层，否则仿射操作（旋转、缩放、平移）会在父节点的本地坐标系中进行。在这个坐标系中的仿射操作对应于对 <strong>Node3D</strong> 变换的直接仿射运算。下文中的本地一词指的就是这个坐标系。附加到 <strong>Node3D</strong> 对象本身的坐标系被称为对象本地坐标系。</paragraph>
            <paragraph><strong>注意：</strong>除非另有规定，所有有角度参数的方法必须将角度指定为<emphasis>弧度</emphasis>。请使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-deg-to-rad"><inline classes="std std-ref">@GlobalScope.deg_to_rad</inline></reference> 将度数转换为弧度。</paragraph>
            <paragraph><strong>注意：</strong>请注意，从 Godot 4 开始，“Spatial”节点现在被称为“Node3D”。Godot 3.x 中指的“Spatial”节点，均指的是 Godot 4 中的“Node3D”。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/introduction_to_3d"><inline classes="doc">3D 简介</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="所有 3D 演示" refuri="https://github.com/godotengine/godot-demo-projects/tree/master/3d">所有 3D 演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="55"></colspec>
                    <colspec colwidth="79"></colspec>
                    <colspec colwidth="53"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-basis"><inline classes="std std-ref">basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-global-basis"><inline classes="std std-ref">global_basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-global-position"><inline classes="std std-ref">global_position</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-global-rotation"><inline classes="std std-ref">global_rotation</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-global-rotation-degrees"><inline classes="std std-ref">global_rotation_degrees</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-global-transform"><inline classes="std std-ref">global_transform</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-position"><inline classes="std std-ref">position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-quaternion"><inline classes="std std-ref">quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-rotation"><inline classes="std std-ref">rotation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-rotation-degrees"><inline classes="std std-ref">rotation_degrees</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">RotationEditMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-rotation-edit-mode"><inline classes="std std-ref">rotation_edit_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-rotation-order"><inline classes="std std-ref">rotation_order</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-scale"><inline classes="std std-ref">scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-top-level"><inline classes="std std-ref">top_level</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-transform"><inline classes="std std-ref">transform</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-visibility-parent"><inline classes="std std-ref">visibility_parent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-property-visible"><inline classes="std std-ref">visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="267"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-add-gizmo"><inline classes="std std-ref">add_gizmo</inline></reference>(gizmo: <reference internal="True" refuri="class_node3dgizmo#class-node3dgizmo"><inline classes="std std-ref">Node3DGizmo</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-clear-gizmos"><inline classes="std std-ref">clear_gizmos</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-clear-subgizmo-selection"><inline classes="std std-ref">clear_subgizmo_selection</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-force-update-transform"><inline classes="std std-ref">force_update_transform</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_node3dgizmo#class-node3dgizmo"><inline classes="std std-ref">Node3DGizmo</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-get-gizmos"><inline classes="std std-ref">get_gizmos</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d"><inline classes="std std-ref">Node3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-get-parent-node-3d"><inline classes="std std-ref">get_parent_node_3d</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-get-world-3d"><inline classes="std std-ref">get_world_3d</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-global-rotate"><inline classes="std std-ref">global_rotate</inline></reference>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-global-scale"><inline classes="std std-ref">global_scale</inline></reference>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-global-translate"><inline classes="std std-ref">global_translate</inline></reference>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-hide"><inline classes="std std-ref">hide</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-is-local-transform-notification-enabled"><inline classes="std std-ref">is_local_transform_notification_enabled</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-is-scale-disabled"><inline classes="std std-ref">is_scale_disabled</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-is-transform-notification-enabled"><inline classes="std std-ref">is_transform_notification_enabled</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-is-visible-in-tree"><inline classes="std std-ref">is_visible_in_tree</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-look-at"><inline classes="std std-ref">look_at</inline></reference>(target: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, up: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0), use_model_front: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-look-at-from-position"><inline classes="std std-ref">look_at_from_position</inline></reference>(position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, target: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, up: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0), use_model_front: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-orthonormalize"><inline classes="std std-ref">orthonormalize</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-rotate"><inline classes="std std-ref">rotate</inline></reference>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-rotate-object-local"><inline classes="std std-ref">rotate_object_local</inline></reference>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-rotate-x"><inline classes="std std-ref">rotate_x</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-rotate-y"><inline classes="std std-ref">rotate_y</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-rotate-z"><inline classes="std std-ref">rotate_z</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-scale-object-local"><inline classes="std std-ref">scale_object_local</inline></reference>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-set-disable-scale"><inline classes="std std-ref">set_disable_scale</inline></reference>(disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-set-identity"><inline classes="std std-ref">set_identity</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-set-ignore-transform-notification"><inline classes="std std-ref">set_ignore_transform_notification</inline></reference>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-set-notify-local-transform"><inline classes="std std-ref">set_notify_local_transform</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-set-notify-transform"><inline classes="std std-ref">set_notify_transform</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-set-subgizmo-selection"><inline classes="std std-ref">set_subgizmo_selection</inline></reference>(gizmo: <reference internal="True" refuri="class_node3dgizmo#class-node3dgizmo"><inline classes="std std-ref">Node3DGizmo</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-show"><inline classes="std std-ref">show</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-to-global"><inline classes="std std-ref">to_global</inline></reference>(local_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-to-local"><inline classes="std std-ref">to_local</inline></reference>(global_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-translate"><inline classes="std std-ref">translate</inline></reference>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-translate-object-local"><inline classes="std std-ref">translate_object_local</inline></reference>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-node3d-method-update-gizmos"><inline classes="std std-ref">update_gizmos</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-node3d-signal-visibility-changed"></target>
            <paragraph classes="classref-signal" ids="class-node3d-signal-visibility-changed" names="class_node3d_signal_visibility_changed"><strong>visibility_changed</strong>() <reference internal="True" refid="class-node3d-signal-visibility-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点可见性更改时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-node3d-rotationeditmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-node3d-rotationeditmode" names="enum_node3d_rotationeditmode">enum <strong>RotationEditMode</strong>: <reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-node3d-constant-rotation-edit-mode-euler"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-node3d-constant-rotation-edit-mode-euler" names="class_node3d_constant_rotation_edit_mode_euler"><reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">RotationEditMode</inline></reference> <strong>ROTATION_EDIT_MODE_EULER</strong> = <literal>0</literal></paragraph>
            <paragraph>旋转量以 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 欧拉角的形式编辑。</paragraph>
            <target refid="class-node3d-constant-rotation-edit-mode-quaternion"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-node3d-constant-rotation-edit-mode-quaternion" names="class_node3d_constant_rotation_edit_mode_quaternion"><reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">RotationEditMode</inline></reference> <strong>ROTATION_EDIT_MODE_QUATERNION</strong> = <literal>1</literal></paragraph>
            <paragraph>旋转量以 <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> 的形式编辑。</paragraph>
            <target refid="class-node3d-constant-rotation-edit-mode-basis"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-node3d-constant-rotation-edit-mode-basis" names="class_node3d_constant_rotation_edit_mode_basis"><reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">RotationEditMode</inline></reference> <strong>ROTATION_EDIT_MODE_BASIS</strong> = <literal>2</literal></paragraph>
            <paragraph>旋转量以 <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> 的形式编辑。此模式下无法单独编辑 <reference internal="True" refid="class-node3d-property-scale"><inline classes="std std-ref">scale</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-node3d-constant-notification-transform-changed"></target>
            <paragraph classes="classref-constant" ids="class-node3d-constant-notification-transform-changed" names="class_node3d_constant_notification_transform_changed"><strong>NOTIFICATION_TRANSFORM_CHANGED</strong> = <literal>2000</literal> <reference internal="True" refid="class-node3d-constant-notification-transform-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Node3D</strong> 节点在自己的全局变换发生改变时，会收到这个通知。这意味着当前节点或者某个父节点的变换发生了改变。</paragraph>
            <paragraph>用户需要使用 <reference internal="True" refid="class-node3d-method-set-notify-transform"><inline classes="std std-ref">set_notify_transform</inline></reference> 手动申请才能够收到 <reference internal="True" refid="class-node3d-constant-notification-transform-changed"><inline classes="std std-ref">NOTIFICATION_TRANSFORM_CHANGED</inline></reference>。如果该节点在编辑器环境中，并且拥有至少一个有效的小工具，则也会发送这个通知。</paragraph>
            <target refid="class-node3d-constant-notification-enter-world"></target>
            <paragraph classes="classref-constant" ids="class-node3d-constant-notification-enter-world" names="class_node3d_constant_notification_enter_world"><strong>NOTIFICATION_ENTER_WORLD</strong> = <literal>41</literal> <reference internal="True" refid="class-node3d-constant-notification-enter-world"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Node3D</strong> 节点在注册到新的 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> 资源时，会收到这个通知。</paragraph>
            <target refid="class-node3d-constant-notification-exit-world"></target>
            <paragraph classes="classref-constant" ids="class-node3d-constant-notification-exit-world" names="class_node3d_constant_notification_exit_world"><strong>NOTIFICATION_EXIT_WORLD</strong> = <literal>42</literal> <reference internal="True" refid="class-node3d-constant-notification-exit-world"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Node3D</strong> 节点从当前的 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> 资源中取消注册时，会收到这个通知。</paragraph>
            <target refid="class-node3d-constant-notification-visibility-changed"></target>
            <paragraph classes="classref-constant" ids="class-node3d-constant-notification-visibility-changed" names="class_node3d_constant_notification_visibility_changed"><strong>NOTIFICATION_VISIBILITY_CHANGED</strong> = <literal>43</literal> <reference internal="True" refid="class-node3d-constant-notification-visibility-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Node3D</strong> 节点在其可见性发生变化时，会收到该通知。</paragraph>
            <target refid="class-node3d-constant-notification-local-transform-changed"></target>
            <paragraph classes="classref-constant" ids="class-node3d-constant-notification-local-transform-changed" names="class_node3d_constant_notification_local_transform_changed"><strong>NOTIFICATION_LOCAL_TRANSFORM_CHANGED</strong> = <literal>44</literal> <reference internal="True" refid="class-node3d-constant-notification-local-transform-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>Node3D</strong> 节点在其局部变换发生改变时，会收到这个通知。父节点的变换发生改变时不会收到这个通知。</paragraph>
            <paragraph>为了使 <reference internal="True" refid="class-node3d-constant-notification-local-transform-changed"><inline classes="std std-ref">NOTIFICATION_LOCAL_TRANSFORM_CHANGED</inline></reference> 起作用，用户首先需要使用 <reference internal="True" refid="class-node3d-method-set-notify-local-transform"><inline classes="std std-ref">set_notify_local_transform</inline></reference> 请求它。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-node3d-property-basis"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-basis" names="class_node3d_property_basis"><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>basis</strong> <reference internal="True" refid="class-node3d-property-basis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_basis</strong>(value: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>get_basis</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-node3d-property-transform"><inline classes="std std-ref">transform</inline></reference> 属性的基。代表该节点的旋转、缩放、切变。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-global-basis"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-global-basis" names="class_node3d_property_global_basis"><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>global_basis</strong> <reference internal="True" refid="class-node3d-property-global-basis"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_global_basis</strong>(value: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>get_global_basis</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>这个节点的全局基。与 <literal>global_transform.basis</literal> 等价。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-global-position"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-global-position" names="class_node3d_property_global_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>global_position</strong> <reference internal="True" refid="class-node3d-property-global-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_global_position</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_global_position</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>这个节点的全局位置。与 <literal>global_transform.origin</literal> 等价。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-global-rotation"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-global-rotation" names="class_node3d_property_global_rotation"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>global_rotation</strong> <reference internal="True" refid="class-node3d-property-global-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_global_rotation</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_global_rotation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>全局变换的旋转部分，单位为弧度，以 YXZ 欧拉角的形式表示（X 角、Y 角、Z 角）。</paragraph>
            <paragraph><strong>注意：</strong>在数学意义上，旋转是一个矩阵而不是一个向量。这三个欧拉角是旋转矩阵欧拉角参数化的三个独立参数，存储在 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 数据结构中并不是因为旋转是一个矢量，而是因为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 是一种方便存储 3 个浮点数的数据结构。因此，对旋转“向量”应用仿射操作是没有意义的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-global-rotation-degrees"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-global-rotation-degrees" names="class_node3d_property_global_rotation_degrees"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>global_rotation_degrees</strong> <reference internal="True" refid="class-node3d-property-global-rotation-degrees"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_global_rotation_degrees</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_global_rotation_degrees</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>辅助属性，用于按度数访问 <reference internal="True" refid="class-node3d-property-global-rotation"><inline classes="std std-ref">global_rotation</inline></reference> 而不是弧度数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-global-transform"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-global-transform" names="class_node3d_property_global_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>global_transform</strong> <reference internal="True" refid="class-node3d-property-global-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_global_transform</strong>(value: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_global_transform</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点在 World3D 空间的（全局）<reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-position"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-position" names="class_node3d_property_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>position</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-node3d-property-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_position</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_position</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点相对于父节点的局部位置或平移。相当于 <literal>transform.origin</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-quaternion"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-quaternion" names="class_node3d_property_quaternion"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>quaternion</strong> <reference internal="True" refid="class-node3d-property-quaternion"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_quaternion</strong>(value: <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>get_quaternion</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>以一个 <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> 的形式访问该节点的旋转。该属性非常适合补间复杂的旋转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-rotation"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-rotation" names="class_node3d_property_rotation"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>rotation</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-node3d-property-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_rotation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>以弧度为单位的，局部变换的旋转部分，根据欧拉角指定。角度按照 <reference internal="True" refid="class-node3d-property-rotation-order"><inline classes="std std-ref">rotation_order</inline></reference> 属性指定的顺序，构造一个旋转。</paragraph>
            <paragraph><strong>注意：</strong>在数学意义上，旋转是一个矩阵，而不是一个向量。三个欧拉角，即旋转矩阵的欧拉角参数化的三个独立参数，存储在一个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 数据结构中，并不是因为旋转是一个向量，而是因为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 是一个方便存储 3 个浮点数的数据结构。因此，对旋转“向量”，应用仿射操作是没有意义的。</paragraph>
            <paragraph><strong>注意：</strong>该属性在检查器中以度为单位进行编辑。如果要在脚本中使用度数，请使用 <reference internal="True" refid="class-node3d-property-rotation-degrees"><inline classes="std std-ref">rotation_degrees</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-rotation-degrees"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-rotation-degrees" names="class_node3d_property_rotation_degrees"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>rotation_degrees</strong> <reference internal="True" refid="class-node3d-property-rotation-degrees"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation_degrees</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_rotation_degrees</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>辅助属性，用于按度数访问 <reference internal="True" refid="class-node3d-property-rotation"><inline classes="std std-ref">rotation</inline></reference> 而不是弧度数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-rotation-edit-mode"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-rotation-edit-mode" names="class_node3d_property_rotation_edit_mode"><reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">RotationEditMode</inline></reference> <strong>rotation_edit_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-node3d-property-rotation-edit-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation_edit_mode</strong>(value: <reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">RotationEditMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-node3d-rotationeditmode"><inline classes="std std-ref">RotationEditMode</inline></reference> <strong>get_rotation_edit_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定旋转（和缩放）在编辑器中的显示方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-rotation-order"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-rotation-order" names="class_node3d_property_rotation_order"><reference internal="True" refuri="class_@globalscope#enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>rotation_order</strong> = <literal>2</literal> <reference internal="True" refid="class-node3d-property-rotation-order"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation_order</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-eulerorder"><inline classes="std std-ref">EulerOrder</inline></reference> <strong>get_rotation_order</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定 <reference internal="True" refid="class-node3d-property-rotation"><inline classes="std std-ref">rotation</inline></reference> 属性的轴旋转顺序。最终的方向是通过按该属性指定的顺序旋转欧拉角来构建的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-scale"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-scale" names="class_node3d_property_scale"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>scale</strong> = <literal>Vector3(1, 1, 1)</literal> <reference internal="True" refid="class-node3d-property-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scale</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>局部变换的缩放部分。</paragraph>
            <paragraph><strong>注意：</strong>3D 中，变换矩阵是无法分解出正负混合的缩放的。由于 Godot 中使用变换矩阵来表示缩放，得到的缩放值要么全正、要么全负。</paragraph>
            <paragraph><strong>注意：</strong>并不是所有节点的外观都会被 <reference internal="True" refid="class-node3d-property-scale"><inline classes="std std-ref">scale</inline></reference> 属性缩放。例如，<reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> 的外观就不受 <reference internal="True" refid="class-node3d-property-scale"><inline classes="std std-ref">scale</inline></reference> 影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-top-level"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-top-level" names="class_node3d_property_top_level"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>top_level</strong> = <literal>false</literal> <reference internal="True" refid="class-node3d-property-top-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_as_top_level</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_set_as_top_level</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该节点将不会从其父节点继承其变换。节点变换仅在全局空间中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-transform"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-transform" names="class_node3d_property_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>transform</strong> = <literal>Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)</literal> <reference internal="True" refid="class-node3d-property-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transform</strong>(value: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_transform</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该节点的局部空间 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>，相对于父节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-visibility-parent"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-visibility-parent" names="class_node3d_property_visibility_parent"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>visibility_parent</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-node3d-property-visibility-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visibility_parent</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_visibility_parent</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义该节点及其子树的可见性范围父级。可见性父级必须是一个 GeometryInstance3D。仅当可见性父级（及其所有可见性祖先）通过比其自身 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-visibility-range-begin"><inline classes="std std-ref">GeometryInstance3D.visibility_range_begin</inline></reference> 更靠近相机而被隐藏时，任何视觉实例才会可见。通过 <reference internal="True" refid="class-node3d-property-visible"><inline classes="std std-ref">visible</inline></reference> 属性隐藏的节点，基本上可以从可见性依赖树中移除，因此依赖实例不会考虑隐藏节点或其祖先。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-property-visible"></target>
            <paragraph classes="classref-property" ids="class-node3d-property-visible" names="class_node3d_property_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>visible</strong> = <literal>true</literal> <reference internal="True" refid="class-node3d-property-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visible</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，这个节点就会被画出来。只有当它的所有前项也是可见的时候，这个节点才是可见的（换句话说，<reference internal="True" refid="class-node3d-method-is-visible-in-tree"><inline classes="std std-ref">is_visible_in_tree</inline></reference> 必须返回 <literal>true</literal>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-node3d-method-add-gizmo"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-add-gizmo" names="class_node3d_method_add_gizmo"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_gizmo</strong>(gizmo: <reference internal="True" refuri="class_node3dgizmo#class-node3dgizmo"><inline classes="std std-ref">Node3DGizmo</inline></reference>) <reference internal="True" refid="class-node3d-method-add-gizmo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将编辑器小工具附加到该 <strong>Node3D</strong>。</paragraph>
            <paragraph><strong>注意：</strong>小工具对象通常是 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> 的一个实例，但参数类型保持通用以避免在 <strong>Node3D</strong> 中创建对编辑器类的依赖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-clear-gizmos"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-clear-gizmos" names="class_node3d_method_clear_gizmos"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_gizmos</strong>() <reference internal="True" refid="class-node3d-method-clear-gizmos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除附加于该 <strong>Node3D</strong> 的所有小工具。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-clear-subgizmo-selection"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-clear-subgizmo-selection" names="class_node3d_method_clear_subgizmo_selection"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_subgizmo_selection</strong>() <reference internal="True" refid="class-node3d-method-clear-subgizmo-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在编辑器中，清除该节点的子小工具选择。在一个属性更改后，子小工具 ID 变得无效时很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-force-update-transform"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-force-update-transform" names="class_node3d_method_force_update_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_update_transform</strong>() <reference internal="True" refid="class-node3d-method-force-update-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制更新变换。由于性能原因，物理中的变换改变不是即时的。变换是在累积后再设置。如果你在进行物理操作时需要最新的变换，请使用此功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-get-gizmos"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-get-gizmos" names="class_node3d_method_get_gizmos"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_node3dgizmo#class-node3dgizmo"><inline classes="std std-ref">Node3DGizmo</inline></reference>] <strong>get_gizmos</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-get-gizmos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回附加到该 <strong>Node3D</strong> 的所有小工具。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-get-parent-node-3d"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-get-parent-node-3d" names="class_node3d_method_get_parent_node_3d"><reference internal="True" refid="class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>get_parent_node_3d</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-get-parent-node-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <strong>Node3D</strong> 父节点，如果没有父节点、父节点不是 <strong>Node3D</strong> 类型或 <reference internal="True" refid="class-node3d-property-top-level"><inline classes="std std-ref">top_level</inline></reference> 为 <literal>true</literal>，则返回 <literal>null</literal>。</paragraph>
            <paragraph><strong>注意：</strong>调用这个方法并不等价于 <literal>get_parent() as Node3D</literal>，后者不会考虑 <reference internal="True" refid="class-node3d-property-top-level"><inline classes="std std-ref">top_level</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-get-world-3d"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-get-world-3d" names="class_node3d_method_get_world_3d"><reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> <strong>get_world_3d</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-get-world-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此 <strong>Node3D</strong> 节点所注册的当前 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> 资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-global-rotate"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-global-rotate" names="class_node3d_method_global_rotate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_rotate</strong>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-node3d-method-global-rotate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将全局（世界）变换围绕某个轴（单位 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>）旋转指定的弧度。旋转轴使用全局坐标系。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-global-scale"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-global-scale" names="class_node3d_method_global_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_scale</strong>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-node3d-method-global-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将全局（世界）变换按照给定的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 缩放因子进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-global-translate"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-global-translate" names="class_node3d_method_global_translate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>global_translate</strong>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-node3d-method-global-translate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将全局（世界）变换按照 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 偏移量进行移动。偏移量使用全局坐标系。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-hide"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-hide" names="class_node3d_method_hide"><abbreviation explanation="无返回值。">void</abbreviation> <strong>hide</strong>() <reference internal="True" refid="class-node3d-method-hide"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>禁用该节点的渲染。会将 <reference internal="True" refid="class-node3d-property-visible"><inline classes="std std-ref">visible</inline></reference> 改为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-is-local-transform-notification-enabled"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-is-local-transform-notification-enabled" names="class_node3d_method_is_local_transform_notification_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_local_transform_notification_enabled</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-is-local-transform-notification-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该节点是否通知其局部变换的更改。<strong>Node3D</strong> 默认不会传播此属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-is-scale-disabled"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-is-scale-disabled" names="class_node3d_method_is_scale_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_scale_disabled</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-is-scale-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该节点是否使用 <literal>(1, 1, 1)</literal> 的比例或其本地变换比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-is-transform-notification-enabled"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-is-transform-notification-enabled" names="class_node3d_method_is_transform_notification_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_transform_notification_enabled</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-is-transform-notification-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该节点是否通知其全局和局部变换的更改。<strong>Node3D</strong> 默认不会传播此属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-is-visible-in-tree"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-is-visible-in-tree" names="class_node3d_method_is_visible_in_tree"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible_in_tree</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-is-visible-in-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该节点位于 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 中，并且其 <reference internal="True" refid="class-node3d-property-visible"><inline classes="std std-ref">visible</inline></reference> 属性为 <literal>true</literal>，并且其所有上层节点也均可见，则返回 <literal>true</literal>。如果任何上层节点被隐藏，则该节点在场景树中将不可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-look-at"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-look-at" names="class_node3d_method_look_at"><abbreviation explanation="无返回值。">void</abbreviation> <strong>look_at</strong>(target: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, up: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0), use_model_front: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-node3d-method-look-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>旋转该节点，让局部向前的轴（-Z，<reference internal="True" refuri="class_vector3#class-vector3-constant-forward"><inline classes="std std-ref">Vector3.FORWARD</inline></reference>）指向 <literal>target</literal> 的位置。</paragraph>
            <paragraph>局部向上的轴（+Y）在保持与局部向前的轴垂直的前提下，尽可能接近 <literal>up</literal> 向量。最终的变换是正交变换，并且保留了原有缩放。非统一缩放可能无法正常工作。</paragraph>
            <paragraph><literal>target</literal> 位置不能和该节点的位置相同，<literal>up</literal> 向量不能为零，从节点的位置到 <literal>target</literal> 的向量不能与 <literal>up</literal> 平行。</paragraph>
            <paragraph>操作发生在全局空间，也就是说该节点必须位于场景树中。</paragraph>
            <paragraph>如果 <literal>use_model_front</literal> 为 <literal>true</literal>，则会将 +Z 轴（资产正面）作为向前的轴（此时 +X 为左），指向 <literal>target</literal> 的位置。默认情况下会将 -Z 轴（相机前方）作为向前的轴（此时 +X 为右）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-look-at-from-position"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-look-at-from-position" names="class_node3d_method_look_at_from_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>look_at_from_position</strong>(position: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, target: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, up: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> = Vector3(0, 1, 0), use_model_front: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-node3d-method-look-at-from-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将节点移动到指定的 <literal>position</literal>，然后根据 <reference internal="True" refid="class-node3d-method-look-at"><inline classes="std std-ref">look_at</inline></reference> 旋转该节点以指向 <literal>target</literal>。操作发生在全局空间中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-orthonormalize"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-orthonormalize" names="class_node3d_method_orthonormalize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>orthonormalize</strong>() <reference internal="True" refid="class-node3d-method-orthonormalize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过在该节点的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 上执行 Gram-Schmidt 正交归一化，重置该节点的变换（如缩放、倾斜和锥度），以保留其旋转和平移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-rotate"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-rotate" names="class_node3d_method_rotate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rotate</strong>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-node3d-method-rotate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>围绕轴（单位 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>）旋转局部变换，指定角度（弧度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-rotate-object-local"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-rotate-object-local" names="class_node3d_method_rotate_object_local"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rotate_object_local</strong>(axis: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>, angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-node3d-method-rotate-object-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>围绕轴（单位 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>）旋转局部变换，指定角度（弧度）。旋转轴是在物体的本地坐标系中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-rotate-x"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-rotate-x" names="class_node3d_method_rotate_x"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rotate_x</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-node3d-method-rotate-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>围绕 X 轴旋转局部变换，旋转角度为弧度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-rotate-y"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-rotate-y" names="class_node3d_method_rotate_y"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rotate_y</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-node3d-method-rotate-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>围绕 Y 轴旋转局部变换，旋转角度为弧度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-rotate-z"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-rotate-z" names="class_node3d_method_rotate_z"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rotate_z</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-node3d-method-rotate-z"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>围绕 Z 轴旋转局部变换，旋转角度为弧度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-scale-object-local"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-scale-object-local" names="class_node3d_method_scale_object_local"><abbreviation explanation="无返回值。">void</abbreviation> <strong>scale_object_local</strong>(scale: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-node3d-method-scale-object-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在物体局部坐标系中，通过给定的 3D 比例因子来缩放局部变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-set-disable-scale"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-set-disable-scale" names="class_node3d_method_set_disable_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_disable_scale</strong>(disable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-node3d-method-set-disable-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置节点是否使用 <literal>(1, 1, 1)</literal> 的比例或其本地变换比例。对本地变换比例的改变会被保留下来。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-set-identity"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-set-identity" names="class_node3d_method_set_identity"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_identity</strong>() <reference internal="True" refid="class-node3d-method-set-identity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重置此节点的所有变换（将其 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 设置为单位矩阵）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-set-ignore-transform-notification"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-set-ignore-transform-notification" names="class_node3d_method_set_ignore_transform_notification"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ignore_transform_notification</strong>(enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-node3d-method-set-ignore-transform-notification"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该节点是否忽略其转换（全局或局部）改变的通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-set-notify-local-transform"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-set-notify-local-transform" names="class_node3d_method_set_notify_local_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_notify_local_transform</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-node3d-method-set-notify-local-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该节点是否通知其局部变换的更改。<strong>Node3D</strong> 默认不会传播此属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-set-notify-transform"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-set-notify-transform" names="class_node3d_method_set_notify_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_notify_transform</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-node3d-method-set-notify-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该节点是否通知其全局和局部变换的更改。<strong>Node3D</strong> 默认不会传播此属性，除非位于编辑器上下文中，并且存在有效的小工具。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-set-subgizmo-selection"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-set-subgizmo-selection" names="class_node3d_method_set_subgizmo_selection"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_subgizmo_selection</strong>(gizmo: <reference internal="True" refuri="class_node3dgizmo#class-node3dgizmo"><inline classes="std std-ref">Node3DGizmo</inline></reference>, id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-node3d-method-set-subgizmo-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在编辑器中为该节点设置子小工具选区。</paragraph>
            <paragraph><strong>注意：</strong>小工具对象通常是 <reference internal="True" refuri="class_editornode3dgizmo#class-editornode3dgizmo"><inline classes="std std-ref">EditorNode3DGizmo</inline></reference> 的一个实例，但参数类型保持通用以避免在 <strong>Node3D</strong> 中创建对编辑器类的依赖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-show"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-show" names="class_node3d_method_show"><abbreviation explanation="无返回值。">void</abbreviation> <strong>show</strong>() <reference internal="True" refid="class-node3d-method-show"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>启用此节点的呈现。将 <reference internal="True" refid="class-node3d-property-visible"><inline classes="std std-ref">visible</inline></reference> 更改为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-to-global"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-to-global" names="class_node3d_method_to_global"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>to_global</strong>(local_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-to-global"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>local_point</literal> 从这个节点的局部空间转换为世界空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-to-local"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-to-local" names="class_node3d_method_to_local"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>to_local</strong>(global_point: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-node3d-method-to-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>global_point</literal> 从世界空间转换到这个节点的局部空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-translate"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-translate" names="class_node3d_method_translate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>translate</strong>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-node3d-method-translate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过给定的偏移量 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 更改该节点的位置。</paragraph>
            <paragraph>请注意，平移 <literal>offset</literal> 受节点缩放的影响，因此如果按例如 <literal>(10, 1, 1)</literal> 的比例缩放，那么偏移 <literal>(2, 0, 0)</literal> 的平移，实际上会在 X 坐标上增加 20（<literal>2 * 10</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-translate-object-local"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-translate-object-local" names="class_node3d_method_translate_object_local"><abbreviation explanation="无返回值。">void</abbreviation> <strong>translate_object_local</strong>(offset: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-node3d-method-translate-object-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过给定的局部空间偏移量 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 改变该节点的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-node3d-method-update-gizmos"></target>
            <paragraph classes="classref-method" ids="class-node3d-method-update-gizmos" names="class_node3d_method_update_gizmos"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update_gizmos</strong>() <reference internal="True" refid="class-node3d-method-update-gizmos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更新附加于该节点的所有 <strong>Node3D</strong> 小工具。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
