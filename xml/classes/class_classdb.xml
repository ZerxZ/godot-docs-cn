<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_classdb.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ClassDB.xml.</comment>
    <target refid="class-classdb"></target>
    <section ids="classdb class-classdb" names="classdb class_classdb">
        <title>ClassDB</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>类信息的存储库。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>提供对为每个可用类存储的元数据的访问。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="249"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-can-instantiate"><inline classes="std std-ref">can_instantiate</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-exists"><inline classes="std std-ref">class_exists</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-enum-constants"><inline classes="std std-ref">class_get_enum_constants</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, enum: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-enum-list"><inline classes="std std-ref">class_get_enum_list</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-integer-constant"><inline classes="std std-ref">class_get_integer_constant</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-integer-constant-enum"><inline classes="std std-ref">class_get_integer_constant_enum</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-integer-constant-list"><inline classes="std std-ref">class_get_integer_constant_list</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-method-argument-count"><inline classes="std std-ref">class_get_method_argument_count</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-method-list"><inline classes="std std-ref">class_get_method_list</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-property"><inline classes="std std-ref">class_get_property</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-property-default-value"><inline classes="std std-ref">class_get_property_default_value</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-property-list"><inline classes="std std-ref">class_get_property_list</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-signal"><inline classes="std std-ref">class_get_signal</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, signal: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-get-signal-list"><inline classes="std std-ref">class_get_signal_list</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-has-enum"><inline classes="std std-ref">class_has_enum</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-has-integer-constant"><inline classes="std std-ref">class_has_integer_constant</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-has-method"><inline classes="std std-ref">class_has_method</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-has-signal"><inline classes="std std-ref">class_has_signal</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, signal: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-class-set-property"><inline classes="std std-ref">class_set_property</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-get-class-list"><inline classes="std std-ref">get_class_list</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-get-inheriters-from-class"><inline classes="std std-ref">get_inheriters_from_class</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-get-parent-class"><inline classes="std std-ref">get_parent_class</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-instantiate"><inline classes="std std-ref">instantiate</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-is-class-enabled"><inline classes="std std-ref">is_class_enabled</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-is-class-enum-bitfield"><inline classes="std std-ref">is_class_enum_bitfield</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, enum: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-classdb-method-is-parent-class"><inline classes="std std-ref">is_parent_class</inline></reference>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, inherits: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-classdb-method-can-instantiate"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-can-instantiate" names="class_classdb_method_can_instantiate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_instantiate</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-can-instantiate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果可以从指定的 <literal>class</literal> 实例化对象，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-exists"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-exists" names="class_classdb_method_class_exists"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>class_exists</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-exists"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定的类 <literal>class</literal> 是否可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-enum-constants"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-enum-constants" names="class_classdb_method_class_get_enum_constants"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>class_get_enum_constants</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, enum: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-enum-constants"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含 <literal>class</literal> 或其祖先的 <literal>enum</literal> 中的所有键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-enum-list"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-enum-list" names="class_classdb_method_class_get_enum_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>class_get_enum_list</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-enum-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个数组，其中包含 <literal>class</literal> 或其祖先的所有枚举。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-integer-constant"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-integer-constant" names="class_classdb_method_class_get_integer_constant"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>class_get_integer_constant</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-integer-constant"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>class</literal> 或其父级的整数常量值 <literal>name</literal>。如果找不到该常量，则总是返回0。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-integer-constant-enum"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-integer-constant-enum" names="class_classdb_method_class_get_integer_constant_enum"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>class_get_integer_constant_enum</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-integer-constant-enum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>class</literal> 或其祖先的整数常量 <literal>name</literal> 所属的枚举。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-integer-constant-list"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-integer-constant-list" names="class_classdb_method_class_get_integer_constant_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>class_get_integer_constant_list</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-integer-constant-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含 <literal>class</literal> 或其父级全部整数常量的名称数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-method-argument-count"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-method-argument-count" names="class_classdb_method_class_get_method_argument_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>class_get_method_argument_count</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-method-argument-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>no_inheritance</literal> 为 <literal>false</literal>，则返回 <literal>class</literal> 或其祖先的方法 <literal>method</literal> 的参数数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-method-list"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-method-list" names="class_classdb_method_class_get_method_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>class_get_method_list</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-method-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>no_inheritance</literal> 为 <literal>false</literal>，则返回包含 <literal>class</literal> 或其祖先的所有方法的数组。数组的每个元素都是一个 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，包含以下键：<literal>args</literal>、<literal>default_args</literal>、<literal>flags</literal>、<literal>id</literal>、<literal>name</literal>、<literal>return: (class_name, hint, hint_string, name, type, usage)</literal>。</paragraph>
            <paragraph><strong>注意：</strong>在导出的发布版本中，调试信息不可用，因此返回的字典将仅包含方法名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-property"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-property" names="class_classdb_method_class_get_property"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>class_get_property</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>object</literal> 或其父级 <literal>property</literal> 的属性值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-property-default-value"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-property-default-value" names="class_classdb_method_class_get_property_default_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>class_get_property_default_value</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-property-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>class</literal> 或其祖先类的 <literal>property</literal> 的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-property-list"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-property-list" names="class_classdb_method_class_get_property_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>class_get_property_list</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-property-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>no_inheritance</literal> 为 <literal>false</literal>，则返回包含 <literal>class</literal> 或其祖先的所有属性的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-signal"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-signal" names="class_classdb_method_class_get_signal"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>class_get_signal</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, signal: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-signal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>class</literal> 或其祖先的 <literal>signal</literal> 数据。返回值是具有以下键的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>：<literal>args</literal>、<literal>default_args</literal>、<literal>flags</literal>、<literal>id</literal>、<literal>name</literal>、<literal>return: (class_name, hint, hint_string, name, type, usage)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-get-signal-list"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-get-signal-list" names="class_classdb_method_class_get_signal_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>class_get_signal_list</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-get-signal-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>no_inheritance</literal> 为 <literal>false</literal>，则返回包含 <literal>class</literal> 或其祖先的所有信号的数组。数组的每个元素都是一个如 <reference internal="True" refid="class-classdb-method-class-get-signal"><inline classes="std std-ref">class_get_signal</inline></reference> 中所述的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-has-enum"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-has-enum" names="class_classdb_method_class_has_enum"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>class_has_enum</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-has-enum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回类 <literal>class</literal> 或其祖类是否有名为 <literal>name</literal> 的枚举。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-has-integer-constant"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-has-integer-constant" names="class_classdb_method_class_has_integer_constant"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>class_has_integer_constant</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-has-integer-constant"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回类 <literal>class</literal> 或其祖类是否有名为 <literal>name</literal> 的整数常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-has-method"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-has-method" names="class_classdb_method_class_has_method"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>class_has_method</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-has-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回类 <literal>class</literal> 是否有名为 <literal>method</literal> 的方法（如果 <literal>no_inheritance</literal> 为 <literal>false</literal> 则还会检查其祖类）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-has-signal"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-has-signal" names="class_classdb_method_class_has_signal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>class_has_signal</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, signal: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-has-signal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回类 <literal>class</literal> 或其祖类是否有名为 <literal>signal</literal> 的信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-class-set-property"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-class-set-property" names="class_classdb_method_class_set_property"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>class_set_property</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-class-set-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将对象 <literal>object</literal> 的 <literal>property</literal> 属性值设置为 <literal>value</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-get-class-list"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-get-class-list" names="class_classdb_method_get_class_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_class_list</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-get-class-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有可用类的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-get-inheriters-from-class"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-get-inheriters-from-class" names="class_classdb_method_get_inheriters_from_class"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_inheriters_from_class</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-get-inheriters-from-class"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有直接或间接继承自 <literal>class</literal> 的类的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-get-parent-class"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-get-parent-class" names="class_classdb_method_get_parent_class"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_parent_class</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-get-parent-class"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>class</literal> 的父类。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-instantiate"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-instantiate" names="class_classdb_method_instantiate"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>instantiate</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-instantiate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建 <literal>class</literal> 的实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-is-class-enabled"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-is-class-enabled" names="class_classdb_method_is_class_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_class_enabled</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-is-class-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个 <literal>class</literal> 是否已启用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-is-class-enum-bitfield"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-is-class-enum-bitfield" names="class_classdb_method_is_class_enum_bitfield"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_class_enum_bitfield</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, enum: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, no_inheritance: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-is-class-enum-bitfield"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns whether <literal>class</literal> (or its ancestor classes if <literal>no_inheritance</literal> is <literal>false</literal>) has an enum called <literal>enum</literal> that is a bitfield.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-classdb-method-is-parent-class"></target>
            <paragraph classes="classref-method" ids="class-classdb-method-is-parent-class" names="class_classdb_method_is_parent_class"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_parent_class</strong>(class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, inherits: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-classdb-method-is-parent-class"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>inherits</literal> 是否为 <literal>class</literal> 的祖先。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
