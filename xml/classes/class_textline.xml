<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textline.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextLine.xml.</comment>
    <target refid="class-textline"></target>
    <section ids="textline class-textline" names="textline class_textline">
        <title>TextLine</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>存放一行文本。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>基于 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 的抽象，用于处理单行文本。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="77"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-alignment"><inline classes="std std-ref">alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-direction"><inline classes="std std-ref">direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-ellipsis-char"><inline classes="std std-ref">ellipsis_char</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"…"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-flags"><inline classes="std std-ref">flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-orientation"><inline classes="std std-ref">orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-preserve-control"><inline classes="std std-ref">preserve_control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-preserve-invalid"><inline classes="std std-ref">preserve_invalid</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-text-overrun-behavior"><inline classes="std std-ref">text_overrun_behavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-property-width"><inline classes="std std-ref">width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="292"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-add-object"><inline classes="std std-ref">add_object</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-add-string"><inline classes="std std-ref">add_string</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-draw"><inline classes="std std-ref">draw</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-draw-outline"><inline classes="std std-ref">draw_outline</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-line-ascent"><inline classes="std std-ref">get_line_ascent</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-line-descent"><inline classes="std std-ref">get_line_descent</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-line-underline-position"><inline classes="std std-ref">get_line_underline_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-line-underline-thickness"><inline classes="std std-ref">get_line_underline_thickness</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-line-width"><inline classes="std std-ref">get_line_width</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-object-rect"><inline classes="std std-ref">get_object_rect</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-objects"><inline classes="std std-ref">get_objects</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-rid"><inline classes="std std-ref">get_rid</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-get-size"><inline classes="std std-ref">get_size</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-hit-test"><inline classes="std std-ref">hit_test</inline></reference>(coords: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-resize-object"><inline classes="std std-ref">resize_object</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-set-bidi-override"><inline classes="std std-ref">set_bidi_override</inline></reference>(override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textline-method-tab-align"><inline classes="std std-ref">tab_align</inline></reference>(tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-textline-property-alignment"></target>
            <paragraph classes="classref-property" ids="class-textline-property-alignment" names="class_textline_property_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>alignment</strong> = <literal>0</literal> <reference internal="True" refid="class-textline-property-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_horizontal_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_horizontal_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置行内的文本对齐方式，始终按照该行为横向的情况设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-direction"></target>
            <paragraph classes="classref-property" ids="class-textline-property-direction" names="class_textline_property_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>direction</strong> = <literal>0</literal> <reference internal="True" refid="class-textline-property-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_direction</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>get_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-ellipsis-char"></target>
            <paragraph classes="classref-property" ids="class-textline-property-ellipsis-char" names="class_textline_property_ellipsis_char"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>ellipsis_char</strong> = <literal>"…"</literal> <reference internal="True" refid="class-textline-property-ellipsis-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ellipsis_char</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_ellipsis_char</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于文本裁剪的省略字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-flags"></target>
            <paragraph classes="classref-property" ids="class-textline-property-flags" names="class_textline_property_flags"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>flags</strong> = <literal>3</literal> <reference internal="True" refid="class-textline-property-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flags</strong>(value: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>get_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>行对齐规则。详细请参阅 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-orientation"></target>
            <paragraph classes="classref-property" ids="class-textline-property-orientation" names="class_textline_property_orientation"><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>orientation</strong> = <literal>0</literal> <reference internal="True" refid="class-textline-property-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_orientation</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>get_orientation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本朝向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-preserve-control"></target>
            <paragraph classes="classref-property" ids="class-textline-property-preserve-control" names="class_textline_property_preserve_control"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>preserve_control</strong> = <literal>false</literal> <reference internal="True" refid="class-textline-property-preserve-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_preserve_control</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_preserve_control</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>true</literal>，则将在文本中显示控制字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-preserve-invalid"></target>
            <paragraph classes="classref-property" ids="class-textline-property-preserve-invalid" names="class_textline_property_preserve_invalid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>preserve_invalid</strong> = <literal>true</literal> <reference internal="True" refid="class-textline-property-preserve-invalid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_preserve_invalid</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_preserve_invalid</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>true</literal>，则将在文本中显示无效字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-text-overrun-behavior"></target>
            <paragraph classes="classref-property" ids="class-textline-property-text-overrun-behavior" names="class_textline_property_text_overrun_behavior"><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>text_overrun_behavior</strong> = <literal>3</literal> <reference internal="True" refid="class-textline-property-text-overrun-behavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_overrun_behavior</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>get_text_overrun_behavior</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置文本超出文本行的设置宽度时的裁剪行为。有关所有模式的描述，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-property-width"></target>
            <paragraph classes="classref-property" ids="class-textline-property-width" names="class_textline_property_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>width</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-textline-property-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_width</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本行宽。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textline-method-add-object"></target>
            <paragraph classes="classref-method" ids="class-textline-method-add-object" names="class_textline_method_add_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>add_object</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-textline-method-add-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向文本缓冲中添加内联对象，<literal>key</literal> 必须唯一。在文本中，对象使用 <literal>length</literal> 个对象替换字符表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-add-string"></target>
            <paragraph classes="classref-method" ids="class-textline-method-add-string" names="class_textline_method_add_string"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>add_string</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <reference internal="True" refid="class-textline-method-add-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加文本区间以及用于绘制的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-clear"></target>
            <paragraph classes="classref-method" ids="class-textline-method-clear" names="class_textline_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-textline-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除文本行（移除文本和内联对象）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-draw"></target>
            <paragraph classes="classref-method" ids="class-textline-method-draw" names="class_textline_method_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制文本，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-draw-outline"></target>
            <paragraph classes="classref-method" ids="class-textline-method-draw-outline" names="class_textline_method_draw_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_outline</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-draw-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制文本，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-line-ascent"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-line-ascent" names="class_textline_method_get_line_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_ascent</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-line-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该文本的升部（水平排版时为基线上方的像素数，垂直排版时为基线左侧的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-line-descent"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-line-descent" names="class_textline_method_get_line_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_descent</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-line-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该文本的降部（水平排版时为基线下方的像素数，垂直排版时为基线右侧的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-line-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-line-underline-position" names="class_textline_method_get_line_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_underline_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-line-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-line-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-line-underline-thickness" names="class_textline_method_get_line_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_underline_thickness</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-line-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回下划线的粗细度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-line-width"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-line-width" names="class_textline_method_get_line_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_width</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-line-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本的宽度（对于水平排版）或高度（对于垂直排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-object-rect"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-object-rect" names="class_textline_method_get_object_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_object_rect</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-object-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内联对象的边界矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-objects"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-objects" names="class_textline_method_get_objects"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_objects</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-objects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内联对象的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-rid"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-rid" names="class_textline_method_get_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_rid</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TextServer 缓冲区 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-get-size"></target>
            <paragraph classes="classref-method" ids="class-textline-method-get-size" names="class_textline_method_get_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_size</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本边界框的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-hit-test"></target>
            <paragraph classes="classref-method" ids="class-textline-method-hit-test" names="class_textline_method_hit_test"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>hit_test</strong>(coords: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textline-method-hit-test"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基线处指定像素偏移处的文本光标的偏移量。该函数始终返回一个有效位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-resize-object"></target>
            <paragraph classes="classref-method" ids="class-textline-method-resize-object" names="class_textline_method_resize_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>resize_object</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-textline-method-resize-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置嵌入对象的新大小和对齐方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-set-bidi-override"></target>
            <paragraph classes="classref-method" ids="class-textline-method-set-bidi-override" names="class_textline_method_set_bidi_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bidi_override</strong>(override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-textline-method-set-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖用于结构化文本的 BiDi。</paragraph>
            <paragraph>覆盖范围应覆盖完整的源文本而没有重叠。BiDi 算法将分别被用于每个范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textline-method-tab-align"></target>
            <paragraph classes="classref-method" ids="class-textline-method-tab-align" names="class_textline_method_tab_align"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tab_align</strong>(tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <reference internal="True" refid="class-textline-method-tab-align"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文本与给定的制表位对齐。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
