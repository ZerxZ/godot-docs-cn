<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_transform2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Transform2D.xml.</comment>
    <target refid="class-transform2d"></target>
    <section ids="transform2d class-transform2d" names="transform2d class_transform2d">
        <title>Transform2D</title>
        <paragraph>代表 2D 变换的 2×3 矩阵。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于 2D 线性变换的 2×3 矩阵（2 行 3 列），可以表示平移、旋转、缩放等变换，由三个 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 值组成：<reference internal="True" refid="class-transform2d-property-x"><inline classes="std std-ref">x</inline></reference>、<reference internal="True" refid="class-transform2d-property-y"><inline classes="std std-ref">y</inline></reference>、<reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference>。</paragraph>
            <paragraph>通用介绍见教程<reference internal="True" refuri="../tutorials/math/matrices_and_transforms"><inline classes="doc">《矩阵与变换》</inline></reference>。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/index"><inline classes="doc">数学文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/matrices_and_transforms"><inline classes="doc">矩阵与变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="矩阵变换演示" refuri="https://godotengine.org/asset-library/asset/2787">矩阵变换演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2.5D 游戏演示" refuri="https://godotengine.org/asset-library/asset/2783">2.5D 游戏演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-property-x"><inline classes="std std-ref">x</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(1, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-property-y"><inline classes="std std-ref">y</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 1)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="222"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-constructor-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-constructor-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>(from: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-constructor-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>(rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-constructor-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>(rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, skew: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-constructor-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>(x_axis: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, y_axis: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, origin: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="165"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-affine-inverse"><inline classes="std std-ref">affine_inverse</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-basis-xform"><inline classes="std std-ref">basis_xform</inline></reference>(v: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-basis-xform-inv"><inline classes="std std-ref">basis_xform_inv</inline></reference>(v: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-determinant"><inline classes="std std-ref">determinant</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-get-origin"><inline classes="std std-ref">get_origin</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-get-rotation"><inline classes="std std-ref">get_rotation</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-get-scale"><inline classes="std std-ref">get_scale</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-get-skew"><inline classes="std std-ref">get_skew</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-interpolate-with"><inline classes="std std-ref">interpolate_with</inline></reference>(xform: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-inverse"><inline classes="std std-ref">inverse</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-is-conformal"><inline classes="std std-ref">is_conformal</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>(xform: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-looking-at"><inline classes="std std-ref">looking_at</inline></reference>(target: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-orthonormalized"><inline classes="std std-ref">orthonormalized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-rotated"><inline classes="std std-ref">rotated</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-rotated-local"><inline classes="std std-ref">rotated_local</inline></reference>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-scaled"><inline classes="std std-ref">scaled</inline></reference>(scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-scaled-local"><inline classes="std std-ref">scaled_local</inline></reference>(scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-translated"><inline classes="std std-ref">translated</inline></reference>(offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-method-translated-local"><inline classes="std std-ref">translated_local</inline></reference>(offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="137"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-neq-transform2d"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-mul-packedvector2array"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-mul-rect2"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-mul-transform2d"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-mul-vector2"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-div-float"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-div-int"><inline classes="std std-ref">operator /</inline></reference>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-eq-transform2d"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-transform2d-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-transform2d-constant-identity"></target>
            <paragraph classes="classref-constant" ids="class-transform2d-constant-identity" names="class_transform2d_constant_identity"><strong>IDENTITY</strong> = <literal>Transform2D(1, 0, 0, 1, 0, 0)</literal> <reference internal="True" refid="class-transform2d-constant-identity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>没有应用平移、旋转、缩放的恒等 <strong>Transform2D</strong>。当应用于其他数据结构时，<reference internal="True" refid="class-transform2d-constant-identity"><inline classes="std std-ref">IDENTITY</inline></reference> 不执行变换。</paragraph>
            <target refid="class-transform2d-constant-flip-x"></target>
            <paragraph classes="classref-constant" ids="class-transform2d-constant-flip-x" names="class_transform2d_constant_flip_x"><strong>FLIP_X</strong> = <literal>Transform2D(-1, 0, 0, 1, 0, 0)</literal> <reference internal="True" refid="class-transform2d-constant-flip-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将沿 X 轴翻转的 <strong>Transform2D</strong>。</paragraph>
            <target refid="class-transform2d-constant-flip-y"></target>
            <paragraph classes="classref-constant" ids="class-transform2d-constant-flip-y" names="class_transform2d_constant_flip_y"><strong>FLIP_Y</strong> = <literal>Transform2D(1, 0, 0, -1, 0, 0)</literal> <reference internal="True" refid="class-transform2d-constant-flip-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将沿 Y 轴翻转的 <strong>Transform2D</strong>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-transform2d-property-origin"></target>
            <paragraph classes="classref-property" ids="class-transform2d-property-origin" names="class_transform2d_property_origin"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>origin</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>原点向量（2 号列，即第 3 列）。相当于使用 <literal>2</literal> 进行数组索引。原点向量代表平移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-property-x"></target>
            <paragraph classes="classref-property" ids="class-transform2d-property-x" names="class_transform2d_property_x"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>x</strong> = <literal>Vector2(1, 0)</literal> <reference internal="True" refid="class-transform2d-property-x"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>基矩阵的 X 向量（第 0 列）。相当于数组索引 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-property-y"></target>
            <paragraph classes="classref-property" ids="class-transform2d-property-y" names="class_transform2d_property_y"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>y</strong> = <literal>Vector2(0, 1)</literal> <reference internal="True" refid="class-transform2d-property-y"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>基矩阵的 Y 向量（第 1 列）。相当于数组索引 <literal>1</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-transform2d-constructor-transform2d"></target>
            <paragraph classes="classref-constructor" ids="class-transform2d-constructor-transform2d" names="class_transform2d_constructor_transform2d"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>Transform2D</strong>() <reference internal="True" refid="class-transform2d-constructor-transform2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造默认初始化为 <reference internal="True" refid="class-transform2d-constant-identity"><inline classes="std std-ref">IDENTITY</inline></reference> 的 <strong>Transform2D</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>Transform2D</strong>(from: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
            <paragraph>构造给定 <strong>Transform2D</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>Transform2D</strong>(rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
            <paragraph>从给定的角度（单位为弧度）和位置构造变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>Transform2D</strong>(rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, skew: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
            <paragraph>从给定的角度（单位为弧度）、缩放、偏斜（单位为弧度）和位置构造变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>Transform2D</strong>(x_axis: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, y_axis: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, origin: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
            <paragraph>从表示 <reference internal="True" refid="class-transform2d-property-x"><inline classes="std std-ref">x</inline></reference>、<reference internal="True" refid="class-transform2d-property-y"><inline classes="std std-ref">y</inline></reference>、<reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference> 的 3 个 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>（三个列向量）构建变换。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="方法说明">
            <title>方法说明</title>
            <target refid="class-transform2d-method-affine-inverse"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-affine-inverse" names="class_transform2d_method_affine_inverse"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>affine_inverse</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-affine-inverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>假设该基可逆（必须具有非零行列式），返回该变换的逆。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-basis-xform"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-basis-xform" names="class_transform2d_method_basis_xform"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>basis_xform</strong>(v: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-basis-xform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回经过基矩阵变换（相乘）的向量。</paragraph>
            <paragraph>该方法不考虑平移（<reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-basis-xform-inv"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-basis-xform-inv" names="class_transform2d_method_basis_xform_inv"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>basis_xform_inv</strong>(v: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-basis-xform-inv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个由逆基矩阵变换（乘以）的向量，假设该基是正交的（即旋转/反射可以，缩放/倾斜不行）。</paragraph>
            <paragraph>该方法不考虑翻译（<reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量）。</paragraph>
            <paragraph><literal>transform.basis_xform_inv(vector)</literal> 性当于 <literal>transform.inverse().basis_xform(vector)</literal>。请参阅 <reference internal="True" refid="class-transform2d-method-inverse"><inline classes="std std-ref">inverse</inline></reference>。</paragraph>
            <paragraph>对于非正交变换（例如缩放），可以使用 <literal>transform.affine_inverse().basis_xform(vector)</literal> 代替。请参阅 <reference internal="True" refid="class-transform2d-method-affine-inverse"><inline classes="std std-ref">affine_inverse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-determinant"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-determinant" names="class_transform2d_method_determinant"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>determinant</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-determinant"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基矩阵的行列式。如果基是均匀缩放的，则它的行列式是缩放系数的平方。</paragraph>
            <paragraph>行列式为负意味着基发生了翻转，因此缩放中有一个分量是负的。行列式为零意味着基不可逆，通常认为是无效的基。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-get-origin"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-get-origin" names="class_transform2d_method_get_origin"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_origin</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-get-origin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的原点（平移）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-get-rotation"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-get-rotation" names="class_transform2d_method_get_rotation"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_rotation</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-get-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的旋转（单位为弧度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-get-scale"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-get-scale" names="class_transform2d_method_get_scale"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scale</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-get-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-get-skew"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-get-skew" names="class_transform2d_method_get_skew"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_skew</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-get-skew"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的偏斜（单位为弧度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-interpolate-with"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-interpolate-with" names="class_transform2d_method_interpolate_with"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>interpolate_with</strong>(xform: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>, weight: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-interpolate-with"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回将该变换与其他变换使用给定权重 <literal>weight</literal> 进行插值的结果（权重范围为 0.0 到 1.0）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-inverse"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-inverse" names="class_transform2d_method_inverse"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>inverse</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-inverse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回变换的逆，假设该变换的基是正交的（即旋转/反射可以，缩放/倾斜不行）。使用 <reference internal="True" refid="class-transform2d-method-affine-inverse"><inline classes="std std-ref">affine_inverse</inline></reference> 进行非正交变换（例如缩放）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-is-conformal"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-is-conformal" names="class_transform2d_method_is_conformal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_conformal</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-is-conformal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该变换的基是共形的，则返回 <literal>true</literal>，这意味着它保留角度和距离比率，并且只能由旋转和均一缩放组成。如果该变换的基具有不均一的缩放或剪切/倾斜，则返回 <literal>false</literal>。这可被用于验证该变换是否失真，这对于物理和其他用例很重要。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-is-equal-approx" names="class_transform2d_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong>(xform: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-is-equal-approx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果通过在每个分量上运行 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-equal-approx"><inline classes="std std-ref">@GlobalScope.is_equal_approx</inline></reference>，该变换和 <literal>xform</literal> 近似相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-is-finite" names="class_transform2d_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-is-finite"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该变换是有限的，则返回 <literal>true</literal>，判断方法是在每个分量上调用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-finite"><inline classes="std std-ref">@GlobalScope.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-looking-at"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-looking-at" names="class_transform2d_method_looking_at"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>looking_at</strong>(target: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(0, 0)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-looking-at"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个旋转后的变换副本，使旋转后的 X 轴指向 <literal>target</literal> 位置。</paragraph>
            <paragraph>操作发生在全局空间中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-orthonormalized"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-orthonormalized" names="class_transform2d_method_orthonormalized"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>orthonormalized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-orthonormalized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回使用正交基（90 度）以及归一化的轴向量（缩放为 1 或 -1）的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-rotated"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-rotated" names="class_transform2d_method_rotated"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>rotated</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-rotated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的副本，该副本进行了夹角为 <literal>angle</literal> 的旋转操作（单位为弧度）。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的旋转变换 <literal>R</literal> 从左侧相乘一致，即 <literal>R * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-rotated-local"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-rotated-local" names="class_transform2d_method_rotated_local"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>rotated_local</strong>(angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-rotated-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的副本，该副本进行了夹角为 <literal>angle</literal> 的旋转操作（单位为弧度）。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的旋转变换 <literal>R</literal> 从右侧相乘一致，即 <literal>X * R</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-scaled"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-scaled" names="class_transform2d_method_scaled"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>scaled</strong>(scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-scaled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的副本，该副本进行了系数为 <literal>scale</literal> 的缩放操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的缩放变换 <literal>S</literal> 从左侧相乘一致，即 <literal>S * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-scaled-local"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-scaled-local" names="class_transform2d_method_scaled_local"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>scaled_local</strong>(scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-scaled-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的副本，该副本进行了系数为 <literal>scale</literal> 的缩放操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的缩放变换 <literal>S</literal> 从右侧相乘一致，即 <literal>X * S</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-translated"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-translated" names="class_transform2d_method_translated"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>translated</strong>(offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-translated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的副本，该副本进行了偏移量为 <literal>offset</literal> 的平移操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的平移变换 <literal>T</literal> 从左侧相乘一致，即 <literal>T * X</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在全局/父级坐标系中的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-method-translated-local"></target>
            <paragraph classes="classref-method" ids="class-transform2d-method-translated-local" names="class_transform2d_method_translated_local"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>translated_local</strong>(offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-transform2d-method-translated-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该变换的副本，该副本进行了偏移量为 <literal>offset</literal> 的平移操作。</paragraph>
            <paragraph>这个方法的结果和让 <literal>X</literal> 变换与相应的平移变换 <literal>T</literal> 从右侧相乘一致，即 <literal>X * T</literal>，但进行了优化。</paragraph>
            <paragraph>可以视作在局部坐标系中的变换。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id11" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-transform2d-operator-neq-transform2d"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-neq-transform2d" names="class_transform2d_operator_neq_transform2d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-transform2d-operator-neq-transform2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果变换不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-transform2d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-mul-packedvector2array"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-mul-packedvector2array" names="class_transform2d_operator_mul_packedvector2array"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>) <reference internal="True" refid="class-transform2d-operator-mul-packedvector2array"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <strong>Transform2D</strong> 矩阵将该 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 数组中的每个元素进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-mul-rect2"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-mul-rect2" names="class_transform2d_operator_mul_rect2"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-transform2d-operator-mul-rect2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <strong>Transform2D</strong> 矩阵将该 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-mul-transform2d"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-mul-transform2d" names="class_transform2d_operator_mul_transform2d"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-transform2d-operator-mul-transform2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过将这两个变换矩阵相乘来组合它们。这具有通过第一个变换（父项）来变换第二个变换（子项）的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-mul-vector2"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-mul-vector2" names="class_transform2d_operator_mul_vector2"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-transform2d-operator-mul-vector2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <strong>Transform2D</strong> 矩阵将该 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 进行变换（相乘）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-mul-float" names="class_transform2d_operator_mul_float"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-transform2d-operator-mul-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该运算符将 <strong>Transform2D</strong> 的所有分量相乘，包括 <reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量，从而对其进行统一缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-mul-int" names="class_transform2d_operator_mul_int"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>operator *</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-transform2d-operator-mul-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该运算符将 <strong>Transform2D</strong> 的所有分量相乘，包括 <reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量，从而对其进行统一缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-div-float" names="class_transform2d_operator_div_float"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-transform2d-operator-div-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该运算符除以 <strong>Transform2D</strong> 的所有分量，包括 <reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量，这会对其进行均匀反向缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-div-int" names="class_transform2d_operator_div_int"><reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>operator /</strong>(right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-transform2d-operator-div-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该运算符除以 <strong>Transform2D</strong> 的所有分量，包括 <reference internal="True" refid="class-transform2d-property-origin"><inline classes="std std-ref">origin</inline></reference> 向量，这会对其进行均匀反向缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-eq-transform2d"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-eq-transform2d" names="class_transform2d_operator_eq_transform2d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-transform2d-operator-eq-transform2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果变换完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-transform2d-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-transform2d-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-transform2d-operator-idx-int" names="class_transform2d_operator_idx_int"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator []</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-transform2d-operator-idx-int"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用变换分量的索引访问变换的分量。<literal>t[0]</literal> 相当于 <literal>t.x</literal>，<literal>t[1]</literal> 相当于 <literal>t.y</literal>，<literal>t[2]</literal> 相当于 <literal>t.origin</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
