<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodeframe.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeFrame.xml.</comment>
    <target refid="class-visualshadernodeframe"></target>
    <section ids="visualshadernodeframe class-visualshadernodeframe" names="visualshadernodeframe class_visualshadernodeframe">
        <title>VisualShaderNodeFrame</title>
        <paragraph><strong>ÁªßÊâøÔºö</strong> <reference internal="True" refuri="class_visualshadernoderesizablebase#class-visualshadernoderesizablebase"><inline classes="std std-ref">VisualShaderNodeResizableBase</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>Ê¥æÁîüÔºö</strong> <reference internal="True" refuri="class_visualshadernodecomment#class-visualshadernodecomment"><inline classes="std std-ref">VisualShaderNodeComment</inline></reference></paragraph>
        <paragraph>A frame other visual shader nodes can be attached to for better organization.</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="ÊèèËø∞">
            <title>ÊèèËø∞</title>
            <paragraph>A rectangular frame that can be used to group visual shader nodes together to improve organization.</paragraph>
            <paragraph>Nodes attached to the frame will move with it when it is dragged and it can automatically resize to enclose all attached nodes.</paragraph>
            <paragraph>Its title, description and color can be customized.</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="Â±ûÊÄß">
            <title>Â±ûÊÄß</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="84"></colspec>
                    <colspec colwidth="32"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-attached-nodes"><inline classes="std std-ref">attached_nodes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedInt32Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-autoshrink"><inline classes="std std-ref">autoshrink</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-tint-color"><inline classes="std std-ref">tint_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.3, 0.3, 0.3, 0.75)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-tint-color-enabled"><inline classes="std std-ref">tint_color_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-title"><inline classes="std std-ref">title</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"Title"</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="ÊñπÊ≥ï">
            <title>ÊñπÊ≥ï</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="122"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-method-add-attached-node"><inline classes="std std-ref">add_attached_node</inline></reference>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-method-remove-attached-node"><inline classes="std std-ref">remove_attached_node</inline></reference>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="Â±ûÊÄßËØ¥Êòé">
            <title>Â±ûÊÄßËØ¥Êòé</title>
            <target refid="class-visualshadernodeframe-property-attached-nodes"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-attached-nodes" names="class_visualshadernodeframe_property_attached_nodes"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>attached_nodes</strong> = <literal>PackedInt32Array()</literal> <reference internal="True" refid="class-visualshadernodeframe-property-attached-nodes"><inline classes="std std-ref">üîó</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation> <strong>set_attached_nodes</strong>(value: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_attached_nodes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The list of nodes attached to the frame.</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-autoshrink"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-autoshrink" names="class_visualshadernodeframe_property_autoshrink"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>autoshrink</strong> = <literal>true</literal> <reference internal="True" refid="class-visualshadernodeframe-property-autoshrink"><inline classes="std std-ref">üîó</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation> <strong>set_autoshrink_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_autoshrink_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, the frame will automatically resize to enclose all attached nodes.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-tint-color"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-tint-color" names="class_visualshadernodeframe_property_tint_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>tint_color</strong> = <literal>Color(0.3, 0.3, 0.3, 0.75)</literal> <reference internal="True" refid="class-visualshadernodeframe-property-tint-color"><inline classes="std std-ref">üîó</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation> <strong>set_tint_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_tint_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Ê°ÜÊû∂Âú® <reference internal="True" refid="class-visualshadernodeframe-property-tint-color-enabled"><inline classes="std std-ref">tint_color_enabled</inline></reference> ‰∏∫ <literal>true</literal> Êó∂ÁöÑÈ¢úËâ≤„ÄÇ</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-tint-color-enabled"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-tint-color-enabled" names="class_visualshadernodeframe_property_tint_color_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>tint_color_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-visualshadernodeframe-property-tint-color-enabled"><inline classes="std std-ref">üîó</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation> <strong>set_tint_color_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_tint_color_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, the frame will be tinted with the color specified in <reference internal="True" refid="class-visualshadernodeframe-property-tint-color"><inline classes="std std-ref">tint_color</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-title"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-title" names="class_visualshadernodeframe_property_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>title</strong> = <literal>"Title"</literal> <reference internal="True" refid="class-visualshadernodeframe-property-title"><inline classes="std std-ref">üîó</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation> <strong>set_title</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_title</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The title of the node.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="ÊñπÊ≥ïËØ¥Êòé">
            <title>ÊñπÊ≥ïËØ¥Êòé</title>
            <target refid="class-visualshadernodeframe-method-add-attached-node"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodeframe-method-add-attached-node" names="class_visualshadernodeframe_method_add_attached_node"><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation> <strong>add_attached_node</strong>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-visualshadernodeframe-method-add-attached-node"><inline classes="std std-ref">üîó</inline></reference></paragraph>
            <paragraph>Adds a node to the list of nodes attached to the frame. Should not be called directly, use the <reference internal="True" refuri="class_visualshader#class-visualshader-method-attach-node-to-frame"><inline classes="std std-ref">VisualShader.attach_node_to_frame</inline></reference> method instead.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-method-remove-attached-node"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodeframe-method-remove-attached-node" names="class_visualshadernodeframe_method_remove_attached_node"><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation> <strong>remove_attached_node</strong>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-visualshadernodeframe-method-remove-attached-node"><inline classes="std std-ref">üîó</inline></reference></paragraph>
            <paragraph>Removes a node from the list of nodes attached to the frame. Should not be called directly, use the <reference internal="True" refuri="class_visualshader#class-visualshader-method-detach-node-from-frame"><inline classes="std std-ref">VisualShader.detach_node_from_frame</inline></reference> method instead.</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="Êú¨ÊñπÊ≥ïÈÄöÂ∏∏ÈúÄË¶ÅÁî®Êà∑Ë¶ÜÁõñÊâçËÉΩÁîüÊïà„ÄÇ">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="Êú¨ÊñπÊ≥ïÊ≤°ÊúâÂâØ‰ΩúÁî®Ôºå‰∏ç‰ºö‰øÆÊîπËØ•ÂÆû‰æãÁöÑ‰ªª‰ΩïÊàêÂëòÂèòÈáè„ÄÇ">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="Êú¨ÊñπÊ≥ïÈô§‰∫ÜËÉΩÊé•ÂèóÂú®Ê≠§Â§ÑÊèèËø∞ÁöÑÂèÇÊï∞Â§ñÔºåËøòËÉΩÂ§üÁªßÁª≠Êé•Âèó‰ªªÊÑèÊï∞ÈáèÁöÑÂèÇÊï∞„ÄÇ">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="Êú¨ÊñπÊ≥ïÁî®‰∫éÊûÑÈÄ†Êüê‰∏™Á±ªÂûã„ÄÇ">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="Ë∞ÉÁî®Êú¨ÊñπÊ≥ïÊó†ÈúÄÂÆû‰æãÔºåÂèØÁõ¥Êé•‰ΩøÁî®Á±ªÂêçËøõË°åË∞ÉÁî®„ÄÇ">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="Êú¨ÊñπÊ≥ïÊèèËø∞ÁöÑÊòØ‰ΩøÁî®Êú¨Á±ªÂûã‰Ωú‰∏∫Â∑¶Êìç‰ΩúÊï∞ÁöÑÊúâÊïàÊìç‰ΩúÁ¨¶„ÄÇ">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="Ëøô‰∏™ÂÄºÊòØÁî±‰∏ãÂàóÊ†áÂøóÊûÑÊàêÁöÑ‰ΩçÊé©Á†ÅÊï¥Êï∞„ÄÇ">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="Êó†ËøîÂõûÂÄº„ÄÇ">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
