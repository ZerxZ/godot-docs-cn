<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodeframe.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeFrame.xml.</comment>
    <target refid="class-visualshadernodeframe"></target>
    <section ids="visualshadernodeframe class-visualshadernodeframe" names="visualshadernodeframe class_visualshadernodeframe">
        <title>VisualShaderNodeFrame</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernoderesizablebase#class-visualshadernoderesizablebase"><inline classes="std std-ref">VisualShaderNodeResizableBase</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_visualshadernodecomment#class-visualshadernodecomment"><inline classes="std std-ref">VisualShaderNodeComment</inline></reference></paragraph>
        <paragraph>能够附加其他可视化着色器节点的框架，方便组织节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>一种矩形框架，能够将可视化着色器节点进行分组，方便组织。</paragraph>
            <paragraph>拖动框架时，附加到框架的节点会跟随框架移动；框架会自动调整大小，包围所有附加的节点。</paragraph>
            <paragraph>可以自定义标题、描述以及颜色。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="84"></colspec>
                    <colspec colwidth="32"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-attached-nodes"><inline classes="std std-ref">attached_nodes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedInt32Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-autoshrink"><inline classes="std std-ref">autoshrink</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-tint-color"><inline classes="std std-ref">tint_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.3, 0.3, 0.3, 0.75)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-tint-color-enabled"><inline classes="std std-ref">tint_color_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-property-title"><inline classes="std std-ref">title</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"Title"</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="122"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-method-add-attached-node"><inline classes="std std-ref">add_attached_node</inline></reference>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodeframe-method-remove-attached-node"><inline classes="std std-ref">remove_attached_node</inline></reference>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernodeframe-property-attached-nodes"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-attached-nodes" names="class_visualshadernodeframe_property_attached_nodes"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>attached_nodes</strong> = <literal>PackedInt32Array()</literal> <reference internal="True" refid="class-visualshadernodeframe-property-attached-nodes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_attached_nodes</strong>(value: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_attached_nodes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>附加到框的节点列表。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-autoshrink"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-autoshrink" names="class_visualshadernodeframe_property_autoshrink"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>autoshrink</strong> = <literal>true</literal> <reference internal="True" refid="class-visualshadernodeframe-property-autoshrink"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autoshrink_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_autoshrink_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该框将自动调整大小以包含所有附加的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-tint-color"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-tint-color" names="class_visualshadernodeframe_property_tint_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>tint_color</strong> = <literal>Color(0.3, 0.3, 0.3, 0.75)</literal> <reference internal="True" refid="class-visualshadernodeframe-property-tint-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tint_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_tint_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>框架在 <reference internal="True" refid="class-visualshadernodeframe-property-tint-color-enabled"><inline classes="std std-ref">tint_color_enabled</inline></reference> 为 <literal>true</literal> 时的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-tint-color-enabled"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-tint-color-enabled" names="class_visualshadernodeframe_property_tint_color_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>tint_color_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-visualshadernodeframe-property-tint-color-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tint_color_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_tint_color_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该框将使用 <reference internal="True" refid="class-visualshadernodeframe-property-tint-color"><inline classes="std std-ref">tint_color</inline></reference> 中指定的颜色进行着色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-property-title"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodeframe-property-title" names="class_visualshadernodeframe_property_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>title</strong> = <literal>"Title"</literal> <reference internal="True" refid="class-visualshadernodeframe-property-title"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_title</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_title</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>节点的标题。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-visualshadernodeframe-method-add-attached-node"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodeframe-method-add-attached-node" names="class_visualshadernodeframe_method_add_attached_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_attached_node</strong>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-visualshadernodeframe-method-add-attached-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将节点添加到框架附加节点列表中。不应该直接调用，请改用 <reference internal="True" refuri="class_visualshader#class-visualshader-method-attach-node-to-frame"><inline classes="std std-ref">VisualShader.attach_node_to_frame</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodeframe-method-remove-attached-node"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodeframe-method-remove-attached-node" names="class_visualshadernodeframe_method_remove_attached_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_attached_node</strong>(node: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-visualshadernodeframe-method-remove-attached-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将节点从框架附加节点列表中移除。不应该直接调用，请改用 <reference internal="True" refuri="class_visualshader#class-visualshader-method-detach-node-from-frame"><inline classes="std std-ref">VisualShader.detach_node_from_frame</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
