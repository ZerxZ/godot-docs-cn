<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_openxrextensionwrapperextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/modules/openxr/doc_classes/OpenXRExtensionWrapperExtension.xml.</comment>
    <target refid="class-openxrextensionwrapperextension"></target>
    <section ids="openxrextensionwrapperextension class-openxrextensionwrapperextension" names="openxrextensionwrapperextension class_openxrextensionwrapperextension">
        <title>OpenXRExtensionWrapperExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>允许客户端使用 GDExtension 实现 OpenXR 扩展。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>OpenXRExtensionWrapperExtension</strong> 允许客户端使用 GDExtension 实现 OpenXR 扩展。扩展应该使用 <reference internal="True" refid="class-openxrextensionwrapperextension-method-register-extension-wrapper"><inline classes="std std-ref">register_extension_wrapper</inline></reference> 注册。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="199"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-get-requested-extensions"><inline classes="std std-ref">_get_requested_extensions</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-before-instance-created"><inline classes="std std-ref">_on_before_instance_created</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-event-polled"><inline classes="std std-ref">_on_event_polled</inline></reference> <strong>(</strong> const void* event <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-instance-created"><inline classes="std std-ref">_on_instance_created</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-instance-destroyed"><inline classes="std std-ref">_on_instance_destroyed</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-pre-render"><inline classes="std std-ref">_on_pre_render</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-process"><inline classes="std std-ref">_on_process</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-register-metadata"><inline classes="std std-ref">_on_register_metadata</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-session-created"><inline classes="std std-ref">_on_session_created</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> session <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-session-destroyed"><inline classes="std std-ref">_on_session_destroyed</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-exiting"><inline classes="std std-ref">_on_state_exiting</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-focused"><inline classes="std std-ref">_on_state_focused</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-idle"><inline classes="std std-ref">_on_state_idle</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-loss-pending"><inline classes="std std-ref">_on_state_loss_pending</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-ready"><inline classes="std std-ref">_on_state_ready</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-stopping"><inline classes="std std-ref">_on_state_stopping</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-synchronized"><inline classes="std std-ref">_on_state_synchronized</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-on-state-visible"><inline classes="std std-ref">_on_state_visible</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-set-instance-create-info-and-get-next-pointer"><inline classes="std std-ref">_set_instance_create_info_and_get_next_pointer</inline></reference> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-set-session-create-and-get-next-pointer"><inline classes="std std-ref">_set_session_create_and_get_next_pointer</inline></reference> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-set-swapchain-create-info-and-get-next-pointer"><inline classes="std std-ref">_set_swapchain_create_info_and_get_next_pointer</inline></reference> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-private-method-set-system-properties-and-get-next-pointer"><inline classes="std std-ref">_set_system_properties_and_get_next_pointer</inline></reference> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_openxrapiextension#class-openxrapiextension"><inline classes="std std-ref">OpenXRAPIExtension</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-method-get-openxr-api"><inline classes="std std-ref">get_openxr_api</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-openxrextensionwrapperextension-method-register-extension-wrapper"><inline classes="std std-ref">register_extension_wrapper</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-openxrextensionwrapperextension-private-method-get-requested-extensions"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-get-requested-extensions" names="class_openxrextensionwrapperextension_private_method__get_requested_extensions"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_requested_extensions</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>返回与该扩展相关的 OpenXR 扩展的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。该 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 应包含扩展名，映射到 <literal>bool *</literal> 转换为整数：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>如果 <literal>bool *</literal> 是 <literal>nullptr</literal>，则该扩展是强制性的。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果 <literal>bool *</literal> 指向布尔值，则在启用扩展的情况下，该布尔值将更新为 <literal>true</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-before-instance-created"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-before-instance-created" names="class_openxrextensionwrapperextension_private_method__on_before_instance_created">void <strong>_on_before_instance_created</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在创建 OpenXR 实例之前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-event-polled"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-event-polled" names="class_openxrextensionwrapperextension_private_method__on_event_polled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_on_event_polled</strong> <strong>(</strong> const void* event <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当有 OpenXR 事件需要处理时调用。实现时，如果事件已被处理，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-instance-created"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-instance-created" names="class_openxrextensionwrapperextension_private_method__on_instance_created">void <strong>_on_instance_created</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instance <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在创建 OpenXR 实例后立即调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-instance-destroyed"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-instance-destroyed" names="class_openxrextensionwrapperextension_private_method__on_instance_destroyed">void <strong>_on_instance_destroyed</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在 OpenXR 实例被销毁之前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-pre-render"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-pre-render" names="class_openxrextensionwrapperextension_private_method__on_pre_render">void <strong>_on_pre_render</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在 XR 视口开始其渲染步进之前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-process"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-process" names="class_openxrextensionwrapperextension_private_method__on_process">void <strong>_on_process</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>作为 OpenXR 进程处理的一部分调用。这发生在主循环的一般和物理处理步进之前。在该步进中，控制器数据被查询并可供游戏逻辑使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-register-metadata"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-register-metadata" names="class_openxrextensionwrapperextension_private_method__on_register_metadata">void <strong>_on_register_metadata</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>允许扩展注册额外的控制器元数据。即使 OpenXR API 未被构造，也会调用该函数，因为元数据需要可供编辑器使用。</paragraph>
            <paragraph>扩展还应该提供元数据，无论主机系统是否支持它们。控制器数据用于为可以访问相关硬件的用户设置动作映射。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-session-created"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-session-created" names="class_openxrextensionwrapperextension_private_method__on_session_created">void <strong>_on_session_created</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> session <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在创建 OpenXR 会话后立即调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-session-destroyed"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-session-destroyed" names="class_openxrextensionwrapperextension_private_method__on_session_destroyed">void <strong>_on_session_destroyed</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在 OpenXR 会话被销毁之前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-exiting"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-exiting" names="class_openxrextensionwrapperextension_private_method__on_state_exiting">void <strong>_on_state_exiting</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为退出时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-focused"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-focused" names="class_openxrextensionwrapperextension_private_method__on_state_focused">void <strong>_on_state_focused</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为聚焦时调用。该状态是游戏运行时的活动状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-idle"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-idle" names="class_openxrextensionwrapperextension_private_method__on_state_idle">void <strong>_on_state_idle</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为空闲时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-loss-pending"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-loss-pending" names="class_openxrextensionwrapperextension_private_method__on_state_loss_pending">void <strong>_on_state_loss_pending</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为丢失挂起时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-ready"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-ready" names="class_openxrextensionwrapperextension_private_method__on_state_ready">void <strong>_on_state_ready</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为就绪时调用。这意味着 OpenXR 已准备好建立会话。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-stopping"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-stopping" names="class_openxrextensionwrapperextension_private_method__on_state_stopping">void <strong>_on_state_stopping</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为停止时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-synchronized"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-synchronized" names="class_openxrextensionwrapperextension_private_method__on_state_synchronized">void <strong>_on_state_synchronized</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为同步时调用。当应用程序失去焦点时，OpenXR 也会返回到该状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-on-state-visible"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-on-state-visible" names="class_openxrextensionwrapperextension_private_method__on_state_visible">void <strong>_on_state_visible</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>当 OpenXR 会话状态被更改为可见时调用。这意味着 OpenXR 现在已准备好接收帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-set-instance-create-info-and-get-next-pointer"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-set-instance-create-info-and-get-next-pointer" names="class_openxrextensionwrapperextension_private_method__set_instance_create_info_and_get_next_pointer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_set_instance_create_info_and_get_next_pointer</strong> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>创建 OpenXR 实例时添加额外的数据结构。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-set-session-create-and-get-next-pointer"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-set-session-create-and-get-next-pointer" names="class_openxrextensionwrapperextension_private_method__set_session_create_and_get_next_pointer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_set_session_create_and_get_next_pointer</strong> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>创建 OpenXR 会话时添加额外的数据结构。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-set-swapchain-create-info-and-get-next-pointer"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-set-swapchain-create-info-and-get-next-pointer" names="class_openxrextensionwrapperextension_private_method__set_swapchain_create_info_and_get_next_pointer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_set_swapchain_create_info_and_get_next_pointer</strong> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>创建 OpenXR 交换链时添加额外的数据结构。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-private-method-set-system-properties-and-get-next-pointer"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-private-method-set-system-properties-and-get-next-pointer" names="class_openxrextensionwrapperextension_private_method__set_system_properties_and_get_next_pointer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_set_system_properties_and_get_next_pointer</strong> <strong>(</strong> void* next_pointer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在询问 OpenXR 系统功能时添加额外的数据结构。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-method-get-openxr-api"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-method-get-openxr-api" names="class_openxrextensionwrapperextension_method_get_openxr_api"><reference internal="True" refuri="class_openxrapiextension#class-openxrapiextension"><inline classes="std std-ref">OpenXRAPIExtension</inline></reference> <strong>get_openxr_api</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回创建的 <reference internal="True" refuri="class_openxrapiextension#class-openxrapiextension"><inline classes="std std-ref">OpenXRAPIExtension</inline></reference>，可用于访问 OpenXR API。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-openxrextensionwrapperextension-method-register-extension-wrapper"></target>
            <paragraph classes="classref-method" ids="class-openxrextensionwrapperextension-method-register-extension-wrapper" names="class_openxrextensionwrapperextension_method_register_extension_wrapper">void <strong>register_extension_wrapper</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>注册扩展程序。这应该发生在核心模块初始化级别。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
