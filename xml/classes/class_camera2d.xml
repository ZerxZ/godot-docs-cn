<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_camera2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Camera2D.xml.</comment>
    <target refid="class-camera2d"></target>
    <section ids="camera2d class-camera2d" names="camera2d class_camera2d">
        <title>Camera2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>2D 场景的相机节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于 2D 场景的相机节点。它强制屏幕（当前层）跟随该节点滚动。与手动改变基于 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 节点的坐标相比，这使得对可滚动场景进行编程更加容易和快捷。</paragraph>
            <paragraph>相机会在最近的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>（在上层树时）节点中注册自己。每个视口只能激活一个相机。如果树上没有可用的视口，相机将在全局视口中注册。</paragraph>
            <paragraph>这个节点旨在成为简单的辅助工具，让事情便捷，但可能需要更多的功能来改变相机的工作方式。要制作自定义相机节点，则从 <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> 继承，并通过设置 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 中的 <reference internal="True" refuri="class_viewport#class-viewport-property-canvas-transform"><inline classes="std std-ref">Viewport.canvas_transform</inline></reference> 来改变画布的变换（你可以通过使用 <reference internal="True" refuri="class_node#class-node-method-get-viewport"><inline classes="std std-ref">Node.get_viewport</inline></reference> 获得当前的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>）。</paragraph>
            <paragraph>请注意，<strong>Camera2D</strong> 节点的 <literal>position</literal> 并不代表屏幕的实际位置，这可能会因应用的平滑或限制而有所不同。可以使用 <reference internal="True" refid="class-camera2d-method-get-screen-center-position"><inline classes="std std-ref">get_screen_center_position</inline></reference> 获取真实位置。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="2D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2727">2D 平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 等轴演示" refuri="https://godotengine.org/asset-library/asset/2718">2D 等轴演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="71"></colspec>
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">AnchorMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-anchor-mode"><inline classes="std std-ref">anchor_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-custom-viewport"><inline classes="std std-ref">custom_viewport</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-bottom-margin"><inline classes="std std-ref">drag_bottom_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-horizontal-enabled"><inline classes="std std-ref">drag_horizontal_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-horizontal-offset"><inline classes="std std-ref">drag_horizontal_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-left-margin"><inline classes="std std-ref">drag_left_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-right-margin"><inline classes="std std-ref">drag_right_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-top-margin"><inline classes="std std-ref">drag_top_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-vertical-enabled"><inline classes="std std-ref">drag_vertical_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-drag-vertical-offset"><inline classes="std std-ref">drag_vertical_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-editor-draw-drag-margin"><inline classes="std std-ref">editor_draw_drag_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-editor-draw-limits"><inline classes="std std-ref">editor_draw_limits</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-editor-draw-screen"><inline classes="std std-ref">editor_draw_screen</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-enabled"><inline classes="std std-ref">enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-ignore-rotation"><inline classes="std std-ref">ignore_rotation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-limit-bottom"><inline classes="std std-ref">limit_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10000000</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-limit-left"><inline classes="std std-ref">limit_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-10000000</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-limit-right"><inline classes="std std-ref">limit_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10000000</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-limit-smoothed"><inline classes="std std-ref">limit_smoothed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-limit-top"><inline classes="std std-ref">limit_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-10000000</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-position-smoothing-enabled"><inline classes="std std-ref">position_smoothing_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-position-smoothing-speed"><inline classes="std std-ref">position_smoothing_speed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>5.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">Camera2DProcessCallback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-process-callback"><inline classes="std std-ref">process_callback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-rotation-smoothing-enabled"><inline classes="std std-ref">rotation_smoothing_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-rotation-smoothing-speed"><inline classes="std std-ref">rotation_smoothing_speed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>5.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-property-zoom"><inline classes="std std-ref">zoom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(1, 1)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="156"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-align"><inline classes="std std-ref">align</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-force-update-scroll"><inline classes="std std-ref">force_update_scroll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-get-drag-margin"><inline classes="std std-ref">get_drag_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-get-limit"><inline classes="std std-ref">get_limit</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-get-screen-center-position"><inline classes="std std-ref">get_screen_center_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-get-target-position"><inline classes="std std-ref">get_target_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-is-current"><inline classes="std std-ref">is_current</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-make-current"><inline classes="std std-ref">make_current</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-reset-smoothing"><inline classes="std std-ref">reset_smoothing</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-set-drag-margin"><inline classes="std std-ref">set_drag_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, drag_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-camera2d-method-set-limit"><inline classes="std std-ref">set_limit</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, limit: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-camera2d-anchormode"></target>
            <paragraph classes="classref-enumeration" ids="enum-camera2d-anchormode" names="enum_camera2d_anchormode">enum <strong>AnchorMode</strong>: <reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-camera2d-constant-anchor-mode-fixed-top-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera2d-constant-anchor-mode-fixed-top-left" names="class_camera2d_constant_anchor_mode_fixed_top_left"><reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">AnchorMode</inline></reference> <strong>ANCHOR_MODE_FIXED_TOP_LEFT</strong> = <literal>0</literal></paragraph>
            <paragraph>相机的位置是固定的，所以左上角总是在原点。</paragraph>
            <target refid="class-camera2d-constant-anchor-mode-drag-center"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera2d-constant-anchor-mode-drag-center" names="class_camera2d_constant_anchor_mode_drag_center"><reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">AnchorMode</inline></reference> <strong>ANCHOR_MODE_DRAG_CENTER</strong> = <literal>1</literal></paragraph>
            <paragraph>相机的位置要考虑垂直/水平偏移和屏幕尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-camera2d-camera2dprocesscallback"></target>
            <paragraph classes="classref-enumeration" ids="enum-camera2d-camera2dprocesscallback" names="enum_camera2d_camera2dprocesscallback">enum <strong>Camera2DProcessCallback</strong>: <reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-camera2d-constant-camera2d-process-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera2d-constant-camera2d-process-physics" names="class_camera2d_constant_camera2d_process_physics"><reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">Camera2DProcessCallback</inline></reference> <strong>CAMERA2D_PROCESS_PHYSICS</strong> = <literal>0</literal></paragraph>
            <paragraph>相机在物理帧期间更新（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-physics-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS</inline></reference>）。</paragraph>
            <target refid="class-camera2d-constant-camera2d-process-idle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-camera2d-constant-camera2d-process-idle" names="class_camera2d_constant_camera2d_process_idle"><reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">Camera2DProcessCallback</inline></reference> <strong>CAMERA2D_PROCESS_IDLE</strong> = <literal>1</literal></paragraph>
            <paragraph>相机在进程帧期间更新（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PROCESS</inline></reference>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-camera2d-property-anchor-mode"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-anchor-mode" names="class_camera2d_property_anchor_mode"><reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">AnchorMode</inline></reference> <strong>anchor_mode</strong> = <literal>1</literal> <reference internal="True" refid="class-camera2d-property-anchor-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_anchor_mode</strong>(value: <reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">AnchorMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">AnchorMode</inline></reference> <strong>get_anchor_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Camera2D 的锚点。见 <reference internal="True" refid="enum-camera2d-anchormode"><inline classes="std std-ref">AnchorMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-custom-viewport"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-custom-viewport" names="class_camera2d_property_custom_viewport"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>custom_viewport</strong> <reference internal="True" refid="class-camera2d-property-custom-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_viewport</strong>(value: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_custom_viewport</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>连接到 <strong>Camera2D</strong> 的自定义 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 节点。如果为 <literal>null</literal> 或者不是 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>，则使用默认的视口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-bottom-margin"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-bottom-margin" names="class_camera2d_property_drag_bottom_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>drag_bottom_margin</strong> = <literal>0.2</literal> <reference internal="True" refid="class-camera2d-property-drag-bottom-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, drag_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>拖动相机所需的下边距。值为 <literal>1</literal> 时，相机仅在到达屏幕底部边缘时移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-horizontal-enabled"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-horizontal-enabled" names="class_camera2d_property_drag_horizontal_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>drag_horizontal_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-camera2d-property-drag-horizontal-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_horizontal_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drag_horizontal_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，相机仅在到达水平（左或右）拖动边距时移动。如果为 <literal>false</literal>，则相机水平移动时不考虑边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-horizontal-offset"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-horizontal-offset" names="class_camera2d_property_drag_horizontal_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>drag_horizontal_offset</strong> = <literal>0.0</literal> <reference internal="True" refid="class-camera2d-property-drag-horizontal-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_horizontal_offset</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_drag_horizontal_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机在右侧（<literal>-1</literal>）和左侧（<literal>1</literal>）拖动边距之间的相对水平拖动偏移量。</paragraph>
            <paragraph><strong>注意：</strong>用于设置初始水平拖动偏移量；确定当前偏移量；或强制当前偏移量。当 <reference internal="True" refid="class-camera2d-property-drag-horizontal-enabled"><inline classes="std std-ref">drag_horizontal_enabled</inline></reference> 为 <literal>true</literal> 或更改拖动边距时，它不会自动更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-left-margin"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-left-margin" names="class_camera2d_property_drag_left_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>drag_left_margin</strong> = <literal>0.2</literal> <reference internal="True" refid="class-camera2d-property-drag-left-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, drag_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>拖动相机所需的左边距。值为 <literal>1</literal> 时，相机仅在到达屏幕左侧边缘时移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-right-margin"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-right-margin" names="class_camera2d_property_drag_right_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>drag_right_margin</strong> = <literal>0.2</literal> <reference internal="True" refid="class-camera2d-property-drag-right-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, drag_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>拖动相机所需的右边距。值为 <literal>1</literal> 时，相机仅在到达屏幕右侧边缘时移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-top-margin"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-top-margin" names="class_camera2d_property_drag_top_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>drag_top_margin</strong> = <literal>0.2</literal> <reference internal="True" refid="class-camera2d-property-drag-top-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, drag_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>拖动相机所需的上边距。值为 <literal>1</literal> 时，相机仅在到达屏幕顶部边缘时移动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-vertical-enabled"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-vertical-enabled" names="class_camera2d_property_drag_vertical_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>drag_vertical_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-camera2d-property-drag-vertical-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_vertical_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_drag_vertical_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，相机仅在达到垂直（顶部及底部）拖动边距时才移动。如果为 <literal>false</literal>，相机会垂直移动而不管边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-drag-vertical-offset"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-drag-vertical-offset" names="class_camera2d_property_drag_vertical_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>drag_vertical_offset</strong> = <literal>0.0</literal> <reference internal="True" refid="class-camera2d-property-drag-vertical-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_vertical_offset</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_drag_vertical_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机在底部（<literal>-1</literal>）和顶部（<literal>1</literal>）拖动边距之间的相对垂直拖动偏移量。</paragraph>
            <paragraph><strong>注意：</strong>用于设置初始垂直拖动偏移量；确定当前偏移量；或强制当前偏移量。当 <reference internal="True" refid="class-camera2d-property-drag-vertical-enabled"><inline classes="std std-ref">drag_vertical_enabled</inline></reference> 为 <literal>true</literal> 或更改拖动边距时，它不会自动更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-editor-draw-drag-margin"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-editor-draw-drag-margin" names="class_camera2d_property_editor_draw_drag_margin"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>editor_draw_drag_margin</strong> = <literal>false</literal> <reference internal="True" refid="class-camera2d-property-editor-draw-drag-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_margin_drawing_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_margin_drawing_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，在编辑器中绘制相机的拖动边距矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-editor-draw-limits"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-editor-draw-limits" names="class_camera2d_property_editor_draw_limits"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>editor_draw_limits</strong> = <literal>false</literal> <reference internal="True" refid="class-camera2d-property-editor-draw-limits"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_limit_drawing_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_limit_drawing_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，在编辑器中绘制相机的极限矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-editor-draw-screen"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-editor-draw-screen" names="class_camera2d_property_editor_draw_screen"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>editor_draw_screen</strong> = <literal>true</literal> <reference internal="True" refid="class-camera2d-property-editor-draw-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_screen_drawing_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_screen_drawing_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，在编辑器中绘制相机的画面矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-enabled"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-enabled" names="class_camera2d_property_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-camera2d-property-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制该相机是否可以激活。如果为 <literal>true</literal>，当该 <strong>Camera2D</strong> 进入场景树并且当前没有活动的相机时，它将成为主相机（参见 <reference internal="True" refuri="class_viewport#class-viewport-method-get-camera-2d"><inline classes="std std-ref">Viewport.get_camera_2d</inline></reference>）。</paragraph>
            <paragraph>当该相机当前处于活动状态且 <reference internal="True" refid="class-camera2d-property-enabled"><inline classes="std std-ref">enabled</inline></reference> 被设置为 <literal>false</literal> 时，则场景树中下一个启用的 <strong>Camera2D</strong> 将变为活动状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-ignore-rotation"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-ignore-rotation" names="class_camera2d_property_ignore_rotation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>ignore_rotation</strong> = <literal>true</literal> <reference internal="True" refid="class-camera2d-property-ignore-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ignore_rotation</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_ignoring_rotation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal> ，相机的渲染视图不会受到其 <reference internal="True" refuri="class_node2d#class-node2d-property-rotation"><inline classes="std std-ref">Node2D.rotation</inline></reference> 和 <reference internal="True" refuri="class_node2d#class-node2d-property-global-rotation"><inline classes="std std-ref">Node2D.global_rotation</inline></reference> 的影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-limit-bottom"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-limit-bottom" names="class_camera2d_property_limit_bottom"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>limit_bottom</strong> = <literal>10000000</literal> <reference internal="True" refid="class-camera2d-property-limit-bottom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, limit: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>底部滚动极限，单位为像素。相机会在抵达该值时停止移动，但是 <reference internal="True" refid="class-camera2d-property-offset"><inline classes="std std-ref">offset</inline></reference> 可以把视图推过该极限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-limit-left"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-limit-left" names="class_camera2d_property_limit_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>limit_left</strong> = <literal>-10000000</literal> <reference internal="True" refid="class-camera2d-property-limit-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, limit: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>左侧滚动极限，单位为像素。相机会在抵达该值时停止移动，但是 <reference internal="True" refid="class-camera2d-property-offset"><inline classes="std std-ref">offset</inline></reference> 可以把视图推过该极限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-limit-right"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-limit-right" names="class_camera2d_property_limit_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>limit_right</strong> = <literal>10000000</literal> <reference internal="True" refid="class-camera2d-property-limit-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, limit: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>右侧滚动极限，单位为像素。相机会在抵达该值时停止移动，但是 <reference internal="True" refid="class-camera2d-property-offset"><inline classes="std std-ref">offset</inline></reference> 可以把视图推过该极限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-limit-smoothed"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-limit-smoothed" names="class_camera2d_property_limit_smoothed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>limit_smoothed</strong> = <literal>false</literal> <reference internal="True" refid="class-camera2d-property-limit-smoothed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_limit_smoothing_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_limit_smoothing_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，相机会在达到极限时平滑地停止。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-camera2d-property-position-smoothing-enabled"><inline classes="std std-ref">position_smoothing_enabled</inline></reference> 为 <literal>false</literal>，则该属性无效。</paragraph>
            <paragraph><strong>注意：</strong>要立即将相机的位置更新到限制范围内而不进行平滑，即使启用了该设置，也要调用 <reference internal="True" refid="class-camera2d-method-reset-smoothing"><inline classes="std std-ref">reset_smoothing</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-limit-top"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-limit-top" names="class_camera2d_property_limit_top"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>limit_top</strong> = <literal>-10000000</literal> <reference internal="True" refid="class-camera2d-property-limit-top"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, limit: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>顶部滚动极限，单位为像素。相机会在抵达该值时停止移动，但是 <reference internal="True" refid="class-camera2d-property-offset"><inline classes="std std-ref">offset</inline></reference> 可以把视图推过该极限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-offset"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-offset" names="class_camera2d_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-camera2d-property-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机的相对偏移量。用于环顾四周或相机抖动动画。偏移后的相机可以超过 <reference internal="True" refid="class-camera2d-property-limit-top"><inline classes="std std-ref">limit_top</inline></reference>、<reference internal="True" refid="class-camera2d-property-limit-bottom"><inline classes="std std-ref">limit_bottom</inline></reference>、<reference internal="True" refid="class-camera2d-property-limit-left"><inline classes="std std-ref">limit_left</inline></reference> 和 <reference internal="True" refid="class-camera2d-property-limit-right"><inline classes="std std-ref">limit_right</inline></reference> 中定义的限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-position-smoothing-enabled"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-position-smoothing-enabled" names="class_camera2d_property_position_smoothing_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>position_smoothing_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-camera2d-property-position-smoothing-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_position_smoothing_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_position_smoothing_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，相机的视图会以 <reference internal="True" refid="class-camera2d-property-position-smoothing-speed"><inline classes="std std-ref">position_smoothing_speed</inline></reference> 的速度，平滑地移向其目标位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-position-smoothing-speed"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-position-smoothing-speed" names="class_camera2d_property_position_smoothing_speed"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>position_smoothing_speed</strong> = <literal>5.0</literal> <reference internal="True" refid="class-camera2d-property-position-smoothing-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_position_smoothing_speed</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_position_smoothing_speed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当 <reference internal="True" refid="class-camera2d-property-position-smoothing-enabled"><inline classes="std std-ref">position_smoothing_enabled</inline></reference> 为 <literal>true</literal> 时，相机平滑效果的速度，单位为每秒像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-process-callback"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-process-callback" names="class_camera2d_property_process_callback"><reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">Camera2DProcessCallback</inline></reference> <strong>process_callback</strong> = <literal>1</literal> <reference internal="True" refid="class-camera2d-property-process-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_process_callback</strong>(value: <reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">Camera2DProcessCallback</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">Camera2DProcessCallback</inline></reference> <strong>get_process_callback</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该相机的处理回调。见 <reference internal="True" refid="enum-camera2d-camera2dprocesscallback"><inline classes="std std-ref">Camera2DProcessCallback</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-rotation-smoothing-enabled"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-rotation-smoothing-enabled" names="class_camera2d_property_rotation_smoothing_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>rotation_smoothing_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-camera2d-property-rotation-smoothing-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation_smoothing_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_rotation_smoothing_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，相机的视图会通过渐近平滑的方式平滑地旋转，以 <reference internal="True" refid="class-camera2d-property-rotation-smoothing-speed"><inline classes="std std-ref">rotation_smoothing_speed</inline></reference> 的速度与其目标旋转对齐。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-camera2d-property-ignore-rotation"><inline classes="std std-ref">ignore_rotation</inline></reference> 为 <literal>true</literal>，则该属性无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-rotation-smoothing-speed"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-rotation-smoothing-speed" names="class_camera2d_property_rotation_smoothing_speed"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rotation_smoothing_speed</strong> = <literal>5.0</literal> <reference internal="True" refid="class-camera2d-property-rotation-smoothing-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rotation_smoothing_speed</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_rotation_smoothing_speed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当 <reference internal="True" refid="class-camera2d-property-rotation-smoothing-enabled"><inline classes="std std-ref">rotation_smoothing_enabled</inline></reference> 为 <literal>true</literal> 时，相机旋转平滑效果的角度渐近速度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-property-zoom"></target>
            <paragraph classes="classref-property" ids="class-camera2d-property-zoom" names="class_camera2d_property_zoom"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>zoom</strong> = <literal>Vector2(1, 1)</literal> <reference internal="True" refid="class-camera2d-property-zoom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_zoom</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_zoom</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>相机的缩放。 设置为 <literal>Vector(2, 2)</literal> 的缩放值会使通过视口看到的尺寸翻倍。设置为 <literal>Vector(0.5, 0.5)</literal>的缩放值会使会使通过视口看到的尺寸减半。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_fontfile#class-fontfile-property-oversampling"><inline classes="std std-ref">FontFile.oversampling</inline></reference> <emphasis>不会</emphasis>考虑 <strong>Camera2D</strong> 的缩放值。这意味着放大/缩小将导致位图字体和光栅化（非 MSDF）动态字体看起来模糊或像素化，除非字体是<reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference>的一部分从而使其忽略相机缩放。为了确保文本无论如何缩放都保持清晰，你可以通过启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-theme-default-font-multichannel-signed-distance-field"><inline classes="std std-ref">ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field</inline></reference> （仅适用于默认项目字体）来启用 MSDF 字体渲染，或在自定义字体的动态字体导入选项中启用<strong>多通道带符号距离场</strong>。对于系统字体，可以在检查器中启用 <reference internal="True" refuri="class_systemfont#class-systemfont-property-multichannel-signed-distance-field"><inline classes="std std-ref">SystemFont.multichannel_signed_distance_field</inline></reference> 。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-camera2d-method-align"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-align" names="class_camera2d_method_align"><abbreviation explanation="无返回值。">void</abbreviation> <strong>align</strong>() <reference internal="True" refid="class-camera2d-method-align"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将相机与跟踪的节点对齐。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-force-update-scroll"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-force-update-scroll" names="class_camera2d_method_force_update_scroll"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_update_scroll</strong>() <reference internal="True" refid="class-camera2d-method-force-update-scroll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制相机立即更新滚动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-get-drag-margin"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-get-drag-margin" names="class_camera2d_method_get_drag_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera2d-method-get-drag-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的边距。另见 <reference internal="True" refid="class-camera2d-property-drag-bottom-margin"><inline classes="std std-ref">drag_bottom_margin</inline></reference>、<reference internal="True" refid="class-camera2d-property-drag-top-margin"><inline classes="std std-ref">drag_top_margin</inline></reference>、<reference internal="True" refid="class-camera2d-property-drag-left-margin"><inline classes="std std-ref">drag_left_margin</inline></reference> 和 <reference internal="True" refid="class-camera2d-property-drag-right-margin"><inline classes="std std-ref">drag_right_margin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-get-limit"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-get-limit" names="class_camera2d_method_get_limit"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera2d-method-get-limit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的相机极限。另见 <reference internal="True" refid="class-camera2d-property-limit-bottom"><inline classes="std std-ref">limit_bottom</inline></reference>、<reference internal="True" refid="class-camera2d-property-limit-top"><inline classes="std std-ref">limit_top</inline></reference>、<reference internal="True" refid="class-camera2d-property-limit-left"><inline classes="std std-ref">limit_left</inline></reference> 和 <reference internal="True" refid="class-camera2d-property-limit-right"><inline classes="std std-ref">limit_right</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-get-screen-center-position"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-get-screen-center-position" names="class_camera2d_method_get_screen_center_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_screen_center_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera2d-method-get-screen-center-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Camera2D</strong> 视角下的屏幕中心位置，使用全局坐标。</paragraph>
            <paragraph><strong>注意：</strong>相机实际的目标位置可能与此不同。见 <reference internal="True" refid="class-camera2d-method-get-target-position"><inline classes="std std-ref">get_target_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-get-target-position"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-get-target-position" names="class_camera2d_method_get_target_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_target_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera2d-method-get-target-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该相机的目标位置，使用全局坐标。</paragraph>
            <paragraph><strong>注意：</strong>返回值与 <reference internal="True" refuri="class_node2d#class-node2d-property-global-position"><inline classes="std std-ref">Node2D.global_position</inline></reference> 不同，因为会受到拖动属性的影响。如果 <reference internal="True" refid="class-camera2d-property-position-smoothing-enabled"><inline classes="std std-ref">position_smoothing_enabled</inline></reference> 为 <literal>true</literal> ，也不等同于当前位置（见 <reference internal="True" refid="class-camera2d-method-get-screen-center-position"><inline classes="std std-ref">get_screen_center_position</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-is-current"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-is-current" names="class_camera2d_method_is_current"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_current</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-camera2d-method-is-current"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Camera2D</strong> 为活动相机，则返回 <literal>true</literal>（见 <reference internal="True" refuri="class_viewport#class-viewport-method-get-camera-2d"><inline classes="std std-ref">Viewport.get_camera_2d</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-make-current"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-make-current" names="class_camera2d_method_make_current"><abbreviation explanation="无返回值。">void</abbreviation> <strong>make_current</strong>() <reference internal="True" refid="class-camera2d-method-make-current"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制该 <strong>Camera2D</strong> 成为当前的活动相机。<reference internal="True" refid="class-camera2d-property-enabled"><inline classes="std std-ref">enabled</inline></reference> 必须为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-reset-smoothing"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-reset-smoothing" names="class_camera2d_method_reset_smoothing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reset_smoothing</strong>() <reference internal="True" refid="class-camera2d-method-reset-smoothing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将相机的位置立即设置为其当前平滑的目标位置。</paragraph>
            <paragraph>当 <reference internal="True" refid="class-camera2d-property-position-smoothing-enabled"><inline classes="std std-ref">position_smoothing_enabled</inline></reference> 为 <literal>false</literal> 时，本方法无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-set-drag-margin"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-set-drag-margin" names="class_camera2d_method_set_drag_margin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_drag_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, drag_margin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-camera2d-method-set-drag-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的边距。另见 <reference internal="True" refid="class-camera2d-property-drag-bottom-margin"><inline classes="std std-ref">drag_bottom_margin</inline></reference>、<reference internal="True" refid="class-camera2d-property-drag-top-margin"><inline classes="std std-ref">drag_top_margin</inline></reference>、<reference internal="True" refid="class-camera2d-property-drag-left-margin"><inline classes="std std-ref">drag_left_margin</inline></reference> 和 <reference internal="True" refid="class-camera2d-property-drag-right-margin"><inline classes="std std-ref">drag_right_margin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-camera2d-method-set-limit"></target>
            <paragraph classes="classref-method" ids="class-camera2d-method-set-limit" names="class_camera2d_method_set_limit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_limit</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, limit: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-camera2d-method-set-limit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的相机极限。另见 <reference internal="True" refid="class-camera2d-property-limit-bottom"><inline classes="std std-ref">limit_bottom</inline></reference>、<reference internal="True" refid="class-camera2d-property-limit-top"><inline classes="std std-ref">limit_top</inline></reference>、<reference internal="True" refid="class-camera2d-property-limit-left"><inline classes="std std-ref">limit_left</inline></reference> 和 <reference internal="True" refid="class-camera2d-property-limit-right"><inline classes="std std-ref">limit_right</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
