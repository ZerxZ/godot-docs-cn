<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gltfphysicsbody.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/gltf/doc_classes/GLTFPhysicsBody.xml.</comment>
    <target refid="class-gltfphysicsbody"></target>
    <section ids="gltfphysicsbody class-gltfphysicsbody" names="gltfphysicsbody class_gltfphysicsbody">
        <title>GLTFPhysicsBody</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>代表 GLTF 物理体。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>代表物理体作为 <literal>OMI_physics_body</literal> GLTF 数据和 Godot 节点之间的中介，并且它的抽象方式允许在未来添加对不同 GLTF 物理扩展的支持。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="OMI_physics_body GLTF 扩展" refuri="https://github.com/omigroup/gltf-extensions/tree/main/extensions/2.0/OMI_physics_body">OMI_physics_body GLTF 扩展</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="80"></colspec>
                    <colspec colwidth="38"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-angular-velocity"><inline classes="std std-ref">angular_velocity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-body-type"><inline classes="std std-ref">body_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"rigid"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-center-of-mass"><inline classes="std std-ref">center_of_mass</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-inertia-diagonal"><inline classes="std std-ref">inertia_diagonal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-inertia-orientation"><inline classes="std std-ref">inertia_orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Quaternion(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-inertia-tensor"><inline classes="std std-ref">inertia_tensor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Basis(0, 0, 0, 0, 0, 0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-linear-velocity"><inline classes="std std-ref">linear_velocity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-property-mass"><inline classes="std std-ref">mass</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="136"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody"><inline classes="std std-ref">GLTFPhysicsBody</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-method-from-dictionary"><inline classes="std std-ref">from_dictionary</inline></reference>(dictionary: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody"><inline classes="std std-ref">GLTFPhysicsBody</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-method-from-node"><inline classes="std std-ref">from_node</inline></reference>(body_node: <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-method-to-dictionary"><inline classes="std std-ref">to_dictionary</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsbody-method-to-node"><inline classes="std std-ref">to_node</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-gltfphysicsbody-property-angular-velocity"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-angular-velocity" names="class_gltfphysicsbody_property_angular_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>angular_velocity</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-gltfphysicsbody-property-angular-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_angular_velocity</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_angular_velocity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物理体的角速度，单位为弧度每秒。仅在物体类型为“rigid”或“vehicle”时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-property-body-type"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-body-type" names="class_gltfphysicsbody_property_body_type"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>body_type</strong> = <literal>"rigid"</literal> <reference internal="True" refid="class-gltfphysicsbody-property-body-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_body_type</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_body_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物体的类型。导入时，控制 Godot 应该生成哪种类型的 <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference> 节点。有效值有 “static”、“animatable”、“character”、“rigid”、“vehicle”、“trigger”。导出时，这将被压缩为 “static”、“kinematic” 或 “dynamic” 运动类型之一，或为 “trigger” 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-property-center-of-mass"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-center-of-mass" names="class_gltfphysicsbody_property_center_of_mass"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>center_of_mass</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-gltfphysicsbody-property-center-of-mass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_center_of_mass</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_center_of_mass</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物体的质心，单位为米。使用相对于物体的局部空间。质心默认为物体的原点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-property-inertia-diagonal"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-inertia-diagonal" names="class_gltfphysicsbody_property_inertia_diagonal"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>inertia_diagonal</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-gltfphysicsbody-property-inertia-diagonal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_inertia_diagonal</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_inertia_diagonal</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>物理体的惯性强度，单位为千克平方米（kg⋅m²）。这表示绕主轴的惯性，而该轴为惯性张量矩阵的对角线。仅在物体类型为 “rigid” 或 “vehicle” 时使用。</paragraph>
            <paragraph>当转换为 Godot <reference internal="True" refuri="class_rigidbody3d#class-rigidbody3d"><inline classes="std std-ref">RigidBody3D</inline></reference> 节点时，如果该值为零，则会自动计算惯性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-property-inertia-orientation"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-inertia-orientation" names="class_gltfphysicsbody_property_inertia_orientation"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>inertia_orientation</strong> = <literal>Quaternion(0, 0, 0, 1)</literal> <reference internal="True" refid="class-gltfphysicsbody-property-inertia-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_inertia_orientation</strong>(value: <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>get_inertia_orientation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>物理体的惯性方向。这定义了惯性主轴相对于对象局部轴的旋转。仅当物体类型为“刚性”或“车辆”且 <reference internal="True" refid="class-gltfphysicsbody-property-inertia-diagonal"><inline classes="std std-ref">inertia_diagonal</inline></reference> 被设置为非零值时才使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-property-inertia-tensor"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-inertia-tensor" names="class_gltfphysicsbody_property_inertia_tensor"><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>inertia_tensor</strong> = <literal>Basis(0, 0, 0, 0, 0, 0, 0, 0, 0)</literal> <reference internal="True" refid="class-gltfphysicsbody-property-inertia-tensor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_inertia_tensor</strong>(value: <reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basis#class-basis"><inline classes="std std-ref">Basis</inline></reference> <strong>get_inertia_tensor</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>已弃用：</strong> 未来版本中可能修改或移除该属性。</paragraph>
            <paragraph>该物理体的惯性张量，单位为千克平方米（kg⋅m²）。仅在物体类型为“rigid”或“vehicle”时使用。</paragraph>
            <paragraph>转换为 Godot <reference internal="True" refuri="class_rigidbody3d#class-rigidbody3d"><inline classes="std std-ref">RigidBody3D</inline></reference> 节点时，如果该值为零，则会自动计算该惯量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-property-linear-velocity"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-linear-velocity" names="class_gltfphysicsbody_property_linear_velocity"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>linear_velocity</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-gltfphysicsbody-property-linear-velocity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_linear_velocity</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_linear_velocity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物理体的线速度，单位为米每秒。仅在物体类型为“rigid”或“vehicle”时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-property-mass"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsbody-property-mass" names="class_gltfphysicsbody_property_mass"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>mass</strong> = <literal>1.0</literal> <reference internal="True" refid="class-gltfphysicsbody-property-mass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mass</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_mass</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该物理体的质量，单位为千克。仅在物体类型为“rigid”或“vehicle”时使用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gltfphysicsbody-method-from-dictionary"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsbody-method-from-dictionary" names="class_gltfphysicsbody_method_from_dictionary"><reference internal="True" refid="class-gltfphysicsbody"><inline classes="std std-ref">GLTFPhysicsBody</inline></reference> <strong>from_dictionary</strong>(dictionary: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-gltfphysicsbody-method-from-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过解析 <literal>OMI_physics_body</literal> GLTF 扩展格式中给定的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，创建新的 GLTFPhysicsBody 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-method-from-node"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsbody-method-from-node" names="class_gltfphysicsbody_method_from_node"><reference internal="True" refid="class-gltfphysicsbody"><inline classes="std std-ref">GLTFPhysicsBody</inline></reference> <strong>from_node</strong>(body_node: <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-gltfphysicsbody-method-from-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从给定的 Godot <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference> 节点新建 GLTFPhysicsBody 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-method-to-dictionary"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsbody-method-to-dictionary" names="class_gltfphysicsbody_method_to_dictionary"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>to_dictionary</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-gltfphysicsbody-method-to-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将这个 GLTFPhysicsBody 实例序列化到 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 中。使用的是 <literal>OMI_physics_body</literal> GLTF 扩展所需要的格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsbody-method-to-node"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsbody-method-to-node" names="class_gltfphysicsbody_method_to_node"><reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference> <strong>to_node</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-gltfphysicsbody-method-to-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将这个 GLTFPhysicsBody 实例转换为 Godot <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference> 节点。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
