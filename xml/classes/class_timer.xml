<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_timer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Timer.xml.</comment>
    <target refid="class-timer"></target>
    <section ids="timer class-timer" names="timer class_timer">
        <title>Timer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>倒数计时器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Timer</strong> 即计时器节点，是一种倒计时器，也是引擎中最简单的处理基于时间的逻辑的方法。计时器在等待 <reference internal="True" refid="class-timer-property-wait-time"><inline classes="std std-ref">wait_time</inline></reference> 结束后就会发出 <reference internal="True" refid="class-timer-signal-timeout"><inline classes="std std-ref">timeout</inline></reference> 信号。</paragraph>
            <paragraph>计时器进入场景树时，可以使用 <reference internal="True" refid="class-timer-method-start"><inline classes="std std-ref">start</inline></reference> 手动启动。如果 <reference internal="True" refid="class-timer-property-autostart"><inline classes="std std-ref">autostart</inline></reference> 为 <literal>true</literal>，计时器节点也会自动启动。</paragraph>
            <paragraph>可以在编辑器中添加并配置计时器节点，无需编写特别多的代码。计时器发出的 <reference internal="True" refid="class-timer-signal-timeout"><inline classes="std std-ref">timeout</inline></reference> 信号可以在编辑器的“节点”面板中连接：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _on_timer_timeout():
    print("是时候表演真正的技术了！")</literal_block>
            <paragraph><strong>注意：</strong>如果只想创建一次性的计时器，不想实例化节点，请使用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-create-timer"><inline classes="std std-ref">SceneTree.create_timer</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>计时器会受到 <reference internal="True" refuri="class_engine#class-engine-property-time-scale"><inline classes="std std-ref">Engine.time_scale</inline></reference> 的影响。时间缩放值越大，计时器结束得越早。计时器的处理频率取决于帧率或 <reference internal="True" refuri="class_engine#class-engine-property-physics-ticks-per-second"><inline classes="std std-ref">Engine.physics_ticks_per_second</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="2D Dodge The Creeps 演示" refuri="https://godotengine.org/asset-library/asset/2712">2D Dodge The Creeps 演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="64"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-property-autostart"><inline classes="std std-ref">autostart</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-property-one-shot"><inline classes="std std-ref">one_shot</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-property-paused"><inline classes="std std-ref">paused</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">TimerProcessCallback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-property-process-callback"><inline classes="std std-ref">process_callback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-property-time-left"><inline classes="std std-ref">time_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-property-wait-time"><inline classes="std std-ref">wait_time</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="89"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-method-is-stopped"><inline classes="std std-ref">is_stopped</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-method-start"><inline classes="std std-ref">start</inline></reference>(time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-timer-method-stop"><inline classes="std std-ref">stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-timer-signal-timeout"></target>
            <paragraph classes="classref-signal" ids="class-timer-signal-timeout" names="class_timer_signal_timeout"><strong>timeout</strong>() <reference internal="True" refid="class-timer-signal-timeout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当计时器计时完成时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-timer-timerprocesscallback"></target>
            <paragraph classes="classref-enumeration" ids="enum-timer-timerprocesscallback" names="enum_timer_timerprocesscallback">enum <strong>TimerProcessCallback</strong>: <reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-timer-constant-timer-process-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-timer-constant-timer-process-physics" names="class_timer_constant_timer_process_physics"><reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">TimerProcessCallback</inline></reference> <strong>TIMER_PROCESS_PHYSICS</strong> = <literal>0</literal></paragraph>
            <paragraph>在物理处理帧中更新计时器（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-physics-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS</inline></reference>）。</paragraph>
            <target refid="class-timer-constant-timer-process-idle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-timer-constant-timer-process-idle" names="class_timer_constant_timer_process_idle"><reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">TimerProcessCallback</inline></reference> <strong>TIMER_PROCESS_IDLE</strong> = <literal>1</literal></paragraph>
            <paragraph>在处理（渲染）帧中更新计时器（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PROCESS</inline></reference>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-timer-property-autostart"></target>
            <paragraph classes="classref-property" ids="class-timer-property-autostart" names="class_timer_property_autostart"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>autostart</strong> = <literal>false</literal> <reference internal="True" refid="class-timer-property-autostart"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autostart</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_autostart</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则计时器将在进入场景树时自动启动。</paragraph>
            <paragraph><strong>注意：</strong>计时器进入场景树后，该属性会自动设置为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-timer-property-one-shot"></target>
            <paragraph classes="classref-property" ids="class-timer-property-one-shot" names="class_timer_property_one_shot"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>one_shot</strong> = <literal>false</literal> <reference internal="True" refid="class-timer-property-one-shot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_one_shot</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_one_shot</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则计时器将在完成时停止。否则默认情况下会自动重新启动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-timer-property-paused"></target>
            <paragraph classes="classref-property" ids="class-timer-property-paused" names="class_timer_property_paused"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>paused</strong> <reference internal="True" refid="class-timer-property-paused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_paused</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_paused</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则计时器处于暂停状态。即便调用了 <reference internal="True" refid="class-timer-method-start"><inline classes="std std-ref">start</inline></reference>，处于暂停状态的计时器也不会进行处理，必须将这个属性设回 <literal>false</literal> 才会继续。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-timer-property-process-callback"></target>
            <paragraph classes="classref-property" ids="class-timer-property-process-callback" names="class_timer_property_process_callback"><reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">TimerProcessCallback</inline></reference> <strong>process_callback</strong> = <literal>1</literal> <reference internal="True" refid="class-timer-property-process-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_timer_process_callback</strong>(value: <reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">TimerProcessCallback</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">TimerProcessCallback</inline></reference> <strong>get_timer_process_callback</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定计时器在主循环的哪个时间点进行更新（见 <reference internal="True" refid="enum-timer-timerprocesscallback"><inline classes="std std-ref">TimerProcessCallback</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-timer-property-time-left"></target>
            <paragraph classes="classref-property" ids="class-timer-property-time-left" names="class_timer_property_time_left"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>time_left</strong> <reference internal="True" refid="class-timer-property-time-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_time_left</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>计时器的剩余时间，单位为秒。如果计时器处于停止状态，则始终为 <literal>0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个属性是只读的，无法进行修改。基于的是 <reference internal="True" refid="class-timer-property-wait-time"><inline classes="std std-ref">wait_time</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-timer-property-wait-time"></target>
            <paragraph classes="classref-property" ids="class-timer-property-wait-time" names="class_timer_property_wait_time"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>wait_time</strong> = <literal>1.0</literal> <reference internal="True" refid="class-timer-property-wait-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_wait_time</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_wait_time</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>计时器完成计时所需的时间，单位为秒。这个属性也可以在每次调用 <reference internal="True" refid="class-timer-method-start"><inline classes="std std-ref">start</inline></reference> 时设置。</paragraph>
            <paragraph><strong>注意：</strong>计时器的处理只能在物理帧或处理帧进行一次（取决于 <reference internal="True" refid="class-timer-property-process-callback"><inline classes="std std-ref">process_callback</inline></reference>）。如果帧率不稳定，则计时完成所需的时间也可能不一致，等待时间小于 <literal>0.05</literal> 秒左右的情况下尤为明显。如果计时器非常短，建议自己编写代码，不要使用 <strong>Timer</strong> 节点。计时器还会受到 <reference internal="True" refuri="class_engine#class-engine-property-time-scale"><inline classes="std std-ref">Engine.time_scale</inline></reference> 的影响。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-timer-method-is-stopped"></target>
            <paragraph classes="classref-method" ids="class-timer-method-is-stopped" names="class_timer_method_is_stopped"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_stopped</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-timer-method-is-stopped"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果定时器处于停止状态或尚未启动，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-timer-method-start"></target>
            <paragraph classes="classref-method" ids="class-timer-method-start" names="class_timer_method_start"><abbreviation explanation="无返回值。">void</abbreviation> <strong>start</strong>(time_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1) <reference internal="True" refid="class-timer-method-start"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果计时器尚未启动，则启动计时器。如果计时器不在场景树中则会失败。如果 <literal>time_sec</literal> 大于 <literal>0</literal>，则会将其用于 <reference internal="True" refid="class-timer-property-wait-time"><inline classes="std std-ref">wait_time</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法不会恢复已暂停的定时器。见 <reference internal="True" refid="class-timer-property-paused"><inline classes="std std-ref">paused</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-timer-method-stop"></target>
            <paragraph classes="classref-method" ids="class-timer-method-stop" names="class_timer_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>() <reference internal="True" refid="class-timer-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止计时器。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
