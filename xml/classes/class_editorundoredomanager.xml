<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorundoredomanager.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorUndoRedoManager.xml.</comment>
    <target refid="class-editorundoredomanager"></target>
    <section ids="editorundoredomanager class-editorundoredomanager" names="editorundoredomanager class_editorundoredomanager">
        <title>EditorUndoRedoManager</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>管理编辑器中打开场景的撤销历史。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EditorUndoRedoManager</strong> 是将 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 对象与编辑场景相关联的管理器。每个场景都有自己的撤销历史，<strong>EditorUndoRedoManager</strong> 能够确保编辑器中执行的每个动作都与正确的场景相关联。与场景无关的动作（对 <reference internal="True" refuri="class_projectsettings#class-projectsettings"><inline classes="std std-ref">ProjectSettings</inline></reference>、外部资源等对象的编辑）使用单独的全局历史。</paragraph>
            <paragraph>用法与 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 基本一致。需要创建并提交动作，然后管理器会自动决定这个动作属于哪个场景。场景是根据该动作中第一个操作所使用的对象来推断的。规则如下：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>如果该对象为 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>，则使用当前编辑的场景；</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果该对象为内置资源，则使用其路径上的场景；</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果该对象为外部资源或任何其他对象，则使用全局历史。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>推断的结果有时并不准确，所以在创建动作时你可以提供自定义的上下文对象。</paragraph>
            <paragraph><strong>EditorUndoRedoManager</strong> 是为 Godot 编辑器插件使用而设计的。你可以使用 <reference internal="True" refuri="class_editorplugin#class-editorplugin-method-get-undo-redo"><inline classes="std std-ref">EditorPlugin.get_undo_redo</inline></reference> 获取。对于非编辑器使用场景或者不需要与编辑器撤销历史记录集成的插件，请改用 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference>。</paragraph>
            <paragraph>管理器的 API 与 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 基本一致，它的文档中有更多示例。主要区别在于 <strong>EditorUndoRedoManager</strong> 的动作使用对象 + 方法名，而不是 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="280"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-add-do-method"><inline classes="std std-ref">add_do_method</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-add-do-property"><inline classes="std std-ref">add_do_property</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-add-do-reference"><inline classes="std std-ref">add_do_reference</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-add-undo-method"><inline classes="std std-ref">add_undo_method</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-add-undo-property"><inline classes="std std-ref">add_undo_property</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-add-undo-reference"><inline classes="std std-ref">add_undo_reference</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-commit-action"><inline classes="std std-ref">commit_action</inline></reference>(execute: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-create-action"><inline classes="std std-ref">create_action</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, merge_mode: <reference internal="True" refuri="class_undoredo#enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference> = 0, custom_context: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> = null, backward_undo_ops: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-force-fixed-history"><inline classes="std std-ref">force_fixed_history</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-get-history-undo-redo"><inline classes="std std-ref">get_history_undo_redo</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-get-object-history-id"><inline classes="std std-ref">get_object_history_id</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorundoredomanager-method-is-committing-action"><inline classes="std std-ref">is_committing_action</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-editorundoredomanager-signal-history-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorundoredomanager-signal-history-changed" names="class_editorundoredomanager_signal_history_changed"><strong>history_changed</strong>() <reference internal="True" refid="class-editorundoredomanager-signal-history-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当任何历史中的动作列表发生变化时发出，无论是当一个动作被提交或一个历史被清除时。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-signal-version-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorundoredomanager-signal-version-changed" names="class_editorundoredomanager_signal_version_changed"><strong>version_changed</strong>() <reference internal="True" refid="class-editorundoredomanager-signal-version-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当任何历史记录的版本因撤消或重做调用而变化时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-editorundoredomanager-specialhistory"></target>
            <paragraph classes="classref-enumeration" ids="enum-editorundoredomanager-specialhistory" names="enum_editorundoredomanager_specialhistory">enum <strong>SpecialHistory</strong>: <reference internal="True" refid="enum-editorundoredomanager-specialhistory"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-editorundoredomanager-constant-global-history"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorundoredomanager-constant-global-history" names="class_editorundoredomanager_constant_global_history"><reference internal="True" refid="enum-editorundoredomanager-specialhistory"><inline classes="std std-ref">SpecialHistory</inline></reference> <strong>GLOBAL_HISTORY</strong> = <literal>0</literal></paragraph>
            <paragraph>全局历史不与任何场景相关联，但与外部资源等相关联。</paragraph>
            <target refid="class-editorundoredomanager-constant-remote-history"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorundoredomanager-constant-remote-history" names="class_editorundoredomanager_constant_remote_history"><reference internal="True" refid="enum-editorundoredomanager-specialhistory"><inline classes="std std-ref">SpecialHistory</inline></reference> <strong>REMOTE_HISTORY</strong> = <literal>-9</literal></paragraph>
            <paragraph>与远程检查器相关的历史。在实时编辑正在运行的游戏项目时使用。</paragraph>
            <target refid="class-editorundoredomanager-constant-invalid-history"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorundoredomanager-constant-invalid-history" names="class_editorundoredomanager_constant_invalid_history"><reference internal="True" refid="enum-editorundoredomanager-specialhistory"><inline classes="std std-ref">SpecialHistory</inline></reference> <strong>INVALID_HISTORY</strong> = <literal>-99</literal></paragraph>
            <paragraph>无效历史“null”。这是一个特殊值，不与任何对象相关联。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorundoredomanager-method-add-do-method"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-add-do-method" names="class_editorundoredomanager_method_add_do_method"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_do_method</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-editorundoredomanager-method-add-do-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个方法，当动作被提交（即“做”的动作）时将被调用。</paragraph>
            <paragraph>如果这是第一次操作，<literal>object</literal> 将被用于推断目标撤消历史。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-add-do-property"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-add-do-property" names="class_editorundoredomanager_method_add_do_property"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_do_property</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-editorundoredomanager-method-add-do-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为“做”注册一个属性值变更。</paragraph>
            <paragraph>如果这是第一次操作，<literal>object</literal> 将被用于推断目标撤消历史。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-add-do-reference"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-add-do-reference" names="class_editorundoredomanager_method_add_do_reference"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_do_reference</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-editorundoredomanager-method-add-do-reference"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为“做”注册一个引用，如果“做”历史丢失，则该引用将被擦除。这主要用于为“做”调用而创建的新节点。请不要用于资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-add-undo-method"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-add-undo-method" names="class_editorundoredomanager_method_add_undo_method"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_undo_method</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-editorundoredomanager-method-add-undo-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个方法，当动作被撤销时（即“撤销”动作）将被调用。</paragraph>
            <paragraph>如果这是第一次操作，<literal>object</literal> 将被用于推断目标撤消历史。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-add-undo-property"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-add-undo-property" names="class_editorundoredomanager_method_add_undo_property"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_undo_property</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-editorundoredomanager-method-add-undo-property"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为“撤销”注册一个属性值变更。</paragraph>
            <paragraph>如果这是第一次操作，<literal>object</literal> 将被用于推断目标撤消历史。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-add-undo-reference"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-add-undo-reference" names="class_editorundoredomanager_method_add_undo_reference"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_undo_reference</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-editorundoredomanager-method-add-undo-reference"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为“撤消”注册一个引用，如果“撤消”历史丢失，则该引用将被擦除。这主要用于通过“做”调用（而不是“撤销”调用！）而移除的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-commit-action"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-commit-action" names="class_editorundoredomanager_method_commit_action"><abbreviation explanation="无返回值。">void</abbreviation> <strong>commit_action</strong>(execute: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-editorundoredomanager-method-commit-action"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>提交该动作。如果 <literal>execute</literal> 为真（默认值），则该函数被调用时所有“做”方法/属性将被调用/设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-create-action"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-create-action" names="class_editorundoredomanager_method_create_action"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_action</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, merge_mode: <reference internal="True" refuri="class_undoredo#enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference> = 0, custom_context: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> = null, backward_undo_ops: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-editorundoredomanager-method-create-action"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的动作。调用后，请执行所有你需要的 <reference internal="True" refid="class-editorundoredomanager-method-add-do-method"><inline classes="std std-ref">add_do_method</inline></reference>、<reference internal="True" refid="class-editorundoredomanager-method-add-undo-method"><inline classes="std std-ref">add_undo_method</inline></reference>、<reference internal="True" refid="class-editorundoredomanager-method-add-do-property"><inline classes="std std-ref">add_do_property</inline></reference> 和 <reference internal="True" refid="class-editorundoredomanager-method-add-undo-property"><inline classes="std std-ref">add_undo_property</inline></reference> 调用，然后再用 <reference internal="True" refid="class-editorundoredomanager-method-commit-action"><inline classes="std std-ref">commit_action</inline></reference> 提交这个动作。</paragraph>
            <paragraph>动作的合并方式由 <literal>merge_mode</literal> 参数决定。详见 <reference internal="True" refuri="class_undoredo#enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference>。</paragraph>
            <paragraph>如果提供了 <literal>custom_context</literal> 对象，则它将被用于推断目标历史（而不是使用第一个操作）。</paragraph>
            <paragraph>动作中撤销操作的顺序由 <literal>backward_undo_ops</literal> 决定。<literal>backward_undo_ops</literal> 为 <literal>false</literal> 时，撤销选项的顺序和添加顺序一致。也就是说，先添加的操作会先撤销。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-force-fixed-history"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-force-fixed-history" names="class_editorundoredomanager_method_force_fixed_history"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_fixed_history</strong>() <reference internal="True" refid="class-editorundoredomanager-method-force-fixed-history"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Forces the next operation (e.g. <reference internal="True" refid="class-editorundoredomanager-method-add-do-method"><inline classes="std std-ref">add_do_method</inline></reference>) to use the action's history rather than guessing it from the object. This is sometimes needed when a history can't be correctly determined, like for a nested resource that doesn't have a path yet.</paragraph>
            <paragraph>This method should only be used when absolutely necessary, otherwise it might cause invalid history state. For most of complex cases, the <literal>custom_context</literal> parameter of <reference internal="True" refid="class-editorundoredomanager-method-create-action"><inline classes="std std-ref">create_action</inline></reference> is sufficient.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-get-history-undo-redo"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-get-history-undo-redo" names="class_editorundoredomanager_method_get_history_undo_redo"><reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> <strong>get_history_undo_redo</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorundoredomanager-method-get-history-undo-redo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定历史 <literal>id</literal> 关联的 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 对象。</paragraph>
            <paragraph><literal>0</literal> 以上的 <literal>id</literal> 被映射到打开的场景选项卡（但它与它们的顺序不匹配）。<literal>0</literal> 或更低的 <literal>id</literal> 具有特殊含义（参阅 <reference internal="True" refid="enum-editorundoredomanager-specialhistory"><inline classes="std std-ref">SpecialHistory</inline></reference>）。</paragraph>
            <paragraph>最好与 <reference internal="True" refid="class-editorundoredomanager-method-get-object-history-id"><inline classes="std std-ref">get_object_history_id</inline></reference> 一起使用。该方法被提供，只是以防需要 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 的一些更高级的方法的情况（但请记住，直接操作 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 对象可能会影响编辑器的稳定性）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-get-object-history-id"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-get-object-history-id" names="class_editorundoredomanager_method_get_object_history_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_object_history_id</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorundoredomanager-method-get-object-history-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从给定的 <literal>object</literal> 推导出的历史 ID。它可以与 <reference internal="True" refid="class-editorundoredomanager-method-get-history-undo-redo"><inline classes="std std-ref">get_history_undo_redo</inline></reference> 一起使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorundoredomanager-method-is-committing-action"></target>
            <paragraph classes="classref-method" ids="class-editorundoredomanager-method-is-committing-action" names="class_editorundoredomanager_method_is_committing_action"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_committing_action</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorundoredomanager-method-is-committing-action"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <strong>EditorUndoRedoManager</strong> 当前正在提交该动作，即运行其“做”方法或属性更改（请参阅 <reference internal="True" refid="class-editorundoredomanager-method-commit-action"><inline classes="std std-ref">commit_action</inline></reference>）时，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
