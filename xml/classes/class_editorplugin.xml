<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorPlugin.xml.</comment>
    <target refid="class-editorplugin"></target>
    <section ids="editorplugin class-editorplugin" names="editorplugin class_editorplugin">
        <title>EditorPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>由编辑器使用，用于扩展其功能。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>编辑器使用插件来扩展功能。最常见的插件类型是编辑给定的节点或资源类型的插件、导入插件和导出插件。另见 <reference internal="True" refuri="class_editorscript#class-editorscript"><inline classes="std std-ref">EditorScript</inline></reference>，能够向编辑器添加功能。</paragraph>
            <paragraph><strong>注意：</strong>这个类中的部分名称中包含“left”和“right”（例如 <reference internal="True" refid="class-editorplugin-constant-dock-slot-left-ul"><inline classes="std std-ref">DOCK_SLOT_LEFT_UL</inline></reference>）。这些 API 假设的是从左至右的布局，使用从右至左布局时是反的。保留这些名称是出于兼容的原因。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/plugins/editor/index"><inline classes="doc">编辑器插件文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="248"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-apply-changes"><inline classes="std std-ref">_apply_changes</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-build"><inline classes="std std-ref">_build</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-clear"><inline classes="std std-ref">_clear</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-disable-plugin"><inline classes="std std-ref">_disable_plugin</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-edit"><inline classes="std std-ref">_edit</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-enable-plugin"><inline classes="std std-ref">_enable_plugin</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-forward-3d-draw-over-viewport"><inline classes="std std-ref">_forward_3d_draw_over_viewport</inline></reference>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-forward-3d-force-draw-over-viewport"><inline classes="std std-ref">_forward_3d_force_draw_over_viewport</inline></reference>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-forward-3d-gui-input"><inline classes="std std-ref">_forward_3d_gui_input</inline></reference>(viewport_camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-forward-canvas-draw-over-viewport"><inline classes="std std-ref">_forward_canvas_draw_over_viewport</inline></reference>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-forward-canvas-force-draw-over-viewport"><inline classes="std std-ref">_forward_canvas_force_draw_over_viewport</inline></reference>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-forward-canvas-gui-input"><inline classes="std std-ref">_forward_canvas_gui_input</inline></reference>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-get-breakpoints"><inline classes="std std-ref">_get_breakpoints</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-get-plugin-icon"><inline classes="std std-ref">_get_plugin_icon</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-get-plugin-name"><inline classes="std std-ref">_get_plugin_name</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-get-state"><inline classes="std std-ref">_get_state</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-get-unsaved-status"><inline classes="std std-ref">_get_unsaved_status</inline></reference>(for_scene: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-get-window-layout"><inline classes="std std-ref">_get_window_layout</inline></reference>(configuration: <reference internal="True" refuri="class_configfile#class-configfile"><inline classes="std std-ref">ConfigFile</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-handles"><inline classes="std std-ref">_handles</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-has-main-screen"><inline classes="std std-ref">_has_main_screen</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-make-visible"><inline classes="std std-ref">_make_visible</inline></reference>(visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-save-external-data"><inline classes="std std-ref">_save_external_data</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-set-state"><inline classes="std std-ref">_set_state</inline></reference>(state: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-private-method-set-window-layout"><inline classes="std std-ref">_set_window_layout</inline></reference>(configuration: <reference internal="True" refuri="class_configfile#class-configfile"><inline classes="std std-ref">ConfigFile</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-autoload-singleton"><inline classes="std std-ref">add_autoload_singleton</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_button#class-button"><inline classes="std std-ref">Button</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-control-to-bottom-panel"><inline classes="std std-ref">add_control_to_bottom_panel</inline></reference>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, shortcut: <reference internal="True" refuri="class_shortcut#class-shortcut"><inline classes="std std-ref">Shortcut</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-control-to-container"><inline classes="std std-ref">add_control_to_container</inline></reference>(container: <reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference>, control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-control-to-dock"><inline classes="std std-ref">add_control_to_dock</inline></reference>(slot: <reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference>, control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, shortcut: <reference internal="True" refuri="class_shortcut#class-shortcut"><inline classes="std std-ref">Shortcut</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-custom-type"><inline classes="std std-ref">add_custom_type</inline></reference>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, base: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-debugger-plugin"><inline classes="std std-ref">add_debugger_plugin</inline></reference>(script: <reference internal="True" refuri="class_editordebuggerplugin#class-editordebuggerplugin"><inline classes="std std-ref">EditorDebuggerPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-export-plugin"><inline classes="std std-ref">add_export_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editorexportplugin#class-editorexportplugin"><inline classes="std std-ref">EditorExportPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-import-plugin"><inline classes="std std-ref">add_import_plugin</inline></reference>(importer: <reference internal="True" refuri="class_editorimportplugin#class-editorimportplugin"><inline classes="std std-ref">EditorImportPlugin</inline></reference>, first_priority: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-inspector-plugin"><inline classes="std std-ref">add_inspector_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin"><inline classes="std std-ref">EditorInspectorPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-node-3d-gizmo-plugin"><inline classes="std std-ref">add_node_3d_gizmo_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-resource-conversion-plugin"><inline classes="std std-ref">add_resource_conversion_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editorresourceconversionplugin#class-editorresourceconversionplugin"><inline classes="std std-ref">EditorResourceConversionPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-scene-format-importer-plugin"><inline classes="std std-ref">add_scene_format_importer_plugin</inline></reference>(scene_format_importer: <reference internal="True" refuri="class_editorsceneformatimporter#class-editorsceneformatimporter"><inline classes="std std-ref">EditorSceneFormatImporter</inline></reference>, first_priority: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-scene-post-import-plugin"><inline classes="std std-ref">add_scene_post_import_plugin</inline></reference>(scene_import_plugin: <reference internal="True" refuri="class_editorscenepostimportplugin#class-editorscenepostimportplugin"><inline classes="std std-ref">EditorScenePostImportPlugin</inline></reference>, first_priority: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-tool-menu-item"><inline classes="std std-ref">add_tool_menu_item</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-tool-submenu-item"><inline classes="std std-ref">add_tool_submenu_item</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, submenu: <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-translation-parser-plugin"><inline classes="std std-ref">add_translation_parser_plugin</inline></reference>(parser: <reference internal="True" refuri="class_editortranslationparserplugin#class-editortranslationparserplugin"><inline classes="std std-ref">EditorTranslationParserPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-add-undo-redo-inspector-hook-callback"><inline classes="std std-ref">add_undo_redo_inspector_hook_callback</inline></reference>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorinterface#class-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-get-editor-interface"><inline classes="std std-ref">get_editor_interface</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-get-export-as-menu"><inline classes="std std-ref">get_export_as_menu</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-get-plugin-version"><inline classes="std std-ref">get_plugin_version</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scriptcreatedialog#class-scriptcreatedialog"><inline classes="std std-ref">ScriptCreateDialog</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-get-script-create-dialog"><inline classes="std std-ref">get_script_create_dialog</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorundoredomanager#class-editorundoredomanager"><inline classes="std std-ref">EditorUndoRedoManager</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-get-undo-redo"><inline classes="std std-ref">get_undo_redo</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-hide-bottom-panel"><inline classes="std std-ref">hide_bottom_panel</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-make-bottom-panel-item-visible"><inline classes="std std-ref">make_bottom_panel_item_visible</inline></reference>(item: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-queue-save-layout"><inline classes="std std-ref">queue_save_layout</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-autoload-singleton"><inline classes="std std-ref">remove_autoload_singleton</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-control-from-bottom-panel"><inline classes="std std-ref">remove_control_from_bottom_panel</inline></reference>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-control-from-container"><inline classes="std std-ref">remove_control_from_container</inline></reference>(container: <reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference>, control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-control-from-docks"><inline classes="std std-ref">remove_control_from_docks</inline></reference>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-custom-type"><inline classes="std std-ref">remove_custom_type</inline></reference>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-debugger-plugin"><inline classes="std std-ref">remove_debugger_plugin</inline></reference>(script: <reference internal="True" refuri="class_editordebuggerplugin#class-editordebuggerplugin"><inline classes="std std-ref">EditorDebuggerPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-export-plugin"><inline classes="std std-ref">remove_export_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editorexportplugin#class-editorexportplugin"><inline classes="std std-ref">EditorExportPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-import-plugin"><inline classes="std std-ref">remove_import_plugin</inline></reference>(importer: <reference internal="True" refuri="class_editorimportplugin#class-editorimportplugin"><inline classes="std std-ref">EditorImportPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-inspector-plugin"><inline classes="std std-ref">remove_inspector_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin"><inline classes="std std-ref">EditorInspectorPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-node-3d-gizmo-plugin"><inline classes="std std-ref">remove_node_3d_gizmo_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-resource-conversion-plugin"><inline classes="std std-ref">remove_resource_conversion_plugin</inline></reference>(plugin: <reference internal="True" refuri="class_editorresourceconversionplugin#class-editorresourceconversionplugin"><inline classes="std std-ref">EditorResourceConversionPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-scene-format-importer-plugin"><inline classes="std std-ref">remove_scene_format_importer_plugin</inline></reference>(scene_format_importer: <reference internal="True" refuri="class_editorsceneformatimporter#class-editorsceneformatimporter"><inline classes="std std-ref">EditorSceneFormatImporter</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-scene-post-import-plugin"><inline classes="std std-ref">remove_scene_post_import_plugin</inline></reference>(scene_import_plugin: <reference internal="True" refuri="class_editorscenepostimportplugin#class-editorscenepostimportplugin"><inline classes="std std-ref">EditorScenePostImportPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-tool-menu-item"><inline classes="std std-ref">remove_tool_menu_item</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-translation-parser-plugin"><inline classes="std std-ref">remove_translation_parser_plugin</inline></reference>(parser: <reference internal="True" refuri="class_editortranslationparserplugin#class-editortranslationparserplugin"><inline classes="std std-ref">EditorTranslationParserPlugin</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-remove-undo-redo-inspector-hook-callback"><inline classes="std std-ref">remove_undo_redo_inspector_hook_callback</inline></reference>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-set-dock-tab-icon"><inline classes="std std-ref">set_dock_tab_icon</inline></reference>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-set-force-draw-over-forwarding-enabled"><inline classes="std std-ref">set_force_draw_over_forwarding_enabled</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-set-input-event-forwarding-always-enabled"><inline classes="std std-ref">set_input_event_forwarding_always_enabled</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorplugin-method-update-overlays"><inline classes="std std-ref">update_overlays</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-editorplugin-signal-main-screen-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorplugin-signal-main-screen-changed" names="class_editorplugin_signal_main_screen_changed"><strong>main_screen_changed</strong>(screen_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorplugin-signal-main-screen-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户改变工作空间（<strong>2D</strong>、<strong>3D</strong>、<strong>Script</strong>、<strong>AssetLib</strong>）时发出。也适用于由插件定义的自定义屏幕。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-signal-project-settings-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorplugin-signal-project-settings-changed" names="class_editorplugin_signal_project_settings_changed"><strong>project_settings_changed</strong>() <reference internal="True" refid="class-editorplugin-signal-project-settings-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_projectsettings#class-projectsettings-signal-settings-changed"><inline classes="std std-ref">ProjectSettings.settings_changed</inline></reference> instead.</paragraph>
            <paragraph>当任意项目设置发生改变时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-signal-resource-saved"></target>
            <paragraph classes="classref-signal" ids="class-editorplugin-signal-resource-saved" names="class_editorplugin_signal_resource_saved"><strong>resource_saved</strong>(resource: <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>) <reference internal="True" refid="class-editorplugin-signal-resource-saved"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>给定的资源 <literal>resource</literal> 保存到磁盘时发出。另见 <reference internal="True" refid="class-editorplugin-signal-scene-saved"><inline classes="std std-ref">scene_saved</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-signal-scene-changed"></target>
            <paragraph classes="classref-signal" ids="class-editorplugin-signal-scene-changed" names="class_editorplugin_signal_scene_changed"><strong>scene_changed</strong>(scene_root: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-editorplugin-signal-scene-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在编辑器中更改场景时发出。该参数将返回刚刚变为活动状态的场景的根节点。如果此场景是新场景且为空，则参数将为 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-signal-scene-closed"></target>
            <paragraph classes="classref-signal" ids="class-editorplugin-signal-scene-closed" names="class_editorplugin_signal_scene_closed"><strong>scene_closed</strong>(filepath: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorplugin-signal-scene-closed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户关闭场景时发出。参数是被关闭的场景的文件路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-signal-scene-saved"></target>
            <paragraph classes="classref-signal" ids="class-editorplugin-signal-scene-saved" names="class_editorplugin_signal_scene_saved"><strong>scene_saved</strong>(filepath: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorplugin-signal-scene-saved"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当场景被保存在磁盘上时发出。参数是被保存的场景的文件路径。另见 <reference internal="True" refid="class-editorplugin-signal-resource-saved"><inline classes="std std-ref">resource_saved</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-editorplugin-customcontrolcontainer"></target>
            <paragraph classes="classref-enumeration" ids="enum-editorplugin-customcontrolcontainer" names="enum_editorplugin_customcontrolcontainer">enum <strong>CustomControlContainer</strong>: <reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-editorplugin-constant-container-toolbar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-toolbar" names="class_editorplugin_constant_container_toolbar"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_TOOLBAR</strong> = <literal>0</literal></paragraph>
            <paragraph>主编辑器的工具栏，旁边是运行按钮。</paragraph>
            <target refid="class-editorplugin-constant-container-spatial-editor-menu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-spatial-editor-menu" names="class_editorplugin_constant_container_spatial_editor_menu"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_SPATIAL_EDITOR_MENU</strong> = <literal>1</literal></paragraph>
            <paragraph>3D 编辑器处于活动状态时出现的工具栏。</paragraph>
            <target refid="class-editorplugin-constant-container-spatial-editor-side-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-spatial-editor-side-left" names="class_editorplugin_constant_container_spatial_editor_side_left"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_SPATIAL_EDITOR_SIDE_LEFT</strong> = <literal>2</literal></paragraph>
            <paragraph>3D 编辑器的左侧边栏。</paragraph>
            <target refid="class-editorplugin-constant-container-spatial-editor-side-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-spatial-editor-side-right" names="class_editorplugin_constant_container_spatial_editor_side_right"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT</strong> = <literal>3</literal></paragraph>
            <paragraph>3D 编辑器的右侧边栏。</paragraph>
            <target refid="class-editorplugin-constant-container-spatial-editor-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-spatial-editor-bottom" names="class_editorplugin_constant_container_spatial_editor_bottom"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_SPATIAL_EDITOR_BOTTOM</strong> = <literal>4</literal></paragraph>
            <paragraph>3D 编辑器的底部面板。</paragraph>
            <target refid="class-editorplugin-constant-container-canvas-editor-menu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-canvas-editor-menu" names="class_editorplugin_constant_container_canvas_editor_menu"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_CANVAS_EDITOR_MENU</strong> = <literal>5</literal></paragraph>
            <paragraph>2D 编辑器处于活动状态时出现的工具条。</paragraph>
            <target refid="class-editorplugin-constant-container-canvas-editor-side-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-canvas-editor-side-left" names="class_editorplugin_constant_container_canvas_editor_side_left"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_CANVAS_EDITOR_SIDE_LEFT</strong> = <literal>6</literal></paragraph>
            <paragraph>2D 编辑器的左侧边栏。</paragraph>
            <target refid="class-editorplugin-constant-container-canvas-editor-side-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-canvas-editor-side-right" names="class_editorplugin_constant_container_canvas_editor_side_right"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_CANVAS_EDITOR_SIDE_RIGHT</strong> = <literal>7</literal></paragraph>
            <paragraph>2D 编辑器的右侧边栏。</paragraph>
            <target refid="class-editorplugin-constant-container-canvas-editor-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-canvas-editor-bottom" names="class_editorplugin_constant_container_canvas_editor_bottom"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_CANVAS_EDITOR_BOTTOM</strong> = <literal>8</literal></paragraph>
            <paragraph>2D 编辑器的底部面板。</paragraph>
            <target refid="class-editorplugin-constant-container-inspector-bottom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-inspector-bottom" names="class_editorplugin_constant_container_inspector_bottom"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_INSPECTOR_BOTTOM</strong> = <literal>9</literal></paragraph>
            <paragraph>检查器的底部。</paragraph>
            <target refid="class-editorplugin-constant-container-project-setting-tab-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-project-setting-tab-left" names="class_editorplugin_constant_container_project_setting_tab_left"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_PROJECT_SETTING_TAB_LEFT</strong> = <literal>10</literal></paragraph>
            <paragraph>项目设置对话框中的选项卡，在其他选项卡的左侧。</paragraph>
            <target refid="class-editorplugin-constant-container-project-setting-tab-right"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-container-project-setting-tab-right" names="class_editorplugin_constant_container_project_setting_tab_right"><reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference> <strong>CONTAINER_PROJECT_SETTING_TAB_RIGHT</strong> = <literal>11</literal></paragraph>
            <paragraph>项目设置对话框中的选项卡，在其他选项卡的右侧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-editorplugin-dockslot"></target>
            <paragraph classes="classref-enumeration" ids="enum-editorplugin-dockslot" names="enum_editorplugin_dockslot">enum <strong>DockSlot</strong>: <reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-editorplugin-constant-dock-slot-left-ul"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-left-ul" names="class_editorplugin_constant_dock_slot_left_ul"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_LEFT_UL</strong> = <literal>0</literal></paragraph>
            <paragraph>左侧停靠槽的左上（默认布局中为空）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-left-bl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-left-bl" names="class_editorplugin_constant_dock_slot_left_bl"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_LEFT_BL</strong> = <literal>1</literal></paragraph>
            <paragraph>左侧停靠槽的左下（默认布局中为空）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-left-ur"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-left-ur" names="class_editorplugin_constant_dock_slot_left_ur"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_LEFT_UR</strong> = <literal>2</literal></paragraph>
            <paragraph>左侧停靠槽的右上（默认布局中为“场景”和“导入”面板）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-left-br"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-left-br" names="class_editorplugin_constant_dock_slot_left_br"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_LEFT_BR</strong> = <literal>3</literal></paragraph>
            <paragraph>左侧停靠槽的右下（默认布局中为“文件系统”面板）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-right-ul"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-right-ul" names="class_editorplugin_constant_dock_slot_right_ul"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_RIGHT_UL</strong> = <literal>4</literal></paragraph>
            <paragraph>右侧停靠槽的左上（默认布局中为“检查器”“节点”以及“历史”面板）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-right-bl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-right-bl" names="class_editorplugin_constant_dock_slot_right_bl"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_RIGHT_BL</strong> = <literal>5</literal></paragraph>
            <paragraph>右侧停靠槽的左下（默认布局中为空）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-right-ur"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-right-ur" names="class_editorplugin_constant_dock_slot_right_ur"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_RIGHT_UR</strong> = <literal>6</literal></paragraph>
            <paragraph>右侧停靠槽的右上（默认布局中为空）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-right-br"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-right-br" names="class_editorplugin_constant_dock_slot_right_br"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_RIGHT_BR</strong> = <literal>7</literal></paragraph>
            <paragraph>右侧停靠槽的右下（默认布局中为空）。</paragraph>
            <target refid="class-editorplugin-constant-dock-slot-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-dock-slot-max" names="class_editorplugin_constant_dock_slot_max"><reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> <strong>DOCK_SLOT_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-editorplugin-afterguiinput"></target>
            <paragraph classes="classref-enumeration" ids="enum-editorplugin-afterguiinput" names="enum_editorplugin_afterguiinput">enum <strong>AfterGUIInput</strong>: <reference internal="True" refid="enum-editorplugin-afterguiinput"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-editorplugin-constant-after-gui-input-pass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-after-gui-input-pass" names="class_editorplugin_constant_after_gui_input_pass"><reference internal="True" refid="enum-editorplugin-afterguiinput"><inline classes="std std-ref">AfterGUIInput</inline></reference> <strong>AFTER_GUI_INPUT_PASS</strong> = <literal>0</literal></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 转发给其他 EditorPlugin。</paragraph>
            <target refid="class-editorplugin-constant-after-gui-input-stop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-after-gui-input-stop" names="class_editorplugin_constant_after_gui_input_stop"><reference internal="True" refid="enum-editorplugin-afterguiinput"><inline classes="std std-ref">AfterGUIInput</inline></reference> <strong>AFTER_GUI_INPUT_STOP</strong> = <literal>1</literal></paragraph>
            <paragraph>阻止该 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 到达其他 Editor 类。</paragraph>
            <target refid="class-editorplugin-constant-after-gui-input-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-editorplugin-constant-after-gui-input-custom" names="class_editorplugin_constant_after_gui_input_custom"><reference internal="True" refid="enum-editorplugin-afterguiinput"><inline classes="std std-ref">AfterGUIInput</inline></reference> <strong>AFTER_GUI_INPUT_CUSTOM</strong> = <literal>2</literal></paragraph>
            <paragraph>将该 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 传递给除主 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 插件之外的其他编辑器插件。这可用于防止节点选择更改并且改为使用子小工具。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorplugin-private-method-apply-changes"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-apply-changes" names="class_editorplugin_private_method__apply_changes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_apply_changes</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-apply-changes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当编辑器将要进行保存项目、切换选项卡等操作时，将调用该方法。它要求插件应用所有暂挂的状态更改以确保一致性。</paragraph>
            <paragraph>例如，在着色器编辑器中使用它来使插件将用户编写的着色代码应用于对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-build"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-build" names="class_editorplugin_private_method__build"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_build</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-build"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该方法在编辑器即将运行项目时被调用。这样，插件可以在项目运行之前，执行所需的操作。</paragraph>
            <paragraph>该方法必须返回一个布尔值。如果该方法返回 <literal>false</literal>，则项目将不会运行。运行会立即中止，因此这也会阻止运行所有其他插件的 <reference internal="True" refid="class-editorplugin-private-method-build"><inline classes="std std-ref">_build</inline></reference> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-clear"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-clear" names="class_editorplugin_private_method__clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_clear</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除所有状态，并将正在编辑的对象重置为零。这可确保你的插件不会继续编辑当前存在的节点或来自错误场景的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-disable-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-disable-plugin" names="class_editorplugin_private_method__disable_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_disable_plugin</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-disable-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户在项目设置窗口的插件选项卡中禁用 <strong>EditorPlugin</strong> 时，由引擎调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-edit"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-edit" names="class_editorplugin_private_method__edit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_edit</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-edit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该函数用于编辑特定对象类型（节点或资源）的插件。它请求编辑器编辑给定的对象。</paragraph>
            <paragraph>如果该插件刚刚正在编辑一个对象，且它不想再处理任何选定的对象，则 <literal>object</literal> 可以为 <literal>null</literal>。这可用于清理编辑状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-enable-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-enable-plugin" names="class_editorplugin_private_method__enable_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_enable_plugin</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-enable-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户在项目设置窗口的插件选项卡中启用该 <strong>EditorPlugin</strong> 时，由引擎调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-forward-3d-draw-over-viewport"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-forward-3d-draw-over-viewport" names="class_editorplugin_private_method__forward_3d_draw_over_viewport"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_forward_3d_draw_over_viewport</strong>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-forward-3d-draw-over-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 3D 编辑器的视口更新时由引擎调用。将 <literal>overlay</literal> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 用于绘制。可以通过调用 <reference internal="True" refid="class-editorplugin-method-update-overlays"><inline classes="std std-ref">update_overlays</inline></reference> 手动更新该视口。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _forward_3d_draw_over_viewport(overlay):
    # 在光标位置画一个圆。
    overlay.draw_circle(overlay.get_local_mouse_position(), 64)

func _forward_3d_gui_input(camera, event):
    if event is InputEventMouseMotion:
        # 当光标被移动时，重绘视口。
        update_overlays()
        return EditorPlugin.AFTER_GUI_INPUT_STOP
    return EditorPlugin.AFTER_GUI_INPUT_PASS</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Forward3DDrawOverViewport(Control viewportControl)
{
    // 在光标位置画一个圆。
    viewportControl.DrawCircle(viewportControl.GetLocalMousePosition(), 64, Colors.White);
}

public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D viewportCamera, InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        // 当光标被移动时，重绘视口。
        UpdateOverlays();
        return EditorPlugin.AfterGuiInput.Stop;
    }
    return EditorPlugin.AfterGuiInput.Pass;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-forward-3d-force-draw-over-viewport"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-forward-3d-force-draw-over-viewport" names="class_editorplugin_private_method__forward_3d_force_draw_over_viewport"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_forward_3d_force_draw_over_viewport</strong>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-forward-3d-force-draw-over-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该方法与 <reference internal="True" refid="class-editorplugin-private-method-forward-3d-draw-over-viewport"><inline classes="std std-ref">_forward_3d_draw_over_viewport</inline></reference> 相同，只是它绘制在所有内容之上。当需要一个显示在其他任何内容之上的额外图层时很有用。</paragraph>
            <paragraph>需要使用 <reference internal="True" refid="class-editorplugin-method-set-force-draw-over-forwarding-enabled"><inline classes="std std-ref">set_force_draw_over_forwarding_enabled</inline></reference> 来启用该方法的调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-forward-3d-gui-input"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-forward-3d-gui-input" names="class_editorplugin_private_method__forward_3d_gui_input"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_forward_3d_gui_input</strong>(viewport_camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-forward-3d-gui-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在当前编辑的场景中有根节点时调用，实现 <reference internal="True" refid="class-editorplugin-private-method-handles"><inline classes="std std-ref">_handles</inline></reference> 并在 3D 视口中产生 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>。返回值决定 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 是被消费还是被转发给其他 <strong>EditorPlugin</strong>。有关选项，请参阅 <reference internal="True" refid="enum-editorplugin-afterguiinput"><inline classes="std std-ref">AfterGUIInput</inline></reference>。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 阻止 InputEvent 到达其他编辑类。
func _forward_3d_gui_input(camera, event):
    return EditorPlugin.AFTER_GUI_INPUT_STOP</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 阻止 InputEvent 到达其他编辑类。
public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D camera, InputEvent @event)
{
    return EditorPlugin.AfterGuiInput.Stop;
}</literal_block>
                </div>
            </container>
            <paragraph>必须为 <literal>return EditorPlugin.AFTER_GUI_INPUT_PASS</literal> 以便将 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 转发给其他编辑器类。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 消耗 InputEventMouseMotion 并转发其他 InputEvent 类型。
func _forward_3d_gui_input(camera, event):
    return EditorPlugin.AFTER_GUI_INPUT_STOP if event is InputEventMouseMotion else EditorPlugin.AFTER_GUI_INPUT_PASS</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 消耗 InputEventMouseMotion 并转发其他 InputEvent 类型。
public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D camera, InputEvent @event)
{
    return @event is InputEventMouseMotion ? EditorPlugin.AfterGuiInput.Stop : EditorPlugin.AfterGuiInput.Pass;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-forward-canvas-draw-over-viewport"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-forward-canvas-draw-over-viewport" names="class_editorplugin_private_method__forward_canvas_draw_over_viewport"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_forward_canvas_draw_over_viewport</strong>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-forward-canvas-draw-over-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 2D 编辑器的视口更新时由引擎调用。将 <literal>overlay</literal> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 用于绘制。可以通过调用 <reference internal="True" refid="class-editorplugin-method-update-overlays"><inline classes="std std-ref">update_overlays</inline></reference> 手动更新该视口。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _forward_canvas_draw_over_viewport(overlay):
    # 在光标位置画一个圆。
    overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)

func _forward_canvas_gui_input(event):
    if event is InputEventMouseMotion:
        # 当光标被移动时，重绘视口。
        update_overlays()
        return true
    return false</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _ForwardCanvasDrawOverViewport(Control viewportControl)
{
    // 在光标位置画一个圆。
    viewportControl.DrawCircle(viewportControl.GetLocalMousePosition(), 64, Colors.White);
}

public override bool _ForwardCanvasGuiInput(InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        // 当光标被移动时，重绘视口。
        UpdateOverlays();
        return true;
    }
    return false;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-forward-canvas-force-draw-over-viewport"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-forward-canvas-force-draw-over-viewport" names="class_editorplugin_private_method__forward_canvas_force_draw_over_viewport"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_forward_canvas_force_draw_over_viewport</strong>(viewport_control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-forward-canvas-force-draw-over-viewport"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该方法与 <reference internal="True" refid="class-editorplugin-private-method-forward-canvas-draw-over-viewport"><inline classes="std std-ref">_forward_canvas_draw_over_viewport</inline></reference> 相同，只是它绘制在所有内容之上。当需要一个显示在其他任何内容之上的额外图层时很有用。</paragraph>
            <paragraph>需要使用 <reference internal="True" refid="class-editorplugin-method-set-force-draw-over-forwarding-enabled"><inline classes="std std-ref">set_force_draw_over_forwarding_enabled</inline></reference> 来启用该方法的调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-forward-canvas-gui-input"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-forward-canvas-gui-input" names="class_editorplugin_private_method__forward_canvas_gui_input"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_forward_canvas_gui_input</strong>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-forward-canvas-gui-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在当前编辑的场景中有根节点时调用，实现 <reference internal="True" refid="class-editorplugin-private-method-handles"><inline classes="std std-ref">_handles</inline></reference> 并在 2D 视口中产生 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>。如果 <literal>return true</literal> <strong>EditorPlugin</strong> 消耗 <literal>event</literal>，则拦截该 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>；否则将 <literal>event</literal> 转发给其他编辑器类。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 阻止 InputEvent 到达其他编辑类。
func _forward_canvas_gui_input(event):
    return true</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 阻止 InputEvent 到达其他编辑类。
public override bool ForwardCanvasGuiInput(InputEvent @event)
{
    return true;
}</literal_block>
                </div>
            </container>
            <paragraph>必须 <literal>return false</literal> 才能将 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 转发到其他编辑器类。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 消耗 InputEventMouseMotion 并转发其他 InputEvent 类型。
func _forward_canvas_gui_input(event):
    if (event is InputEventMouseMotion):
        return true
    return false</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 消耗 InputEventMouseMotion 并转发其他 InputEvent 类型。
public override bool _ForwardCanvasGuiInput(InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        return true;
    }
    return false;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-get-breakpoints"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-get-breakpoints" names="class_editorplugin_private_method__get_breakpoints"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_breakpoints</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-get-breakpoints"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该函数用于编辑基于脚本的对象的编辑器。可以返回格式为（<literal>script:line</literal>）的断点的列表，例如：<literal>res://path_to_script.gd:25</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-get-plugin-icon"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-get-plugin-icon" names="class_editorplugin_private_method__get_plugin_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>_get_plugin_icon</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-get-plugin-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在插件中覆盖该方法，以返回一个 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 以便为插件提供一个图标。</paragraph>
            <paragraph>对于主界面插件，它出现在屏幕顶部，“2D”、“3D”、“脚本”和 “AssetLib” 按钮的右侧。</paragraph>
            <paragraph>理想情况下，插件图标应为透明背景的白色，大小为 16×16 像素。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _get_plugin_icon():
    # 你可以使用一个自定义的图标：
    return preload("res://addons/my_plugin/my_plugin_icon.svg")
    # 或者使用一个内置的图标：
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override Texture2D _GetPluginIcon()
{
    // 你可以使用一个自定义的图标：
    return ResourceLoader.Load&lt;Texture2D&gt;("res://addons/my_plugin/my_plugin_icon.svg");
    // 或者使用一个内置的图标：
    return EditorInterface.Singleton.GetEditorTheme().GetIcon("Node", "EditorIcons");
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-get-plugin-name"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-get-plugin-name" names="class_editorplugin_private_method__get_plugin_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_plugin_name</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-get-plugin-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在插件中覆盖该方法，以在 Godot 编辑器中显示时提供该插件的名称。</paragraph>
            <paragraph>对于主屏幕插件，它显示在屏幕顶部，在“2D”“3D”“脚本”“AssetLib”按钮的右侧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-get-state"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-get-state" names="class_editorplugin_private_method__get_state"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_state</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-get-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以提供要保存的状态数据，如视图位置、网格设置、折叠等。这可用于保存场景（再次打开时，保持状态）和切换选项卡（ 选项卡返回时，可以恢复状态）。每个场景的数据会自动被保存在编辑器元数据文件夹中的 <literal>editstate</literal> 文件中。如果想为插件存储全局的（独立于场景的）编辑器数据，可以改用 <reference internal="True" refid="class-editorplugin-private-method-get-window-layout"><inline classes="std std-ref">_get_window_layout</inline></reference>。</paragraph>
            <paragraph>使用 <reference internal="True" refid="class-editorplugin-private-method-set-state"><inline classes="std std-ref">_set_state</inline></reference> 恢复保存的状态。</paragraph>
            <paragraph><strong>注意：</strong>此方法不应该用于保存应随项目保留的重要设置。</paragraph>
            <paragraph><strong>注意：</strong>必须实现 <reference internal="True" refid="class-editorplugin-private-method-get-plugin-name"><inline classes="std std-ref">_get_plugin_name</inline></reference>，才能正确存储和恢复状态。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _get_state():
    var state = {"zoom": zoom, "preferred_color": my_color}
    return state</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-get-unsaved-status"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-get-unsaved-status" names="class_editorplugin_private_method__get_unsaved_status"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_unsaved_status</strong>(for_scene: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-get-unsaved-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以提供列出未保存更改的自定义消息。编辑器将在退出或关闭场景时调用该方法，并在确认对话框中显示返回的字符串。如果该插件没有未保存的更改，则返回空字符串。</paragraph>
            <paragraph>关闭场景时，<literal>for_scene</literal> 是正在关闭的场景的路径。你可以使用它来处理该场景中的内置资源。</paragraph>
            <paragraph>如果用户确认保存，将在关闭编辑器之前将调用 <reference internal="True" refid="class-editorplugin-private-method-save-external-data"><inline classes="std std-ref">_save_external_data</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _get_unsaved_status(for_scene):
    if not unsaved:
        return ""

    if for_scene.is_empty():
        return "Save changes in MyCustomPlugin before closing?"
    else:
        return "Scene %s has changes from MyCustomPlugin. Save before closing?" % for_scene.get_file()

func _save_external_data():
    unsaved = false</literal_block>
            <paragraph>如果该插件没有特定于场景的更改，则可以在关闭场景时忽略这些调用：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _get_unsaved_status(for_scene):
    if not for_scene.is_empty():
        return ""</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-get-window-layout"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-get-window-layout" names="class_editorplugin_private_method__get_window_layout"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_get_window_layout</strong>(configuration: <reference internal="True" refuri="class_configfile#class-configfile"><inline classes="std std-ref">ConfigFile</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-get-window-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以提供该插件的 GUI 布局、或想要存储的任何其他数据。这用于在调用 <reference internal="True" refid="class-editorplugin-method-queue-save-layout"><inline classes="std std-ref">queue_save_layout</inline></reference> 或更改编辑器布局（例如更改停靠面板的位置）时，保存项目的编辑器布局。数据被存储在编辑器元数据目录中的 <literal>editor_layout.cfg</literal> 文件中。</paragraph>
            <paragraph>使用 <reference internal="True" refid="class-editorplugin-private-method-set-window-layout"><inline classes="std std-ref">_set_window_layout</inline></reference> 恢复保存的布局。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _get_window_layout(configuration):
    configuration.set_value("MyPlugin", "window_position", $Window.position)
    configuration.set_value("MyPlugin", "icon_color", $Icon.modulate)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-handles"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-handles" names="class_editorplugin_private_method__handles"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_handles</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-handles"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果插件会编辑特定类型的对象（资源或节点），则请实现该函数。如果返回 <literal>true</literal>，则将在编辑器请求时，调用函数 <reference internal="True" refid="class-editorplugin-private-method-edit"><inline classes="std std-ref">_edit</inline></reference> 和 <reference internal="True" refid="class-editorplugin-private-method-make-visible"><inline classes="std std-ref">_make_visible</inline></reference>。如果已经声明了方法 <reference internal="True" refid="class-editorplugin-private-method-forward-canvas-gui-input"><inline classes="std std-ref">_forward_canvas_gui_input</inline></reference> 和 <reference internal="True" refid="class-editorplugin-private-method-forward-3d-gui-input"><inline classes="std std-ref">_forward_3d_gui_input</inline></reference>，则它们也会被调用。</paragraph>
            <paragraph><strong>注意：</strong>每个插件一次只应处理一种类型的对象。如果一个插件处理多种类型的对象并且同时编辑这些对象，则会导致错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-has-main-screen"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-has-main-screen" names="class_editorplugin_private_method__has_main_screen"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_main_screen</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-has-main-screen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这是一个主屏幕编辑器插件，则返回 <literal>true</literal>（它与 <strong>2D</strong>、<strong>3D</strong>、<strong>Script</strong> 和 <strong>AssetLib</strong> 一起进入工作区选择器）。</paragraph>
            <paragraph>当该插件的工作区被选中时，其他主屏幕插件将被隐藏，但你的插件不会自动出现。它需要被添加为 <reference internal="True" refuri="class_editorinterface#class-editorinterface-method-get-editor-main-screen"><inline classes="std std-ref">EditorInterface.get_editor_main_screen</inline></reference> 的子节点，并在 <reference internal="True" refid="class-editorplugin-private-method-make-visible"><inline classes="std std-ref">_make_visible</inline></reference> 中使其可见。</paragraph>
            <paragraph>使用 <reference internal="True" refid="class-editorplugin-private-method-get-plugin-name"><inline classes="std std-ref">_get_plugin_name</inline></reference> 和 <reference internal="True" refid="class-editorplugin-private-method-get-plugin-icon"><inline classes="std std-ref">_get_plugin_icon</inline></reference> 自定义插件按钮的外观。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var plugin_control

func _enter_tree():
    plugin_control = preload("my_plugin_control.tscn").instantiate()
    EditorInterface.get_editor_main_screen().add_child(plugin_control)
    plugin_control.hide()

func _has_main_screen():
    return true

func _make_visible(visible):
    plugin_control.visible = visible

func _get_plugin_name():
    return "My Super Cool Plugin 3000"

func _get_plugin_icon():
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-make-visible"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-make-visible" names="class_editorplugin_private_method__make_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_make_visible</strong>(visible: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-make-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当编辑器被要求变为可见时，该函数将被调用。它用于编辑特定对象类型的插件。</paragraph>
            <paragraph>请记住，你必须手动管理所有编辑器控件的可见性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-save-external-data"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-save-external-data" names="class_editorplugin_private_method__save_external_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_save_external_data</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-save-external-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>这个方法在编辑器保存项目后或关闭项目时被调用，它要求插件保存编辑的外部场景/资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-set-state"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-set-state" names="class_editorplugin_private_method__set_state"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_state</strong>(state: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-set-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>恢复用 <reference internal="True" refid="class-editorplugin-private-method-get-state"><inline classes="std std-ref">_get_state</inline></reference> 保存的状态。这个方法会在编辑器的当前场景选项卡发生改变时调用。</paragraph>
            <paragraph><strong>注意：</strong>你的插件必须实现 <reference internal="True" refid="class-editorplugin-private-method-get-plugin-name"><inline classes="std std-ref">_get_plugin_name</inline></reference>，否则无法被识别，这个方法也不会被调用。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _set_state(data):
    zoom = data.get("zoom", 1.0)
    preferred_color = data.get("my_color", Color.WHITE)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-private-method-set-window-layout"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-private-method-set-window-layout" names="class_editorplugin_private_method__set_window_layout"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_window_layout</strong>(configuration: <reference internal="True" refuri="class_configfile#class-configfile"><inline classes="std std-ref">ConfigFile</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editorplugin-private-method-set-window-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>恢复用 <reference internal="True" refid="class-editorplugin-private-method-get-window-layout"><inline classes="std std-ref">_get_window_layout</inline></reference> 保存的插件 GUI 布局和数据。编辑器启动时会调用每个插件的这个方法。请使用提供的 <literal>configuration</literal> 文件读取你保存的数据。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _set_window_layout(configuration):
    $Window.position = configuration.get_value("MyPlugin", "window_position", Vector2())
    $Icon.modulate = configuration.get_value("MyPlugin", "icon_color", Color.WHITE)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-autoload-singleton"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-autoload-singleton" names="class_editorplugin_method_add_autoload_singleton"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_autoload_singleton</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-autoload-singleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>path</literal> 处的脚本作为 <literal>name</literal> 添加到自动加载列表中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-control-to-bottom-panel"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-control-to-bottom-panel" names="class_editorplugin_method_add_control_to_bottom_panel"><reference internal="True" refuri="class_button#class-button"><inline classes="std std-ref">Button</inline></reference> <strong>add_control_to_bottom_panel</strong>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, title: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, shortcut: <reference internal="True" refuri="class_shortcut#class-shortcut"><inline classes="std std-ref">Shortcut</inline></reference> = null) <reference internal="True" refid="class-editorplugin-method-add-control-to-bottom-panel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将控件添加到底部面板（与“输出”“调试”“动画”等一起）。返回添加的按钮。你需要视情况自行隐藏/显示这个按钮。停用插件时，请确保使用 <reference internal="True" refid="class-editorplugin-method-remove-control-from-bottom-panel"><inline classes="std std-ref">remove_control_from_bottom_panel</inline></reference> 移除自定义控件并使用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 将其释放。</paragraph>
            <paragraph>你还可以指定快捷键参数。按下快捷键时会切换底部面板的可见性。示例见“编辑器设置”中的默认编辑器底部面板快捷键。按照惯例都使用了 <literal classes="kbd">Alt</literal> 修饰键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-control-to-container"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-control-to-container" names="class_editorplugin_method_add_control_to_container"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_control_to_container</strong>(container: <reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference>, control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-control-to-container"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将自定义控件添加到容器中（见 <reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference>）。在编辑器用户界面中，有许多位置可以添加自定义控件。</paragraph>
            <paragraph>请记住，必须自己管理你的自定义控件的可见性（并且很可能在添加后隐藏它）。</paragraph>
            <paragraph>当插件被停用时，请确保使用 <reference internal="True" refid="class-editorplugin-method-remove-control-from-container"><inline classes="std std-ref">remove_control_from_container</inline></reference> 移除自定义控件，并使用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 将其释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-control-to-dock"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-control-to-dock" names="class_editorplugin_method_add_control_to_dock"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_control_to_dock</strong>(slot: <reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference>, control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, shortcut: <reference internal="True" refuri="class_shortcut#class-shortcut"><inline classes="std std-ref">Shortcut</inline></reference> = null) <reference internal="True" refid="class-editorplugin-method-add-control-to-dock"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将控件添加到特定的停靠槽位（选项见 <reference internal="True" refid="enum-editorplugin-dockslot"><inline classes="std std-ref">DockSlot</inline></reference>）。</paragraph>
            <paragraph>如果重新放置了停靠面板，并且只要该插件处于活动状态，编辑器就会在以后的会话中保存停靠面板的位置。</paragraph>
            <paragraph>停用插件后，请确保使用 <reference internal="True" refid="class-editorplugin-method-remove-control-from-docks"><inline classes="std std-ref">remove_control_from_docks</inline></reference> 移除自定义控件，并使用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 将其释放。</paragraph>
            <paragraph>你还可以指定快捷键参数。如果停靠面板位于底部面板，那么按下该快捷键就会切换面板的可见性（否则快捷键不会影响面板）。示例见“编辑器设置”中的默认编辑器底部面板快捷键。按照惯例都使用了 <literal classes="kbd">Alt</literal> 修饰键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-custom-type"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-custom-type" names="class_editorplugin_method_add_custom_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_custom_type</strong>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, base: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-custom-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个自定义类型，它将出现在节点或资源的列表中。可以选择传递一个图标。</paragraph>
            <paragraph>选择给定的节点或资源时，将实例化基本类型（例如“Node3D”、“Control”、“Resource”），然后脚本将被加载并将其设置为该对象。</paragraph>
            <paragraph><strong>注意：</strong>基本类型是该类型的类层次继承的基本引擎类，而不是任何自定义类型的父类。</paragraph>
            <paragraph>可以使用虚方法 <reference internal="True" refid="class-editorplugin-private-method-handles"><inline classes="std std-ref">_handles</inline></reference> 通过检查脚本或使用 <literal>is</literal> 关键字来检查你的自定义对象是否正在被编辑。</paragraph>
            <paragraph>在运行时，这将是一个带有脚本的简单对象，因此不需要调用该函数。</paragraph>
            <paragraph><strong>注意：</strong>以这种方式添加的自定义类型不是真正的类。它们只是使用特定脚本创建节点的助手。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-debugger-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-debugger-plugin" names="class_editorplugin_method_add_debugger_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_debugger_plugin</strong>(script: <reference internal="True" refuri="class_editordebuggerplugin#class-editordebuggerplugin"><inline classes="std std-ref">EditorDebuggerPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-debugger-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个 <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> 作为调试器插件添加到调试器。该脚本必须扩展 <reference internal="True" refuri="class_editordebuggerplugin#class-editordebuggerplugin"><inline classes="std std-ref">EditorDebuggerPlugin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-export-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-export-plugin" names="class_editorplugin_method_add_export_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_export_plugin</strong>(plugin: <reference internal="True" refuri="class_editorexportplugin#class-editorexportplugin"><inline classes="std std-ref">EditorExportPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-export-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个新的 <reference internal="True" refuri="class_editorexportplugin#class-editorexportplugin"><inline classes="std std-ref">EditorExportPlugin</inline></reference>。导出插件是用来在项目被导出时执行任务的。</paragraph>
            <paragraph>有关如何注册插件的示例，请参见 <reference internal="True" refid="class-editorplugin-method-add-inspector-plugin"><inline classes="std std-ref">add_inspector_plugin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-import-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-import-plugin" names="class_editorplugin_method_add_import_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_import_plugin</strong>(importer: <reference internal="True" refuri="class_editorimportplugin#class-editorimportplugin"><inline classes="std std-ref">EditorImportPlugin</inline></reference>, first_priority: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-editorplugin-method-add-import-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个新的 <reference internal="True" refuri="class_editorimportplugin#class-editorimportplugin"><inline classes="std std-ref">EditorImportPlugin</inline></reference>。导入插件用于将自定义的和不受支持的资产，作为一种自定义 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 类型导入。</paragraph>
            <paragraph>如果 <literal>first_priority</literal> 是 <literal>true</literal>，则该新的导入插件被首先插入列表中，并优先于预先存在的插件。</paragraph>
            <paragraph><strong>注意：</strong>如果要导入自定义 3D 资产格式，请改用 <reference internal="True" refid="class-editorplugin-method-add-scene-format-importer-plugin"><inline classes="std std-ref">add_scene_format_importer_plugin</inline></reference>。</paragraph>
            <paragraph>有关如何注册插件的示例，请参见 <reference internal="True" refid="class-editorplugin-method-add-inspector-plugin"><inline classes="std std-ref">add_inspector_plugin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-inspector-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-inspector-plugin" names="class_editorplugin_method_add_inspector_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_inspector_plugin</strong>(plugin: <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin"><inline classes="std std-ref">EditorInspectorPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-inspector-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个新的 <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin"><inline classes="std std-ref">EditorInspectorPlugin</inline></reference>。检查器插件用于扩展 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference>，并为对象的属性提供自定义配置工具。</paragraph>
            <paragraph><strong>注意：</strong>当 <strong>EditorPlugin</strong> 被禁用时，请始终使用 <reference internal="True" refid="class-editorplugin-method-remove-inspector-plugin"><inline classes="std std-ref">remove_inspector_plugin</inline></reference> 移除已注册的 <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin"><inline classes="std std-ref">EditorInspectorPlugin</inline></reference>，以防止泄漏和意外行为。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">const MyInspectorPlugin = preload("res://addons/your_addon/path/to/your/script.gd")
var inspector_plugin = MyInspectorPlugin.new()

func _enter_tree():
    add_inspector_plugin(inspector_plugin)

func _exit_tree():
    remove_inspector_plugin(inspector_plugin)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-node-3d-gizmo-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-node-3d-gizmo-plugin" names="class_editorplugin_method_add_node_3d_gizmo_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_node_3d_gizmo_plugin</strong>(plugin: <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-node-3d-gizmo-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个新的 <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>。小工具插件用于将自定义小工具添加到 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 的 3D 预览视图。</paragraph>
            <paragraph>有关如何注册插件的示例，请参阅 <reference internal="True" refid="class-editorplugin-method-add-inspector-plugin"><inline classes="std std-ref">add_inspector_plugin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-resource-conversion-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-resource-conversion-plugin" names="class_editorplugin_method_add_resource_conversion_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_resource_conversion_plugin</strong>(plugin: <reference internal="True" refuri="class_editorresourceconversionplugin#class-editorresourceconversionplugin"><inline classes="std std-ref">EditorResourceConversionPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-resource-conversion-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个新的 <reference internal="True" refuri="class_editorresourceconversionplugin#class-editorresourceconversionplugin"><inline classes="std std-ref">EditorResourceConversionPlugin</inline></reference>。资源转换插件用于将自定义资源转换器添加到编辑器检查器。</paragraph>
            <paragraph>有关如何创建资源转换插件的示例，请参阅 <reference internal="True" refuri="class_editorresourceconversionplugin#class-editorresourceconversionplugin"><inline classes="std std-ref">EditorResourceConversionPlugin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-scene-format-importer-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-scene-format-importer-plugin" names="class_editorplugin_method_add_scene_format_importer_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_scene_format_importer_plugin</strong>(scene_format_importer: <reference internal="True" refuri="class_editorsceneformatimporter#class-editorsceneformatimporter"><inline classes="std std-ref">EditorSceneFormatImporter</inline></reference>, first_priority: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-editorplugin-method-add-scene-format-importer-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个新的 <reference internal="True" refuri="class_editorsceneformatimporter#class-editorsceneformatimporter"><inline classes="std std-ref">EditorSceneFormatImporter</inline></reference>。场景导入器用于将自定义格式的 3D 资产导入为场景。</paragraph>
            <paragraph>如果 <literal>first_priority</literal> 为 <literal>true</literal>，则这个新的导入插件会被插入到列表的首位，优先于预先存在的插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-scene-post-import-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-scene-post-import-plugin" names="class_editorplugin_method_add_scene_post_import_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_scene_post_import_plugin</strong>(scene_import_plugin: <reference internal="True" refuri="class_editorscenepostimportplugin#class-editorscenepostimportplugin"><inline classes="std std-ref">EditorScenePostImportPlugin</inline></reference>, first_priority: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-editorplugin-method-add-scene-post-import-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加 <reference internal="True" refuri="class_editorscenepostimportplugin#class-editorscenepostimportplugin"><inline classes="std std-ref">EditorScenePostImportPlugin</inline></reference>。这些插件能够在导入对话框中添加新的选项，自定义 3D 资产的导入过程。</paragraph>
            <paragraph>如果 <literal>first_priority</literal> 为 <literal>true</literal>，则这个新的导入插件会被插入到列表的首位，优先于预先存在的插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-tool-menu-item"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-tool-menu-item" names="class_editorplugin_method_add_tool_menu_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_tool_menu_item</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-tool-menu-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在<strong>项目 &gt; 工具</strong>中添加名为 <literal>name</literal> 的自定义菜单项。点击时会调用所提供的 <literal>callable</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-tool-submenu-item"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-tool-submenu-item" names="class_editorplugin_method_add_tool_submenu_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_tool_submenu_item</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, submenu: <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-tool-submenu-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在<strong>项目 &gt; 工具</strong>中添加名为 <literal>name</literal> 的自定义 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 子菜单。请在清理插件时调用 <reference internal="True" refid="class-editorplugin-method-remove-tool-menu-item"><inline classes="std std-ref">remove_tool_menu_item</inline></reference> 移除该菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-translation-parser-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-translation-parser-plugin" names="class_editorplugin_method_add_translation_parser_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_translation_parser_plugin</strong>(parser: <reference internal="True" refuri="class_editortranslationparserplugin#class-editortranslationparserplugin"><inline classes="std std-ref">EditorTranslationParserPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-translation-parser-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>注册一个自定义翻译解析器插件，用于从自定义文件中提取可翻译的字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-add-undo-redo-inspector-hook-callback"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-add-undo-redo-inspector-hook-callback" names="class_editorplugin_method_add_undo_redo_inspector_hook_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_undo_redo_inspector_hook_callback</strong>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-editorplugin-method-add-undo-redo-inspector-hook-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当在检查器中修改属性时，将一个回调函数挂钩到撤消/重做动作创建中。例如，这允许保存在修改给定属性时可能丢失的其他属性。</paragraph>
            <paragraph>该回调函数应该有 4 个参数：<reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <literal>undo_redo</literal>、<reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <literal>modified_object</literal>、<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <literal>property</literal> 和 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <literal>new_value</literal>。它们分别是检查器使用的 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 对象、当前修改的对象、修改的属性的名称和该属性即将采用的新值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-get-editor-interface"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-get-editor-interface" names="class_editorplugin_method_get_editor_interface"><reference internal="True" refuri="class_editorinterface#class-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference> <strong>get_editor_interface</strong>() <reference internal="True" refid="class-editorplugin-method-get-editor-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> <reference internal="True" refuri="class_editorinterface#class-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference> is a global singleton and can be accessed directly by its name.</paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_editorinterface#class-editorinterface"><inline classes="std std-ref">EditorInterface</inline></reference> 单例实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-get-export-as-menu"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-get-export-as-menu" names="class_editorplugin_method_get_export_as_menu"><reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> <strong>get_export_as_menu</strong>() <reference internal="True" refid="class-editorplugin-method-get-export-as-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回<strong>场景 &gt; 另存为...</strong>下的 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-get-plugin-version"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-get-plugin-version" names="class_editorplugin_method_get_plugin_version"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_plugin_version</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-method-get-plugin-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>提供在 <literal>plugin.cfg</literal> 配置文件中声明的插件版本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-get-script-create-dialog"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-get-script-create-dialog" names="class_editorplugin_method_get_script_create_dialog"><reference internal="True" refuri="class_scriptcreatedialog#class-scriptcreatedialog"><inline classes="std std-ref">ScriptCreateDialog</inline></reference> <strong>get_script_create_dialog</strong>() <reference internal="True" refid="class-editorplugin-method-get-script-create-dialog"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取用于创建脚本的编辑器对话框。</paragraph>
            <paragraph><strong>注意：</strong>用户可以在使用前对其进行配置。</paragraph>
            <paragraph><strong>警告：</strong>移除和释放这个节点将使编辑器的一部分失去作用，并可能导致崩溃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-get-undo-redo"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-get-undo-redo" names="class_editorplugin_method_get_undo_redo"><reference internal="True" refuri="class_editorundoredomanager#class-editorundoredomanager"><inline classes="std std-ref">EditorUndoRedoManager</inline></reference> <strong>get_undo_redo</strong>() <reference internal="True" refid="class-editorplugin-method-get-undo-redo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取撤消/重做对象。编辑器中的大多数操作都是可以撤消的，因此请使用此对象来确保在需要时执行此操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-hide-bottom-panel"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-hide-bottom-panel" names="class_editorplugin_method_hide_bottom_panel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>hide_bottom_panel</strong>() <reference internal="True" refid="class-editorplugin-method-hide-bottom-panel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>最小化底部面板。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-make-bottom-panel-item-visible"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-make-bottom-panel-item-visible" names="class_editorplugin_method_make_bottom_panel_item_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>make_bottom_panel_item_visible</strong>(item: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-editorplugin-method-make-bottom-panel-item-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使底部面板中的一个特定项目可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-queue-save-layout"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-queue-save-layout" names="class_editorplugin_method_queue_save_layout"><abbreviation explanation="无返回值。">void</abbreviation> <strong>queue_save_layout</strong>() <reference internal="True" refid="class-editorplugin-method-queue-save-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>排队保存游戏项目的编辑器布局。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-autoload-singleton"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-autoload-singleton" names="class_editorplugin_method_remove_autoload_singleton"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_autoload_singleton</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-autoload-singleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从列表中移除自动加载 <literal>name</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-control-from-bottom-panel"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-control-from-bottom-panel" names="class_editorplugin_method_remove_control_from_bottom_panel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_control_from_bottom_panel</strong>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-control-from-bottom-panel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从底部面板上移除该控件。必须手动调用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 释放该控件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-control-from-container"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-control-from-container" names="class_editorplugin_method_remove_control_from_container"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_control_from_container</strong>(container: <reference internal="True" refid="enum-editorplugin-customcontrolcontainer"><inline classes="std std-ref">CustomControlContainer</inline></reference>, control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-control-from-container"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从指定的容器中移除该控件。必须手动调用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 释放该控件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-control-from-docks"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-control-from-docks" names="class_editorplugin_method_remove_control_from_docks"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_control_from_docks</strong>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-control-from-docks"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从停靠面板中移除该控件。必须手动调用 <reference internal="True" refuri="class_node#class-node-method-queue-free"><inline classes="std std-ref">Node.queue_free</inline></reference> 释放该控件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-custom-type"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-custom-type" names="class_editorplugin_method_remove_custom_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_custom_type</strong>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-custom-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-custom-type"><inline classes="std std-ref">add_custom_type</inline></reference> 添加的自定义类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-debugger-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-debugger-plugin" names="class_editorplugin_method_remove_debugger_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_debugger_plugin</strong>(script: <reference internal="True" refuri="class_editordebuggerplugin#class-editordebuggerplugin"><inline classes="std std-ref">EditorDebuggerPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-debugger-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从调试器中移除带有给定脚本的调试器插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-export-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-export-plugin" names="class_editorplugin_method_remove_export_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_export_plugin</strong>(plugin: <reference internal="True" refuri="class_editorexportplugin#class-editorexportplugin"><inline classes="std std-ref">EditorExportPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-export-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-export-plugin"><inline classes="std std-ref">add_export_plugin</inline></reference> 注册的导出插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-import-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-import-plugin" names="class_editorplugin_method_remove_import_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_import_plugin</strong>(importer: <reference internal="True" refuri="class_editorimportplugin#class-editorimportplugin"><inline classes="std std-ref">EditorImportPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-import-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-import-plugin"><inline classes="std std-ref">add_import_plugin</inline></reference> 注册的导入插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-inspector-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-inspector-plugin" names="class_editorplugin_method_remove_inspector_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_inspector_plugin</strong>(plugin: <reference internal="True" refuri="class_editorinspectorplugin#class-editorinspectorplugin"><inline classes="std std-ref">EditorInspectorPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-inspector-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-import-plugin"><inline classes="std std-ref">add_import_plugin</inline></reference> 注册的检查器插件</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-node-3d-gizmo-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-node-3d-gizmo-plugin" names="class_editorplugin_method_remove_node_3d_gizmo_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_node_3d_gizmo_plugin</strong>(plugin: <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-node-3d-gizmo-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-node-3d-gizmo-plugin"><inline classes="std std-ref">add_node_3d_gizmo_plugin</inline></reference> 注册的小工具插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-resource-conversion-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-resource-conversion-plugin" names="class_editorplugin_method_remove_resource_conversion_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_resource_conversion_plugin</strong>(plugin: <reference internal="True" refuri="class_editorresourceconversionplugin#class-editorresourceconversionplugin"><inline classes="std std-ref">EditorResourceConversionPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-resource-conversion-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-resource-conversion-plugin"><inline classes="std std-ref">add_resource_conversion_plugin</inline></reference> 注册的资源转换插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-scene-format-importer-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-scene-format-importer-plugin" names="class_editorplugin_method_remove_scene_format_importer_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_scene_format_importer_plugin</strong>(scene_format_importer: <reference internal="True" refuri="class_editorsceneformatimporter#class-editorsceneformatimporter"><inline classes="std std-ref">EditorSceneFormatImporter</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-scene-format-importer-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-scene-format-importer-plugin"><inline classes="std std-ref">add_scene_format_importer_plugin</inline></reference> 注册的场景格式导入器插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-scene-post-import-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-scene-post-import-plugin" names="class_editorplugin_method_remove_scene_post_import_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_scene_post_import_plugin</strong>(scene_import_plugin: <reference internal="True" refuri="class_editorscenepostimportplugin#class-editorscenepostimportplugin"><inline classes="std std-ref">EditorScenePostImportPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-scene-post-import-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-scene-post-import-plugin"><inline classes="std std-ref">add_scene_post_import_plugin</inline></reference> 注册的 <reference internal="True" refuri="class_editorscenepostimportplugin#class-editorscenepostimportplugin"><inline classes="std std-ref">EditorScenePostImportPlugin</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-tool-menu-item"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-tool-menu-item" names="class_editorplugin_method_remove_tool_menu_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_tool_menu_item</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-tool-menu-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从<strong>项目 &gt; 工具</strong>中移除名为 <literal>name</literal> 的菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-translation-parser-plugin"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-translation-parser-plugin" names="class_editorplugin_method_remove_translation_parser_plugin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_translation_parser_plugin</strong>(parser: <reference internal="True" refuri="class_editortranslationparserplugin#class-editortranslationparserplugin"><inline classes="std std-ref">EditorTranslationParserPlugin</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-translation-parser-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-translation-parser-plugin"><inline classes="std std-ref">add_translation_parser_plugin</inline></reference> 注册的自定义翻译解析器插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-remove-undo-redo-inspector-hook-callback"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-remove-undo-redo-inspector-hook-callback" names="class_editorplugin_method_remove_undo_redo_inspector_hook_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_undo_redo_inspector_hook_callback</strong>(callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-editorplugin-method-remove-undo-redo-inspector-hook-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除由 <reference internal="True" refid="class-editorplugin-method-add-undo-redo-inspector-hook-callback"><inline classes="std std-ref">add_undo_redo_inspector_hook_callback</inline></reference> 添加的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-set-dock-tab-icon"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-set-dock-tab-icon" names="class_editorplugin_method_set_dock_tab_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_dock_tab_icon</strong>(control: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-editorplugin-method-set-dock-tab-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the tab icon for the given control in a dock slot. Setting to <literal>null</literal> removes the icon.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-set-force-draw-over-forwarding-enabled"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-set-force-draw-over-forwarding-enabled" names="class_editorplugin_method_set_force_draw_over_forwarding_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_force_draw_over_forwarding_enabled</strong>() <reference internal="True" refid="class-editorplugin-method-set-force-draw-over-forwarding-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更新视口时，为 2D 编辑器启用 <reference internal="True" refid="class-editorplugin-private-method-forward-canvas-force-draw-over-viewport"><inline classes="std std-ref">_forward_canvas_force_draw_over_viewport</inline></reference> 的调用，为 3D 编辑器启用 <reference internal="True" refid="class-editorplugin-private-method-forward-3d-force-draw-over-viewport"><inline classes="std std-ref">_forward_3d_force_draw_over_viewport</inline></reference> 的调用。只需调用该方法一次，它将永久适用于该插件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-set-input-event-forwarding-always-enabled"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-set-input-event-forwarding-always-enabled" names="class_editorplugin_method_set_input_event_forwarding_always_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_event_forwarding_always_enabled</strong>() <reference internal="True" refid="class-editorplugin-method-set-input-event-forwarding-always-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果始终希望从 3D 视图屏幕在 <reference internal="True" refid="class-editorplugin-private-method-forward-3d-gui-input"><inline classes="std std-ref">_forward_3d_gui_input</inline></reference> 中接收输入，请使用该方法。如果插件想要在场景中使用射线投射，它可能特别有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorplugin-method-update-overlays"></target>
            <paragraph classes="classref-method" ids="class-editorplugin-method-update-overlays" names="class_editorplugin_method_update_overlays"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>update_overlays</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editorplugin-method-update-overlays"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>更新 2D 和 3D 编辑器视口的叠加层。会导致方法 <reference internal="True" refid="class-editorplugin-private-method-forward-canvas-draw-over-viewport"><inline classes="std std-ref">_forward_canvas_draw_over_viewport</inline></reference>、<reference internal="True" refid="class-editorplugin-private-method-forward-canvas-force-draw-over-viewport"><inline classes="std std-ref">_forward_canvas_force_draw_over_viewport</inline></reference>、<reference internal="True" refid="class-editorplugin-private-method-forward-3d-draw-over-viewport"><inline classes="std std-ref">_forward_3d_draw_over_viewport</inline></reference> 和 <reference internal="True" refid="class-editorplugin-private-method-forward-3d-force-draw-over-viewport"><inline classes="std std-ref">_forward_3d_force_draw_over_viewport</inline></reference> 被调用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
