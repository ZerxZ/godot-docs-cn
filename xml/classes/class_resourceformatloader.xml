<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_resourceformatloader.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ResourceFormatLoader.xml.</comment>
    <target refid="class-resourceformatloader"></target>
    <section ids="resourceformatloader class-resourceformatloader" names="resourceformatloader class_resourceformatloader">
        <title>ResourceFormatLoader</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>从文件中加载特定资源类型。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Godot 在编辑器或导出的游戏中使用 ResourceFormatLoaders 来加载资源。它们通过 <reference internal="True" refuri="class_resourceloader#class-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference> 单例自动查询，或在加载具有内部依赖项的资源时自动查询。每种文件类型可以作为不同的资源类型加载，因此在引擎中注册多个 ResourceFormatLoaders。</paragraph>
            <paragraph>扩展此类可让你定义自己的加载器。请确保遵守文档中记录的返回类型和值。你应该使用 <literal>class_name</literal> 给它一个全局类名以进行注册。像内置的 ResourceFormatLoaders 一样，当加载其处理的类型的资源时，它将自动被调用。你还可以实现 <reference internal="True" refuri="class_resourceformatsaver#class-resourceformatsaver"><inline classes="std std-ref">ResourceFormatSaver</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果你需要的资源类型存在，但 Godot 无法加载其格式，则也可以扩展 <reference internal="True" refuri="class_editorimportplugin#class-editorimportplugin"><inline classes="std std-ref">EditorImportPlugin</inline></reference>。选择哪种方法取决于该格式是否适用于最终导出的游戏。例如，最好首先将 <literal>.png</literal> 纹理作为 <literal>.ctex</literal>（<reference internal="True" refuri="class_compressedtexture2d#class-compressedtexture2d"><inline classes="std std-ref">CompressedTexture2D</inline></reference>）导入，以便在图形卡上能更高效的加载它们。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="244"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-exists"><inline classes="std std-ref">_exists</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-get-classes-used"><inline classes="std std-ref">_get_classes_used</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-get-dependencies"><inline classes="std std-ref">_get_dependencies</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> add_types <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-get-resource-script-class"><inline classes="std std-ref">_get_resource_script_class</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-get-resource-type"><inline classes="std std-ref">_get_resource_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-get-resource-uid"><inline classes="std std-ref">_get_resource_uid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-handles-type"><inline classes="std std-ref">_handles_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-load"><inline classes="std std-ref">_load</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> original_path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_sub_threads, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> cache_mode <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-recognize-path"><inline classes="std std-ref">_recognize_path</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-resourceformatloader-private-method-rename-dependencies"><inline classes="std std-ref">_rename_dependencies</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> renames <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-resourceformatloader-cachemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-resourceformatloader-cachemode" names="enum_resourceformatloader_cachemode">enum <strong>CacheMode</strong>:</paragraph>
            <target refid="class-resourceformatloader-constant-cache-mode-ignore"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceformatloader-constant-cache-mode-ignore" names="class_resourceformatloader_constant_cache_mode_ignore"><reference internal="True" refid="enum-resourceformatloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> <strong>CACHE_MODE_IGNORE</strong> = <literal>0</literal></paragraph>
            <target refid="class-resourceformatloader-constant-cache-mode-reuse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceformatloader-constant-cache-mode-reuse" names="class_resourceformatloader_constant_cache_mode_reuse"><reference internal="True" refid="enum-resourceformatloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> <strong>CACHE_MODE_REUSE</strong> = <literal>1</literal></paragraph>
            <target refid="class-resourceformatloader-constant-cache-mode-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-resourceformatloader-constant-cache-mode-replace" names="class_resourceformatloader_constant_cache_mode_replace"><reference internal="True" refid="enum-resourceformatloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference> <strong>CACHE_MODE_REPLACE</strong> = <literal>2</literal></paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-resourceformatloader-private-method-exists"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-exists" names="class_resourceformatloader_private_method__exists"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_exists</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-get-classes-used"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-get-classes-used" names="class_resourceformatloader_private_method__get_classes_used"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_classes_used</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-get-dependencies"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-get-dependencies" names="class_resourceformatloader_private_method__get_dependencies"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_dependencies</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> add_types <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果实现，则获取给定资源的依赖项。如果 <literal>add_types</literal> 为 <literal>true</literal>，路径应追加 <literal>::TypeName</literal>，其中 <literal>TypeName</literal> 是依赖项的类名。</paragraph>
            <paragraph><strong>注意：</strong>脚本定义的自定义资源类型并不为 <reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> 所知，因此可能只能为它们返回 <literal>"Resource"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-get-recognized-extensions"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-get-recognized-extensions" names="class_resourceformatloader_private_method__get_recognized_extensions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_recognized_extensions</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取该加载器能够读取的文件的扩展名列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-get-resource-script-class"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-get-resource-script-class" names="class_resourceformatloader_private_method__get_resource_script_class"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_resource_script_class</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回与给定的 <literal>path</literal> 下的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 关联的脚本类名称。如果资源没有脚本或脚本不是一个命名的类，则应返回 <literal>""</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-get-resource-type"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-get-resource-type" names="class_resourceformatloader_private_method__get_resource_type"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_resource_type</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取与给定路径相关的资源的类名。如果加载器不能处理它，它应该返回 <literal>""</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> 不知道脚本定义的自定义资源类型，因此你可能只为它们返回 <literal>"Resource"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-get-resource-uid"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-get-resource-uid" names="class_resourceformatloader_private_method__get_resource_uid"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_resource_uid</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-handles-type"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-handles-type" names="class_resourceformatloader_private_method__handles_type"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_handles_type</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>说明这个加载器可以加载哪个资源类。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> 不知道脚本定义的自定义资源类型，因此你可以只为它们处理 <literal>"Resource"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-load"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-load" names="class_resourceformatloader_private_method__load"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_load</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> original_path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_sub_threads, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> cache_mode <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>当引擎发现该加载程序兼容时加载资源。如果加载的资源是导入的结果，<literal>original_path</literal> 将以源文件为目标。成功时返回一个 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 对象，失败时返回一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 常量。</paragraph>
            <paragraph><literal>cache_mode</literal> 属性定义加载资源时是否以及如何使用或更新缓存。有关详细信息，请参阅 <reference internal="True" refid="enum-resourceformatloader-cachemode"><inline classes="std std-ref">CacheMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-recognize-path"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-recognize-path" names="class_resourceformatloader_private_method__recognize_path"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_recognize_path</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>判断该加载器是否应对于给定类型从其资源路径加载资源。</paragraph>
            <paragraph>如果未实现，则默认行为是检查路径的扩展名是否在<reference internal="True" refid="class-resourceformatloader-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference>提供的范围内，以及类型是否在<reference internal="True" refid="class-resourceformatloader-private-method-get-resource-type"><inline classes="std std-ref">_get_resource_type</inline></reference>提供的范围内。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-resourceformatloader-private-method-rename-dependencies"></target>
            <paragraph classes="classref-method" ids="class-resourceformatloader-private-method-rename-dependencies" names="class_resourceformatloader_private_method__rename_dependencies"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_rename_dependencies</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> renames <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果被实现，将重命名给定资源中的依赖项并保存它。<literal>renames</literal> 是一个字典 <literal>{ String =&gt; String }</literal>，将旧依赖路径映射到新路径。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，失败时返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 常量。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
