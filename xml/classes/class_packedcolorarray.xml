<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_packedcolorarray.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/PackedColorArray.xml.</comment>
    <target refid="class-packedcolorarray"></target>
    <section ids="packedcolorarray class-packedcolorarray" names="packedcolorarray class_packedcolorarray">
        <title>PackedColorArray</title>
        <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 紧缩数组。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>专门设计用于存放 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的数组。数据是紧密存放的，因此能够在数组较大时节省内存。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="143"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-constructor-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-constructor-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-constructor-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="137"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-append"><inline classes="std std-ref">append</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-append-array"><inline classes="std std-ref">append_array</inline></reference> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> array <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-bsearch"><inline classes="std std-ref">bsearch</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> before=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-count"><inline classes="std std-ref">count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-fill"><inline classes="std std-ref">fill</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-find"><inline classes="std std-ref">find</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-has"><inline classes="std std-ref">has</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-insert"><inline classes="std std-ref">insert</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> at_index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-push-back"><inline classes="std std-ref">push_back</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-remove-at"><inline classes="std std-ref">remove_at</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-resize"><inline classes="std std-ref">resize</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> new_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-reverse"><inline classes="std std-ref">reverse</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-rfind"><inline classes="std std-ref">rfind</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from=-1 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-set"><inline classes="std std-ref">set</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-size"><inline classes="std std-ref">size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-slice"><inline classes="std std-ref">slice</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> begin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end=2147483647 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-sort"><inline classes="std std-ref">sort</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-method-to-byte-array"><inline classes="std std-ref">to_byte_array</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="140"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-operator-neq-packedcolorarray"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-operator-sum-packedcolorarray"><inline classes="std std-ref">operator +</inline></reference> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-operator-eq-packedcolorarray"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedcolorarray-operator-idx-int"><inline classes="std std-ref">operator []</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-packedcolorarray-constructor-packedcolorarray"></target>
            <paragraph classes="classref-constructor" ids="class-packedcolorarray-constructor-packedcolorarray" names="class_packedcolorarray_constructor_packedcolorarray"><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>PackedColorArray</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造空的 <strong>PackedColorArray</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>PackedColorArray</strong> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>PackedColorArray</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>PackedColorArray</strong> <strong>(</strong> <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造新的 <strong>PackedColorArray</strong>。你也可以传一个通用 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 进行转换。</paragraph>
            <paragraph><strong>注意：</strong>使用元素初始化 <strong>PackedColorArray</strong> 时，必须使用元素为 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var array = PackedColorArray([Color(0.1, 0.2, 0.3), Color(0.4, 0.5, 0.6)])</literal_block>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-packedcolorarray-method-append"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-append" names="class_packedcolorarray_method_append"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>append</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向数组末尾追加一个元素（<reference internal="True" refid="class-packedcolorarray-method-push-back"><inline classes="std std-ref">push_back</inline></reference> 的别名）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-append-array"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-append-array" names="class_packedcolorarray_method_append_array">void <strong>append_array</strong> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> array <strong>)</strong></paragraph>
            <paragraph>在该数组的末尾追加一个 <strong>PackedColorArray</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-bsearch"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-bsearch" names="class_packedcolorarray_method_bsearch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bsearch</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> before=true <strong>)</strong></paragraph>
            <paragraph>使用二进法查找已有值的索引（如果该值尚未存在于数组中，则为保持排序顺序的插入索引）。传递 <literal>before</literal> 说明符是可选的。如果该参数为 <literal>false</literal>，则返回的索引位于数组中该值的所有已有的条目之后。</paragraph>
            <paragraph><strong>注意：</strong>在未排序的数组上调用 <reference internal="True" refid="class-packedcolorarray-method-bsearch"><inline classes="std std-ref">bsearch</inline></reference> 会产生预料之外的行为。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-clear"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-clear" names="class_packedcolorarray_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清空数组。相当于调用 <reference internal="True" refid="class-packedcolorarray-method-resize"><inline classes="std std-ref">resize</inline></reference> 时指定大小为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-count"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-count" names="class_packedcolorarray_method_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>count</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回元素在数组中出现的次数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-duplicate"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-duplicate" names="class_packedcolorarray_method_duplicate"><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>duplicate</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>创建该数组的副本，并将该副本返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-fill"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-fill" names="class_packedcolorarray_method_fill">void <strong>fill</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>将数组中的所有元素都设为给定的值。通常与 <reference internal="True" refid="class-packedcolorarray-method-resize"><inline classes="std std-ref">resize</inline></reference> 一起使用，创建给定大小的数组并初始化元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-find"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-find" names="class_packedcolorarray_method_find"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>在数组中搜索值并返回其索引，如果未找到则返回 <literal>-1</literal> 。可选地，可以传递起始搜索索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-has"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-has" names="class_packedcolorarray_method_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该数组包含 <literal>value</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-insert"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-insert" names="class_packedcolorarray_method_insert"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>insert</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> at_index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>在数组中给定的位置插入一个新元素。这个位置必须是有效的，或者是在数组的末端（<literal>idx == size()</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-is-empty"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-is-empty" names="class_packedcolorarray_method_is_empty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_empty</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>该数组为空时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-push-back"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-push-back" names="class_packedcolorarray_method_push_back"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>push_back</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>将一个值添加到数组中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-remove-at"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-remove-at" names="class_packedcolorarray_method_remove_at">void <strong>remove_at</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
            <paragraph>从数组中删除位于索引的元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-resize"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-resize" names="class_packedcolorarray_method_resize"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>resize</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> new_size <strong>)</strong></paragraph>
            <paragraph>设置数组的大小。如果数组被增大，则保留数组末端的元素。如果数组被缩小，则将数组截断到新的大小。调用一次 <reference internal="True" refid="class-packedcolorarray-method-resize"><inline classes="std std-ref">resize</inline></reference> 并分配新值比逐个添加新元素要快。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-reverse"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-reverse" names="class_packedcolorarray_method_reverse">void <strong>reverse</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将数组中的元素逆序排列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-rfind"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-rfind" names="class_packedcolorarray_method_rfind"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>rfind</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from=-1 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>逆序搜索数组。还可以传递起始搜索位置索引。如果为负，则起始索引被视为相对于数组的结尾。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-set"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-set" names="class_packedcolorarray_method_set">void <strong>set</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>更改给定索引处的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-size"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-size" names="class_packedcolorarray_method_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回数组中元素的个数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-slice"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-slice" names="class_packedcolorarray_method_slice"><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>slice</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> begin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> end=2147483647 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <strong>PackedColorArray</strong> 的切片，是从 <literal>begin</literal>（含）到 <literal>end</literal>（不含）的全新 <strong>PackedColorArray</strong>。</paragraph>
            <paragraph><literal>begin</literal> 和 <literal>end</literal> 的绝对值会按数组大小进行限制，所以 <literal>end</literal> 的默认值会切到数组大小为止（即 <literal>arr.slice(1)</literal> 是 <literal>arr.slice(1, arr.size())</literal> 的简写）。</paragraph>
            <paragraph>如果 <literal>begin</literal> 或 <literal>end</literal> 为负，则表示相对于数组的末尾（即 <literal>arr.slice(0, -2)</literal> 是 <literal>arr.slice(0, arr.size() - 2)</literal> 的简写）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-sort"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-sort" names="class_packedcolorarray_method_sort">void <strong>sort</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将该数组中的元素按升序排列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-method-to-byte-array"></target>
            <paragraph classes="classref-method" ids="class-packedcolorarray-method-to-byte-array" names="class_packedcolorarray_method_to_byte_array"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>to_byte_array</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>，每个颜色都被编码为字节。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-packedcolorarray-operator-neq-packedcolorarray"></target>
            <paragraph classes="classref-operator" ids="class-packedcolorarray-operator-neq-packedcolorarray" names="class_packedcolorarray_operator_neq_packedcolorarray"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果数组内容不同，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-operator-sum-packedcolorarray"></target>
            <paragraph classes="classref-operator" ids="class-packedcolorarray-operator-sum-packedcolorarray" names="class_packedcolorarray_operator_sum_packedcolorarray"><reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> <strong>operator +</strong> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>返回新的 <strong>PackedColorArray</strong>，新数组的内容为此数组在末尾加上 <literal>right</literal>。为了提高性能，请考虑改用 <reference internal="True" refid="class-packedcolorarray-method-append-array"><inline classes="std std-ref">append_array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-operator-eq-packedcolorarray"></target>
            <paragraph classes="classref-operator" ids="class-packedcolorarray-operator-eq-packedcolorarray" names="class_packedcolorarray_operator_eq_packedcolorarray"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个数组的内容相同，即对应索引号的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedcolorarray-operator-idx-int"></target>
            <paragraph classes="classref-operator" ids="class-packedcolorarray-operator-idx-int" names="class_packedcolorarray_operator_idx_int"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>operator []</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
            <paragraph>返回索引 <literal>index</literal> 处的<reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。负数索引可以从末端开始访问元素。使用超出数组范围的索引将导致出错。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
