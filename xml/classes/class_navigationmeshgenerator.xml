<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_navigationmeshgenerator.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/NavigationMeshGenerator.xml.</comment>
    <target refid="class-navigationmeshgenerator"></target>
    <section ids="navigationmeshgenerator class-navigationmeshgenerator" names="navigationmeshgenerator class_navigationmeshgenerator">
        <title>NavigationMeshGenerator</title>
        <paragraph><strong>已弃用：</strong> This class may be changed or removed in future versions.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>对导航网格进行创建和清理的辅助类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类负责创建和清除用作 <reference internal="True" refuri="class_navigationregion3d#class-navigationregion3d"><inline classes="std std-ref">NavigationRegion3D</inline></reference> 内的 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> 资源的 3D 导航网格。<strong>NavigationMeshGenerator</strong> 在 2D 中的用途非常有限，因为导航网格烘焙过程需要 3D 节点类型和 3D 源几何体来解析。</paragraph>
            <paragraph>整个导航网格的烘焙最好在单独的线程中完成，因为所涉及的体素化、碰撞测试和网格优化步骤是非常缓慢且性能密集型的操作。</paragraph>
            <paragraph>导航网格的烘焙分成若干步进行，最终结果取决于 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> 资源的 3D 源几何体和该资源的属性。第一步是从根节点开始，并根据 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> 的属性从 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 收集所有有效的 3D 源几何体节点。第二步会对所有收集的节点进行解析，以获得其相关的 3D 几何体数据，合并构造成一个 3D 网格。由于可解析的对象类型众多，从普通的 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 到 <reference internal="True" refuri="class_csgshape3d#class-csgshape3d"><inline classes="std std-ref">CSGShape3D</inline></reference> 再到各种 <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>，其中某些收集几何数据的操作可能会触发 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 和 <reference internal="True" refuri="class_physicsserver3d#class-physicsserver3d"><inline classes="std std-ref">PhysicsServer3D</inline></reference> 的同步。服务器同步通常涉及 <reference internal="True" refuri="class_mutex#class-mutex"><inline classes="std std-ref">Mutex</inline></reference> 锁定以确保线程安全，这会对烘焙时间或帧率产生负面影响。可解析对象过多，以及与多线程服务器之间的连续同步，都会大幅影响烘焙时间。而如果对象数量较少，但都是非常大而且复杂的对象，那么就会在为服务器准备数据上花费时间，这可能会明显拖延下一帧渲染。一般而言，可解析对象的总数与它们各自的大小和复杂度之间应该达到平衡，防止出现帧率问题和超长的烘焙时间。合并后的网格后续会被交给 Recast 导航对象，通过在网格的包围区域周边创建体素世界，来测试适合 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> 代理属性的可行走地形的源几何体。</paragraph>
            <paragraph>最终的导航网格然后将被返回并被存储在 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> 中，用作 <reference internal="True" refuri="class_navigationregion3d#class-navigationregion3d"><inline classes="std std-ref">NavigationRegion3D</inline></reference> 节点内的资源。</paragraph>
            <paragraph><strong>注意：</strong>使用网格不仅定义可行走的表面的导航烘焙，而且定义障碍的导航烘焙，并不总会有效。在处理网格源几何体时，导航烘焙没有什么是几何体“位于内部”的概念，这是有意为之的。根据当前的烘焙参数，一旦障碍网格足够大，大到足以在内部容纳一个导航网格区域，则烘焙时将生成位于障碍源几何体网格内部的导航网格区域。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/navigation/navigation_using_navigationmeshes"><inline classes="doc">使用 NavigationMesh</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="371"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmeshgenerator-method-bake"><inline classes="std std-ref">bake</inline></reference>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>, root_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmeshgenerator-method-bake-from-source-geometry-data"><inline classes="std std-ref">bake_from_source_geometry_data</inline></reference>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>, source_geometry_data: <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable())</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmeshgenerator-method-clear"><inline classes="std std-ref">clear</inline></reference>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationmeshgenerator-method-parse-source-geometry-data"><inline classes="std std-ref">parse_source_geometry_data</inline></reference>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>, source_geometry_data: <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference>, root_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable())</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-navigationmeshgenerator-method-bake"></target>
            <paragraph classes="classref-method" ids="class-navigationmeshgenerator-method-bake" names="class_navigationmeshgenerator_method_bake"><abbreviation explanation="无返回值。">void</abbreviation> <strong>bake</strong>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>, root_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-navigationmeshgenerator-method-bake"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> This method is deprecated due to core threading changes. To upgrade existing code, first create a <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference> resource. Use this resource with <reference internal="True" refid="class-navigationmeshgenerator-method-parse-source-geometry-data"><inline classes="std std-ref">parse_source_geometry_data</inline></reference> to parse the <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> for nodes that should contribute to the navigation mesh baking. The <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> parsing needs to happen on the main thread. After the parsing is finished use the resource with <reference internal="True" refid="class-navigationmeshgenerator-method-bake-from-source-geometry-data"><inline classes="std std-ref">bake_from_source_geometry_data</inline></reference> to bake a navigation mesh.</paragraph>
            <paragraph>使用从 <literal>root_node</literal> 开始收集的源几何图形来烘焙 <literal>navigation_mesh</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmeshgenerator-method-bake-from-source-geometry-data"></target>
            <paragraph classes="classref-method" ids="class-navigationmeshgenerator-method-bake-from-source-geometry-data" names="class_navigationmeshgenerator_method_bake_from_source_geometry_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>bake_from_source_geometry_data</strong>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>, source_geometry_data: <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable()) <reference internal="True" refid="class-navigationmeshgenerator-method-bake-from-source-geometry-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <literal>source_geometry_data</literal> 中提供的数据对 <literal>navigation_mesh</literal> 进行烘焙。烘焙过程结束后，会调用可选的 <literal>callback</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmeshgenerator-method-clear"></target>
            <paragraph classes="classref-method" ids="class-navigationmeshgenerator-method-clear" names="class_navigationmeshgenerator_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>) <reference internal="True" refid="class-navigationmeshgenerator-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从提供的 <literal>navigation_mesh</literal> 资源中移除所有多边形和顶点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationmeshgenerator-method-parse-source-geometry-data"></target>
            <paragraph classes="classref-method" ids="class-navigationmeshgenerator-method-parse-source-geometry-data" names="class_navigationmeshgenerator_method_parse_source_geometry_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>parse_source_geometry_data</strong>(navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>, source_geometry_data: <reference internal="True" refuri="class_navigationmeshsourcegeometrydata3d#class-navigationmeshsourcegeometrydata3d"><inline classes="std std-ref">NavigationMeshSourceGeometryData3D</inline></reference>, root_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, callback: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> = Callable()) <reference internal="True" refid="class-navigationmeshgenerator-method-parse-source-geometry-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>navigation_mesh</literal> 的属性解析 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 中的源几何体。会使用解析的结果对提供的 <literal>source_geometry_data</literal> 资源进行更新。后续可以在使用 <reference internal="True" refid="class-navigationmeshgenerator-method-bake-from-source-geometry-data"><inline classes="std std-ref">bake_from_source_geometry_data</inline></reference> 烘焙导航网格时使用该资源。解析过程完成后，会调用可选的 <literal>callback</literal>。</paragraph>
            <paragraph><strong>注意：</strong>因为 SceneTree 并不是线程安全的，所以这个函数需要在主线程执行或使用延迟调用。</paragraph>
            <paragraph><strong>注意：</strong>从 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源读取数据数组虽然很方便，但会对帧率造成负面影响。这些数据需要从 GPU 获取，卡住正在处理的 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference>。出于性能考量，请优先使用碰撞形状或在代码中创建完整的数据数组等方法。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
