<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_compositoreffect.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CompositorEffect.xml.</comment>
    <target refid="class-compositoreffect"></target>
    <section ids="compositoreffect class-compositoreffect" names="compositoreffect class_compositoreffect">
        <title>CompositorEffect</title>
        <paragraph><strong>实验性：</strong> The implementation may change as more of the rendering internals are exposed over time.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于创建自定义渲染效果的资源。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这种资源定义的是自定义渲染效果，可以通过视口的 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 应用到 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 上。可以实现在渲染管道的给定阶段进行渲染期间调用的回调，并允许插入其他阶段。请注意，该回调是在渲染线程上执行的。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="69"></colspec>
                    <colspec colwidth="89"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-property-access-resolved-color"><inline classes="std std-ref">access_resolved_color</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-property-access-resolved-depth"><inline classes="std std-ref">access_resolved_depth</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-property-effect-callback-type"><inline classes="std std-ref">effect_callback_type</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-property-enabled"><inline classes="std std-ref">enabled</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-property-needs-motion-vectors"><inline classes="std std-ref">needs_motion_vectors</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-property-needs-normal-roughness"><inline classes="std std-ref">needs_normal_roughness</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-property-needs-separate-specular"><inline classes="std std-ref">needs_separate_specular</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="194"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-compositoreffect-private-method-render-callback"><inline classes="std std-ref">_render_callback</inline></reference>(effect_callback_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, render_data: <reference internal="True" refuri="class_renderdata#class-renderdata"><inline classes="std std-ref">RenderData</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-compositoreffect-effectcallbacktype"></target>
            <paragraph classes="classref-enumeration" ids="enum-compositoreffect-effectcallbacktype" names="enum_compositoreffect_effectcallbacktype">enum <strong>EffectCallbackType</strong>: <reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-compositoreffect-constant-effect-callback-type-pre-opaque"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-compositoreffect-constant-effect-callback-type-pre-opaque" names="class_compositoreffect_constant_effect_callback_type_pre_opaque"><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>EFFECT_CALLBACK_TYPE_PRE_OPAQUE</strong> = <literal>0</literal></paragraph>
            <paragraph>该回调在我们的不透明渲染阶段之前、在深度前置阶段之后（如果适用）调用。</paragraph>
            <target refid="class-compositoreffect-constant-effect-callback-type-post-opaque"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-compositoreffect-constant-effect-callback-type-post-opaque" names="class_compositoreffect_constant_effect_callback_type_post_opaque"><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>EFFECT_CALLBACK_TYPE_POST_OPAQUE</strong> = <literal>1</literal></paragraph>
            <paragraph>该回调在我们的不透明渲染阶段之后、天空渲染之前调用。</paragraph>
            <target refid="class-compositoreffect-constant-effect-callback-type-post-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-compositoreffect-constant-effect-callback-type-post-sky" names="class_compositoreffect_constant_effect_callback_type_post_sky"><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>EFFECT_CALLBACK_TYPE_POST_SKY</strong> = <literal>2</literal></paragraph>
            <paragraph>在渲染天空之后、创建后台缓冲区之前（如果启用，则在次表面散射和/或屏幕空间反射之前）调用回调。</paragraph>
            <target refid="class-compositoreffect-constant-effect-callback-type-pre-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-compositoreffect-constant-effect-callback-type-pre-transparent" names="class_compositoreffect_constant_effect_callback_type_pre_transparent"><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT</strong> = <literal>3</literal></paragraph>
            <paragraph>在我们的透明渲染阶段之前、渲染天空并且创建了后台缓冲区之后，调用回调。</paragraph>
            <target refid="class-compositoreffect-constant-effect-callback-type-post-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-compositoreffect-constant-effect-callback-type-post-transparent" names="class_compositoreffect_constant_effect_callback_type_post_transparent"><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>EFFECT_CALLBACK_TYPE_POST_TRANSPARENT</strong> = <literal>4</literal></paragraph>
            <paragraph>该回调在我们的透明渲染阶段之后、任何构建后期效果和输出到渲染目标之前调用。</paragraph>
            <target refid="class-compositoreffect-constant-effect-callback-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-compositoreffect-constant-effect-callback-type-max" names="class_compositoreffect_constant_effect_callback_type_max"><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>EFFECT_CALLBACK_TYPE_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-compositoreffect-property-access-resolved-color"></target>
            <paragraph classes="classref-property" ids="class-compositoreffect-property-access-resolved-color" names="class_compositoreffect_property_access_resolved_color"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>access_resolved_color</strong> <reference internal="True" refid="class-compositoreffect-property-access-resolved-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_access_resolved_color</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_access_resolved_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal> 并且启用了 MSAA，则会在执行该效果之前触发颜色缓冲的解析。</paragraph>
            <paragraph><strong>注意：</strong>要在 <reference internal="True" refid="class-compositoreffect-private-method-render-callback"><inline classes="std std-ref">_render_callback</inline></reference> 中访问解析后的缓冲，请使用：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var render_scene_buffers : RenderSceneBuffersRD = render_data.get_render_scene_buffers()
var color_buffer = render_scene_buffers.get_texture("render_buffers", "color")</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-compositoreffect-property-access-resolved-depth"></target>
            <paragraph classes="classref-property" ids="class-compositoreffect-property-access-resolved-depth" names="class_compositoreffect_property_access_resolved_depth"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>access_resolved_depth</strong> <reference internal="True" refid="class-compositoreffect-property-access-resolved-depth"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_access_resolved_depth</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_access_resolved_depth</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal> 并且启用了 MSAA，则会在执行该效果之前触发深度缓冲的解析。</paragraph>
            <paragraph><strong>注意：</strong>要在 <reference internal="True" refid="class-compositoreffect-private-method-render-callback"><inline classes="std std-ref">_render_callback</inline></reference> 中访问解析后的缓冲，请使用：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var render_scene_buffers : RenderSceneBuffersRD = render_data.get_render_scene_buffers()
var depth_buffer = render_scene_buffers.get_texture("render_buffers", "depth")</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-compositoreffect-property-effect-callback-type"></target>
            <paragraph classes="classref-property" ids="class-compositoreffect-property-effect-callback-type" names="class_compositoreffect_property_effect_callback_type"><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>effect_callback_type</strong> <reference internal="True" refid="class-compositoreffect-property-effect-callback-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_effect_callback_type</strong>(value: <reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-compositoreffect-effectcallbacktype"><inline classes="std std-ref">EffectCallbackType</inline></reference> <strong>get_effect_callback_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>实现的效果类型，决定在渲染的哪个阶段调用回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-compositoreffect-property-enabled"></target>
            <paragraph classes="classref-property" ids="class-compositoreffect-property-enabled" names="class_compositoreffect_property_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enabled</strong> <reference internal="True" refid="class-compositoreffect-property-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该渲染效果会应用到所有相关视口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-compositoreffect-property-needs-motion-vectors"></target>
            <paragraph classes="classref-property" ids="class-compositoreffect-property-needs-motion-vectors" names="class_compositoreffect_property_needs_motion_vectors"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>needs_motion_vectors</strong> <reference internal="True" refid="class-compositoreffect-property-needs-motion-vectors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_needs_motion_vectors</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_needs_motion_vectors</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会在不透明渲染状态下触发运动向量的计算。</paragraph>
            <paragraph><strong>**注意：</strong>要在 <reference internal="True" refid="class-compositoreffect-private-method-render-callback"><inline classes="std std-ref">_render_callback</inline></reference> 中访问运动向量缓冲，请使用：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var render_scene_buffers : RenderSceneBuffersRD = render_data.get_render_scene_buffers()
var motion_buffer = render_scene_buffers.get_velocity_texture()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-compositoreffect-property-needs-normal-roughness"></target>
            <paragraph classes="classref-property" ids="class-compositoreffect-property-needs-normal-roughness" names="class_compositoreffect_property_needs_normal_roughness"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>needs_normal_roughness</strong> <reference internal="True" refid="class-compositoreffect-property-needs-normal-roughness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_needs_normal_roughness</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_needs_normal_roughness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会在深度预阶段触发法线和粗糙度数据的输出，仅适用于 Forward+ 渲染器。</paragraph>
            <paragraph><strong>**注意：</strong>要在 <reference internal="True" refid="class-compositoreffect-private-method-render-callback"><inline classes="std std-ref">_render_callback</inline></reference> 中访问粗糙度缓冲，请使用：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var render_scene_buffers : RenderSceneBuffersRD = render_data.get_render_scene_buffers()
var roughness_buffer = render_scene_buffers.get_texture("forward_clustered", "normal_roughness")</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-compositoreffect-property-needs-separate-specular"></target>
            <paragraph classes="classref-property" ids="class-compositoreffect-property-needs-separate-specular" names="class_compositoreffect_property_needs_separate_specular"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>needs_separate_specular</strong> <reference internal="True" refid="class-compositoreffect-property-needs-separate-specular"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_needs_separate_specular</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_needs_separate_specular</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会触发镜面反射数据渲染至独立缓冲，在应用效果后进行混合，仅适用于 Forward+ 渲染器。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-compositoreffect-private-method-render-callback"></target>
            <paragraph classes="classref-method" ids="class-compositoreffect-private-method-render-callback" names="class_compositoreffect_private_method__render_callback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_render_callback</strong>(effect_callback_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, render_data: <reference internal="True" refuri="class_renderdata#class-renderdata"><inline classes="std std-ref">RenderData</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-compositoreffect-private-method-render-callback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请使用自定义的渲染代码实现该方法。<literal>effect_callback_type</literal> 应当与 <reference internal="True" refid="class-compositoreffect-property-effect-callback-type"><inline classes="std std-ref">effect_callback_type</inline></reference> 中指定的效果回调类型一致。可以通过 <literal>render_data</literal> 访问渲染状态，这个状态只有在渲染时有效，不应该存储。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
