<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_time.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Time.xml.</comment>
    <target refid="class-time"></target>
    <section ids="time class-time" names="time class_time">
        <title>Time</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于处理时间数据的单例。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Time 单例可以转换各种不同格式的时间，也可以从系统获取时间信息。</paragraph>
            <paragraph>这个类尽可能多地符合了 ISO 8601 标准。所有日期都遵循“外推格里历”。因此 <literal>1582-10-15</literal> 的前一天是 <literal>1582-10-14</literal>，而不是 <literal>1582-10-04</literal>。公元 1 年的前一年（即公元前 1 年）是数字 <literal>0</literal>，再往前的一年（公元前 2 年）是 <literal>-1</literal>，以此类推。</paragraph>
            <paragraph>转换方法假设“时区相同”，不会自动处理时区或 DST（夏令时）的转换。不会对闰秒进行处理，如果需要必须手动处理。“Z”等后缀也没有处理，你需要进行手动剥除。</paragraph>
            <paragraph>从系统获取时间信息时，时间可能是本地时间或 UTC 时间，取决于 <literal>utc</literal> 参数。不过 <reference internal="True" refid="class-time-method-get-unix-time-from-system"><inline classes="std std-ref">get_unix_time_from_system</inline></reference> 方法始终使用 UTC，因为返回的是从 <reference name="Unix 时间原点" refuri="https://zh.wikipedia.org/zh-cn/UNIX%E6%97%B6%E9%97%B4">Unix 时间原点</reference>起经过的秒数。</paragraph>
            <paragraph><strong>重要：</strong><literal>_from_system</literal> 系列方法使用的是系统始终，用户可以自行设置。<strong>千万不要</strong>使用该方法进行精确的时间计算，因为计算结果可能受到用户或操作系统的自动调整的影响。精确时间的计算<strong>请始终使用</strong> <reference internal="True" refid="class-time-method-get-ticks-usec"><inline classes="std std-ref">get_ticks_usec</inline></reference> 或 <reference internal="True" refid="class-time-method-get-ticks-msec"><inline classes="std std-ref">get_ticks_msec</inline></reference>，可以保证单调性（即不会变小）。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="204"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-date-dict-from-system"><inline classes="std std-ref">get_date_dict_from_system</inline></reference>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-date-dict-from-unix-time"><inline classes="std std-ref">get_date_dict_from_unix_time</inline></reference>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-date-string-from-system"><inline classes="std std-ref">get_date_string_from_system</inline></reference>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-date-string-from-unix-time"><inline classes="std std-ref">get_date_string_from_unix_time</inline></reference>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-datetime-dict-from-datetime-string"><inline classes="std std-ref">get_datetime_dict_from_datetime_string</inline></reference>(datetime: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, weekday: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-datetime-dict-from-system"><inline classes="std std-ref">get_datetime_dict_from_system</inline></reference>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-datetime-dict-from-unix-time"><inline classes="std std-ref">get_datetime_dict_from_unix_time</inline></reference>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-datetime-string-from-datetime-dict"><inline classes="std std-ref">get_datetime_string_from_datetime_dict</inline></reference>(datetime: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, use_space: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-datetime-string-from-system"><inline classes="std std-ref">get_datetime_string_from_system</inline></reference>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, use_space: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-datetime-string-from-unix-time"><inline classes="std std-ref">get_datetime_string_from_unix_time</inline></reference>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_space: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-offset-string-from-offset-minutes"><inline classes="std std-ref">get_offset_string_from_offset_minutes</inline></reference>(offset_minutes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-ticks-msec"><inline classes="std std-ref">get_ticks_msec</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-ticks-usec"><inline classes="std std-ref">get_ticks_usec</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-time-dict-from-system"><inline classes="std std-ref">get_time_dict_from_system</inline></reference>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-time-dict-from-unix-time"><inline classes="std std-ref">get_time_dict_from_unix_time</inline></reference>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-time-string-from-system"><inline classes="std std-ref">get_time_string_from_system</inline></reference>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-time-string-from-unix-time"><inline classes="std std-ref">get_time_string_from_unix_time</inline></reference>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-time-zone-from-system"><inline classes="std std-ref">get_time_zone_from_system</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-unix-time-from-datetime-dict"><inline classes="std std-ref">get_unix_time_from_datetime_dict</inline></reference>(datetime: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-unix-time-from-datetime-string"><inline classes="std std-ref">get_unix_time_from_datetime_string</inline></reference>(datetime: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-time-method-get-unix-time-from-system"><inline classes="std std-ref">get_unix_time_from_system</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-time-month"></target>
            <paragraph classes="classref-enumeration" ids="enum-time-month" names="enum_time_month">enum <strong>Month</strong>: <reference internal="True" refid="enum-time-month"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-time-constant-month-january"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-january" names="class_time_constant_month_january"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_JANUARY</strong> = <literal>1</literal></paragraph>
            <paragraph>一月份，使用数字 <literal>01</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-february"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-february" names="class_time_constant_month_february"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_FEBRUARY</strong> = <literal>2</literal></paragraph>
            <paragraph>二月份，使用数字 <literal>02</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-march"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-march" names="class_time_constant_month_march"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_MARCH</strong> = <literal>3</literal></paragraph>
            <paragraph>三月份，使用数字 <literal>03</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-april"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-april" names="class_time_constant_month_april"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_APRIL</strong> = <literal>4</literal></paragraph>
            <paragraph>四月份，使用数字 <literal>04</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-may"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-may" names="class_time_constant_month_may"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_MAY</strong> = <literal>5</literal></paragraph>
            <paragraph>五月份，使用数字 <literal>05</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-june"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-june" names="class_time_constant_month_june"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_JUNE</strong> = <literal>6</literal></paragraph>
            <paragraph>六月份，使用数字 <literal>06</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-july"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-july" names="class_time_constant_month_july"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_JULY</strong> = <literal>7</literal></paragraph>
            <paragraph>七月份，使用数字 <literal>07</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-august"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-august" names="class_time_constant_month_august"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_AUGUST</strong> = <literal>8</literal></paragraph>
            <paragraph>八月份，使用数字 <literal>08</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-september"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-september" names="class_time_constant_month_september"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_SEPTEMBER</strong> = <literal>9</literal></paragraph>
            <paragraph>九月份，使用数字 <literal>09</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-october"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-october" names="class_time_constant_month_october"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_OCTOBER</strong> = <literal>10</literal></paragraph>
            <paragraph>十月份，使用数字 <literal>10</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-november"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-november" names="class_time_constant_month_november"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_NOVEMBER</strong> = <literal>11</literal></paragraph>
            <paragraph>十一月份，使用数字 <literal>11</literal> 表示。</paragraph>
            <target refid="class-time-constant-month-december"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-month-december" names="class_time_constant_month_december"><reference internal="True" refid="enum-time-month"><inline classes="std std-ref">Month</inline></reference> <strong>MONTH_DECEMBER</strong> = <literal>12</literal></paragraph>
            <paragraph>十二月份，使用数字 <literal>12</literal> 表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-time-weekday"></target>
            <paragraph classes="classref-enumeration" ids="enum-time-weekday" names="enum_time_weekday">enum <strong>Weekday</strong>: <reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-time-constant-weekday-sunday"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-weekday-sunday" names="class_time_constant_weekday_sunday"><reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">Weekday</inline></reference> <strong>WEEKDAY_SUNDAY</strong> = <literal>0</literal></paragraph>
            <paragraph>星期日，使用数字 <literal>0</literal> 表示。</paragraph>
            <target refid="class-time-constant-weekday-monday"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-weekday-monday" names="class_time_constant_weekday_monday"><reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">Weekday</inline></reference> <strong>WEEKDAY_MONDAY</strong> = <literal>1</literal></paragraph>
            <paragraph>星期一，使用数字 <literal>1</literal> 表示。</paragraph>
            <target refid="class-time-constant-weekday-tuesday"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-weekday-tuesday" names="class_time_constant_weekday_tuesday"><reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">Weekday</inline></reference> <strong>WEEKDAY_TUESDAY</strong> = <literal>2</literal></paragraph>
            <paragraph>星期二，使用数字 <literal>2</literal> 表示。</paragraph>
            <target refid="class-time-constant-weekday-wednesday"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-weekday-wednesday" names="class_time_constant_weekday_wednesday"><reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">Weekday</inline></reference> <strong>WEEKDAY_WEDNESDAY</strong> = <literal>3</literal></paragraph>
            <paragraph>星期三，使用数字 <literal>3</literal> 表示。</paragraph>
            <target refid="class-time-constant-weekday-thursday"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-weekday-thursday" names="class_time_constant_weekday_thursday"><reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">Weekday</inline></reference> <strong>WEEKDAY_THURSDAY</strong> = <literal>4</literal></paragraph>
            <paragraph>星期四，使用数字 <literal>4</literal> 表示。</paragraph>
            <target refid="class-time-constant-weekday-friday"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-weekday-friday" names="class_time_constant_weekday_friday"><reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">Weekday</inline></reference> <strong>WEEKDAY_FRIDAY</strong> = <literal>5</literal></paragraph>
            <paragraph>星期五，使用数字 <literal>5</literal> 表示。</paragraph>
            <target refid="class-time-constant-weekday-saturday"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-time-constant-weekday-saturday" names="class_time_constant_weekday_saturday"><reference internal="True" refid="enum-time-weekday"><inline classes="std std-ref">Weekday</inline></reference> <strong>WEEKDAY_SATURDAY</strong> = <literal>6</literal></paragraph>
            <paragraph>星期六，使用数字 <literal>6</literal> 表示。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-time-method-get-date-dict-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-date-dict-from-system" names="class_time_method_get_date_dict_from_system"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_date_dict_from_system</strong>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-date-dict-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以字典的形式返回当前时间，包含的键为：<literal>year</literal>、<literal>month</literal>、<literal>day</literal> 和 <literal>weekday</literal>。</paragraph>
            <paragraph>当 <literal>utc</literal> 为 <literal>false</literal> 时，返回的是系统的本地时间，否则为 UTC 时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-date-dict-from-unix-time"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-date-dict-from-unix-time" names="class_time_method_get_date_dict_from_unix_time"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_date_dict_from_unix_time</strong>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-date-dict-from-unix-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 Unix 时间戳转换为字典，包含的键为：<literal>year</literal>、<literal>month</literal>、<literal>day</literal>、<literal>weekday</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-date-string-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-date-string-from-system" names="class_time_method_get_date_string_from_system"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_date_string_from_system</strong>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-date-string-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 ISO 8601 日期字符串的形式返回当前日期（YYYY-MM-DD）。</paragraph>
            <paragraph>当 <literal>utc</literal> 为 <literal>false</literal> 时，返回的是系统的本地时间，否则为 UTC 时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-date-string-from-unix-time"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-date-string-from-unix-time" names="class_time_method_get_date_string_from_unix_time"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_date_string_from_unix_time</strong>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-date-string-from-unix-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 Unix 时间戳转换为 ISO 8601 日期字符串（YYYY-MM-DD）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-datetime-dict-from-datetime-string"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-datetime-dict-from-datetime-string" names="class_time_method_get_datetime_dict_from_datetime_string"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_datetime_dict_from_datetime_string</strong>(datetime: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, weekday: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-datetime-dict-from-datetime-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 ISO 8601 日期和时间字符串（YYYY-MM-DDTHH:MM:SS）转换为字典，包含的键为：<literal>year</literal>、<literal>month</literal>、<literal>day</literal>、<literal>weekday</literal>、<literal>hour</literal>、<literal>minute</literal>、<literal>second</literal>。</paragraph>
            <paragraph>当 <literal>weekday</literal> 为 <literal>false</literal> 时，不包含 <literal>weekday</literal> 记录（计算花费相对较大）。</paragraph>
            <paragraph><strong>注意：</strong>时间字符串中的小数会被静默忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-datetime-dict-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-datetime-dict-from-system" names="class_time_method_get_datetime_dict_from_system"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_datetime_dict_from_system</strong>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-datetime-dict-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以字典形式返回当前日期，包含的键为：<literal>year</literal>、<literal>month</literal>、<literal>day</literal>、<literal>weekday</literal>、<literal>hour</literal>、<literal>minute</literal>、<literal>second</literal> 以及 <literal>dst</literal>（夏令时，Daylight Savings Time）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-datetime-dict-from-unix-time"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-datetime-dict-from-unix-time" names="class_time_method_get_datetime_dict_from_unix_time"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_datetime_dict_from_unix_time</strong>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-datetime-dict-from-unix-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 Unix 时间戳转换为字典，包含的键为：<literal>year</literal>、<literal>month</literal>、<literal>day</literal>、<literal>weekday</literal>、<literal>hour</literal>、<literal>minute</literal> 和 <literal>second</literal>。</paragraph>
            <paragraph>如果 Unix 时间戳是当前时间，则返回的字典值将与 <reference internal="True" refid="class-time-method-get-datetime-dict-from-system"><inline classes="std std-ref">get_datetime_dict_from_system</inline></reference> 相同，夏令时除外，因为它无法根据纪元确定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-datetime-string-from-datetime-dict"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-datetime-string-from-datetime-dict" names="class_time_method_get_datetime_string_from_datetime_dict"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_datetime_string_from_datetime_dict</strong>(datetime: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, use_space: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-datetime-string-from-datetime-dict"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的时间值字典转换为 ISO 8601 日期和时间字符串（YYYY-MM-DDTHH:MM:SS）。</paragraph>
            <paragraph>给定的字典可以包含以下键：<literal>year</literal>、<literal>month</literal>、<literal>day</literal>、<literal>hour</literal>、<literal>minute</literal>、<literal>second</literal>。其他的记录（包括 <literal>dst</literal>）都会被忽略。</paragraph>
            <paragraph>字典为空时将返回 <literal>0</literal>。如果省略了部分键，默认使用 Unix 纪元时间戳 0（1970-01-01 的 00:00:00）的对应部分。</paragraph>
            <paragraph>当 <literal>use_space</literal> 为 <literal>true</literal> 时，将使用空格代替中间的字母 T。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-datetime-string-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-datetime-string-from-system" names="class_time_method_get_datetime_string_from_system"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_datetime_string_from_system</strong>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, use_space: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-datetime-string-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 ISO 8601 日期和时间字符串的形式返回当前日期和时间（YYYY-MM-DDTHH:MM:SS）。</paragraph>
            <paragraph>当 <literal>utc</literal> 为 <literal>false</literal> 时，返回的是系统的本地时间，否则为 UTC 时间。</paragraph>
            <paragraph>当 <literal>use_space</literal> 为 <literal>true</literal> 时，将使用空格代替中间的字母 T。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-datetime-string-from-unix-time"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-datetime-string-from-unix-time" names="class_time_method_get_datetime_string_from_unix_time"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_datetime_string_from_unix_time</strong>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, use_space: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-datetime-string-from-unix-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 Unix 时间戳转换为 ISO 8601 日期和时间字符串（YYYY-MM-DDTHH:MM:SS）。</paragraph>
            <paragraph>当 <literal>use_space</literal> 为 <literal>true</literal> 时，将使用空格代替中间的字母 T。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-offset-string-from-offset-minutes"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-offset-string-from-offset-minutes" names="class_time_method_get_offset_string_from_offset_minutes"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_offset_string_from_offset_minutes</strong>(offset_minutes: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-offset-string-from-offset-minutes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的时区偏移分钟数转换为时区偏移字符串。例如，-480 返回 "-08:00"、345 返回 "+05:45"、0 返回 "+00:00"。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-ticks-msec"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-ticks-msec" names="class_time_method_get_ticks_msec"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_ticks_msec</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-ticks-msec"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从引擎启动开始所经过的时间，单位为毫秒。</paragraph>
            <paragraph>始终为正数或 0，使用 64 位值（会在约 5 亿年后绕回）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-ticks-usec"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-ticks-usec" names="class_time_method_get_ticks_usec"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_ticks_usec</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-ticks-usec"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从引擎启动开始所经过的时间，单位为微秒。</paragraph>
            <paragraph>始终为正数或 0，使用 64 位值（会在约 50 万年后绕回）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-time-dict-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-time-dict-from-system" names="class_time_method_get_time_dict_from_system"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_time_dict_from_system</strong>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-time-dict-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以字典的形式返回当前时间，包含的键为：<literal>hour</literal>、<literal>minute</literal>、<literal>second</literal>。</paragraph>
            <paragraph>当 <literal>utc</literal> 为 <literal>false</literal> 时，返回的是系统的本地时间，否则为 UTC 时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-time-dict-from-unix-time"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-time-dict-from-unix-time" names="class_time_method_get_time_dict_from_unix_time"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_time_dict_from_unix_time</strong>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-time-dict-from-unix-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的时间转换为字典，包含的键为：时 <literal>hour</literal>、分 <literal>minute</literal>、秒 <literal>second</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-time-string-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-time-string-from-system" names="class_time_method_get_time_string_from_system"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_time_string_from_system</strong>(utc: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-time-string-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 ISO 8601 时间字符串的形式返回当前时间（HH:MM:SS）。</paragraph>
            <paragraph>当 <literal>utc</literal> 为 <literal>false</literal> 时，返回的是系统的本地时间，否则为 UTC 时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-time-string-from-unix-time"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-time-string-from-unix-time" names="class_time_method_get_time_string_from_unix_time"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_time_string_from_unix_time</strong>(unix_time_val: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-time-string-from-unix-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 Unix 时间戳转换为 ISO 8601 时间字符串（HH:MM:SS）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-time-zone-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-time-zone-from-system" names="class_time_method_get_time_zone_from_system"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_time_zone_from_system</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-time-zone-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the current time zone as a dictionary of keys: <literal>bias</literal> and <literal>name</literal>.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>bias</literal> is the offset from UTC in minutes, since not all time zones are multiples of an hour from UTC.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>name</literal> is the localized name of the time zone, according to the OS locale settings of the current user.</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-unix-time-from-datetime-dict"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-unix-time-from-datetime-dict" names="class_time_method_get_unix_time_from_datetime_dict"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_unix_time_from_datetime_dict</strong>(datetime: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-unix-time-from-datetime-dict"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将时间值字典转换为 Unix 时间戳。</paragraph>
            <paragraph>给定的字典可以包含以下键：<literal>year</literal>、<literal>month</literal>、<literal>day</literal>、<literal>hour</literal>、<literal>minute</literal>、<literal>second</literal>。其他的记录（包括 <literal>dst</literal>）都会被忽略。</paragraph>
            <paragraph>字典为空时将返回 <literal>0</literal>。如果省略了部分键，默认使用 Unix 纪元时间戳 0（1970-01-01 的 00:00:00）的对应部分。</paragraph>
            <paragraph>你可以将 <reference internal="True" refid="class-time-method-get-datetime-dict-from-unix-time"><inline classes="std std-ref">get_datetime_dict_from_unix_time</inline></reference> 的输出直接传给本函数，得到的就是最初的输入。</paragraph>
            <paragraph><strong>注意：</strong>Unix 时间戳通常是 UTC 的。本方法不会做任何时区转换，所以时间戳的时区与给定的日期时间字典相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-unix-time-from-datetime-string"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-unix-time-from-datetime-string" names="class_time_method_get_unix_time_from_datetime_string"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_unix_time_from_datetime_string</strong>(datetime: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-unix-time-from-datetime-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 ISO 8601 日期和/或时间字符串转换为 Unix 时间戳。字符串中可以只包含日期、只包含时间，也可以两者都包含。</paragraph>
            <paragraph><strong>注意：</strong>Unix 时间戳通常是 UTC 的。本方法不会做任何时区转换，所以时间戳的时区与给定的日期时间字符串相同。</paragraph>
            <paragraph><strong>注意：</strong>时间字符串中的小数会被静默忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-time-method-get-unix-time-from-system"></target>
            <paragraph classes="classref-method" ids="class-time-method-get-unix-time-from-system" names="class_time_method_get_unix_time_from_system"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_unix_time_from_system</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-time-method-get-unix-time-from-system"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前的 Unix 时间戳，以秒为单位，基于 UTC 系统时间。本方法由操作系统实现，返回的时间总是 UTC 的。Unix 时间戳是从 <reference name="Unix 时间原点" refuri="https://zh.wikipedia.org/zh-cn/UNIX%E6%97%B6%E9%97%B4">Unix 时间原点</reference> 1970-01-01 的 00:00:00 起经过的秒数。</paragraph>
            <paragraph><strong>注意：</strong>与其他使用整数时间戳的方法不同，这个方法返回的是 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 类型的时间戳，可以表示比秒更高的精度。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
