<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_ninepatchrect.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/NinePatchRect.xml.</comment>
    <target refid="class-ninepatchrect"></target>
    <section ids="ninepatchrect class-ninepatchrect" names="ninepatchrect class_ninepatchrect">
        <title>NinePatchRect</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>显示纹理的控件，会保持角落不变，但平铺边缘和中心。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>也叫 9 片式面板，<strong>NinePatchRect</strong> 能够根据较小的纹理，生成任何大小的干净面板。为了做到这一点，它将纹理分割成 3×3 的网格。当你缩放节点时，它会在水平或垂直方向上平铺纹理的侧边，在两个轴上平铺中心，但不会缩放或平铺角落。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="60"></colspec>
                    <colspec colwidth="86"></colspec>
                    <colspec colwidth="71"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-axis-stretch-horizontal"><inline classes="std std-ref">axis_stretch_horizontal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-axis-stretch-vertical"><inline classes="std std-ref">axis_stretch_vertical</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-draw-center"><inline classes="std std-ref">draw_center</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>mouse_filter</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-mouse-filter"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-patch-margin-bottom"><inline classes="std std-ref">patch_margin_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-patch-margin-left"><inline classes="std std-ref">patch_margin_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-patch-margin-right"><inline classes="std std-ref">patch_margin_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-patch-margin-top"><inline classes="std std-ref">patch_margin_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-region-rect"><inline classes="std std-ref">region_rect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Rect2(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-property-texture"><inline classes="std std-ref">texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="153"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-method-get-patch-margin"><inline classes="std std-ref">get_patch_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ninepatchrect-method-set-patch-margin"><inline classes="std std-ref">set_patch_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-ninepatchrect-signal-texture-changed"></target>
            <paragraph classes="classref-signal" ids="class-ninepatchrect-signal-texture-changed" names="class_ninepatchrect_signal_texture_changed"><strong>texture_changed</strong>() <reference internal="True" refid="class-ninepatchrect-signal-texture-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当节点的纹理发生变化时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-ninepatchrect-axisstretchmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-ninepatchrect-axisstretchmode" names="enum_ninepatchrect_axisstretchmode">enum <strong>AxisStretchMode</strong>: <reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-ninepatchrect-constant-axis-stretch-mode-stretch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ninepatchrect-constant-axis-stretch-mode-stretch" names="class_ninepatchrect_constant_axis_stretch_mode_stretch"><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference> <strong>AXIS_STRETCH_MODE_STRETCH</strong> = <literal>0</literal></paragraph>
            <paragraph>在 NinePatchRect 上拉伸中心纹理。这可能会导致纹理失真。</paragraph>
            <target refid="class-ninepatchrect-constant-axis-stretch-mode-tile"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ninepatchrect-constant-axis-stretch-mode-tile" names="class_ninepatchrect_constant_axis_stretch_mode_tile"><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference> <strong>AXIS_STRETCH_MODE_TILE</strong> = <literal>1</literal></paragraph>
            <paragraph>在 NinePatchRect 上重复中心纹理。这不会导致任何可见的失真。 纹理必须是无缝的，这样才能在边缘之间不显示伪影。</paragraph>
            <target refid="class-ninepatchrect-constant-axis-stretch-mode-tile-fit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ninepatchrect-constant-axis-stretch-mode-tile-fit" names="class_ninepatchrect_constant_axis_stretch_mode_tile_fit"><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference> <strong>AXIS_STRETCH_MODE_TILE_FIT</strong> = <literal>2</literal></paragraph>
            <paragraph>在 NinePatchRect 上重复中心纹理，但也会拉伸纹理以确保每个图块都完整可见。这可能会导致纹理扭曲，但少于 <reference internal="True" refid="class-ninepatchrect-constant-axis-stretch-mode-stretch"><inline classes="std std-ref">AXIS_STRETCH_MODE_STRETCH</inline></reference>。纹理必须是无缝的，这样才能在边缘之间不显示伪影。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-ninepatchrect-property-axis-stretch-horizontal"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-axis-stretch-horizontal" names="class_ninepatchrect_property_axis_stretch_horizontal"><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference> <strong>axis_stretch_horizontal</strong> = <literal>0</literal> <reference internal="True" refid="class-ninepatchrect-property-axis-stretch-horizontal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_h_axis_stretch_mode</strong>(value: <reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference> <strong>get_h_axis_stretch_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>水平拉伸/平铺时使用的拉伸模式。可能的取值见 <reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-axis-stretch-vertical"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-axis-stretch-vertical" names="class_ninepatchrect_property_axis_stretch_vertical"><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference> <strong>axis_stretch_vertical</strong> = <literal>0</literal> <reference internal="True" refid="class-ninepatchrect-property-axis-stretch-vertical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_v_axis_stretch_mode</strong>(value: <reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference> <strong>get_v_axis_stretch_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于垂直拉伸/平铺的拉伸模式。可能的取值见 <reference internal="True" refid="enum-ninepatchrect-axisstretchmode"><inline classes="std std-ref">AxisStretchMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-draw-center"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-draw-center" names="class_ninepatchrect_property_draw_center"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>draw_center</strong> = <literal>true</literal> <reference internal="True" refid="class-ninepatchrect-property-draw-center"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_center</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_draw_center_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则绘制面板的中心。否则，只画9-slice的边框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-patch-margin-bottom"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-patch-margin-bottom" names="class_ninepatchrect_property_patch_margin_bottom"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>patch_margin_bottom</strong> = <literal>0</literal> <reference internal="True" refid="class-ninepatchrect-property-patch-margin-bottom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>9-切片底行的高度。边距为 16 意味着 9-切片的底角和侧面将有 16 像素的高度。你可以单独设置所有 4 个边距值，来创建有非统一边框的面板。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-patch-margin-left"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-patch-margin-left" names="class_ninepatchrect_property_patch_margin_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>patch_margin_left</strong> = <literal>0</literal> <reference internal="True" refid="class-ninepatchrect-property-patch-margin-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>9-切片左列的宽度。边距为 16 意味着 9-切片的左角和侧面将有 16 像素的宽度。你可以单独设置所有 4 个边距值，来创建有非统一边框的面板。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-patch-margin-right"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-patch-margin-right" names="class_ninepatchrect_property_patch_margin_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>patch_margin_right</strong> = <literal>0</literal> <reference internal="True" refid="class-ninepatchrect-property-patch-margin-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>9-切片右列的宽度。边距为 16 意味着 9-切片的右角和侧面将有 16 像素的宽度。你可以单独设置所有 4 个边距值，来创建有非统一边框的面板。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-patch-margin-top"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-patch-margin-top" names="class_ninepatchrect_property_patch_margin_top"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>patch_margin_top</strong> = <literal>0</literal> <reference internal="True" refid="class-ninepatchrect-property-patch-margin-top"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>9-切片顶行的高度。边距为 16 意味着 9-切片的顶角和侧面将有 16 像素的高度。你可以单独设置所有 4 个边距值，来创建有非统一边框的面板。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-region-rect"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-region-rect" names="class_ninepatchrect_property_region_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>region_rect</strong> = <literal>Rect2(0, 0, 0, 0)</literal> <reference internal="True" refid="class-ninepatchrect-property-region-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_region_rect</strong>(value: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_region_rect</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要取样的纹理的矩形区域。如果你正在使用一个图集，使用这个属性来定义 9-切片应该使用的区域。所有其他属性都是相对于这个属性而言的。如果矩形为空，NinePatchRect 将使用整个纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-property-texture"></target>
            <paragraph classes="classref-property" ids="class-ninepatchrect-property-texture" names="class_ninepatchrect_property_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture</strong> <reference internal="True" refid="class-ninepatchrect-property-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>节点的纹理资源。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-ninepatchrect-method-get-patch-margin"></target>
            <paragraph classes="classref-method" ids="class-ninepatchrect-method-get-patch-margin" names="class_ninepatchrect_method_get_patch_margin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-ninepatchrect-method-get-patch-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的边距大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ninepatchrect-method-set-patch-margin"></target>
            <paragraph classes="classref-method" ids="class-ninepatchrect-method-set-patch-margin" names="class_ninepatchrect_method_set_patch_margin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_patch_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-ninepatchrect-method-set-patch-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的边距大小设置为 <literal>value</literal> 像素。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
