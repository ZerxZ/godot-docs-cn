<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_mainloop.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/MainLoop.xml.</comment>
    <target refid="class-mainloop"></target>
    <section ids="mainloop class-mainloop" names="mainloop class_mainloop">
        <title>MainLoop</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference></paragraph>
        <paragraph>游戏主循环的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>MainLoop</strong> 是 Godot 项目中游戏循环的抽象基类。它被 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 继承，<reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 是 Godot 项目中使用的默认游戏循环的实现，不过也可以编写和使用自己的 <strong>MainLoop</strong> 子类，来代替场景树。</paragraph>
            <paragraph>在应用程序启动时，必须向操作系统提供一个 <strong>MainLoop</strong> 实现；否则，应用程序将退出。这会自动发生（并创建一个 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference>），除非从命令行提供一个 <strong>MainLoop</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>（例如 <literal>godot -s my_loop.gd</literal>），或“主循环类型（Main Loop Type）”项目设置被覆盖。</paragraph>
            <paragraph>有一个实现简单 <strong>MainLoop</strong> 的示例脚本：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">class_name CustomMainLoop
extends MainLoop

var time_elapsed = 0

func _initialize():
    print("Initialized:")
    print("  Starting time: %s" % str(time_elapsed))

func _process(delta):
    time_elapsed += delta
    # 返回 true 结束主循环。
    return Input.get_mouse_button_mask() != 0 || Input.is_key_pressed(KEY_ESCAPE)

func _finalize():
    print("Finalized:")
    print("  End time: %s" % str(time_elapsed))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

[GlobalClass]
public partial class CustomMainLoop : MainLoop
{
    private double _timeElapsed = 0;

    public override void _Initialize()
    {
        GD.Print("Initialized:");
        GD.Print($"  Starting Time: {_timeElapsed}");
    }

    public override bool _Process(double delta)
    {
        _timeElapsed += delta;
        // 返回 true 结束主循环。
        return Input.GetMouseButtonMask() != 0 || Input.IsKeyPressed(Key.Escape);
    }

    private void _Finalize()
    {
        GD.Print("Finalized:");
        GD.Print($"  End Time: {_timeElapsed}");
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="124"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-mainloop-private-method-finalize"><inline classes="std std-ref">_finalize</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-mainloop-private-method-initialize"><inline classes="std std-ref">_initialize</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-mainloop-private-method-physics-process"><inline classes="std std-ref">_physics_process</inline></reference>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-mainloop-private-method-process"><inline classes="std std-ref">_process</inline></reference>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-mainloop-signal-on-request-permissions-result"></target>
            <paragraph classes="classref-signal" ids="class-mainloop-signal-on-request-permissions-result" names="class_mainloop_signal_on_request_permissions_result"><strong>on_request_permissions_result</strong>(permission: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, granted: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-mainloop-signal-on-request-permissions-result"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户对权限请求作出反应时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="常量">
            <title>常量</title>
            <target refid="class-mainloop-constant-notification-os-memory-warning"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-os-memory-warning" names="class_mainloop_constant_notification_os_memory_warning"><strong>NOTIFICATION_OS_MEMORY_WARNING</strong> = <literal>2009</literal> <reference internal="True" refid="class-mainloop-constant-notification-os-memory-warning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当应用程序超过其分配的内存时，从操作系统收到的通知。</paragraph>
            <paragraph>仅限 iOS 平台。</paragraph>
            <target refid="class-mainloop-constant-notification-translation-changed"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-translation-changed" names="class_mainloop_constant_notification_translation_changed"><strong>NOTIFICATION_TRANSLATION_CHANGED</strong> = <literal>2010</literal> <reference internal="True" refid="class-mainloop-constant-notification-translation-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当翻译可能发生变化时收到的通知。会在用户改变区域设置时触发。可以用来响应语言的变化，例如实时改变 UI 字符串。可配合内置的翻译支持使用，比如 <reference internal="True" refuri="class_object#class-object-method-tr"><inline classes="std std-ref">Object.tr</inline></reference>。</paragraph>
            <target refid="class-mainloop-constant-notification-wm-about"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-wm-about" names="class_mainloop_constant_notification_wm_about"><strong>NOTIFICATION_WM_ABOUT</strong> = <literal>2011</literal> <reference internal="True" refid="class-mainloop-constant-notification-wm-about"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当发出“关于”信息请求时，从操作系统收到的通知。</paragraph>
            <paragraph>仅限 macOS 平台。</paragraph>
            <target refid="class-mainloop-constant-notification-crash"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-crash" names="class_mainloop_constant_notification_crash"><strong>NOTIFICATION_CRASH</strong> = <literal>2012</literal> <reference internal="True" refid="class-mainloop-constant-notification-crash"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当引擎即将崩溃时，从Godot的崩溃处理程序收到的通知。</paragraph>
            <paragraph>如果崩溃处理程序被启用，这只会在桌面平台上实现。</paragraph>
            <target refid="class-mainloop-constant-notification-os-ime-update"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-os-ime-update" names="class_mainloop_constant_notification_os_ime_update"><strong>NOTIFICATION_OS_IME_UPDATE</strong> = <literal>2013</literal> <reference internal="True" refid="class-mainloop-constant-notification-os-ime-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当输入法引擎发生更新时，从操作系统收到的通知（例如，IME 光标位置或组成字符串的变化）。</paragraph>
            <paragraph>仅限 macOS 平台。</paragraph>
            <target refid="class-mainloop-constant-notification-application-resumed"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-application-resumed" names="class_mainloop_constant_notification_application_resumed"><strong>NOTIFICATION_APPLICATION_RESUMED</strong> = <literal>2014</literal> <reference internal="True" refid="class-mainloop-constant-notification-application-resumed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当应用程序恢复时，从操作系统收到的通知。</paragraph>
            <paragraph>具体针对 Android 和 iOS 平台。</paragraph>
            <target refid="class-mainloop-constant-notification-application-paused"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-application-paused" names="class_mainloop_constant_notification_application_paused"><strong>NOTIFICATION_APPLICATION_PAUSED</strong> = <literal>2015</literal> <reference internal="True" refid="class-mainloop-constant-notification-application-paused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>应用程序暂停时从操作系统收到的通知。</paragraph>
            <paragraph>特定于 Android 和 iOS 平台。</paragraph>
            <paragraph><strong>注意：</strong>在 iOS 上，你只有大约 5 秒时间来完成由该信号启动的任务。如果你超过了该分配，则 iOS 将终止该应用程序而不是暂停它。</paragraph>
            <target refid="class-mainloop-constant-notification-application-focus-in"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-application-focus-in" names="class_mainloop_constant_notification_application_focus_in"><strong>NOTIFICATION_APPLICATION_FOCUS_IN</strong> = <literal>2016</literal> <reference internal="True" refid="class-mainloop-constant-notification-application-focus-in"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当应用程序获得焦点时从操作系统收到的通知，即焦点将从操作系统桌面或第三方应用程序更改为 Godot 实例的任何一个打开窗口时。</paragraph>
            <paragraph>在桌面和移动平台上实现。</paragraph>
            <target refid="class-mainloop-constant-notification-application-focus-out"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-application-focus-out" names="class_mainloop_constant_notification_application_focus_out"><strong>NOTIFICATION_APPLICATION_FOCUS_OUT</strong> = <literal>2017</literal> <reference internal="True" refid="class-mainloop-constant-notification-application-focus-out"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当应用程序失去焦点时从操作系统收到通知，即焦点将从 Godot 实例的任何一个打开窗口，更改为操作系统桌面或第三方应用程序时。</paragraph>
            <paragraph>在桌面和移动平台上实现。</paragraph>
            <target refid="class-mainloop-constant-notification-text-server-changed"></target>
            <paragraph classes="classref-constant" ids="class-mainloop-constant-notification-text-server-changed" names="class_mainloop_constant_notification_text_server_changed"><strong>NOTIFICATION_TEXT_SERVER_CHANGED</strong> = <literal>2018</literal> <reference internal="True" refid="class-mainloop-constant-notification-text-server-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>文本服务器被更改时，收到的通知。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-mainloop-private-method-finalize"></target>
            <paragraph classes="classref-method" ids="class-mainloop-private-method-finalize" names="class_mainloop_private_method__finalize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_finalize</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-mainloop-private-method-finalize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在程序退出前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-mainloop-private-method-initialize"></target>
            <paragraph classes="classref-method" ids="class-mainloop-private-method-initialize" names="class_mainloop_private_method__initialize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_initialize</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-mainloop-private-method-initialize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在初始化时调用一次。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-mainloop-private-method-physics-process"></target>
            <paragraph classes="classref-method" ids="class-mainloop-private-method-physics-process" names="class_mainloop_private_method__physics_process"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_physics_process</strong>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-mainloop-private-method-physics-process"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在每个物理帧中调用，并将自上一个物理帧以来的时间作为参数（<literal>delta</literal>，以秒为单位）。相当于<reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference>。</paragraph>
            <paragraph>如果实现，该方法必须返回一个布尔值。<literal>true</literal> 会结束主循环，而 <literal>false</literal> 会让它继续下一帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-mainloop-private-method-process"></target>
            <paragraph classes="classref-method" ids="class-mainloop-private-method-process" names="class_mainloop_private_method__process"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_process</strong>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-mainloop-private-method-process"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用自上一个进程帧以来的时间作为参数（单位为秒），在每个进程（空闲）帧上被调用。相当于 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference>。</paragraph>
            <paragraph>如果被实现，该方法必须返回一个布尔值。<literal>true</literal> 会结束主循环，而 <literal>false</literal> 会让它继续到下一帧。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
