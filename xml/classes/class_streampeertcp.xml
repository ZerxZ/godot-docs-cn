<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_streampeertcp.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/StreamPeerTCP.xml.</comment>
    <target refid="class-streampeertcp"></target>
    <section ids="streampeertcp class-streampeertcp" names="streampeertcp class_streampeertcp">
        <title>StreamPeerTCP</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>处理 TCP 连接的流对等体。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>处理 TCP 连接的流对等体。该对象可用于连接 TCP 服务器，也可以由 TCP 服务器返回。</paragraph>
            <paragraph><strong>注意：</strong>导出到安卓时，在导出项目或使用一键部署之前，请务必在安卓导出预设中，开启 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信都将被 Android 阻止。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="42"></colspec>
                    <colspec colwidth="141"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-bind"><inline classes="std std-ref">bind</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> port, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> host="*" <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-connect-to-host"><inline classes="std std-ref">connect_to_host</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> host, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> port <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-disconnect-from-host"><inline classes="std std-ref">disconnect_from_host</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-get-connected-host"><inline classes="std std-ref">get_connected_host</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-get-connected-port"><inline classes="std std-ref">get_connected_port</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-get-local-port"><inline classes="std std-ref">get_local_port</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-streampeertcp-status"><inline classes="std std-ref">Status</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-get-status"><inline classes="std std-ref">get_status</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-poll"><inline classes="std std-ref">poll</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeertcp-method-set-no-delay"><inline classes="std std-ref">set_no_delay</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-streampeertcp-status"></target>
            <paragraph classes="classref-enumeration" ids="enum-streampeertcp-status" names="enum_streampeertcp_status">enum <strong>Status</strong>:</paragraph>
            <target refid="class-streampeertcp-constant-status-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertcp-constant-status-none" names="class_streampeertcp_constant_status_none"><reference internal="True" refid="enum-streampeertcp-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph><strong>StreamPeerTCP</strong>的初始状态。这也是断开连接后的状态。</paragraph>
            <target refid="class-streampeertcp-constant-status-connecting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertcp-constant-status-connecting" names="class_streampeertcp_constant_status_connecting"><reference internal="True" refid="enum-streampeertcp-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CONNECTING</strong> = <literal>1</literal></paragraph>
            <paragraph>表示连接到主机的 <strong>StreamPeerTCP</strong> 的状态。</paragraph>
            <target refid="class-streampeertcp-constant-status-connected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertcp-constant-status-connected" names="class_streampeertcp_constant_status_connected"><reference internal="True" refid="enum-streampeertcp-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_CONNECTED</strong> = <literal>2</literal></paragraph>
            <paragraph>表示连接到主机的 <strong>StreamPeerTCP</strong> 的状态。</paragraph>
            <target refid="class-streampeertcp-constant-status-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-streampeertcp-constant-status-error" names="class_streampeertcp_constant_status_error"><reference internal="True" refid="enum-streampeertcp-status"><inline classes="std std-ref">Status</inline></reference> <strong>STATUS_ERROR</strong> = <literal>3</literal></paragraph>
            <paragraph>表示处于错误状态的 <strong>StreamPeerTCP</strong> 的状态。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-streampeertcp-method-bind"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-bind" names="class_streampeertcp_method_bind"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>bind</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> port, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> host="*" <strong>)</strong></paragraph>
            <paragraph>打开 TCP 套接字，并将其绑定到指定的本地地址。</paragraph>
            <paragraph>通常不需要这个方法，只是用来强制让后续调用 <reference internal="True" refid="class-streampeertcp-method-connect-to-host"><inline classes="std std-ref">connect_to_host</inline></reference> 时使用指定的主机 <literal>host</literal> 和端口 <literal>port</literal> 作为源地址。会在部分 NAT 打洞技术中用到，也可用于强制设置源网络接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-connect-to-host"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-connect-to-host" names="class_streampeertcp_method_connect_to_host"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>connect_to_host</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> host, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> port <strong>)</strong></paragraph>
            <paragraph>连接到指定的 <literal>host:port</literal> 对。如果使用的是有效主机名，则会进行解析。成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-disconnect-from-host"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-disconnect-from-host" names="class_streampeertcp_method_disconnect_from_host">void <strong>disconnect_from_host</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>与主机断开连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-get-connected-host"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-get-connected-host" names="class_streampeertcp_method_get_connected_host"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_connected_host</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该对等体的IP。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-get-connected-port"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-get-connected-port" names="class_streampeertcp_method_get_connected_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_connected_port</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该对等体的端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-get-local-port"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-get-local-port" names="class_streampeertcp_method_get_local_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_local_port</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该对等体绑定到的本地端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-get-status"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-get-status" names="class_streampeertcp_method_get_status"><reference internal="True" refid="enum-streampeertcp-status"><inline classes="std std-ref">Status</inline></reference> <strong>get_status</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回连接的状态，见<reference internal="True" refid="enum-streampeertcp-status"><inline classes="std std-ref">Status</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-poll"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-poll" names="class_streampeertcp_method_poll"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>poll</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>轮询套接字，更新其状态。见 <reference internal="True" refid="class-streampeertcp-method-get-status"><inline classes="std std-ref">get_status</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeertcp-method-set-no-delay"></target>
            <paragraph classes="classref-method" ids="class-streampeertcp-method-set-no-delay" names="class_streampeertcp_method_set_no_delay">void <strong>set_no_delay</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果 <literal>enabled</literal> 为 <literal>true</literal>，数据包会立即发送。如果 <literal>enabled</literal> 为 <literal>false</literal>（默认值），数据包传输将被延迟，并使用<reference name="纳格算法" refuri="https://zh.wikipedia.org/wiki/%E7%B4%8D%E6%A0%BC%E7%AE%97%E6%B3%95">纳格算法</reference>合并。</paragraph>
            <paragraph><strong>注意：</strong>对于发送大数据包或需要传输大量数据的应用程序，建议将本属性保持禁用，因为启用本属性会减少总体可用带宽。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
