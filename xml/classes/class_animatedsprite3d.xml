<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animatedsprite3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimatedSprite3D.xml.</comment>
    <target refid="class-animatedsprite3d"></target>
    <section ids="animatedsprite3d class-animatedsprite3d" names="animatedsprite3d class_animatedsprite3d">
        <title>AnimatedSprite3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_spritebase3d#class-spritebase3d"><inline classes="std std-ref">SpriteBase3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>3D 世界中的 2D 精灵节点，可以使用多个 2D 纹理进行动画处理。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>AnimatedSprite3D</strong> 与 <reference internal="True" refuri="class_sprite3d#class-sprite3d"><inline classes="std std-ref">Sprite3D</inline></reference> 节点类似，但是包含多张纹理，可用作动画 <reference internal="True" refid="class-animatedsprite3d-property-sprite-frames"><inline classes="std std-ref">sprite_frames</inline></reference>。动画使用 <reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference> 资源创建，可以导入图像文件（或包含此类文件的文件夹）为该精灵提供动画帧。可以在编辑器的“动画帧”底部面板中配置 <reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference> 资源。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_sprite_animation"><inline classes="doc">2D 精灵动画（也适用于 3D）</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="41"></colspec>
                    <colspec colwidth="71"></colspec>
                    <colspec colwidth="16"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-property-animation"><inline classes="std std-ref">animation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;"default"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-property-autoplay"><inline classes="std std-ref">autoplay</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-property-frame"><inline classes="std std-ref">frame</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-property-frame-progress"><inline classes="std std-ref">frame_progress</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-property-speed-scale"><inline classes="std std-ref">speed_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-property-sprite-frames"><inline classes="std std-ref">sprite_frames</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="197"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-method-get-playing-speed"><inline classes="std std-ref">get_playing_speed</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-method-is-playing"><inline classes="std std-ref">is_playing</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-method-pause"><inline classes="std std-ref">pause</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-method-play"><inline classes="std std-ref">play</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", custom_speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, from_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-method-play-backwards"><inline classes="std std-ref">play_backwards</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-method-set-frame-and-progress"><inline classes="std std-ref">set_frame_and_progress</inline></reference>(frame: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, progress: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animatedsprite3d-method-stop"><inline classes="std std-ref">stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-animatedsprite3d-signal-animation-changed"></target>
            <paragraph classes="classref-signal" ids="class-animatedsprite3d-signal-animation-changed" names="class_animatedsprite3d_signal_animation_changed"><strong>animation_changed</strong>() <reference internal="True" refid="class-animatedsprite3d-signal-animation-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refid="class-animatedsprite3d-property-animation"><inline classes="std std-ref">animation</inline></reference> 更改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-signal-animation-finished"></target>
            <paragraph classes="classref-signal" ids="class-animatedsprite3d-signal-animation-finished" names="class_animatedsprite3d_signal_animation_finished"><strong>animation_finished</strong>() <reference internal="True" refid="class-animatedsprite3d-signal-animation-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当动画到达结尾时，或者如果反向播放则到达起点时发出。当动画结束时，它会暂停播放。</paragraph>
            <paragraph><strong>注意：</strong>如果动画正在循环播放，则不会发出该信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-signal-animation-looped"></target>
            <paragraph classes="classref-signal" ids="class-animatedsprite3d-signal-animation-looped" names="class_animatedsprite3d_signal_animation_looped"><strong>animation_looped</strong>() <reference internal="True" refid="class-animatedsprite3d-signal-animation-looped"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当动画循环播放时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-signal-frame-changed"></target>
            <paragraph classes="classref-signal" ids="class-animatedsprite3d-signal-frame-changed" names="class_animatedsprite3d_signal_frame_changed"><strong>frame_changed</strong>() <reference internal="True" refid="class-animatedsprite3d-signal-frame-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><reference internal="True" refid="class-animatedsprite3d-property-frame"><inline classes="std std-ref">frame</inline></reference> 更改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-signal-sprite-frames-changed"></target>
            <paragraph classes="classref-signal" ids="class-animatedsprite3d-signal-sprite-frames-changed" names="class_animatedsprite3d_signal_sprite_frames_changed"><strong>sprite_frames_changed</strong>() <reference internal="True" refid="class-animatedsprite3d-signal-sprite-frames-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refid="class-animatedsprite3d-property-sprite-frames"><inline classes="std std-ref">sprite_frames</inline></reference> 更改时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animatedsprite3d-property-animation"></target>
            <paragraph classes="classref-property" ids="class-animatedsprite3d-property-animation" names="class_animatedsprite3d_property_animation"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>animation</strong> = <literal>&amp;"default"</literal> <reference internal="True" refid="class-animatedsprite3d-property-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_animation</strong>(value: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_animation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前动画，来自 <reference internal="True" refid="class-animatedsprite3d-property-sprite-frames"><inline classes="std std-ref">sprite_frames</inline></reference>。如果更改了这个值，会重置 <reference internal="True" refid="class-animatedsprite3d-property-frame"><inline classes="std std-ref">frame</inline></reference> 计数和 <reference internal="True" refid="class-animatedsprite3d-property-frame-progress"><inline classes="std std-ref">frame_progress</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-property-autoplay"></target>
            <paragraph classes="classref-property" ids="class-animatedsprite3d-property-autoplay" names="class_animatedsprite3d_property_autoplay"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>autoplay</strong> = <literal>""</literal> <reference internal="True" refid="class-animatedsprite3d-property-autoplay"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autoplay</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_autoplay</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>场景加载时要播放的动画名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-property-frame"></target>
            <paragraph classes="classref-property" ids="class-animatedsprite3d-property-frame" names="class_animatedsprite3d_property_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>frame</strong> = <literal>0</literal> <reference internal="True" refid="class-animatedsprite3d-property-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frame</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frame</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所显示动画帧的索引。设置这个属性会重置 <reference internal="True" refid="class-animatedsprite3d-property-frame-progress"><inline classes="std std-ref">frame_progress</inline></reference>。如果不希望这样，请使用 <reference internal="True" refid="class-animatedsprite3d-method-set-frame-and-progress"><inline classes="std std-ref">set_frame_and_progress</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-property-frame-progress"></target>
            <paragraph classes="classref-property" ids="class-animatedsprite3d-property-frame-progress" names="class_animatedsprite3d_property_frame_progress"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>frame_progress</strong> = <literal>0.0</literal> <reference internal="True" refid="class-animatedsprite3d-property-frame-progress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frame_progress</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_frame_progress</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前帧过渡到下一帧的进度值，在 <literal>0.0</literal> 和 <literal>1.0</literal> 之间。如果动画是倒放的，则该值是从 <literal>1.0</literal> 到 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-property-speed-scale"></target>
            <paragraph classes="classref-property" ids="class-animatedsprite3d-property-speed-scale" names="class_animatedsprite3d_property_speed_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>speed_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-animatedsprite3d-property-speed-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_speed_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_speed_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>速度缩放比。例如，如果该值为 <literal>1</literal>，则动画以正常速度播放。如果它是 <literal>0.5</literal>，那么它会半速播放。如果是 <literal>2</literal>，则会以双倍速度播放。</paragraph>
            <paragraph>如果设置为负值，则动画反向播放。如果设置为<literal>0</literal>，则动画不会前进。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-property-sprite-frames"></target>
            <paragraph classes="classref-property" ids="class-animatedsprite3d-property-sprite-frames" names="class_animatedsprite3d_property_sprite_frames"><reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference> <strong>sprite_frames</strong> <reference internal="True" refid="class-animatedsprite3d-property-sprite-frames"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sprite_frames</strong>(value: <reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference> <strong>get_sprite_frames</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>包含动画的 <reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference> 资源。可以对 <reference internal="True" refuri="class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference> 资源进行加载、编辑、清空、唯一化、保存状态等操作。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animatedsprite3d-method-get-playing-speed"></target>
            <paragraph classes="classref-method" ids="class-animatedsprite3d-method-get-playing-speed" names="class_animatedsprite3d_method_get_playing_speed"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_playing_speed</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animatedsprite3d-method-get-playing-speed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前动画的实际播放速度，未播放时则为 <literal>0</literal>。这个速度是 <reference internal="True" refid="class-animatedsprite3d-property-speed-scale"><inline classes="std std-ref">speed_scale</inline></reference> 属性乘以调用 <reference internal="True" refid="class-animatedsprite3d-method-play"><inline classes="std std-ref">play</inline></reference> 时指定的 <literal>custom_speed</literal> 参数。</paragraph>
            <paragraph>如果当前动画是倒放的，则返回负值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-method-is-playing"></target>
            <paragraph classes="classref-method" ids="class-animatedsprite3d-method-is-playing" names="class_animatedsprite3d_method_is_playing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_playing</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animatedsprite3d-method-is-playing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果动画目前正在播放，则返回 <literal>true</literal>（即便 <reference internal="True" refid="class-animatedsprite3d-property-speed-scale"><inline classes="std std-ref">speed_scale</inline></reference> 和/或 <literal>custom_speed</literal> 为 <literal>0</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-method-pause"></target>
            <paragraph classes="classref-method" ids="class-animatedsprite3d-method-pause" names="class_animatedsprite3d_method_pause"><abbreviation explanation="无返回值。">void</abbreviation> <strong>pause</strong>() <reference internal="True" refid="class-animatedsprite3d-method-pause"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>暂停当前正在播放的动画。会保留 <reference internal="True" refid="class-animatedsprite3d-property-frame"><inline classes="std std-ref">frame</inline></reference> 和 <reference internal="True" refid="class-animatedsprite3d-property-frame-progress"><inline classes="std std-ref">frame_progress</inline></reference>，不带参数调用 <reference internal="True" refid="class-animatedsprite3d-method-play"><inline classes="std std-ref">play</inline></reference> 或 <reference internal="True" refid="class-animatedsprite3d-method-play-backwards"><inline classes="std std-ref">play_backwards</inline></reference> 会从当前播放位置恢复播放该动画。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-animatedsprite3d-method-stop"><inline classes="std std-ref">stop</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-method-play"></target>
            <paragraph classes="classref-method" ids="class-animatedsprite3d-method-play" names="class_animatedsprite3d_method_play"><abbreviation explanation="无返回值。">void</abbreviation> <strong>play</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"", custom_speed: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, from_end: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-animatedsprite3d-method-play"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>播放名称键为 <literal>name</literal> 的动画。如果 <literal>custom_speed</literal> 为负且 <literal>from_end</literal> 为 <literal>true</literal>，则该动画会倒放（等价于 <reference internal="True" refid="class-animatedsprite3d-method-play-backwards"><inline classes="std std-ref">play_backwards</inline></reference>）。</paragraph>
            <paragraph>如果调用这个方法时使用了相同的动画名称 <literal>name</literal> 或者没有使用 <literal>name</literal> 参数，则会继续播放已暂停的分配动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-method-play-backwards"></target>
            <paragraph classes="classref-method" ids="class-animatedsprite3d-method-play-backwards" names="class_animatedsprite3d_method_play_backwards"><abbreviation explanation="无返回值。">void</abbreviation> <strong>play_backwards</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> = &amp;"") <reference internal="True" refid="class-animatedsprite3d-method-play-backwards"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>倒放名称键为 <literal>name</literal> 的动画。</paragraph>
            <paragraph>这个方法是简写，等价于调用 <reference internal="True" refid="class-animatedsprite3d-method-play"><inline classes="std std-ref">play</inline></reference> 时使用 <literal>custom_speed = -1.0</literal> 和 <literal>from_end = true</literal>，所以更多信息请参阅其描述。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-method-set-frame-and-progress"></target>
            <paragraph classes="classref-method" ids="class-animatedsprite3d-method-set-frame-and-progress" names="class_animatedsprite3d_method_set_frame_and_progress"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frame_and_progress</strong>(frame: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, progress: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animatedsprite3d-method-set-frame-and-progress"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refid="class-animatedsprite3d-property-frame"><inline classes="std std-ref">frame</inline></reference> 时会隐式将 <reference internal="True" refid="class-animatedsprite3d-property-frame-progress"><inline classes="std std-ref">frame_progress</inline></reference> 重置为 <literal>0.0</literal>，但这个方法可以避免。</paragraph>
            <paragraph>如果你想要把当前的 <reference internal="True" refid="class-animatedsprite3d-property-frame-progress"><inline classes="std std-ref">frame_progress</inline></reference> 带到其他 <reference internal="True" refid="class-animatedsprite3d-property-frame"><inline classes="std std-ref">frame</inline></reference> 中，就会非常有用。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 更改动画的同时保留帧索引和进度。
var current_frame = animated_sprite.get_frame()
var current_progress = animated_sprite.get_frame_progress()
animated_sprite.play("walk_another_skin")
animated_sprite.set_frame_and_progress(current_frame, current_progress)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animatedsprite3d-method-stop"></target>
            <paragraph classes="classref-method" ids="class-animatedsprite3d-method-stop" names="class_animatedsprite3d_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>() <reference internal="True" refid="class-animatedsprite3d-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止当前正在播放的动画。会将动画的位置重置为 <literal>0</literal>，并将 <literal>custom_speed</literal> 重置为 <literal>1.0</literal>。另见 <reference internal="True" refid="class-animatedsprite3d-method-pause"><inline classes="std std-ref">pause</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
