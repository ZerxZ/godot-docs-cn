<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_jsonrpc.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/JSONRPC.xml.</comment>
    <target refid="class-jsonrpc"></target>
    <section ids="jsonrpc class-jsonrpc" names="jsonrpc class_jsonrpc">
        <title>JSONRPC</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于处理看起来像 JSONRPC 文档的字典的辅助类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference name="JSON-RPC" refuri="https://www.jsonrpc.org/">JSON-RPC</reference> 是一项标准，它将方法调用包装在一个 <reference internal="True" refuri="class_json#class-json"><inline classes="std std-ref">JSON</inline></reference> 对象中。该对象有一个特定的结构，并标识出哪个方法被调用，该函数的参数，并携带一个 ID 来跟踪响应。这个类在 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 之上实现了该标准；你必须用其他函数在 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 和 <reference internal="True" refuri="class_json#class-json"><inline classes="std std-ref">JSON</inline></reference> 之间进行转换。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="193"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-jsonrpc-method-make-notification"><inline classes="std std-ref">make_notification</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> method, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> params <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-jsonrpc-method-make-request"><inline classes="std std-ref">make_request</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> method, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> params, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-jsonrpc-method-make-response"><inline classes="std std-ref">make_response</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> result, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-jsonrpc-method-make-response-error"><inline classes="std std-ref">make_response_error</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> code, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> message, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> id=null <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-jsonrpc-method-process-action"><inline classes="std std-ref">process_action</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> action, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> recurse=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-jsonrpc-method-process-string"><inline classes="std std-ref">process_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> action <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-jsonrpc-method-set-scope"><inline classes="std std-ref">set_scope</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scope, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> target <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-jsonrpc-errorcode"></target>
            <paragraph classes="classref-enumeration" ids="enum-jsonrpc-errorcode" names="enum_jsonrpc_errorcode">enum <strong>ErrorCode</strong>:</paragraph>
            <target refid="class-jsonrpc-constant-parse-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-jsonrpc-constant-parse-error" names="class_jsonrpc_constant_parse_error"><reference internal="True" refid="enum-jsonrpc-errorcode"><inline classes="std std-ref">ErrorCode</inline></reference> <strong>PARSE_ERROR</strong> = <literal>-32700</literal></paragraph>
            <target refid="class-jsonrpc-constant-invalid-request"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-jsonrpc-constant-invalid-request" names="class_jsonrpc_constant_invalid_request"><reference internal="True" refid="enum-jsonrpc-errorcode"><inline classes="std std-ref">ErrorCode</inline></reference> <strong>INVALID_REQUEST</strong> = <literal>-32600</literal></paragraph>
            <target refid="class-jsonrpc-constant-method-not-found"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-jsonrpc-constant-method-not-found" names="class_jsonrpc_constant_method_not_found"><reference internal="True" refid="enum-jsonrpc-errorcode"><inline classes="std std-ref">ErrorCode</inline></reference> <strong>METHOD_NOT_FOUND</strong> = <literal>-32601</literal></paragraph>
            <paragraph>请求了方法调用，但 JSONRPC 子类中不存在该名称的函数。</paragraph>
            <target refid="class-jsonrpc-constant-invalid-params"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-jsonrpc-constant-invalid-params" names="class_jsonrpc_constant_invalid_params"><reference internal="True" refid="enum-jsonrpc-errorcode"><inline classes="std std-ref">ErrorCode</inline></reference> <strong>INVALID_PARAMS</strong> = <literal>-32602</literal></paragraph>
            <target refid="class-jsonrpc-constant-internal-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-jsonrpc-constant-internal-error" names="class_jsonrpc_constant_internal_error"><reference internal="True" refid="enum-jsonrpc-errorcode"><inline classes="std std-ref">ErrorCode</inline></reference> <strong>INTERNAL_ERROR</strong> = <literal>-32603</literal></paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-jsonrpc-method-make-notification"></target>
            <paragraph classes="classref-method" ids="class-jsonrpc-method-make-notification" names="class_jsonrpc_method_make_notification"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>make_notification</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> method, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> params <strong>)</strong></paragraph>
            <paragraph>返回 JSON-RPC 通知形式的字典。通知是一次性的信息，不需要有响应。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>method</literal>：被调用的方法的名称。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>params</literal>：传递给该被调用的方法的参数的数组或字典。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-jsonrpc-method-make-request"></target>
            <paragraph classes="classref-method" ids="class-jsonrpc-method-make-request" names="class_jsonrpc_method_make_request"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>make_request</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> method, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> params, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>以 JSON-RPC 请求的形式返回字典。请求被发送到服务器并期望得到响应。ID 字段用于服务器指定它正在响应的确切请求。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>method</literal>：被调用的方法的名称。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>params</literal>：传递给该被调用的方法的参数的数组或字典。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>id</literal>：唯一标识该请求。服务器应发送具有相同 ID 的响应。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-jsonrpc-method-make-response"></target>
            <paragraph classes="classref-method" ids="class-jsonrpc-method-make-response" names="class_jsonrpc_method_make_response"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>make_response</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> result, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>当服务器接收并处理了请求时，它应该发送响应。如果不想要响应，则需要发送通知。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>result</literal>：被调用的函数的返回值。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>id</literal>：该响应针对的请求的 ID。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-jsonrpc-method-make-response-error"></target>
            <paragraph classes="classref-method" ids="class-jsonrpc-method-make-response-error" names="class_jsonrpc_method_make_response_error"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>make_response_error</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> code, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> message, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> id=null <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>创建响应，指示先前的回复以某种方式失败。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>code</literal>：这是哪种错误对应的错误代码。请参阅 <reference internal="True" refid="enum-jsonrpc-errorcode"><inline classes="std std-ref">ErrorCode</inline></reference> 常量。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>message</literal>：关于该错误的自定义消息。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>id</literal>：该错误作为响应对应的请求。</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-jsonrpc-method-process-action"></target>
            <paragraph classes="classref-method" ids="class-jsonrpc-method-process-action" names="class_jsonrpc_method_process_action"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>process_action</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> action, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> recurse=false <strong>)</strong></paragraph>
            <paragraph>给定采用 JSON-RPC 请求形式的字典：解压请求并运行它。通过查看名为“method”的字段，并在 JSONRPC 对象中查找等效命名的函数来解析方法。如果找到，则调用该方法。</paragraph>
            <paragraph>要添加新的受支持方法，请扩展 JSONRPC 类并在你的子类上调用 <reference internal="True" refid="class-jsonrpc-method-process-action"><inline classes="std std-ref">process_action</inline></reference>。</paragraph>
            <paragraph><literal>action</literal>：要运行的动作，作为 JSON-RPC 请求或通知形式的字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-jsonrpc-method-process-string"></target>
            <paragraph classes="classref-method" ids="class-jsonrpc-method-process-string" names="class_jsonrpc_method_process_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>process_string</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> action <strong>)</strong></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-jsonrpc-method-set-scope"></target>
            <paragraph classes="classref-method" ids="class-jsonrpc-method-set-scope" names="class_jsonrpc_method_set_scope">void <strong>set_scope</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scope, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> target <strong>)</strong></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
