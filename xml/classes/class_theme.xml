<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_theme.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Theme.xml.</comment>
    <target refid="class-theme"></target>
    <section ids="theme class-theme" names="theme class_theme">
        <title>Theme</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于样式化/皮肤化 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 和 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 的资源。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于样式化/皮肤化 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 和 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 节点的资源。控件可以使用本地的主题覆盖项进行单独的风格化（见 <reference internal="True" refuri="class_control#class-control-method-add-theme-color-override"><inline classes="std std-ref">Control.add_theme_color_override</inline></reference>），而主题资源则能够存储这些设置，在所有同类型的控件之间实现共享（例如将所有 <reference internal="True" refuri="class_button#class-button"><inline classes="std std-ref">Button</inline></reference> 都设置为相同的风格）。主题资源可以在整个项目上使用，但你也可以为单独的一个控件节点分支设置不同的主题资源。为某个控件节点分配的主题资源不仅会对它自己生效，也会对它的所有直接和间接子节点生效（只要控件链没有中断）。</paragraph>
            <paragraph>项目范围的主题请使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-theme-custom"><inline classes="std std-ref">ProjectSettings.gui/theme/custom</inline></reference> 设置，这样项目中的所有控件就都能够使用。</paragraph>
            <paragraph>控件节点的主题请使用 <reference internal="True" refuri="class_control#class-control-property-theme"><inline classes="std std-ref">Control.theme</inline></reference> 设置，这样该控件和它的所有直接和间接子节点就都能够使用。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/gui_skinning"><inline classes="doc">GUI 皮肤</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/gui_using_theme_editor"><inline classes="doc">使用主题编辑器</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-property-default-base-scale"><inline classes="std std-ref">default_base_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-property-default-font"><inline classes="std std-ref">default_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-property-default-font-size"><inline classes="std std-ref">default_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="259"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-add-type"><inline classes="std std-ref">add_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-color"><inline classes="std std-ref">clear_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-constant"><inline classes="std std-ref">clear_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-font"><inline classes="std std-ref">clear_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-font-size"><inline classes="std std-ref">clear_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-icon"><inline classes="std std-ref">clear_icon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-stylebox"><inline classes="std std-ref">clear_stylebox</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-theme-item"><inline classes="std std-ref">clear_theme_item</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-clear-type-variation"><inline classes="std std-ref">clear_type_variation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-color"><inline classes="std std-ref">get_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-color-list"><inline classes="std std-ref">get_color_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-color-type-list"><inline classes="std std-ref">get_color_type_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-constant"><inline classes="std std-ref">get_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-constant-list"><inline classes="std std-ref">get_constant_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-constant-type-list"><inline classes="std std-ref">get_constant_type_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-font"><inline classes="std std-ref">get_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-font-list"><inline classes="std std-ref">get_font_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-font-size"><inline classes="std std-ref">get_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-font-size-list"><inline classes="std std-ref">get_font_size_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-font-size-type-list"><inline classes="std std-ref">get_font_size_type_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-font-type-list"><inline classes="std std-ref">get_font_type_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-icon"><inline classes="std std-ref">get_icon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-icon-list"><inline classes="std std-ref">get_icon_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-icon-type-list"><inline classes="std std-ref">get_icon_type_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-stylebox"><inline classes="std std-ref">get_stylebox</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-stylebox-list"><inline classes="std std-ref">get_stylebox_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-stylebox-type-list"><inline classes="std std-ref">get_stylebox_type_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-theme-item"><inline classes="std std-ref">get_theme_item</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-theme-item-list"><inline classes="std std-ref">get_theme_item_list</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-theme-item-type-list"><inline classes="std std-ref">get_theme_item_type_list</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-type-variation-base"><inline classes="std std-ref">get_type_variation_base</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-get-type-variation-list"><inline classes="std std-ref">get_type_variation_list</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> base_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-color"><inline classes="std std-ref">has_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-constant"><inline classes="std std-ref">has_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-default-base-scale"><inline classes="std std-ref">has_default_base_scale</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-default-font"><inline classes="std std-ref">has_default_font</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-default-font-size"><inline classes="std std-ref">has_default_font_size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-font"><inline classes="std std-ref">has_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-font-size"><inline classes="std std-ref">has_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-icon"><inline classes="std std-ref">has_icon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-stylebox"><inline classes="std std-ref">has_stylebox</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-has-theme-item"><inline classes="std std-ref">has_theme_item</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-is-type-variation"><inline classes="std std-ref">is_type_variation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> base_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-merge-with"><inline classes="std std-ref">merge_with</inline></reference> <strong>(</strong> <reference internal="True" refid="class-theme"><inline classes="std std-ref">Theme</inline></reference> other <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-remove-type"><inline classes="std std-ref">remove_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-rename-color"><inline classes="std std-ref">rename_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-rename-constant"><inline classes="std std-ref">rename_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-rename-font"><inline classes="std std-ref">rename_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-rename-font-size"><inline classes="std std-ref">rename_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-rename-icon"><inline classes="std std-ref">rename_icon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-rename-stylebox"><inline classes="std std-ref">rename_stylebox</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-rename-theme-item"><inline classes="std std-ref">rename_theme_item</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-color"><inline classes="std std-ref">set_color</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-constant"><inline classes="std std-ref">set_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> constant <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-font"><inline classes="std std-ref">set_font</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-font-size"><inline classes="std std-ref">set_font_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-icon"><inline classes="std std-ref">set_icon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-stylebox"><inline classes="std std-ref">set_stylebox</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-theme-item"><inline classes="std std-ref">set_theme_item</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-theme-method-set-type-variation"><inline classes="std std-ref">set_type_variation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> base_type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-theme-datatype"></target>
            <paragraph classes="classref-enumeration" ids="enum-theme-datatype" names="enum_theme_datatype">enum <strong>DataType</strong>:</paragraph>
            <target refid="class-theme-constant-data-type-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-theme-constant-data-type-color" names="class_theme_constant_data_type_color"><reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> <strong>DATA_TYPE_COLOR</strong> = <literal>0</literal></paragraph>
            <paragraph>主题的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色项类型。</paragraph>
            <target refid="class-theme-constant-data-type-constant"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-theme-constant-data-type-constant" names="class_theme_constant_data_type_constant"><reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> <strong>DATA_TYPE_CONSTANT</strong> = <literal>1</literal></paragraph>
            <paragraph>主题的常量项类型。</paragraph>
            <target refid="class-theme-constant-data-type-font"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-theme-constant-data-type-font" names="class_theme_constant_data_type_font"><reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> <strong>DATA_TYPE_FONT</strong> = <literal>2</literal></paragraph>
            <paragraph>主题的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 字体项类型。</paragraph>
            <target refid="class-theme-constant-data-type-font-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-theme-constant-data-type-font-size" names="class_theme_constant_data_type_font_size"><reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> <strong>DATA_TYPE_FONT_SIZE</strong> = <literal>3</literal></paragraph>
            <paragraph>主题的字体大小项类型。</paragraph>
            <target refid="class-theme-constant-data-type-icon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-theme-constant-data-type-icon" names="class_theme_constant_data_type_icon"><reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> <strong>DATA_TYPE_ICON</strong> = <literal>4</literal></paragraph>
            <paragraph>主题的图标 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 项类型。</paragraph>
            <target refid="class-theme-constant-data-type-stylebox"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-theme-constant-data-type-stylebox" names="class_theme_constant_data_type_stylebox"><reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> <strong>DATA_TYPE_STYLEBOX</strong> = <literal>5</literal></paragraph>
            <paragraph>主题的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 项目类型。</paragraph>
            <target refid="class-theme-constant-data-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-theme-constant-data-type-max" names="class_theme_constant_data_type_max"><reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> <strong>DATA_TYPE_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>数据类型枚举的最大值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-theme-property-default-base-scale"></target>
            <paragraph classes="classref-property" ids="class-theme-property-default-base-scale" names="class_theme_property_default_base_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>default_base_scale</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_default_base_scale</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_default_base_scale</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该主题资源的默认基础缩放系数。部分控件会用它来根据全局缩放系数对其视觉属性进行缩放。如果该值为 <literal>0.0</literal>，则使用全局缩放系数（见 <reference internal="True" refuri="class_themedb#class-themedb-property-fallback-base-scale"><inline classes="std std-ref">ThemeDB.fallback_base_scale</inline></reference>）。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-theme-method-has-default-base-scale"><inline classes="std std-ref">has_default_base_scale</inline></reference> 来检查该值是否有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-property-default-font"></target>
            <paragraph classes="classref-property" ids="class-theme-property-default-font" names="class_theme_property_default_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>default_font</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_default_font</strong> <strong>(</strong> <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_default_font</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该主题资源的默认字体。尝试获取字体资源时，如果该主题中不存在或者为无效状态，则会用它作为默认值。如果默认字体也缺失或无效，则会使用引擎的回退值（见 <reference internal="True" refuri="class_themedb#class-themedb-property-fallback-font"><inline classes="std std-ref">ThemeDB.fallback_font</inline></reference>）。</paragraph>
            <paragraph>请使用 <reference internal="True" refid="class-theme-method-has-default-font"><inline classes="std std-ref">has_default_font</inline></reference> 来检查该值是否有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-property-default-font-size"></target>
            <paragraph classes="classref-property" ids="class-theme-property-default-font-size" names="class_theme_property_default_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>default_font_size</strong> = <literal>-1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_default_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_default_font_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该主题资源的默认字体大小。尝试获取字体大小时，如果该主题中不存在或者为无效状态，则会用它作为默认值。如果默认字体大小也缺失或无效，则会使用引擎的回退值（见 <reference internal="True" refuri="class_themedb#class-themedb-property-fallback-font-size"><inline classes="std std-ref">ThemeDB.fallback_font_size</inline></reference>）。</paragraph>
            <paragraph>小于 <literal>0</literal> 的值无效，可用于清除对该属性的设置。请使用 <reference internal="True" refid="class-theme-method-has-default-font-size"><inline classes="std std-ref">has_default_font_size</inline></reference> 来检查该值是否有效。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-theme-method-add-type"></target>
            <paragraph classes="classref-method" ids="class-theme-method-add-type" names="class_theme_method_add_type">void <strong>add_type</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>为每一个有效的数据类型都添加一个空主题类型。</paragraph>
            <paragraph><strong>注意：</strong>空类型不会随该主题保存。这个方法的存在是为了对资源执行内存中的更改。请使用 <literal>set_*</literal> 方法添加主题项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear" names="class_theme_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>移除在该主题资源上定义的所有主题属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-color"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-color" names="class_theme_method_clear_color">void <strong>clear_color</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性，则将其移除。</paragraph>
            <paragraph>如果不存在则失败。请使用 <reference internal="True" refid="class-theme-method-has-color"><inline classes="std std-ref">has_color</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-constant"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-constant" names="class_theme_method_clear_constant">void <strong>clear_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的常量属性，则将其移除。</paragraph>
            <paragraph>如果不存在则失败。请使用 <reference internal="True" refid="class-theme-method-has-constant"><inline classes="std std-ref">has_constant</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-font"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-font" names="class_theme_method_clear_font">void <strong>clear_font</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 属性，则将其移除。</paragraph>
            <paragraph>如果不存在则失败。请使用 <reference internal="True" refid="class-theme-method-has-font"><inline classes="std std-ref">has_font</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-font-size"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-font-size" names="class_theme_method_clear_font_size">void <strong>clear_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的字体大小属性，则将其移除。</paragraph>
            <paragraph>如果不存在则失败。请使用 <reference internal="True" refid="class-theme-method-has-font-size"><inline classes="std std-ref">has_font_size</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-icon"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-icon" names="class_theme_method_clear_icon">void <strong>clear_icon</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的图标属性，则将其移除。</paragraph>
            <paragraph>如果不存在则失败。请使用 <reference internal="True" refid="class-theme-method-has-icon"><inline classes="std std-ref">has_icon</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-stylebox"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-stylebox" names="class_theme_method_clear_stylebox">void <strong>clear_stylebox</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 属性，则将其移除。</paragraph>
            <paragraph>如果不存在则失败。请使用 <reference internal="True" refid="class-theme-method-has-stylebox"><inline classes="std std-ref">has_stylebox</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-theme-item"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-theme-item" names="class_theme_method_clear_theme_item">void <strong>clear_theme_item</strong> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <literal>data_type</literal> 属性，则将其移除。</paragraph>
            <paragraph>如果不存在则失败。请使用 <reference internal="True" refid="class-theme-method-has-theme-item"><inline classes="std std-ref">has_theme_item</inline></reference> 检查是否存在。</paragraph>
            <paragraph><strong>注意：</strong>这个方法类似于调用相应的数据类型特定方法，但可以用于更通用逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-clear-type-variation"></target>
            <paragraph classes="classref-method" ids="class-theme-method-clear-type-variation" names="class_theme_method_clear_type_variation">void <strong>clear_type_variation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>取消将主题类型 <literal>theme_type</literal> 标记为任何主题类型的变种。见 <reference internal="True" refid="class-theme-method-set-type-variation"><inline classes="std std-ref">set_type_variation</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-color"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-color" names="class_theme_method_get_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_color</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性，则将其返回。</paragraph>
            <paragraph>如果不存在则返回默认颜色。请使用 <reference internal="True" refid="class-theme-method-has-color"><inline classes="std std-ref">has_color</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-color-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-color-list" names="class_theme_method_get_color_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_color_list</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为 <literal>theme_type</literal> 类型定义的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性的名称列表。请使用 <reference internal="True" refid="class-theme-method-get-color-type-list"><inline classes="std std-ref">get_color_type_list</inline></reference> 获取可能的主题类型名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-color-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-color-type-list" names="class_theme_method_get_color_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_color_type_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性的所有唯一主题类型名称的列表。请使用 <reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> 获取所有主题类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-constant"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-constant" names="class_theme_method_get_constant"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的常量属性，则将其返回。</paragraph>
            <paragraph>如果不存在则返回 <literal>0</literal>。请使用 <reference internal="True" refid="class-theme-method-has-constant"><inline classes="std std-ref">has_constant</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-constant-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-constant-list" names="class_theme_method_get_constant_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_constant_list</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为 <literal>theme_type</literal> 类型定义的常量属性的名称列表。请使用 <reference internal="True" refid="class-theme-method-get-constant-type-list"><inline classes="std std-ref">get_constant_type_list</inline></reference> 获取可能的主题类型名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-constant-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-constant-type-list" names="class_theme_method_get_constant_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_constant_type_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回常量属性的所有唯一主题类型名称的列表。请使用 <reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> 获取所有主题类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-font"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-font" names="class_theme_method_get_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_font</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 属性，则将其返回。</paragraph>
            <paragraph>如果不存在且存在默认主题字体，则返回默认主题字体（见 <reference internal="True" refid="class-theme-property-default-font"><inline classes="std std-ref">default_font</inline></reference>）。请使用 <reference internal="True" refid="class-theme-method-has-font"><inline classes="std std-ref">has_font</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-has-default-font"><inline classes="std std-ref">has_default_font</inline></reference> 检查默认主题字体是否存在。</paragraph>
            <paragraph>如果两者都不存在，则返回引擎的回退字体值（见 <reference internal="True" refuri="class_themedb#class-themedb-property-fallback-font"><inline classes="std std-ref">ThemeDB.fallback_font</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-font-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-font-list" names="class_theme_method_get_font_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_font_list</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为 <literal>theme_type</literal> 类型定义的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 属性的名称列表。请使用 <reference internal="True" refid="class-theme-method-get-font-type-list"><inline classes="std std-ref">get_font_type_list</inline></reference> 获取可能的主题类型名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-font-size"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-font-size" names="class_theme_method_get_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的字体大小属性，则将其返回。</paragraph>
            <paragraph>如果不存在且存在默认主题字体大小，则返回默认主题字体大小（见 <reference internal="True" refid="class-theme-property-default-font-size"><inline classes="std std-ref">default_font_size</inline></reference>）。请使用 <reference internal="True" refid="class-theme-method-has-font-size"><inline classes="std std-ref">has_font_size</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-has-default-font-size"><inline classes="std std-ref">has_default_font_size</inline></reference> 检查默认主题字体大小是否存在。</paragraph>
            <paragraph>如果两者都不存在，则返回引擎的回退字体大小值（见 <reference internal="True" refuri="class_themedb#class-themedb-property-fallback-font-size"><inline classes="std std-ref">ThemeDB.fallback_font_size</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-font-size-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-font-size-list" names="class_theme_method_get_font_size_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_font_size_list</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为 <literal>theme_type</literal> 类型定义的字体大小属性的名称列表。请使用 <reference internal="True" refid="class-theme-method-get-font-size-type-list"><inline classes="std std-ref">get_font_size_type_list</inline></reference> 获取可能的主题类型名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-font-size-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-font-size-type-list" names="class_theme_method_get_font_size_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_font_size_type_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回字体大小属性的所有唯一主题类型名称的列表。请使用 <reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> 获取所有主题类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-font-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-font-type-list" names="class_theme_method_get_font_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_font_type_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 属性的所有唯一主题类型名称的列表。请使用 <reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> 获取所有主题类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-icon"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-icon" names="class_theme_method_get_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_icon</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的图标属性，则将其返回。</paragraph>
            <paragraph>如果不存在则返回引擎的回退图标值（见 <reference internal="True" refuri="class_themedb#class-themedb-property-fallback-icon"><inline classes="std std-ref">ThemeDB.fallback_icon</inline></reference>）。请使用 <reference internal="True" refid="class-theme-method-has-icon"><inline classes="std std-ref">has_icon</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-icon-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-icon-list" names="class_theme_method_get_icon_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_icon_list</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为 <literal>theme_type</literal> 类型定义的图标属性的名称列表。请使用 <reference internal="True" refid="class-theme-method-get-icon-type-list"><inline classes="std std-ref">get_icon_type_list</inline></reference> 获取可能的主题类型名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-icon-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-icon-type-list" names="class_theme_method_get_icon_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_icon_type_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回图标属性的所有唯一主题类型名称的列表。请使用 <reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> 获取所有主题类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-stylebox"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-stylebox" names="class_theme_method_get_stylebox"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>get_stylebox</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 属性，则将其返回。</paragraph>
            <paragraph>如果不存在则返回引擎的回退样式盒值（见 <reference internal="True" refuri="class_themedb#class-themedb-property-fallback-stylebox"><inline classes="std std-ref">ThemeDB.fallback_stylebox</inline></reference>）。请使用 <reference internal="True" refid="class-theme-method-has-stylebox"><inline classes="std std-ref">has_stylebox</inline></reference> 检查是否存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-stylebox-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-stylebox-list" names="class_theme_method_get_stylebox_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_stylebox_list</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为 <literal>theme_type</literal> 类型定义的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 属性的名称列表。请使用 <reference internal="True" refid="class-theme-method-get-stylebox-type-list"><inline classes="std std-ref">get_stylebox_type_list</inline></reference> 获取可能的主题类型名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-stylebox-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-stylebox-type-list" names="class_theme_method_get_stylebox_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_stylebox_type_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 属性的所有唯一主题类型名称的列表。请使用 <reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> 获取所有主题类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-theme-item"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-theme-item" names="class_theme_method_get_theme_item"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_theme_item</strong> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果存在由 <literal>name</literal> 和 <literal>theme_type</literal> 定义的 <literal>data_type</literal> 属性，则将其返回。</paragraph>
            <paragraph>如果不存在则返回引擎的回退值（见 <reference internal="True" refuri="class_themedb#class-themedb"><inline classes="std std-ref">ThemeDB</inline></reference>）。请使用 <reference internal="True" refid="class-theme-method-has-theme-item"><inline classes="std std-ref">has_theme_item</inline></reference> 检查是否存在。</paragraph>
            <paragraph><strong>注意：</strong>这个方法类似于调用相应的数据类型特定方法，但可以用于更通用逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-theme-item-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-theme-item-list" names="class_theme_method_get_theme_item_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_theme_item_list</strong> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为 <literal>theme_type</literal> 类型定义的 <literal>data_type</literal> 属性的名称列表。请使用 <reference internal="True" refid="class-theme-method-get-theme-item-type-list"><inline classes="std std-ref">get_theme_item_type_list</inline></reference> 获取可能的主题类型名称。</paragraph>
            <paragraph><strong>注意：</strong>这个方法类似于调用相应的数据类型特定方法，但可以用于更通用逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-theme-item-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-theme-item-type-list" names="class_theme_method_get_theme_item_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_theme_item_type_list</strong> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <literal>data_type</literal> 属性的所有唯一主题类型名称的列表。请使用 <reference internal="True" refid="class-theme-method-get-type-list"><inline classes="std std-ref">get_type_list</inline></reference> 获取所有主题类型。</paragraph>
            <paragraph><strong>注意：</strong>这个方法类似于调用相应的数据类型特定方法，但可以用于更通用逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-type-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-type-list" names="class_theme_method_get_type_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_type_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回所有唯一主题类型名称的列表。获取单一数据类型的唯一主题类型列表请使用对应的 <literal>get_*_type_list</literal> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-type-variation-base"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-type-variation-base" names="class_theme_method_get_type_variation_base"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_type_variation_base</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果 <literal>theme_type</literal> 是有效的变种类型，则返回其基础主题类型的名称。否则返回空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-get-type-variation-list"></target>
            <paragraph classes="classref-method" ids="class-theme-method-get-type-variation-list" names="class_theme_method_get_type_variation_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_type_variation_list</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> base_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定基础类型 <literal>base_type</literal> 的所有类型变种列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-color"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-color" names="class_theme_method_has_color"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_color</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>name</literal> 的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性，则返回 <literal>true</literal>。</paragraph>
            <paragraph>不存在时返回 <literal>false</literal>。定义请使用 <reference internal="True" refid="class-theme-method-set-color"><inline classes="std std-ref">set_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-constant"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-constant" names="class_theme_method_has_constant"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>name</literal> 的常量属性，则返回 <literal>true</literal>。</paragraph>
            <paragraph>不存在时返回 <literal>false</literal>。定义请使用 <reference internal="True" refid="class-theme-method-set-constant"><inline classes="std std-ref">set_constant</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-default-base-scale"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-default-base-scale" names="class_theme_method_has_default_base_scale"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_default_base_scale</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-theme-property-default-base-scale"><inline classes="std std-ref">default_base_scale</inline></reference> 的值有效，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果无效则返回 <literal>false</literal>。有效值必须大于 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-default-font"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-default-font" names="class_theme_method_has_default_font"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_default_font</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-theme-property-default-font"><inline classes="std std-ref">default_font</inline></reference> 的值有效，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果无效则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-default-font-size"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-default-font-size" names="class_theme_method_has_default_font_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_default_font_size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-theme-property-default-font-size"><inline classes="std std-ref">default_font_size</inline></reference> 的值有效，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果无效则返回 <literal>false</literal>。有效值必须大于 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-font"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-font" names="class_theme_method_has_font"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_font</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>name</literal> 的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 属性，则返回 <literal>true</literal>。</paragraph>
            <paragraph>不存在时返回 <literal>false</literal>。定义请使用 <reference internal="True" refid="class-theme-method-set-font"><inline classes="std std-ref">set_font</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-font-size"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-font-size" names="class_theme_method_has_font_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>name</literal> 的字体大小属性，则返回 <literal>true</literal>。</paragraph>
            <paragraph>不存在时返回 <literal>false</literal>。定义请使用 <reference internal="True" refid="class-theme-method-set-font-size"><inline classes="std std-ref">set_font_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-icon"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-icon" names="class_theme_method_has_icon"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_icon</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>name</literal> 的图标属性，则返回 <literal>true</literal>。</paragraph>
            <paragraph>不存在时返回 <literal>false</literal>。定义请使用 <reference internal="True" refid="class-theme-method-set-icon"><inline classes="std std-ref">set_icon</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-stylebox"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-stylebox" names="class_theme_method_has_stylebox"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_stylebox</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>name</literal> 的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 属性，则返回 <literal>true</literal>。</paragraph>
            <paragraph>不存在时返回 <literal>false</literal>。定义请使用 <reference internal="True" refid="class-theme-method-set-stylebox"><inline classes="std std-ref">set_stylebox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-has-theme-item"></target>
            <paragraph classes="classref-method" ids="class-theme-method-has-theme-item" names="class_theme_method_has_theme_item"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_theme_item</strong> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>name</literal> 的主题属性，则返回 <literal>true</literal>。</paragraph>
            <paragraph>不存在时返回 <literal>false</literal>。定义请使用 <reference internal="True" refid="class-theme-method-set-theme-item"><inline classes="std std-ref">set_theme_item</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这个方法类似于调用相应的数据类型特定方法，但可以用于更通用逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-is-type-variation"></target>
            <paragraph classes="classref-method" ids="class-theme-method-is-type-variation" names="class_theme_method_is_type_variation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_type_variation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> base_type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 被标记为基础类型 <literal>base_type</literal> 的变种，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-merge-with"></target>
            <paragraph classes="classref-method" ids="class-theme-method-merge-with" names="class_theme_method_merge_with">void <strong>merge_with</strong> <strong>(</strong> <reference internal="True" refid="class-theme"><inline classes="std std-ref">Theme</inline></reference> other <strong>)</strong></paragraph>
            <paragraph>添加缺失的定义，并使用 <literal>other</literal> 主题资源中的值覆盖已有的定义。</paragraph>
            <paragraph><strong>注意：</strong>这修改了当前的主题。如果想将两个主题合并在一起且不修改任何一个，请创建一个新的空主题，并将其他两个依次合并到其中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-remove-type"></target>
            <paragraph classes="classref-method" ids="class-theme-method-remove-type" names="class_theme_method_remove_type">void <strong>remove_type</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>移除该主题类型，优雅地丢弃其中定义的主题项目。如果该类型为变种，则该信息也会被消除。如果该类型为类型变种的基础类型，则那些变种会失去其基础类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-rename-color"></target>
            <paragraph classes="classref-method" ids="class-theme-method-rename-color" names="class_theme_method_rename_color">void <strong>rename_color</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>old_name</literal> 的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性，则将其重命名为 <literal>name</literal>。</paragraph>
            <paragraph>不存在时失败，新名称已存在时也会失败。请使用 <reference internal="True" refid="class-theme-method-has-color"><inline classes="std std-ref">has_color</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-clear-color"><inline classes="std std-ref">clear_color</inline></reference> 移除现有属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-rename-constant"></target>
            <paragraph classes="classref-method" ids="class-theme-method-rename-constant" names="class_theme_method_rename_constant">void <strong>rename_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>old_name</literal> 的常量属性，则将其重命名为 <literal>name</literal>。</paragraph>
            <paragraph>不存在时失败，新名称已存在时也会失败。请使用 <reference internal="True" refid="class-theme-method-has-constant"><inline classes="std std-ref">has_constant</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-clear-constant"><inline classes="std std-ref">clear_constant</inline></reference> 移除现有属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-rename-font"></target>
            <paragraph classes="classref-method" ids="class-theme-method-rename-font" names="class_theme_method_rename_font">void <strong>rename_font</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>old_name</literal> 的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 属性，则将其重命名为 <literal>name</literal>。</paragraph>
            <paragraph>不存在时失败，新名称已存在时也会失败。请使用 <reference internal="True" refid="class-theme-method-has-font"><inline classes="std std-ref">has_font</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-clear-font"><inline classes="std std-ref">clear_font</inline></reference> 移除现有属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-rename-font-size"></target>
            <paragraph classes="classref-method" ids="class-theme-method-rename-font-size" names="class_theme_method_rename_font_size">void <strong>rename_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>old_name</literal> 的字体大小属性，则将其重命名为 <literal>name</literal>。</paragraph>
            <paragraph>不存在时失败，新名称已存在时也会失败。请使用 <reference internal="True" refid="class-theme-method-has-font-size"><inline classes="std std-ref">has_font_size</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-clear-font-size"><inline classes="std std-ref">clear_font_size</inline></reference> 移除现有属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-rename-icon"></target>
            <paragraph classes="classref-method" ids="class-theme-method-rename-icon" names="class_theme_method_rename_icon">void <strong>rename_icon</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>old_name</literal> 的图标属性，则将其重命名为 <literal>name</literal>。</paragraph>
            <paragraph>不存在时失败，新名称已存在时也会失败。请使用 <reference internal="True" refid="class-theme-method-has-icon"><inline classes="std std-ref">has_icon</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-clear-icon"><inline classes="std std-ref">clear_icon</inline></reference> 移除现有属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-rename-stylebox"></target>
            <paragraph classes="classref-method" ids="class-theme-method-rename-stylebox" names="class_theme_method_rename_stylebox">void <strong>rename_stylebox</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>old_name</literal> 的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 属性，则将其重命名为 <literal>name</literal>。</paragraph>
            <paragraph>不存在时失败，新名称已存在时也会失败。请使用 <reference internal="True" refid="class-theme-method-has-stylebox"><inline classes="std std-ref">has_stylebox</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-clear-stylebox"><inline classes="std std-ref">clear_stylebox</inline></reference> 移除现有属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-rename-theme-item"></target>
            <paragraph classes="classref-method" ids="class-theme-method-rename-theme-item" names="class_theme_method_rename_theme_item">void <strong>rename_theme_item</strong> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> old_name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type <strong>)</strong></paragraph>
            <paragraph>如果主题类型 <literal>theme_type</literal> 中存在名为 <literal>old_name</literal> 的主题属性，则将其重命名为 <literal>name</literal>。</paragraph>
            <paragraph>不存在时失败，新名称已存在时也会失败。请使用 <reference internal="True" refid="class-theme-method-has-theme-item"><inline classes="std std-ref">has_theme_item</inline></reference> 检查是否存在，使用 <reference internal="True" refid="class-theme-method-clear-theme-item"><inline classes="std std-ref">clear_theme_item</inline></reference> 移除现有属性。</paragraph>
            <paragraph><strong>注意：</strong>这个方法类似于调用相应的数据类型特定方法，但可以用于更通用逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-color"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-color" names="class_theme_method_set_color">void <strong>set_color</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>创建或改变由名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 属性的值。移除该属性请使用 <reference internal="True" refid="class-theme-method-clear-color"><inline classes="std std-ref">clear_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-constant"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-constant" names="class_theme_method_set_constant">void <strong>set_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> constant <strong>)</strong></paragraph>
            <paragraph>创建或改变由名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 定义的常量属性的值。移除该属性请使用 <reference internal="True" refid="class-theme-method-clear-constant"><inline classes="std std-ref">clear_constant</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-font"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-font" names="class_theme_method_set_font">void <strong>set_font</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> font <strong>)</strong></paragraph>
            <paragraph>创建或改变由名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 属性的值。移除该属性请使用 <reference internal="True" refid="class-theme-method-clear-font"><inline classes="std std-ref">clear_font</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-font-size"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-font-size" names="class_theme_method_set_font_size">void <strong>set_font_size</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong></paragraph>
            <paragraph>创建或改变由名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 定义的字体大小属性的值。移除该属性请使用 <reference internal="True" refid="class-theme-method-clear-font-size"><inline classes="std std-ref">clear_font_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-icon"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-icon" names="class_theme_method_set_icon">void <strong>set_icon</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> texture <strong>)</strong></paragraph>
            <paragraph>创建或改变由名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 定义的图标属性的值。移除该属性请使用 <reference internal="True" refid="class-theme-method-clear-icon"><inline classes="std std-ref">clear_icon</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-stylebox"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-stylebox" names="class_theme_method_set_stylebox">void <strong>set_stylebox</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> texture <strong>)</strong></paragraph>
            <paragraph>创建或改变由名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 定义的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 属性的值。移除该属性请使用 <reference internal="True" refid="class-theme-method-clear-stylebox"><inline classes="std std-ref">clear_stylebox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-theme-item"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-theme-item" names="class_theme_method_set_theme_item">void <strong>set_theme_item</strong> <strong>(</strong> <reference internal="True" refid="enum-theme-datatype"><inline classes="std std-ref">DataType</inline></reference> data_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>创建或改变由名称 <literal>name</literal> 和主题类型 <literal>theme_type</literal> 定义的主题属性的值。移除该属性请使用 <reference internal="True" refid="class-theme-method-clear-theme-item"><inline classes="std std-ref">clear_theme_item</inline></reference>。</paragraph>
            <paragraph>如果 <literal>value</literal> 的类型不被 <literal>data_type</literal> 所接受，则失败。</paragraph>
            <paragraph><strong>注意：</strong>这个方法类似于调用相应的数据类型特定方法，但可以用于更通用逻辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-theme-method-set-type-variation"></target>
            <paragraph classes="classref-method" ids="class-theme-method-set-type-variation" names="class_theme_method_set_type_variation">void <strong>set_type_variation</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> theme_type, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> base_type <strong>)</strong></paragraph>
            <paragraph>将主题类型 <literal>theme_type</literal> 标记为基础类型 <literal>base_type</literal> 的变种。</paragraph>
            <paragraph>这会将 <literal>theme_type</literal> 添加为属于 <literal>base_type</literal> 类的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的 <reference internal="True" refuri="class_control#class-control-property-theme-type-variation"><inline classes="std std-ref">Control.theme_type_variation</inline></reference> 的建议选项。</paragraph>
            <paragraph>变种也可以嵌套，即 <literal>base_type</literal> 可以是另一个变种。如果变种链以匹配 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 类的 <literal>base_type</literal> 结束，则整个链将被建议为选项。</paragraph>
            <paragraph><strong>注意：</strong>仅当该主题资源被设置为项目的默认主题时才会显示建议。参见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-theme-custom"><inline classes="std std-ref">ProjectSettings.gui/theme/custom</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
