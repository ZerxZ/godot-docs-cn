<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editordebuggerplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorDebuggerPlugin.xml.</comment>
    <target refid="class-editordebuggerplugin"></target>
    <section ids="editordebuggerplugin class-editordebuggerplugin" names="editordebuggerplugin class_editordebuggerplugin">
        <title>EditorDebuggerPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>实现调试器插件的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>编辑器调试器插件 <strong>EditorDebuggerPlugin</strong> 提供了与调试器的编辑器端相关的函数。</paragraph>
            <paragraph>要与调试器交互，必须将这个类的实例通过 <reference internal="True" refuri="class_editorplugin#class-editorplugin-method-add-debugger-plugin"><inline classes="std std-ref">EditorPlugin.add_debugger_plugin</inline></reference> 添加至编辑器。</paragraph>
            <paragraph>添加完成后，会针对该插件可用的每一个编辑器调试器会话 <reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference> 回调一次 <reference internal="True" refid="class-editordebuggerplugin-private-method-setup-session"><inline classes="std std-ref">_setup_session</inline></reference>，后续有新的会话也会进行回调（这些会话在此阶段可能尚未激活）。</paragraph>
            <paragraph>你可以通过 <reference internal="True" refid="class-editordebuggerplugin-method-get-sessions"><inline classes="std std-ref">get_sessions</inline></reference> 获取所有可用的 <reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference>，也可以通过 <reference internal="True" refid="class-editordebuggerplugin-method-get-session"><inline classes="std std-ref">get_session</inline></reference> 获取特定的会话。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin

class ExampleEditorDebugger extends EditorDebuggerPlugin:

    func _has_capture(prefix):
        # 如果想要处理带有这个前缀的消息则返回 true。
        return prefix == "my_plugin"

    func _capture(message, data, session_id):
        if message == "my_plugin:ping":
            get_session(session_id).send_message("my_plugin:echo", data)

    func _setup_session(session_id):
        # 在调试器会话 UI 中添加新的选项卡，其中包含一个标签。
        var label = Label.new()
        label.name = "Example plugin"
        label.text = "示例插件"
        var session = get_session(session_id)
        # 监听会话开始和停止信号。
        session.started.connect(func (): print("会话已开始"))
        session.stopped.connect(func (): print("会话已停止"))
        session.add_session_tab(label)

var debugger = ExampleEditorDebugger.new()

func _enter_tree():
    add_debugger_plugin(debugger)

func _exit_tree():
    remove_debugger_plugin(debugger)</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="218"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-private-method-breakpoint-set-in-tree"><inline classes="std std-ref">_breakpoint_set_in_tree</inline></reference>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-private-method-breakpoints-cleared-in-tree"><inline classes="std std-ref">_breakpoints_cleared_in_tree</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-private-method-capture"><inline classes="std std-ref">_capture</inline></reference>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, session_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-private-method-goto-script-line"><inline classes="std std-ref">_goto_script_line</inline></reference>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-private-method-has-capture"><inline classes="std std-ref">_has_capture</inline></reference>(capture: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-private-method-setup-session"><inline classes="std std-ref">_setup_session</inline></reference>(session_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-method-get-session"><inline classes="std std-ref">get_session</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editordebuggerplugin-method-get-sessions"><inline classes="std std-ref">get_sessions</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editordebuggerplugin-private-method-breakpoint-set-in-tree"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-private-method-breakpoint-set-in-tree" names="class_editordebuggerplugin_private_method__breakpoint_set_in_tree"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_breakpoint_set_in_tree</strong>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editordebuggerplugin-private-method-breakpoint-set-in-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Override this method to be notified when a breakpoint is set in the editor.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editordebuggerplugin-private-method-breakpoints-cleared-in-tree"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-private-method-breakpoints-cleared-in-tree" names="class_editordebuggerplugin_private_method__breakpoints_cleared_in_tree"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_breakpoints_cleared_in_tree</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editordebuggerplugin-private-method-breakpoints-cleared-in-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Override this method to be notified when all breakpoints are cleared in the editor.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editordebuggerplugin-private-method-capture"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-private-method-capture" names="class_editordebuggerplugin_private_method__capture"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_capture</strong>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, session_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editordebuggerplugin-private-method-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以处理传入的消息。<literal>session_id</literal> 是接收到消息的 <reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference> 的 ID（你可以通过 <reference internal="True" refid="class-editordebuggerplugin-method-get-session"><inline classes="std std-ref">get_session</inline></reference> 检索到它）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editordebuggerplugin-private-method-goto-script-line"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-private-method-goto-script-line" names="class_editordebuggerplugin_private_method__goto_script_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_goto_script_line</strong>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editordebuggerplugin-private-method-goto-script-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Override this method to be notified when a breakpoint line has been clicked in the debugger breakpoint panel.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editordebuggerplugin-private-method-has-capture"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-private-method-has-capture" names="class_editordebuggerplugin_private_method__has_capture"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_capture</strong>(capture: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editordebuggerplugin-private-method-has-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以启用从调试器接收消息。如果<literal>capture</literal>是"my_message"，那么以"my_message:"开头的消息将会传递到<reference internal="True" refid="class-editordebuggerplugin-private-method-capture"><inline classes="std std-ref">_capture</inline></reference>方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editordebuggerplugin-private-method-setup-session"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-private-method-setup-session" names="class_editordebuggerplugin_private_method__setup_session"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_setup_session</strong>(session_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editordebuggerplugin-private-method-setup-session"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法，以在创建新的<reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference>时被通知（此阶段期间可能处于非活动状态）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editordebuggerplugin-method-get-session"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-method-get-session" names="class_editordebuggerplugin_method_get_session"><reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference> <strong>get_session</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-editordebuggerplugin-method-get-session"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>id</literal> 的 <reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editordebuggerplugin-method-get-sessions"></target>
            <paragraph classes="classref-method" ids="class-editordebuggerplugin-method-get-sessions" names="class_editordebuggerplugin_method_get_sessions"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_sessions</strong>() <reference internal="True" refid="class-editordebuggerplugin-method-get-sessions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该调试器插件当前可用的 <reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession"><inline classes="std std-ref">EditorDebuggerSession</inline></reference> 数组。</paragraph>
            <paragraph><strong>注意：</strong>数组中的会话可能处于非活动状态，请通过 <reference internal="True" refuri="class_editordebuggersession#class-editordebuggersession-method-is-active"><inline classes="std std-ref">EditorDebuggerSession.is_active</inline></reference> 检查它们的状态。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
