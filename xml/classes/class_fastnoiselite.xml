<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_fastnoiselite.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/noise/doc_classes/FastNoiseLite.xml.</comment>
    <target refid="class-fastnoiselite"></target>
    <section ids="fastnoiselite class-fastnoiselite" names="fastnoiselite class_fastnoiselite">
        <title>FastNoiseLite</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_noise#class-noise"><inline classes="std std-ref">Noise</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>使用 FastNoiseLite 库生成噪声。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类使用 FastNoiseLite 库生成噪声，该库是多种噪声算法的集合，包括 Cellular、Perlin、Value 等。</paragraph>
            <paragraph>大多数生成的噪声值都在 <literal>[-1, 1]</literal> 范围内，但并非总是如此。一些蜂窝噪声算法返回高于 <literal>1</literal> 的结果。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="78"></colspec>
                    <colspec colwidth="100"></colspec>
                    <colspec colwidth="22"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-cellular-distance-function"><inline classes="std std-ref">cellular_distance_function</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-cellular-jitter"><inline classes="std std-ref">cellular_jitter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-cellular-return-type"><inline classes="std std-ref">cellular_return_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-amplitude"><inline classes="std std-ref">domain_warp_amplitude</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>30.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-enabled"><inline classes="std std-ref">domain_warp_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-gain"><inline classes="std std-ref">domain_warp_fractal_gain</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-lacunarity"><inline classes="std std-ref">domain_warp_fractal_lacunarity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>6.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-octaves"><inline classes="std std-ref">domain_warp_fractal_octaves</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-type"><inline classes="std std-ref">domain_warp_fractal_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-frequency"><inline classes="std std-ref">domain_warp_frequency</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.05</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-domain-warp-type"><inline classes="std std-ref">domain_warp_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-fractal-gain"><inline classes="std std-ref">fractal_gain</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-fractal-lacunarity"><inline classes="std std-ref">fractal_lacunarity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-fractal-octaves"><inline classes="std std-ref">fractal_octaves</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-fractal-ping-pong-strength"><inline classes="std std-ref">fractal_ping_pong_strength</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-fractal-type"><inline classes="std std-ref">fractal_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-fractal-weighted-strength"><inline classes="std std-ref">fractal_weighted_strength</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-frequency"><inline classes="std std-ref">frequency</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.01</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-noise-type"><inline classes="std std-ref">noise_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fastnoiselite-property-seed"><inline classes="std std-ref">seed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-fastnoiselite-noisetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-fastnoiselite-noisetype" names="enum_fastnoiselite_noisetype">enum <strong>NoiseType</strong>: <reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fastnoiselite-constant-type-value"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-type-value" names="class_fastnoiselite_constant_type_value"><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>TYPE_VALUE</strong> = <literal>5</literal></paragraph>
            <paragraph>点阵被分配随机值，然后根据相邻值进行插值。</paragraph>
            <target refid="class-fastnoiselite-constant-type-value-cubic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-type-value-cubic" names="class_fastnoiselite_constant_type_value_cubic"><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>TYPE_VALUE_CUBIC</strong> = <literal>4</literal></paragraph>
            <paragraph>类似于 Value 噪声，但速度较慢。波峰和波谷的变化更大。</paragraph>
            <paragraph>在使用值噪声创建凹凸贴图时，可以使用三次噪声来避免某些伪影。一般来说，如果值噪声用于高度图或凹凸贴图，则应始终使用此模式。</paragraph>
            <target refid="class-fastnoiselite-constant-type-perlin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-type-perlin" names="class_fastnoiselite_constant_type_perlin"><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>TYPE_PERLIN</strong> = <literal>3</literal></paragraph>
            <paragraph>随机渐变的一种格子。对它们的点积进行插值，以获得格子之间的值。</paragraph>
            <target refid="class-fastnoiselite-constant-type-cellular"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-type-cellular" names="class_fastnoiselite_constant_type_cellular"><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>TYPE_CELLULAR</strong> = <literal>2</literal></paragraph>
            <paragraph>蜂窝包括 Worley 噪声图和 Voronoi 图，它们创建了相同值的不同区域。</paragraph>
            <target refid="class-fastnoiselite-constant-type-simplex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-type-simplex" names="class_fastnoiselite_constant_type_simplex"><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>TYPE_SIMPLEX</strong> = <literal>0</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-fastnoiselite-constant-type-perlin"><inline classes="std std-ref">TYPE_PERLIN</inline></reference> 不同，渐变存在于单纯形点阵中，而不是网格点阵中，从而避免了定向伪影。</paragraph>
            <target refid="class-fastnoiselite-constant-type-simplex-smooth"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-type-simplex-smooth" names="class_fastnoiselite_constant_type_simplex_smooth"><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>TYPE_SIMPLEX_SMOOTH</strong> = <literal>1</literal></paragraph>
            <paragraph>对 <reference internal="True" refid="class-fastnoiselite-constant-type-simplex"><inline classes="std std-ref">TYPE_SIMPLEX</inline></reference> 修改后得到的更高质量版本，但速度较慢。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-fastnoiselite-fractaltype"></target>
            <paragraph classes="classref-enumeration" ids="enum-fastnoiselite-fractaltype" names="enum_fastnoiselite_fractaltype">enum <strong>FractalType</strong>: <reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fastnoiselite-constant-fractal-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-fractal-none" names="class_fastnoiselite_constant_fractal_none"><reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference> <strong>FRACTAL_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>无分形噪声。</paragraph>
            <target refid="class-fastnoiselite-constant-fractal-fbm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-fractal-fbm" names="class_fastnoiselite_constant_fractal_fbm"><reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference> <strong>FRACTAL_FBM</strong> = <literal>1</literal></paragraph>
            <paragraph>使用分形布朗运动将八度音阶组合成分形的方法。</paragraph>
            <target refid="class-fastnoiselite-constant-fractal-ridged"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-fractal-ridged" names="class_fastnoiselite_constant_fractal_ridged"><reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference> <strong>FRACTAL_RIDGED</strong> = <literal>2</literal></paragraph>
            <paragraph>将八度音阶组合成分形的方法，从而产生一种“脊状”外观。</paragraph>
            <target refid="class-fastnoiselite-constant-fractal-ping-pong"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-fractal-ping-pong" names="class_fastnoiselite_constant_fractal_ping_pong"><reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference> <strong>FRACTAL_PING_PONG</strong> = <literal>3</literal></paragraph>
            <paragraph>将八度音阶组合成具有乒乓效果的分形的方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-fastnoiselite-cellulardistancefunction"></target>
            <paragraph classes="classref-enumeration" ids="enum-fastnoiselite-cellulardistancefunction" names="enum_fastnoiselite_cellulardistancefunction">enum <strong>CellularDistanceFunction</strong>: <reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fastnoiselite-constant-distance-euclidean"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-distance-euclidean" names="class_fastnoiselite_constant_distance_euclidean"><reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference> <strong>DISTANCE_EUCLIDEAN</strong> = <literal>0</literal></paragraph>
            <paragraph>到最近点的欧几里得距离。</paragraph>
            <target refid="class-fastnoiselite-constant-distance-euclidean-squared"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-distance-euclidean-squared" names="class_fastnoiselite_constant_distance_euclidean_squared"><reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference> <strong>DISTANCE_EUCLIDEAN_SQUARED</strong> = <literal>1</literal></paragraph>
            <paragraph>到最近点的欧几里得距离的平方。</paragraph>
            <target refid="class-fastnoiselite-constant-distance-manhattan"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-distance-manhattan" names="class_fastnoiselite_constant_distance_manhattan"><reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference> <strong>DISTANCE_MANHATTAN</strong> = <literal>2</literal></paragraph>
            <paragraph>到最近点的曼哈顿距离（出租车度量法）。</paragraph>
            <target refid="class-fastnoiselite-constant-distance-hybrid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-distance-hybrid" names="class_fastnoiselite_constant_distance_hybrid"><reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference> <strong>DISTANCE_HYBRID</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refid="class-fastnoiselite-constant-distance-euclidean"><inline classes="std std-ref">DISTANCE_EUCLIDEAN</inline></reference> 和 <reference internal="True" refid="class-fastnoiselite-constant-distance-manhattan"><inline classes="std std-ref">DISTANCE_MANHATTAN</inline></reference> 的混合，以给出弯曲的单元格边界</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-fastnoiselite-cellularreturntype"></target>
            <paragraph classes="classref-enumeration" ids="enum-fastnoiselite-cellularreturntype" names="enum_fastnoiselite_cellularreturntype">enum <strong>CellularReturnType</strong>: <reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fastnoiselite-constant-return-cell-value"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-return-cell-value" names="class_fastnoiselite_constant_return_cell_value"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>RETURN_CELL_VALUE</strong> = <literal>0</literal></paragraph>
            <paragraph>蜂窝单元格距离函数，将为单元格内的所有点返回相同的值。</paragraph>
            <target refid="class-fastnoiselite-constant-return-distance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-return-distance" names="class_fastnoiselite_constant_return_distance"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>RETURN_DISTANCE</strong> = <literal>1</literal></paragraph>
            <paragraph>蜂窝单元格距离函数，将返回一个由到最近点的距离确定的值。</paragraph>
            <target refid="class-fastnoiselite-constant-return-distance2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-return-distance2" names="class_fastnoiselite_constant_return_distance2"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>RETURN_DISTANCE2</strong> = <literal>2</literal></paragraph>
            <paragraph>蜂窝单元格距离函数，将返回到第二最近点的距离。</paragraph>
            <target refid="class-fastnoiselite-constant-return-distance2-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-return-distance2-add" names="class_fastnoiselite_constant_return_distance2_add"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>RETURN_DISTANCE2_ADD</strong> = <literal>3</literal></paragraph>
            <paragraph>将最近点的距离与次近点的距离相加。</paragraph>
            <target refid="class-fastnoiselite-constant-return-distance2-sub"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-return-distance2-sub" names="class_fastnoiselite_constant_return_distance2_sub"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>RETURN_DISTANCE2_SUB</strong> = <literal>4</literal></paragraph>
            <paragraph>将最近点的距离与次近点的距离相减。</paragraph>
            <target refid="class-fastnoiselite-constant-return-distance2-mul"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-return-distance2-mul" names="class_fastnoiselite_constant_return_distance2_mul"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>RETURN_DISTANCE2_MUL</strong> = <literal>5</literal></paragraph>
            <paragraph>将最近点的距离与次近点的距离相乘。</paragraph>
            <target refid="class-fastnoiselite-constant-return-distance2-div"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-return-distance2-div" names="class_fastnoiselite_constant_return_distance2_div"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>RETURN_DISTANCE2_DIV</strong> = <literal>6</literal></paragraph>
            <paragraph>将最近点的距离与次近点的距离相除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-fastnoiselite-domainwarptype"></target>
            <paragraph classes="classref-enumeration" ids="enum-fastnoiselite-domainwarptype" names="enum_fastnoiselite_domainwarptype">enum <strong>DomainWarpType</strong>: <reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fastnoiselite-constant-domain-warp-simplex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-domain-warp-simplex" names="class_fastnoiselite_constant_domain_warp_simplex"><reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference> <strong>DOMAIN_WARP_SIMPLEX</strong> = <literal>0</literal></paragraph>
            <paragraph>使用单纯形噪声算法，对域进行扭曲。</paragraph>
            <target refid="class-fastnoiselite-constant-domain-warp-simplex-reduced"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-domain-warp-simplex-reduced" names="class_fastnoiselite_constant_domain_warp_simplex_reduced"><reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference> <strong>DOMAIN_WARP_SIMPLEX_REDUCED</strong> = <literal>1</literal></paragraph>
            <paragraph>使用简化版的单纯形噪声算法，对域进行扭曲。</paragraph>
            <target refid="class-fastnoiselite-constant-domain-warp-basic-grid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-domain-warp-basic-grid" names="class_fastnoiselite_constant_domain_warp_basic_grid"><reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference> <strong>DOMAIN_WARP_BASIC_GRID</strong> = <literal>2</literal></paragraph>
            <paragraph>使用简单的噪声栅格（不像其他方法那样平滑，但性能更高），对域进行扭曲。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-fastnoiselite-domainwarpfractaltype"></target>
            <paragraph classes="classref-enumeration" ids="enum-fastnoiselite-domainwarpfractaltype" names="enum_fastnoiselite_domainwarpfractaltype">enum <strong>DomainWarpFractalType</strong>: <reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fastnoiselite-constant-domain-warp-fractal-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-domain-warp-fractal-none" names="class_fastnoiselite_constant_domain_warp_fractal_none"><reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference> <strong>DOMAIN_WARP_FRACTAL_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>没有用于扭曲空间的分形噪声。</paragraph>
            <target refid="class-fastnoiselite-constant-domain-warp-fractal-progressive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-domain-warp-fractal-progressive" names="class_fastnoiselite_constant_domain_warp_fractal_progressive"><reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference> <strong>DOMAIN_WARP_FRACTAL_PROGRESSIVE</strong> = <literal>1</literal></paragraph>
            <paragraph>逐渐扭曲空间，一个八度一个八度，导致更“液化”的失真。</paragraph>
            <target refid="class-fastnoiselite-constant-domain-warp-fractal-independent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fastnoiselite-constant-domain-warp-fractal-independent" names="class_fastnoiselite_constant_domain_warp_fractal_independent"><reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference> <strong>DOMAIN_WARP_FRACTAL_INDEPENDENT</strong> = <literal>2</literal></paragraph>
            <paragraph>为每个八度音阶独立地扭曲空间，从而导致更混乱的失真。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-fastnoiselite-property-cellular-distance-function"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-cellular-distance-function" names="class_fastnoiselite_property_cellular_distance_function"><reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference> <strong>cellular_distance_function</strong> = <literal>0</literal> <reference internal="True" refid="class-fastnoiselite-property-cellular-distance-function"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cellular_distance_function</strong>(value: <reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference> <strong>get_cellular_distance_function</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定如何计算到最近/第二最近点的距离。有关选项，请参阅 <reference internal="True" refid="enum-fastnoiselite-cellulardistancefunction"><inline classes="std std-ref">CellularDistanceFunction</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-cellular-jitter"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-cellular-jitter" names="class_fastnoiselite_property_cellular_jitter"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cellular_jitter</strong> = <literal>1.0</literal> <reference internal="True" refid="class-fastnoiselite-property-cellular-jitter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cellular_jitter</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cellular_jitter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>一个点可以离开其栅格位置的最大距离。对于偶数栅格，设置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-cellular-return-type"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-cellular-return-type" names="class_fastnoiselite_property_cellular_return_type"><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>cellular_return_type</strong> = <literal>1</literal> <reference internal="True" refid="class-fastnoiselite-property-cellular-return-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cellular_return_type</strong>(value: <reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference> <strong>get_cellular_return_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>蜂窝噪声计算的返回类型。请参阅 <reference internal="True" refid="enum-fastnoiselite-cellularreturntype"><inline classes="std std-ref">CellularReturnType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-amplitude"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-amplitude" names="class_fastnoiselite_property_domain_warp_amplitude"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>domain_warp_amplitude</strong> = <literal>30.0</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-amplitude"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_amplitude</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_domain_warp_amplitude</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置距原点的最大扭曲距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-enabled"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-enabled" names="class_fastnoiselite_property_domain_warp_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>domain_warp_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_domain_warp_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果启用，则另一个 FastNoiseLite 实例将被用于扭曲空间，从而导致噪声失真。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-fractal-gain"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-fractal-gain" names="class_fastnoiselite_property_domain_warp_fractal_gain"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>domain_warp_fractal_gain</strong> = <literal>0.5</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-gain"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_fractal_gain</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_domain_warp_fractal_gain</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定用于扭曲空间的噪声的每个后续层的强度。</paragraph>
            <paragraph>较低的值更强调较低频率的基础层，而较高的值则更强调较高频率的层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-fractal-lacunarity"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-fractal-lacunarity" names="class_fastnoiselite_property_domain_warp_fractal_lacunarity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>domain_warp_fractal_lacunarity</strong> = <literal>6.0</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-lacunarity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_fractal_lacunarity</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_domain_warp_fractal_lacunarity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>扭曲空间的分形噪声的八度音阶空隙。增加此值，会导致更高的八度音阶，从而产生细节更精细、外观更粗糙的噪声。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-fractal-octaves"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-fractal-octaves" names="class_fastnoiselite_property_domain_warp_fractal_octaves"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>domain_warp_fractal_octaves</strong> = <literal>5</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-octaves"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_fractal_octaves</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_domain_warp_fractal_octaves</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为获得扭曲空间的分形噪声的最终值而采样的噪声层数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-fractal-type"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-fractal-type" names="class_fastnoiselite_property_domain_warp_fractal_type"><reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference> <strong>domain_warp_fractal_type</strong> = <literal>1</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-fractal-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_fractal_type</strong>(value: <reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference> <strong>get_domain_warp_fractal_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将八度音阶组合成用于扭曲空间的分形的方法。请参阅 <reference internal="True" refid="enum-fastnoiselite-domainwarpfractaltype"><inline classes="std std-ref">DomainWarpFractalType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-frequency"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-frequency" names="class_fastnoiselite_property_domain_warp_frequency"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>domain_warp_frequency</strong> = <literal>0.05</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-frequency"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_frequency</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_domain_warp_frequency</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>扭曲空间的噪音频率。低频产生平滑的噪声，而高频产生更粗糙、颗粒状更明显的噪声。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-domain-warp-type"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-domain-warp-type" names="class_fastnoiselite_property_domain_warp_type"><reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference> <strong>domain_warp_type</strong> = <literal>0</literal> <reference internal="True" refid="class-fastnoiselite-property-domain-warp-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_domain_warp_type</strong>(value: <reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference> <strong>get_domain_warp_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置扭曲算法。请参阅 <reference internal="True" refid="enum-fastnoiselite-domainwarptype"><inline classes="std std-ref">DomainWarpType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-fractal-gain"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-fractal-gain" names="class_fastnoiselite_property_fractal_gain"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fractal_gain</strong> = <literal>0.5</literal> <reference internal="True" refid="class-fastnoiselite-property-fractal-gain"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fractal_gain</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fractal_gain</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定分形噪声中噪声的每个后续层的强度。</paragraph>
            <paragraph>较低的值更强调较低频率的基础层，而较高的值则更强调较高频率的层。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-fractal-lacunarity"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-fractal-lacunarity" names="class_fastnoiselite_property_fractal_lacunarity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fractal_lacunarity</strong> = <literal>2.0</literal> <reference internal="True" refid="class-fastnoiselite-property-fractal-lacunarity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fractal_lacunarity</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fractal_lacunarity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>后续八度音阶之间的倍频器。增加该值，会产生更高的八度音阶，从而产生细节更精细、外观更粗糙的噪声。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-fractal-octaves"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-fractal-octaves" names="class_fastnoiselite_property_fractal_octaves"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>fractal_octaves</strong> = <literal>5</literal> <reference internal="True" refid="class-fastnoiselite-property-fractal-octaves"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fractal_octaves</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_fractal_octaves</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为获得分形噪声类型的最终值而采样的噪声层数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-fractal-ping-pong-strength"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-fractal-ping-pong-strength" names="class_fastnoiselite_property_fractal_ping_pong_strength"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fractal_ping_pong_strength</strong> = <literal>2.0</literal> <reference internal="True" refid="class-fastnoiselite-property-fractal-ping-pong-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fractal_ping_pong_strength</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fractal_ping_pong_strength</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置分形乒乓类型的强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-fractal-type"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-fractal-type" names="class_fastnoiselite_property_fractal_type"><reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference> <strong>fractal_type</strong> = <literal>1</literal> <reference internal="True" refid="class-fastnoiselite-property-fractal-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fractal_type</strong>(value: <reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference> <strong>get_fractal_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将八度音阶组合成分形的方法。请参阅 <reference internal="True" refid="enum-fastnoiselite-fractaltype"><inline classes="std std-ref">FractalType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-fractal-weighted-strength"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-fractal-weighted-strength" names="class_fastnoiselite_property_fractal_weighted_strength"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fractal_weighted_strength</strong> = <literal>0.0</literal> <reference internal="True" refid="class-fastnoiselite-property-fractal-weighted-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fractal_weighted_strength</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fractal_weighted_strength</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>较高的权重意味着如果较低的八度具有较大的影响，则较高的八度具有较小的影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-frequency"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-frequency" names="class_fastnoiselite_property_frequency"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>frequency</strong> = <literal>0.01</literal> <reference internal="True" refid="class-fastnoiselite-property-frequency"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frequency</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_frequency</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所有噪声类型的频率。低频产生平滑的噪声，而高频产生更粗糙、颗粒状更明显的噪声。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-noise-type"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-noise-type" names="class_fastnoiselite_property_noise_type"><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>noise_type</strong> = <literal>1</literal> <reference internal="True" refid="class-fastnoiselite-property-noise-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_noise_type</strong>(value: <reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference> <strong>get_noise_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所使用的噪声算法。见 <reference internal="True" refid="enum-fastnoiselite-noisetype"><inline classes="std std-ref">NoiseType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-offset"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-offset" names="class_fastnoiselite_property_offset"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>offset</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-fastnoiselite-property-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用给定的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 对噪声输入坐标进行平移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fastnoiselite-property-seed"></target>
            <paragraph classes="classref-property" ids="class-fastnoiselite-property-seed" names="class_fastnoiselite_property_seed"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>seed</strong> = <literal>0</literal> <reference internal="True" refid="class-fastnoiselite-property-seed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_seed</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_seed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所有噪声类型的随机数种子。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
