<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_ribbontrailmesh.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/RibbonTrailMesh.xml.</comment>
    <target refid="class-ribbontrailmesh"></target>
    <section ids="ribbontrailmesh class-ribbontrailmesh" names="ribbontrailmesh class_ribbontrailmesh">
        <title>RibbonTrailMesh</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_primitivemesh#class-primitivemesh"><inline classes="std std-ref">PrimitiveMesh</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>代表竖直丝带形状的 <reference internal="True" refuri="class_primitivemesh#class-primitivemesh"><inline classes="std std-ref">PrimitiveMesh</inline></reference>，丝带的宽度可变。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>RibbonTrailMesh</strong> 代表竖直条带形状的网格，条带的宽度可变。条带由若干扁平或十字形的分节构成，每一节的长度 <reference internal="True" refid="class-ribbontrailmesh-property-section-length"><inline classes="std std-ref">section_length</inline></reference> 和分段数 <reference internal="True" refid="class-ribbontrailmesh-property-section-segments"><inline classes="std std-ref">section_segments</inline></reference> 都相同。条带会沿着总长度对 <reference internal="True" refid="class-ribbontrailmesh-property-curve"><inline classes="std std-ref">curve</inline></reference> 进行采样，这样这条曲线就决定了条带沿长度的大小。</paragraph>
            <paragraph>该基本网格常用于粒子拖尾。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/particles/trails"><inline classes="doc">3D 粒子拖尾</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/particles/index"><inline classes="doc">粒子系统（3D）</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="42"></colspec>
                    <colspec colwidth="74"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ribbontrailmesh-property-curve"><inline classes="std std-ref">curve</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ribbontrailmesh-property-section-length"><inline classes="std std-ref">section_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ribbontrailmesh-property-section-segments"><inline classes="std std-ref">section_segments</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ribbontrailmesh-property-sections"><inline classes="std std-ref">sections</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-ribbontrailmesh-shape"><inline classes="std std-ref">Shape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ribbontrailmesh-property-shape"><inline classes="std std-ref">shape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ribbontrailmesh-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-ribbontrailmesh-shape"></target>
            <paragraph classes="classref-enumeration" ids="enum-ribbontrailmesh-shape" names="enum_ribbontrailmesh_shape">enum <strong>Shape</strong>: <reference internal="True" refid="enum-ribbontrailmesh-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-ribbontrailmesh-constant-shape-flat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ribbontrailmesh-constant-shape-flat" names="class_ribbontrailmesh_constant_shape_flat"><reference internal="True" refid="enum-ribbontrailmesh-shape"><inline classes="std std-ref">Shape</inline></reference> <strong>SHAPE_FLAT</strong> = <literal>0</literal></paragraph>
            <paragraph>将网格指定为单个扁平的面。</paragraph>
            <target refid="class-ribbontrailmesh-constant-shape-cross"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ribbontrailmesh-constant-shape-cross" names="class_ribbontrailmesh_constant_shape_cross"><reference internal="True" refid="enum-ribbontrailmesh-shape"><inline classes="std std-ref">Shape</inline></reference> <strong>SHAPE_CROSS</strong> = <literal>1</literal></paragraph>
            <paragraph>将网格指定为两个互相垂直的面，形成十字形。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-ribbontrailmesh-property-curve"></target>
            <paragraph classes="classref-property" ids="class-ribbontrailmesh-property-curve" names="class_ribbontrailmesh_property_curve"><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>curve</strong> <reference internal="True" refid="class-ribbontrailmesh-property-curve"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_curve</strong>(value: <reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_curve#class-curve"><inline classes="std std-ref">Curve</inline></reference> <strong>get_curve</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定条带沿长度的大小。通过将基础大小 <reference internal="True" refid="class-ribbontrailmesh-property-size"><inline classes="std std-ref">size</inline></reference> 乘以这条曲线上给定位置对应的值，就可以得到分节上某一段的大小。如果得到的值小于 <literal>0</literal>，则对应的面会被翻转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ribbontrailmesh-property-section-length"></target>
            <paragraph classes="classref-property" ids="class-ribbontrailmesh-property-section-length" names="class_ribbontrailmesh_property_section_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>section_length</strong> = <literal>0.2</literal> <reference internal="True" refid="class-ribbontrailmesh-property-section-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_section_length</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_section_length</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>条带中一节的长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ribbontrailmesh-property-section-segments"></target>
            <paragraph classes="classref-property" ids="class-ribbontrailmesh-property-section-segments" names="class_ribbontrailmesh_property_section_segments"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>section_segments</strong> = <literal>3</literal> <reference internal="True" refid="class-ribbontrailmesh-property-section-segments"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_section_segments</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_section_segments</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>条带中一节的段数。每一段的大小是根据对 <reference internal="True" refid="class-ribbontrailmesh-property-curve"><inline classes="std std-ref">curve</inline></reference> 的采样确定的。更高的值会生成更细致的条带，但以性能为代价。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ribbontrailmesh-property-sections"></target>
            <paragraph classes="classref-property" ids="class-ribbontrailmesh-property-sections" names="class_ribbontrailmesh_property_sections"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>sections</strong> = <literal>5</literal> <reference internal="True" refid="class-ribbontrailmesh-property-sections"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sections</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_sections</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>条带中分节的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ribbontrailmesh-property-shape"></target>
            <paragraph classes="classref-property" ids="class-ribbontrailmesh-property-shape" names="class_ribbontrailmesh_property_shape"><reference internal="True" refid="enum-ribbontrailmesh-shape"><inline classes="std std-ref">Shape</inline></reference> <strong>shape</strong> = <literal>1</literal> <reference internal="True" refid="class-ribbontrailmesh-property-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shape</strong>(value: <reference internal="True" refid="enum-ribbontrailmesh-shape"><inline classes="std std-ref">Shape</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-ribbontrailmesh-shape"><inline classes="std std-ref">Shape</inline></reference> <strong>get_shape</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定条带的形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ribbontrailmesh-property-size"></target>
            <paragraph classes="classref-property" ids="class-ribbontrailmesh-property-size" names="class_ribbontrailmesh_property_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>size</strong> = <literal>1.0</literal> <reference internal="True" refid="class-ribbontrailmesh-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>条带的基础大小。通过将这个大小乘以 <reference internal="True" refid="class-ribbontrailmesh-property-curve"><inline classes="std std-ref">curve</inline></reference> 上给定位置对应的值，就可以得到分节上某一段的大小。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
