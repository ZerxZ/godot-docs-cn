<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_multiplayerpeer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/MultiplayerPeer.xml.</comment>
    <target refid="class-multiplayerpeer"></target>
    <section ids="multiplayerpeer class-multiplayerpeer" names="multiplayerpeer class_multiplayerpeer">
        <title>MultiplayerPeer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_enetmultiplayerpeer#class-enetmultiplayerpeer"><inline classes="std std-ref">ENetMultiplayerPeer</inline></reference>, <reference internal="True" refuri="class_multiplayerpeerextension#class-multiplayerpeerextension"><inline classes="std std-ref">MultiplayerPeerExtension</inline></reference>, <reference internal="True" refuri="class_offlinemultiplayerpeer#class-offlinemultiplayerpeer"><inline classes="std std-ref">OfflineMultiplayerPeer</inline></reference>, <reference internal="True" refuri="class_webrtcmultiplayerpeer#class-webrtcmultiplayerpeer"><inline classes="std std-ref">WebRTCMultiplayerPeer</inline></reference>, <reference internal="True" refuri="class_websocketmultiplayerpeer#class-websocketmultiplayerpeer"><inline classes="std std-ref">WebSocketMultiplayerPeer</inline></reference></paragraph>
        <paragraph>特化 <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> 的抽象类，<reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 会用到。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>管理与一个或多个作为服务器或客户端的远程对等体的连接，并为每个对等体分配唯一的 ID。另请参阅 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 协议是一个实现细节，并不打算由非 Godot 服务器使用。它可能会更改，恕不另行通知。</paragraph>
            <paragraph><strong>注意：</strong>当导出到 Android 时，在导出项目或使用一键部署之前，确保在 Android 导出预设中启用了 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信都会被安卓阻止。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/high_level_multiplayer"><inline classes="doc">高级多人游戏</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="WebRTC 信号演示" refuri="https://godotengine.org/asset-library/asset/537">WebRTC 信号演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="86"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-property-refuse-new-connections"><inline classes="std std-ref">refuse_new_connections</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-property-transfer-channel"><inline classes="std std-ref">transfer_channel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-property-transfer-mode"><inline classes="std std-ref">transfer_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="64"></colspec>
                    <colspec colwidth="146"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-close"><inline classes="std std-ref">close</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-disconnect-peer"><inline classes="std std-ref">disconnect_peer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> force=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-generate-unique-id"><inline classes="std std-ref">generate_unique_id</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-get-connection-status"><inline classes="std std-ref">get_connection_status</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-get-packet-channel"><inline classes="std std-ref">get_packet_channel</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-get-packet-mode"><inline classes="std std-ref">get_packet_mode</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-get-packet-peer"><inline classes="std std-ref">get_packet_peer</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-get-unique-id"><inline classes="std std-ref">get_unique_id</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-is-server-relay-supported"><inline classes="std std-ref">is_server_relay_supported</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-poll"><inline classes="std std-ref">poll</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerpeer-method-set-target-peer"><inline classes="std std-ref">set_target_peer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-multiplayerpeer-signal-peer-connected"></target>
            <paragraph classes="classref-signal" ids="class-multiplayerpeer-signal-peer-connected" names="class_multiplayerpeer_signal_peer_connected"><strong>peer_connected</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>远程对等体连接时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-signal-peer-disconnected"></target>
            <paragraph classes="classref-signal" ids="class-multiplayerpeer-signal-peer-disconnected" names="class_multiplayerpeer_signal_peer_disconnected"><strong>peer_disconnected</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>远程对等体断开连接时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-multiplayerpeer-connectionstatus"></target>
            <paragraph classes="classref-enumeration" ids="enum-multiplayerpeer-connectionstatus" names="enum_multiplayerpeer_connectionstatus">enum <strong>ConnectionStatus</strong>:</paragraph>
            <target refid="class-multiplayerpeer-constant-connection-disconnected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerpeer-constant-connection-disconnected" names="class_multiplayerpeer_constant_connection_disconnected"><reference internal="True" refid="enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference> <strong>CONNECTION_DISCONNECTED</strong> = <literal>0</literal></paragraph>
            <paragraph>该 MultiplayerPeer 已断开连接。</paragraph>
            <target refid="class-multiplayerpeer-constant-connection-connecting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerpeer-constant-connection-connecting" names="class_multiplayerpeer_constant_connection_connecting"><reference internal="True" refid="enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference> <strong>CONNECTION_CONNECTING</strong> = <literal>1</literal></paragraph>
            <paragraph>该 MultiplayerPeer 正在连接到服务器。</paragraph>
            <target refid="class-multiplayerpeer-constant-connection-connected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerpeer-constant-connection-connected" names="class_multiplayerpeer_constant_connection_connected"><reference internal="True" refid="enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference> <strong>CONNECTION_CONNECTED</strong> = <literal>2</literal></paragraph>
            <paragraph>该 MultiplayerPeer 已连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-multiplayerpeer-transfermode"></target>
            <paragraph classes="classref-enumeration" ids="enum-multiplayerpeer-transfermode" names="enum_multiplayerpeer_transfermode">enum <strong>TransferMode</strong>:</paragraph>
            <target refid="class-multiplayerpeer-constant-transfer-mode-unreliable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerpeer-constant-transfer-mode-unreliable" names="class_multiplayerpeer_constant_transfer_mode_unreliable"><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>TRANSFER_MODE_UNRELIABLE</strong> = <literal>0</literal></paragraph>
            <paragraph>数据包不被确认，对丢失的数据包不进行重发尝试。数据包可以以任何顺序到达。可能比 <reference internal="True" refid="class-multiplayerpeer-constant-transfer-mode-unreliable-ordered"><inline classes="std std-ref">TRANSFER_MODE_UNRELIABLE_ORDERED</inline></reference> 快。用于非关键数据，并注意考虑顺序是否重要。</paragraph>
            <target refid="class-multiplayerpeer-constant-transfer-mode-unreliable-ordered"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerpeer-constant-transfer-mode-unreliable-ordered" names="class_multiplayerpeer_constant_transfer_mode_unreliable_ordered"><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>TRANSFER_MODE_UNRELIABLE_ORDERED</strong> = <literal>1</literal></paragraph>
            <paragraph>数据包不被确认，对丢失的数据包不进行重发尝试。数据包按其发送顺序接收。有可能比 <reference internal="True" refid="class-multiplayerpeer-constant-transfer-mode-reliable"><inline classes="std std-ref">TRANSFER_MODE_RELIABLE</inline></reference> 快。用于非关键数据或由于重发尝试而迟迟不能收到的数据，例如运动和位置数据。</paragraph>
            <target refid="class-multiplayerpeer-constant-transfer-mode-reliable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerpeer-constant-transfer-mode-reliable" names="class_multiplayerpeer_constant_transfer_mode_reliable"><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>TRANSFER_MODE_RELIABLE</strong> = <literal>2</literal></paragraph>
            <paragraph>数据包必须被接收，并应进行重发尝试，直到数据包被确认。数据包必须按照其发送的顺序接收。最可靠的传输模式，但由于开销很大，可能是最慢的。用于必须按顺序传输和到达的关键数据，例如触发的能力或聊天信息。仔细考虑信息是否真的是关键的，并尽量少用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-multiplayerpeer-constant-target-peer-broadcast"></target>
            <paragraph classes="classref-constant" ids="class-multiplayerpeer-constant-target-peer-broadcast" names="class_multiplayerpeer_constant_target_peer_broadcast"><strong>TARGET_PEER_BROADCAST</strong> = <literal>0</literal></paragraph>
            <paragraph>将数据包发送至所有已连接的对等体。</paragraph>
            <target refid="class-multiplayerpeer-constant-target-peer-server"></target>
            <paragraph classes="classref-constant" ids="class-multiplayerpeer-constant-target-peer-server" names="class_multiplayerpeer_constant_target_peer_server"><strong>TARGET_PEER_SERVER</strong> = <literal>1</literal></paragraph>
            <paragraph>将数据包发送至作为服务器的远程对等体。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-multiplayerpeer-property-refuse-new-connections"></target>
            <paragraph classes="classref-property" ids="class-multiplayerpeer-property-refuse-new-connections" names="class_multiplayerpeer_property_refuse_new_connections"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>refuse_new_connections</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_refuse_new_connections</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_refusing_new_connections</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则这个 <strong>MultiplayerPeer</strong> 拒绝新的连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-property-transfer-channel"></target>
            <paragraph classes="classref-property" ids="class-multiplayerpeer-property-transfer-channel" names="class_multiplayerpeer_property_transfer_channel"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>transfer_channel</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_transfer_channel</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_transfer_channel</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于发送数据包的通道。许多网络 API，例如 ENet 和 WebRTC，允许创建多个独立的通道，这些通道的行为在某种程度上类似于单独的连接。这意味着可靠数据只会阻止该通道上其他数据包的传递，并且排序将仅与正在发送数据包的通道有关。使用不同的通道发送<strong>不同且独立的</strong>状态更新，是优化快节奏游戏的网络使用和减少延迟的常用方法。</paragraph>
            <paragraph><strong>注意：</strong>默认通道（<literal>0</literal>）实际上作为 3 个独立的通道工作（每种 <reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> 一个），因此默认情况下，<reference internal="True" refid="class-multiplayerpeer-constant-transfer-mode-reliable"><inline classes="std std-ref">TRANSFER_MODE_RELIABLE</inline></reference> 和 <reference internal="True" refid="class-multiplayerpeer-constant-transfer-mode-unreliable-ordered"><inline classes="std std-ref">TRANSFER_MODE_UNRELIABLE_ORDERED</inline></reference> 不会相互交互。请参阅特定的网络 API 文档（例如 ENet 或 WebRTC），以了解如何正确地设置通道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-property-transfer-mode"></target>
            <paragraph classes="classref-property" ids="class-multiplayerpeer-property-transfer-mode" names="class_multiplayerpeer_property_transfer_mode"><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>transfer_mode</strong> = <literal>2</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_transfer_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>get_transfer_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>向目标对等体发送数据包的方式。请参阅 <reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> 和 <reference internal="True" refid="class-multiplayerpeer-method-set-target-peer"><inline classes="std std-ref">set_target_peer</inline></reference> 方法。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-multiplayerpeer-method-close"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-close" names="class_multiplayerpeer_method_close">void <strong>close</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>立即关闭多人对等体，返回到 <reference internal="True" refid="class-multiplayerpeer-constant-connection-disconnected"><inline classes="std std-ref">CONNECTION_DISCONNECTED</inline></reference> 状态。已连接的对等体将被丢弃，不会发出 <reference internal="True" refid="class-multiplayerpeer-signal-peer-disconnected"><inline classes="std std-ref">peer_disconnected</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-disconnect-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-disconnect-peer" names="class_multiplayerpeer_method_disconnect_peer">void <strong>disconnect_peer</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> force=false <strong>)</strong></paragraph>
            <paragraph>断开给定的 <literal>peer</literal> 与该主机的连接。如果 <literal>force</literal> 为 <literal>true</literal>，则不会为该对等体发出 <reference internal="True" refid="class-multiplayerpeer-signal-peer-disconnected"><inline classes="std std-ref">peer_disconnected</inline></reference> 信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-generate-unique-id"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-generate-unique-id" names="class_multiplayerpeer_method_generate_unique_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>generate_unique_id</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回随机生成的整数，可用作网络唯一 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-get-connection-status"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-get-connection-status" names="class_multiplayerpeer_method_get_connection_status"><reference internal="True" refid="enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference> <strong>get_connection_status</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回连接的当前状态。见 <reference internal="True" refid="enum-multiplayerpeer-connectionstatus"><inline classes="std std-ref">ConnectionStatus</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-get-packet-channel"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-get-packet-channel" names="class_multiplayerpeer_method_get_packet_channel"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_packet_channel</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回下一个可用数据包被接收使用的通道。请参阅 <reference internal="True" refuri="class_packetpeer#class-packetpeer-method-get-available-packet-count"><inline classes="std std-ref">PacketPeer.get_available_packet_count</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-get-packet-mode"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-get-packet-mode" names="class_multiplayerpeer_method_get_packet_mode"><reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference> <strong>get_packet_mode</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回用于发送下一个可用数据包的远程对等体的 <reference internal="True" refid="enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference>。请参阅 <reference internal="True" refuri="class_packetpeer#class-packetpeer-method-get-available-packet-count"><inline classes="std std-ref">PacketPeer.get_available_packet_count</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-get-packet-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-get-packet-peer" names="class_multiplayerpeer_method_get_packet_peer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_packet_peer</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回发送下一个可用数据包的 <strong>MultiplayerPeer</strong> 的 ID。见 <reference internal="True" refuri="class_packetpeer#class-packetpeer-method-get-available-packet-count"><inline classes="std std-ref">PacketPeer.get_available_packet_count</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-get-unique-id"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-get-unique-id" names="class_multiplayerpeer_method_get_unique_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_unique_id</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <strong>MultiplayerPeer</strong> 的 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-is-server-relay-supported"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-is-server-relay-supported" names="class_multiplayerpeer_method_is_server_relay_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_server_relay_supported</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果服务器在当前配置中可以充当中继者，则返回 true（也就是说，如果更高级别的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 应该通知连接的客户端有其他对等体，并实现一个中继协议以允许它们之间的通信）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-poll"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-poll" names="class_multiplayerpeer_method_poll">void <strong>poll</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>等待最多 1 秒以接收一个新的网络事件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerpeer-method-set-target-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerpeer-method-set-target-peer" names="class_multiplayerpeer_method_set_target_peer">void <strong>set_target_peer</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>设置数据包将被发送至的对等体。</paragraph>
            <paragraph><literal>id</literal> 可以是以下之一：<reference internal="True" refid="class-multiplayerpeer-constant-target-peer-broadcast"><inline classes="std std-ref">TARGET_PEER_BROADCAST</inline></reference>，以发送到所有连接的对等体；<reference internal="True" refid="class-multiplayerpeer-constant-target-peer-server"><inline classes="std std-ref">TARGET_PEER_SERVER</inline></reference>，以发送到充当服务器的对等体；一个有效的对等体 ID ，以发送到那个特定的对等体；一个负的对等体 ID，以发送到除那个对等体以外的所有对等体。默认情况下，目标对等体是 <reference internal="True" refid="class-multiplayerpeer-constant-target-peer-broadcast"><inline classes="std std-ref">TARGET_PEER_BROADCAST</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
