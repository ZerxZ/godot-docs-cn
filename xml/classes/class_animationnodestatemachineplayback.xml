<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationnodestatemachineplayback.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationNodeStateMachinePlayback.xml.</comment>
    <target refid="class-animationnodestatemachineplayback"></target>
    <section ids="animationnodestatemachineplayback class-animationnodestatemachineplayback" names="animationnodestatemachineplayback class_animationnodestatemachineplayback">
        <title>AnimationNodeStateMachinePlayback</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>为 <reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 提供播放控制。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>允许控制使用 <reference internal="True" refuri="class_animationnodestatemachine#class-animationnodestatemachine"><inline classes="std std-ref">AnimationNodeStateMachine</inline></reference> 创建的 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 状态机。使用 <literal>$AnimationTree.get("parameters/playback")</literal> 检索。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var state_machine = $AnimationTree.get("parameters/playback")
state_machine.travel("some_state")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var stateMachine = GetNode&lt;AnimationTree&gt;("AnimationTree").Get("parameters/playback").As&lt;AnimationNodeStateMachinePlayback&gt;();
stateMachine.Travel("some_state");</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/animation_tree"><inline classes="doc">使用 AnimationTree</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="87"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>resource_local_to_scene</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_resource#class-resource-property-resource-local-to-scene"><inline classes="std std-ref">Resource</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="175"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-get-current-length"><inline classes="std std-ref">get_current_length</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-get-current-node"><inline classes="std std-ref">get_current_node</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-get-current-play-position"><inline classes="std std-ref">get_current_play_position</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-get-fading-from-node"><inline classes="std std-ref">get_fading_from_node</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-get-travel-path"><inline classes="std std-ref">get_travel_path</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-is-playing"><inline classes="std std-ref">is_playing</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-next"><inline classes="std std-ref">next</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-start"><inline classes="std std-ref">start</inline></reference>(node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, reset: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-stop"><inline classes="std std-ref">stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">travel</inline></reference>(to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, reset_on_teleport: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationnodestatemachineplayback-method-get-current-length"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-get-current-length" names="class_animationnodestatemachineplayback_method_get_current_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_current_length</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachineplayback-method-get-current-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前状态长度。</paragraph>
            <paragraph><strong>注意：</strong>有可能任何 <reference internal="True" refuri="class_animationrootnode#class-animationrootnode"><inline classes="std std-ref">AnimationRootNode</inline></reference> 既可以是节点也可以是动画。这意味着在单个状态中可以有多个动画。哪个动画长度会优先，取决于其内部连接的节点。此外，如果过渡未重置，则将返回该点的剩余长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-get-current-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-get-current-node" names="class_animationnodestatemachineplayback_method_get_current_node"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_current_node</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachineplayback-method-get-current-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前的动画播放状态。</paragraph>
            <paragraph><strong>注意：</strong>使用交叉叠化时，当前状态会在交叉叠化开始后理解变为下一个状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-get-current-play-position"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-get-current-play-position" names="class_animationnodestatemachineplayback_method_get_current_play_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_current_play_position</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachineplayback-method-get-current-play-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前动画状态内的播放位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-get-fading-from-node"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-get-fading-from-node" names="class_animationnodestatemachineplayback_method_get_fading_from_node"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_fading_from_node</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachineplayback-method-get-fading-from-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前淡入淡出动画的开始状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-get-travel-path"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-get-travel-path" names="class_animationnodestatemachineplayback_method_get_travel_path"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>] <strong>get_travel_path</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachineplayback-method-get-travel-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 A* 算法内部计算的当前行进路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-is-playing"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-is-playing" names="class_animationnodestatemachineplayback_method_is_playing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_playing</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationnodestatemachineplayback-method-is-playing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果正在播放动画，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-next"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-next" names="class_animationnodestatemachineplayback_method_next"><abbreviation explanation="无返回值。">void</abbreviation> <strong>next</strong>() <reference internal="True" refid="class-animationnodestatemachineplayback-method-next"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果通过行进或自动前进有下一条路径，则立即从当前状态过渡到下一个状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-start"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-start" names="class_animationnodestatemachineplayback_method_start"><abbreviation explanation="无返回值。">void</abbreviation> <strong>start</strong>(node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, reset: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-animationnodestatemachineplayback-method-start"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>开始播放给定的动画。</paragraph>
            <paragraph>如果 <literal>reset</literal> 为 <literal>true</literal>，则动画从头开始播放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-stop"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-stop" names="class_animationnodestatemachineplayback_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>() <reference internal="True" refid="class-animationnodestatemachineplayback-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止当前播放的动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationnodestatemachineplayback-method-travel"></target>
            <paragraph classes="classref-method" ids="class-animationnodestatemachineplayback-method-travel" names="class_animationnodestatemachineplayback_method_travel"><abbreviation explanation="无返回值。">void</abbreviation> <strong>travel</strong>(to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, reset_on_teleport: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-animationnodestatemachineplayback-method-travel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按照最短的路径从当前状态过渡到另一个状态。</paragraph>
            <paragraph>如果路径没有连接到当前状态，则动画将在状态传送后播放。</paragraph>
            <paragraph>如果 <literal>reset_on_teleport</literal> 为 <literal>true</literal>，当行进导致传送时，该动画将从头开始播放。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
