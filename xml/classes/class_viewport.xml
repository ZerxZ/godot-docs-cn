<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_viewport.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Viewport.xml.</comment>
    <target refid="class-viewport"></target>
    <section ids="viewport class-viewport" names="viewport class_viewport">
        <title>Viewport</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference>, <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference></paragraph>
        <paragraph>视口的抽象基类。对绘图以及与游戏世界的交互进行了封装。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Viewport</strong> 在屏幕中创建不同的视图，或在另一个视口内创建子视图。子 2D 节点将显示在其上，子 Camera3D 3D 节点也将在其上渲染。</paragraph>
            <paragraph>视口也可以拥有自己的 2D 或 3D 世界，这样就不会与其他视口共享绘制的内容。</paragraph>
            <paragraph>视口也可以选择作为音频监听器，这样就可以根据 2D 或 3D 相机子节点生成位置音频。</paragraph>
            <paragraph>另外，在设备有多个屏幕的情况下，可以将视口分配给不同的屏幕。</paragraph>
            <paragraph>最后，视口也可以充当渲染目标，在这种情况下，除非使用与其相关联的纹理进行绘制，否则它们将不可见。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/rendering/viewports"><inline classes="doc">使用视口</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_transforms"><inline classes="doc">Viewport 和画布变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 视口中的 GUI 演示" refuri="https://godotengine.org/asset-library/asset/2807">3D 视口中的 GUI 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="2D 视口中的 3D 演示" refuri="https://godotengine.org/asset-library/asset/2804">2D 视口中的 3D 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 视口中的 2D 演示" refuri="https://godotengine.org/asset-library/asset/2803">3D 视口中的 2D 演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="屏幕捕捉演示" refuri="https://godotengine.org/asset-library/asset/2808">屏幕捕捉演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="动态分屏演示" refuri="https://godotengine.org/asset-library/asset/2806">动态分屏演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 分辨率缩放演示" refuri="https://godotengine.org/asset-library/asset/2805">3D 分辨率缩放演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="95"></colspec>
                    <colspec colwidth="103"></colspec>
                    <colspec colwidth="16"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-audio-listener-enable-2d"><inline classes="std std-ref">audio_listener_enable_2d</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-audio-listener-enable-3d"><inline classes="std std-ref">audio_listener_enable_3d</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-canvas-cull-mask"><inline classes="std std-ref">canvas_cull_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4294967295</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-canvas-item-default-texture-filter"><inline classes="std std-ref">canvas_item_default_texture_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-canvas-item-default-texture-repeat"><inline classes="std std-ref">canvas_item_default_texture_repeat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-canvas-transform"><inline classes="std std-ref">canvas_transform</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-debug-draw"><inline classes="std std-ref">debug_draw</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-disable-3d"><inline classes="std std-ref">disable_3d</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-fsr-sharpness"><inline classes="std std-ref">fsr_sharpness</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-global-canvas-transform"><inline classes="std std-ref">global_canvas_transform</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-gui-disable-input"><inline classes="std std-ref">gui_disable_input</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-gui-embed-subwindows"><inline classes="std std-ref">gui_embed_subwindows</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-gui-snap-controls-to-pixels"><inline classes="std std-ref">gui_snap_controls_to_pixels</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-handle-input-locally"><inline classes="std std-ref">handle_input_locally</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-mesh-lod-threshold"><inline classes="std std-ref">mesh_lod_threshold</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-msaa-2d"><inline classes="std std-ref">msaa_2d</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-msaa-3d"><inline classes="std std-ref">msaa_3d</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-own-world-3d"><inline classes="std std-ref">own_world_3d</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-physics-object-picking"><inline classes="std std-ref">physics_object_picking</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-physics-object-picking-first-only"><inline classes="std std-ref">physics_object_picking_first_only</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-physics-object-picking-sort"><inline classes="std std-ref">physics_object_picking_sort</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-positional-shadow-atlas-16-bits"><inline classes="std std-ref">positional_shadow_atlas_16_bits</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-0"><inline classes="std std-ref">positional_shadow_atlas_quad_0</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-1"><inline classes="std std-ref">positional_shadow_atlas_quad_1</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-2"><inline classes="std std-ref">positional_shadow_atlas_quad_2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-3"><inline classes="std std-ref">positional_shadow_atlas_quad_3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-positional-shadow-atlas-size"><inline classes="std std-ref">positional_shadow_atlas_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2048</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-scaling-3d-mode"><inline classes="std std-ref">scaling_3d_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">scaling_3d_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-screen-space-aa"><inline classes="std std-ref">screen_space_aa</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-sdf-oversize"><inline classes="std std-ref">sdf_oversize</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-sdf-scale"><inline classes="std std-ref">sdf_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-snap-2d-transforms-to-pixel"><inline classes="std std-ref">snap_2d_transforms_to_pixel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-snap-2d-vertices-to-pixel"><inline classes="std std-ref">snap_2d_vertices_to_pixel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-texture-mipmap-bias"><inline classes="std std-ref">texture_mipmap_bias</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-transparent-bg"><inline classes="std std-ref">transparent_bg</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-use-debanding"><inline classes="std std-ref">use_debanding</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-use-hdr-2d"><inline classes="std std-ref">use_hdr_2d</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-use-occlusion-culling"><inline classes="std std-ref">use_occlusion_culling</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-use-taa"><inline classes="std std-ref">use_taa</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-use-xr"><inline classes="std std-ref">use_xr</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-vrs-mode"><inline classes="std std-ref">vrs_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-vrs-texture"><inline classes="std std-ref">vrs_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-vrs-update-mode"><inline classes="std std-ref">vrs_update_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-world-2d"><inline classes="std std-ref">world_2d</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-property-world-3d"><inline classes="std std-ref">world_3d</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="95"></colspec>
                    <colspec colwidth="263"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-find-world-2d"><inline classes="std std-ref">find_world_2d</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-find-world-3d"><inline classes="std std-ref">find_world_3d</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-camera-2d"><inline classes="std std-ref">get_camera_2d</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-camera-3d"><inline classes="std std-ref">get_camera_3d</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-canvas-cull-mask-bit"><inline classes="std std-ref">get_canvas_cull_mask_bit</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-embedded-subwindows"><inline classes="std std-ref">get_embedded_subwindows</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-final-transform"><inline classes="std std-ref">get_final_transform</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-mouse-position"><inline classes="std std-ref">get_mouse_position</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-positional-shadow-atlas-quadrant-subdiv"><inline classes="std std-ref">get_positional_shadow_atlas_quadrant_subdiv</inline></reference>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-render-info"><inline classes="std std-ref">get_render_info</inline></reference>(type: <reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference>, info: <reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-screen-transform"><inline classes="std std-ref">get_screen_transform</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_viewporttexture#class-viewporttexture"><inline classes="std std-ref">ViewportTexture</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-texture"><inline classes="std std-ref">get_texture</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-viewport-rid"><inline classes="std std-ref">get_viewport_rid</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-get-visible-rect"><inline classes="std std-ref">get_visible_rect</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-gui-get-drag-data"><inline classes="std std-ref">gui_get_drag_data</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-gui-get-focus-owner"><inline classes="std std-ref">gui_get_focus_owner</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-gui-get-hovered-control"><inline classes="std std-ref">gui_get_hovered_control</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-gui-is-drag-successful"><inline classes="std std-ref">gui_is_drag_successful</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-gui-is-dragging"><inline classes="std std-ref">gui_is_dragging</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-gui-release-focus"><inline classes="std std-ref">gui_release_focus</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-is-input-handled"><inline classes="std std-ref">is_input_handled</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-push-input"><inline classes="std std-ref">push_input</inline></reference>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, in_local_coords: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-push-text-input"><inline classes="std std-ref">push_text_input</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-push-unhandled-input"><inline classes="std std-ref">push_unhandled_input</inline></reference>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, in_local_coords: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-set-canvas-cull-mask-bit"><inline classes="std std-ref">set_canvas_cull_mask_bit</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-set-input-as-handled"><inline classes="std std-ref">set_input_as_handled</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-set-positional-shadow-atlas-quadrant-subdiv"><inline classes="std std-ref">set_positional_shadow_atlas_quadrant_subdiv</inline></reference>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdiv: <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-update-mouse-cursor-state"><inline classes="std std-ref">update_mouse_cursor_state</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-viewport-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-viewport-signal-gui-focus-changed"></target>
            <paragraph classes="classref-signal" ids="class-viewport-signal-gui-focus-changed" names="class_viewport_signal_gui_focus_changed"><strong>gui_focus_changed</strong>(node: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>) <reference internal="True" refid="class-viewport-signal-gui-focus-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当控件节点获取键盘焦点时触发。</paragraph>
            <paragraph><strong>注意：</strong>控件节点失去焦点不会导致触发该信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-signal-size-changed"></target>
            <paragraph classes="classref-signal" ids="class-viewport-signal-size-changed" names="class_viewport_signal_size_changed"><strong>size_changed</strong>() <reference internal="True" refid="class-viewport-signal-size-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当视口的大小被改变时发出，无论是通过调整窗口大小，还是通过其他方式改变的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-viewport-positionalshadowatlasquadrantsubdiv"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-positionalshadowatlasquadrantsubdiv" names="enum_viewport_positionalshadowatlasquadrantsubdiv">enum <strong>PositionalShadowAtlasQuadrantSubdiv</strong>: <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-disabled" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_disabled"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不使用该象限。</paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-1" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_1"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_1</strong> = <literal>1</literal></paragraph>
            <paragraph>该象限仅由一张阴影贴图使用。</paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-4" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_4"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_4</strong> = <literal>2</literal></paragraph>
            <paragraph>该象限将被分为 4 份，最多被 4 张阴影贴图使用。</paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-16" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_16"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_16</strong> = <literal>3</literal></paragraph>
            <paragraph>该象限将被分为 16 份，最多被 16 张阴影贴图使用。</paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-64"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-64" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_64"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_64</strong> = <literal>4</literal></paragraph>
            <paragraph>该象限将被分为 64 份，最多被 64 张阴影贴图使用。</paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-256"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-256" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_256"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_256</strong> = <literal>5</literal></paragraph>
            <paragraph>该象限将被分为 256 份，最多被 256 张阴影贴图使用。除非 <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-size"><inline classes="std std-ref">positional_shadow_atlas_size</inline></reference> 非常高，否则该象限中的阴影分辨率将非常低。</paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-1024"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-1024" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_1024"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_1024</strong> = <literal>6</literal></paragraph>
            <paragraph>该象限将被分为 1024 份，最多被 1024 张阴影贴图使用。除非 <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-size"><inline classes="std std-ref">positional_shadow_atlas_size</inline></reference> 非常高，否则该象限中的阴影分辨率将非常低。</paragraph>
            <target refid="class-viewport-constant-shadow-atlas-quadrant-subdiv-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-shadow-atlas-quadrant-subdiv-max" names="class_viewport_constant_shadow_atlas_quadrant_subdiv_max"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>SHADOW_ATLAS_QUADRANT_SUBDIV_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-scaling3dmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-scaling3dmode" names="enum_viewport_scaling3dmode">enum <strong>Scaling3DMode</strong>: <reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-scaling-3d-mode-bilinear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-scaling-3d-mode-bilinear" names="class_viewport_constant_scaling_3d_mode_bilinear"><reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference> <strong>SCALING_3D_MODE_BILINEAR</strong> = <literal>0</literal></paragraph>
            <paragraph>对该视口的 3D 缓冲区使用双线性缩放。缩放的程度可以使用 <reference internal="True" refid="class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">scaling_3d_scale</inline></reference> 设置。小于 <literal>1.0</literal> 的值会产生欠采样的效果，大于 <literal>1.0</literal> 会产生超采样的效果。值为 <literal>1.0</literal> 时禁用缩放。</paragraph>
            <target refid="class-viewport-constant-scaling-3d-mode-fsr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-scaling-3d-mode-fsr" names="class_viewport_constant_scaling_3d_mode_fsr"><reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference> <strong>SCALING_3D_MODE_FSR</strong> = <literal>1</literal></paragraph>
            <paragraph>对该视口的 3D 缓冲区使用 AMD FidelityFX 超分辨率 1.0 升采样技术。缩放的程度可以使用 <reference internal="True" refid="class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">scaling_3d_scale</inline></reference> 设置。小于 <literal>1.0</literal> 的值会使用 FSR 进行放大。不支持大于 <literal>1.0</literal> 的值，会改用双线性降采样。值为 <literal>1.0</literal> 时禁用缩放。</paragraph>
            <target refid="class-viewport-constant-scaling-3d-mode-fsr2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-scaling-3d-mode-fsr2" names="class_viewport_constant_scaling_3d_mode_fsr2"><reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference> <strong>SCALING_3D_MODE_FSR2</strong> = <literal>2</literal></paragraph>
            <paragraph>对视口的 3D 缓冲区使用 AMD FidelityFX 超分辨率 2.2 放大。可以使用 <reference internal="True" refid="class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">scaling_3d_scale</inline></reference> 设置缩放量。小于 <literal>1.0</literal> 的值将导致使用 FSR2 放大视口。不支持大于 <literal>1.0</literal> 的值，将改用双线性降采样。<literal>1.0</literal> 的值将使用原生分辨率下的 FSR2 作为 TAA 解决方案。</paragraph>
            <target refid="class-viewport-constant-scaling-3d-mode-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-scaling-3d-mode-max" names="class_viewport_constant_scaling_3d_mode_max"><reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference> <strong>SCALING_3D_MODE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-msaa"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-msaa" names="enum_viewport_msaa">enum <strong>MSAA</strong>: <reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-msaa-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-msaa-disabled" names="class_viewport_constant_msaa_disabled"><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>MSAA_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用多重采样抗锯齿模式。这是默认值，也是最快的设置。</paragraph>
            <target refid="class-viewport-constant-msaa-2x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-msaa-2x" names="class_viewport_constant_msaa_2x"><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>MSAA_2X</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 2 倍多重采样抗锯齿。性能成本中等。有助于显着减少锯齿，但 4× MSAA 看起来仍然要好得多。</paragraph>
            <target refid="class-viewport-constant-msaa-4x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-msaa-4x" names="class_viewport_constant_msaa_4x"><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>MSAA_4X</strong> = <literal>2</literal></paragraph>
            <paragraph>使用 4 倍多重采样抗锯齿。性能成本显著，通常是性能和质量之间的良好折衷。</paragraph>
            <target refid="class-viewport-constant-msaa-8x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-msaa-8x" names="class_viewport_constant_msaa_8x"><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>MSAA_8X</strong> = <literal>3</literal></paragraph>
            <paragraph>使用 8 倍多重采样抗锯齿。性能成本极高。在实际游戏条件下，4× 和 8× MSAA 之间的差异可能并不总是可见的。可能在低端和较旧的硬件上不受支持。</paragraph>
            <target refid="class-viewport-constant-msaa-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-msaa-max" names="class_viewport_constant_msaa_max"><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>MSAA_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-screenspaceaa"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-screenspaceaa" names="enum_viewport_screenspaceaa">enum <strong>ScreenSpaceAA</strong>: <reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-screen-space-aa-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-screen-space-aa-disabled" names="class_viewport_constant_screen_space_aa_disabled"><reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference> <strong>SCREEN_SPACE_AA_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不要在全屏后处理中执行抗锯齿。</paragraph>
            <target refid="class-viewport-constant-screen-space-aa-fxaa"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-screen-space-aa-fxaa" names="class_viewport_constant_screen_space_aa_fxaa"><reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference> <strong>SCREEN_SPACE_AA_FXAA</strong> = <literal>1</literal></paragraph>
            <paragraph>使用快速近似抗锯齿（Fast Approximate Anti-Aliasing）。FXAA 是一种流行的屏幕空间抗锯齿方法，速度很快，但会让图像变模糊，使用较低分辨率时尤为显著。1440p 和 4K 等较高分辨率下效果仍然不错。</paragraph>
            <target refid="class-viewport-constant-screen-space-aa-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-screen-space-aa-max" names="class_viewport_constant_screen_space_aa_max"><reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference> <strong>SCREEN_SPACE_AA_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-renderinfo"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-renderinfo" names="enum_viewport_renderinfo">enum <strong>RenderInfo</strong>: <reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-render-info-objects-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-objects-in-frame" names="class_viewport_constant_render_info_objects_in_frame"><reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference> <strong>RENDER_INFO_OBJECTS_IN_FRAME</strong> = <literal>0</literal></paragraph>
            <paragraph>帧中对象的数量。</paragraph>
            <target refid="class-viewport-constant-render-info-primitives-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-primitives-in-frame" names="class_viewport_constant_render_info_primitives_in_frame"><reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference> <strong>RENDER_INFO_PRIMITIVES_IN_FRAME</strong> = <literal>1</literal></paragraph>
            <paragraph>帧中的顶点数量。</paragraph>
            <target refid="class-viewport-constant-render-info-draw-calls-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-draw-calls-in-frame" names="class_viewport_constant_render_info_draw_calls_in_frame"><reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference> <strong>RENDER_INFO_DRAW_CALLS_IN_FRAME</strong> = <literal>2</literal></paragraph>
            <paragraph>帧中的绘制调用量。</paragraph>
            <target refid="class-viewport-constant-render-info-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-max" names="class_viewport_constant_render_info_max"><reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference> <strong>RENDER_INFO_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-renderinfotype"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-renderinfotype" names="enum_viewport_renderinfotype">enum <strong>RenderInfoType</strong>: <reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-render-info-type-visible"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-type-visible" names="class_viewport_constant_render_info_type_visible"><reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference> <strong>RENDER_INFO_TYPE_VISIBLE</strong> = <literal>0</literal></paragraph>
            <paragraph>可见渲染阶段（不含阴影）。</paragraph>
            <target refid="class-viewport-constant-render-info-type-shadow"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-type-shadow" names="class_viewport_constant_render_info_type_shadow"><reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference> <strong>RENDER_INFO_TYPE_SHADOW</strong> = <literal>1</literal></paragraph>
            <paragraph>阴影渲染阶段。根据开启了阴影的灯光数以及方向阴影的拆分数，同一个对象可能会渲染多次。</paragraph>
            <target refid="class-viewport-constant-render-info-type-canvas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-type-canvas" names="class_viewport_constant_render_info_type_canvas"><reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference> <strong>RENDER_INFO_TYPE_CANVAS</strong> = <literal>2</literal></paragraph>
            <paragraph>画布项渲染。包括所有 2D 渲染。</paragraph>
            <target refid="class-viewport-constant-render-info-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-render-info-type-max" names="class_viewport_constant_render_info_type_max"><reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference> <strong>RENDER_INFO_TYPE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-debugdraw"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-debugdraw" names="enum_viewport_debugdraw">enum <strong>DebugDraw</strong>: <reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-debug-draw-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-disabled" names="class_viewport_constant_debug_draw_disabled"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>对象正常显示。</paragraph>
            <target refid="class-viewport-constant-debug-draw-unshaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-unshaded" names="class_viewport_constant_debug_draw_unshaded"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_UNSHADED</strong> = <literal>1</literal></paragraph>
            <paragraph>显示的对象没有光照信息。</paragraph>
            <target refid="class-viewport-constant-debug-draw-lighting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-lighting" names="class_viewport_constant_debug_draw_lighting"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_LIGHTING</strong> = <literal>2</literal></paragraph>
            <paragraph>显示对象时不使用纹理，仅使用光照信息。</paragraph>
            <target refid="class-viewport-constant-debug-draw-overdraw"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-overdraw" names="class_viewport_constant_debug_draw_overdraw"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_OVERDRAW</strong> = <literal>3</literal></paragraph>
            <paragraph>对象通过加法混合显示为半透明，因此可以看到它们在彼此之上绘制的位置。更高的过度绘制意味着在绘制隐藏在其他像素后面的像素时浪费了性能。</paragraph>
            <target refid="class-viewport-constant-debug-draw-wireframe"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-wireframe" names="class_viewport_constant_debug_draw_wireframe"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_WIREFRAME</strong> = <literal>4</literal></paragraph>
            <paragraph>以线框模型的形式显示对象。</paragraph>
            <target refid="class-viewport-constant-debug-draw-normal-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-normal-buffer" names="class_viewport_constant_debug_draw_normal_buffer"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_NORMAL_BUFFER</strong> = <literal>5</literal></paragraph>
            <paragraph>显示对象时不使用光照信息，将纹理替换为法线贴图。</paragraph>
            <target refid="class-viewport-constant-debug-draw-voxel-gi-albedo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-voxel-gi-albedo" names="class_viewport_constant_debug_draw_voxel_gi_albedo"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_VOXEL_GI_ALBEDO</strong> = <literal>6</literal></paragraph>
            <paragraph>仅使用来自 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 的反照率值显示对象。</paragraph>
            <target refid="class-viewport-constant-debug-draw-voxel-gi-lighting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-voxel-gi-lighting" names="class_viewport_constant_debug_draw_voxel_gi_lighting"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_VOXEL_GI_LIGHTING</strong> = <literal>7</literal></paragraph>
            <paragraph>仅使用来自 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 的照明值显示对象。</paragraph>
            <target refid="class-viewport-constant-debug-draw-voxel-gi-emission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-voxel-gi-emission" names="class_viewport_constant_debug_draw_voxel_gi_emission"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_VOXEL_GI_EMISSION</strong> = <literal>8</literal></paragraph>
            <paragraph>仅使用来自 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 的自发光颜色显示对象。</paragraph>
            <target refid="class-viewport-constant-debug-draw-shadow-atlas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-shadow-atlas" names="class_viewport_constant_debug_draw_shadow_atlas"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_SHADOW_ATLAS</strong> = <literal>9</literal></paragraph>
            <paragraph>在 <strong>Viewport</strong> 的左上象限中绘制存储来自 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 的阴影的阴影图集。</paragraph>
            <target refid="class-viewport-constant-debug-draw-directional-shadow-atlas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-directional-shadow-atlas" names="class_viewport_constant_debug_draw_directional_shadow_atlas"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS</strong> = <literal>10</literal></paragraph>
            <paragraph>在 <strong>Viewport</strong> 的左上象限中绘制存储来自 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> 的阴影的阴影图集。</paragraph>
            <target refid="class-viewport-constant-debug-draw-scene-luminance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-scene-luminance" names="class_viewport_constant_debug_draw_scene_luminance"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_SCENE_LUMINANCE</strong> = <literal>11</literal></paragraph>
            <paragraph>Draws the scene luminance buffer (if available) in the upper left quadrant of the <strong>Viewport</strong>.</paragraph>
            <target refid="class-viewport-constant-debug-draw-ssao"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-ssao" names="class_viewport_constant_debug_draw_ssao"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_SSAO</strong> = <literal>12</literal></paragraph>
            <paragraph>绘制屏幕空间环境光遮蔽纹理而不是场景，以便可以清楚地看到它是如何影响对象的。为了使该显示模式起作用，必须在 <reference internal="True" refuri="class_worldenvironment#class-worldenvironment"><inline classes="std std-ref">WorldEnvironment</inline></reference> 中设置 <reference internal="True" refuri="class_environment#class-environment-property-ssao-enabled"><inline classes="std std-ref">Environment.ssao_enabled</inline></reference>。</paragraph>
            <target refid="class-viewport-constant-debug-draw-ssil"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-ssil" names="class_viewport_constant_debug_draw_ssil"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_SSIL</strong> = <literal>13</literal></paragraph>
            <paragraph>绘制屏幕空间间接照明纹理而不是场景，以便可以清楚地看到它是如何影响对象的。为了使该显示模式起作用，必须在 <reference internal="True" refuri="class_worldenvironment#class-worldenvironment"><inline classes="std std-ref">WorldEnvironment</inline></reference> 中设置 <reference internal="True" refuri="class_environment#class-environment-property-ssil-enabled"><inline classes="std std-ref">Environment.ssil_enabled</inline></reference>。</paragraph>
            <target refid="class-viewport-constant-debug-draw-pssm-splits"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-pssm-splits" names="class_viewport_constant_debug_draw_pssm_splits"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_PSSM_SPLITS</strong> = <literal>14</literal></paragraph>
            <paragraph>为场景中的 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> 的每个 PSSM 分割着色不同的颜色，以便可以看到分割的位置。按顺序，它们将被着色为红色、绿色、蓝色和黄色。</paragraph>
            <target refid="class-viewport-constant-debug-draw-decal-atlas"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-decal-atlas" names="class_viewport_constant_debug_draw_decal_atlas"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_DECAL_ATLAS</strong> = <literal>15</literal></paragraph>
            <paragraph>在 <strong>Viewport</strong> 的左上象限中绘制 <reference internal="True" refuri="class_decal#class-decal"><inline classes="std std-ref">Decal</inline></reference> 使用的贴花和光投影仪的纹理。</paragraph>
            <target refid="class-viewport-constant-debug-draw-sdfgi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-sdfgi" names="class_viewport_constant_debug_draw_sdfgi"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_SDFGI</strong> = <literal>16</literal></paragraph>
            <paragraph>Draws the cascades used to render signed distance field global illumination (SDFGI).</paragraph>
            <paragraph>Does nothing if the current environment's <reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference> is <literal>false</literal> or SDFGI is not supported on the platform.</paragraph>
            <target refid="class-viewport-constant-debug-draw-sdfgi-probes"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-sdfgi-probes" names="class_viewport_constant_debug_draw_sdfgi_probes"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_SDFGI_PROBES</strong> = <literal>17</literal></paragraph>
            <paragraph>Draws the probes used for signed distance field global illumination (SDFGI).</paragraph>
            <paragraph>Does nothing if the current environment's <reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference> is <literal>false</literal> or SDFGI is not supported on the platform.</paragraph>
            <target refid="class-viewport-constant-debug-draw-gi-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-gi-buffer" names="class_viewport_constant_debug_draw_gi_buffer"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_GI_BUFFER</strong> = <literal>18</literal></paragraph>
            <paragraph>Draws the buffer used for global illumination (GI).</paragraph>
            <target refid="class-viewport-constant-debug-draw-disable-lod"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-disable-lod" names="class_viewport_constant_debug_draw_disable_lod"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_DISABLE_LOD</strong> = <literal>19</literal></paragraph>
            <paragraph>Draws all of the objects at their highest polycount, without low level of detail (LOD).</paragraph>
            <target refid="class-viewport-constant-debug-draw-cluster-omni-lights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-cluster-omni-lights" names="class_viewport_constant_debug_draw_cluster_omni_lights"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_CLUSTER_OMNI_LIGHTS</strong> = <literal>20</literal></paragraph>
            <paragraph>Draws the cluster used by <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> nodes to optimize light rendering.</paragraph>
            <target refid="class-viewport-constant-debug-draw-cluster-spot-lights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-cluster-spot-lights" names="class_viewport_constant_debug_draw_cluster_spot_lights"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_CLUSTER_SPOT_LIGHTS</strong> = <literal>21</literal></paragraph>
            <paragraph>Draws the cluster used by <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> nodes to optimize light rendering.</paragraph>
            <target refid="class-viewport-constant-debug-draw-cluster-decals"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-cluster-decals" names="class_viewport_constant_debug_draw_cluster_decals"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_CLUSTER_DECALS</strong> = <literal>22</literal></paragraph>
            <paragraph>Draws the cluster used by <reference internal="True" refuri="class_decal#class-decal"><inline classes="std std-ref">Decal</inline></reference> nodes to optimize decal rendering.</paragraph>
            <target refid="class-viewport-constant-debug-draw-cluster-reflection-probes"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-cluster-reflection-probes" names="class_viewport_constant_debug_draw_cluster_reflection_probes"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_CLUSTER_REFLECTION_PROBES</strong> = <literal>23</literal></paragraph>
            <paragraph>Draws the cluster used by <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe"><inline classes="std std-ref">ReflectionProbe</inline></reference> nodes to optimize decal rendering.</paragraph>
            <target refid="class-viewport-constant-debug-draw-occluders"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-occluders" names="class_viewport_constant_debug_draw_occluders"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_OCCLUDERS</strong> = <literal>24</literal></paragraph>
            <paragraph>Draws the buffer used for occlusion culling.</paragraph>
            <target refid="class-viewport-constant-debug-draw-motion-vectors"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-motion-vectors" names="class_viewport_constant_debug_draw_motion_vectors"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_MOTION_VECTORS</strong> = <literal>25</literal></paragraph>
            <paragraph>Draws vector lines over the viewport to indicate the movement of pixels between frames.</paragraph>
            <target refid="class-viewport-constant-debug-draw-internal-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-debug-draw-internal-buffer" names="class_viewport_constant_debug_draw_internal_buffer"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>DEBUG_DRAW_INTERNAL_BUFFER</strong> = <literal>26</literal></paragraph>
            <paragraph>在应用后处理之前绘制场景的内部分辨率缓冲区。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-defaultcanvasitemtexturefilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-defaultcanvasitemtexturefilter" names="enum_viewport_defaultcanvasitemtexturefilter">enum <strong>DefaultCanvasItemTextureFilter</strong>: <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-filter-nearest" names="class_viewport_constant_default_canvas_item_texture_filter_nearest"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>纹理过滤仅从最近的像素读取。这使得纹理从近距离看是像素化的，从远处看是颗粒状的（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-filter-linear" names="class_viewport_constant_default_canvas_item_texture_filter_linear"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合。这使得纹理从近处看起来很平滑，从远处看起来却有颗粒感（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-filter-linear-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-filter-linear-with-mipmaps" names="class_viewport_constant_default_canvas_item_texture_filter_linear_with_mipmaps"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素和最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-filter-nearest-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-filter-nearest-with-mipmaps" names="class_viewport_constant_default_canvas_item_texture_filter_nearest_with_mipmaps"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并在最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-filter-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-filter-max" names="class_viewport_constant_default_canvas_item_texture_filter_max"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-defaultcanvasitemtexturerepeat"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-defaultcanvasitemtexturerepeat" names="enum_viewport_defaultcanvasitemtexturerepeat">enum <strong>DefaultCanvasItemTextureRepeat</strong>: <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-repeat-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-repeat-disabled" names="class_viewport_constant_default_canvas_item_texture_repeat_disabled"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用纹理重复。相反，当读取 0-1 范围之外的 UV 时，该值将被钳制在纹理的边缘，从而导致纹理的边界看起来被拉长。</paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-repeat-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-repeat-enabled" names="class_viewport_constant_default_canvas_item_texture_repeat_enabled"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>当 UV 坐标超出 0-1 范围时，使纹理能够重复。如果使用其中一种线性过滤模式，则当采样器过滤纹理边缘时，这可能会导致纹理边缘出现伪影。</paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-repeat-mirror"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-repeat-mirror" names="class_viewport_constant_default_canvas_item_texture_repeat_mirror"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR</strong> = <literal>2</literal></paragraph>
            <paragraph>重复时翻转该纹理，使边缘对齐而不是突然改变。</paragraph>
            <target refid="class-viewport-constant-default-canvas-item-texture-repeat-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-default-canvas-item-texture-repeat-max" names="class_viewport_constant_default_canvas_item_texture_repeat_max"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference> <strong>DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-sdfoversize"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-sdfoversize" names="enum_viewport_sdfoversize">enum <strong>SDFOversize</strong>: <reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-sdf-oversize-100-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-oversize-100-percent" names="class_viewport_constant_sdf_oversize_100_percent"><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> <strong>SDF_OVERSIZE_100_PERCENT</strong> = <literal>0</literal></paragraph>
            <paragraph>The signed distance field only covers the viewport's own rectangle.</paragraph>
            <target refid="class-viewport-constant-sdf-oversize-120-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-oversize-120-percent" names="class_viewport_constant_sdf_oversize_120_percent"><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> <strong>SDF_OVERSIZE_120_PERCENT</strong> = <literal>1</literal></paragraph>
            <paragraph>The signed distance field is expanded to cover 20% of the viewport's size around the borders.</paragraph>
            <target refid="class-viewport-constant-sdf-oversize-150-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-oversize-150-percent" names="class_viewport_constant_sdf_oversize_150_percent"><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> <strong>SDF_OVERSIZE_150_PERCENT</strong> = <literal>2</literal></paragraph>
            <paragraph>The signed distance field is expanded to cover 50% of the viewport's size around the borders.</paragraph>
            <target refid="class-viewport-constant-sdf-oversize-200-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-oversize-200-percent" names="class_viewport_constant_sdf_oversize_200_percent"><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> <strong>SDF_OVERSIZE_200_PERCENT</strong> = <literal>3</literal></paragraph>
            <paragraph>The signed distance field is expanded to cover 100% (double) of the viewport's size around the borders.</paragraph>
            <target refid="class-viewport-constant-sdf-oversize-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-oversize-max" names="class_viewport_constant_sdf_oversize_max"><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> <strong>SDF_OVERSIZE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-sdfscale"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-sdfscale" names="enum_viewport_sdfscale">enum <strong>SDFScale</strong>: <reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-sdf-scale-100-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-scale-100-percent" names="class_viewport_constant_sdf_scale_100_percent"><reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference> <strong>SDF_SCALE_100_PERCENT</strong> = <literal>0</literal></paragraph>
            <paragraph>The signed distance field is rendered at full resolution.</paragraph>
            <target refid="class-viewport-constant-sdf-scale-50-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-scale-50-percent" names="class_viewport_constant_sdf_scale_50_percent"><reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference> <strong>SDF_SCALE_50_PERCENT</strong> = <literal>1</literal></paragraph>
            <paragraph>The signed distance field is rendered at half the resolution of this viewport.</paragraph>
            <target refid="class-viewport-constant-sdf-scale-25-percent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-scale-25-percent" names="class_viewport_constant_sdf_scale_25_percent"><reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference> <strong>SDF_SCALE_25_PERCENT</strong> = <literal>2</literal></paragraph>
            <paragraph>The signed distance field is rendered at a quarter the resolution of this viewport.</paragraph>
            <target refid="class-viewport-constant-sdf-scale-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-sdf-scale-max" names="class_viewport_constant_sdf_scale_max"><reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference> <strong>SDF_SCALE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-vrsmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-vrsmode" names="enum_viewport_vrsmode">enum <strong>VRSMode</strong>: <reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-vrs-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-disabled" names="class_viewport_constant_vrs_disabled"><reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference> <strong>VRS_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>Variable Rate Shading is disabled.</paragraph>
            <target refid="class-viewport-constant-vrs-texture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-texture" names="class_viewport_constant_vrs_texture"><reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference> <strong>VRS_TEXTURE</strong> = <literal>1</literal></paragraph>
            <paragraph>Variable Rate Shading uses a texture. Note, for stereoscopic use a texture atlas with a texture for each view.</paragraph>
            <target refid="class-viewport-constant-vrs-xr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-xr" names="class_viewport_constant_vrs_xr"><reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference> <strong>VRS_XR</strong> = <literal>2</literal></paragraph>
            <paragraph>Variable Rate Shading's texture is supplied by the primary <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference>.</paragraph>
            <target refid="class-viewport-constant-vrs-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-max" names="class_viewport_constant_vrs_max"><reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference> <strong>VRS_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-viewport-vrsupdatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-viewport-vrsupdatemode" names="enum_viewport_vrsupdatemode">enum <strong>VRSUpdateMode</strong>: <reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-viewport-constant-vrs-update-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-update-disabled" names="class_viewport_constant_vrs_update_disabled"><reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference> <strong>VRS_UPDATE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>The input texture for variable rate shading will not be processed.</paragraph>
            <target refid="class-viewport-constant-vrs-update-once"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-update-once" names="class_viewport_constant_vrs_update_once"><reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference> <strong>VRS_UPDATE_ONCE</strong> = <literal>1</literal></paragraph>
            <paragraph>The input texture for variable rate shading will be processed once.</paragraph>
            <target refid="class-viewport-constant-vrs-update-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-update-always" names="class_viewport_constant_vrs_update_always"><reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference> <strong>VRS_UPDATE_ALWAYS</strong> = <literal>2</literal></paragraph>
            <paragraph>The input texture for variable rate shading will be processed each frame.</paragraph>
            <target refid="class-viewport-constant-vrs-update-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-viewport-constant-vrs-update-max" names="class_viewport_constant_vrs_update_max"><reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference> <strong>VRS_UPDATE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-viewport-property-audio-listener-enable-2d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-audio-listener-enable-2d" names="class_viewport_property_audio_listener_enable_2d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>audio_listener_enable_2d</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-audio-listener-enable-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_as_audio_listener_2d</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_audio_listener_2d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该视口将处理 2D 音频流。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-audio-listener-enable-3d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-audio-listener-enable-3d" names="class_viewport_property_audio_listener_enable_3d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>audio_listener_enable_3d</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-audio-listener-enable-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_as_audio_listener_3d</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_audio_listener_3d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该视口将处理 3D 音频流。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-canvas-cull-mask"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-canvas-cull-mask" names="class_viewport_property_canvas_cull_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>canvas_cull_mask</strong> = <literal>4294967295</literal> <reference internal="True" refid="class-viewport-property-canvas-cull-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_canvas_cull_mask</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_canvas_cull_mask</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渲染层，该 <strong>Viewport</strong> 会渲染位于这些层中的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-canvas-item-default-texture-filter"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-canvas-item-default-texture-filter" names="class_viewport_property_canvas_item_default_texture_filter"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> <strong>canvas_item_default_texture_filter</strong> = <literal>1</literal> <reference internal="True" refid="class-viewport-property-canvas-item-default-texture-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_canvas_item_texture_filter</strong>(value: <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference> <strong>get_default_canvas_item_texture_filter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置该 Viewport 中 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 所使用的默认过滤模式。选项见 <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturefilter"><inline classes="std std-ref">DefaultCanvasItemTextureFilter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-canvas-item-default-texture-repeat"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-canvas-item-default-texture-repeat" names="class_viewport_property_canvas_item_default_texture_repeat"><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference> <strong>canvas_item_default_texture_repeat</strong> = <literal>0</literal> <reference internal="True" refid="class-viewport-property-canvas-item-default-texture-repeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_canvas_item_texture_repeat</strong>(value: <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference> <strong>get_default_canvas_item_texture_repeat</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置该 Viewport 中 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 所使用的默认重复模式。选项见 <reference internal="True" refid="enum-viewport-defaultcanvasitemtexturerepeat"><inline classes="std std-ref">DefaultCanvasItemTextureRepeat</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-canvas-transform"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-canvas-transform" names="class_viewport_property_canvas_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>canvas_transform</strong> <reference internal="True" refid="class-viewport-property-canvas-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_canvas_transform</strong>(value: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_canvas_transform</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该视口的画布变换，对改变所有子 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的屏幕位置很有用。相对于该视口的全局画布变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-debug-draw"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-debug-draw" names="class_viewport_property_debug_draw"><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>debug_draw</strong> = <literal>0</literal> <reference internal="True" refid="class-viewport-property-debug-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_draw</strong>(value: <reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-debugdraw"><inline classes="std std-ref">DebugDraw</inline></reference> <strong>get_debug_draw</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在调试时，用于测试渲染的几何图形的叠加模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-disable-3d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-disable-3d" names="class_viewport_property_disable_3d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>disable_3d</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-disable-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_disable_3d</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_3d_disabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>禁用 3D 渲染（但保留 2D 渲染）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-fsr-sharpness"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-fsr-sharpness" names="class_viewport_property_fsr_sharpness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>fsr_sharpness</strong> = <literal>0.2</literal> <reference internal="True" refid="class-viewport-property-fsr-sharpness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fsr_sharpness</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_fsr_sharpness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定使用 FSR 放大模式时，放大后的图像的锐度。每个整数的锐度减半。值从 0.0（最锐利）到 2.0。高于 2.0 的值不会产生明显的差异。</paragraph>
            <paragraph>要在根视口上控制此属性，请设置 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-scaling-3d-fsr-sharpness"><inline classes="std std-ref">ProjectSettings.rendering/scaling_3d/fsr_sharpness</inline></reference> 项目设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-global-canvas-transform"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-global-canvas-transform" names="class_viewport_property_global_canvas_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>global_canvas_transform</strong> <reference internal="True" refid="class-viewport-property-global-canvas-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_global_canvas_transform</strong>(value: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_global_canvas_transform</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该视口的全局画布变换。画布变换是相对于这个的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-gui-disable-input"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-gui-disable-input" names="class_viewport_property_gui_disable_input"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gui_disable_input</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-gui-disable-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_disable_input</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_input_disabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该视口将不接收输入事件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-gui-embed-subwindows"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-gui-embed-subwindows" names="class_viewport_property_gui_embed_subwindows"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gui_embed_subwindows</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-gui-embed-subwindows"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_embedding_subwindows</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_embedding_subwindows</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，子窗口（弹出窗口和对话框）将和控件等节点一样嵌入到应用程序窗口中。如果为 <literal>false</literal>，它们将显示为操作系统处理的独立窗口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-gui-snap-controls-to-pixels"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-gui-snap-controls-to-pixels" names="class_viewport_property_gui_snap_controls_to_pixels"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gui_snap_controls_to_pixels</strong> = <literal>true</literal> <reference internal="True" refid="class-viewport-property-gui-snap-controls-to-pixels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_snap_controls_to_pixels</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_snap_controls_to_pixels_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该视口上的 GUI 控件将完美地放置像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-handle-input-locally"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-handle-input-locally" names="class_viewport_property_handle_input_locally"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>handle_input_locally</strong> = <literal>true</literal> <reference internal="True" refid="class-viewport-property-handle-input-locally"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_handle_input_locally</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_handling_input_locally</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则这个视口会把收到的输入事件标记为已被自身处理。如果为 <literal>false</literal>，则由第一个设置本地处理输入的父级视口进行这样的操作。</paragraph>
            <paragraph><reference internal="True" refuri="class_subviewportcontainer#class-subviewportcontainer"><inline classes="std std-ref">SubViewportContainer</inline></reference> 会自动将其包含的 <strong>Viewport</strong> 的这个属性设置为 <literal>false</literal>。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-viewport-method-set-input-as-handled"><inline classes="std std-ref">set_input_as_handled</inline></reference> 和 <reference internal="True" refid="class-viewport-method-is-input-handled"><inline classes="std std-ref">is_input_handled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-mesh-lod-threshold"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-mesh-lod-threshold" names="class_viewport_property_mesh_lod_threshold"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>mesh_lod_threshold</strong> = <literal>1.0</literal> <reference internal="True" refid="class-viewport-property-mesh-lod-threshold"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mesh_lod_threshold</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_mesh_lod_threshold</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于在 <strong>Viewport</strong> 中渲染的网格的自动 LOD 偏置（类似于 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe-property-mesh-lod-threshold"><inline classes="std std-ref">ReflectionProbe.mesh_lod_threshold</inline></reference>）。较高的值将使用生成了 LOD 变化的网格的较不详细版本。如果被设置为 <literal>0.0</literal>，则自动 LOD 将被禁用。增加 <reference internal="True" refid="class-viewport-property-mesh-lod-threshold"><inline classes="std std-ref">mesh_lod_threshold</inline></reference>，以牺牲几何细节为代价提高性能。</paragraph>
            <paragraph>要在根视口上控制该属性，请设置 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-mesh-lod-lod-change-threshold-pixels"><inline classes="std std-ref">ProjectSettings.rendering/mesh_lod/lod_change/threshold_pixels</inline></reference> 项目设置。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-viewport-property-mesh-lod-threshold"><inline classes="std std-ref">mesh_lod_threshold</inline></reference> 不影响 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> 可见性范围（也称为“手动”LOD 或分层 LOD）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-msaa-2d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-msaa-2d" names="class_viewport_property_msaa_2d"><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>msaa_2d</strong> = <literal>0</literal> <reference internal="True" refid="class-viewport-property-msaa-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_msaa_2d</strong>(value: <reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>get_msaa_2d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>2D/画布渲染的多重采样抗锯齿模式。数字越高，得到的边缘越平滑，代价是性能也会显著降低。设为 2 或 4 为佳，除非目标是非常高端的系统。对由着色器或纹理导致的锯齿无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-msaa-3d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-msaa-3d" names="class_viewport_property_msaa_3d"><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>msaa_3d</strong> = <literal>0</literal> <reference internal="True" refid="class-viewport-property-msaa-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_msaa_3d</strong>(value: <reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-msaa"><inline classes="std std-ref">MSAA</inline></reference> <strong>get_msaa_3d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>3D 渲染的多重采样抗锯齿模式。数字越高，得到的边缘越平滑，代价是性能也会显著降低。设为 2 或 4 为佳，除非目标是非常高端的系统。另请参阅 3D 的双线性缩放 <reference internal="True" refid="class-viewport-property-scaling-3d-mode"><inline classes="std std-ref">scaling_3d_mode</inline></reference> 实现超采样，能够提供更高的质量，但消耗也更高。对由着色器或纹理导致的锯齿无效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-own-world-3d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-own-world-3d" names="class_viewport_property_own_world_3d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>own_world_3d</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-own-world-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_own_world_3d</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_own_world_3d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该视口会使用 <reference internal="True" refid="class-viewport-property-world-3d"><inline classes="std std-ref">world_3d</inline></reference> 中定义的 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> 的唯一副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-physics-object-picking"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-physics-object-picking" names="class_viewport_property_physics_object_picking"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>physics_object_picking</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-physics-object-picking"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physics_object_picking</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_physics_object_picking</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则视口中渲染的对象会成为鼠标拾取过程中的候选。</paragraph>
            <paragraph><strong>注意：</strong>同时能够被拾取的对象最多只有 64 个，选择的顺序是不确定的，每次拾取可能都不相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-physics-object-picking-first-only"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-physics-object-picking-first-only" names="class_viewport_property_physics_object_picking_first_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>physics_object_picking_first_only</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-physics-object-picking-first-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physics_object_picking_first_only</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_physics_object_picking_first_only</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则鼠标拾取的过程中只会将 input_event 信号发送给一个物理对象。如果你只希望获取最顶层的对象，就必须同时启用 <reference internal="True" refid="class-viewport-property-physics-object-picking-sort"><inline classes="std std-ref">physics_object_picking_sort</inline></reference>。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则鼠标拾取的过程中会将 input_event 信号发送给所有物理对象。</paragraph>
            <paragraph>仅适用于 2D CanvasItem 对象的拾取。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-physics-object-picking-sort"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-physics-object-picking-sort" names="class_viewport_property_physics_object_picking_sort"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>physics_object_picking_sort</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-physics-object-picking-sort"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_physics_object_picking_sort</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_physics_object_picking_sort</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则对象会按照固定的顺序接收鼠标拾取事件，首先会按各自的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 排序，然后按它们在场景树中的位置排序。如果为 <literal>false</literal>，则顺序不确定。</paragraph>
            <paragraph><strong>注意：</strong>默认情况下禁用此设置，因为它可能会产生昂贵的计算成本。</paragraph>
            <paragraph><strong>注意：</strong>排序发生在选择可拾取对象之后。因为同时能够被拾取的对象最多只有 64 个，所以无法保证 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-z-index"><inline classes="std std-ref">CanvasItem.z_index</inline></reference> 最大的对象能够接收到拾取事件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-positional-shadow-atlas-16-bits"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-positional-shadow-atlas-16-bits" names="class_viewport_property_positional_shadow_atlas_16_bits"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>positional_shadow_atlas_16_bits</strong> = <literal>true</literal> <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-16-bits"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_positional_shadow_atlas_16_bits</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_positional_shadow_atlas_16_bits</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用 16 位的全向灯/聚光灯阴影深度贴图。启用后，阴影的精度会降低，可能造成阴影失真，但能够在部分设备上提升性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-positional-shadow-atlas-quad-0"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-positional-shadow-atlas-quad-0" names="class_viewport_property_positional_shadow_atlas_quad_0"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>positional_shadow_atlas_quad_0</strong> = <literal>2</literal> <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-0"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdiv: <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>get_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影图集上第一象限的细分量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-positional-shadow-atlas-quad-1"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-positional-shadow-atlas-quad-1" names="class_viewport_property_positional_shadow_atlas_quad_1"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>positional_shadow_atlas_quad_1</strong> = <literal>2</literal> <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-1"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdiv: <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>get_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影图集上第二象限的细分量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-positional-shadow-atlas-quad-2"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-positional-shadow-atlas-quad-2" names="class_viewport_property_positional_shadow_atlas_quad_2"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>positional_shadow_atlas_quad_2</strong> = <literal>3</literal> <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdiv: <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>get_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影图集上第三象限的细分量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-positional-shadow-atlas-quad-3"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-positional-shadow-atlas-quad-3" names="class_viewport_property_positional_shadow_atlas_quad_3"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>positional_shadow_atlas_quad_3</strong> = <literal>4</literal> <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-quad-3"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdiv: <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>get_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影图集上第四象限的细分量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-positional-shadow-atlas-size"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-positional-shadow-atlas-size" names="class_viewport_property_positional_shadow_atlas_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>positional_shadow_atlas_size</strong> = <literal>2048</literal> <reference internal="True" refid="class-viewport-property-positional-shadow-atlas-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_positional_shadow_atlas_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_positional_shadow_atlas_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影图集的分辨率（用于全向灯和聚光灯）。该值将向上舍入到最接近的 2 次幂。</paragraph>
            <paragraph><strong>注意：</strong>如果设置为 <literal>0</literal>，将根本看不到任何阴影（包括定向阴影）。可以通过降低 CPU 和 GPU 负载来显著提升在低端系统上的性能（因为绘制不带阴影的场景需要的绘制调用更少）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-scaling-3d-mode"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-scaling-3d-mode" names="class_viewport_property_scaling_3d_mode"><reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference> <strong>scaling_3d_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-viewport-property-scaling-3d-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scaling_3d_mode</strong>(value: <reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-scaling3dmode"><inline classes="std std-ref">Scaling3DMode</inline></reference> <strong>get_scaling_3d_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置缩放 3D 模式。双线性缩放会以不同的分辨率进行渲染，对视口进行欠采样或超采样。FidelityFX Super Resolution 1.0，缩写为 FSR，是一种放大技术，通过使用一种空间感知放大算法，以快速帧速率生成高质量图像。FSR 比双线性的性能消耗略高一些，但产生的图像质量却高得多。应尽可能使用 FSR。</paragraph>
            <paragraph>要在根视口上控制这个属性，请使用项目设置 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-scaling-3d-mode"><inline classes="std std-ref">ProjectSettings.rendering/scaling_3d/mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-scaling-3d-scale"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-scaling-3d-scale" names="class_viewport_property_scaling_3d_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>scaling_3d_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scaling_3d_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_scaling_3d_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>根据视口大小缩放 3D 渲染缓冲区，使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-scaling-3d-mode"><inline classes="std std-ref">ProjectSettings.rendering/scaling_3d/mode</inline></reference> 中指定的图像过滤器将输出图像缩放到完整的视口大小。比 <literal>1.0</literal> 小的值可以牺牲质量加速 3D 渲染（欠采样）。比 <literal>1.0</literal> 大的值仅在双线性模式下可用，可以提升 3D 渲染质量，但性能消耗较高（超采样）。另见多重采样抗锯齿 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-quality-msaa-3d"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/quality/msaa_3d</inline></reference>，性能消耗明显更低，但只会对多边形的边缘进行平滑。</paragraph>
            <paragraph>使用 FSR 放大时，AMD 推荐将以下值作为预设选项暴露给用户“极致质量：0.77”“质量：0.67”“平衡：0.59”“性能：0.5”，不暴露特定的缩放值。</paragraph>
            <paragraph>要在根视口上控制这个属性，请使用项目设置 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-scaling-3d-scale"><inline classes="std std-ref">ProjectSettings.rendering/scaling_3d/scale</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-screen-space-aa"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-screen-space-aa" names="class_viewport_property_screen_space_aa"><reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference> <strong>screen_space_aa</strong> = <literal>0</literal> <reference internal="True" refid="class-viewport-property-screen-space-aa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_screen_space_aa</strong>(value: <reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-screenspaceaa"><inline classes="std std-ref">ScreenSpaceAA</inline></reference> <strong>get_screen_space_aa</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置使用的屏幕空间抗锯齿方法。屏幕空间抗锯齿的原理是在后期处理着色器中选择性地模糊边缘。它与 MSAA 不同，后者在渲染对象时采用多个覆盖样本。屏幕空间抗锯齿方法通常比 MSAA 更快，并且会平滑高光锯齿，但往往会使场景显得模糊。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-sdf-oversize"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-sdf-oversize" names="class_viewport_property_sdf_oversize"><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> <strong>sdf_oversize</strong> = <literal>1</literal> <reference internal="True" refid="class-viewport-property-sdf-oversize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sdf_oversize</strong>(value: <reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-sdfoversize"><inline classes="std std-ref">SDFOversize</inline></reference> <strong>get_sdf_oversize</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Controls how much of the original viewport's size should be covered by the 2D signed distance field. This SDF can be sampled in <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> shaders and is also used for <reference internal="True" refuri="class_gpuparticles2d#class-gpuparticles2d"><inline classes="std std-ref">GPUParticles2D</inline></reference> collision. Higher values allow portions of occluders located outside the viewport to still be taken into account in the generated signed distance field, at the cost of performance. If you notice particles falling through <reference internal="True" refuri="class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference>s as the occluders leave the viewport, increase this setting.</paragraph>
            <paragraph>The percentage is added on each axis and on both sides. For example, with the default <reference internal="True" refid="class-viewport-constant-sdf-oversize-120-percent"><inline classes="std std-ref">SDF_OVERSIZE_120_PERCENT</inline></reference>, the signed distance field will cover 20% of the viewport's size outside the viewport on each side (top, right, bottom, left).</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-sdf-scale"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-sdf-scale" names="class_viewport_property_sdf_scale"><reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference> <strong>sdf_scale</strong> = <literal>1</literal> <reference internal="True" refid="class-viewport-property-sdf-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sdf_scale</strong>(value: <reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-sdfscale"><inline classes="std std-ref">SDFScale</inline></reference> <strong>get_sdf_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The resolution scale to use for the 2D signed distance field. Higher values lead to a more precise and more stable signed distance field as the camera moves, at the cost of performance.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-snap-2d-transforms-to-pixel"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-snap-2d-transforms-to-pixel" names="class_viewport_property_snap_2d_transforms_to_pixel"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>snap_2d_transforms_to_pixel</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-snap-2d-transforms-to-pixel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_snap_2d_transforms_to_pixel</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_snap_2d_transforms_to_pixel_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> nodes will internally snap to full pixels. Their position can still be sub-pixel, but the decimals will not have effect. This can lead to a crisper appearance at the cost of less smooth movement, especially when <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> smoothing is enabled.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-snap-2d-vertices-to-pixel"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-snap-2d-vertices-to-pixel" names="class_viewport_property_snap_2d_vertices_to_pixel"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>snap_2d_vertices_to_pixel</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-snap-2d-vertices-to-pixel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_snap_2d_vertices_to_pixel</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_snap_2d_vertices_to_pixel_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, vertices of <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> nodes will snap to full pixels. Only affects the final vertex positions, not the transforms. This can lead to a crisper appearance at the cost of less smooth movement, especially when <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> smoothing is enabled.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-texture-mipmap-bias"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-texture-mipmap-bias" names="class_viewport_property_texture_mipmap_bias"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>texture_mipmap_bias</strong> = <literal>0.0</literal> <reference internal="True" refid="class-viewport-property-texture-mipmap-bias"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_mipmap_bias</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_texture_mipmap_bias</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>通过从更低或更高的 mipmap 中读取数据影响最终纹理的锐度（也叫“纹理 LOD 偏置”）。负值会让 mipmap 纹理更锐利，但从较远处观察时颗粒更明显，而正值会让 mipmap 纹理更模糊（即便凑近看也一样）。</paragraph>
            <paragraph>启用时间抗锯齿（<reference internal="True" refid="class-viewport-property-use-taa"><inline classes="std std-ref">use_taa</inline></reference>）会对这个值应用 <literal>-0.5</literal> 的偏移量，而启用 FXAA（<reference internal="True" refid="class-viewport-property-screen-space-aa"><inline classes="std std-ref">screen_space_aa</inline></reference>）则会对这个值应用 <literal>-0.25</literal> 的偏移量。如果同时启用 TAA 和 FXAA，则会对这个值应用 <literal>-0.75</literal> 的偏移量。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-viewport-property-scaling-3d-scale"><inline classes="std std-ref">scaling_3d_scale</inline></reference> 比 <literal>1.0</literal> 小（包含），则会使用 <reference internal="True" refid="class-viewport-property-texture-mipmap-bias"><inline classes="std std-ref">texture_mipmap_bias</inline></reference> 自动调整 mipmap 偏置，内部会根据缩放系数进行计算。公式为 <literal>log2(scaling_3d_scale) + mipmap_bias</literal>。</paragraph>
            <paragraph>要在根视口上控制这个属性，请使用项目设置 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-texture-mipmap-bias"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/texture_mipmap_bias</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-transparent-bg"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-transparent-bg" names="class_viewport_property_transparent_bg"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>transparent_bg</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-transparent-bg"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transparent_background</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_transparent_background</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，该视口应使其背景渲染为透明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-use-debanding"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-use-debanding" names="class_viewport_property_use_debanding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_debanding</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-use-debanding"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_debanding</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_debanding</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则使用一个快速的后期处理滤镜，使 3D 的带状现象明显减少。除非 <reference internal="True" refuri="class_environment#class-environment-property-background-mode"><inline classes="std std-ref">Environment.background_mode</inline></reference> 为 <reference internal="True" refuri="class_environment#class-environment-constant-bg-canvas"><inline classes="std std-ref">Environment.BG_CANVAS</inline></reference>，否则 2D 渲染<emphasis>不会</emphasis>受到去条带的影响。另见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-quality-use-debanding"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/quality/use_debanding</inline></reference>。</paragraph>
            <paragraph>在某些情况下，去条带可能会引入稍微明显的抖动图案。建议仅在实际需要时才启用去条带，因为抖动图案会使无损压缩的屏幕截图变大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-use-hdr-2d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-use-hdr-2d" names="class_viewport_property_use_hdr_2d"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_hdr_2d</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-use-hdr-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_hdr_2d</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_hdr_2d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, 2D rendering will use an high dynamic range (HDR) format framebuffer matching the bit depth of the 3D framebuffer. When using the Forward+ renderer this will be an <literal>RGBA16</literal> framebuffer, while when using the Mobile renderer it will be an <literal>RGB10_A2</literal> framebuffer. Additionally, 2D rendering will take place in linear color space and will be converted to sRGB space immediately before blitting to the screen (if the Viewport is attached to the screen). Practically speaking, this means that the end result of the Viewport will not be clamped into the <literal>0-1</literal> range and can be used in 3D rendering without color space adjustments. This allows 2D rendering to take advantage of effects requiring high dynamic range (e.g. 2D glow) as well as substantially improves the appearance of effects requiring highly detailed gradients.</paragraph>
            <paragraph><strong>Note:</strong> This setting will have no effect when using the GL Compatibility renderer as the GL Compatibility renderer always renders in low dynamic range for performance reasons.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-use-occlusion-culling"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-use-occlusion-culling" names="class_viewport_property_use_occlusion_culling"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_occlusion_culling</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-use-occlusion-culling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_occlusion_culling</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_occlusion_culling</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，<reference internal="True" refuri="class_occluderinstance3d#class-occluderinstance3d"><inline classes="std std-ref">OccluderInstance3D</inline></reference> 节点将被用于该视口中的 3D 遮挡剔除。对于根视口，<reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-occlusion-culling-use-occlusion-culling"><inline classes="std std-ref">ProjectSettings.rendering/occlusion_culling/use_occlusion_culling</inline></reference> 必须改为被设置为 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>启用遮挡剔除会消耗一定的 CPU。仅当确实打算使用遮挡剔除时才启用它，并考虑场景是否真的可以从遮挡剔除中受益。具有很少或没有对象阻挡视图的大型开放场景，通常不会从遮挡剔除中受益更多。与遮挡剔除相比，大型开放场景通常从网格 LOD 和可见性范围（<reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-visibility-range-begin"><inline classes="std std-ref">GeometryInstance3D.visibility_range_begin</inline></reference> 和 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-visibility-range-end"><inline classes="std std-ref">GeometryInstance3D.visibility_range_end</inline></reference>）中受益更多。</paragraph>
            <paragraph><strong>注意：</strong>由于内存限制，Web 导出模板中默认不支持遮挡剔除。编译自定义 Web 导出模板时使用 <literal>module_raycast_enabled=yes</literal> 可以启用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-use-taa"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-use-taa" names="class_viewport_property_use_taa"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_taa</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-use-taa"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_taa</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_taa</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为该视口启用时间抗锯齿。TAA 通过抖动相机并累积最后渲染帧的图像来工作，运动向量渲染被用于解释相机和对象的运动。</paragraph>
            <paragraph><strong>注意：</strong>实现尚未完成，一些可视实例，如粒子和蒙皮网格可能会出现伪影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-use-xr"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-use-xr" names="class_viewport_property_use_xr"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_xr</strong> = <literal>false</literal> <reference internal="True" refid="class-viewport-property-use-xr"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_xr</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_using_xr</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则视口将使用主 XR 接口来渲染 XR 输出。如果适用，这可以得到立体图像，渲染结果会输出到头戴设备。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-vrs-mode"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-vrs-mode" names="class_viewport_property_vrs_mode"><reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference> <strong>vrs_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-viewport-property-vrs-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vrs_mode</strong>(value: <reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-vrsmode"><inline classes="std std-ref">VRSMode</inline></reference> <strong>get_vrs_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于这个视口的可变速率着色（Variable Rate Shading，VRS）模式。请注意，如果硬件不支持 VRS，则会忽略此属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-vrs-texture"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-vrs-texture" names="class_viewport_property_vrs_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>vrs_texture</strong> <reference internal="True" refid="class-viewport-property-vrs-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vrs_texture</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_vrs_texture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Texture to use when <reference internal="True" refid="class-viewport-property-vrs-mode"><inline classes="std std-ref">vrs_mode</inline></reference> is set to <reference internal="True" refid="class-viewport-constant-vrs-texture"><inline classes="std std-ref">VRS_TEXTURE</inline></reference>.</paragraph>
            <paragraph>The texture <emphasis>must</emphasis> use a lossless compression format so that colors can be matched precisely. The following VRS densities are mapped to various colors, with brighter colors representing a lower level of shading precision:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">- 1×1 = rgb(0, 0, 0)     - #000000
- 1×2 = rgb(0, 85, 0)    - #005500
- 2×1 = rgb(85, 0, 0)    - #550000
- 2×2 = rgb(85, 85, 0)   - #555500
- 2×4 = rgb(85, 170, 0)  - #55aa00
- 4×2 = rgb(170, 85, 0)  - #aa5500
- 4×4 = rgb(170, 170, 0) - #aaaa00
- 4×8 = rgb(170, 255, 0) - #aaff00 - Not supported on most hardware
- 8×4 = rgb(255, 170, 0) - #ffaa00 - Not supported on most hardware
- 8×8 = rgb(255, 255, 0) - #ffff00 - Not supported on most hardware</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-vrs-update-mode"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-vrs-update-mode" names="class_viewport_property_vrs_update_mode"><reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference> <strong>vrs_update_mode</strong> = <literal>1</literal> <reference internal="True" refid="class-viewport-property-vrs-update-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vrs_update_mode</strong>(value: <reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-viewport-vrsupdatemode"><inline classes="std std-ref">VRSUpdateMode</inline></reference> <strong>get_vrs_update_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Sets the update mode for Variable Rate Shading (VRS) for the viewport. VRS requires the input texture to be converted to the format usable by the VRS method supported by the hardware. The update mode defines how often this happens. If the GPU does not support VRS, or VRS is not enabled, this property is ignored.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-world-2d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-world-2d" names="class_viewport_property_world_2d"><reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> <strong>world_2d</strong> <reference internal="True" refid="class-viewport-property-world-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_world_2d</strong>(value: <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> <strong>get_world_2d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>自定义的 <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference>，可以作为 2D 环境源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-property-world-3d"></target>
            <paragraph classes="classref-property" ids="class-viewport-property-world-3d" names="class_viewport_property_world_3d"><reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> <strong>world_3d</strong> <reference internal="True" refid="class-viewport-property-world-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_world_3d</strong>(value: <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> <strong>get_world_3d</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>自定义的 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference>，可以作为 3D 环境源。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-viewport-method-find-world-2d"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-find-world-2d" names="class_viewport_method_find_world_2d"><reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> <strong>find_world_2d</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-find-world-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该视口的首个有效 <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference>，在它自身及任何 Viewport 祖先节点的 <reference internal="True" refid="class-viewport-property-world-2d"><inline classes="std std-ref">world_2d</inline></reference> 属性中查找。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-find-world-3d"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-find-world-3d" names="class_viewport_method_find_world_3d"><reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference> <strong>find_world_3d</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-find-world-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个视口的第一个有效 <reference internal="True" refuri="class_world3d#class-world3d"><inline classes="std std-ref">World3D</inline></reference>，会在自身和 Viewport 祖先的 <reference internal="True" refid="class-viewport-property-world-3d"><inline classes="std std-ref">world_3d</inline></reference> 属性中搜索。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-camera-2d"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-camera-2d" names="class_viewport_method_get_camera_2d"><reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> <strong>get_camera_2d</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-camera-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前活动的 2D 相机。如果没有活动的相机，则返回 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-camera-3d"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-camera-3d" names="class_viewport_method_get_camera_3d"><reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> <strong>get_camera_3d</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-camera-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前活动的 3D 相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-canvas-cull-mask-bit"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-canvas-cull-mask-bit" names="class_viewport_method_get_canvas_cull_mask_bit"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_canvas_cull_mask_bit</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-canvas-cull-mask-bit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回渲染层遮罩上的某个比特位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-embedded-subwindows"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-embedded-subwindows" names="class_viewport_method_get_embedded_subwindows"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference>] <strong>get_embedded_subwindows</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-embedded-subwindows"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该视口内可见的嵌入 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 的列表。</paragraph>
            <paragraph><strong>注意：</strong>其他视口内的 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 不会被列出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-final-transform"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-final-transform" names="class_viewport_method_get_final_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_final_transform</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-final-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从该视口的坐标系到嵌入器坐标系统的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-mouse-position"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-mouse-position" names="class_viewport_method_get_mouse_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_mouse_position</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-mouse-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>Viewport</strong> 中鼠标的位置，使用该 <strong>Viewport</strong> 的坐标系。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-positional-shadow-atlas-quadrant-subdiv"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-positional-shadow-atlas-quadrant-subdiv" names="class_viewport_method_get_positional_shadow_atlas_quadrant_subdiv"><reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference> <strong>get_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-positional-shadow-atlas-quadrant-subdiv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定象限的位置阴影图集象限细分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-render-info"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-render-info" names="class_viewport_method_get_render_info"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_render_info</strong>(type: <reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference>, info: <reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference>) <reference internal="True" refid="class-viewport-method-get-render-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定类型的渲染统计。选项见 <reference internal="True" refid="enum-viewport-renderinfotype"><inline classes="std std-ref">RenderInfoType</inline></reference> 和 <reference internal="True" refid="enum-viewport-renderinfo"><inline classes="std std-ref">RenderInfo</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-screen-transform"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-screen-transform" names="class_viewport_method_get_screen_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_screen_transform</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-screen-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从视口的坐标到包含窗口管理器窗口的屏幕坐标的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-texture"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-texture" names="class_viewport_method_get_texture"><reference internal="True" refuri="class_viewporttexture#class-viewporttexture"><inline classes="std std-ref">ViewportTexture</inline></reference> <strong>get_texture</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该视口的纹理</paragraph>
            <paragraph><strong>注意：</strong>保存当前纹理时（例如保存到文件中），如果时机过早则可能是全黑或过时的图片，尤其是在 <reference internal="True" refuri="class_node#class-node-private-method-ready"><inline classes="std std-ref">Node._ready</inline></reference> 等函数中使用时。要确保获得正确的纹理，你可以等待 <reference internal="True" refuri="class_renderingserver#class-renderingserver-signal-frame-post-draw"><inline classes="std std-ref">RenderingServer.frame_post_draw</inline></reference> 信号。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    await RenderingServer.frame_post_draw
    $Viewport.get_texture().get_image().save_png("user://Screenshot.png")</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-viewport-rid"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-viewport-rid" names="class_viewport_method_get_viewport_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_viewport_rid</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-viewport-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该视口在 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-get-visible-rect"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-get-visible-rect" names="class_viewport_method_get_visible_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_visible_rect</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-get-visible-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局屏幕坐标中的可见矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-gui-get-drag-data"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-gui-get-drag-data" names="class_viewport_method_gui_get_drag_data"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>gui_get_drag_data</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-gui-get-drag-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GUI 的拖动数据，该数据先前由 <reference internal="True" refuri="class_control#class-control-private-method-get-drag-data"><inline classes="std std-ref">Control._get_drag_data</inline></reference> 返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-gui-get-focus-owner"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-gui-get-focus-owner" names="class_viewport_method_gui_get_focus_owner"><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>gui_get_focus_owner</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-gui-get-focus-owner"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个视口中聚焦的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>。如果没有聚焦任何 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 则返回 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-gui-get-hovered-control"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-gui-get-hovered-control" names="class_viewport_method_gui_get_hovered_control"><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>gui_get_hovered_control</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-gui-get-hovered-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前鼠标在该视口中悬停的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>。如果鼠标没有对应的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 则返回 null。</paragraph>
            <paragraph>获取到悬停的通常是末端的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点或子树中最深的一级。与 <reference internal="True" refuri="class_node#class-node-method-is-ancestor-of"><inline classes="std std-ref">Node.is_ancestor_of</inline></reference> 配合的时候非常有用，可以查到鼠标是否位于某个控件树中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-gui-is-drag-successful"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-gui-is-drag-successful" names="class_viewport_method_gui_is_drag_successful"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gui_is_drag_successful</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-gui-is-drag-successful"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果拖拽操作成功，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-gui-is-dragging"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-gui-is-dragging" names="class_viewport_method_gui_is_dragging"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>gui_is_dragging</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-gui-is-dragging"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该视口目前正在执行拖拽操作，则返回 <literal>true</literal>。</paragraph>
            <paragraph>如果你更倾向于对其进行轮询，那么就可以作为 <reference internal="True" refuri="class_node#class-node-constant-notification-drag-begin"><inline classes="std std-ref">Node.NOTIFICATION_DRAG_BEGIN</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-constant-notification-drag-end"><inline classes="std std-ref">Node.NOTIFICATION_DRAG_END</inline></reference> 的替代品。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-gui-release-focus"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-gui-release-focus" names="class_viewport_method_gui_release_focus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>gui_release_focus</strong>() <reference internal="True" refid="class-viewport-method-gui-release-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除这个视口中当前聚焦 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的焦点。如果没有聚焦任何 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>，则什么都不做。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-is-input-handled"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-is-input-handled" names="class_viewport_method_is_input_handled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_input_handled</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-viewport-method-is-input-handled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前的 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 是否已被处理。在 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> 生命周期中调用 <reference internal="True" refid="class-viewport-method-set-input-as-handled"><inline classes="std std-ref">set_input_as_handled</inline></reference> 前，输入事件都处于未处理状态。</paragraph>
            <paragraph>通常作为 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference>、<reference internal="True" refuri="class_control#class-control-private-method-gui-input"><inline classes="std std-ref">Control._gui_input</inline></reference> 等输入处理方法以及对应的信号处理函数的一部分来实现。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-viewport-property-handle-input-locally"><inline classes="std std-ref">handle_input_locally</inline></reference> 为 <literal>false</literal>，则这个方法会尝试查找第一个本地处理输入的父级视口，并返回该视口的 <reference internal="True" refid="class-viewport-method-is-input-handled"><inline classes="std std-ref">is_input_handled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-push-input"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-push-input" names="class_viewport_method_push_input"><abbreviation explanation="无返回值。">void</abbreviation> <strong>push_input</strong>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, in_local_coords: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-viewport-method-push-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该 <strong>Viewport</strong> 中触发给定的 <literal>event</literal> 事件。可用于在不同视口之间传递 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>，或者在本地应用通过网络传输或保存在文件中的事件。</paragraph>
            <paragraph>如果 <literal>in_local_coords</literal> 为 <literal>false</literal>，则该事件中的位置使用的是嵌入器坐标系，会被转换至视口坐标系。如果 <literal>in_local_coords</literal> 为 <literal>true</literal>，则该事件的位置使用的是视口坐标系。</paragraph>
            <paragraph>虽然这个方法的用途和 <reference internal="True" refuri="class_input#class-input-method-parse-input-event"><inline classes="std std-ref">Input.parse_input_event</inline></reference> 类似，但不会根据 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-input-devices-pointing-emulate-touch-from-mouse"><inline classes="std std-ref">ProjectSettings.input_devices/pointing/emulate_touch_from_mouse</inline></reference> 等项目设置对指定的 <literal>event</literal> 进行重映射。</paragraph>
            <paragraph>调用这个方法会将调用传播至子节点，按照以下顺序调用：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_control#class-control-private-method-gui-input"><inline classes="std std-ref">Control._gui_input</inline></reference> 仅用于 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node-private-method-shortcut-input"><inline classes="std std-ref">Node._shortcut_input</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node-private-method-unhandled-key-input"><inline classes="std std-ref">Node._unhandled_key_input</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node-private-method-unhandled-input"><inline classes="std std-ref">Node._unhandled_input</inline></reference></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果某个方法使用 <reference internal="True" refid="class-viewport-method-set-input-as-handled"><inline classes="std std-ref">set_input_as_handled</inline></reference> 将输入标记为已处理，则列表中的后续方法均不会被调用。</paragraph>
            <paragraph>如果没有任何方法处理该事件，并且 <reference internal="True" refid="class-viewport-property-physics-object-picking"><inline classes="std std-ref">physics_object_picking</inline></reference> 为 <literal>true</literal>，则该事件将用于物理对象的拾取。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-push-text-input"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-push-text-input" names="class_viewport_method_push_text_input"><abbreviation explanation="无返回值。">void</abbreviation> <strong>push_text_input</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-viewport-method-push-text-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>辅助方法，会调用当前聚焦 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的 <literal>set_text()</literal> 方法，前提是该控件上定义了这个方法（例如聚焦 Control 为 <reference internal="True" refuri="class_button#class-button"><inline classes="std std-ref">Button</inline></reference> 或 <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-push-unhandled-input"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-push-unhandled-input" names="class_viewport_method_push_unhandled_input"><abbreviation explanation="无返回值。">void</abbreviation> <strong>push_unhandled_input</strong>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>, in_local_coords: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-viewport-method-push-unhandled-input"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refid="class-viewport-method-push-input"><inline classes="std std-ref">push_input</inline></reference> instead.</paragraph>
            <paragraph>在该 <strong>Viewport</strong> 中触发给定的 <literal>event</literal> 事件。可用于在不同视口之间传递 <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>，或者在本地应用通过网络传输或保存在文件中的事件。</paragraph>
            <paragraph>如果 <literal>in_local_coords</literal> 为 <literal>false</literal>，则该事件中的位置使用的是嵌入器坐标系，会被转换至视口坐标系。如果 <literal>in_local_coords</literal> 为 <literal>true</literal>，则该事件的位置使用的是视口坐标系。</paragraph>
            <paragraph>调用这个方法会将调用传播至子节点，按照以下顺序调用：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node-private-method-shortcut-input"><inline classes="std std-ref">Node._shortcut_input</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node-private-method-unhandled-key-input"><inline classes="std std-ref">Node._unhandled_key_input</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_node#class-node-private-method-unhandled-input"><inline classes="std std-ref">Node._unhandled_input</inline></reference></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果某个方法使用 <reference internal="True" refid="class-viewport-method-set-input-as-handled"><inline classes="std std-ref">set_input_as_handled</inline></reference> 将输入标记为已处理，则列表中的后续方法均不会被调用。</paragraph>
            <paragraph>如果上述方法均未处理事件，并且 <reference internal="True" refid="class-viewport-property-physics-object-picking"><inline classes="std std-ref">physics_object_picking</inline></reference> 为 <literal>true</literal>，则该事件将用于物理对象的拾取。</paragraph>
            <paragraph><strong>注意：</strong>这个方法不会将输入事件传播至嵌入的 <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 和 <reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-set-canvas-cull-mask-bit"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-set-canvas-cull-mask-bit" names="class_viewport_method_set_canvas_cull_mask_bit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_canvas_cull_mask_bit</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-viewport-method-set-canvas-cull-mask-bit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置或清除碰撞掩码上的比特位。可以简化 <strong>Viewport</strong> 层的编辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-set-input-as-handled"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-set-input-as-handled" names="class_viewport_method_set_input_as_handled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_as_handled</strong>() <reference internal="True" refid="class-viewport-method-set-input-as-handled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>让输入停止继续沿着 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 向下传播。</paragraph>
            <paragraph><strong>注意：</strong>不会影响 <reference internal="True" refuri="class_input#class-input"><inline classes="std std-ref">Input</inline></reference> 中的方法，只会影响事件的传播。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-set-positional-shadow-atlas-quadrant-subdiv"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-set-positional-shadow-atlas-quadrant-subdiv" names="class_viewport_method_set_positional_shadow_atlas_quadrant_subdiv"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_positional_shadow_atlas_quadrant_subdiv</strong>(quadrant: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, subdiv: <reference internal="True" refid="enum-viewport-positionalshadowatlasquadrantsubdiv"><inline classes="std std-ref">PositionalShadowAtlasQuadrantSubdiv</inline></reference>) <reference internal="True" refid="class-viewport-method-set-positional-shadow-atlas-quadrant-subdiv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置在指定象限内使用的细分数。较多的细分数可以让你在场景中一次拥有更多的阴影，但是会降低阴影的质量。一个好的做法是让象限具有不同数量的细分，并尽可能地减少细分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-update-mouse-cursor-state"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-update-mouse-cursor-state" names="class_viewport_method_update_mouse_cursor_state"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update_mouse_cursor_state</strong>() <reference internal="True" refid="class-viewport-method-update-mouse-cursor-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据当前鼠标光标的位置强制立即更新显示。包括更新鼠标光标的形状以及发送必要的 <reference internal="True" refuri="class_control#class-control-signal-mouse-entered"><inline classes="std std-ref">Control.mouse_entered</inline></reference>、<reference internal="True" refuri="class_collisionobject2d#class-collisionobject2d-signal-mouse-entered"><inline classes="std std-ref">CollisionObject2D.mouse_entered</inline></reference>、<reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d-signal-mouse-entered"><inline classes="std std-ref">CollisionObject3D.mouse_entered</inline></reference>、<reference internal="True" refuri="class_window#class-window-signal-mouse-entered"><inline classes="std std-ref">Window.mouse_entered</inline></reference> 等信号，以及这些信号对应的 <literal>mouse_exited</literal> 版本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-viewport-method-warp-mouse"></target>
            <paragraph classes="classref-method" ids="class-viewport-method-warp-mouse" names="class_viewport_method_warp_mouse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>warp_mouse</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-viewport-method-warp-mouse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用该 <strong>Viewport</strong> 的坐标系，将鼠标指针移动到该 <strong>Viewport</strong> 中的指定位置。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-viewport-method-warp-mouse"><inline classes="std std-ref">warp_mouse</inline></reference> 仅支持 Windows、macOS 和 Linux。它对 Android、iOS 和 Web 没有影响。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
