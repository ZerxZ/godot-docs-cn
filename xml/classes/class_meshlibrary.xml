<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_meshlibrary.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/MeshLibrary.xml.</comment>
    <target refid="class-meshlibrary"></target>
    <section ids="meshlibrary class-meshlibrary" names="meshlibrary class_meshlibrary">
        <title>MeshLibrary</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>网格库。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>网格库包含一个 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源列表，每个资源都有一个名称和 ID。每个项目还可以包括碰撞和导航形状。这个资源在 <reference internal="True" refuri="class_gridmap#class-gridmap"><inline classes="std std-ref">GridMap</inline></reference> 中使用。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="3D 动力学角色演示" refuri="https://godotengine.org/asset-library/asset/2739">3D 动力学角色演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2748">3D 平台跳跃演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="195"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-create-item"><inline classes="std std-ref">create_item</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-find-item-by-name"><inline classes="std std-ref">find_item_by_name</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-list"><inline classes="std std-ref">get_item_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-mesh"><inline classes="std std-ref">get_item_mesh</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-mesh-transform"><inline classes="std std-ref">get_item_mesh_transform</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-name"><inline classes="std std-ref">get_item_name</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-navigation-layers"><inline classes="std std-ref">get_item_navigation_layers</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-navigation-mesh"><inline classes="std std-ref">get_item_navigation_mesh</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-navigation-mesh-transform"><inline classes="std std-ref">get_item_navigation_mesh_transform</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-preview"><inline classes="std std-ref">get_item_preview</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-item-shapes"><inline classes="std std-ref">get_item_shapes</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-get-last-unused-item-id"><inline classes="std std-ref">get_last_unused_item_id</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-remove-item"><inline classes="std std-ref">remove_item</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-mesh"><inline classes="std std-ref">set_item_mesh</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mesh: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-mesh-transform"><inline classes="std std-ref">set_item_mesh_transform</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mesh_transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-name"><inline classes="std std-ref">set_item_name</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-navigation-layers"><inline classes="std std-ref">set_item_navigation_layers</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, navigation_layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-navigation-mesh"><inline classes="std std-ref">set_item_navigation_mesh</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-navigation-mesh-transform"><inline classes="std std-ref">set_item_navigation_mesh_transform</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, navigation_mesh: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-preview"><inline classes="std std-ref">set_item_preview</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshlibrary-method-set-item-shapes"><inline classes="std std-ref">set_item_shapes</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shapes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-meshlibrary-method-clear"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-clear" names="class_meshlibrary_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-meshlibrary-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除库。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-create-item"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-create-item" names="class_meshlibrary_method_create_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_item</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-create-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 ID 在库中创建一个新项。</paragraph>
            <paragraph>你可以从 <reference internal="True" refid="class-meshlibrary-method-get-last-unused-item-id"><inline classes="std std-ref">get_last_unused_item_id</inline></reference> 获取一个未使用的 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-find-item-by-name"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-find-item-by-name" names="class_meshlibrary_method_find_item_by_name"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find_item_by_name</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-find-item-by-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定名称的第一个项目，如果未找到任何项目，则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-list"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-list" names="class_meshlibrary_method_get_item_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_item_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回正在使用的项目 ID 列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-mesh"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-mesh" names="class_meshlibrary_method_get_item_mesh"><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>get_item_mesh</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该项目的网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-mesh-transform"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-mesh-transform" names="class_meshlibrary_method_get_item_mesh_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_item_mesh_transform</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-mesh-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回应用到项目网格的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-name"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-name" names="class_meshlibrary_method_get_item_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_item_name</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该项的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-navigation-layers"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-navigation-layers" names="class_meshlibrary_method_get_item_navigation_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_navigation_layers</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-navigation-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该项的导航层位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-navigation-mesh"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-navigation-mesh" names="class_meshlibrary_method_get_item_navigation_mesh"><reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> <strong>get_item_navigation_mesh</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-navigation-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该项的导航网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-navigation-mesh-transform"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-navigation-mesh-transform" names="class_meshlibrary_method_get_item_navigation_mesh_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_item_navigation_mesh_transform</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-navigation-mesh-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回应用于该项导航网格的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-preview"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-preview" names="class_meshlibrary_method_get_item_preview"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_item_preview</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-preview"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在编辑器中运行时，返回生成的项目预览（等轴透视中的 3D 渲染）。在一个运行的项目中使用时，返回手动定义的项目预览，该项目预览可以使用 <reference internal="True" refid="class-meshlibrary-method-set-item-preview"><inline classes="std std-ref">set_item_preview</inline></reference> 设置。如果在一个运行的项目中，没有手动设置预览，则返回一个空的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-item-shapes"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-item-shapes" names="class_meshlibrary_method_get_item_shapes"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_item_shapes</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-item-shapes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某个项目的碰撞形状。</paragraph>
            <paragraph>该数组由每个 <reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference> 后跟其 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 组成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-get-last-unused-item-id"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-get-last-unused-item-id" names="class_meshlibrary_method_get_last_unused_item_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_last_unused_item_id</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshlibrary-method-get-last-unused-item-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取新项未使用的 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-remove-item"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-remove-item" names="class_meshlibrary_method_remove_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_item</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-remove-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-mesh"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-mesh" names="class_meshlibrary_method_set_item_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_mesh</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mesh: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该项的网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-mesh-transform"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-mesh-transform" names="class_meshlibrary_method_set_item_mesh_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_mesh_transform</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mesh_transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-mesh-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置要应用到项目网格的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-name"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-name" names="class_meshlibrary_method_set_item_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_name</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该项的名称。</paragraph>
            <paragraph>这个名称会显示在编辑器中。稍后还可以使用 <reference internal="True" refid="class-meshlibrary-method-find-item-by-name"><inline classes="std std-ref">find_item_by_name</inline></reference> 来查找该项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-navigation-layers"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-navigation-layers" names="class_meshlibrary_method_set_item_navigation_layers"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_navigation_layers</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, navigation_layers: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-navigation-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该项的导航层位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-navigation-mesh"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-navigation-mesh" names="class_meshlibrary_method_set_item_navigation_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_navigation_mesh</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, navigation_mesh: <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-navigation-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该项的导航网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-navigation-mesh-transform"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-navigation-mesh-transform" names="class_meshlibrary_method_set_item_navigation_mesh_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_navigation_mesh_transform</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, navigation_mesh: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-navigation-mesh-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应用于该项的导航网格的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-preview"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-preview" names="class_meshlibrary_method_set_item_preview"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_preview</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-preview"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在编辑器中设置要用作该项预览图标的纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshlibrary-method-set-item-shapes"></target>
            <paragraph classes="classref-method" ids="class-meshlibrary-method-set-item-shapes" names="class_meshlibrary_method_set_item_shapes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_shapes</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, shapes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-meshlibrary-method-set-item-shapes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置某个项目的碰撞形状。</paragraph>
            <paragraph>该数组应由 <reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference> 对象组成，每个对象后跟一个将应用于它的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>。对于不应具有变换的形状，请使用 <reference internal="True" refuri="class_transform3d#class-transform3d-constant-identity"><inline classes="std std-ref">Transform3D.IDENTITY</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
