<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_webrtcmultiplayerpeer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/webrtc/doc_classes/WebRTCMultiplayerPeer.xml.</comment>
    <target refid="class-webrtcmultiplayerpeer"></target>
    <section ids="webrtcmultiplayerpeer class-webrtcmultiplayerpeer" names="webrtcmultiplayerpeer class_webrtcmultiplayerpeer">
        <title>WebRTCMultiplayerPeer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>简单的接口，用于创建由 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection"><inline classes="std std-ref">WebRTCPeerConnection</inline></reference> 组成的点对点网状网络，与 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 兼容。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类构建了一个完整的 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection"><inline classes="std std-ref">WebRTCPeerConnection</inline></reference> 网状结构（每个对等体有一个连接），可用作 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference>。</paragraph>
            <paragraph>可以通过 <reference internal="True" refid="class-webrtcmultiplayerpeer-method-add-peer"><inline classes="std std-ref">add_peer</inline></reference> 添加每个 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection"><inline classes="std std-ref">WebRTCPeerConnection</inline></reference>，或通过 <reference internal="True" refid="class-webrtcmultiplayerpeer-method-remove-peer"><inline classes="std std-ref">remove_peer</inline></reference> 移除它们。必须在 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection-constant-state-new"><inline classes="std std-ref">WebRTCPeerConnection.STATE_NEW</inline></reference> 状态下添加对等体，以允许它创建适当的通道。这个类不会创建提交或设置描述，它只会轮询它们，并通知连接和断开连接。</paragraph>
            <paragraph>当通过 <reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-client"><inline classes="std std-ref">create_client</inline></reference> 或 <reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-server"><inline classes="std std-ref">create_server</inline></reference> 创建对等体时， <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-is-server-relay-supported"><inline classes="std std-ref">MultiplayerPeer.is_server_relay_supported</inline></reference> 方法将返回 <literal>true</literal>，在 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 实现支持时启用对等体交换和数据包中继。</paragraph>
            <paragraph><strong>注意：</strong>导出到 Android 时，在导出项目或使用一键部署前，请确保在 Android 导出预设中启用了 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信都将被 Android 阻止。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="214"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-add-peer"><inline classes="std std-ref">add_peer</inline></reference>(peer: <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection"><inline classes="std std-ref">WebRTCPeerConnection</inline></reference>, peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, unreliable_lifetime: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-client"><inline classes="std std-ref">create_client</inline></reference>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channels_config: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-mesh"><inline classes="std std-ref">create_mesh</inline></reference>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channels_config: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-server"><inline classes="std std-ref">create_server</inline></reference>(channels_config: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-get-peer"><inline classes="std std-ref">get_peer</inline></reference>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-get-peers"><inline classes="std std-ref">get_peers</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-has-peer"><inline classes="std std-ref">has_peer</inline></reference>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcmultiplayerpeer-method-remove-peer"><inline classes="std std-ref">remove_peer</inline></reference>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-webrtcmultiplayerpeer-method-add-peer"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-add-peer" names="class_webrtcmultiplayerpeer_method_add_peer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>add_peer</strong>(peer: <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection"><inline classes="std std-ref">WebRTCPeerConnection</inline></reference>, peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, unreliable_lifetime: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1) <reference internal="True" refid="class-webrtcmultiplayerpeer-method-add-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以给定的 <literal>peer_id</literal> 添加一个新的对等体到网状结构。该 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection"><inline classes="std std-ref">WebRTCPeerConnection</inline></reference> 必须处于 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection-constant-state-new"><inline classes="std std-ref">WebRTCPeerConnection.STATE_NEW</inline></reference> 状态。</paragraph>
            <paragraph>将为可靠的、不可靠的和有序的传输创建三个通道。在创建不可靠和有序通道时，<literal>unreliable_lifetime</literal> 的值将被传递给 <literal>"maxPacketLifetime"</literal>选项（见 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection-method-create-data-channel"><inline classes="std std-ref">WebRTCPeerConnection.create_data_channel</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcmultiplayerpeer-method-create-client"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-create-client" names="class_webrtcmultiplayerpeer_method_create_client"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_client</strong>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channels_config: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = []) <reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-client"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将多人游戏对等体初始化为客户端，对等体 ID 为 <literal>peer_id</literal>（必须在 2 和 2147483647 之间）。在这种模式下，你应当只调用 <reference internal="True" refid="class-webrtcmultiplayerpeer-method-add-peer"><inline classes="std std-ref">add_peer</inline></reference> 一次，使用 <literal>1</literal> 作为 <literal>peer_id</literal>。这种模式会启用 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-is-server-relay-supported"><inline classes="std std-ref">MultiplayerPeer.is_server_relay_supported</inline></reference>，允许上层 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 执行对等体交换和数据包接力。</paragraph>
            <paragraph>你也可以指定 <literal>channels_config</literal> 数组，数组中的元素为 <reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference>，会用于创建额外的通道（WebRTC 的每个通道仅支持一种传输模式）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcmultiplayerpeer-method-create-mesh"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-create-mesh" names="class_webrtcmultiplayerpeer_method_create_mesh"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_mesh</strong>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channels_config: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = []) <reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将多人游戏对等体初始化为网状（即所有对等体都互相连接），对等体 ID 为 <literal>peer_id</literal>（必须在 1 和 2147483647 之间）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcmultiplayerpeer-method-create-server"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-create-server" names="class_webrtcmultiplayerpeer_method_create_server"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_server</strong>(channels_config: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = []) <reference internal="True" refid="class-webrtcmultiplayerpeer-method-create-server"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将多人游戏对等体作为服务器进行初始化（唯一 ID 为 <literal>1</literal>）。这种模式会启用 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-is-server-relay-supported"><inline classes="std std-ref">MultiplayerPeer.is_server_relay_supported</inline></reference>，允许上层 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 执行对等体交换和数据包接力。</paragraph>
            <paragraph>你也可以指定 <literal>channels_config</literal> 数组，数组中的元素为 <reference internal="True" refuri="class_multiplayerpeer#enum-multiplayerpeer-transfermode"><inline classes="std std-ref">TransferMode</inline></reference>，会用于创建额外的通道（WebRTC 的每个通道仅支持一种传输模式）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcmultiplayerpeer-method-get-peer"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-get-peer" names="class_webrtcmultiplayerpeer_method_get_peer"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_peer</strong>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webrtcmultiplayerpeer-method-get-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 ID 为 <literal>peer_id</literal> 的对等体的字典表示，其中包含三个字段。<literal>"connection"</literal> 包含与这个对等体的 <reference internal="True" refuri="class_webrtcpeerconnection#class-webrtcpeerconnection"><inline classes="std std-ref">WebRTCPeerConnection</inline></reference>，<literal>"channels"</literal> 是三个 <reference internal="True" refuri="class_webrtcdatachannel#class-webrtcdatachannel"><inline classes="std std-ref">WebRTCDataChannel</inline></reference> 的数组，而 <literal>"connected"</literal> 则是代表对等体目前是否已连接的布尔值（三个通道均已开放）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcmultiplayerpeer-method-get-peers"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-get-peers" names="class_webrtcmultiplayerpeer_method_get_peers"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_peers</strong>() <reference internal="True" refid="class-webrtcmultiplayerpeer-method-get-peers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个字典，其键是对等体的 id，其值是对等体的表示，如 <reference internal="True" refid="class-webrtcmultiplayerpeer-method-get-peer"><inline classes="std std-ref">get_peer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcmultiplayerpeer-method-has-peer"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-has-peer" names="class_webrtcmultiplayerpeer_method_has_peer"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_peer</strong>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webrtcmultiplayerpeer-method-has-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的 <literal>peer_id</literal> 在对等体映射中，则返回 <literal>true</literal>（尽管它可能没有连接）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcmultiplayerpeer-method-remove-peer"></target>
            <paragraph classes="classref-method" ids="class-webrtcmultiplayerpeer-method-remove-peer" names="class_webrtcmultiplayerpeer_method_remove_peer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_peer</strong>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-webrtcmultiplayerpeer-method-remove-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从 mesh 结构中移除具有给定 <literal>peer_id</literal> 的对等体。如果该对等体已连接，并且为它发出过 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-signal-peer-connected"><inline classes="std std-ref">MultiplayerPeer.peer_connected</inline></reference>，那么 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-signal-peer-disconnected"><inline classes="std std-ref">MultiplayerPeer.peer_disconnected</inline></reference> 也将被发出。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
