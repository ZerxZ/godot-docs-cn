<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodevectorfunc.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/VisualShaderNodeVectorFunc.xml.</comment>
    <target refid="class-visualshadernodevectorfunc"></target>
    <section ids="visualshadernodevectorfunc class-visualshadernodevectorfunc" names="visualshadernodevectorfunc class_visualshadernodevectorfunc">
        <title>VisualShaderNodeVectorFunc</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernodevectorbase#class-visualshadernodevectorbase"><inline classes="std std-ref">VisualShaderNodeVectorBase</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在可视化着色器图中使用的向量函数。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>可视化着色器节点，能够使用向量执行不同的函数。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="69"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodevectorfunc-property-function"><inline classes="std std-ref">function</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshadernodevectorfunc-function"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodevectorfunc-function" names="enum_visualshadernodevectorfunc_function">enum <strong>Function</strong>:</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-normalize"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-normalize" names="class_visualshadernodevectorfunc_constant_func_normalize"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_NORMALIZE</strong> = <literal>0</literal></paragraph>
            <paragraph>将向量归一化，使其长度为<literal>1</literal>，但指向相同的方向。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-saturate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-saturate" names="class_visualshadernodevectorfunc_constant_func_saturate"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_SATURATE</strong> = <literal>1</literal></paragraph>
            <paragraph>限制<literal>0.0</literal>和<literal>1.0</literal>之间的值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-negate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-negate" names="class_visualshadernodevectorfunc_constant_func_negate"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_NEGATE</strong> = <literal>2</literal></paragraph>
            <paragraph>返回参数的相反值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-reciprocal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-reciprocal" names="class_visualshadernodevectorfunc_constant_func_reciprocal"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_RECIPROCAL</strong> = <literal>3</literal></paragraph>
            <paragraph>返回 <literal>1/vector</literal>。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-abs"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-abs" names="class_visualshadernodevectorfunc_constant_func_abs"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ABS</strong> = <literal>4</literal></paragraph>
            <paragraph>返回参数的绝对值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-acos"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-acos" names="class_visualshadernodevectorfunc_constant_func_acos"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ACOS</strong> = <literal>5</literal></paragraph>
            <paragraph>返回参数的反余弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-acosh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-acosh" names="class_visualshadernodevectorfunc_constant_func_acosh"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ACOSH</strong> = <literal>6</literal></paragraph>
            <paragraph>返回参数的反双曲余弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-asin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-asin" names="class_visualshadernodevectorfunc_constant_func_asin"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ASIN</strong> = <literal>7</literal></paragraph>
            <paragraph>返回参数的反正弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-asinh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-asinh" names="class_visualshadernodevectorfunc_constant_func_asinh"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ASINH</strong> = <literal>8</literal></paragraph>
            <paragraph>返回参数的反双曲正弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-atan"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-atan" names="class_visualshadernodevectorfunc_constant_func_atan"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ATAN</strong> = <literal>9</literal></paragraph>
            <paragraph>返回参数的反正切值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-atanh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-atanh" names="class_visualshadernodevectorfunc_constant_func_atanh"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ATANH</strong> = <literal>10</literal></paragraph>
            <paragraph>返回参数的反双曲正切值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-ceil"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-ceil" names="class_visualshadernodevectorfunc_constant_func_ceil"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_CEIL</strong> = <literal>11</literal></paragraph>
            <paragraph>查找最接近的大于或等于参数的整数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-cos"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-cos" names="class_visualshadernodevectorfunc_constant_func_cos"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_COS</strong> = <literal>12</literal></paragraph>
            <paragraph>返回参数的余弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-cosh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-cosh" names="class_visualshadernodevectorfunc_constant_func_cosh"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_COSH</strong> = <literal>13</literal></paragraph>
            <paragraph>返回参数的双曲余弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-degrees"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-degrees" names="class_visualshadernodevectorfunc_constant_func_degrees"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_DEGREES</strong> = <literal>14</literal></paragraph>
            <paragraph>将以弧度为单位的量转换为度。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-exp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-exp" names="class_visualshadernodevectorfunc_constant_func_exp"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_EXP</strong> = <literal>15</literal></paragraph>
            <paragraph>以 e 为底的指数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-exp2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-exp2" names="class_visualshadernodevectorfunc_constant_func_exp2"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_EXP2</strong> = <literal>16</literal></paragraph>
            <paragraph>以 2 为底的指数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-floor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-floor" names="class_visualshadernodevectorfunc_constant_func_floor"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_FLOOR</strong> = <literal>17</literal></paragraph>
            <paragraph>查找小于或等于参数的最近整数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-fract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-fract" names="class_visualshadernodevectorfunc_constant_func_fract"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_FRACT</strong> = <literal>18</literal></paragraph>
            <paragraph>计算参数的小数部分。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-inverse-sqrt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-inverse-sqrt" names="class_visualshadernodevectorfunc_constant_func_inverse_sqrt"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_INVERSE_SQRT</strong> = <literal>19</literal></paragraph>
            <paragraph>返回参数的平方根的倒数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-log"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-log" names="class_visualshadernodevectorfunc_constant_func_log"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_LOG</strong> = <literal>20</literal></paragraph>
            <paragraph>自然对数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-log2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-log2" names="class_visualshadernodevectorfunc_constant_func_log2"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_LOG2</strong> = <literal>21</literal></paragraph>
            <paragraph>以 2 为底的对数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-radians"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-radians" names="class_visualshadernodevectorfunc_constant_func_radians"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_RADIANS</strong> = <literal>22</literal></paragraph>
            <paragraph>将度数转换为弧度。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-round"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-round" names="class_visualshadernodevectorfunc_constant_func_round"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ROUND</strong> = <literal>23</literal></paragraph>
            <paragraph>查找参数最近的整数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-roundeven"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-roundeven" names="class_visualshadernodevectorfunc_constant_func_roundeven"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ROUNDEVEN</strong> = <literal>24</literal></paragraph>
            <paragraph>查找参数最近的偶数。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-sign"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-sign" names="class_visualshadernodevectorfunc_constant_func_sign"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_SIGN</strong> = <literal>25</literal></paragraph>
            <paragraph>提取参数的符号，即如果参数是负的，返回 <literal>-1</literal>，如果是正的，返回 <literal>1</literal>，否则返回 <literal>0</literal>。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-sin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-sin" names="class_visualshadernodevectorfunc_constant_func_sin"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_SIN</strong> = <literal>26</literal></paragraph>
            <paragraph>返回参数的正弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-sinh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-sinh" names="class_visualshadernodevectorfunc_constant_func_sinh"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_SINH</strong> = <literal>27</literal></paragraph>
            <paragraph>返回参数的双曲正弦值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-sqrt"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-sqrt" names="class_visualshadernodevectorfunc_constant_func_sqrt"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_SQRT</strong> = <literal>28</literal></paragraph>
            <paragraph>返回参数的平方根。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-tan"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-tan" names="class_visualshadernodevectorfunc_constant_func_tan"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_TAN</strong> = <literal>29</literal></paragraph>
            <paragraph>返回参数的正切值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-tanh"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-tanh" names="class_visualshadernodevectorfunc_constant_func_tanh"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_TANH</strong> = <literal>30</literal></paragraph>
            <paragraph>返回参数的双曲正切值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-trunc"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-trunc" names="class_visualshadernodevectorfunc_constant_func_trunc"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_TRUNC</strong> = <literal>31</literal></paragraph>
            <paragraph>返回一个等于与参数最接近的整数的值，该值的绝对值不大于参数的绝对值。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-oneminus"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-oneminus" names="class_visualshadernodevectorfunc_constant_func_oneminus"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_ONEMINUS</strong> = <literal>32</literal></paragraph>
            <paragraph>返回 <literal>1.0 - vector</literal>。</paragraph>
            <target refid="class-visualshadernodevectorfunc-constant-func-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodevectorfunc-constant-func-max" names="class_visualshadernodevectorfunc_constant_func_max"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_MAX</strong> = <literal>33</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernodevectorfunc-property-function"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodevectorfunc-property-function" names="class_visualshadernodevectorfunc_property_function"><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>function</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_function</strong> <strong>(</strong> <reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> <strong>get_function</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要执行的函数。参阅 <reference internal="True" refid="enum-visualshadernodevectorfunc-function"><inline classes="std std-ref">Function</inline></reference> 的选项。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
