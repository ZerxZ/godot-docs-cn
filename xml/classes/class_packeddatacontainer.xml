<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_packeddatacontainer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/PackedDataContainer.xml.</comment>
    <target refid="class-packeddatacontainer"></target>
    <section ids="packeddatacontainer class-packeddatacontainer" names="packeddatacontainer class_packeddatacontainer">
        <title>PackedDataContainer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>将 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 或 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 进行高效打包和序列化。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>PackedDataContainer</strong> 可以高效地保存未指定类型的容器中的数据。数据会以原始字节的形式打包，能够保存到文件中。只有 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 和 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 能够这样存储。</paragraph>
            <paragraph>你可以通过遍历容器来获取数据，效果和遍历被打包的数据一样。如果打包容器为 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，则获取的是键名（仅 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>/<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var data = { "key": "value", "another_key": 123, "lock": Vector2() }
var packed = PackedDataContainer.new()
packed.pack(data)
ResourceSaver.save(packed, "packed_data.res")</literal_block>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var container = load("packed_data.res")
for key in container:
    prints(key, container[key])

# 输出：
# key value
# lock (0, 0)
# another_key 123</literal_block>
            <paragraph>内嵌容器会递归打包。遍历时返回的是 <reference internal="True" refuri="class_packeddatacontainerref#class-packeddatacontainerref"><inline classes="std std-ref">PackedDataContainerRef</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="97"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packeddatacontainer-method-pack"><inline classes="std std-ref">pack</inline></reference>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packeddatacontainer-method-size"><inline classes="std std-ref">size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-packeddatacontainer-method-pack"></target>
            <paragraph classes="classref-method" ids="class-packeddatacontainer-method-pack" names="class_packeddatacontainer_method_pack"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>pack</strong>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-packeddatacontainer-method-pack"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的容器打包为二进制表示。<literal>value</literal> 必须为 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 或 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，其他类型会导致无效数据错误。</paragraph>
            <paragraph><strong>注意：</strong>后续再次调用该方法会覆盖已有数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packeddatacontainer-method-size"></target>
            <paragraph classes="classref-method" ids="class-packeddatacontainer-method-size" names="class_packeddatacontainer_method_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packeddatacontainer-method-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回打包后容器的大小（见 <reference internal="True" refuri="class_array#class-array-method-size"><inline classes="std std-ref">Array.size</inline></reference> 和 <reference internal="True" refuri="class_dictionary#class-dictionary-method-size"><inline classes="std std-ref">Dictionary.size</inline></reference>）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
