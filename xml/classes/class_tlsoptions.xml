<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_tlsoptions.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TLSOptions.xml.</comment>
    <target refid="class-tlsoptions"></target>
    <section ids="tlsoptions class-tlsoptions" names="tlsoptions class_tlsoptions">
        <title>TLSOptions</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>客户端与服务器的 TLS 配置。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>TLSOptions 是对 <reference internal="True" refuri="class_streampeertls#class-streampeertls"><inline classes="std std-ref">StreamPeerTLS</inline></reference> 和 <reference internal="True" refuri="class_packetpeerdtls#class-packetpeerdtls"><inline classes="std std-ref">PacketPeerDTLS</inline></reference> 类中配置选项的抽象。</paragraph>
            <paragraph>无法直接实例化这个类的对象，应改用静态方法 <reference internal="True" refid="class-tlsoptions-method-client"><inline classes="std std-ref">client</inline></reference>、<reference internal="True" refid="class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">client_unsafe</inline></reference> 或 <reference internal="True" refid="class-tlsoptions-method-server"><inline classes="std std-ref">server</inline></reference>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 创建 TLS 客户端配置，使用自定义 CA 信任链。
var client_trusted_cas = load("res://my_trusted_cas.crt")
var client_tls_options = TLSOptions.client(client_trusted_cas)

# 创建 TLS 服务器配置。
var server_certs = load("res://my_server_cas.crt")
var server_key = load("res://my_server_key.key")
var server_tls_options = TLSOptions.server(server_key, server_certs)</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="189"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-client"><inline classes="std std-ref">client</inline></reference>(trusted_chain: <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> = null, common_name_override: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">client_unsafe</inline></reference>(trusted_chain: <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> = null) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-get-common-name-override"><inline classes="std std-ref">get_common_name_override</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-get-own-certificate"><inline classes="std std-ref">get_own_certificate</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-get-private-key"><inline classes="std std-ref">get_private_key</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-get-trusted-ca-chain"><inline classes="std std-ref">get_trusted_ca_chain</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-is-server"><inline classes="std std-ref">is_server</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-is-unsafe-client"><inline classes="std std-ref">is_unsafe_client</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tlsoptions-method-server"><inline classes="std std-ref">server</inline></reference>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, certificate: <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-tlsoptions-method-client"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-client" names="class_tlsoptions_method_client"><reference internal="True" refid="class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> <strong>client</strong>(trusted_chain: <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> = null, common_name_override: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-tlsoptions-method-client"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建 TLS 客户端配置，验证证书及其通用名称（完整域名）。</paragraph>
            <paragraph>你可以指定自定义的证书颁发机构信任链 <literal>trusted_chain</literal>（如果为 <literal>null</literal> 则使用默认 CA 列表）。如果你希望证书拥有服务器 FQDN 之外的通用名称，还可以提供通用名称覆盖 <literal>common_name_override</literal>。</paragraph>
            <paragraph><strong>注意：</strong>在 Web 平台上，TLS 验证始终强制使用 Web 浏览器的 CA 列表。这是一种安全特性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-client-unsafe"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-client-unsafe" names="class_tlsoptions_method_client_unsafe"><reference internal="True" refid="class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> <strong>client_unsafe</strong>(trusted_chain: <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> = null) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建<strong>不安全</strong>的 TLS 客户端配置，证书验证为可选项。你可以选择提供有效的信任链 <literal>trusted_chain</literal>，但永远不会对证书的通用名称进行检查。这种配置<strong>不推荐</strong>用于测试之外的用途。</paragraph>
            <paragraph><strong>注意：</strong>在 Web 平台上，TLS 验证始终强制使用 Web 浏览器的 CA 列表。这是一种安全特性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-get-common-name-override"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-get-common-name-override" names="class_tlsoptions_method_get_common_name_override"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_common_name_override</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tlsoptions-method-get-common-name-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the common name (domain name) override specified when creating with <reference internal="True" refid="class-tlsoptions-method-client"><inline classes="std std-ref">client</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-get-own-certificate"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-get-own-certificate" names="class_tlsoptions_method_get_own_certificate"><reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> <strong>get_own_certificate</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tlsoptions-method-get-own-certificate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> specified when creating with <reference internal="True" refid="class-tlsoptions-method-server"><inline classes="std std-ref">server</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-get-private-key"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-get-private-key" names="class_tlsoptions_method_get_private_key"><reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference> <strong>get_private_key</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tlsoptions-method-get-private-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference> specified when creating with <reference internal="True" refid="class-tlsoptions-method-server"><inline classes="std std-ref">server</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-get-trusted-ca-chain"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-get-trusted-ca-chain" names="class_tlsoptions_method_get_trusted_ca_chain"><reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> <strong>get_trusted_ca_chain</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tlsoptions-method-get-trusted-ca-chain"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the CA <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference> chain specified when creating with <reference internal="True" refid="class-tlsoptions-method-client"><inline classes="std std-ref">client</inline></reference> or <reference internal="True" refid="class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">client_unsafe</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-is-server"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-is-server" names="class_tlsoptions_method_is_server"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_server</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tlsoptions-method-is-server"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if created with <reference internal="True" refid="class-tlsoptions-method-server"><inline classes="std std-ref">server</inline></reference>, <literal>false</literal> otherwise.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-is-unsafe-client"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-is-unsafe-client" names="class_tlsoptions_method_is_unsafe_client"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_unsafe_client</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tlsoptions-method-is-unsafe-client"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if created with <reference internal="True" refid="class-tlsoptions-method-client-unsafe"><inline classes="std std-ref">client_unsafe</inline></reference>, <literal>false</literal> otherwise.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tlsoptions-method-server"></target>
            <paragraph classes="classref-method" ids="class-tlsoptions-method-server" names="class_tlsoptions_method_server"><reference internal="True" refid="class-tlsoptions"><inline classes="std std-ref">TLSOptions</inline></reference> <strong>server</strong>(key: <reference internal="True" refuri="class_cryptokey#class-cryptokey"><inline classes="std std-ref">CryptoKey</inline></reference>, certificate: <reference internal="True" refuri="class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-tlsoptions-method-server"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用提供的密钥 <literal>key</literal> 和证书 <literal>certificate</literal> 创建 TLS 服务器配置。</paragraph>
            <paragraph><strong>注意：</strong><literal>certificate</literal> 中应当包含签名 CA 的完整证书链（可以使用通用文本编辑器连接证书文件）。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
