<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_ip.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="dns" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/IP.xml.</comment>
    <target refid="class-ip"></target>
    <section ids="ip class-ip" names="ip class_ip">
        <title>IP</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>网际协议（IP）支持函数，如 DNS 解析。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>IP 包含网际协议（IP）的支持函数。TCP/IP 的支持在其他类中（请参阅 <reference internal="True" refuri="class_streampeertcp#class-streampeertcp"><inline classes="std std-ref">StreamPeerTCP</inline></reference> 和 <reference internal="True" refuri="class_tcpserver#class-tcpserver"><inline classes="std std-ref">TCPServer</inline></reference>）。IP 提供 DNS 主机名解析支持，包括阻塞式和线程式。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="164"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-clear-cache"><inline classes="std std-ref">clear_cache</inline></reference>(hostname: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-erase-resolve-item"><inline classes="std std-ref">erase_resolve_item</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-get-local-addresses"><inline classes="std std-ref">get_local_addresses</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-get-local-interfaces"><inline classes="std std-ref">get_local_interfaces</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-get-resolve-item-address"><inline classes="std std-ref">get_resolve_item_address</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-get-resolve-item-addresses"><inline classes="std std-ref">get_resolve_item_addresses</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">ResolverStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-get-resolve-item-status"><inline classes="std std-ref">get_resolve_item_status</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-resolve-hostname"><inline classes="std std-ref">resolve_hostname</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ip_type: <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> = 3)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-resolve-hostname-addresses"><inline classes="std std-ref">resolve_hostname_addresses</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ip_type: <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> = 3)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-ip-method-resolve-hostname-queue-item"><inline classes="std std-ref">resolve_hostname_queue_item</inline></reference>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ip_type: <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> = 3)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-ip-resolverstatus"></target>
            <paragraph classes="classref-enumeration" ids="enum-ip-resolverstatus" names="enum_ip_resolverstatus">enum <strong>ResolverStatus</strong>: <reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-ip-constant-resolver-status-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-resolver-status-none" names="class_ip_constant_resolver_status_none"><reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">ResolverStatus</inline></reference> <strong>RESOLVER_STATUS_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>DNS 主机名解析器状态：无状态。</paragraph>
            <target refid="class-ip-constant-resolver-status-waiting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-resolver-status-waiting" names="class_ip_constant_resolver_status_waiting"><reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">ResolverStatus</inline></reference> <strong>RESOLVER_STATUS_WAITING</strong> = <literal>1</literal></paragraph>
            <paragraph>DNS 主机名解析器状态：正在等待。</paragraph>
            <target refid="class-ip-constant-resolver-status-done"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-resolver-status-done" names="class_ip_constant_resolver_status_done"><reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">ResolverStatus</inline></reference> <strong>RESOLVER_STATUS_DONE</strong> = <literal>2</literal></paragraph>
            <paragraph>DNS 主机名解析器状态：完成。</paragraph>
            <target refid="class-ip-constant-resolver-status-error"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-resolver-status-error" names="class_ip_constant_resolver_status_error"><reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">ResolverStatus</inline></reference> <strong>RESOLVER_STATUS_ERROR</strong> = <literal>3</literal></paragraph>
            <paragraph>DNS 主机名解析器状态：错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-ip-type"></target>
            <paragraph classes="classref-enumeration" ids="enum-ip-type" names="enum_ip_type">enum <strong>Type</strong>: <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-ip-constant-type-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-type-none" names="class_ip_constant_type_none"><reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>地址类型：无。</paragraph>
            <target refid="class-ip-constant-type-ipv4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-type-ipv4" names="class_ip_constant_type_ipv4"><reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_IPV4</strong> = <literal>1</literal></paragraph>
            <paragraph>地址类型：网际协议版本 4（IPv4）。</paragraph>
            <target refid="class-ip-constant-type-ipv6"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-type-ipv6" names="class_ip_constant_type_ipv6"><reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_IPV6</strong> = <literal>2</literal></paragraph>
            <paragraph>地址类型：网际协议版本 6（IPv6）。</paragraph>
            <target refid="class-ip-constant-type-any"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-ip-constant-type-any" names="class_ip_constant_type_any"><reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> <strong>TYPE_ANY</strong> = <literal>3</literal></paragraph>
            <paragraph>地址类型：任意。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="常量">
            <title>常量</title>
            <target refid="class-ip-constant-resolver-max-queries"></target>
            <paragraph classes="classref-constant" ids="class-ip-constant-resolver-max-queries" names="class_ip_constant_resolver_max_queries"><strong>RESOLVER_MAX_QUERIES</strong> = <literal>256</literal> <reference internal="True" refid="class-ip-constant-resolver-max-queries"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>允许的最大并发 DNS 解析器查询数量，如果超过，则返回 <reference internal="True" refid="class-ip-constant-resolver-invalid-id"><inline classes="std std-ref">RESOLVER_INVALID_ID</inline></reference>。</paragraph>
            <target refid="class-ip-constant-resolver-invalid-id"></target>
            <paragraph classes="classref-constant" ids="class-ip-constant-resolver-invalid-id" names="class_ip_constant_resolver_invalid_id"><strong>RESOLVER_INVALID_ID</strong> = <literal>-1</literal> <reference internal="True" refid="class-ip-constant-resolver-invalid-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>无效的 ID 常量。在超过 <reference internal="True" refid="class-ip-constant-resolver-max-queries"><inline classes="std std-ref">RESOLVER_MAX_QUERIES</inline></reference> 时返回。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-ip-method-clear-cache"></target>
            <paragraph classes="classref-method" ids="class-ip-method-clear-cache" names="class_ip_method_clear_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_cache</strong>(hostname: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-ip-method-clear-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有 <literal>hostname</literal> 主机名的缓存引用。如果没有给出 <literal>hostname</literal>，所有缓存的 IP 地址将被删除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-erase-resolve-item"></target>
            <paragraph classes="classref-method" ids="class-ip-method-erase-resolve-item" names="class_ip_method_erase_resolve_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>erase_resolve_item</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-ip-method-erase-resolve-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从队列中删除一个给定的项目 <literal>id</literal>。这应该被用来在队列完成后释放队列，以便进行更多的查询。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-get-local-addresses"></target>
            <paragraph classes="classref-method" ids="class-ip-method-get-local-addresses" names="class_ip_method_get_local_addresses"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_local_addresses</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-ip-method-get-local-addresses"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以数组形式返回所有用户的当前 IPv4 和 IPv6 地址。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-get-local-interfaces"></target>
            <paragraph classes="classref-method" ids="class-ip-method-get-local-interfaces" names="class_ip_method_get_local_interfaces"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_local_interfaces</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-ip-method-get-local-interfaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以数组形式返回所有网络适配器。</paragraph>
            <paragraph>每个适配器都是一个以下形式的字典：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
    "index":"1", # 接口索引。
    "name":"eth0", # 接口名称。
    "friendly":"Ethernet One", # 友好的名字（可能是空的）。
    "address":["192.168.1.101"], # 与此接口相关的 IP 地址数组。
}</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-get-resolve-item-address"></target>
            <paragraph classes="classref-method" ids="class-ip-method-get-resolve-item-address" names="class_ip_method_get_resolve_item_address"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_resolve_item_address</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-ip-method-get-resolve-item-address"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>给定队列 <literal>id</literal>，返回排队主机名的 IP 地址。出现错误或解析尚未发生时返回一个空字符串（见 <reference internal="True" refid="class-ip-method-get-resolve-item-status"><inline classes="std std-ref">get_resolve_item_status</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-get-resolve-item-addresses"></target>
            <paragraph classes="classref-method" ids="class-ip-method-get-resolve-item-addresses" names="class_ip_method_get_resolve_item_addresses"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_resolve_item_addresses</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-ip-method-get-resolve-item-addresses"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果发生错误或尚未发生解析，则返回已解析的地址或空数组（请参阅 <reference internal="True" refid="class-ip-method-get-resolve-item-status"><inline classes="std std-ref">get_resolve_item_status</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-get-resolve-item-status"></target>
            <paragraph classes="classref-method" ids="class-ip-method-get-resolve-item-status" names="class_ip_method_get_resolve_item_status"><reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">ResolverStatus</inline></reference> <strong>get_resolve_item_status</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-ip-method-get-resolve-item-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>给定队列 <literal>id</literal>，以 <reference internal="True" refid="enum-ip-resolverstatus"><inline classes="std std-ref">ResolverStatus</inline></reference> 常量的形式返回排队主机名的状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-resolve-hostname"></target>
            <paragraph classes="classref-method" ids="class-ip-method-resolve-hostname" names="class_ip_method_resolve_hostname"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>resolve_hostname</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ip_type: <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> = 3) <reference internal="True" refid="class-ip-method-resolve-hostname"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在解析时返回一个给定的主机名的 IPv4 或 IPv6 地址（阻塞类型方法）。返回的地址类型取决于作为 <literal>ip_type</literal> 的 <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-resolve-hostname-addresses"></target>
            <paragraph classes="classref-method" ids="class-ip-method-resolve-hostname-addresses" names="class_ip_method_resolve_hostname_addresses"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>resolve_hostname_addresses</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ip_type: <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> = 3) <reference internal="True" refid="class-ip-method-resolve-hostname-addresses"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以阻塞方式解析给定的主机名。地址作为 IPv4 或 IPv6 的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 数组返回，具体取决于 <literal>ip_type</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-ip-method-resolve-hostname-queue-item"></target>
            <paragraph classes="classref-method" ids="class-ip-method-resolve-hostname-queue-item" names="class_ip_method_resolve_hostname_queue_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>resolve_hostname_queue_item</strong>(host: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ip_type: <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> = 3) <reference internal="True" refid="class-ip-method-resolve-hostname-queue-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个队列项目，根据 <reference internal="True" refid="enum-ip-type"><inline classes="std std-ref">Type</inline></reference> 常量 <literal>ip_type</literal>，将主机名解析为 IPv4 或 IPv6 地址。如果成功，则返回队列 ID，否则返回 <reference internal="True" refid="class-ip-constant-resolver-invalid-id"><inline classes="std std-ref">RESOLVER_INVALID_ID</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
