<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_font.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Font.xml.</comment>
    <target refid="class-font"></target>
    <section ids="font class-font" names="font class_font">
        <title>Font</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_fontfile#class-fontfile"><inline classes="std std-ref">FontFile</inline></reference>, <reference internal="True" refuri="class_fontvariation#class-fontvariation"><inline classes="std std-ref">FontVariation</inline></reference>, <reference internal="True" refuri="class_systemfont#class-systemfont"><inline classes="std std-ref">SystemFont</inline></reference></paragraph>
        <paragraph>字体和字体变体的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>各种字体类型的抽象基类。提供了绘制文本以及内省字体字符的方法。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="8"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font"><inline classes="std std-ref">Font[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-property-fallbacks"><inline classes="std std-ref">fallbacks</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="777"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-draw-char"><inline classes="std std-ref">draw_char</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1) <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-draw-char-outline"><inline classes="std std-ref">draw_char_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size=-1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1) <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-draw-multiline-string"><inline classes="std std-ref">draw_multiline_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_lines=-1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; brk_flags=3, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-draw-multiline-string-outline"><inline classes="std std-ref">draw_multiline_string_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_lines=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size=1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; brk_flags=3, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-draw-string"><inline classes="std std-ref">draw_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-draw-string-outline"><inline classes="std std-ref">draw_string_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size=1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-find-variation"><inline classes="std std-ref">find_variation</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> variation_coordinates, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> face_index=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> strength=0.0, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform=Transform2D(1, 0, 0, 1, 0, 0), <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_top=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_bottom=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_space=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_glyph=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-ascent"><inline classes="std std-ref">get_ascent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-char-size"><inline classes="std std-ref">get_char_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-descent"><inline classes="std std-ref">get_descent</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-face-count"><inline classes="std std-ref">get_face_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-font-name"><inline classes="std std-ref">get_font_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-font-stretch"><inline classes="std std-ref">get_font_stretch</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>&gt;</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-font-style"><inline classes="std std-ref">get_font_style</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-font-style-name"><inline classes="std std-ref">get_font_style_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-font-weight"><inline classes="std std-ref">get_font_weight</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-height"><inline classes="std std-ref">get_height</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-multiline-string-size"><inline classes="std std-ref">get_multiline_string_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_lines=-1, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; brk_flags=3, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-opentype-features"><inline classes="std std-ref">get_opentype_features</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-ot-name-strings"><inline classes="std std-ref">get_ot_name_strings</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-rids"><inline classes="std std-ref">get_rids</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-spacing"><inline classes="std std-ref">get_spacing</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-string-size"><inline classes="std std-ref">get_string_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-supported-chars"><inline classes="std std-ref">get_supported_chars</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-supported-feature-list"><inline classes="std std-ref">get_supported_feature_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-supported-variation-list"><inline classes="std std-ref">get_supported_variation_list</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-underline-position"><inline classes="std std-ref">get_underline_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-get-underline-thickness"><inline classes="std std-ref">get_underline_thickness</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-has-char"><inline classes="std std-ref">has_char</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-is-language-supported"><inline classes="std std-ref">is_language_supported</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-is-script-supported"><inline classes="std std-ref">is_script_supported</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-font-method-set-cache-capacity"><inline classes="std std-ref">set_cache_capacity</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> single_line, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> multi_line <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-font-property-fallbacks"></target>
            <paragraph classes="classref-property" ids="class-font-property-fallbacks" names="class_font_property_fallbacks"><reference internal="True" refid="class-font"><inline classes="std std-ref">Font[]</inline></reference> <strong>fallbacks</strong> = <literal>[]</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_fallbacks</strong> <strong>(</strong> <reference internal="True" refid="class-font"><inline classes="std std-ref">Font[]</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-font"><inline classes="std std-ref">Font[]</inline></reference> <strong>get_fallbacks</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>回退 <strong>Font</strong> 数组，会在这个当前 <strong>Font</strong> 中无法找到某个字形时用作替换。</paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_fontvariation#class-fontvariation"><inline classes="std std-ref">FontVariation</inline></reference> 中的这个数组为空，则会改用 <reference internal="True" refuri="class_fontvariation#class-fontvariation-property-base-font"><inline classes="std std-ref">FontVariation.base_font</inline></reference> 的回退字体。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-font-method-draw-char"></target>
            <paragraph classes="classref-method" ids="class-font-method-draw-char" names="class_font_method_draw_char"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>draw_char</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1) <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>使用该字体将单个 Unicode 字符 <literal>char</literal> 绘制在画布项目中的给定的位置，颜色为 <literal>modulate</literal>。<literal>pos</literal> 指定的是基线位置而不是顶部。如果要按顶部位置绘制，则必须在 Y 轴中加入<emphasis>升部</emphasis>。</paragraph>
            <paragraph><strong>注意：</strong>请勿使用这个方法进行逐字符的绘制，请改用 <reference internal="True" refid="class-font-method-draw-string"><inline classes="std std-ref">draw_string</inline></reference> 或 <reference internal="True" refuri="class_textline#class-textline"><inline classes="std std-ref">TextLine</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-draw-char-outline"></target>
            <paragraph classes="classref-method" ids="class-font-method-draw-char-outline" names="class_font_method_draw_char_outline"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>draw_char_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size=-1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1) <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>使用该字体将单个 Unicode 字符 <literal>char</literal> 的轮廓绘制在画布项目中的给定的位置，颜色为 <literal>modulate</literal>。<literal>pos</literal> 指定的是基线位置而不是顶部。如果要按顶部位置绘制，则必须在 Y 轴中加入<emphasis>升部</emphasis>。</paragraph>
            <paragraph><strong>注意：</strong>请勿使用这个方法进行逐字符的绘制，请改用 <reference internal="True" refid="class-font-method-draw-string"><inline classes="std std-ref">draw_string</inline></reference> 或 <reference internal="True" refuri="class_textline#class-textline"><inline classes="std std-ref">TextLine</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-draw-multiline-string"></target>
            <paragraph classes="classref-method" ids="class-font-method-draw-multiline-string" names="class_font_method_draw_multiline_string">void <strong>draw_multiline_string</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_lines=-1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; brk_flags=3, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>使用 <literal>brk_flags</literal> 指定的规则对 <literal>text</literal> 进行断行，并使用该字体将其绘制在画布项目中的给定位置，颜色为 <literal>modulate</literal>，也可以指定裁剪宽度并进行水平对齐。<literal>pos</literal> 指定的是基线位置而不是顶部。如果要按顶部位置绘制，则必须在 Y 轴中加入<emphasis>升部</emphasis>。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-multiline-string"><inline classes="std std-ref">CanvasItem.draw_multiline_string</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-draw-multiline-string-outline"></target>
            <paragraph classes="classref-method" ids="class-font-method-draw-multiline-string-outline" names="class_font_method_draw_multiline_string_outline">void <strong>draw_multiline_string_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_lines=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size=1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; brk_flags=3, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>使用 <literal>brk_flags</literal> 指定的规则对 <literal>text</literal> 进行断行，并使用该字体将其轮廓绘制在画布项目中的给定位置，颜色为 <literal>modulate</literal>，也可以指定裁剪宽度并进行水平对齐。<literal>pos</literal> 指定的是基线位置而不是顶部。如果要按顶部位置绘制，则必须在 Y 轴中加入<emphasis>升部</emphasis>。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-multiline-string-outline"><inline classes="std std-ref">CanvasItem.draw_multiline_string_outline</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-draw-string"></target>
            <paragraph classes="classref-method" ids="class-font-method-draw-string" names="class_font_method_draw_string">void <strong>draw_string</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>使用该字体将 <literal>text</literal> 绘制在画布项目中的给定位置，颜色为 <literal>modulate</literal>，也可以指定裁剪宽度并进行水平对齐。<literal>pos</literal> 指定的是基线位置而不是顶部。如果要按顶部位置绘制，则必须在 Y 轴中加入<emphasis>升部</emphasis>。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-string"><inline classes="std std-ref">CanvasItem.draw_string</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-draw-string-outline"></target>
            <paragraph classes="classref-method" ids="class-font-method-draw-string-outline" names="class_font_method_draw_string_outline">void <strong>draw_string_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> pos, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size=1, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> modulate=Color(1, 1, 1, 1), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>使用该字体将 <literal>text</literal> 的轮廓绘制在画布项目中的给定位置，颜色为 <literal>modulate</literal>，也可以指定裁剪宽度并进行水平对齐。<literal>pos</literal> 指定的是基线位置而不是顶部。如果要按顶部位置绘制，则必须在 Y 轴中加入<emphasis>升部</emphasis>。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-draw-string"><inline classes="std std-ref">CanvasItem.draw_string</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-find-variation"></target>
            <paragraph classes="classref-method" ids="class-font-method-find-variation" names="class_font_method_find_variation"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>find_variation</strong> <strong>(</strong> <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> variation_coordinates, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> face_index=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> strength=0.0, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform=Transform2D(1, 0, 0, 1, 0, 0), <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_top=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_bottom=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_space=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> spacing_glyph=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回特定变体的字体缓存的 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-ascent"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-ascent" names="class_font_method_get_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_ascent</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回平均上高（基线以上的像素数）。</paragraph>
            <paragraph><strong>注意：</strong>字符串的实际上高是上下文相关的，并且可能与该函数返回的值有很大不同。仅将其用作粗略估计（例如作为空行的上高）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-char-size"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-char-size" names="class_font_method_get_char_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_char_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回字符的大小，如果提供了下一个字符，则可以选择考虑字距调整。</paragraph>
            <paragraph><strong>注意：</strong>不要使用这个函数逐个字符地计算字符串的宽度，而是使用 <reference internal="True" refid="class-font-method-get-string-size"><inline classes="std std-ref">get_string_size</inline></reference> 或 <reference internal="True" refuri="class_textline#class-textline"><inline classes="std std-ref">TextLine</inline></reference>。返回的高度是字体高度（另见 <reference internal="True" refid="class-font-method-get-height"><inline classes="std std-ref">get_height</inline></reference>）并且与字形高度无关。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-descent"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-descent" names="class_font_method_get_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_descent</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回平均下深（基线以下的像素数）。</paragraph>
            <paragraph><strong>注意：</strong>字符串的真实下深是依赖于上下文的，并且可能与此函数返回的值有很大不同。仅将其用作粗略估计（例如作为空行的下深）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-face-count"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-face-count" names="class_font_method_get_face_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_face_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 TrueType / OpenType 集合中的字体数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-font-name"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-font-name" names="class_font_method_get_font_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_font_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回字体家族名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-font-stretch"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-font-stretch" names="class_font_method_get_font_stretch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_font_stretch</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回与正常宽度相比的字体拉伸量。一个介于 <literal>50%</literal> 和 <literal>200%</literal> 之间的百分比值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-font-style"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-font-style" names="class_font_method_get_font_style"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>&gt; <strong>get_font_style</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回字体样式标志，见 <reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-font-style-name"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-font-style-name" names="class_font_method_get_font_style_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_font_style_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回字体样式名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-font-weight"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-font-weight" names="class_font_method_get_font_weight"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_font_weight</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该字体的字重（粗度）。一个在 <literal>100...999</literal> 范围内的值，正常字体字重为 <literal>400</literal>，粗体字体字重为 <literal>700</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-height" names="class_font_method_get_height"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_height</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回总的平均字体高度（上高加下深），单位为像素。</paragraph>
            <paragraph><strong>注意：</strong>字符串的实际高度取决于上下文，并且可能与该函数返回的值有很大差异。仅将其用作粗略估计（例如作为空行的高度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-multiline-string-size"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-multiline-string-size" names="class_font_method_get_multiline_string_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_multiline_string_size</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> max_lines=-1, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>&gt; brk_flags=3, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回分割成行的字符串的边界框的大小，将字距调整和前进量考虑在内。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-font-method-draw-multiline-string"><inline classes="std std-ref">draw_multiline_string</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-opentype-features"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-opentype-features" names="class_font_method_get_opentype_features"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_opentype_features</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一组 OpenType 功能标签。更多信息：<reference name="OpenType 功能标签" refuri="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType 功能标签</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-ot-name-strings"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-ot-name-strings" names="class_font_method_get_ot_name_strings"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_ot_name_strings</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 OpenType 字体名称字符串的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>（本地化的字体名称、版本、描述、许可信息、示例文本等）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-rids"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-rids" names="class_font_method_get_rids"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> <strong>get_rids</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回有效 <strong>Font</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，可以将其传给 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 的方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-spacing"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-spacing" names="class_font_method_get_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_spacing</strong> <strong>(</strong> <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference> spacing <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定 <literal>type</literal> 的间距（请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-string-size"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-string-size" names="class_font_method_get_string_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_string_size</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> alignment=0, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> width=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>&gt; justification_flags=3, <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> direction=0, <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> orientation=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个单行字符串的边界框的大小，考虑字距调整、提前量和子像素定位。另见 <reference internal="True" refid="class-font-method-get-multiline-string-size"><inline classes="std std-ref">get_multiline_string_size</inline></reference> 和 <reference internal="True" refid="class-font-method-draw-string"><inline classes="std std-ref">draw_string</inline></reference>。</paragraph>
            <paragraph>例如，要获取单行 Label 所显示的字符串大小，请使用：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var string_size = $Label.get_theme_font("font").get_string_size($Label.text, HORIZONTAL_ALIGNMENT_LEFT, -1, $Label.get_theme_font_size("font_size"))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Label label = GetNode&lt;Label&gt;("Label");
Vector2 stringSize = label.GetThemeFont("font").GetStringSize(label.Text, HorizontalAlignment.Left, -1, label.GetThemeFontSize("font_size"));</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>由于 <reference internal="True" refid="class-font-method-get-string-size"><inline classes="std std-ref">get_string_size</inline></reference> 考虑了字距调整、提前量和子像素定位，因此对字符串的子字符串使用单独的 <reference internal="True" refid="class-font-method-get-string-size"><inline classes="std std-ref">get_string_size</inline></reference> 调用，然后将结果加在一起，将返回与对完整字符串使用单个 <reference internal="True" refid="class-font-method-get-string-size"><inline classes="std std-ref">get_string_size</inline></reference> 调用的返回值不同的结果 。</paragraph>
            <paragraph><strong>注意：</strong>字符串的实际高度取决于上下文，并且可能与 <reference internal="True" refid="class-font-method-get-height"><inline classes="std std-ref">get_height</inline></reference> 返回的值有很大不同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-supported-chars"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-supported-chars" names="class_font_method_get_supported_chars"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_supported_chars</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个包含字体中所有可用字符的字符串。</paragraph>
            <paragraph>如果给定字符被包含在多个字体数据源中，则它在返回的字符串中只出现一次。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-supported-feature-list"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-supported-feature-list" names="class_font_method_get_supported_feature_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_supported_feature_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回字体支持的 OpenType 特性列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-supported-variation-list"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-supported-variation-list" names="class_font_method_get_supported_variation_list"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_supported_variation_list</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回支持的<reference name="变体坐标" refuri="https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg">变体坐标</reference>列表，坐标以 <literal>tag: Vector3i(min_value,max_value,default_value)</literal> 的形式返回。</paragraph>
            <paragraph>字体变体能够沿着某个给定的设计轴对字形的特性进行连续的变化，例如字重、宽度、斜度。</paragraph>
            <paragraph>要输出可变字体的可用变体轴：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var fv = FontVariation.new()
fv.set_base_font = load("res://RobotoFlex.ttf")
var variation_list = fv.get_supported_variation_list()
for tag in variation_list:
    var name = TextServerManager.get_primary_interface().tag_to_name(tag)
    var values = variation_list[tag]
    print("变体轴：%s (%d)\n\t最小值、最大值、默认值：%s" % [name, tag, values])</literal_block>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_fontvariation#class-fontvariation"><inline classes="std std-ref">FontVariation</inline></reference> 变体坐标的设置和获取请使用 <reference internal="True" refuri="class_fontvariation#class-fontvariation-property-variation-opentype"><inline classes="std std-ref">FontVariation.variation_opentype</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-underline-position"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-underline-position" names="class_font_method_get_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_underline_position</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回基线下方下划线的平均像素偏移。</paragraph>
            <paragraph><strong>注意：</strong>字符串的实际下划线位置取决于上下文，并且可能与该函数返回的值有很大不同。仅将其用作粗略估计。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-get-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-font-method-get-underline-thickness" names="class_font_method_get_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_underline_thickness</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> font_size=16 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回下划线的平均粗细。</paragraph>
            <paragraph><strong>注意：</strong>字符串的实际下划线粗细取决于上下文，并且可能与该函数返回的值有很大不同。仅将其用作粗略估计。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-has-char"></target>
            <paragraph classes="classref-method" ids="class-font-method-has-char" names="class_font_method_has_char"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_char</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> char <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该字体中包含 Unicode 字符 <literal>char</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-is-language-supported"></target>
            <paragraph classes="classref-method" ids="class-font-method-is-language-supported" names="class_font_method_is_language_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_language_supported</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该字体支持给定的语言（<reference name="ISO 639" refuri="https://zh.wikipedia.org/wiki/ISO_639-1">ISO 639</reference> 代码），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-is-script-supported"></target>
            <paragraph classes="classref-method" ids="class-font-method-is-script-supported" names="class_font_method_is_script_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_script_supported</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> script <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该字体支持给定的文字（<reference name="ISO 15924" refuri="https://zh.wikipedia.org/wiki/ISO_15924">ISO 15924</reference> 代码），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-font-method-set-cache-capacity"></target>
            <paragraph classes="classref-method" ids="class-font-method-set-cache-capacity" names="class_font_method_set_cache_capacity">void <strong>set_cache_capacity</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> single_line, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> multi_line <strong>)</strong></paragraph>
            <paragraph>为 <literal>draw_*</literal> 方法设置 LRU 缓存容量。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
