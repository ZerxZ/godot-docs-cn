<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_meshinstance3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/MeshInstance3D.xml.</comment>
    <target refid="class-meshinstance3d"></target>
    <section ids="meshinstance3d class-meshinstance3d" names="meshinstance3d class_meshinstance3d">
        <title>MeshInstance3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_softbody3d#class-softbody3d"><inline classes="std std-ref">SoftBody3D</inline></reference></paragraph>
        <paragraph>网格实例与场景相结合的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>MeshInstance3D 节点接受 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源，会为该网格创建一个实例，将其添加到当前的场景中。这是渲染 3D 几何体时最常用的类，可以将单个 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 在不同的地方实例化。这样就能够实现几何体的复用，节省资源。如果需要在比较集中的区域内将某个 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 实例化超过几千次，请考虑改为在 <reference internal="True" refuri="class_multimeshinstance3d#class-multimeshinstance3d"><inline classes="std std-ref">MultiMeshInstance3D</inline></reference> 中使用 <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="3D 材质测试演示" refuri="https://godotengine.org/asset-library/asset/2742">3D 材质测试演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 动力学角色演示" refuri="https://godotengine.org/asset-library/asset/2739">3D 动力学角色演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 平台跳跃演示" refuri="https://godotengine.org/asset-library/asset/2748">3D 平台跳跃演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="57"></colspec>
                    <colspec colwidth="20"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-property-skeleton"><inline classes="std std-ref">skeleton</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("..")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_skin#class-skin"><inline classes="std std-ref">Skin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-property-skin"><inline classes="std std-ref">skin</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="43"></colspec>
                    <colspec colwidth="208"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-bake-mesh-from-current-blend-shape-mix"><inline classes="std std-ref">bake_mesh_from_current_blend_shape_mix</inline></reference>(existing: <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-create-convex-collision"><inline classes="std std-ref">create_convex_collision</inline></reference>(clean: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, simplify: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-create-debug-tangents"><inline classes="std std-ref">create_debug_tangents</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-create-multiple-convex-collisions"><inline classes="std std-ref">create_multiple_convex_collisions</inline></reference>(settings: <reference internal="True" refuri="class_meshconvexdecompositionsettings#class-meshconvexdecompositionsettings"><inline classes="std std-ref">MeshConvexDecompositionSettings</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-create-trimesh-collision"><inline classes="std std-ref">create_trimesh_collision</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-find-blend-shape-by-name"><inline classes="std std-ref">find_blend_shape_by_name</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-get-active-material"><inline classes="std std-ref">get_active_material</inline></reference>(surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-get-blend-shape-count"><inline classes="std std-ref">get_blend_shape_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-get-blend-shape-value"><inline classes="std std-ref">get_blend_shape_value</inline></reference>(blend_shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_skinreference#class-skinreference"><inline classes="std std-ref">SkinReference</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-get-skin-reference"><inline classes="std std-ref">get_skin_reference</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-get-surface-override-material"><inline classes="std std-ref">get_surface_override_material</inline></reference>(surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-get-surface-override-material-count"><inline classes="std std-ref">get_surface_override_material_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-set-blend-shape-value"><inline classes="std std-ref">set_blend_shape_value</inline></reference>(blend_shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-meshinstance3d-method-set-surface-override-material"><inline classes="std std-ref">set_surface_override_material</inline></reference>(surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-meshinstance3d-property-mesh"></target>
            <paragraph classes="classref-property" ids="class-meshinstance3d-property-mesh" names="class_meshinstance3d_property_mesh"><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>mesh</strong> <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mesh</strong>(value: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>get_mesh</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该实例的 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-property-skeleton"></target>
            <paragraph classes="classref-property" ids="class-meshinstance3d-property-skeleton" names="class_meshinstance3d_property_skeleton"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>skeleton</strong> = <literal>NodePath("..")</literal> <reference internal="True" refid="class-meshinstance3d-property-skeleton"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_skeleton_path</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_skeleton_path</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>到与此实例关联的 <reference internal="True" refuri="class_skeleton3d#class-skeleton3d"><inline classes="std std-ref">Skeleton3D</inline></reference> 的 <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-property-skin"></target>
            <paragraph classes="classref-property" ids="class-meshinstance3d-property-skin" names="class_meshinstance3d_property_skin"><reference internal="True" refuri="class_skin#class-skin"><inline classes="std std-ref">Skin</inline></reference> <strong>skin</strong> <reference internal="True" refid="class-meshinstance3d-property-skin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_skin</strong>(value: <reference internal="True" refuri="class_skin#class-skin"><inline classes="std std-ref">Skin</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_skin#class-skin"><inline classes="std std-ref">Skin</inline></reference> <strong>get_skin</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该实例要使用的 <reference internal="True" refuri="class_skin#class-skin"><inline classes="std std-ref">Skin</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-meshinstance3d-method-bake-mesh-from-current-blend-shape-mix"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-bake-mesh-from-current-blend-shape-mix" names="class_meshinstance3d_method_bake_mesh_from_current_blend_shape_mix"><reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> <strong>bake_mesh_from_current_blend_shape_mix</strong>(existing: <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> = null) <reference internal="True" refid="class-meshinstance3d-method-bake-mesh-from-current-blend-shape-mix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据当前权重从当前 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> 中获取所有混合形状的快照，并将其烘焙到提供的 <literal>existing</literal> 网格中。如果未提供 <literal>existing</literal> 网格，则将创建一个新的 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference>，然后烘焙并返回。不会复制网格表面材质。</paragraph>
            <paragraph><strong>性能：</strong>需要从 GPU 接收 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 数据，从而在该过程中拖延了 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-create-convex-collision"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-create-convex-collision" names="class_meshinstance3d_method_create_convex_collision"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_convex_collision</strong>(clean: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, simplify: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-meshinstance3d-method-create-convex-collision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该助手创建一个 <reference internal="True" refuri="class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 子节点，该子节点具有根据网格几何计算的 <reference internal="True" refuri="class_convexpolygonshape3d#class-convexpolygonshape3d"><inline classes="std std-ref">ConvexPolygonShape3D</inline></reference> 碰撞形状。它主要用于测试。</paragraph>
            <paragraph>如果 <literal>clean</literal> 为 <literal>true</literal>（默认值），则重复的顶点和内部顶点会被自动移除。如果不需要，可以将其设置为 <literal>false</literal>，以加快处理速度。</paragraph>
            <paragraph>如果 <literal>simplify</literal> 为 <literal>true</literal>，则该几何体可以进一步被简化以减少顶点的数量。默认情况下是禁用的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-create-debug-tangents"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-create-debug-tangents" names="class_meshinstance3d_method_create_debug_tangents"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_debug_tangents</strong>() <reference internal="True" refid="class-meshinstance3d-method-create-debug-tangents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建 <strong>MeshInstance3D</strong> 子节点的辅助函数，会根据网格几何体计算出各个顶点的小工具。主要用于测试。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-create-multiple-convex-collisions"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-create-multiple-convex-collisions" names="class_meshinstance3d_method_create_multiple_convex_collisions"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_multiple_convex_collisions</strong>(settings: <reference internal="True" refuri="class_meshconvexdecompositionsettings#class-meshconvexdecompositionsettings"><inline classes="std std-ref">MeshConvexDecompositionSettings</inline></reference> = null) <reference internal="True" refid="class-meshinstance3d-method-create-multiple-convex-collisions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建 <reference internal="True" refuri="class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 子节点的辅助函数，会根据网格几何体使用凸分解计算出多个 <reference internal="True" refuri="class_convexpolygonshape3d#class-convexpolygonshape3d"><inline classes="std std-ref">ConvexPolygonShape3D</inline></reference> 碰撞形状。凸分解操作可以通过可选的 <literal>settings</literal> 参数控制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-create-trimesh-collision"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-create-trimesh-collision" names="class_meshinstance3d_method_create_trimesh_collision"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_trimesh_collision</strong>() <reference internal="True" refid="class-meshinstance3d-method-create-trimesh-collision"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该助手创建一个 <reference internal="True" refuri="class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 子节点，该子节点具有一个 <reference internal="True" refuri="class_concavepolygonshape3d#class-concavepolygonshape3d"><inline classes="std std-ref">ConcavePolygonShape3D</inline></reference> 碰撞形状，该形状是根据网格几何体计算出来的。它主要用于测试。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-find-blend-shape-by-name"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-find-blend-shape-by-name" names="class_meshinstance3d_method_find_blend_shape_by_name"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>find_blend_shape_by_name</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-meshinstance3d-method-find-blend-shape-by-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>name</literal> 的混合形状的索引。如果不存在具有该名称的混合形状，以及当 <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference> 为 <literal>null</literal> 时，则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-get-active-material"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-get-active-material" names="class_meshinstance3d_method_get_active_material"><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> <strong>get_active_material</strong>(surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshinstance3d-method-get-active-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 在绘制时将使用的 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>。这可以返回 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-material-override"><inline classes="std std-ref">GeometryInstance3D.material_override</inline></reference>、在该 <strong>MeshInstance3D</strong> 中定义的表面覆盖 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> 或 <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference> 中定义的表面 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>。例如，如果使用 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-material-override"><inline classes="std std-ref">GeometryInstance3D.material_override</inline></reference>，则所有表面都将返回该覆盖材质。</paragraph>
            <paragraph>如果没有材质处于活动状态，包括当 <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference> 为 <literal>null</literal> 时，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-get-blend-shape-count"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-get-blend-shape-count" names="class_meshinstance3d_method_get_blend_shape_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_blend_shape_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshinstance3d-method-get-blend-shape-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回可用混合形状的数量。如果 <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference> 为 <literal>null</literal> 则会报错。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-get-blend-shape-value"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-get-blend-shape-value" names="class_meshinstance3d_method_get_blend_shape_value"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_blend_shape_value</strong>(blend_shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshinstance3d-method-get-blend-shape-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定 <literal>blend_shape_idx</literal> 处的混合形状的值。如果 <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference> 为 <literal>null</literal>，或在该索引处没有混合形状，则返回 <literal>0.0</literal> 并产生一个错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-get-skin-reference"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-get-skin-reference" names="class_meshinstance3d_method_get_skin_reference"><reference internal="True" refuri="class_skinreference#class-skinreference"><inline classes="std std-ref">SkinReference</inline></reference> <strong>get_skin_reference</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshinstance3d-method-get-skin-reference"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含附加到该 RID 的骨架的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 的内部 <reference internal="True" refuri="class_skinreference#class-skinreference"><inline classes="std std-ref">SkinReference</inline></reference>。另请参阅 <reference internal="True" refuri="class_resource#class-resource-method-get-rid"><inline classes="std std-ref">Resource.get_rid</inline></reference>、<reference internal="True" refuri="class_skinreference#class-skinreference-method-get-skeleton"><inline classes="std std-ref">SkinReference.get_skeleton</inline></reference> 和 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-instance-attach-skeleton"><inline classes="std std-ref">RenderingServer.instance_attach_skeleton</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-get-surface-override-material"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-get-surface-override-material" names="class_meshinstance3d_method_get_surface_override_material"><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> <strong>get_surface_override_material</strong>(surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshinstance3d-method-get-surface-override-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源的指定 <literal>surface</literal> 的覆盖 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>。另见 <reference internal="True" refid="class-meshinstance3d-method-get-surface-override-material-count"><inline classes="std std-ref">get_surface_override_material_count</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这将返回与 <strong>MeshInstance3D</strong> 的表面材质覆盖属性关联的 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>，而不是 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源内的材质。要获取 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源中的材质，请改用 <reference internal="True" refuri="class_mesh#class-mesh-method-surface-get-material"><inline classes="std std-ref">Mesh.surface_get_material</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-get-surface-override-material-count"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-get-surface-override-material-count" names="class_meshinstance3d_method_get_surface_override_material_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_surface_override_material_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-meshinstance3d-method-get-surface-override-material-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回表面覆盖材质的数量。相当于 <reference internal="True" refuri="class_mesh#class-mesh-method-get-surface-count"><inline classes="std std-ref">Mesh.get_surface_count</inline></reference>。另见 <reference internal="True" refid="class-meshinstance3d-method-get-surface-override-material"><inline classes="std std-ref">get_surface_override_material</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-set-blend-shape-value"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-set-blend-shape-value" names="class_meshinstance3d_method_set_blend_shape_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_blend_shape_value</strong>(blend_shape_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-meshinstance3d-method-set-blend-shape-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>blend_shape_idx</literal> 处的混合形状的值设置为 <literal>value</literal>。如果 <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference> 为 <literal>null</literal>，或在该索引处没有混合形状，则会产生一个错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-meshinstance3d-method-set-surface-override-material"></target>
            <paragraph classes="classref-method" ids="class-meshinstance3d-method-set-surface-override-material" names="class_meshinstance3d_method_set_surface_override_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_surface_override_material</strong>(surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>) <reference internal="True" refid="class-meshinstance3d-method-set-surface-override-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源的指定 <literal>surface</literal> 的覆盖 <literal>material</literal>。该材质与该 <strong>MeshInstance3D</strong> 关联，而不是与 <reference internal="True" refid="class-meshinstance3d-property-mesh"><inline classes="std std-ref">mesh</inline></reference> 关联。</paragraph>
            <paragraph><strong>注意：</strong>这将分配与 <strong>MeshInstance3D</strong> 的表面材质覆盖属性关联的 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>，而不是 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源内的材质。要在 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源中设置材质，请改用 <reference internal="True" refuri="class_mesh#class-mesh-method-surface-get-material"><inline classes="std std-ref">Mesh.surface_get_material</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
