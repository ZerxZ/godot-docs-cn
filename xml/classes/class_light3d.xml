<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_light3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Light3D.xml.</comment>
    <target refid="class-light3d"></target>
    <section ids="light3d class-light3d" names="light3d class_light3d">
        <title>Light3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>, <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference>, <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference></paragraph>
        <paragraph>为不同类型的光节点提供基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Light3D 是灯光节点的<emphasis>抽象</emphasis>基类。由于无法实例化，所以不应直接使用。其他类型的灯光节点继承自它。Light3D 包含用于照明的常见变量和参数。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/lights_and_shadows"><inline classes="doc">3D 灯光与阴影</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/global_illumination/faking_global_illumination"><inline classes="doc">伪造全局光照</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击演示" refuri="https://godotengine.org/asset-library/asset/678">第三人称射击演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="40"></colspec>
                    <colspec colwidth="88"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-distance-fade-begin"><inline classes="std std-ref">distance_fade_begin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>40.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-distance-fade-enabled"><inline classes="std std-ref">distance_fade_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-distance-fade-length"><inline classes="std std-ref">distance_fade_length</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-distance-fade-shadow"><inline classes="std std-ref">distance_fade_shadow</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>50.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-editor-only"><inline classes="std std-ref">editor_only</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-angular-distance"><inline classes="std std-ref">light_angular_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-bake-mode"><inline classes="std std-ref">light_bake_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-color"><inline classes="std std-ref">light_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-cull-mask"><inline classes="std std-ref">light_cull_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4294967295</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-energy"><inline classes="std std-ref">light_energy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-indirect-energy"><inline classes="std std-ref">light_indirect_energy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-intensity-lumens"><inline classes="std std-ref">light_intensity_lumens</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-intensity-lux"><inline classes="std std-ref">light_intensity_lux</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-negative"><inline classes="std std-ref">light_negative</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-projector"><inline classes="std std-ref">light_projector</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-size"><inline classes="std std-ref">light_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-specular"><inline classes="std std-ref">light_specular</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-temperature"><inline classes="std std-ref">light_temperature</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-light-volumetric-fog-energy"><inline classes="std std-ref">light_volumetric_fog_energy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-shadow-bias"><inline classes="std std-ref">shadow_bias</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-shadow-blur"><inline classes="std std-ref">shadow_blur</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-shadow-enabled"><inline classes="std std-ref">shadow_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-shadow-normal-bias"><inline classes="std std-ref">shadow_normal_bias</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-shadow-opacity"><inline classes="std std-ref">shadow_opacity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-shadow-reverse-cull-face"><inline classes="std std-ref">shadow_reverse_cull_face</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-property-shadow-transmittance-bias"><inline classes="std std-ref">shadow_transmittance_bias</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.05</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="134"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-method-get-correlated-color"><inline classes="std std-ref">get_correlated_color</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-method-get-param"><inline classes="std std-ref">get_param</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-light3d-method-set-param"><inline classes="std std-ref">set_param</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-light3d-param"></target>
            <paragraph classes="classref-enumeration" ids="enum-light3d-param" names="enum_light3d_param">enum <strong>Param</strong>:</paragraph>
            <target refid="class-light3d-constant-param-energy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-energy" names="class_light3d_constant_param_energy"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_ENERGY</strong> = <literal>0</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-light-energy"><inline classes="std std-ref">light_energy</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-indirect-energy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-indirect-energy" names="class_light3d_constant_param_indirect_energy"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_INDIRECT_ENERGY</strong> = <literal>1</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-light-indirect-energy"><inline classes="std std-ref">light_indirect_energy</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-volumetric-fog-energy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-volumetric-fog-energy" names="class_light3d_constant_param_volumetric_fog_energy"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_VOLUMETRIC_FOG_ENERGY</strong> = <literal>2</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-light-volumetric-fog-energy"><inline classes="std std-ref">light_volumetric_fog_energy</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-specular"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-specular" names="class_light3d_constant_param_specular"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SPECULAR</strong> = <literal>3</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-light-specular"><inline classes="std std-ref">light_specular</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-range"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-range" names="class_light3d_constant_param_range"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_RANGE</strong> = <literal>4</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d-property-omni-range"><inline classes="std std-ref">OmniLight3D.omni_range</inline></reference> 或 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d-property-spot-range"><inline classes="std std-ref">SpotLight3D.spot_range</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-size" names="class_light3d_constant_param_size"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SIZE</strong> = <literal>5</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-light-size"><inline classes="std std-ref">light_size</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-attenuation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-attenuation" names="class_light3d_constant_param_attenuation"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_ATTENUATION</strong> = <literal>6</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d-property-omni-attenuation"><inline classes="std std-ref">OmniLight3D.omni_attenuation</inline></reference> 或 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d-property-spot-attenuation"><inline classes="std std-ref">SpotLight3D.spot_attenuation</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-spot-angle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-spot-angle" names="class_light3d_constant_param_spot_angle"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SPOT_ANGLE</strong> = <literal>7</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d-property-spot-angle"><inline classes="std std-ref">SpotLight3D.spot_angle</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-spot-attenuation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-spot-attenuation" names="class_light3d_constant_param_spot_attenuation"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SPOT_ATTENUATION</strong> = <literal>8</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d-property-spot-angle-attenuation"><inline classes="std std-ref">SpotLight3D.spot_angle_attenuation</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-max-distance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-max-distance" names="class_light3d_constant_param_shadow_max_distance"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_MAX_DISTANCE</strong> = <literal>9</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-max-distance"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_max_distance</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-split-1-offset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-split-1-offset" names="class_light3d_constant_param_shadow_split_1_offset"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_SPLIT_1_OFFSET</strong> = <literal>10</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-split-1"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_split_1</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-split-2-offset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-split-2-offset" names="class_light3d_constant_param_shadow_split_2_offset"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_SPLIT_2_OFFSET</strong> = <literal>11</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-split-2"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_split_2</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-split-3-offset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-split-3-offset" names="class_light3d_constant_param_shadow_split_3_offset"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_SPLIT_3_OFFSET</strong> = <literal>12</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-split-3"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_split_3</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-fade-start"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-fade-start" names="class_light3d_constant_param_shadow_fade_start"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_FADE_START</strong> = <literal>13</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-fade-start"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_fade_start</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-normal-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-normal-bias" names="class_light3d_constant_param_shadow_normal_bias"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_NORMAL_BIAS</strong> = <literal>14</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-shadow-normal-bias"><inline classes="std std-ref">shadow_normal_bias</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-bias" names="class_light3d_constant_param_shadow_bias"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_BIAS</strong> = <literal>15</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-shadow-bias"><inline classes="std std-ref">shadow_bias</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-pancake-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-pancake-size" names="class_light3d_constant_param_shadow_pancake_size"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_PANCAKE_SIZE</strong> = <literal>16</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d-property-directional-shadow-pancake-size"><inline classes="std std-ref">DirectionalLight3D.directional_shadow_pancake_size</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-opacity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-opacity" names="class_light3d_constant_param_shadow_opacity"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_OPACITY</strong> = <literal>17</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-shadow-opacity"><inline classes="std std-ref">shadow_opacity</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-shadow-blur"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-shadow-blur" names="class_light3d_constant_param_shadow_blur"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_SHADOW_BLUR</strong> = <literal>18</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-shadow-blur"><inline classes="std std-ref">shadow_blur</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-transmittance-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-transmittance-bias" names="class_light3d_constant_param_transmittance_bias"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_TRANSMITTANCE_BIAS</strong> = <literal>19</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-shadow-transmittance-bias"><inline classes="std std-ref">shadow_transmittance_bias</inline></reference> 的常量。</paragraph>
            <target refid="class-light3d-constant-param-intensity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-intensity" names="class_light3d_constant_param_intensity"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_INTENSITY</strong> = <literal>20</literal></paragraph>
            <paragraph>用于访问 <reference internal="True" refid="class-light3d-property-light-intensity-lumens"><inline classes="std std-ref">light_intensity_lumens</inline></reference> 和 <reference internal="True" refid="class-light3d-property-light-intensity-lux"><inline classes="std std-ref">light_intensity_lux</inline></reference> 的常量。只在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-use-physical-light-units"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/use_physical_light_units</inline></reference> 为 <literal>true</literal> 时使用。</paragraph>
            <target refid="class-light3d-constant-param-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-param-max" names="class_light3d_constant_param_max"><reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> <strong>PARAM_MAX</strong> = <literal>21</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-light3d-bakemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-light3d-bakemode" names="enum_light3d_bakemode">enum <strong>BakeMode</strong>:</paragraph>
            <target refid="class-light3d-constant-bake-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-bake-disabled" names="class_light3d_constant_bake_disabled"><reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference> <strong>BAKE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>烘焙时灯光将被忽略。这是最快的模式，但是在烘焙全局照明时仍会考虑该灯光。该模式通常应用于快速变化的动态灯光，因为全局照明的效果在这些灯光上不太明显。</paragraph>
            <paragraph><strong>注意：</strong>将灯光隐藏，<emphasis>不</emphasis>影响烘焙 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference>。但将灯光隐藏，仍会影响烘焙 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 和 SDFGI（请参阅 <reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>）。</paragraph>
            <target refid="class-light3d-constant-bake-static"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-bake-static" names="class_light3d_constant_bake_static"><reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference> <strong>BAKE_STATIC</strong> = <literal>1</literal></paragraph>
            <paragraph>在静态烘焙（<reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference>、<reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference>、SDFGI（<reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>））时，考虑了灯光。灯光可以四处移动或修改，但其全局照明不会实时更新。这适用于细微的变化（例如闪烁的手电筒），但通常不适用于大的变化，例如打开和关闭灯光。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-light3d-property-editor-only"><inline classes="std std-ref">editor_only</inline></reference> 为 <literal>true</literal>，则灯光不会在 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference> 中烘焙。</paragraph>
            <target refid="class-light3d-constant-bake-dynamic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-light3d-constant-bake-dynamic" names="class_light3d_constant_bake_dynamic"><reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference> <strong>BAKE_DYNAMIC</strong> = <literal>2</literal></paragraph>
            <paragraph>在动态烘焙（仅 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 和 SDFGI（<reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>））时，考虑了灯光。灯光可以四处移动或修改，而且全局照明会实时更新。与 <reference internal="True" refid="class-light3d-constant-bake-static"><inline classes="std std-ref">BAKE_STATIC</inline></reference> 相比，灯光的全局照明外观会略有不同。与 <reference internal="True" refid="class-light3d-constant-bake-static"><inline classes="std std-ref">BAKE_STATIC</inline></reference> 相比，这具有更大的性能成本。使用 SDFGI 时，动态灯光的更新速度受 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-sdfgi-frames-to-update-lights"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/sdfgi/frames_to_update_lights</inline></reference> 的影响。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-light3d-property-distance-fade-begin"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-distance-fade-begin" names="class_light3d_property_distance_fade_begin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_fade_begin</strong> = <literal>40.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_distance_fade_begin</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_distance_fade_begin</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>光线开始逐渐消失时与相机的距离（单位为 3D 单位）。</paragraph>
            <paragraph><strong>注意：</strong>仅对 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-distance-fade-enabled"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-distance-fade-enabled" names="class_light3d_property_distance_fade_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>distance_fade_enabled</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_enable_distance_fade</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_distance_fade_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，从 <reference internal="True" refid="class-light3d-property-distance-fade-begin"><inline classes="std std-ref">distance_fade_begin</inline></reference> 开始，当远离活动的 <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> 时，灯光会平滑地消失。这充当了一种多细节层次（LOD）形式。灯光将在 <reference internal="True" refid="class-light3d-property-distance-fade-begin"><inline classes="std std-ref">distance_fade_begin</inline></reference> + <reference internal="True" refid="class-light3d-property-distance-fade-length"><inline classes="std std-ref">distance_fade_length</inline></reference> 之外淡出，之后它将被剔除并且根本不会被发送到着色器。使用它可以减少场景中的活动灯光数量，从而提高性能。</paragraph>
            <paragraph><strong>注意：</strong>仅对 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-distance-fade-length"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-distance-fade-length" names="class_light3d_property_distance_fade_length"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_fade_length</strong> = <literal>10.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_distance_fade_length</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_distance_fade_length</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光及其阴影消失的距离。灯光的能量和阴影的不透明度，在此距离内逐渐降低，最终完全不可见。</paragraph>
            <paragraph><strong>注意：</strong>仅对 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-distance-fade-shadow"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-distance-fade-shadow" names="class_light3d_property_distance_fade_shadow"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_fade_shadow</strong> = <literal>50.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_distance_fade_shadow</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_distance_fade_shadow</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光阴影截止处与相机的距离（单位为 3D 单位）。将该属性设置为低于 <reference internal="True" refid="class-light3d-property-distance-fade-begin"><inline classes="std std-ref">distance_fade_begin</inline></reference> + <reference internal="True" refid="class-light3d-property-distance-fade-length"><inline classes="std std-ref">distance_fade_length</inline></reference> 的值，以进一步提高性能，因为阴影渲染通常比光线渲染本身更昂贵。</paragraph>
            <paragraph><strong>注意：</strong>仅对 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference> 有效，且仅在 <reference internal="True" refid="class-light3d-property-shadow-enabled"><inline classes="std std-ref">shadow_enabled</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-editor-only"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-editor-only" names="class_light3d_property_editor_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>editor_only</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_editor_only</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_editor_only</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，灯光只在编辑器中出现，在运行时将不可见。如果为 <literal>true</literal>，则无论其 <reference internal="True" refid="class-light3d-property-light-bake-mode"><inline classes="std std-ref">light_bake_mode</inline></reference> 如何，灯光都不会在 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference> 中进行烘焙。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-angular-distance"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-angular-distance" names="class_light3d_property_light_angular_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_angular_distance</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光的角度大小，单位是度。增加此值将使阴影在更远的距离处更柔和（也称为百分比更近的柔和阴影，或 PCSS）。仅适用于 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>。作为参考，太阳距离地球大约是 <literal>0.5</literal>。对于启用了阴影的灯光，将此值增加到 <literal>0.0</literal> 以上，将由于 PCSS 而产生明显的性能成本。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-light3d-property-light-angular-distance"><inline classes="std std-ref">light_angular_distance</inline></reference> 不受 <reference internal="True" refuri="class_node3d#class-node3d-property-scale"><inline classes="std std-ref">Node3D.scale</inline></reference>（灯光的缩放或其父级的缩放）的影响。</paragraph>
            <paragraph><strong>注意：</strong>定向光的 PCSS 仅支持 Forward+ 渲染方式，不支持 Mobile 或 Compatibility。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-bake-mode"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-bake-mode" names="class_light3d_property_light_bake_mode"><reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference> <strong>light_bake_mode</strong> = <literal>2</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_bake_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference> <strong>get_bake_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光的烘焙模式。会影响对灯光渲染有影响的全局照明技术。见 <reference internal="True" refid="enum-light3d-bakemode"><inline classes="std std-ref">BakeMode</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>网格的全局照明模式也会影响全局照明渲染。见 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-gi-mode"><inline classes="std std-ref">GeometryInstance3D.gi_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-color"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-color" names="class_light3d_property_light_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>light_color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>光的颜色。<emphasis>过亮</emphasis>的颜色可用于实现与增加光的 <reference internal="True" refid="class-light3d-property-light-energy"><inline classes="std std-ref">light_energy</inline></reference> 相等价的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-cull-mask"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-cull-mask" names="class_light3d_property_light_cull_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>light_cull_mask</strong> = <literal>4294967295</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_cull_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_cull_mask</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光将影响所选图层中的对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-energy"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-energy" names="class_light3d_property_light_energy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_energy</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光的强度乘数（不是物理单位）。对于 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference>，更改此值只会更改灯光颜色的强度，而不会更改灯光的半径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-indirect-energy"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-indirect-energy" names="class_light3d_property_light_indirect_energy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_indirect_energy</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与间接光（光反射）一起使用的辅助乘数。与 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 和 SDFGI 一起使用（参见 <reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-light3d-property-light-energy"><inline classes="std std-ref">light_energy</inline></reference> 等于 <literal>0.0</literal>，则该属性将被忽略，因为在 GI 着色器中，该灯光根本不存在。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-intensity-lumens"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-intensity-lumens" names="class_light3d_property_light_intensity_lumens"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_intensity_lumens</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-use-physical-light-units"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/use_physical_light_units</inline></reference> 为 <literal>true</literal> 时，由定位灯（<reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference>）使用。设置光源的强度，测量单位为流明。流明是对光通量的一种度量，它是光源在单位时间内发出的可见光总量。</paragraph>
            <paragraph>对于 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference>，我们假设可见锥体之外的区域将被完美的光吸收材质包围。因此，锥体区域的表观亮度不会随着锥体大小的增大和减小而改变。</paragraph>
            <paragraph>一只典型的家用灯泡的流明范围从 600 流明到 1,200 流明不等，一支蜡烛的流明约为 13 流明，而一盏路灯的流明约为 60,000 流明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-intensity-lux"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-intensity-lux" names="class_light3d_property_light_intensity_lux"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_intensity_lux</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-use-physical-light-units"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/use_physical_light_units</inline></reference> 为 <literal>true</literal> 时，由 <reference internal="True" refuri="class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> 使用。设置光源的强度，测量单位为勒克斯（Lux）。勒克斯是对单位面积内光通量的度量，等于每平方米一流明。勒克斯是衡量在给定时间有多少光照射到一个表面。</paragraph>
            <paragraph>在晴朗的晴天，阳光直射下的表面可能约为 100,000 勒克斯，家中的一个典型房间可能约为 50 勒克斯，而月光下的地面可能约为 0.1 勒克斯。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-negative"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-negative" names="class_light3d_property_light_negative"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>light_negative</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_negative</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_negative</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则光线的效果会逆转，使区域变暗并投射明亮的阴影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-projector"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-projector" names="class_light3d_property_light_projector"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>light_projector</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_projector</strong> <strong>(</strong> <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_projector</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 由灯光投影。<reference internal="True" refid="class-light3d-property-shadow-enabled"><inline classes="std std-ref">shadow_enabled</inline></reference> 必须打开，投影仪才能工作。灯光投影仪使光线看起来像是透过彩色但透明的物体照射，几乎就像光线透过彩色玻璃照射一样。</paragraph>
            <paragraph><strong>注意：</strong>不像 <reference internal="True" refuri="class_basematerial3d#class-basematerial3d"><inline classes="std std-ref">BaseMaterial3D</inline></reference> 的过滤器模式可以在每个材质的基础上进行调整，灯光投影仪纹理的过滤器模式是通过 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-light-projectors-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/light_projectors/filter</inline></reference> 全局设置的。</paragraph>
            <paragraph><strong>注意：</strong>灯光投影仪纹理仅支持 Forward+ 和 Mobile 渲染方法，不支持 Compatibility。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-size"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-size" names="class_light3d_property_light_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_size</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>灯光的大小，使用 Godot 的单位。仅适用于 <reference internal="True" refuri="class_omnilight3d#class-omnilight3d"><inline classes="std std-ref">OmniLight3D</inline></reference> 和 <reference internal="True" refuri="class_spotlight3d#class-spotlight3d"><inline classes="std std-ref">SpotLight3D</inline></reference>。增加此值将使光线淡出速度变慢，并且阴影看起来更模糊（也称为百分比接近软阴影或 PCSS）。这可用于在一定程度上模拟区域光。对于启用了阴影的灯光，将此值增加到 <literal>0.0</literal> 以上，将由于 PCSS 而产生明显的性能成本。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-light3d-property-light-size"><inline classes="std std-ref">light_size</inline></reference> 不受 <reference internal="True" refuri="class_node3d#class-node3d-property-scale"><inline classes="std std-ref">Node3D.scale</inline></reference>（灯光的缩放或其父级的缩放）的影响。</paragraph>
            <paragraph><strong>注意：</strong>定位光的 PCSS 仅支持 Forward+ 和 Mobile 渲染方法，不支持 Compatibility。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-specular"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-specular" names="class_light3d_property_light_specular"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_specular</strong> = <literal>0.5</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>受灯光影响的对象中镜面反射斑点的强度。在 <literal>0</literal> 处，灯光变成纯漫反射灯光。当不烘焙发射时，这可用于在发光表面上方放置灯光时避免不真实的反射。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-temperature"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-temperature" names="class_light3d_property_light_temperature"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_temperature</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_temperature</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_temperature</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置光源的色温，测量单位为开尔文。这用于计算对 <reference internal="True" refid="class-light3d-property-light-color"><inline classes="std std-ref">light_color</inline></reference> 着色的相关色温。</paragraph>
            <paragraph>阴天的太阳温度约为 6500 开尔文，晴天的太阳温度在 5500 到 6000 开尔文之间，晴天日出或日落时的太阳温度范围为 1850 开尔文左右。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-light-volumetric-fog-energy"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-light-volumetric-fog-energy" names="class_light3d_property_light_volumetric_fog_energy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>light_volumetric_fog_energy</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与 <reference internal="True" refid="class-light3d-property-light-energy"><inline classes="std std-ref">light_energy</inline></reference> 相乘的次级乘数，然后与 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 的体积雾（如果启用）一起使用。如果设置为 <literal>0.0</literal>，将用于该灯的体积雾计算将被跳过，这可以在启用体积雾时提高大量灯光的性能。</paragraph>
            <paragraph><strong>注意：</strong>除非 <reference internal="True" refuri="class_environment#class-environment-property-volumetric-fog-temporal-reprojection-enabled"><inline classes="std std-ref">Environment.volumetric_fog_temporal_reprojection_enabled</inline></reference> 被禁用（或者除非重投影的量显著降低），否则为防止短暂的动态光效与体积雾的互动性差，这些效果中使用的光应将 <reference internal="True" refid="class-light3d-property-light-volumetric-fog-energy"><inline classes="std std-ref">light_volumetric_fog_energy</inline></reference> 设置为 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-shadow-bias"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-shadow-bias" names="class_light3d_property_shadow_bias"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shadow_bias</strong> = <literal>0.1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于调整阴影表现。值太小会导致自阴影（“阴影失真”），而值太大会导致阴影与之分离（“阴影悬浮”）。根据需要进行调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-shadow-blur"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-shadow-blur" names="class_light3d_property_shadow_blur"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shadow_blur</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>模糊阴影的边缘。可用于隐藏低分辨率阴影贴图中的像素伪影。高值会影响性能，使阴影看起来有颗粒感，并可能导致其他不需要的伪影。尽量保持接近默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-shadow-enabled"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-shadow-enabled" names="class_light3d_property_shadow_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shadow_enabled</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_shadow</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则灯光将投射实时阴影。这具有显著的性能成本。仅当阴影渲染对场景外观产生明显影响时，才启用阴影渲染，并考虑在远离 <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> 时使用 <reference internal="True" refid="class-light3d-property-distance-fade-enabled"><inline classes="std std-ref">distance_fade_enabled</inline></reference> 隐藏该灯光。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-shadow-normal-bias"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-shadow-normal-bias" names="class_light3d_property_shadow_normal_bias"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shadow_normal_bias</strong> = <literal>2.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>通过对象的法线，将查找偏移到阴影贴图中。这可用于在不使用 <reference internal="True" refid="class-light3d-property-shadow-bias"><inline classes="std std-ref">shadow_bias</inline></reference> 的情况下，减少自身阴影伪影。在实践中，这个值应该与 <reference internal="True" refid="class-light3d-property-shadow-bias"><inline classes="std std-ref">shadow_bias</inline></reference> 一起调整，以尽可能减少伪影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-shadow-opacity"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-shadow-opacity" names="class_light3d_property_shadow_opacity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shadow_opacity</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渲染灯光的阴影贴图时使用的不透明度。低于 <literal>1.0</literal> 的值会使光线透过阴影出现。这可以用于以较低的性能成本，伪造全局照明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-shadow-reverse-cull-face"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-shadow-reverse-cull-face" names="class_light3d_property_shadow_reverse_cull_face"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shadow_reverse_cull_face</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_reverse_cull_face</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_shadow_reverse_cull_face</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则反转网格的背面剔除。可用于一个背后有灯光的平面网格。如果需要在该网格的两侧投射阴影，请使用 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-constant-shadow-casting-setting-double-sided"><inline classes="std std-ref">GeometryInstance3D.SHADOW_CASTING_SETTING_DOUBLE_SIDED</inline></reference>，将该网格设置为使用双面阴影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-property-shadow-transmittance-bias"></target>
            <paragraph classes="classref-property" ids="class-light3d-property-shadow-transmittance-bias" names="class_light3d_property_shadow_transmittance_bias"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>shadow_transmittance_bias</strong> = <literal>0.05</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-light3d-method-get-correlated-color"></target>
            <paragraph classes="classref-method" ids="class-light3d-method-get-correlated-color" names="class_light3d_method_get_correlated_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_correlated_color</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定 <reference internal="True" refid="class-light3d-property-light-temperature"><inline classes="std std-ref">light_temperature</inline></reference> 下的理想化黑体的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。该值是根据 <reference internal="True" refid="class-light3d-property-light-temperature"><inline classes="std std-ref">light_temperature</inline></reference> 在内部计算得出的。该 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 在被发送到 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 之前，将乘以 <reference internal="True" refid="class-light3d-property-light-color"><inline classes="std std-ref">light_color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-method-get-param"></target>
            <paragraph classes="classref-method" ids="class-light3d-method-get-param" names="class_light3d_method_get_param"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定的 <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> 参数的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-light3d-method-set-param"></target>
            <paragraph classes="classref-method" ids="class-light3d-method-set-param" names="class_light3d_method_set_param">void <strong>set_param</strong> <strong>(</strong> <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置指定的 <reference internal="True" refid="enum-light3d-param"><inline classes="std std-ref">Param</inline></reference> 参数的值。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
