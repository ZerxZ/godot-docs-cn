<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_int.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/int.xml.</comment>
    <target refid="class-int"></target>
    <section ids="int class-int" names="int class_int">
        <title>int</title>
        <paragraph>整数内置类型。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>带符号 64 位整数类型。这意味着它能够接受从 <literal>-2^63</literal> 到 <literal>2^63 - 1</literal> 的值，即从 <literal>-9223372036854775808</literal> 到 <literal>9223372036854775807</literal>。超出这个范围后，值会绕回到另一端。</paragraph>
            <paragraph><strong>int</strong> 可以在需要时自动转换为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，例如在作为函数的参数传递的时候。<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 会尽可能与原始整数接近。</paragraph>
            <paragraph>类似地，<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 可以自动转换为 <strong>int</strong>。这样会截断该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，丢弃小数点之后的部分。</paragraph>
            <paragraph><strong>注意：</strong>布尔环境中会将等于 <literal>0</literal> 的 <strong>int</strong> 评估为 <literal>false</literal>，其他值则为 <literal>true</literal>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var x: int = 1 # x 为 1
x = 4.2 # x 为 4，因为 4.2 发生了截断
var max_int = 9223372036854775807 # int 所能存储的最大值
max_int += 1 # max_int 现在是 -9223372036854775808，因为它绕到了另一端</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">int x = 1; // x 为 1
x = (int)4.2; // x 为 4，因为 4.2 发生了截断
// 下面使用 long，因为 GDScript 的 int 为 64 位，而 C# 的 int 为 32 位。
long maxLong = 9223372036854775807; // long 所能存储的最大值
maxLong++; // maxLong 现在是 -9223372036854775808，因为它绕到了另一端。

// 也可以使用 C# 的 32 位 int 类型，最大值较小。
int maxInt = 2147483647; // int 所能存储的最大值
maxInt++; // maxInt 现在是 -2147483648，因为它绕到了另一端。</literal_block>
                </div>
            </container>
            <paragraph>你可以使用 <literal>0b</literal> 字面量书写二进制值，使用 <literal>0x</literal> 字面量书写十六进制值，使用 <literal>_</literal> 符号分隔较长的数字，提升可读性。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var x = 0b1001 # x 为 9
var y = 0xF5 # y 为 245
var z = 10_000_000 # z 为 10000000</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">int x = 0b1001; // x 为 9
int y = 0xF5; // y 为 245
int z = 10_000_000; // z 为 10000000</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="84"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-constructor-int"><inline classes="std std-ref">int</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-constructor-int"><inline classes="std std-ref">int</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-constructor-int"><inline classes="std std-ref">int</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-constructor-int"><inline classes="std std-ref">int</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-constructor-int"><inline classes="std std-ref">int</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="108"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-neq-float"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-neq-int"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mod-int"><inline classes="std std-ref">operator %</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-bwand-int"><inline classes="std std-ref">operator &amp;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-color"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-quaternion"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-vector2"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-vector2i"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-vector3"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-vector3i"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-vector4"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-vector4i"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-float"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-mul-int"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-pow-float"><inline classes="std std-ref">operator **</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-pow-int"><inline classes="std std-ref">operator **</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-sum-float"><inline classes="std std-ref">operator +</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-sum-int"><inline classes="std std-ref">operator +</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-dif-float"><inline classes="std std-ref">operator -</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-dif-int"><inline classes="std std-ref">operator -</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-div-float"><inline classes="std std-ref">operator /</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-div-int"><inline classes="std std-ref">operator /</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-lt-float"><inline classes="std std-ref">operator &lt;</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-lt-int"><inline classes="std std-ref">operator &lt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-bwsl-int"><inline classes="std std-ref">operator &lt;&lt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-lte-float"><inline classes="std std-ref">operator &lt;=</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-lte-int"><inline classes="std std-ref">operator &lt;=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-eq-float"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-eq-int"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-gt-float"><inline classes="std std-ref">operator &gt;</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-gt-int"><inline classes="std std-ref">operator &gt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-gte-float"><inline classes="std std-ref">operator &gt;=</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-gte-int"><inline classes="std std-ref">operator &gt;=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-bwsr-int"><inline classes="std std-ref">operator &gt;&gt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-bwxor-int"><inline classes="std std-ref">operator ^</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-unplus"><inline classes="std std-ref">operator unary+</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-unminus"><inline classes="std std-ref">operator unary-</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-bwor-int"><inline classes="std std-ref">operator |</inline></reference> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-int-operator-bwnot"><inline classes="std std-ref">operator ~</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-int-constructor-int"></target>
            <paragraph classes="classref-constructor" ids="class-int-constructor-int" names="class_int_constructor_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>int</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造设为 <literal>0</literal> 的 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>int</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>int</strong> 的副本 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>int</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>从 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 构造新的 <strong>int</strong>，遵循与 <reference internal="True" refuri="class_string#class-string-method-to-int"><inline classes="std std-ref">String.to_int</inline></reference> 相同的规则。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>int</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>从 <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> 构造新的 <strong>int</strong>。<literal>true</literal> 会转换为 <literal>1</literal>，<literal>false</literal> 会转换为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>int</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>从 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 构造新的 <strong>int</strong>。这样会截断该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，丢弃小数点之后的部分。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-int-operator-neq-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-neq-float" names="class_int_operator_neq_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>int</strong> 与该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 不等价，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-neq-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-neq-int" names="class_int_operator_neq_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果 <strong>int</strong> 不相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mod-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mod-int" names="class_int_operator_mod_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator %</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>返回两个 <strong>int</strong> 相除后的余数。该操作使用截断除法，被除数为负数时会返回负数。如果不希望如此，请考虑使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-posmod"><inline classes="std std-ref">@GlobalScope.posmod</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(6 % 2) # 输出 0
print(11 % 4) # 输出 3
print(-5 % 3) # 输出 -2</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-bwand-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-bwand-int" names="class_int_operator_bwand_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator &amp;</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>执行按位 <literal>AND</literal> 运算。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0b1100 &amp; 0b1010) # 输出 8（二进制 1000）</literal_block>
            <paragraph>可用于从变量中检索二进制标志。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var flags = 0b101
# 检查是否启用了第一或第二个比特位。
if flags &amp; 0b011:
    do_stuff() # 会执行这一行。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-color"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-color" names="class_int_operator_mul_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 的每个分量乘以该 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-quaternion"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-quaternion" names="class_int_operator_mul_quaternion"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> 的每个分量乘以该 <strong>int</strong>。此操作本身没有意义，但可以用作更大表达式的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-vector2"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-vector2" names="class_int_operator_mul_vector2"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 的每个分量乘以该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(2 * Vector2(1, 4)) # 输出 (2, 8)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-vector2i"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-vector2i" names="class_int_operator_mul_vector2i"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> 的每个分量乘以该 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-vector3"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-vector3" names="class_int_operator_mul_vector3"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 的每个分量乘以该 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-vector3i"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-vector3i" names="class_int_operator_mul_vector3i"><reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_vector3i#class-vector3i"><inline classes="std std-ref">Vector3i</inline></reference> 的每个分量乘以该 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-vector4"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-vector4" names="class_int_operator_mul_vector4"><reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_vector4#class-vector4"><inline classes="std std-ref">Vector4</inline></reference> 的每个分量乘以该 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-vector4i"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-vector4i" names="class_int_operator_mul_vector4i"><reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_vector4i#class-vector4i"><inline classes="std std-ref">Vector4i</inline></reference> 的每个分量乘以该 <strong>int</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-float" names="class_int_operator_mul_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 和该 <strong>int</strong> 相乘。结果为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-mul-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-mul-int" names="class_int_operator_mul_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将两个 <strong>int</strong> 相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-pow-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-pow-float" names="class_int_operator_pow_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator **</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将 <strong>int</strong> 提升到 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 次幂。结果为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(2 ** 0.5) # 输出 1.4142135623731</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-pow-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-pow-int" names="class_int_operator_pow_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator **</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将左侧的 <strong>int</strong> 提升到右侧的 <strong>int</strong> 次幂。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(3 ** 4) # 输出 81</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-sum-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-sum-float" names="class_int_operator_sum_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator +</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <strong>int</strong> 加上该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。结果为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-sum-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-sum-int" names="class_int_operator_sum_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator +</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将两个 <strong>int</strong> 相加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-dif-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-dif-float" names="class_int_operator_dif_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator -</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <strong>int</strong> 减去该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。结果为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-dif-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-dif-int" names="class_int_operator_dif_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator -</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将两个 <strong>int</strong> 相减。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-div-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-div-float" names="class_int_operator_div_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>operator /</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将该 <strong>int</strong> 除以该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。结果为 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(10 / 3.0) # 输出 3.33333333333333</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-div-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-div-int" names="class_int_operator_div_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator /</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>将两个 <strong>int</strong> 相除。结果为 <strong>int</strong>。这样会截断该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，丢弃小数点后的部分。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(6 / 2) # 输出 3
print(5 / 3) # 输出 1</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-lt-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-lt-float" names="class_int_operator_lt_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>int</strong> 小于该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-lt-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-lt-int" names="class_int_operator_lt_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的 <strong>int</strong> 小于右侧的 <strong>int</strong>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-bwsl-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-bwsl-int" names="class_int_operator_bwsl_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator &lt;&lt;</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>执行按位左移操作。效果上与乘以 2 的幂相同。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0b1010 &lt;&lt; 1) # 输出 20（二进制 10100）
print(0b1010 &lt;&lt; 3) # 输出 80（二进制 1010000）</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-lte-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-lte-float" names="class_int_operator_lte_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;=</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>int</strong> 小于等于该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-lte-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-lte-int" names="class_int_operator_lte_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;=</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的 <strong>int</strong> 小于等于右侧的 <strong>int</strong>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-eq-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-eq-float" names="class_int_operator_eq_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>int</strong> 等于该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-eq-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-eq-int" names="class_int_operator_eq_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个 <strong>int</strong> 相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-gt-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-gt-float" names="class_int_operator_gt_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>int</strong> 大于该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-gt-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-gt-int" names="class_int_operator_gt_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的 <strong>int</strong> 大于右侧的 <strong>int</strong>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-gte-float"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-gte-float" names="class_int_operator_gte_float"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;=</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果该 <strong>int</strong> 大于等于该 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-gte-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-gte-int" names="class_int_operator_gte_int"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;=</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左侧的 <strong>int</strong> 大于等于右侧的 <strong>int</strong>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-bwsr-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-bwsr-int" names="class_int_operator_bwsr_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator &gt;&gt;</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>执行按位右移操作。效果上与除以 2 的幂相同。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0b1010 &gt;&gt; 1) # 输出 5（二进制 101）
print(0b1010 &gt;&gt; 2) # 输出 2（二进制 10）</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-bwxor-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-bwxor-int" names="class_int_operator_bwxor_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator ^</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>执行按位 <literal>XOR</literal>（异或）运算。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0b1100 ^ 0b1010) # 输出 6（二进制 110）</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-unplus"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-unplus" names="class_int_operator_unplus"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator unary+</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回与 <literal>+</literal> 不存在时相同的值。单目 <literal>+</literal> 没有作用，但有时可以使你的代码更具可读性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-unminus"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-unminus" names="class_int_operator_unminus"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator unary-</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回该 <strong>int</strong> 的相反值。如果为正数，则该将数变为负数。如果为负数，则将该数变为正数。如果为零，则不执行任何操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-bwor-int"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-bwor-int" names="class_int_operator_bwor_int"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator |</strong> <strong>(</strong> <reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>执行按位 <literal>OR</literal>（或）运算。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(0b1100 | 0b1010) # 输出 14（二进制 1110）</literal_block>
            <paragraph>可用于在变量中存储二进制标记。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var flags = 0
flags |= 0b101 # 置第一和第三位。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-int-operator-bwnot"></target>
            <paragraph classes="classref-operator" ids="class-int-operator-bwnot" names="class_int_operator_bwnot"><reference internal="True" refid="class-int"><inline classes="std std-ref">int</inline></reference> <strong>operator ~</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>对该 <strong>int</strong> 执行按位 <literal>NOT</literal>（反）运算。由于<reference name="补码" refuri="https://zh.wikipedia.org/zh-cn/%E4%BA%8C%E8%A3%9C%E6%95%B8">补码</reference>，效果上与 <literal>-(int + 1)</literal> 相同。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(~4) # 输出 -5
print(~(-7)) # 输出 6</literal_block>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
