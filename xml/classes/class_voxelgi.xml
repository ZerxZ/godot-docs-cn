<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_voxelgi.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VoxelGI.xml.</comment>
    <target refid="class-voxelgi"></target>
    <section ids="voxelgi class-voxelgi" names="voxelgi class_voxelgi">
        <title>VoxelGI</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>实时全局光照（GI）探测。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>VoxelGI</strong> 用于为场景提供高质量的实时的间接光照和反射。它们预先计算发光物体的效果和静态几何体的效果，以实时模拟复杂光线的行为。<strong>VoxelGI</strong> 需要经过烘焙才能产生可见的效果。然而，一旦烘焙，动态对象将接收来自它们的光。此外，灯光可以是完全动态的，也可以是烘焙的。</paragraph>
            <paragraph><strong>注意：</strong><strong>VoxelGI</strong> 只支持 Forward+ 渲染方式，不支持 Mobile 或 Compatibility。</paragraph>
            <paragraph><strong>程序生成：</strong><strong>VoxelGI</strong> 可以在导出的项目中烘焙，这使得它适用于程序生成或用户构建的关卡，只要所有几何体都预先生成即可。对于在游戏过程中随时生成几何图形的游戏，SDFGI 更合适（参见 <reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>）。</paragraph>
            <paragraph><strong>性能：</strong><strong>VoxelGI</strong> 对 GPU 要求比较高，不适合集成显卡等低端硬件（可以考虑改用 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference>）。要提高性能，请在项目设置中，调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-voxel-gi-quality"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/voxel_gi/quality</inline></reference>，并启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-global-illumination-gi-use-half-resolution"><inline classes="std std-ref">ProjectSettings.rendering/global_illumination/gi/use_half_resolution</inline></reference>。要为低端硬件提供后备方案，请考虑在项目的选项菜单中，添加一个选项，以禁用 <strong>VoxelGI</strong>。<strong>VoxelGI</strong> 节点可以通过隐藏而禁用。</paragraph>
            <paragraph><strong>注意：</strong>网格应该有足够厚的壁（避免单面墙）以避免漏光。对于内部关卡，请将关卡几何体封装在一个足够大的盒子中，并桥接循环边以闭合网格。为了进一步防止漏光，还可以策略性地放置临时 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 节点，并将其 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-gi-mode"><inline classes="std std-ref">GeometryInstance3D.gi_mode</inline></reference> 设置为 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-constant-gi-mode-static"><inline classes="std std-ref">GeometryInstance3D.GI_MODE_STATIC</inline></reference>。然后可以在烘焙 <strong>VoxelGI</strong> 节点后，隐藏这些临时节点。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/global_illumination/using_voxel_gi"><inline classes="doc">使用体素全局光照</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="第三人称射击（TPS）演示" refuri="https://godotengine.org/asset-library/asset/2710">第三人称射击（TPS）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="25"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgi-property-camera-attributes"><inline classes="std std-ref">camera_attributes</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_voxelgidata#class-voxelgidata"><inline classes="std std-ref">VoxelGIData</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgi-property-data"><inline classes="std std-ref">data</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgi-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(20, 20, 20)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgi-property-subdiv"><inline classes="std std-ref">subdiv</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="8"></colspec>
                    <colspec colwidth="145"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgi-method-bake"><inline classes="std std-ref">bake</inline></reference>(from_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> = null, create_visual_debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-voxelgi-method-debug-bake"><inline classes="std std-ref">debug_bake</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-voxelgi-subdiv"></target>
            <paragraph classes="classref-enumeration" ids="enum-voxelgi-subdiv" names="enum_voxelgi_subdiv">enum <strong>Subdiv</strong>: <reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-voxelgi-constant-subdiv-64"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-voxelgi-constant-subdiv-64" names="class_voxelgi_constant_subdiv_64"><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> <strong>SUBDIV_64</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 64 分区，这是最低的质量设置，但也是最快的。如果你能使用它，特别是在低端硬件上使用它。</paragraph>
            <target refid="class-voxelgi-constant-subdiv-128"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-voxelgi-constant-subdiv-128" names="class_voxelgi_constant_subdiv_128"><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> <strong>SUBDIV_128</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 128 个分区。这是默认的质量设置。</paragraph>
            <target refid="class-voxelgi-constant-subdiv-256"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-voxelgi-constant-subdiv-256" names="class_voxelgi_constant_subdiv_256"><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> <strong>SUBDIV_256</strong> = <literal>2</literal></paragraph>
            <paragraph>使用 256 个分区。</paragraph>
            <target refid="class-voxelgi-constant-subdiv-512"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-voxelgi-constant-subdiv-512" names="class_voxelgi_constant_subdiv_512"><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> <strong>SUBDIV_512</strong> = <literal>3</literal></paragraph>
            <paragraph>使用 512 个分区。这是最高的质量设置，但也是最慢的。在低端硬件上，这可能会导致 GPU 停顿。</paragraph>
            <target refid="class-voxelgi-constant-subdiv-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-voxelgi-constant-subdiv-max" names="class_voxelgi_constant_subdiv_max"><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> <strong>SUBDIV_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> 举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-voxelgi-property-camera-attributes"></target>
            <paragraph classes="classref-property" ids="class-voxelgi-property-camera-attributes" names="class_voxelgi_property_camera_attributes"><reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference> <strong>camera_attributes</strong> <reference internal="True" refid="class-voxelgi-property-camera-attributes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_camera_attributes</strong>(value: <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference> <strong>get_camera_attributes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定烘焙所使用的曝光级别的 <reference internal="True" refuri="class_cameraattributes#class-cameraattributes"><inline classes="std std-ref">CameraAttributes</inline></reference> 资源。自动曝光和非曝光属性会被忽略。曝光设置应当用于降低烘焙时的动态范围。如果曝光过高，<strong>VoxelGI</strong> 会产生色带问题，也可能出现过曝问题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgi-property-data"></target>
            <paragraph classes="classref-property" ids="class-voxelgi-property-data" names="class_voxelgi_property_data"><reference internal="True" refuri="class_voxelgidata#class-voxelgidata"><inline classes="std std-ref">VoxelGIData</inline></reference> <strong>data</strong> <reference internal="True" refid="class-voxelgi-property-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_probe_data</strong>(value: <reference internal="True" refuri="class_voxelgidata#class-voxelgidata"><inline classes="std std-ref">VoxelGIData</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_voxelgidata#class-voxelgidata"><inline classes="std std-ref">VoxelGIData</inline></reference> <strong>get_probe_data</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为该 <strong>VoxelGI</strong> 存放数据的 <reference internal="True" refuri="class_voxelgidata#class-voxelgidata"><inline classes="std std-ref">VoxelGIData</inline></reference> 资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgi-property-size"></target>
            <paragraph classes="classref-property" ids="class-voxelgi-property-size" names="class_voxelgi_property_size"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>size</strong> = <literal>Vector3(20, 20, 20)</literal> <reference internal="True" refid="class-voxelgi-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>VoxelGI</strong> 所覆盖区域的大小。如果你扩大了范围，但没有使用 <reference internal="True" refid="class-voxelgi-property-subdiv"><inline classes="std std-ref">subdiv</inline></reference> 增加细分，则每个单元格的大小都将增加，导致照明细节下降。</paragraph>
            <paragraph><strong>注意：</strong>大小在每个轴上被限制为 1.0 或更多。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgi-property-subdiv"></target>
            <paragraph classes="classref-property" ids="class-voxelgi-property-subdiv" names="class_voxelgi_property_subdiv"><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> <strong>subdiv</strong> = <literal>1</literal> <reference internal="True" refid="class-voxelgi-property-subdiv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_subdiv</strong>(value: <reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-voxelgi-subdiv"><inline classes="std std-ref">Subdiv</inline></reference> <strong>get_subdiv</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>对 <strong>VoxelGI</strong> 操作的栅格进行细分的次数。数字越大，细节越精细，因此视觉质量越高，而数字越小则性能越好。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-voxelgi-method-bake"></target>
            <paragraph classes="classref-method" ids="class-voxelgi-method-bake" names="class_voxelgi_method_bake"><abbreviation explanation="无返回值。">void</abbreviation> <strong>bake</strong>(from_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> = null, create_visual_debug: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-voxelgi-method-bake"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>烘焙来自所有标记为 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-constant-gi-mode-static"><inline classes="std std-ref">GeometryInstance3D.GI_MODE_STATIC</inline></reference> 的 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> 以及标记为 <reference internal="True" refuri="class_light3d#class-light3d-constant-bake-static"><inline classes="std std-ref">Light3D.BAKE_STATIC</inline></reference> 或 <reference internal="True" refuri="class_light3d#class-light3d-constant-bake-dynamic"><inline classes="std std-ref">Light3D.BAKE_DYNAMIC</inline></reference> 的 <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> 的效果。如果 <literal>create_visual_debug</literal> 为 <literal>true</literal>，则烘焙光照后会生成一个 <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>，用立方体代表各个实体单元格，每个立方体都使用对应单元格的反照率颜色着色。这样就对 <strong>VoxelGI</strong> 的数据进行了可视化，可以用来调试可能发生的问题。</paragraph>
            <paragraph><strong>注意：</strong>编辑器和导出后的项目中都可以使用 <reference internal="True" refid="class-voxelgi-method-bake"><inline classes="std std-ref">bake</inline></reference>。因此可用于程序式生成或用户构建的关卡。对于大多数场景，烘焙 <strong>VoxelGI</strong> 节点一般需要 5 到 20 秒。降低 <reference internal="True" refid="class-voxelgi-property-subdiv"><inline classes="std std-ref">subdiv</inline></reference> 可以加速烘焙。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> 和 <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> 节点必须在调用 <reference internal="True" refid="class-voxelgi-method-bake"><inline classes="std std-ref">bake</inline></reference> 前完全就绪。如果这些节点是程序式生成的，而烘焙后的 <strong>VoxelGI</strong> 中缺失部分网格和灯光，请使用 <literal>call_deferred("bake")</literal>，不要直接调用 <reference internal="True" refid="class-voxelgi-method-bake"><inline classes="std std-ref">bake</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-voxelgi-method-debug-bake"></target>
            <paragraph classes="classref-method" ids="class-voxelgi-method-debug-bake" names="class_voxelgi_method_debug_bake"><abbreviation explanation="无返回值。">void</abbreviation> <strong>debug_bake</strong>() <reference internal="True" refid="class-voxelgi-method-debug-bake"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在启用 <literal>create_visual_debug</literal> 的情况下调用 <reference internal="True" refid="class-voxelgi-method-bake"><inline classes="std std-ref">bake</inline></reference> 。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
