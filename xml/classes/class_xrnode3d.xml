<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_xrnode3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/XRNode3D.xml.</comment>
    <target refid="class-xrnode3d"></target>
    <section ids="xrnode3d class-xrnode3d" names="xrnode3d class_xrnode3d">
        <title>XRNode3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_xranchor3d#class-xranchor3d"><inline classes="std std-ref">XRAnchor3D</inline></reference>, <reference internal="True" refuri="class_xrcontroller3d#class-xrcontroller3d"><inline classes="std std-ref">XRController3D</inline></reference></paragraph>
        <paragraph>空间节点，位置由 <reference internal="True" refuri="class_xrserver#class-xrserver"><inline classes="std std-ref">XRServer</inline></reference> 自动更新。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个节点可以绑定到 <reference internal="True" refuri="class_xrpositionaltracker#class-xrpositionaltracker"><inline classes="std std-ref">XRPositionalTracker</inline></reference> 的某个姿势，<reference internal="True" refuri="class_xrserver#class-xrserver"><inline classes="std std-ref">XRServer</inline></reference> 会自动更新其 <reference internal="True" refuri="class_node3d#class-node3d-property-transform"><inline classes="std std-ref">Node3D.transform</inline></reference>。这类节点必须添加为 <reference internal="True" refuri="class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> 节点的子节点。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/xr/index"><inline classes="doc">XR 文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="69"></colspec>
                    <colspec colwidth="16"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrnode3d-property-pose"><inline classes="std std-ref">pose</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;"default"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrnode3d-property-show-when-tracked"><inline classes="std std-ref">show_when_tracked</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrnode3d-property-tracker"><inline classes="std std-ref">tracker</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;""</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="281"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrnode3d-method-get-has-tracking-data"><inline classes="std std-ref">get_has_tracking_data</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrnode3d-method-get-is-active"><inline classes="std std-ref">get_is_active</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrpose#class-xrpose"><inline classes="std std-ref">XRPose</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrnode3d-method-get-pose"><inline classes="std std-ref">get_pose</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrnode3d-method-trigger-haptic-pulse"><inline classes="std std-ref">trigger_haptic_pulse</inline></reference>(action_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, frequency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delay_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-xrnode3d-signal-tracking-changed"></target>
            <paragraph classes="classref-signal" ids="class-xrnode3d-signal-tracking-changed" names="class_xrnode3d_signal_tracking_changed"><strong>tracking_changed</strong>(tracking: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-xrnode3d-signal-tracking-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refid="class-xrnode3d-property-tracker"><inline classes="std std-ref">tracker</inline></reference> 开始或停止接收正被跟踪的 <reference internal="True" refid="class-xrnode3d-property-pose"><inline classes="std std-ref">pose</inline></reference> 的更新跟踪数据时发出。<literal>tracking</literal> 参数指示跟踪器是否正在获取更新的跟踪数据。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-xrnode3d-property-pose"></target>
            <paragraph classes="classref-property" ids="class-xrnode3d-property-pose" names="class_xrnode3d_property_pose"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>pose</strong> = <literal>&amp;"default"</literal> <reference internal="True" refid="class-xrnode3d-property-pose"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pose_name</strong>(value: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_pose_name</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>我们绑定到的姿势的名称。设计时并不知道跟踪器支持哪些姿势。</paragraph>
            <paragraph>Godot 定义了许多标准姿势名称，例如 <literal>aim</literal> 和 <literal>grip</literal>，但也可以在给定的 <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> 中配置其他名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrnode3d-property-show-when-tracked"></target>
            <paragraph classes="classref-property" ids="class-xrnode3d-property-show-when-tracked" names="class_xrnode3d_property_show_when_tracked"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_when_tracked</strong> = <literal>false</literal> <reference internal="True" refid="class-xrnode3d-property-show-when-tracked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_when_tracked</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_show_when_tracked</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用在跟踪开始时显示节点，并在跟踪丢失时隐藏节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrnode3d-property-tracker"></target>
            <paragraph classes="classref-property" ids="class-xrnode3d-property-tracker" names="class_xrnode3d_property_tracker"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>tracker</strong> = <literal>&amp;""</literal> <reference internal="True" refid="class-xrnode3d-property-tracker"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tracker</strong>(value: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_tracker</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>我们绑定到的追踪器的名称。设计时并不知道有哪些跟踪器可用。</paragraph>
            <paragraph>Godot 定义了许多标准跟踪器，例如 <literal>left_hand</literal> 和 <literal>right_hand</literal>，但也可以在给定的 <reference internal="True" refuri="class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> 中配置其他跟踪器。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-xrnode3d-method-get-has-tracking-data"></target>
            <paragraph classes="classref-method" ids="class-xrnode3d-method-get-has-tracking-data" names="class_xrnode3d_method_get_has_tracking_data"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_has_tracking_data</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrnode3d-method-get-has-tracking-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-xrnode3d-property-tracker"><inline classes="std std-ref">tracker</inline></reference> 中有被跟踪 <reference internal="True" refid="class-xrnode3d-property-pose"><inline classes="std std-ref">pose</inline></reference> 的当前跟踪数据，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrnode3d-method-get-is-active"></target>
            <paragraph classes="classref-method" ids="class-xrnode3d-method-get-is-active" names="class_xrnode3d_method_get_is_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_is_active</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrnode3d-method-get-is-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-xrnode3d-property-tracker"><inline classes="std std-ref">tracker</inline></reference> 已注册，并且 <reference internal="True" refid="class-xrnode3d-property-pose"><inline classes="std std-ref">pose</inline></reference> 正在被追踪，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrnode3d-method-get-pose"></target>
            <paragraph classes="classref-method" ids="class-xrnode3d-method-get-pose" names="class_xrnode3d_method_get_pose"><reference internal="True" refuri="class_xrpose#class-xrpose"><inline classes="std std-ref">XRPose</inline></reference> <strong>get_pose</strong>() <reference internal="True" refid="class-xrnode3d-method-get-pose"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含被跟踪姿势的当前状态的 <reference internal="True" refuri="class_xrpose#class-xrpose"><inline classes="std std-ref">XRPose</inline></reference>。这可以访问此姿势的其他属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrnode3d-method-trigger-haptic-pulse"></target>
            <paragraph classes="classref-method" ids="class-xrnode3d-method-trigger-haptic-pulse" names="class_xrnode3d_method_trigger_haptic_pulse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>trigger_haptic_pulse</strong>(action_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, frequency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delay_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-xrnode3d-method-trigger-haptic-pulse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Triggers a haptic pulse on a device associated with this interface.</paragraph>
            <paragraph><literal>action_name</literal> is the name of the action for this pulse.</paragraph>
            <paragraph><literal>frequency</literal> is the frequency of the pulse, set to <literal>0.0</literal> to have the system use a default frequency.</paragraph>
            <paragraph><literal>amplitude</literal> is the amplitude of the pulse between <literal>0.0</literal> and <literal>1.0</literal>.</paragraph>
            <paragraph><literal>duration_sec</literal> is the duration of the pulse in seconds.</paragraph>
            <paragraph><literal>delay_sec</literal> is a delay in seconds before the pulse is given.</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
