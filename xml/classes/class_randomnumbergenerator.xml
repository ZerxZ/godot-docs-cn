<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_randomnumbergenerator.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/RandomNumberGenerator.xml.</comment>
    <target refid="class-randomnumbergenerator"></target>
    <section ids="randomnumbergenerator class-randomnumbergenerator" names="randomnumbergenerator class_randomnumbergenerator">
        <title>RandomNumberGenerator</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供生成伪随机数的方法。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>RandomNumberGenerator 是一个用于生成伪随机数的类。它目前使用 <reference name="PCG32" refuri="https://www.pcg-random.org/">PCG32</reference>。</paragraph>
            <paragraph><strong>注意：</strong>底层算法属于实现细节，不应该对此产生依赖。</paragraph>
            <paragraph>要根据时间相关种子生成（给定范围内的）随机浮点数：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var rng = RandomNumberGenerator.new()
func _ready():
    var my_random_number = rng.randf_range(-10.0, 10.0)</literal_block>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/random_number_generation"><inline classes="doc">随机数生成</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="58"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-property-seed"><inline classes="std std-ref">seed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-property-state"><inline classes="std std-ref">state</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="149"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-method-rand-weighted"><inline classes="std std-ref">rand_weighted</inline></reference>(weights: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-method-randf"><inline classes="std std-ref">randf</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-method-randf-range"><inline classes="std std-ref">randf_range</inline></reference>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-method-randfn"><inline classes="std std-ref">randfn</inline></reference>(mean: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, deviation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-method-randi"><inline classes="std std-ref">randi</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-method-randi-range"><inline classes="std std-ref">randi_range</inline></reference>(from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-randomnumbergenerator-method-randomize"><inline classes="std std-ref">randomize</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-randomnumbergenerator-property-seed"></target>
            <paragraph classes="classref-property" ids="class-randomnumbergenerator-property-seed" names="class_randomnumbergenerator_property_seed"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>seed</strong> = <literal>0</literal> <reference internal="True" refid="class-randomnumbergenerator-property-seed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_seed</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_seed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>根据给定的种子值初始化随机数生成器状态。给定的种子将给出一个可重现的伪随机数序列。</paragraph>
            <paragraph><strong>注意：</strong>RNG 没有雪崩效应，给定相似的种子可以输出相似的随机流。如果种子来自外部，请考虑使用哈希函数来提高种子质量。</paragraph>
            <paragraph><strong>注意：</strong>设置该属性会产生改变内部 <reference internal="True" refid="class-randomnumbergenerator-property-state"><inline classes="std std-ref">state</inline></reference> 的副作用，因此请确保在修改 <reference internal="True" refid="class-randomnumbergenerator-property-state"><inline classes="std std-ref">state</inline></reference> <emphasis>之前</emphasis>初始化种子：</paragraph>
            <paragraph><strong>注意：</strong>该属性的默认值是伪随机的，会在调用 <reference internal="True" refid="class-randomnumbergenerator-method-randomize"><inline classes="std std-ref">randomize</inline></reference> 时改变。文档中记录的 <literal>0</literal> 是占位符，不是实际的默认种子。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var rng = RandomNumberGenerator.new()
rng.seed = hash("Godot")
rng.state = 100 # 恢复到之前保存的一些状态。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-randomnumbergenerator-property-state"></target>
            <paragraph classes="classref-property" ids="class-randomnumbergenerator-property-state" names="class_randomnumbergenerator_property_state"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>state</strong> = <literal>0</literal> <reference internal="True" refid="class-randomnumbergenerator-property-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_state</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_state</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>随机数生成器的当前状态。保存并恢复此属性，以将生成器恢复到之前的状态：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var rng = RandomNumberGenerator.new()
print(rng.randf())
var saved_state = rng.state # 保存当前状态。
print(rng.randf()) # 让内部状态发生步进。
rng.state = saved_state # 恢复状态。
print(rng.randf()) # 输出和之前一样的值。</literal_block>
            <paragraph><strong>注意：</strong>不要将状态设置为任意值，因为随机数生成器要求状态具有某些特性才能正常运行。它应该只设置为来自状态属性本身的值。要使用任意输入初始化随机数生成器，请改用 <reference internal="True" refid="class-randomnumbergenerator-property-seed"><inline classes="std std-ref">seed</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该属性的默认值是伪随机的，会在调用 <reference internal="True" refid="class-randomnumbergenerator-method-randomize"><inline classes="std std-ref">randomize</inline></reference> 时改变。文档中记录的 <literal>0</literal> 是占位符，不是实际的默认种子。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-randomnumbergenerator-method-rand-weighted"></target>
            <paragraph classes="classref-method" ids="class-randomnumbergenerator-method-rand-weighted" names="class_randomnumbergenerator_method_rand_weighted"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>rand_weighted</strong>(weights: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <reference internal="True" refid="class-randomnumbergenerator-method-rand-weighted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有非均匀权重的随机索引。如果数组为空，则输出错误并返回 <literal>-1</literal>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var rng = RandomNumberGenerator.new()

var my_array = ["one", "two", "three", "four"]
var weights = PackedFloat32Array([0.5, 1, 1, 2])

# 输出 `my_array` 中的四个元素之一。
# 更有可能输出 “four”，而不太可能输出 “one”。
print(my_array[rng.rand_weighted(weights)])</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-randomnumbergenerator-method-randf"></target>
            <paragraph classes="classref-method" ids="class-randomnumbergenerator-method-randf" names="class_randomnumbergenerator_method_randf"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>randf</strong>() <reference internal="True" refid="class-randomnumbergenerator-method-randf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>0.0</literal> 和 <literal>1.0</literal> 之间（含端点）的伪随机浮点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-randomnumbergenerator-method-randf-range"></target>
            <paragraph classes="classref-method" ids="class-randomnumbergenerator-method-randf-range" names="class_randomnumbergenerator_method_randf_range"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>randf_range</strong>(from: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, to: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-randomnumbergenerator-method-randf-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>from</literal> 和 <literal>to</literal> 之间（含端点）的伪随机浮点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-randomnumbergenerator-method-randfn"></target>
            <paragraph classes="classref-method" ids="class-randomnumbergenerator-method-randfn" names="class_randomnumbergenerator_method_randfn"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>randfn</strong>(mean: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, deviation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-randomnumbergenerator-method-randfn"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个<reference name="正态分布" refuri="https://en.wikipedia.org/wiki/Normal_distribution">正态分布</reference>的伪随机数，该分布使用指定的 <literal>mean</literal> 和标准 <literal>deviation</literal>。这也被称为高斯分布。</paragraph>
            <paragraph><strong>注意：</strong>该方法使用 <reference name="Box-Muller 变换" refuri="https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform">Box-Muller 变换</reference>算法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-randomnumbergenerator-method-randi"></target>
            <paragraph classes="classref-method" ids="class-randomnumbergenerator-method-randi" names="class_randomnumbergenerator_method_randi"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>randi</strong>() <reference internal="True" refid="class-randomnumbergenerator-method-randi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>0</literal> 和 <literal>4294967295</literal> 之间（含端点）的伪随机 32 位无符号整数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-randomnumbergenerator-method-randi-range"></target>
            <paragraph classes="classref-method" ids="class-randomnumbergenerator-method-randi-range" names="class_randomnumbergenerator_method_randi_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>randi_range</strong>(from: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-randomnumbergenerator-method-randi-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在 <literal>from</literal> 和 <literal>to</literal> 之间（含端点）的伪随机 32 位无符号整数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-randomnumbergenerator-method-randomize"></target>
            <paragraph classes="classref-method" ids="class-randomnumbergenerator-method-randomize" names="class_randomnumbergenerator_method_randomize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>randomize</strong>() <reference internal="True" refid="class-randomnumbergenerator-method-randomize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为这个 <strong>RandomNumberGenerator</strong> 实例设置基于时间的种子。与 <reference internal="True" refuri="class_@globalscope#class-globalscope"><inline classes="std std-ref">@GlobalScope</inline></reference> 随机数生成函数不同，不同的 <strong>RandomNumberGenerator</strong> 实例可以使用不同的种子。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
