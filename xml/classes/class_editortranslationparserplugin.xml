<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editortranslationparserplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorTranslationParserPlugin.xml.</comment>
    <target refid="class-editortranslationparserplugin"></target>
    <section ids="editortranslationparserplugin class-editortranslationparserplugin" names="editortranslationparserplugin class_editortranslationparserplugin">
        <title>EditorTranslationParserPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于添加自定义解析器，以从自定义文件（.csv、.json等）提取已翻译的字符串的插件。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EditorTranslationParserPlugin</strong>在文件被解析以提取需要翻译的字符串时被调用。为了定义解析和提取字符串的逻辑，在脚本中覆盖 <reference internal="True" refid="class-editortranslationparserplugin-private-method-parse-file"><inline classes="std std-ref">_parse_file</inline></reference> 方法。</paragraph>
            <paragraph>如果使用上下文或复数形式，则将提取的字符串添加到参数 <literal>msgids</literal> 或 <literal>msgids_context_plural</literal>。</paragraph>
            <paragraph>添加到 <literal>msgids_context_plural</literal> 时，必须使用格式 <literal>["A", "B", "C"]</literal> 添加数据，其中 <literal>A</literal> 表示提取的字符串，<literal>B</literal> 表示上下文，<literal>C</literal> 表示提取的字符串的复数形式。如果只想添加上下文而不添加复数形式，请将 <literal>""</literal> 用于复数形式槽。如果只想添加复数形式而不是上下文，做法也是一样的。有关具体示例，请参阅下面的代码。</paragraph>
            <paragraph>提取的字符串将被写入用户在“项目设置”菜单的“本地化”选项卡中的“POT 生成”下选择的 POT 文件中。</paragraph>
            <paragraph>下面显示了一个自定义解析器的示例，该解析器从 CSV 文件中提取字符串以写入 POT 中。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorTranslationParserPlugin

func _parse_file(path, msgids, msgids_context_plural):
    var file = FileAccess.open(path, FileAccess.READ)
    var text = file.get_as_text()
    var split_strs = text.split(",", false)
    for s in split_strs:
        msgids.append(s)
        #print("提取的字符串：" + s)

func _get_recognized_extensions():
    return ["csv"]</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

[Tool]
public partial class CustomParser : EditorTranslationParserPlugin
{
    public override void _ParseFile(string path, Godot.Collections.Array&lt;string&gt; msgids, Godot.Collections.Array&lt;Godot.Collections.Array&gt; msgidsContextPlural)
    {
        using var file = FileAccess.Open(path, FileAccess.ModeFlags.Read);
        string text = file.GetAsText();
        string[] splitStrs = text.Split(",", allowEmpty: false);
        foreach (string s in splitStrs)
        {
            msgids.Add(s);
            //GD.Print($"提取的字符串：{s}");
        }
    }

    public override string[] _GetRecognizedExtensions()
    {
        return new string[] { "csv" };
    }
}</literal_block>
                </div>
            </container>
            <paragraph>要添加一个与上下文或复数关联的可翻译字符串，请将其添加到 <literal>msgids_context_plural</literal>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 这将添加一条消息，其中 msgid 为“测试 1”、msgctxt 为“上下文”，以及 msgid_plural 为“测试 1 复数形式”。
msgids_context_plural.append(["测试 1", "上下文", "测试 1 复数形式"])
# 这将添加一条消息，其中 msgid 为“一个没有上下文的测试”、msgid_plural 为 “复数形式”。
msgids_context_plural.append(["一个没有上下文的测试", "", "复数形式"])
# 这将添加一条消息，其中 msgid 为“仅带有上下文”、msgctxt 为 “一条友好的上下文”。
msgids_context_plural.append(["仅带有上下文", "一条友好的上下文", ""])</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 这将添加一条消息，其中 msgid 为“测试 1”、msgctxt 为“上下文”，以及 msgid_plural 为“测试 1 复数形式”。
msgidsContextPlural.Add(new Godot.Collections.Array{"测试 1", "上下文", "测试 1 复数形式"});
// 这将添加一条消息，其中 msgid 为“一个没有上下文的测试”、msgid_plural 为 “复数形式”。
msgidsContextPlural.Add(new Godot.Collections.Array{"一个没有上下文的测试", "", "复数形式"});
// 这将添加一条消息，其中 msgid 为“仅带有上下文”、msgctxt 为 “一条友好的上下文”。
msgidsContextPlural.Add(new Godot.Collections.Array{"仅带有上下文", "一条友好的上下文", ""});</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>如果覆盖了标准脚本类型（GDScript、C# 等）的解析逻辑，最好使用 <reference internal="True" refuri="class_resourceloader#class-resourceloader-method-load"><inline classes="std std-ref">ResourceLoader.load</inline></reference> 加载 <literal>path</literal> 参数。这是因为内置脚本被加载为 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 类型，而不是 <reference internal="True" refuri="class_fileaccess#class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> 类型。</paragraph>
            <paragraph>例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _parse_file(path, msgids, msgids_context_plural):
    var res = ResourceLoader.load(path, "Script")
    var text = res.source_code
    # 解析逻辑。

func _get_recognized_extensions():
    return ["gd"]</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _ParseFile(string path, Godot.Collections.Array&lt;string&gt; msgids, Godot.Collections.Array&lt;Godot.Collections.Array&gt; msgidsContextPlural)
{
    var res = ResourceLoader.Load&lt;Script&gt;(path, "Script");
    string text = res.SourceCode;
    // 解析逻辑。
}

public override string[] _GetRecognizedExtensions()
{
    return new string[] { "gd" };
}</literal_block>
                </div>
            </container>
            <paragraph>要使用 <strong>EditorTranslationParserPlugin</strong>，请先使用 <reference internal="True" refuri="class_editorplugin#class-editorplugin-method-add-translation-parser-plugin"><inline classes="std std-ref">EditorPlugin.add_translation_parser_plugin</inline></reference> 方法注册它。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="228"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editortranslationparserplugin-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editortranslationparserplugin-private-method-parse-file"><inline classes="std std-ref">_parse_file</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String[]</inline></reference> msgids, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array[]</inline></reference> msgids_context_plural <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editortranslationparserplugin-private-method-get-recognized-extensions"></target>
            <paragraph classes="classref-method" ids="class-editortranslationparserplugin-private-method-get-recognized-extensions" names="class_editortranslationparserplugin_private_method__get_recognized_extensions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_recognized_extensions</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取与该解析器关联的文件扩展名列表，例如 <literal>["csv"]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editortranslationparserplugin-private-method-parse-file"></target>
            <paragraph classes="classref-method" ids="class-editortranslationparserplugin-private-method-parse-file" names="class_editortranslationparserplugin_private_method__parse_file">void <strong>_parse_file</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String[]</inline></reference> msgids, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array[]</inline></reference> msgids_context_plural <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>覆盖该方法，定义自定义解析逻辑以提取可翻译的字符串。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
