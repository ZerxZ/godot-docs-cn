<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodecustom.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeCustom.xml.</comment>
    <target refid="class-visualshadernodecustom"></target>
    <section ids="visualshadernodecustom class-visualshadernodecustom" names="visualshadernodecustom class_visualshadernodecustom">
        <title>VisualShaderNodeCustom</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于定义自定义 <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> 的虚类，以便在可视化着色器编辑器中使用。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>继承这个类可以创建自定义的 <reference internal="True" refuri="class_visualshader#class-visualshader"><inline classes="std std-ref">VisualShader</inline></reference> 脚本扩展，会自动加入到 Visual Shader 编辑器中。<reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> 的行为可以通过覆盖虚方法定义。</paragraph>
            <paragraph>要让节点注册为编辑器扩展，你必须为你的自定义脚本使用 <literal>@tool</literal> 注解并提供 <literal>class_name</literal>。例如：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@tool
extends VisualShaderNodeCustom
class_name VisualShaderNodeNoise</literal_block>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/plugins/editor/visual_shader_plugins"><inline classes="doc">可视化着色器插件</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="322"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-category"><inline classes="std std-ref">_get_category</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-code"><inline classes="std std-ref">_get_code</inline></reference>(input_vars: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>], output_vars: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>], mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>, type: <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-default-input-port"><inline classes="std std-ref">_get_default_input_port</inline></reference>(type: <reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-description"><inline classes="std std-ref">_get_description</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-func-code"><inline classes="std std-ref">_get_func_code</inline></reference>(mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>, type: <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-global-code"><inline classes="std std-ref">_get_global_code</inline></reference>(mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-count"><inline classes="std std-ref">_get_input_port_count</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-default-value"><inline classes="std std-ref">_get_input_port_default_value</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-name"><inline classes="std std-ref">_get_input_port_name</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-type"><inline classes="std std-ref">_get_input_port_type</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-name"><inline classes="std std-ref">_get_name</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-output-port-count"><inline classes="std std-ref">_get_output_port_count</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-output-port-name"><inline classes="std std-ref">_get_output_port_name</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-output-port-type"><inline classes="std std-ref">_get_output_port_type</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-count"><inline classes="std std-ref">_get_property_count</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-default-index"><inline classes="std std-ref">_get_property_default_index</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-name"><inline classes="std std-ref">_get_property_name</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-options"><inline classes="std std-ref">_get_property_options</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-get-return-icon-type"><inline classes="std std-ref">_get_return_icon_type</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-is-available"><inline classes="std std-ref">_is_available</inline></reference>(mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>, type: <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-private-method-is-highend"><inline classes="std std-ref">_is_highend</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecustom-method-get-option-index"><inline classes="std std-ref">get_option_index</inline></reference>(option: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-visualshadernodecustom-private-method-get-category"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-category" names="class_visualshadernodecustom_private_method__get_category"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_category</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-category"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以定义 Visual Shader 编辑器的成员对话框中关联的自定义节点的路径。路径类似于 <literal>"MyGame/MyFunctions/Noise"</literal>。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。不覆盖时，该节点会被归在“Addons”分类下。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-code"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-code" names="class_visualshadernodecustom_private_method__get_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_code</strong>(input_vars: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>], output_vars: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>], mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>, type: <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以定义关联的自定义节点的实际着色器代码。着色器代码应该以字符串形式返回，可以包含多行（用 <literal>"""</literal> 构造多行字符串比较方便）。</paragraph>
            <paragraph><literal>input_vars</literal> 和 <literal>output_vars</literal> 数组包含各个输入和输出变量的字符串名称，这些变量由这个类的 <literal>_get_input_*</literal> 和 <literal>_get_output_*</literal> 虚方法定义。</paragraph>
            <paragraph>着色器代码中可以为输出端口赋值。例如 <literal>return output_vars[0] + " = " + input_vars[0] + ";"</literal>。</paragraph>
            <paragraph>你可以根据着色器模式 <literal>mode</literal>（见 <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>）和/或类型 <literal>type</literal>（见 <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>）自定义生成的代码。</paragraph>
            <paragraph><strong>必须</strong>定义这个方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-default-input-port"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-default-input-port" names="class_visualshadernodecustom_private_method__get_default_input_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_default_input_port</strong>(type: <reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-default-input-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法来定义当由于将连接从已有节点拖动到图形上的空白区域而创建节点时应默认连接的输入端口。</paragraph>
            <paragraph>定义这个方法是<strong>可选的</strong>，如果未被覆盖，将创建到第一个有效端口的连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-description"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-description" names="class_visualshadernodecustom_private_method__get_description"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_description</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-description"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以定义可视化着色器编辑器的成员对话框中的相关自定义节点的描述。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-func-code"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-func-code" names="class_visualshadernodecustom_private_method__get_func_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_func_code</strong>(mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>, type: <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-func-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以在每个着色器函数的开头添加着色器代码（单次）。着色器代码应该以字符串形式返回，可以包含多行（用 <literal>"""</literal> 构造多行字符串比较方便）。</paragraph>
            <paragraph>如果有多个不同类型的自定义节点同时使用这个特性，则插入的顺序是未定义的。</paragraph>
            <paragraph>你可以根据着色器模式 <literal>mode</literal>（见 <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>）和/或类型 <literal>type</literal>（见 <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>）自定义生成的代码。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-global-code"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-global-code" names="class_visualshadernodecustom_private_method__get_global_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_global_code</strong>(mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-global-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以在全局着色器的开头添加着色器代码，定义你自己的标准库，提供可复用的方法、varying、常量、uniform 等内容。着色器代码应该以字符串形式返回，可以包含多行（用 <literal>"""</literal> 构造多行字符串比较方便）。</paragraph>
            <paragraph>使用这个功能时请小心，因为可能造成与其他自定义节点的命名冲突，所以请务必为定义的实体提供唯一名称。</paragraph>
            <paragraph>你可以根据着色器模式 <literal>mode</literal>（见 <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>）自定义生成的代码。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-input-port-count"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-input-port-count" names="class_visualshadernodecustom_private_method__get_input_port_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_input_port_count</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以定义关联的自定义节点的输入端口数。</paragraph>
            <paragraph>定义该方法是<strong>必需的</strong>。如果没有被覆盖，则该节点没有输入端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-input-port-default-value"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-input-port-default-value" names="class_visualshadernodecustom_private_method__get_input_port_default_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_input_port_default_value</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法可以定义指定输入端口的默认值。优先使用该方法而不是 <reference internal="True" refuri="class_visualshadernode#class-visualshadernode-method-set-input-port-default-value"><inline classes="std std-ref">VisualShaderNode.set_input_port_default_value</inline></reference>。</paragraph>
            <paragraph>定义该方法是<strong>必需的</strong>。如果没有被覆盖，则该节点的输入端口没有默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-input-port-name"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-input-port-name" names="class_visualshadernodecustom_private_method__get_input_port_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_input_port_name</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法来定义相关自定义节点的输入端口的名称。这些名称既用于编辑器中的输入槽，也作为着色器代码中的标识符，并在<reference internal="True" refid="class-visualshadernodecustom-private-method-get-code"><inline classes="std std-ref">_get_code</inline></reference>中的<literal>input_vars</literal>数组中传递。</paragraph>
            <paragraph>定义这个方法是<strong>可选的</strong>，但推荐使用。如果没有被覆盖，输入端口被命名为<literal>"in"+str(port)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-input-port-type"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-input-port-type" names="class_visualshadernodecustom_private_method__get_input_port_type"><reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>_get_input_port_type</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-input-port-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以定义相关自定义节点的每个输入端口的返回类型，参阅<reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference>的可能类型。</paragraph>
            <paragraph>定义这个方法是<strong>可选的</strong>，但推荐使用。如果没有被覆盖，输入端口将返回 <reference internal="True" refuri="class_visualshadernode#class-visualshadernode-constant-port-type-scalar"><inline classes="std std-ref">VisualShaderNode.PORT_TYPE_SCALAR</inline></reference> 类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-name" names="class_visualshadernodecustom_private_method__get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_name</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法来定义可视化着色器编辑器的成员对话框和图中的相关自定义节点的名称。</paragraph>
            <paragraph>定义这个方法是<strong>可选的</strong>，但推荐使用。如果不覆盖，节点将被命名为 "Unnamed"。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-output-port-count"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-output-port-count" names="class_visualshadernodecustom_private_method__get_output_port_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_output_port_count</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-output-port-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以定义关联的自定义节点的输出端口数。</paragraph>
            <paragraph>定义该方法是<strong>必需的</strong>。如果没有被覆盖，则该节点没有输出端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-output-port-name"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-output-port-name" names="class_visualshadernodecustom_private_method__get_output_port_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_output_port_name</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-output-port-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法来定义相关自定义节点的输出端口的名称。这些名字既用于编辑器中的输出槽，也作为着色器代码中的标识符，并在<reference internal="True" refid="class-visualshadernodecustom-private-method-get-code"><inline classes="std std-ref">_get_code</inline></reference>中的<literal>output_vars</literal>数组中传递。</paragraph>
            <paragraph>定义这个方法是<strong>可选的</strong>，但推荐使用。如果没有被覆盖，输出端口被命名为<literal>"out" + str(port)</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-output-port-type"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-output-port-type" names="class_visualshadernodecustom_private_method__get_output_port_type"><reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>_get_output_port_type</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-output-port-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法以定义相关自定义节点的每个输出端口的返回类型，参阅<reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference>的可能类型。</paragraph>
            <paragraph>定义这个方法是<strong>可选的</strong>，但推荐使用。如果没有被覆盖，输出端口将返回<reference internal="True" refuri="class_visualshadernode#class-visualshadernode-constant-port-type-scalar"><inline classes="std std-ref">VisualShaderNode.PORT_TYPE_SCALAR</inline></reference>类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-property-count"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-property-count" names="class_visualshadernodecustom_private_method__get_property_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_property_count</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法来定义属性的数量。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-property-default-index"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-property-default-index" names="class_visualshadernodecustom_private_method__get_property_default_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_property_default_index</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-default-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以定义关联的自定义节点的属性的默认索引。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-property-name"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-property-name" names="class_visualshadernodecustom_private_method__get_property_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_property_name</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以定义关联的自定义节点的属性的名称。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-property-options"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-property-options" names="class_visualshadernodecustom_private_method__get_property_options"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_property_options</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-property-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以定义关联的自定义节点的下拉列表属性内的选项。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-get-return-icon-type"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-get-return-icon-type" names="class_visualshadernodecustom_private_method__get_return_icon_type"><reference internal="True" refuri="class_visualshadernode#enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>_get_return_icon_type</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-get-return-icon-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖此方法来定义可视化着色器编辑器的成员对话框中相关自定义节点的返回图标。</paragraph>
            <paragraph>定义这个方法是<strong>可选的</strong>。如果不覆盖，就不会显示返回图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-is-available"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-is-available" names="class_visualshadernodecustom_private_method__is_available"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_available</strong>(mode: <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>, type: <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-is-available"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以防止该节点出现在特定模式 <literal>mode</literal>（见 <reference internal="True" refuri="class_shader#enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference>）和/或类型 <literal>type</literal>（见 <reference internal="True" refuri="class_visualshader#enum-visualshader-type"><inline classes="std std-ref">Type</inline></reference>）的成员对话框中。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。未覆盖时为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-private-method-is-highend"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-private-method-is-highend" names="class_visualshadernodecustom_private_method__is_highend"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_highend</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-private-method-is-highend"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖这个方法可以在 Visual Shader 编辑器的成员对话框中启用高端标记。</paragraph>
            <paragraph>定义这个方法是<strong>可选</strong>的。未覆盖时为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecustom-method-get-option-index"></target>
            <paragraph classes="classref-method" ids="class-visualshadernodecustom-method-get-option-index" names="class_visualshadernodecustom_method_get_option_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_option_index</strong>(option: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernodecustom-method-get-option-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回图表中下拉列表选项的选定索引。你可以使用该函数来定义 <reference internal="True" refid="class-visualshadernodecustom-private-method-get-code"><inline classes="std std-ref">_get_code</inline></reference> 或 <reference internal="True" refid="class-visualshadernodecustom-private-method-get-global-code"><inline classes="std std-ref">_get_global_code</inline></reference> 中的特定行为。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
