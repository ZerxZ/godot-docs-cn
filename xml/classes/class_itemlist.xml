<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_itemlist.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ItemList.xml.</comment>
    <target refid="class-itemlist"></target>
    <section ids="itemlist class-itemlist" names="itemlist class_itemlist">
        <title>ItemList</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>可选项目的垂直列表，可以有一列或多列。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该控件提供了可选项目的垂直列表，这些项目可能位于单列或多列中，每个项目都有文本和图标选项。支持工具提示，并且列表中的每个项目可能会有所不同。</paragraph>
            <paragraph>可以选择或取消选择列表中的可选项目，并且可以启用多项选择。也可以启用用鼠标右键进行选择，以允许使用弹出上下文菜单。项目也可以通过双击它们，或按 <literal classes="kbd">Enter</literal> 来“激活”。</paragraph>
            <paragraph>项目文本只支持单行字符串。字符串中的换行符（例如 <literal>\n</literal>）不会产生换行。在 <reference internal="True" refid="class-itemlist-constant-icon-mode-top"><inline classes="std std-ref">ICON_MODE_TOP</inline></reference> 模式下会启用文本换行，但默认情况下会调整列的宽度以完全适合其内容。需要将 <reference internal="True" refid="class-itemlist-property-fixed-column-width"><inline classes="std std-ref">fixed_column_width</inline></reference> 设置得大于零，才能换行文本。</paragraph>
            <paragraph>所有 <literal>set_*</literal> 方法都允许负的项目索引，例如 <literal>-1</literal> 访问的是最后一个项目，<literal>-2</literal> 选择的是倒数第二个项目，以此类推。</paragraph>
            <paragraph><strong>增量搜索：</strong>与 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 和 <reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 一样，<strong>ItemList</strong> 支持在控件获得焦点时在列表内进行搜索。按下与项目名称的第一个字母匹配的键，以选择以给定字母开头的第一个项目。在该点之后，有两种方法可以执行增量搜索： 1) 在超时持续时间之前再次按下相同的键，以选择下一个以相同字母开头的项目。 2) 在超时时间前，按匹配单词剩余部分的字母键，将直接选择问题项。如果自上次击键被注册后，超时持续时间已过，则这两个动作都将被重置为列表的开头。可以通过更改 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-timers-incremental-search-max-interval-msec"><inline classes="std std-ref">ProjectSettings.gui/timers/incremental_search_max_interval_msec</inline></reference> 来调整超时持续时间。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="57"></colspec>
                    <colspec colwidth="77"></colspec>
                    <colspec colwidth="75"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-allow-reselect"><inline classes="std std-ref">allow_reselect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-allow-rmb-select"><inline classes="std std-ref">allow_rmb_select</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-allow-search"><inline classes="std std-ref">allow_search</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-auto-height"><inline classes="std std-ref">auto_height</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>clip_contents</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-clip-contents"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-fixed-column-width"><inline classes="std std-ref">fixed_column_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-fixed-icon-size"><inline classes="std std-ref">fixed_icon_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>focus_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-focus-mode"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">IconMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-icon-mode"><inline classes="std std-ref">icon_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-icon-scale"><inline classes="std std-ref">icon_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-item-count"><inline classes="std std-ref">item_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-max-columns"><inline classes="std std-ref">max_columns</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-max-text-lines"><inline classes="std std-ref">max_text_lines</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-same-column-width"><inline classes="std std-ref">same_column_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">SelectMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-select-mode"><inline classes="std std-ref">select_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-property-text-overrun-behavior"><inline classes="std std-ref">text_overrun_behavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="185"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-add-icon-item"><inline classes="std std-ref">add_icon_item</inline></reference>(icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-add-item"><inline classes="std std-ref">add_item</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-deselect"><inline classes="std std-ref">deselect</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-deselect-all"><inline classes="std std-ref">deselect_all</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-ensure-current-is-visible"><inline classes="std std-ref">ensure_current_is_visible</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-force-update-list-size"><inline classes="std std-ref">force_update_list_size</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-at-position"><inline classes="std std-ref">get_item_at_position</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, exact: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-custom-bg-color"><inline classes="std std-ref">get_item_custom_bg_color</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-custom-fg-color"><inline classes="std std-ref">get_item_custom_fg_color</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-icon"><inline classes="std std-ref">get_item_icon</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-icon-modulate"><inline classes="std std-ref">get_item_icon_modulate</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-icon-region"><inline classes="std std-ref">get_item_icon_region</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-language"><inline classes="std std-ref">get_item_language</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-metadata"><inline classes="std std-ref">get_item_metadata</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-rect"><inline classes="std std-ref">get_item_rect</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, expand: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-text"><inline classes="std std-ref">get_item_text</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-text-direction"><inline classes="std std-ref">get_item_text_direction</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-item-tooltip"><inline classes="std std-ref">get_item_tooltip</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-selected-items"><inline classes="std std-ref">get_selected_items</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vscrollbar#class-vscrollbar"><inline classes="std std-ref">VScrollBar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-get-v-scroll-bar"><inline classes="std std-ref">get_v_scroll_bar</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-is-anything-selected"><inline classes="std std-ref">is_anything_selected</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-is-item-disabled"><inline classes="std std-ref">is_item_disabled</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-is-item-icon-transposed"><inline classes="std std-ref">is_item_icon_transposed</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-is-item-selectable"><inline classes="std std-ref">is_item_selectable</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-is-item-tooltip-enabled"><inline classes="std std-ref">is_item_tooltip_enabled</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-is-selected"><inline classes="std std-ref">is_selected</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-move-item"><inline classes="std std-ref">move_item</inline></reference>(from_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-remove-item"><inline classes="std std-ref">remove_item</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-select"><inline classes="std std-ref">select</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, single: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-custom-bg-color"><inline classes="std std-ref">set_item_custom_bg_color</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_bg_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-custom-fg-color"><inline classes="std std-ref">set_item_custom_fg_color</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_fg_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-disabled"><inline classes="std std-ref">set_item_disabled</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-icon"><inline classes="std std-ref">set_item_icon</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-icon-modulate"><inline classes="std std-ref">set_item_icon_modulate</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-icon-region"><inline classes="std std-ref">set_item_icon_region</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-icon-transposed"><inline classes="std std-ref">set_item_icon_transposed</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transposed: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-language"><inline classes="std std-ref">set_item_language</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-metadata"><inline classes="std std-ref">set_item_metadata</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, metadata: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-selectable"><inline classes="std std-ref">set_item_selectable</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-text"><inline classes="std std-ref">set_item_text</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-text-direction"><inline classes="std std-ref">set_item_text_direction</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, direction: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-tooltip"><inline classes="std std-ref">set_item_tooltip</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-set-item-tooltip-enabled"><inline classes="std std-ref">set_item_tooltip_enabled</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-method-sort-items-by-text"><inline classes="std std-ref">sort_items_by_text</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="76"></colspec>
                    <colspec colwidth="32"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-color-font-color"><inline classes="std std-ref">font_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.65, 0.65, 0.65, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-color-font-hovered-color"><inline classes="std std-ref">font_hovered_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.95, 0.95, 0.95, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-color-font-outline-color"><inline classes="std std-ref">font_outline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-color-font-selected-color"><inline classes="std std-ref">font_selected_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-color-guide-color"><inline classes="std std-ref">guide_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.7, 0.7, 0.7, 0.25)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-constant-h-separation"><inline classes="std std-ref">h_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-constant-icon-margin"><inline classes="std std-ref">icon_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-constant-line-separation"><inline classes="std std-ref">line_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-constant-v-separation"><inline classes="std std-ref">v_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-font-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-font-size-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-style-cursor"><inline classes="std std-ref">cursor</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-style-cursor-unfocused"><inline classes="std std-ref">cursor_unfocused</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-style-focus"><inline classes="std std-ref">focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-style-hovered"><inline classes="std std-ref">hovered</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-style-panel"><inline classes="std std-ref">panel</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-style-selected"><inline classes="std std-ref">selected</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-itemlist-theme-style-selected-focus"><inline classes="std std-ref">selected_focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-itemlist-signal-empty-clicked"></target>
            <paragraph classes="classref-signal" ids="class-itemlist-signal-empty-clicked" names="class_itemlist_signal_empty_clicked"><strong>empty_clicked</strong>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, mouse_button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-itemlist-signal-empty-clicked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在列表矩形内的非空白区域点击鼠标时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-signal-item-activated"></target>
            <paragraph classes="classref-signal" ids="class-itemlist-signal-item-activated" names="class_itemlist_signal_item_activated"><strong>item_activated</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-itemlist-signal-item-activated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过双击或按<literal classes="kbd">回车</literal>键激活指定的列表项时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-signal-item-clicked"></target>
            <paragraph classes="classref-signal" ids="class-itemlist-signal-item-clicked" names="class_itemlist_signal_item_clicked"><strong>item_clicked</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, mouse_button_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-itemlist-signal-item-clicked"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>鼠标按键单击指定的列表项时触发。</paragraph>
            <paragraph>还提供了单击的位置，这样就能够在正确位置弹出相应的上下文菜单。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-signal-item-selected"></target>
            <paragraph classes="classref-signal" ids="class-itemlist-signal-item-selected" names="class_itemlist_signal_item_selected"><strong>item_selected</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-itemlist-signal-item-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择指定项目时触发。</paragraph>
            <paragraph><reference internal="True" refid="class-itemlist-property-allow-reselect"><inline classes="std std-ref">allow_reselect</inline></reference> 必须启用才能重新选择项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-signal-multi-selected"></target>
            <paragraph classes="classref-signal" ids="class-itemlist-signal-multi-selected" names="class_itemlist_signal_multi_selected"><strong>multi_selected</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, selected: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-itemlist-signal-multi-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在允许多选的列表上更改多选时触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-itemlist-iconmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-itemlist-iconmode" names="enum_itemlist_iconmode">enum <strong>IconMode</strong>: <reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-itemlist-constant-icon-mode-top"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-itemlist-constant-icon-mode-top" names="class_itemlist_constant_icon_mode_top"><reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">IconMode</inline></reference> <strong>ICON_MODE_TOP</strong> = <literal>0</literal></paragraph>
            <paragraph>图标绘制在文本上方。</paragraph>
            <target refid="class-itemlist-constant-icon-mode-left"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-itemlist-constant-icon-mode-left" names="class_itemlist_constant_icon_mode_left"><reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">IconMode</inline></reference> <strong>ICON_MODE_LEFT</strong> = <literal>1</literal></paragraph>
            <paragraph>图标绘制在文本的左侧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-itemlist-selectmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-itemlist-selectmode" names="enum_itemlist_selectmode">enum <strong>SelectMode</strong>: <reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-itemlist-constant-select-single"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-itemlist-constant-select-single" names="class_itemlist_constant_select_single"><reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>SELECT_SINGLE</strong> = <literal>0</literal></paragraph>
            <paragraph>仅允许选择单个项目。</paragraph>
            <target refid="class-itemlist-constant-select-multi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-itemlist-constant-select-multi" names="class_itemlist_constant_select_multi"><reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>SELECT_MULTI</strong> = <literal>1</literal></paragraph>
            <paragraph>允许通过按住 <literal classes="kbd">Ctrl</literal> 或 <literal classes="kbd">Shift</literal> 来选择多个项目。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-itemlist-property-allow-reselect"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-allow-reselect" names="class_itemlist_property_allow_reselect"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_reselect</strong> = <literal>false</literal> <reference internal="True" refid="class-itemlist-property-allow-reselect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_reselect</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_allow_reselect</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则可以再次选择当前选中的项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-allow-rmb-select"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-allow-rmb-select" names="class_itemlist_property_allow_rmb_select"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_rmb_select</strong> = <literal>false</literal> <reference internal="True" refid="class-itemlist-property-allow-rmb-select"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_rmb_select</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_allow_rmb_select</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，点击鼠标右键可以选中项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-allow-search"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-allow-search" names="class_itemlist_property_allow_search"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_search</strong> = <literal>true</literal> <reference internal="True" refid="class-itemlist-property-allow-search"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_search</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_allow_search</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则允许用字母键通过增量搜索导航 <strong>ItemList</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-auto-height"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-auto-height" names="class_itemlist_property_auto_height"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>auto_height</strong> = <literal>false</literal> <reference internal="True" refid="class-itemlist-property-auto-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_auto_height</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_auto_height</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，控件将自动调整高度以适合其内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-fixed-column-width"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-fixed-column-width" names="class_itemlist_property_fixed_column_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>fixed_column_width</strong> = <literal>0</literal> <reference internal="True" refid="class-itemlist-property-fixed-column-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fixed_column_width</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_fixed_column_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所有列的宽度将调整为。</paragraph>
            <paragraph>零值禁用调整，每个项目的宽度将等于其内容的宽度，列的宽度将不均匀。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-fixed-icon-size"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-fixed-icon-size" names="class_itemlist_property_fixed_icon_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>fixed_icon_size</strong> = <literal>Vector2i(0, 0)</literal> <reference internal="True" refid="class-itemlist-property-fixed-icon-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fixed_icon_size</strong>(value: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_fixed_icon_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所有图标将被调整到的尺寸。</paragraph>
            <paragraph>如果 X 或 Y 分量不大于 0，图标的大小将不会受到影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-icon-mode"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-icon-mode" names="class_itemlist_property_icon_mode"><reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">IconMode</inline></reference> <strong>icon_mode</strong> = <literal>1</literal> <reference internal="True" refid="class-itemlist-property-icon-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_icon_mode</strong>(value: <reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">IconMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">IconMode</inline></reference> <strong>get_icon_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>图标的位置，是在文本的上方还是在文本的左边。参阅 <reference internal="True" refid="enum-itemlist-iconmode"><inline classes="std std-ref">IconMode</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-icon-scale"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-icon-scale" names="class_itemlist_property_icon_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>icon_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-itemlist-property-icon-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_icon_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_icon_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在 <reference internal="True" refid="class-itemlist-property-fixed-icon-size"><inline classes="std std-ref">fixed_icon_size</inline></reference> 和转置生效后应用的图标比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-item-count"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-item-count" names="class_itemlist_property_item_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>item_count</strong> = <literal>0</literal> <reference internal="True" refid="class-itemlist-property-item-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_count</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_count</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前列表中的项目数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-max-columns"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-max-columns" names="class_itemlist_property_max_columns"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_columns</strong> = <literal>1</literal> <reference internal="True" refid="class-itemlist-property-max-columns"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_columns</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_columns</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>列表将具有的最大列。</paragraph>
            <paragraph>如果大于零，内容将被拆分为指定列。</paragraph>
            <paragraph>零值意味着无限列，即所有项目将放在同一行中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-max-text-lines"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-max-text-lines" names="class_itemlist_property_max_text_lines"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_text_lines</strong> = <literal>1</literal> <reference internal="True" refid="class-itemlist-property-max-text-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_text_lines</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_text_lines</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>每个子项中允许的最大文本行数。即使没有足够的文本行数来显示，也会保留空间。</paragraph>
            <paragraph><strong>注意：</strong>这个属性只有在 <reference internal="True" refid="class-itemlist-property-icon-mode"><inline classes="std std-ref">icon_mode</inline></reference> 是 <reference internal="True" refid="class-itemlist-constant-icon-mode-top"><inline classes="std std-ref">ICON_MODE_TOP</inline></reference> 时才会生效。要使文本自动换行，<reference internal="True" refid="class-itemlist-property-fixed-column-width"><inline classes="std std-ref">fixed_column_width</inline></reference>应大于零。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-same-column-width"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-same-column-width" names="class_itemlist_property_same_column_width"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>same_column_width</strong> = <literal>false</literal> <reference internal="True" refid="class-itemlist-property-same-column-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_same_column_width</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_same_column_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>是否所有列的宽度相同。</paragraph>
            <paragraph>如果为 <literal>true</literal>，则宽度等于所有列的最大列宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-select-mode"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-select-mode" names="class_itemlist_property_select_mode"><reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>select_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-itemlist-property-select-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_select_mode</strong>(value: <reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">SelectMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>get_select_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许单选或多选。参阅<reference internal="True" refid="enum-itemlist-selectmode"><inline classes="std std-ref">SelectMode</inline></reference>常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-property-text-overrun-behavior"></target>
            <paragraph classes="classref-property" ids="class-itemlist-property-text-overrun-behavior" names="class_itemlist_property_text_overrun_behavior"><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>text_overrun_behavior</strong> = <literal>3</literal> <reference internal="True" refid="class-itemlist-property-text-overrun-behavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_overrun_behavior</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>get_text_overrun_behavior</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置文本超出项目的边界矩形时的裁剪行为。所有模式的说明见 <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-itemlist-method-add-icon-item"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-add-icon-item" names="class_itemlist_method_add_icon_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_icon_item</strong>(icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-itemlist-method-add-icon-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个项目添加到项目列表中，没有文本，只有一个图标。返回添加的项的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-add-item"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-add-item" names="class_itemlist_method_add_item"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>add_item</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-itemlist-method-add-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个项目添加到项目列表中，并指定文本。返回添加的项目的索引。</paragraph>
            <paragraph>指定一个 <literal>icon</literal>，或列表项没有图标时使用 <literal>null</literal> 作为 <literal>icon</literal>。</paragraph>
            <paragraph>如果 selectable 为 <literal>true</literal>，则列表项将是可选择的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-clear"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-clear" names="class_itemlist_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-itemlist-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除列表中的所有项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-deselect"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-deselect" names="class_itemlist_method_deselect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>deselect</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-itemlist-method-deselect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>确保与指定索引相关的项目不被选中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-deselect-all"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-deselect-all" names="class_itemlist_method_deselect_all"><abbreviation explanation="无返回值。">void</abbreviation> <strong>deselect_all</strong>() <reference internal="True" refid="class-itemlist-method-deselect-all"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>确保没有选择任何项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-ensure-current-is-visible"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-ensure-current-is-visible" names="class_itemlist_method_ensure_current_is_visible"><abbreviation explanation="无返回值。">void</abbreviation> <strong>ensure_current_is_visible</strong>() <reference internal="True" refid="class-itemlist-method-ensure-current-is-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>确保当前选择可见，根据需要调整滚动位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-force-update-list-size"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-force-update-list-size" names="class_itemlist_method_force_update_list_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_update_list_size</strong>() <reference internal="True" refid="class-itemlist-method-force-update-list-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据列表项强制更新该列表大小。每当项目的大小或其他相关设置（例如 <reference internal="True" refid="class-itemlist-property-auto-height"><inline classes="std std-ref">auto_height</inline></reference>）发生变化时，这种情况就会自动发生。该方法可被用于在下一次绘制阶段之前触发更新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-at-position"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-at-position" names="class_itemlist_method_get_item_at_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_item_at_position</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, exact: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-at-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位于给定位置 <literal>position</literal> 的项目的索引。</paragraph>
            <paragraph>这个位置没有项目时，如果 <literal>exact</literal> 为 <literal>true</literal> 则会返回 -1，否则会返回距离最近的项目的索引。</paragraph>
            <paragraph><strong>注意：</strong>如果修改 <strong>ItemList</strong> 后立即调用，尚未在下一帧中重绘，则返回值不可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-custom-bg-color"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-custom-bg-color" names="class_itemlist_method_get_item_custom_bg_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_item_custom_bg_color</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-custom-bg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目的自定义背景色，项目由索引 <literal>idx</literal> 指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-custom-fg-color"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-custom-fg-color" names="class_itemlist_method_get_item_custom_fg_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_item_custom_fg_color</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-custom-fg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目的自定义前景色，项目由索引 <literal>idx</literal> 指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-icon"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-icon" names="class_itemlist_method_get_item_icon"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_item_icon</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与指定索引相关的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-icon-modulate"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-icon-modulate" names="class_itemlist_method_get_item_icon_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_item_icon_modulate</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-icon-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引处的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色调制项的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-icon-region"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-icon-region" names="class_itemlist_method_get_item_icon_region"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_item_icon_region</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-icon-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目图标的使用区域。如果该区域大小为 0，整个图标将被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-language"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-language" names="class_itemlist_method_get_item_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_item_language</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目文本的语言代码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-metadata"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-metadata" names="class_itemlist_method_get_item_metadata"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_item_metadata</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-metadata"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引的元数据值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-rect"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-rect" names="class_itemlist_method_get_item_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_item_rect</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, expand: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定索引的项目的位置和大小，使用 <strong>ItemList</strong> 节点的坐标系。如果 <literal>expand</literal> 为 <literal>true</literal>，则会将最后一列进行扩展，充满该行剩余的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果修改 <strong>ItemList</strong> 后立即调用，尚未在下一帧中重绘，则返回值不可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-text"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-text" names="class_itemlist_method_get_item_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_item_text</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与指定索引关联的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-text-direction"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-text-direction" names="class_itemlist_method_get_item_text_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_item_text_direction</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回项目文本的基础书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-item-tooltip"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-item-tooltip" names="class_itemlist_method_get_item_tooltip"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_item_tooltip</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-get-item-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与指定索引关联的工具提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-selected-items"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-selected-items" names="class_itemlist_method_get_selected_items"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_selected_items</strong>() <reference internal="True" refid="class-itemlist-method-get-selected-items"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个包含所选项目索引的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-get-v-scroll-bar"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-get-v-scroll-bar" names="class_itemlist_method_get_v_scroll_bar"><reference internal="True" refuri="class_vscrollbar#class-vscrollbar"><inline classes="std std-ref">VScrollBar</inline></reference> <strong>get_v_scroll_bar</strong>() <reference internal="True" refid="class-itemlist-method-get-v-scroll-bar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回垂直滚动条。</paragraph>
            <paragraph><strong>警告：</strong>这是一个必需的内部节点，删除和释放它可能会导致崩溃。如果你希望隐藏它或其任何子项，请使用它们的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-visible"><inline classes="std std-ref">CanvasItem.visible</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-is-anything-selected"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-is-anything-selected" names="class_itemlist_method_is_anything_selected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_anything_selected</strong>() <reference internal="True" refid="class-itemlist-method-is-anything-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选中了一个或多个项目时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-is-item-disabled"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-is-item-disabled" names="class_itemlist_method_is_item_disabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_disabled</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-is-item-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>索引所对应的项目被禁用时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-is-item-icon-transposed"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-is-item-icon-transposed" names="class_itemlist_method_is_item_icon_transposed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_icon_transposed</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-is-item-icon-transposed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目图标被转置绘制，即 X 和 Y 轴互换时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-is-item-selectable"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-is-item-selectable" names="class_itemlist_method_is_item_selectable"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_selectable</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-is-item-selectable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>索引所对应的项目可以被选中时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-is-item-tooltip-enabled"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-is-item-tooltip-enabled" names="class_itemlist_method_is_item_tooltip_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_item_tooltip_enabled</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-is-item-tooltip-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>索引所对应的项目已启用工具提示时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-is-selected"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-is-selected" names="class_itemlist_method_is_selected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_selected</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-itemlist-method-is-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>索引所对应的项目被选中时，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-move-item"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-move-item" names="class_itemlist_method_move_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_item</strong>(from_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-itemlist-method-move-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将项目从索引 <literal>from_idx</literal> 移到 <literal>to_idx</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-remove-item"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-remove-item" names="class_itemlist_method_remove_item"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_item</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-itemlist-method-remove-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从列表中删除索引 <literal>idx</literal> 指定的项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-select"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-select" names="class_itemlist_method_select"><abbreviation explanation="无返回值。">void</abbreviation> <strong>select</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, single: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-itemlist-method-select"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择指定索引处的项目。</paragraph>
            <paragraph><strong>注意：</strong>此方法不触发项目选择信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-custom-bg-color"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-custom-bg-color" names="class_itemlist_method_set_item_custom_bg_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_custom_bg_color</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_bg_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-custom-bg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引 <literal>idx</literal> 指定的项目的背景色设置为指定的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-custom-fg-color"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-custom-fg-color" names="class_itemlist_method_set_item_custom_fg_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_custom_fg_color</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_fg_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-custom-fg-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引 <literal>idx</literal> 指定的项目的前景色设置为指定的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-disabled"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-disabled" names="class_itemlist_method_set_item_disabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_disabled</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, disabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-disabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>禁用（或启用）指定索引处的项目。</paragraph>
            <paragraph>禁用的项目不能被选中，也不会触发（双击或按 <literal classes="kbd">Enter</literal> 时的）激活信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-icon"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-icon" names="class_itemlist_method_set_item_icon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_icon</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置（或替换）与指定索引关联的图标 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-icon-modulate"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-icon-modulate" names="class_itemlist_method_set_item_icon_modulate"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_icon_modulate</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-icon-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与指定索引相关的项目的调制颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-icon-region"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-icon-region" names="class_itemlist_method_set_item_icon_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_icon_region</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-icon-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置项目图标的使用区域。如果该区域大小为 0，将使用整个图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-icon-transposed"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-icon-transposed" names="class_itemlist_method_set_item_icon_transposed"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_icon_transposed</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transposed: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-icon-transposed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置项目图标是否将被转置绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-language"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-language" names="class_itemlist_method_set_item_language"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_language</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置项目文本的语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-metadata"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-metadata" names="class_itemlist_method_set_item_metadata"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_metadata</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, metadata: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-metadata"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与指定索引相关的项目存储的值（任何类型的值）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-selectable"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-selectable" names="class_itemlist_method_set_item_selectable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_selectable</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, selectable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-selectable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>允许或禁止选择与指定索引关联的项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-text"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-text" names="class_itemlist_method_set_item_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_text</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与指定索引相关的项目的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-text-direction"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-text-direction" names="class_itemlist_method_set_item_text_direction"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_text_direction</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, direction: <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置项目文本的基础书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-tooltip"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-tooltip" names="class_itemlist_method_set_item_tooltip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_tooltip</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, tooltip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-tooltip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置与指定索引相关的项目的工具提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-set-item-tooltip-enabled"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-set-item-tooltip-enabled" names="class_itemlist_method_set_item_tooltip_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_item_tooltip_enabled</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-itemlist-method-set-item-tooltip-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置是否为指定的项目索引启用工具提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-method-sort-items-by-text"></target>
            <paragraph classes="classref-method" ids="class-itemlist-method-sort-items-by-text" names="class_itemlist_method_sort_items_by_text"><abbreviation explanation="无返回值。">void</abbreviation> <strong>sort_items_by_text</strong>() <reference internal="True" refid="class-itemlist-method-sort-items-by-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按文本对列表中的项目进行排序。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-itemlist-theme-color-font-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-color-font-color" names="class_itemlist_theme_color_font_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_color</strong> = <literal>Color(0.65, 0.65, 0.65, 1)</literal> <reference internal="True" refid="class-itemlist-theme-color-font-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目的默认文本颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-color-font-hovered-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-color-font-hovered-color" names="class_itemlist_theme_color_font_hovered_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_hovered_color</strong> = <literal>Color(0.95, 0.95, 0.95, 1)</literal> <reference internal="True" refid="class-itemlist-theme-color-font-hovered-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目处于悬停但未选中状态时使用的文本 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-color-font-outline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-color-font-outline-color" names="class_itemlist_theme_color_font_outline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_outline_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-itemlist-theme-color-font-outline-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目文本轮廓的色调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-color-font-selected-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-color-font-selected-color" names="class_itemlist_theme_color_font_selected_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_selected_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-itemlist-theme-color-font-selected-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择项目时使用的文本颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-color-guide-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-color-guide-color" names="class_itemlist_theme_color_guide_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>guide_color</strong> = <literal>Color(0.7, 0.7, 0.7, 0.25)</literal> <reference internal="True" refid="class-itemlist-theme-color-guide-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>参考线的颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。参考线是在每行项目之间画的一条线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-constant-h-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-constant-h-separation" names="class_itemlist_theme_constant_h_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>h_separation</strong> = <literal>4</literal> <reference internal="True" refid="class-itemlist-theme-constant-h-separation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目之间的水平间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-constant-icon-margin"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-constant-icon-margin" names="class_itemlist_theme_constant_icon_margin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>icon_margin</strong> = <literal>4</literal> <reference internal="True" refid="class-itemlist-theme-constant-icon-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目的图标和文本之间的间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-constant-line-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-constant-line-separation" names="class_itemlist_theme_constant_line_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>line_separation</strong> = <literal>2</literal> <reference internal="True" refid="class-itemlist-theme-constant-line-separation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>每行文字之间的行距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-constant-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-constant-outline-size" names="class_itemlist_theme_constant_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>0</literal> <reference internal="True" refid="class-itemlist-theme-constant-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目文本轮廓的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果使用启用了 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference> 的字体，其 <reference internal="True" refuri="class_fontfile#class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">FontFile.msdf_pixel_range</inline></reference> 必须至少设置为 <reference internal="True" refid="class-itemlist-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference> 的<emphasis>两倍</emphasis>，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-constant-v-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-constant-v-separation" names="class_itemlist_theme_constant_v_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>v_separation</strong> = <literal>4</literal> <reference internal="True" refid="class-itemlist-theme-constant-v-separation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目菜单之间的垂直间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-font-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-font-font" names="class_itemlist_theme_font_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong> <reference internal="True" refid="class-itemlist-theme-font-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目文本的字体 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-font-size-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-font-size-font-size" names="class_itemlist_theme_font_size_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong> <reference internal="True" refid="class-itemlist-theme-font-size-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>项目文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-style-cursor"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-style-cursor" names="class_itemlist_theme_style_cursor"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>cursor</strong> <reference internal="True" refid="class-itemlist-theme-style-cursor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 <strong>ItemList</strong> 获得焦点时，用作光标的样式盒 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-style-cursor-unfocused"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-style-cursor-unfocused" names="class_itemlist_theme_style_cursor_unfocused"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>cursor_unfocused</strong> <reference internal="True" refid="class-itemlist-theme-style-cursor-unfocused"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 <strong>ItemList</strong> 未获得焦点时，用作光标的样式盒 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-style-focus"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-style-focus" names="class_itemlist_theme_style_focus"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>focus</strong> <reference internal="True" refid="class-itemlist-theme-style-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>ItemList</strong> 的焦点样式，绘制在背景之上，但低于其他东西。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-style-hovered"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-style-hovered" names="class_itemlist_theme_style_hovered"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>hovered</strong> <reference internal="True" refid="class-itemlist-theme-style-hovered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>悬停但未被选中的项目的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-style-panel"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-style-panel" names="class_itemlist_theme_style_panel"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>panel</strong> <reference internal="True" refid="class-itemlist-theme-style-panel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>ItemList</strong> 的默认背景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-style-selected"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-style-selected" names="class_itemlist_theme_style_selected"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>selected</strong> <reference internal="True" refid="class-itemlist-theme-style-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>所选项的样式盒 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，当该 <strong>ItemList</strong> 未获得焦点时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-itemlist-theme-style-selected-focus"></target>
            <paragraph classes="classref-themeproperty" ids="class-itemlist-theme-style-selected-focus" names="class_itemlist_theme_style_selected_focus"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>selected_focus</strong> <reference internal="True" refid="class-itemlist-theme-style-selected-focus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>所选项的样式盒 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，当该 <strong>ItemList</strong> 获得焦点时使用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
