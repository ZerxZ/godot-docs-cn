<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorinterface.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorInterface.xml.</comment>
    <target refid="class-editorinterface"></target>
    <section ids="editorinterface class-editorinterface" names="editorinterface class_editorinterface">
        <title>EditorInterface</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>Godot 编辑器的界面。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EditorInterface</strong> 允许控制 Godot 编辑器的窗口，包括自定义窗口，保存和重新加载场景，渲染网格预览，检查和编辑资源和对象，并提供对 <reference internal="True" refuri="class_editorsettings#class-editorsettings"><inline classes="std std-ref">EditorSettings</inline></reference> ， <reference internal="True" refuri="class_editorfilesystem#class-editorfilesystem"><inline classes="std std-ref">EditorFileSystem</inline></reference> ， <reference internal="True" refuri="class_editorresourcepreview#class-editorresourcepreview"><inline classes="std std-ref">EditorResourcePreview</inline></reference> ， <reference internal="True" refuri="class_scripteditor#class-scripteditor"><inline classes="std std-ref">ScriptEditor</inline></reference> ，编辑器视口以及场景信息的访问。</paragraph>
            <paragraph><strong>注意：</strong> 这个类不应该被直接实例化。而是，直接通过名称访问单例。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var editor_settings = EditorInterface.get_editor_settings()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 在 C# 中，可以通过静态 Singleton 属性来访问。
EditorSettings settings = EditorInterface.Singleton.GetEditorSettings();</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="84"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-property-distraction-free-mode"><inline classes="std std-ref">distraction_free_mode</inline></reference></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-property-movie-maker-enabled"><inline classes="std std-ref">movie_maker_enabled</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="248"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-edit-node"><inline classes="std std-ref">edit_node</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-edit-resource"><inline classes="std std-ref">edit_resource</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> resource <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-edit-script"><inline classes="std std-ref">edit_script</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> script, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> grab_focus=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-base-control"><inline classes="std std-ref">get_base_control</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorcommandpalette#class-editorcommandpalette"><inline classes="std std-ref">EditorCommandPalette</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-command-palette"><inline classes="std std-ref">get_command_palette</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-current-directory"><inline classes="std std-ref">get_current_directory</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-current-feature-profile"><inline classes="std std-ref">get_current_feature_profile</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-current-path"><inline classes="std std-ref">get_current_path</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-edited-scene-root"><inline classes="std std-ref">get_edited_scene_root</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vboxcontainer#class-vboxcontainer"><inline classes="std std-ref">VBoxContainer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-editor-main-screen"><inline classes="std std-ref">get_editor_main_screen</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorpaths#class-editorpaths"><inline classes="std std-ref">EditorPaths</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-editor-paths"><inline classes="std std-ref">get_editor_paths</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-editor-scale"><inline classes="std std-ref">get_editor_scale</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorsettings#class-editorsettings"><inline classes="std std-ref">EditorSettings</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-editor-settings"><inline classes="std std-ref">get_editor_settings</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-editor-theme"><inline classes="std std-ref">get_editor_theme</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-editor-viewport-2d"><inline classes="std std-ref">get_editor_viewport_2d</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-editor-viewport-3d"><inline classes="std std-ref">get_editor_viewport_3d</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_filesystemdock#class-filesystemdock"><inline classes="std std-ref">FileSystemDock</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-file-system-dock"><inline classes="std std-ref">get_file_system_dock</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-inspector"><inline classes="std std-ref">get_inspector</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-open-scenes"><inline classes="std std-ref">get_open_scenes</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-playing-scene"><inline classes="std std-ref">get_playing_scene</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorfilesystem#class-editorfilesystem"><inline classes="std std-ref">EditorFileSystem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-resource-filesystem"><inline classes="std std-ref">get_resource_filesystem</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorresourcepreview#class-editorresourcepreview"><inline classes="std std-ref">EditorResourcePreview</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-resource-previewer"><inline classes="std std-ref">get_resource_previewer</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scripteditor#class-scripteditor"><inline classes="std std-ref">ScriptEditor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-script-editor"><inline classes="std std-ref">get_script_editor</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-selected-paths"><inline classes="std std-ref">get_selected_paths</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editorselection#class-editorselection"><inline classes="std std-ref">EditorSelection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-get-selection"><inline classes="std std-ref">get_selection</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-inspect-object"><inline classes="std std-ref">inspect_object</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> for_property="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> inspector_only=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-is-playing-scene"><inline classes="std std-ref">is_playing_scene</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-is-plugin-enabled"><inline classes="std std-ref">is_plugin_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> plugin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-make-mesh-previews"><inline classes="std std-ref">make_mesh_previews</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh[]</inline></reference> meshes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> preview_size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-mark-scene-as-unsaved"><inline classes="std std-ref">mark_scene_as_unsaved</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-open-scene-from-path"><inline classes="std std-ref">open_scene_from_path</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scene_filepath <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-play-current-scene"><inline classes="std std-ref">play_current_scene</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-play-custom-scene"><inline classes="std std-ref">play_custom_scene</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scene_filepath <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-play-main-scene"><inline classes="std std-ref">play_main_scene</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-popup-dialog"><inline classes="std std-ref">popup_dialog</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> rect=Rect2i(0, 0, 0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-popup-dialog-centered"><inline classes="std std-ref">popup_dialog_centered</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-popup-dialog-centered-clamped"><inline classes="std std-ref">popup_dialog_centered_clamped</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fallback_ratio=0.75 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-popup-dialog-centered-ratio"><inline classes="std std-ref">popup_dialog_centered_ratio</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ratio=0.8 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-reload-scene-from-path"><inline classes="std std-ref">reload_scene_from_path</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scene_filepath <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-restart-editor"><inline classes="std std-ref">restart_editor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> save=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-save-all-scenes"><inline classes="std std-ref">save_all_scenes</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-save-scene"><inline classes="std std-ref">save_scene</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-save-scene-as"><inline classes="std std-ref">save_scene_as</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> with_preview=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-select-file"><inline classes="std std-ref">select_file</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> file <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-set-current-feature-profile"><inline classes="std std-ref">set_current_feature_profile</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> profile_name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-set-main-screen-editor"><inline classes="std std-ref">set_main_screen_editor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-set-plugin-enabled"><inline classes="std std-ref">set_plugin_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> plugin, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorinterface-method-stop-playing-scene"><inline classes="std std-ref">stop_playing_scene</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-editorinterface-property-distraction-free-mode"></target>
            <paragraph classes="classref-property" ids="class-editorinterface-property-distraction-free-mode" names="class_editorinterface_property_distraction_free_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>distraction_free_mode</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_distraction_free_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_distraction_free_mode_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，将启用专注模式，该模式会隐藏侧边面板，增加主视图的可用空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-property-movie-maker-enabled"></target>
            <paragraph classes="classref-property" ids="class-editorinterface-property-movie-maker-enabled" names="class_editorinterface_property_movie_maker_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>movie_maker_enabled</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_movie_maker_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_movie_maker_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则编辑器启用了 Movie Maker 模式。详见 <reference internal="True" refuri="class_moviewriter#class-moviewriter"><inline classes="std std-ref">MovieWriter</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorinterface-method-edit-node"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-edit-node" names="class_editorinterface_method_edit_node">void <strong>edit_node</strong> <strong>(</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> node <strong>)</strong></paragraph>
            <paragraph>编辑给定的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>。如果该节点在场景树内，将被选中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-edit-resource"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-edit-resource" names="class_editorinterface_method_edit_resource">void <strong>edit_resource</strong> <strong>(</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> resource <strong>)</strong></paragraph>
            <paragraph>编辑给定的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>。如果该资源是 <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>，你还可以使用 <reference internal="True" refid="class-editorinterface-method-edit-script"><inline classes="std std-ref">edit_script</inline></reference> 编辑，指定行列位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-edit-script"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-edit-script" names="class_editorinterface_method_edit_script">void <strong>edit_script</strong> <strong>(</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> script, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> grab_focus=true <strong>)</strong></paragraph>
            <paragraph>编辑给定的 <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>。还可以指定所打开脚本的行和列。打开脚本所使用的编辑器是由用户为该脚本的语言所配置，可能是外部编辑器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-base-control"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-base-control" names="class_editorinterface_method_get_base_control"><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>get_base_control</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 Godot 编辑器窗口的主容器。例如，你可以用它来检索容器的大小并相应地放置你的控件。</paragraph>
            <paragraph><strong>警告：</strong>删除和释放这个节点将使编辑器失效，并可能导致崩溃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-command-palette"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-command-palette" names="class_editorinterface_method_get_command_palette"><reference internal="True" refuri="class_editorcommandpalette#class-editorcommandpalette"><inline classes="std std-ref">EditorCommandPalette</inline></reference> <strong>get_command_palette</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的 <reference internal="True" refuri="class_editorcommandpalette#class-editorcommandpalette"><inline classes="std std-ref">EditorCommandPalette</inline></reference> 实例。</paragraph>
            <paragraph><strong>警告：</strong>删除和释放此节点，将使编辑器的一部分失去作用，并可能导致崩溃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-current-directory"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-current-directory" names="class_editorinterface_method_get_current_directory"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_current_directory</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_filesystemdock#class-filesystemdock"><inline classes="std std-ref">FileSystemDock</inline></reference> 中当前正在查看的目录。如果选择了一个文件，则将使用 <reference internal="True" refuri="class_string#class-string-method-get-base-dir"><inline classes="std std-ref">String.get_base_dir</inline></reference> 返回其基本目录。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-current-feature-profile"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-current-feature-profile" names="class_editorinterface_method_get_current_feature_profile"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_current_feature_profile</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前激活的功能配置文件的名称。如果默认配置文件当前处于活动状态，则返回空字符串。</paragraph>
            <paragraph>为了获取对 <reference internal="True" refuri="class_editorfeatureprofile#class-editorfeatureprofile"><inline classes="std std-ref">EditorFeatureProfile</inline></reference> 的引用，你必须使用 <reference internal="True" refuri="class_editorfeatureprofile#class-editorfeatureprofile-method-load-from-file"><inline classes="std std-ref">EditorFeatureProfile.load_from_file</inline></reference> 加载该功能配置文件。</paragraph>
            <paragraph><strong>注意：</strong>通过用户界面创建的功能配置文件将从 <literal>feature_profiles</literal> 目录中的扩展名为 <literal>.profile</literal> 的文件加载。可以使用 <reference internal="True" refuri="class_editorpaths#class-editorpaths-method-get-config-dir"><inline classes="std std-ref">EditorPaths.get_config_dir</inline></reference> 找到编辑器配置文件夹。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-current-path"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-current-path" names="class_editorinterface_method_get_current_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_current_path</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在 <reference internal="True" refuri="class_filesystemdock#class-filesystemdock"><inline classes="std std-ref">FileSystemDock</inline></reference> 中查看的当前路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-edited-scene-root"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-edited-scene-root" names="class_editorinterface_method_get_edited_scene_root"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_edited_scene_root</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回正在编辑的（当前）场景的根 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-editor-main-screen"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-editor-main-screen" names="class_editorinterface_method_get_editor_main_screen"><reference internal="True" refuri="class_vboxcontainer#class-vboxcontainer"><inline classes="std std-ref">VBoxContainer</inline></reference> <strong>get_editor_main_screen</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回负责主屏幕插件和工具的编辑器控件。将其与实现了 <reference internal="True" refuri="class_editorplugin#class-editorplugin-private-method-has-main-screen"><inline classes="std std-ref">EditorPlugin._has_main_screen</inline></reference> 的插件一起使用。</paragraph>
            <paragraph><strong>警告：</strong>移除和释放这个节点将使编辑器的一部分失去作用，并可能导致崩溃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-editor-paths"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-editor-paths" names="class_editorinterface_method_get_editor_paths"><reference internal="True" refuri="class_editorpaths#class-editorpaths"><inline classes="std std-ref">EditorPaths</inline></reference> <strong>get_editor_paths</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_editorpaths#class-editorpaths"><inline classes="std std-ref">EditorPaths</inline></reference> 单例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-editor-scale"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-editor-scale" names="class_editorinterface_method_get_editor_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_editor_scale</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器用户 UI 的实际比例（<literal>1.0</literal> 表示比例为 100%）。这可以用来调整由插件添加的用户 UI 的位置和尺寸。</paragraph>
            <paragraph><strong>注意：</strong>这个值是通过 <literal>interface/editor/display_scale</literal> 和 <literal>interface/editor/custom_display_scale</literal> 编辑器设置项来设置。编辑器必须重新启动才能正确应用这些变化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-editor-settings"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-editor-settings" names="class_editorinterface_method_get_editor_settings"><reference internal="True" refuri="class_editorsettings#class-editorsettings"><inline classes="std std-ref">EditorSettings</inline></reference> <strong>get_editor_settings</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的 <reference internal="True" refuri="class_editorsettings#class-editorsettings"><inline classes="std std-ref">EditorSettings</inline></reference> 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-editor-theme"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-editor-theme" names="class_editorinterface_method_get_editor_theme"><reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference> <strong>get_editor_theme</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的 <reference internal="True" refuri="class_theme#class-theme"><inline classes="std std-ref">Theme</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>创建自定义编辑器 UI 时，请优先直接通过 GUI 节点的 <literal>get_theme_*</literal> 方法来访问主题项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-editor-viewport-2d"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-editor-viewport-2d" names="class_editorinterface_method_get_editor_viewport_2d"><reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference> <strong>get_editor_viewport_2d</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 2D 编辑器 <reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference>。视口中没有相机。视图是直接进行变换的，可以使用 <reference internal="True" refuri="class_viewport#class-viewport-property-global-canvas-transform"><inline classes="std std-ref">Viewport.global_canvas_transform</inline></reference> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-editor-viewport-3d"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-editor-viewport-3d" names="class_editorinterface_method_get_editor_viewport_3d"><reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference> <strong>get_editor_viewport_3d</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定的 3D 编辑器 <reference internal="True" refuri="class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference>，编号从 <literal>0</literal> 到 <literal>3</literal>。可以通过 <reference internal="True" refuri="class_viewport#class-viewport-method-get-camera-3d"><inline classes="std std-ref">Viewport.get_camera_3d</inline></reference> 访问视口中的活动编辑器相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-file-system-dock"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-file-system-dock" names="class_editorinterface_method_get_file_system_dock"><reference internal="True" refuri="class_filesystemdock#class-filesystemdock"><inline classes="std std-ref">FileSystemDock</inline></reference> <strong>get_file_system_dock</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的文件系统面板 <reference internal="True" refuri="class_filesystemdock#class-filesystemdock"><inline classes="std std-ref">FileSystemDock</inline></reference> 实例。</paragraph>
            <paragraph><strong>警告：</strong>移除和释放此节点将使编辑器的一部分失去作用，并可能导致崩溃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-inspector"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-inspector" names="class_editorinterface_method_get_inspector"><reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference> <strong>get_inspector</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的属性检查器 <reference internal="True" refuri="class_editorinspector#class-editorinspector"><inline classes="std std-ref">EditorInspector</inline></reference>实例。</paragraph>
            <paragraph><strong>警告：</strong>删除和释放这个节点将使编辑器的一部分失去作用，并可能导致崩溃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-open-scenes"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-open-scenes" names="class_editorinterface_method_get_open_scenes"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_open_scenes</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回包含当前打开的场景的文件路径的数组 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-playing-scene"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-playing-scene" names="class_editorinterface_method_get_playing_scene"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_playing_scene</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回正在播放的场景名称。如果当前没有场景正在播放，返回一个空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-resource-filesystem"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-resource-filesystem" names="class_editorinterface_method_get_resource_filesystem"><reference internal="True" refuri="class_editorfilesystem#class-editorfilesystem"><inline classes="std std-ref">EditorFileSystem</inline></reference> <strong>get_resource_filesystem</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的 <reference internal="True" refuri="class_editorfilesystem#class-editorfilesystem"><inline classes="std std-ref">EditorFileSystem</inline></reference> 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-resource-previewer"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-resource-previewer" names="class_editorinterface_method_get_resource_previewer"><reference internal="True" refuri="class_editorresourcepreview#class-editorresourcepreview"><inline classes="std std-ref">EditorResourcePreview</inline></reference> <strong>get_resource_previewer</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的 <reference internal="True" refuri="class_editorresourcepreview#class-editorresourcepreview"><inline classes="std std-ref">EditorResourcePreview</inline></reference> 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-script-editor"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-script-editor" names="class_editorinterface_method_get_script_editor"><reference internal="True" refuri="class_scripteditor#class-scripteditor"><inline classes="std std-ref">ScriptEditor</inline></reference> <strong>get_script_editor</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的脚本编辑器 <reference internal="True" refuri="class_scripteditor#class-scripteditor"><inline classes="std std-ref">ScriptEditor</inline></reference> 实例。</paragraph>
            <paragraph><strong>警告：</strong>删除和释放这个节点将使编辑器的一部分失去作用，并可能导致崩溃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-selected-paths"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-selected-paths" names="class_editorinterface_method_get_selected_paths"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_selected_paths</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个包含了 <reference internal="True" refuri="class_filesystemdock#class-filesystemdock"><inline classes="std std-ref">FileSystemDock</inline></reference> 中当前所选文件（和目录）路径的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-get-selection"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-get-selection" names="class_editorinterface_method_get_selection"><reference internal="True" refuri="class_editorselection#class-editorselection"><inline classes="std std-ref">EditorSelection</inline></reference> <strong>get_selection</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回编辑器的 <reference internal="True" refuri="class_editorselection#class-editorselection"><inline classes="std std-ref">EditorSelection</inline></reference> 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-inspect-object"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-inspect-object" names="class_editorinterface_method_inspect_object">void <strong>inspect_object</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> for_property="", <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> inspector_only=false <strong>)</strong></paragraph>
            <paragraph>在编辑器的检查器面板中显示给定 <literal>object</literal> 的属性。如果 <literal>inspector_only</literal> 为 <literal>true</literal> ，插件将不会试图编辑 <literal>object</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-is-playing-scene"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-is-playing-scene" names="class_editorinterface_method_is_playing_scene"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_playing_scene</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果场景正在播放，返回 <literal>true</literal>，否则返回 <literal>false</literal>。暂停的场景将被视为正在播放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-is-plugin-enabled"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-is-plugin-enabled" names="class_editorinterface_method_is_plugin_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_plugin_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> plugin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果启用了指定的 <literal>plugin</literal>，则返回 <literal>true</literal>。插件名称与其目录名称相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-make-mesh-previews"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-make-mesh-previews" names="class_editorinterface_method_make_mesh_previews"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D[]</inline></reference> <strong>make_mesh_previews</strong> <strong>(</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh[]</inline></reference> meshes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> preview_size <strong>)</strong></paragraph>
            <paragraph>将以给定大小渲染的网格预览返回为元素类型为 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 的一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-mark-scene-as-unsaved"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-mark-scene-as-unsaved" names="class_editorinterface_method_mark_scene_as_unsaved">void <strong>mark_scene_as_unsaved</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>将当前场景选项卡标记为未保存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-open-scene-from-path"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-open-scene-from-path" names="class_editorinterface_method_open_scene_from_path">void <strong>open_scene_from_path</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scene_filepath <strong>)</strong></paragraph>
            <paragraph>打开给定路径中的场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-play-current-scene"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-play-current-scene" names="class_editorinterface_method_play_current_scene">void <strong>play_current_scene</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>播放当前活动的场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-play-custom-scene"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-play-custom-scene" names="class_editorinterface_method_play_custom_scene">void <strong>play_custom_scene</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scene_filepath <strong>)</strong></paragraph>
            <paragraph>播放文件路径所指定的场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-play-main-scene"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-play-main-scene" names="class_editorinterface_method_play_main_scene">void <strong>play_main_scene</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>播放主场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-popup-dialog"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-popup-dialog" names="class_editorinterface_method_popup_dialog">void <strong>popup_dialog</strong> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference> rect=Rect2i(0, 0, 0, 0) <strong>)</strong></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_window#class-window-method-popup-exclusive"><inline classes="std std-ref">Window.popup_exclusive</inline></reference> 在编辑器 UI 中弹出 <literal>dialog</literal>。该对话框目前必须没有父级，否则该方法失败。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_window#class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">Window.set_unparent_when_invisible</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-popup-dialog-centered"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-popup-dialog-centered" names="class_editorinterface_method_popup_dialog_centered">void <strong>popup_dialog_centered</strong> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0) <strong>)</strong></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_window#class-window-method-popup-exclusive-centered"><inline classes="std std-ref">Window.popup_exclusive_centered</inline></reference> 在编辑器 UI 中弹出 <literal>dialog</literal>。该对话框目前必须没有父级，否则该方法失败。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_window#class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">Window.set_unparent_when_invisible</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-popup-dialog-centered-clamped"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-popup-dialog-centered-clamped" names="class_editorinterface_method_popup_dialog_centered_clamped">void <strong>popup_dialog_centered_clamped</strong> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> minsize=Vector2i(0, 0), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> fallback_ratio=0.75 <strong>)</strong></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_window#class-window-method-popup-exclusive-centered-clamped"><inline classes="std std-ref">Window.popup_exclusive_centered_clamped</inline></reference> 在编辑器 UI 中弹出 <literal>dialog</literal>。该对话框目前必须没有父级，否则该方法失败。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_window#class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">Window.set_unparent_when_invisible</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-popup-dialog-centered-ratio"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-popup-dialog-centered-ratio" names="class_editorinterface_method_popup_dialog_centered_ratio">void <strong>popup_dialog_centered_ratio</strong> <strong>(</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> dialog, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> ratio=0.8 <strong>)</strong></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_window#class-window-method-popup-exclusive-centered-ratio"><inline classes="std std-ref">Window.popup_exclusive_centered_ratio</inline></reference> 在编辑器 UI 中弹出 <literal>dialog</literal>。该对话框目前必须没有父级，否则该方法失败。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_window#class-window-method-set-unparent-when-invisible"><inline classes="std std-ref">Window.set_unparent_when_invisible</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-reload-scene-from-path"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-reload-scene-from-path" names="class_editorinterface_method_reload_scene_from_path">void <strong>reload_scene_from_path</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> scene_filepath <strong>)</strong></paragraph>
            <paragraph>重新加载给定路径的场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-restart-editor"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-restart-editor" names="class_editorinterface_method_restart_editor">void <strong>restart_editor</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> save=true <strong>)</strong></paragraph>
            <paragraph>重启编辑器。编辑器会关闭，然后再打开相同项目。如果 <literal>save</literal> 为 <literal>true</literal>，则重启前会保存项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-save-all-scenes"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-save-all-scenes" names="class_editorinterface_method_save_all_scenes">void <strong>save_all_scenes</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>保存编辑器中打开的所有场景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-save-scene"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-save-scene" names="class_editorinterface_method_save_scene"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save_scene</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>保存当前活动场景。返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference> 或 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-save-scene-as"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-save-scene-as" names="class_editorinterface_method_save_scene_as">void <strong>save_scene_as</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> with_preview=true <strong>)</strong></paragraph>
            <paragraph>将当前活动场景保存为 <literal>path</literal> 处的文件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-select-file"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-select-file" names="class_editorinterface_method_select_file">void <strong>select_file</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> file <strong>)</strong></paragraph>
            <paragraph>在文件系统面板中选中文件，路径由 <literal>file</literal> 提供。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-set-current-feature-profile"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-set-current-feature-profile" names="class_editorinterface_method_set_current_feature_profile">void <strong>set_current_feature_profile</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> profile_name <strong>)</strong></paragraph>
            <paragraph>使用给定的 <literal>profile_name</literal> 选择并激活指定的功能配置文件。将 <literal>profile_name</literal> 设置为空字符串以重置为默认功能配置文件。</paragraph>
            <paragraph>可以使用 <reference internal="True" refuri="class_editorfeatureprofile#class-editorfeatureprofile"><inline classes="std std-ref">EditorFeatureProfile</inline></reference> 类以编程方式创建功能配置文件。</paragraph>
            <paragraph><strong>注意：</strong>激活的功能配置文件必须位于 <literal>feature_profiles</literal> 目录中，且该文件的扩展名为 <literal>.profile</literal>。如果找不到配置文件，则会发生错误。可以使用 <reference internal="True" refuri="class_editorpaths#class-editorpaths-method-get-config-dir"><inline classes="std std-ref">EditorPaths.get_config_dir</inline></reference> 找到编辑器配置文件夹。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-set-main-screen-editor"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-set-main-screen-editor" names="class_editorinterface_method_set_main_screen_editor">void <strong>set_main_screen_editor</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>将编辑器的当前主屏幕设置为 <literal>name</literal> 中指定的屏幕。<literal>name</literal> 必须与相关选项卡的文本完全匹配（<literal>2D</literal>、<literal>3D</literal>、<literal>Script</literal>、<literal>AssetLib</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-set-plugin-enabled"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-set-plugin-enabled" names="class_editorinterface_method_set_plugin_enabled">void <strong>set_plugin_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> plugin, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>设置插件的启用状态。插件名称与其目录名称相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorinterface-method-stop-playing-scene"></target>
            <paragraph classes="classref-method" ids="class-editorinterface-method-stop-playing-scene" names="class_editorinterface_method_stop_playing_scene">void <strong>stop_playing_scene</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>停止当前正在播放的场景。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
