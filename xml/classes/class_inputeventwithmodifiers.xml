<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_inputeventwithmodifiers.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/InputEventWithModifiers.xml.</comment>
    <target refid="class-inputeventwithmodifiers"></target>
    <section ids="inputeventwithmodifiers class-inputeventwithmodifiers" names="inputeventwithmodifiers class_inputeventwithmodifiers">
        <title>InputEventWithModifiers</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_inputeventfromwindow#class-inputeventfromwindow"><inline classes="std std-ref">InputEventFromWindow</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_inputeventgesture#class-inputeventgesture"><inline classes="std std-ref">InputEventGesture</inline></reference>, <reference internal="True" refuri="class_inputeventkey#class-inputeventkey"><inline classes="std std-ref">InputEventKey</inline></reference>, <reference internal="True" refuri="class_inputeventmouse#class-inputeventmouse"><inline classes="std std-ref">InputEventMouse</inline></reference></paragraph>
        <paragraph>受 <literal classes="kbd">Shift</literal> 和 <literal classes="kbd">Alt</literal> 等修饰键影响的输入事件的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>存储鼠标、键盘、触摸手势等输入事件的相关信息。包括按下了哪些修饰键等信息，修饰键包括 <literal classes="kbd">Shift</literal>、<literal classes="kbd">Alt</literal> 等。见 <reference internal="True" refuri="class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/inputs/inputevent"><inline classes="doc">使用 InputEvent</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="106"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventwithmodifiers-property-alt-pressed"><inline classes="std std-ref">alt_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventwithmodifiers-property-command-or-control-autoremap"><inline classes="std std-ref">command_or_control_autoremap</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventwithmodifiers-property-ctrl-pressed"><inline classes="std std-ref">ctrl_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventwithmodifiers-property-meta-pressed"><inline classes="std std-ref">meta_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventwithmodifiers-property-shift-pressed"><inline classes="std std-ref">shift_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="73"></colspec>
                    <colspec colwidth="120"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventwithmodifiers-method-get-modifiers-mask"><inline classes="std std-ref">get_modifiers_mask</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-inputeventwithmodifiers-method-is-command-or-control-pressed"><inline classes="std std-ref">is_command_or_control_pressed</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-inputeventwithmodifiers-property-alt-pressed"></target>
            <paragraph classes="classref-property" ids="class-inputeventwithmodifiers-property-alt-pressed" names="class_inputeventwithmodifiers_property_alt_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>alt_pressed</strong> = <literal>false</literal> <reference internal="True" refid="class-inputeventwithmodifiers-property-alt-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alt_pressed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_alt_pressed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal classes="kbd">Alt</literal> 修饰键的状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventwithmodifiers-property-command-or-control-autoremap"></target>
            <paragraph classes="classref-property" ids="class-inputeventwithmodifiers-property-command-or-control-autoremap" names="class_inputeventwithmodifiers_property_command_or_control_autoremap"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>command_or_control_autoremap</strong> = <literal>false</literal> <reference internal="True" refid="class-inputeventwithmodifiers-property-command-or-control-autoremap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_command_or_control_autoremap</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_command_or_control_autoremap</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>自动在 macOS 上使用 <literal classes="kbd">Meta</literal>（<literal classes="kbd">Cmd</literal>），在其他平台上使用 <literal classes="kbd">Ctrl</literal>。如果为 <literal>true</literal>，则无法设置 <reference internal="True" refid="class-inputeventwithmodifiers-property-ctrl-pressed"><inline classes="std std-ref">ctrl_pressed</inline></reference> 和 <reference internal="True" refid="class-inputeventwithmodifiers-property-meta-pressed"><inline classes="std std-ref">meta_pressed</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventwithmodifiers-property-ctrl-pressed"></target>
            <paragraph classes="classref-property" ids="class-inputeventwithmodifiers-property-ctrl-pressed" names="class_inputeventwithmodifiers_property_ctrl_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>ctrl_pressed</strong> = <literal>false</literal> <reference internal="True" refid="class-inputeventwithmodifiers-property-ctrl-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ctrl_pressed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_ctrl_pressed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal classes="kbd">Ctrl</literal> 修饰键的状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventwithmodifiers-property-meta-pressed"></target>
            <paragraph classes="classref-property" ids="class-inputeventwithmodifiers-property-meta-pressed" names="class_inputeventwithmodifiers_property_meta_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>meta_pressed</strong> = <literal>false</literal> <reference internal="True" refid="class-inputeventwithmodifiers-property-meta-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_meta_pressed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_meta_pressed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal classes="kbd">Meta</literal> 修饰键的状态。在 Windows 和 Linux 上代表 Windows 键（有时在 Linux 上称为“meta”或“super”键）。在 macOS 上代表 Command 键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventwithmodifiers-property-shift-pressed"></target>
            <paragraph classes="classref-property" ids="class-inputeventwithmodifiers-property-shift-pressed" names="class_inputeventwithmodifiers_property_shift_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shift_pressed</strong> = <literal>false</literal> <reference internal="True" refid="class-inputeventwithmodifiers-property-shift-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shift_pressed</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_shift_pressed</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal classes="kbd">Shift</literal> 修饰键的状态。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-inputeventwithmodifiers-method-get-modifiers-mask"></target>
            <paragraph classes="classref-method" ids="class-inputeventwithmodifiers-method-get-modifiers-mask" names="class_inputeventwithmodifiers_method_get_modifiers_mask"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_@globalscope#enum-globalscope-keymodifiermask"><inline classes="std std-ref">KeyModifierMask</inline></reference>] <strong>get_modifiers_mask</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventwithmodifiers-method-get-modifiers-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回修饰键的键码组合。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-inputeventwithmodifiers-method-is-command-or-control-pressed"></target>
            <paragraph classes="classref-method" ids="class-inputeventwithmodifiers-method-is-command-or-control-pressed" names="class_inputeventwithmodifiers_method_is_command_or_control_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_command_or_control_pressed</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-inputeventwithmodifiers-method-is-command-or-control-pressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 macOS 上，如果 <literal classes="kbd">Meta</literal>（<literal classes="kbd">Cmd</literal>）是按下状态，则返回 <literal>true</literal> 。</paragraph>
            <paragraph>在其他平台上，如果 <literal classes="kbd">Ctrl</literal> 是按下状态，则返回 <literal>true</literal> 。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
