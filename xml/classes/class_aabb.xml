<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_aabb.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/AABB.xml.</comment>
    <target refid="class-aabb"></target>
    <section ids="aabb class-aabb" names="aabb class_aabb">
        <title>AABB</title>
        <paragraph>3D 轴对齐边界框。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>AABB</strong> 内置 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型表示 3D 空间中的轴对齐边界框。它由其 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 定义，皆为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 类型。它经常被用于快速重叠测试（参见 <reference internal="True" refid="class-aabb-method-intersects"><inline classes="std std-ref">intersects</inline></reference>）。虽然 <strong>AABB</strong> 本身是轴对齐的，但它可以与 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 组合来表示旋转或倾斜的边界框。</paragraph>
            <paragraph>它使用浮点坐标。<strong>AABB</strong> 的 2D 等效体是 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。没有使用整数坐标的 <strong>AABB</strong> 版本。</paragraph>
            <paragraph><strong>注意：</strong>不支持负的 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference>。对于负大小，大多数 <strong>AABB</strong> 方法都无法正常工作。使用 <reference internal="True" refid="class-aabb-method-abs"><inline classes="std std-ref">abs</inline></reference> 获取具有非负大小的等效 <strong>AABB</strong>。</paragraph>
            <paragraph><strong>注意：</strong>在布尔上下文中，如果 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 均为零（等于 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>），则 <strong>AABB</strong> 的计算结果为 <literal>false</literal>。否则，它的计算结果始终为 <literal>true</literal>。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/index"><inline classes="doc">数学文档索引</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/vector_math"><inline classes="doc">向量数学</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/math/vectors_advanced"><inline classes="doc">高等向量数学</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="22"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-property-end"><inline classes="std std-ref">end</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="129"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-constructor-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-constructor-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-constructor-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="154"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-abs"><inline classes="std std-ref">abs</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-encloses"><inline classes="std std-ref">encloses</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-expand"><inline classes="std std-ref">expand</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-center"><inline classes="std std-ref">get_center</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-endpoint"><inline classes="std std-ref">get_endpoint</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-longest-axis"><inline classes="std std-ref">get_longest_axis</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-longest-axis-index"><inline classes="std std-ref">get_longest_axis_index</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-longest-axis-size"><inline classes="std std-ref">get_longest_axis_size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-shortest-axis"><inline classes="std std-ref">get_shortest_axis</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-shortest-axis-index"><inline classes="std std-ref">get_shortest_axis_index</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-shortest-axis-size"><inline classes="std std-ref">get_shortest_axis_size</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-support"><inline classes="std std-ref">get_support</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> dir <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-get-volume"><inline classes="std std-ref">get_volume</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-grow"><inline classes="std std-ref">grow</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> by <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-has-point"><inline classes="std std-ref">has_point</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-has-surface"><inline classes="std std-ref">has_surface</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-has-volume"><inline classes="std std-ref">has_volume</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-intersection"><inline classes="std std-ref">intersection</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-intersects"><inline classes="std std-ref">intersects</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-intersects-plane"><inline classes="std std-ref">intersects_plane</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> plane <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-intersects-ray"><inline classes="std std-ref">intersects_ray</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> dir <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-intersects-segment"><inline classes="std std-ref">intersects_segment</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> aabb <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-is-finite"><inline classes="std std-ref">is_finite</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-method-merge"><inline classes="std std-ref">merge</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id6" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="112"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-operator-neq-aabb"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-operator-mul-transform3d"><inline classes="std std-ref">operator *</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-aabb-operator-eq-aabb"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-aabb-property-end"></target>
            <paragraph classes="classref-property" ids="class-aabb-property-end" names="class_aabb_property_end"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>end</strong> = <literal>Vector3(0, 0, 0)</literal></paragraph>
            <paragraph>终点。通常是边界框的前方右上角，等价于 <literal>position + size</literal>。设置该点会影响 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-property-position"></target>
            <paragraph classes="classref-property" ids="class-aabb-property-position" names="class_aabb_property_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>position</strong> = <literal>Vector3(0, 0, 0)</literal></paragraph>
            <paragraph>原点。通常是边界框的背面左下角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-property-size"></target>
            <paragraph classes="classref-property" ids="class-aabb-property-size" names="class_aabb_property_size"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>size</strong> = <literal>Vector3(0, 0, 0)</literal></paragraph>
            <paragraph>边界框的宽度、高度、深度，相对于 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference>。设置该值会影响终点 <reference internal="True" refid="class-aabb-property-end"><inline classes="std std-ref">end</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>建议将宽度、高度、深度设置为非负数，因为 Godot 中的大多数方法假设 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 为背面的左下角、<reference internal="True" refid="class-aabb-property-end"><inline classes="std std-ref">end</inline></reference> 为正面的右上角。要获取等价且大小非负的边界框，请使用 <reference internal="True" refid="class-aabb-method-abs"><inline classes="std std-ref">abs</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-aabb-constructor-aabb"></target>
            <paragraph classes="classref-constructor" ids="class-aabb-constructor-aabb" names="class_aabb_constructor_aabb"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>AABB</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造 <strong>AABB</strong>，并将 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 设置为 <reference internal="True" refuri="class_vector3#class-vector3-constant-zero"><inline classes="std std-ref">Vector3.ZERO</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>AABB</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>AABB</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>AABB</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> position, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> size <strong>)</strong></paragraph>
            <paragraph>使用指定的 <literal>position</literal> 和 <literal>size</literal> 构造 <strong>AABB</strong>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-aabb-method-abs"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-abs" names="class_aabb_method_abs"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>abs</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个与该边界框等效的 <strong>AABB</strong>，其宽度、高度和深度被修改为非负值。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var box = AABB(Vector3(5, 0, 5), Vector3(-20, -10, -5))
var absolute = box.abs()
print(absolute.position) # 打印 (-15, -10, 0)
print(absolute.size)     # 打印 (20, 10, 5)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var box = new Aabb(new Vector3(5, 0, 5), new Vector3(-20, -10, -5));
var absolute = box.Abs();
GD.Print(absolute.Position); // 打印 (-15, -10, 0)
GD.Print(absolute.Size);     // 打印 (20, 10, 5)</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>当 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 为负时，建议使用该方法，因为 Godot 中的大多数其他方法都假设 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的分量大于 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-encloses"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-encloses" names="class_aabb_method_encloses"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>encloses</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框<emphasis>完全</emphasis>包围 <literal>with</literal> 框，则返回 <literal>true</literal>。两个框的边都包括在内。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var a = AABB(Vector3(0, 0, 0), Vector3(4, 4, 4))
var b = AABB(Vector3(1, 1, 1), Vector3(3, 3, 3))
var c = AABB(Vector3(2, 2, 2), Vector3(8, 8, 8))

print(a.encloses(a)) # 打印 true
print(a.encloses(b)) # 打印 true
print(a.encloses(c)) # 打印 false</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var a = new Aabb(new Vector3(0, 0, 0), new Vector3(4, 4, 4));
var b = new Aabb(new Vector3(1, 1, 1), new Vector3(3, 3, 3));
var c = new Aabb(new Vector3(2, 2, 2), new Vector3(8, 8, 8));

GD.Print(a.Encloses(a)); // 打印 True
GD.Print(a.Encloses(b)); // 打印 True
GD.Print(a.Encloses(c)); // 打印 False</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-expand"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-expand" names="class_aabb_method_expand"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>expand</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的副本，如有必要，该边界框被扩展为将边与给定的 <literal>to_point</literal> 对齐。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var box = AABB(Vector3(0, 0, 0), Vector3(5, 2, 5))

box = box.expand(Vector3(10, 0, 0))
print(box.position) # 打印 (0, 0, 0)
print(box.size)     # 打印 (10, 2, 5)

box = box.expand(Vector3(-5, 0, 5))
print(box.position) # 打印 (-5, 0, 0)
print(box.size)     # 打印 (15, 2, 5)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var box = new Aabb(new Vector3(0, 0, 0), new Vector3(5, 2, 5));

box = box.Expand(new Vector3(10, 0, 0));
GD.Print(box.Position); // 打印 (0, 0, 0)
GD.Print(box.Size);     // 打印 (10, 2, 5)

box = box.Expand(new Vector3(-5, 0, 5));
GD.Print(box.Position); // 打印 (-5, 0, 0)
GD.Print(box.Size);     // 打印 (15, 2, 5)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-center"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-center" names="class_aabb_method_get_center"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_center</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的中心点。这与 <literal>position + (size / 2.0)</literal> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-endpoint"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-endpoint" names="class_aabb_method_get_endpoint"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_endpoint</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回组成该边界框的 8 个顶点之一的位置。当 <literal>idx</literal> 为 <literal>0</literal> 时，这与 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 相同；<literal>idx</literal> 为 <literal>7</literal> 时，与 <reference internal="True" refid="class-aabb-property-end"><inline classes="std std-ref">end</inline></reference> 相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-longest-axis"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-longest-axis" names="class_aabb_method_get_longest_axis"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_longest_axis</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的最长归一化轴，作为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>（<reference internal="True" refuri="class_vector3#class-vector3-constant-right"><inline classes="std std-ref">Vector3.RIGHT</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-constant-up"><inline classes="std std-ref">Vector3.UP</inline></reference> 或 <reference internal="True" refuri="class_vector3#class-vector3-constant-back"><inline classes="std std-ref">Vector3.BACK</inline></reference>）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var box = AABB(Vector3(0, 0, 0), Vector3(2, 4, 8))

print(box.get_longest_axis())       # 打印 (0, 0, 1)
print(box.get_longest_axis_index()) # 打印 2
print(box.get_longest_axis_size())  # 打印 8</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var box = new Aabb(new Vector3(0, 0, 0), new Vector3(2, 4, 8));

GD.Print(box.GetLongestAxis());      // 打印 (0, 0, 1)
GD.Print(box.GetLongestAxisIndex()); // 打印 2
GD.Print(box.GetLongestAxisSize());  // 打印 8</literal_block>
                </div>
            </container>
            <paragraph>另见 <reference internal="True" refid="class-aabb-method-get-longest-axis-index"><inline classes="std std-ref">get_longest_axis_index</inline></reference> 和 <reference internal="True" refid="class-aabb-method-get-longest-axis-size"><inline classes="std std-ref">get_longest_axis_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-longest-axis-index"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-longest-axis-index" names="class_aabb_method_get_longest_axis_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_longest_axis_index</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的最长轴的索引（请参阅 <reference internal="True" refuri="class_vector3#class-vector3-constant-axis-x"><inline classes="std std-ref">Vector3.AXIS_X</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-constant-axis-y"><inline classes="std std-ref">Vector3.AXIS_Y</inline></reference>、和 <reference internal="True" refuri="class_vector3#class-vector3-constant-axis-z"><inline classes="std std-ref">Vector3.AXIS_Z</inline></reference>）。</paragraph>
            <paragraph>有关示例，请参阅 <reference internal="True" refid="class-aabb-method-get-longest-axis"><inline classes="std std-ref">get_longest_axis</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-longest-axis-size"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-longest-axis-size" names="class_aabb_method_get_longest_axis_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_longest_axis_size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的最长尺度。</paragraph>
            <paragraph>有关示例，请参阅 <reference internal="True" refid="class-aabb-method-get-longest-axis"><inline classes="std std-ref">get_longest_axis</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-shortest-axis"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-shortest-axis" names="class_aabb_method_get_shortest_axis"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_shortest_axis</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的最短归一化轴，作为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>（<reference internal="True" refuri="class_vector3#class-vector3-constant-right"><inline classes="std std-ref">Vector3.RIGHT</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-constant-up"><inline classes="std std-ref">Vector3.UP</inline></reference>、或 <reference internal="True" refuri="class_vector3#class-vector3-constant-back"><inline classes="std std-ref">Vector3.BACK</inline></reference>）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var box = AABB(Vector3(0, 0, 0), Vector3(2, 4, 8))

print(box.get_shortest_axis())       # 打印 (1, 0, 0)
print(box.get_shortest_axis_index()) # 打印 0
print(box.get_shortest_axis_size())  # 打印 2</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var box = new Aabb(new Vector3(0, 0, 0), new Vector3(2, 4, 8));

GD.Print(box.GetShortestAxis());      // 打印 (1, 0, 0)
GD.Print(box.GetShortestAxisIndex()); // 打印 0
GD.Print(box.GetShortestAxisSize());  // 打印 2</literal_block>
                </div>
            </container>
            <paragraph>另见 <reference internal="True" refid="class-aabb-method-get-shortest-axis-index"><inline classes="std std-ref">get_shortest_axis_index</inline></reference> 和 <reference internal="True" refid="class-aabb-method-get-shortest-axis-size"><inline classes="std std-ref">get_shortest_axis_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-shortest-axis-index"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-shortest-axis-index" names="class_aabb_method_get_shortest_axis_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_shortest_axis_index</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的最短轴的索引（请参阅 <reference internal="True" refuri="class_vector3#class-vector3-constant-axis-x"><inline classes="std std-ref">Vector3.AXIS_X</inline></reference>、<reference internal="True" refuri="class_vector3#class-vector3-constant-axis-y"><inline classes="std std-ref">Vector3.AXIS_Y</inline></reference>、和 <reference internal="True" refuri="class_vector3#class-vector3-constant-axis-z"><inline classes="std std-ref">Vector3.AXIS_Z</inline></reference>）。</paragraph>
            <paragraph>有关示例，请参阅 <reference internal="True" refid="class-aabb-method-get-shortest-axis"><inline classes="std std-ref">get_shortest_axis</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-shortest-axis-size"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-shortest-axis-size" names="class_aabb_method_get_shortest_axis_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_shortest_axis_size</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的最短尺度。</paragraph>
            <paragraph>有关示例，请参阅 <reference internal="True" refid="class-aabb-method-get-shortest-axis"><inline classes="std std-ref">get_shortest_axis</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-support"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-support" names="class_aabb_method_get_support"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_support</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> dir <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定方向上最远的边界框的顶点位置。该点在碰撞检测算法中通常被称为支撑点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-get-volume"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-get-volume" names="class_aabb_method_get_volume"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_volume</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的体积。这相当于 <literal>size.x * size.y * size.z</literal>。另请参阅 <reference internal="True" refid="class-aabb-method-has-volume"><inline classes="std std-ref">has_volume</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-grow"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-grow" names="class_aabb_method_grow"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>grow</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> by <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框的副本，该边界框在所有边上扩展给定量 <literal>by</literal>。负数会缩小该框。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var a = AABB(Vector3(4, 4, 4), Vector3(8, 8, 8)).grow(4)
print(a.position) # 打印 (0, 0, 0)
print(a.size)     # 打印 (16, 16, 16)

var b = AABB(Vector3(0, 0, 0), Vector3(8, 4, 2)).grow(2)
print(b.position) # 打印 (-2, -2, -2)
print(b.size)     # 打印 (12, 8, 6)</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var a = new Aabb(new Vector3(4, 4, 4), new Vector3(8, 8, 8)).Grow(4);
GD.Print(a.Position); // 打印 (0, 0, 0)
GD.Print(a.Size);     // 打印 (16, 16, 16)

var b = new Aabb(new Vector3(0, 0, 0), new Vector3(8, 4, 2)).Grow(2);
GD.Print(b.Position); // 打印 (-2, -2, -2)
GD.Print(b.Size);     // 打印 (12, 8, 6)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-has-point"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-has-point" names="class_aabb_method_has_point"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_point</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> point <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框包含给定的 <literal>point</literal>，则返回 <literal>true</literal>。依照惯例，<strong>不</strong>包括正好位于右侧、顶部和前侧的点。</paragraph>
            <paragraph><strong>注意：</strong>对于具有<emphasis>负</emphasis> <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的 <strong>AABB</strong>，该方法并不可靠。请首先使用 <reference internal="True" refid="class-aabb-method-abs"><inline classes="std std-ref">abs</inline></reference> 获取一个有效的边界框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-has-surface"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-has-surface" names="class_aabb_method_has_surface"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_surface</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框具有表面或长度，即 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 的至少一个分量大于 <literal>0</literal>，则返回 <literal>true</literal>。否则，返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-has-volume"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-has-volume" names="class_aabb_method_has_volume"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_volume</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框的宽度、高度和深度均为正值，则返回 <literal>true</literal>。另见 <reference internal="True" refid="class-aabb-method-get-volume"><inline classes="std std-ref">get_volume</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-intersection"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-intersection" names="class_aabb_method_intersection"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>intersection</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框与 <literal>with</literal> 之间的交集。如果框不相交，则返回空的 <strong>AABB</strong>。如果框在边相交，则返回没有体积的平 <strong>AABB</strong>（请参阅 <reference internal="True" refid="class-aabb-method-has-surface"><inline classes="std std-ref">has_surface</inline></reference> 和 <reference internal="True" refid="class-aabb-method-has-volume"><inline classes="std std-ref">has_volume</inline></reference>）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var box1 = AABB(Vector3(0, 0, 0), Vector3(5, 2, 8))
var box2 = AABB(Vector3(2, 0, 2), Vector3(8, 4, 4))

var intersection = box1.intersection(box2)
print(intersection.position) # 打印 (2, 0, 2)
print(intersection.size)     # 打印 (3, 2, 4)</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var box1 = new Aabb(new Vector3(0, 0, 0), new Vector3(5, 2, 8));
var box2 = new Aabb(new Vector3(2, 0, 2), new Vector3(8, 4, 4));

var intersection = box1.Intersection(box2);
GD.Print(intersection.Position); // 打印 (2, 0, 2)
GD.Print(intersection.Size);     // 打印 (3, 2, 4)</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>如果你只需要知道两个边界框是否相交，请改用 <reference internal="True" refid="class-aabb-method-intersects"><inline classes="std std-ref">intersects</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-intersects"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-intersects" names="class_aabb_method_intersects"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>intersects</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框与框 <literal>with</literal> 重叠，则返回 <literal>true</literal>。两个框的边<emphasis>总是</emphasis>被排除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-intersects-plane"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-intersects-plane" names="class_aabb_method_intersects_plane"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>intersects_plane</strong> <strong>(</strong> <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference> plane <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框位于给定 <literal>plane</literal> 的两侧，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-intersects-ray"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-intersects-ray" names="class_aabb_method_intersects_ray"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>intersects_ray</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> dir <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框与给定射线相交的第一个点，作为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。如果没有交集存在，则返回 <literal>null</literal>。</paragraph>
            <paragraph>射线从 <literal>from</literal> 开始，面向 <literal>dir</literal> 并向无穷远延伸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-intersects-segment"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-intersects-segment" names="class_aabb_method_intersects_segment"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>intersects_segment</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该边界框与给定线段相交的第一个点，作为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。如果没有交集存在，则返回 <literal>null</literal>。</paragraph>
            <paragraph>该线段从 <literal>from</literal> 开始，到 <literal>to</literal> 结束。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-is-equal-approx"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-is-equal-approx" names="class_aabb_method_is_equal_approx"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_equal_approx</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> aabb <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框和 <literal>aabb</literal> 近似相等，则返回 <literal>true</literal>，判断方法是通过在 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 上调用 <reference internal="True" refuri="class_vector3#class-vector3-method-is-equal-approx"><inline classes="std std-ref">Vector3.is_equal_approx</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-is-finite"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-is-finite" names="class_aabb_method_is_finite"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_finite</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该边界框的值是有限的，则返回 <literal>true</literal>，判断方法是通过在 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 和 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 上调用 <reference internal="True" refuri="class_vector3#class-vector3-method-is-finite"><inline classes="std std-ref">Vector3.is_finite</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-method-merge"></target>
            <paragraph classes="classref-method" ids="class-aabb-method-merge" names="class_aabb_method_merge"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>merge</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> with <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回边界包围该边界框和 <literal>with</literal> 的 <strong>AABB</strong>。另见 <reference internal="True" refid="class-aabb-method-encloses"><inline classes="std std-ref">encloses</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-aabb-operator-neq-aabb"></target>
            <paragraph classes="classref-operator" ids="class-aabb-operator-neq-aabb" names="class_aabb_operator_neq_aabb"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个边界框的 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 不相等或 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 不相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-aabb-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-operator-mul-transform3d"></target>
            <paragraph classes="classref-operator" ids="class-aabb-operator-mul-transform3d" names="class_aabb_operator_mul_transform3d"><reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>operator *</strong> <strong>(</strong> <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>假设该变换的基是正交的（即旋转/反射可以，缩放/倾斜则不行），将 <strong>AABB</strong> 逆向变换（乘以）给定的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 变换矩阵。</paragraph>
            <paragraph><literal>aabb * transform</literal> 相当于 <literal>transform.inverse() * aabb</literal>。见 <reference internal="True" refuri="class_transform3d#class-transform3d-method-inverse"><inline classes="std std-ref">Transform3D.inverse</inline></reference>。</paragraph>
            <paragraph>对于通过仿射变换的逆进行的变换（例如，缩放），可以使用 <literal>transform.affine_inverse() * aabb</literal> 代替。见 <reference internal="True" refuri="class_transform3d#class-transform3d-method-affine-inverse"><inline classes="std std-ref">Transform3D.affine_inverse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-aabb-operator-eq-aabb"></target>
            <paragraph classes="classref-operator" ids="class-aabb-operator-eq-aabb" names="class_aabb_operator_eq_aabb"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-aabb"><inline classes="std std-ref">AABB</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个边界框的 <reference internal="True" refid="class-aabb-property-position"><inline classes="std std-ref">position</inline></reference> 完全相等且 <reference internal="True" refid="class-aabb-property-size"><inline classes="std std-ref">size</inline></reference> 完全相等，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>由于浮点数精度误差，请考虑改用 <reference internal="True" refid="class-aabb-method-is-equal-approx"><inline classes="std std-ref">is_equal_approx</inline></reference>，会更可靠。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
