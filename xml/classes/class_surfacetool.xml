<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_surfacetool.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/SurfaceTool.xml.</comment>
    <target refid="class-surfacetool"></target>
    <section ids="surfacetool class-surfacetool" names="surfacetool class_surfacetool">
        <title>SurfaceTool</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>创建几何图形的辅助工具。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>SurfaceTool</strong> 可用于通过指定单独的顶点属性来构造 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>。可以用来从脚本中构建 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>。除索引外的所有属性都需要在调用 <reference internal="True" refid="class-surfacetool-method-add-vertex"><inline classes="std std-ref">add_vertex</inline></reference> 之前添加。例如，要添加顶点颜色和 UV：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var st = SurfaceTool.new()
st.begin(Mesh.PRIMITIVE_TRIANGLES)
st.set_color(Color(1, 0, 0))
st.set_uv(Vector2(0, 0))
st.add_vertex(Vector3(0, 0, 0))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var st = new SurfaceTool();
st.Begin(Mesh.PrimitiveType.Triangles);
st.SetColor(new Color(1, 0, 0));
st.SetUV(new Vector2(0, 0));
st.AddVertex(new Vector3(0, 0, 0));</literal_block>
                </div>
            </container>
            <paragraph>上面的 <strong>SurfaceTool</strong> 现在就包含了三角形中的一个顶点，具有 UV 坐标和指定的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。如果又添加了一个顶点，而没有调用 <reference internal="True" refid="class-surfacetool-method-set-uv"><inline classes="std std-ref">set_uv</inline></reference> 或 <reference internal="True" refid="class-surfacetool-method-set-color"><inline classes="std std-ref">set_color</inline></reference>，则会使用之前的值。</paragraph>
            <paragraph>顶点属性必须在调用 <reference internal="True" refid="class-surfacetool-method-add-vertex"><inline classes="std std-ref">add_vertex</inline></reference> <strong>之前</strong>传递。不传的话，就会在向网格提交顶点信息时出错。</paragraph>
            <paragraph>另外，添加第一个顶点前所使用的属性会用来确定网格的格式。例如，如果你只为第一个顶点添加了 UV，那么你就无法为后续的顶点添加颜色。</paragraph>
            <paragraph>程序式几何体生成另见 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference>、<reference internal="True" refuri="class_immediatemesh#class-immediatemesh"><inline classes="std std-ref">ImmediateMesh</inline></reference> 以及 <reference internal="True" refuri="class_meshdatatool#class-meshdatatool"><inline classes="std std-ref">MeshDataTool</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>Godot 中三角形图元模式的正面使用顺时针 <reference name="缠绕顺序" refuri="https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/04%20Face%20culling/">缠绕顺序</reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/procedural_geometry/surfacetool"><inline classes="doc">使用 SurfaceTool</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/2755">3D 体素演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="58"></colspec>
                    <colspec colwidth="540"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-add-index"><inline classes="std std-ref">add_index</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-add-triangle-fan"><inline classes="std std-ref">add_triangle_fan</inline></reference>(vertices: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> = PackedColorArray(), uv2s: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), normals: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> = PackedVector3Array(), tangents: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>] = [])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-add-vertex"><inline classes="std std-ref">add_vertex</inline></reference>(vertex: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-append-from"><inline classes="std std-ref">append_from</inline></reference>(existing: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-begin"><inline classes="std std-ref">begin</inline></reference>(primitive: <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-commit"><inline classes="std std-ref">commit</inline></reference>(existing: <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> = null, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-commit-to-arrays"><inline classes="std std-ref">commit_to_arrays</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-create-from"><inline classes="std std-ref">create_from</inline></reference>(existing: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-create-from-arrays"><inline classes="std std-ref">create_from_arrays</inline></reference>(arrays: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, primitive_type: <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> = 3)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-create-from-blend-shape"><inline classes="std std-ref">create_from_blend_shape</inline></reference>(existing: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, blend_shape: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-deindex"><inline classes="std std-ref">deindex</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-generate-lod"><inline classes="std std-ref">generate_lod</inline></reference>(nd_threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, target_index_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 3)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-generate-normals"><inline classes="std std-ref">generate_normals</inline></reference>(flip: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-generate-tangents"><inline classes="std std-ref">generate_tangents</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-get-aabb"><inline classes="std std-ref">get_aabb</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-get-custom-format"><inline classes="std std-ref">get_custom_format</inline></reference>(channel_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-get-primitive-type"><inline classes="std std-ref">get_primitive_type</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-surfacetool-skinweightcount"><inline classes="std std-ref">SkinWeightCount</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-get-skin-weight-count"><inline classes="std std-ref">get_skin_weight_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-index"><inline classes="std std-ref">index</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-optimize-indices-for-cache"><inline classes="std std-ref">optimize_indices_for_cache</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-bones"><inline classes="std std-ref">set_bones</inline></reference>(bones: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-color"><inline classes="std std-ref">set_color</inline></reference>(color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference>(channel_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-custom-format"><inline classes="std std-ref">set_custom_format</inline></reference>(channel_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, format: <reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-material"><inline classes="std std-ref">set_material</inline></reference>(material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-normal"><inline classes="std std-ref">set_normal</inline></reference>(normal: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-skin-weight-count"><inline classes="std std-ref">set_skin_weight_count</inline></reference>(count: <reference internal="True" refid="enum-surfacetool-skinweightcount"><inline classes="std std-ref">SkinWeightCount</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-smooth-group"><inline classes="std std-ref">set_smooth_group</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-tangent"><inline classes="std std-ref">set_tangent</inline></reference>(tangent: <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-uv"><inline classes="std std-ref">set_uv</inline></reference>(uv: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-uv2"><inline classes="std std-ref">set_uv2</inline></reference>(uv2: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-surfacetool-method-set-weights"><inline classes="std std-ref">set_weights</inline></reference>(weights: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-surfacetool-customformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-surfacetool-customformat" names="enum_surfacetool_customformat">enum <strong>CustomFormat</strong>: <reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-surfacetool-constant-custom-rgba8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-rgba8-unorm" names="class_surfacetool_constant_custom_rgba8_unorm"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_RGBA8_UNORM</strong> = <literal>0</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据限制到无符号归一化的 0 到 1 范围内，每个通道存储 8 个比特位。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-rgba8-unorm"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_RGBA8_UNORM</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-rgba8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-rgba8-snorm" names="class_surfacetool_constant_custom_rgba8_snorm"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_RGBA8_SNORM</strong> = <literal>1</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据限制到带符号归一化的 -1 到 1 范围内，每个通道存储 8 个比特位。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-rgba8-snorm"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_RGBA8_SNORM</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-rg-half"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-rg-half" names="class_surfacetool_constant_custom_rg_half"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_RG_HALF</strong> = <literal>2</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据存储为半精度浮点数，只使用红色和绿色通道。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-rg-half"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_RG_HALF</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-rgba-half"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-rgba-half" names="class_surfacetool_constant_custom_rgba_half"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_RGBA_HALF</strong> = <literal>3</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据存储为半精度浮点数，使用所有颜色通道。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-rgba-half"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_RGBA_HALF</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-r-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-r-float" names="class_surfacetool_constant_custom_r_float"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_R_FLOAT</strong> = <literal>4</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据存储为全精度浮点数，只使用红色通道。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-r-float"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_R_FLOAT</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-rg-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-rg-float" names="class_surfacetool_constant_custom_rg_float"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_RG_FLOAT</strong> = <literal>5</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据存储为全精度浮点数，只使用红色和绿色通道。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-rg-float"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_RG_FLOAT</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-rgb-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-rgb-float" names="class_surfacetool_constant_custom_rgb_float"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_RGB_FLOAT</strong> = <literal>6</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据存储为全精度浮点数，只使用红色、绿色和蓝色通道。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-rgb-float"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_RGB_FLOAT</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-rgba-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-rgba-float" names="class_surfacetool_constant_custom_rgba_float"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_RGBA_FLOAT</strong> = <literal>7</literal></paragraph>
            <paragraph>将传递给 <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">set_custom</inline></reference> 的数据存储为全精度浮点数，使用所有颜色通道。见 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-custom-rgba-float"><inline classes="std std-ref">Mesh.ARRAY_CUSTOM_RGBA_FLOAT</inline></reference>。</paragraph>
            <target refid="class-surfacetool-constant-custom-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-custom-max" names="class_surfacetool_constant_custom_max"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>CUSTOM_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph>用于表示已禁用的自定义通道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-surfacetool-skinweightcount"></target>
            <paragraph classes="classref-enumeration" ids="enum-surfacetool-skinweightcount" names="enum_surfacetool_skinweightcount">enum <strong>SkinWeightCount</strong>: <reference internal="True" refid="enum-surfacetool-skinweightcount"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-surfacetool-constant-skin-4-weights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-skin-4-weights" names="class_surfacetool_constant_skin_4_weights"><reference internal="True" refid="enum-surfacetool-skinweightcount"><inline classes="std std-ref">SkinWeightCount</inline></reference> <strong>SKIN_4_WEIGHTS</strong> = <literal>0</literal></paragraph>
            <paragraph>每个单独的顶点只能受到 4 个骨骼权重的影响。</paragraph>
            <target refid="class-surfacetool-constant-skin-8-weights"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-surfacetool-constant-skin-8-weights" names="class_surfacetool_constant_skin_8_weights"><reference internal="True" refid="enum-surfacetool-skinweightcount"><inline classes="std std-ref">SkinWeightCount</inline></reference> <strong>SKIN_8_WEIGHTS</strong> = <literal>1</literal></paragraph>
            <paragraph>每个单独的顶点最多能够受到 8 个骨骼权重的影响。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-surfacetool-method-add-index"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-add-index" names="class_surfacetool_method_add_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_index</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-surfacetool-method-add-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果你在使用顶点索引，则向索引数组中添加一个顶点。不需要在添加顶点前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-add-triangle-fan"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-add-triangle-fan" names="class_surfacetool_method_add_triangle_fan"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_triangle_fan</strong>(vertices: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> = PackedColorArray(), uv2s: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), normals: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> = PackedVector3Array(), tangents: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>] = []) <reference internal="True" refid="class-surfacetool-method-add-triangle-fan"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个由数组数据组成的三角扇插入正在构建的 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 中。</paragraph>
            <paragraph>需要将图元类型设置为 <reference internal="True" refuri="class_mesh#class-mesh-constant-primitive-triangles"><inline classes="std std-ref">Mesh.PRIMITIVE_TRIANGLES</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-add-vertex"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-add-vertex" names="class_surfacetool_method_add_vertex"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_vertex</strong>(vertex: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-surfacetool-method-add-vertex"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定当前顶点的位置。应在指定其他顶点属性（例如颜色、UV）后调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-append-from"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-append-from" names="class_surfacetool_method_append_from"><abbreviation explanation="无返回值。">void</abbreviation> <strong>append_from</strong>(existing: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-surfacetool-method-append-from"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用指定的 <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 将来自给定 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 表面的顶点追加到当前的顶点数组中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-begin"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-begin" names="class_surfacetool_method_begin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>begin</strong>(primitive: <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference>) <reference internal="True" refid="class-surfacetool-method-begin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在添加任何顶点之前被调用。接收图元类型作为参数（例如：<reference internal="True" refuri="class_mesh#class-mesh-constant-primitive-triangles"><inline classes="std std-ref">Mesh.PRIMITIVE_TRIANGLES</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-clear"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-clear" names="class_surfacetool_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-surfacetool-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除到目前为止传入表面工具(surface tool)的所有信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-commit"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-commit" names="class_surfacetool_method_commit"><reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> <strong>commit</strong>(existing: <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> = null, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-surfacetool-method-commit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据传入的当前信息返回构造的 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference>。如果将一个已有的 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> 作为参数传入，则会向该已有的 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> 添加一个额外的表面。</paragraph>
            <paragraph><strong>修订说明：</strong><literal>flags</literal> 的记录可能值，它在 4.0 中发生了变化。可能是 <reference internal="True" refuri="class_mesh#enum-mesh-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference> 的一些组合。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-commit-to-arrays"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-commit-to-arrays" names="class_surfacetool_method_commit_to_arrays"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>commit_to_arrays</strong>() <reference internal="True" refid="class-surfacetool-method-commit-to-arrays"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Commits the data to the same format used by <reference internal="True" refuri="class_arraymesh#class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">ArrayMesh.add_surface_from_arrays</inline></reference>, <reference internal="True" refuri="class_importermesh#class-importermesh-method-add-surface"><inline classes="std std-ref">ImporterMesh.add_surface</inline></reference>, and <reference internal="True" refid="class-surfacetool-method-create-from-arrays"><inline classes="std std-ref">create_from_arrays</inline></reference>. This way you can further process the mesh data using the <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> or <reference internal="True" refuri="class_importermesh#class-importermesh"><inline classes="std std-ref">ImporterMesh</inline></reference> APIs.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-create-from"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-create-from" names="class_surfacetool_method_create_from"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_from</strong>(existing: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-surfacetool-method-create-from"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从现有的网格 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 创建一个顶点数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-create-from-arrays"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-create-from-arrays" names="class_surfacetool_method_create_from_arrays"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_from_arrays</strong>(arrays: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, primitive_type: <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> = 3) <reference internal="True" refid="class-surfacetool-method-create-from-arrays"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Creates this SurfaceTool from existing vertex arrays such as returned by <reference internal="True" refid="class-surfacetool-method-commit-to-arrays"><inline classes="std std-ref">commit_to_arrays</inline></reference>, <reference internal="True" refuri="class_mesh#class-mesh-method-surface-get-arrays"><inline classes="std std-ref">Mesh.surface_get_arrays</inline></reference>, <reference internal="True" refuri="class_mesh#class-mesh-method-surface-get-blend-shape-arrays"><inline classes="std std-ref">Mesh.surface_get_blend_shape_arrays</inline></reference>, <reference internal="True" refuri="class_importermesh#class-importermesh-method-get-surface-arrays"><inline classes="std std-ref">ImporterMesh.get_surface_arrays</inline></reference>, and <reference internal="True" refuri="class_importermesh#class-importermesh-method-get-surface-blend-shape-arrays"><inline classes="std std-ref">ImporterMesh.get_surface_blend_shape_arrays</inline></reference>. <literal>primitive_type</literal> controls the type of mesh data, defaulting to <reference internal="True" refuri="class_mesh#class-mesh-constant-primitive-triangles"><inline classes="std std-ref">Mesh.PRIMITIVE_TRIANGLES</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-create-from-blend-shape"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-create-from-blend-shape" names="class_surfacetool_method_create_from_blend_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_from_blend_shape</strong>(existing: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, surface: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, blend_shape: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-surfacetool-method-create-from-blend-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从现有 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 的指定混合形状创建一个顶点数组。这可用于从混合形状中提取特定姿势。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-deindex"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-deindex" names="class_surfacetool_method_deindex"><abbreviation explanation="无返回值。">void</abbreviation> <strong>deindex</strong>() <reference internal="True" refid="class-surfacetool-method-deindex"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过扩展顶点数组移除索引数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-generate-lod"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-generate-lod" names="class_surfacetool_method_generate_lod"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>generate_lod</strong>(nd_threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, target_index_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 3) <reference internal="True" refid="class-surfacetool-method-generate-lod"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> This method is unused internally, as it does not preserve normals or UVs. Consider using <reference internal="True" refuri="class_importermesh#class-importermesh-method-generate-lods"><inline classes="std std-ref">ImporterMesh.generate_lods</inline></reference> instead.</paragraph>
            <paragraph>Generates an LOD for a given <literal>nd_threshold</literal> in linear units (square root of quadric error metric), using at most <literal>target_index_count</literal> indices.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-generate-normals"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-generate-normals" names="class_surfacetool_method_generate_normals"><abbreviation explanation="无返回值。">void</abbreviation> <strong>generate_normals</strong>(flip: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-surfacetool-method-generate-normals"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从顶点生成法线，因此不必手动执行。如果 <literal>flip</literal> 为 <literal>true</literal>，则生成的法线将被反转。<reference internal="True" refid="class-surfacetool-method-generate-normals"><inline classes="std std-ref">generate_normals</inline></reference> 的调用，应在生成几何体<emphasis>之后</emphasis>，且在使用 <reference internal="True" refid="class-surfacetool-method-commit"><inline classes="std std-ref">commit</inline></reference> 或 <reference internal="True" refid="class-surfacetool-method-commit-to-arrays"><inline classes="std std-ref">commit_to_arrays</inline></reference> 提交网格<emphasis>之前</emphasis>。为了正确显示法线贴图表面，还必须使用 <reference internal="True" refid="class-surfacetool-method-generate-tangents"><inline classes="std std-ref">generate_tangents</inline></reference> 生成切线。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-surfacetool-method-generate-normals"><inline classes="std std-ref">generate_normals</inline></reference> 仅在图元类型被设置为 <reference internal="True" refuri="class_mesh#class-mesh-constant-primitive-triangles"><inline classes="std std-ref">Mesh.PRIMITIVE_TRIANGLES</inline></reference> 时有效。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-surfacetool-method-generate-normals"><inline classes="std std-ref">generate_normals</inline></reference> 考虑了平滑组。要生成平滑法线，请使用 <reference internal="True" refid="class-surfacetool-method-set-smooth-group"><inline classes="std std-ref">set_smooth_group</inline></reference> 将平滑组设置为大于或等于 <literal>0</literal> 的值，或者将平滑组保留为默认值 <literal>0</literal>。要生成平面法线，请在添加顶点之前，使用 <reference internal="True" refid="class-surfacetool-method-set-smooth-group"><inline classes="std std-ref">set_smooth_group</inline></reference> 将平滑组设置为 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-generate-tangents"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-generate-tangents" names="class_surfacetool_method_generate_tangents"><abbreviation explanation="无返回值。">void</abbreviation> <strong>generate_tangents</strong>() <reference internal="True" refid="class-surfacetool-method-generate-tangents"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为每个顶点生成切向量。要求每个顶点已经设置了 UV 和法线，参阅 <reference internal="True" refid="class-surfacetool-method-generate-normals"><inline classes="std std-ref">generate_normals</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-get-aabb"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-get-aabb" names="class_surfacetool_method_get_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>get_aabb</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-surfacetool-method-get-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回顶点位置的轴对齐边界框。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-get-custom-format"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-get-custom-format" names="class_surfacetool_method_get_custom_format"><reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference> <strong>get_custom_format</strong>(channel_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-surfacetool-method-get-custom-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>channel_index</literal> 的自定义通道的格式（索引最多为 4）。如果这个自定义通道尚未使用，则返回 <reference internal="True" refid="class-surfacetool-constant-custom-max"><inline classes="std std-ref">CUSTOM_MAX</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-get-primitive-type"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-get-primitive-type" names="class_surfacetool_method_get_primitive_type"><reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>get_primitive_type</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-surfacetool-method-get-primitive-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回网格几何体的类型，例如 <reference internal="True" refuri="class_mesh#class-mesh-constant-primitive-triangles"><inline classes="std std-ref">Mesh.PRIMITIVE_TRIANGLES</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-get-skin-weight-count"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-get-skin-weight-count" names="class_surfacetool_method_get_skin_weight_count"><reference internal="True" refid="enum-surfacetool-skinweightcount"><inline classes="std std-ref">SkinWeightCount</inline></reference> <strong>get_skin_weight_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-surfacetool-method-get-skin-weight-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>默认情况下，返回 <reference internal="True" refid="class-surfacetool-constant-skin-4-weights"><inline classes="std std-ref">SKIN_4_WEIGHTS</inline></reference> 以指示每个顶点仅使用 4 个骨骼影响。</paragraph>
            <paragraph>如果使用最多 8 个影响，则返回 <reference internal="True" refid="class-surfacetool-constant-skin-8-weights"><inline classes="std std-ref">SKIN_8_WEIGHTS</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>该函数返回一个枚举，而不是确切的权重数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-index"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-index" names="class_surfacetool_method_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>index</strong>() <reference internal="True" refid="class-surfacetool-method-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过创建索引数组来缩小顶点数组。这可以避免顶点重复而提高性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-optimize-indices-for-cache"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-optimize-indices-for-cache" names="class_surfacetool_method_optimize_indices_for_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>optimize_indices_for_cache</strong>() <reference internal="True" refid="class-surfacetool-method-optimize-indices-for-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>优化三角形排序以提高性能。要求 <reference internal="True" refid="class-surfacetool-method-get-primitive-type"><inline classes="std std-ref">get_primitive_type</inline></reference> 为 <reference internal="True" refuri="class_mesh#class-mesh-constant-primitive-triangles"><inline classes="std std-ref">Mesh.PRIMITIVE_TRIANGLES</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-bones"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-bones" names="class_surfacetool_method_set_bones"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bones</strong>(bones: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-bones"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定用于<emphasis>下一个</emphasis>顶点的骨骼数组。<literal>bones</literal> 必须包含 4 个整数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-color"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-color" names="class_surfacetool_method_set_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_color</strong>(color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定<emphasis>下一个</emphasis>顶点使用的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。如果每个顶点都需要设置此信息，而你没有成功为第一个顶点提交，则可能根本不会使用此信息。</paragraph>
            <paragraph><strong>注意：</strong>材质必须启用 <reference internal="True" refuri="class_basematerial3d#class-basematerial3d-property-vertex-color-use-as-albedo"><inline classes="std std-ref">BaseMaterial3D.vertex_color_use_as_albedo</inline></reference> 才能使顶点颜色可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-custom"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-custom" names="class_surfacetool_method_set_custom"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom</strong>(channel_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-custom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置这个顶点的 <literal>channel_index</literal> 通道的自定义值。</paragraph>
            <paragraph>必须先为 <literal>channel_index</literal> 通道调用 <reference internal="True" refid="class-surfacetool-method-set-custom-format"><inline classes="std std-ref">set_custom_format</inline></reference>。非 RGBA 格式会忽略其他颜色通道。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-custom-format"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-custom-format" names="class_surfacetool_method_set_custom_format"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_format</strong>(channel_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, format: <reference internal="True" refid="enum-surfacetool-customformat"><inline classes="std std-ref">CustomFormat</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-custom-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>channel_index</literal> 的自定义通道的颜色格式。禁用请使用 <reference internal="True" refid="class-surfacetool-constant-custom-max"><inline classes="std std-ref">CUSTOM_MAX</inline></reference>。</paragraph>
            <paragraph>必须在 <reference internal="True" refid="class-surfacetool-method-begin"><inline classes="std std-ref">begin</inline></reference> 之后调用，应当在 <reference internal="True" refid="class-surfacetool-method-commit"><inline classes="std std-ref">commit</inline></reference> 或 <reference internal="True" refid="class-surfacetool-method-commit-to-arrays"><inline classes="std std-ref">commit_to_arrays</inline></reference> 之前设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-material"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-material" names="class_surfacetool_method_set_material"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_material</strong>(material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置要由你正在构建的 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 使用的 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-normal"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-normal" names="class_surfacetool_method_set_normal"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_normal</strong>(normal: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定<emphasis>下一个</emphasis>顶点所使用的法线。如果每个顶点都需要设置此信息，而你没有为第一个顶点提交，则可能根本无法使用此信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-skin-weight-count"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-skin-weight-count" names="class_surfacetool_method_set_skin_weight_count"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_skin_weight_count</strong>(count: <reference internal="True" refid="enum-surfacetool-skinweightcount"><inline classes="std std-ref">SkinWeightCount</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-skin-weight-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置为 <reference internal="True" refid="class-surfacetool-constant-skin-8-weights"><inline classes="std std-ref">SKIN_8_WEIGHTS</inline></reference> 表示每个顶点最多可以使用 8 个骨骼影响。</paragraph>
            <paragraph>默认情况下，仅使用 4 个骨骼影响（<reference internal="True" refid="class-surfacetool-constant-skin-4-weights"><inline classes="std std-ref">SKIN_4_WEIGHTS</inline></reference>）</paragraph>
            <paragraph><strong>注意：</strong>该函数接受一个枚举，而不是权重的确切数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-smooth-group"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-smooth-group" names="class_surfacetool_method_set_smooth_group"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_smooth_group</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-smooth-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定用于<emphasis>下一个</emphasis>顶点的平滑组。如果从未调用过，则所有顶点都将具有默认的 <literal>0</literal> 平滑组，并将与同一组的相邻顶点一起平滑。要生成具有平坦法线的网格，请将平滑组设置为 <literal>-1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个函数实际接受的是 <literal>uint32_t</literal>，所以 C# 用户如果要生成法线平坦的网格，那么就应该使用 <literal>uint32.MaxValue</literal> 而不是 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-tangent"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-tangent" names="class_surfacetool_method_set_tangent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_tangent</strong>(tangent: <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-tangent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定<emphasis>下一个</emphasis>顶点所使用的切线。如果每个顶点都需要设置此信息，而你没有为第一个顶点提交，则可能根本无法使用此信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-uv"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-uv" names="class_surfacetool_method_set_uv"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv</strong>(uv: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-uv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定<emphasis>下一个</emphasis>顶点所使用的 UV 坐标。如果每个顶点都需要设置此信息，而你未能为第一个顶点提交此信息，此信息可能根本就不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-uv2"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-uv2" names="class_surfacetool_method_set_uv2"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv2</strong>(uv2: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-uv2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定可选的第二组UV坐标，用于<emphasis>next</emphasis>顶点。如果每个顶点都需要设置这个信息，而你没有为第一个顶点提交这个信息，此信息可能根本就不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-surfacetool-method-set-weights"></target>
            <paragraph classes="classref-method" ids="class-surfacetool-method-set-weights" names="class_surfacetool_method_set_weights"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_weights</strong>(weights: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <reference internal="True" refid="class-surfacetool-method-set-weights"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>指定用于<emphasis>下一个</emphasis>顶点的权重值。<literal>weights</literal> 必须包含 4 个值。如果每个顶点都需要设置该信息，且为第一个顶点提交失败，则可能根本不会使用该信息。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
