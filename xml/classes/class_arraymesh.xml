<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_arraymesh.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ArrayMesh.xml.</comment>
    <target refid="class-arraymesh"></target>
    <section ids="arraymesh class-arraymesh" names="arraymesh class_arraymesh">
        <title>ArrayMesh</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 网格类型，提供了用于从数组构造表面的工具。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>ArrayMesh</strong> 是用来构造 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 的，其属性指定为数组。</paragraph>
            <paragraph>最基本的例子是创建单个三角形：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var vertices = PackedVector3Array()
vertices.push_back(Vector3(0, 1, 0))
vertices.push_back(Vector3(1, 0, 0))
vertices.push_back(Vector3(0, 0, 1))

# 初始化 ArrayMesh。
var arr_mesh = ArrayMesh.new()
var arrays = []
arrays.resize(Mesh.ARRAY_MAX)
arrays[Mesh.ARRAY_VERTEX] = vertices

# 创建 Mesh。
arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
var m = MeshInstance3D.new()
m.mesh = arr_mesh</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var vertices = new Vector3[]
{
    new Vector3(0, 1, 0),
    new Vector3(1, 0, 0),
    new Vector3(0, 0, 1),
};

// 初始化 ArrayMesh。
var arrMesh = new ArrayMesh();
var arrays = new Godot.Collections.Array();
arrays.Resize((int)Mesh.ArrayType.Max);
arrays[(int)Mesh.ArrayType.Vertex] = vertices;

// 创建 Mesh。
arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);
var m = new MeshInstance3D();
m.Mesh = arrMesh;</literal_block>
                </div>
            </container>
            <paragraph>这个 <reference internal="True" refuri="class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 就可以添加到要显示的 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 中了。</paragraph>
            <paragraph>程序几何体生成请参阅 <reference internal="True" refuri="class_immediatemesh#class-immediatemesh"><inline classes="std std-ref">ImmediateMesh</inline></reference>、<reference internal="True" refuri="class_meshdatatool#class-meshdatatool"><inline classes="std std-ref">MeshDataTool</inline></reference>、<reference internal="True" refuri="class_surfacetool#class-surfacetool"><inline classes="std std-ref">SurfaceTool</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>Godot 对三角形图元模式的正面使用顺时针<reference name="环绕顺序" refuri="https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/04%20Face%20culling/">环绕顺序</reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/procedural_geometry/arraymesh"><inline classes="doc">使用 ArrayMesh 的程序化几何体</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="28"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-property-blend-shape-mode"><inline classes="std std-ref">blend_shape_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-property-custom-aabb"><inline classes="std std-ref">custom_aabb</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>AABB(0, 0, 0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-property-shadow-mesh"><inline classes="std std-ref">shadow_mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="57"></colspec>
                    <colspec colwidth="375"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-add-blend-shape"><inline classes="std std-ref">add_blend_shape</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">add_surface_from_arrays</inline></reference>(primitive: <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference>, arrays: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, blend_shapes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>] = [], lods: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}, flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_mesh#enum-mesh-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>] = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-clear-blend-shapes"><inline classes="std std-ref">clear_blend_shapes</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-clear-surfaces"><inline classes="std std-ref">clear_surfaces</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-get-blend-shape-count"><inline classes="std std-ref">get_blend_shape_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-get-blend-shape-name"><inline classes="std std-ref">get_blend_shape_name</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-lightmap-unwrap"><inline classes="std std-ref">lightmap_unwrap</inline></reference>(transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, texel_size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-regen-normal-maps"><inline classes="std std-ref">regen_normal_maps</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-set-blend-shape-name"><inline classes="std std-ref">set_blend_shape_name</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-find-by-name"><inline classes="std std-ref">surface_find_by_name</inline></reference>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-get-array-index-len"><inline classes="std std-ref">surface_get_array_index_len</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-get-array-len"><inline classes="std std-ref">surface_get_array_len</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_mesh#enum-mesh-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-get-format"><inline classes="std std-ref">surface_get_format</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-get-name"><inline classes="std std-ref">surface_get_name</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-get-primitive-type"><inline classes="std std-ref">surface_get_primitive_type</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-set-name"><inline classes="std std-ref">surface_set_name</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-update-attribute-region"><inline classes="std std-ref">surface_update_attribute_region</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-update-skin-region"><inline classes="std std-ref">surface_update_skin_region</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-arraymesh-method-surface-update-vertex-region"><inline classes="std std-ref">surface_update_vertex_region</inline></reference>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-arraymesh-property-blend-shape-mode"></target>
            <paragraph classes="classref-property" ids="class-arraymesh-property-blend-shape-mode" names="class_arraymesh_property_blend_shape_mode"><reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> <strong>blend_shape_mode</strong> = <literal>1</literal> <reference internal="True" refid="class-arraymesh-property-blend-shape-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_blend_shape_mode</strong>(value: <reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> <strong>get_blend_shape_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将混合形状模式设置为 <reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> 之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-property-custom-aabb"></target>
            <paragraph classes="classref-property" ids="class-arraymesh-property-custom-aabb" names="class_arraymesh_property_custom_aabb"><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>custom_aabb</strong> = <literal>AABB(0, 0, 0, 0, 0, 0)</literal> <reference internal="True" refid="class-arraymesh-property-custom-aabb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_aabb</strong>(value: <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference> <strong>get_custom_aabb</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用用户定义的用于使用视锥剔除的一种替代 <reference internal="True" refuri="class_aabb#class-aabb"><inline classes="std std-ref">AABB</inline></reference>。在使用着色器偏移顶点时，避免非预期的剔除特别有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-property-shadow-mesh"></target>
            <paragraph classes="classref-property" ids="class-arraymesh-property-shadow-mesh" names="class_arraymesh_property_shadow_mesh"><reference internal="True" refid="class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> <strong>shadow_mesh</strong> <reference internal="True" refid="class-arraymesh-property-shadow-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shadow_mesh</strong>(value: <reference internal="True" refid="class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> <strong>get_shadow_mesh</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于渲染阴影并可用于深度预通道的可选网格。可用于通过使用仅包含顶点位置数据（不含法线、UV、颜色等）的网格来提高阴影渲染的性能。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-arraymesh-method-add-blend-shape"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-add-blend-shape" names="class_arraymesh_method_add_blend_shape"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_blend_shape</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-arraymesh-method-add-blend-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为混合形状添加名称，该形状将用 <reference internal="True" refid="class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">add_surface_from_arrays</inline></reference> 添加。必须在添加面之前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-add-surface-from-arrays"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-add-surface-from-arrays" names="class_arraymesh_method_add_surface_from_arrays"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_surface_from_arrays</strong>(primitive: <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference>, arrays: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, blend_shapes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>] = [], lods: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}, flags: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_mesh#enum-mesh-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>] = 0) <reference internal="True" refid="class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的表面。<reference internal="True" refuri="class_mesh#class-mesh-method-get-surface-count"><inline classes="std std-ref">Mesh.get_surface_count</inline></reference> 将成为这个新表面的 <literal>surf_idx</literal>。</paragraph>
            <paragraph>创建表面以使用 <literal>primitive</literal> 进行渲染，它可以是 <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> 中定义的任何值。</paragraph>
            <paragraph><literal>arrays</literal> 参数是数组的数组。每个 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-max"><inline classes="std std-ref">Mesh.ARRAY_MAX</inline></reference> 元素都包含一个数组，其中包含此表面的一些网格数据，如 <reference internal="True" refuri="class_mesh#enum-mesh-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> 的相应成员所描述的一样；如果它未被使用，则为 <literal>null</literal>。例如，<literal>arrays[0]</literal> 是顶点数组。始终需要第一个顶点子数组；其他的是可选的。添加索引数组会将此表面置于“索引模式”，其中顶点和其他数组成为数据源，索引数组定义顶点顺序。所有子数组的长度必须与顶点数组的长度相同（或者是顶点数组长度的精确倍数，当子数组的多个元素对应于单个顶点时）；或者为空，如果使用了 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-index"><inline classes="std std-ref">Mesh.ARRAY_INDEX</inline></reference> 则除外。</paragraph>
            <paragraph><literal>blend_shapes</literal> 参数是每个混合形状的顶点数据数组。 每个元素都是与 <literal>arrays</literal> 具有相同结构的数组，但是 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-vertex"><inline classes="std std-ref">Mesh.ARRAY_VERTEX</inline></reference>、<reference internal="True" refuri="class_mesh#class-mesh-constant-array-normal"><inline classes="std std-ref">Mesh.ARRAY_NORMAL</inline></reference> 和 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-tangent"><inline classes="std std-ref">Mesh.ARRAY_TANGENT</inline></reference> 这些条目，当且仅当在 <literal>arrays</literal> 被设置且所有其他条目都是 <literal>null</literal> 时，会被设置。</paragraph>
            <paragraph><literal>lods</literal> 参数是一个带有 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 键和 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> 值的字典。字典中的每个条目代表了表面的一个 LOD 级别，其中值是用于 LOD 级别的 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-index"><inline classes="std std-ref">Mesh.ARRAY_INDEX</inline></reference> 数组，键大致与使用 LOD 统计信息的距离成正比。即，增加 LOD 的关键点也会增加在使用 LOD 之前对象必须与相机的距离。</paragraph>
            <paragraph><literal>flags</literal> 参数是根据需要按位或的：<reference internal="True" refuri="class_mesh#enum-mesh-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> 的一个值左移 <literal>ARRAY_FORMAT_CUSTOMn_SHIFT</literal>，用于每个正在使用的自定义通道，<reference internal="True" refuri="class_mesh#class-mesh-constant-array-flag-use-dynamic-update"><inline classes="std std-ref">Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE</inline></reference>、<reference internal="True" refuri="class_mesh#class-mesh-constant-array-flag-use-8-bone-weights"><inline classes="std std-ref">Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS</inline></reference> 或 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-flag-uses-empty-vertex-array"><inline classes="std std-ref">Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>使用索引时，建议只使用点、线或三角形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-clear-blend-shapes"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-clear-blend-shapes" names="class_arraymesh_method_clear_blend_shapes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_blend_shapes</strong>() <reference internal="True" refid="class-arraymesh-method-clear-blend-shapes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除此 <strong>ArrayMesh</strong> 的所有混合形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-clear-surfaces"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-clear-surfaces" names="class_arraymesh_method_clear_surfaces"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_surfaces</strong>() <reference internal="True" refid="class-arraymesh-method-clear-surfaces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除此 <strong>ArrayMesh</strong> 的所有表面。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-get-blend-shape-count"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-get-blend-shape-count" names="class_arraymesh_method_get_blend_shape_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_blend_shape_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-get-blend-shape-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <strong>ArrayMesh</strong> 持有的混合形状的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-get-blend-shape-name"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-get-blend-shape-name" names="class_arraymesh_method_get_blend_shape_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_blend_shape_name</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-get-blend-shape-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此索引处的混合形状的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-lightmap-unwrap"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-lightmap-unwrap" names="class_arraymesh_method_lightmap_unwrap"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>lightmap_unwrap</strong>(transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>, texel_size: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-arraymesh-method-lightmap-unwrap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <strong>ArrayMesh</strong> 上执行 UV 展开，为光照贴图准备该网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-regen-normal-maps"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-regen-normal-maps" names="class_arraymesh_method_regen_normal_maps"><abbreviation explanation="无返回值。">void</abbreviation> <strong>regen_normal_maps</strong>() <reference internal="True" refid="class-arraymesh-method-regen-normal-maps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为每个 <strong>ArrayMesh</strong> 的表面重新生成切线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-set-blend-shape-name"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-set-blend-shape-name" names="class_arraymesh_method_set_blend_shape_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_blend_shape_name</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-arraymesh-method-set-blend-shape-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在此索引处设置混合形状的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-find-by-name"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-find-by-name" names="class_arraymesh_method_surface_find_by_name"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>surface_find_by_name</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-surface-find-by-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此 <strong>ArrayMesh</strong> 中带有此名称的第一个曲面的索引。如果没有找到，则返回 -1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-get-array-index-len"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-get-array-index-len" names="class_arraymesh_method_surface_get_array_index_len"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>surface_get_array_index_len</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-surface-get-array-index-len"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所请求的面中索引数组的索引长度（参见 <reference internal="True" refid="class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">add_surface_from_arrays</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-get-array-len"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-get-array-len" names="class_arraymesh_method_surface_get_array_len"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>surface_get_array_len</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-surface-get-array-len"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所请求曲面中顶点数组的顶点长度（见 <reference internal="True" refid="class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">add_surface_from_arrays</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-get-format"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-get-format" names="class_arraymesh_method_surface_get_format"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_mesh#enum-mesh-arrayformat"><inline classes="std std-ref">ArrayFormat</inline></reference>] <strong>surface_get_format</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-surface-get-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所请求表面的格式掩码（见 <reference internal="True" refid="class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">add_surface_from_arrays</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-get-name"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-get-name" names="class_arraymesh_method_surface_get_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>surface_get_name</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-surface-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取分配给此表面的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-get-primitive-type"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-get-primitive-type" names="class_arraymesh_method_surface_get_primitive_type"><reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>surface_get_primitive_type</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-arraymesh-method-surface-get-primitive-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所请求曲面的图元类型（见 <reference internal="True" refid="class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">add_surface_from_arrays</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-set-name"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-set-name" names="class_arraymesh_method_surface_set_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>surface_set_name</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-arraymesh-method-surface-set-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置给定曲面的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-update-attribute-region"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-update-attribute-region" names="class_arraymesh_method_surface_update_attribute_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>surface_update_attribute_region</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-arraymesh-method-surface-update-attribute-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-update-skin-region"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-update-skin-region" names="class_arraymesh_method_surface_update_skin_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>surface_update_skin_region</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-arraymesh-method-surface-update-skin-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-arraymesh-method-surface-update-vertex-region"></target>
            <paragraph classes="classref-method" ids="class-arraymesh-method-surface-update-vertex-region" names="class_arraymesh_method_surface_update_vertex_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>surface_update_vertex_region</strong>(surf_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-arraymesh-method-surface-update-vertex-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
