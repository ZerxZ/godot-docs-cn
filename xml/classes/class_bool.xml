<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_bool.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/bool.xml.</comment>
    <target refid="class-bool"></target>
    <section ids="bool class-bool" names="bool class_bool">
        <title>bool</title>
        <paragraph>内置布尔类型。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>布尔类型 <strong>bool</strong> 是内置的 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 类型，只能存储 <literal>true</literal>（真）和 <literal>false</literal>（假）的其中之一。你可以把它理解为开关，要么处于打开状态，要么处于关闭状态。也可以理解为二进制所使用的数字，只有 1 或者 0。</paragraph>
            <paragraph><literal>if</literal> 等条件语句中可以直接使用布尔值：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var can_shoot = true
if can_shoot:
    launch_bullet()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">bool canShoot = true;
if (canShoot)
{
    LaunchBullet();
}</literal_block>
                </div>
            </container>
            <paragraph>比较运算符返回的都是布尔值（<literal>==</literal>、<literal>&gt;</literal>、<literal>&lt;=</literal> 等）。没有必要比较布尔值本身，因此不需要在这些比较后面加上 <literal>== true</literal> 或 <literal>== false</literal>。</paragraph>
            <paragraph>布尔值可以和逻辑运算符 <literal>and</literal>、<literal>or</literal>、<literal>not</literal> 组合，构成复杂的条件：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if bullets &gt; 0 and not is_reloading():
    launch_bullet()

if bullets == 0 or is_reloading():
    play_clack_sound()</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (bullets &gt; 0 &amp;&amp; !IsReloading())
{
    LaunchBullet();
}

if (bullets == 0 || IsReloading())
{
    PlayClackSound();
}</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>在现代编程语言中，逻辑运算符是按顺序求值的。如果后续条件不会对最终结果产生影响，那么就会跳过对这些条件的求值。这种行为叫作<reference name="短路求值" refuri="https://zh.wikipedia.org/wiki/%E7%9F%AD%E8%B7%AF%E6%B1%82%E5%80%BC">短路求值</reference>，在注重性能的场合能够避免对开销较大的条件进行求值。</paragraph>
            <paragraph><strong>注意：</strong>根据惯例，返回布尔值的内置方法和属性通常都以判断题、形容词等形式命名（<reference internal="True" refuri="class_string#class-string-method-is-empty"><inline classes="std std-ref">String.is_empty</inline></reference>、<reference internal="True" refuri="class_node#class-node-method-can-process"><inline classes="std std-ref">Node.can_process</inline></reference>、<reference internal="True" refuri="class_camera2d#class-camera2d-property-enabled"><inline classes="std std-ref">Camera2D.enabled</inline></reference> 等）。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="85"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-constructor-bool"><inline classes="std std-ref">bool</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-constructor-bool"><inline classes="std std-ref">bool</inline></reference> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-constructor-bool"><inline classes="std std-ref">bool</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-constructor-bool"><inline classes="std std-ref">bool</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="92"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-operator-neq-bool"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-operator-lt-bool"><inline classes="std std-ref">operator &lt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-operator-eq-bool"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bool-operator-gt-bool"><inline classes="std std-ref">operator &gt;</inline></reference> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-bool-constructor-bool"></target>
            <paragraph classes="classref-constructor" ids="class-bool-constructor-bool" names="class_bool_constructor_bool"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>bool</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造设置为 <literal>false</literal> 的 <strong>bool</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>bool</strong> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>bool</strong> 的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>bool</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 值转换为布尔值。如果 <literal>from</literal> 等于 <literal>0.0</literal>（包括 <literal>-0.0</literal>）则返回 <literal>false</literal>，其他值则返回 <literal>true</literal>（包括 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-inf"><inline classes="std std-ref">@GDScript.INF</inline></reference> 和 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-nan"><inline classes="std std-ref">@GDScript.NAN</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>bool</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值转换为布尔值。如果 <literal>from</literal> 等于 <literal>0</literal> 则返回 <literal>false</literal>，其他值则返回 <literal>true</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-bool-operator-neq-bool"></target>
            <paragraph classes="classref-operator" ids="class-bool-operator-neq-bool" names="class_bool_operator_neq_bool"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个布尔值不同则返回 <literal>true</literal>，即一个是 <literal>true</literal>、一个是 <literal>false</literal> 的情况。这个运算可以视为逻辑异或（XOR）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bool-operator-lt-bool"></target>
            <paragraph classes="classref-operator" ids="class-bool-operator-lt-bool" names="class_bool_operator_lt_bool"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &lt;</strong> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左操作数为 <literal>false</literal> 且右操作数为 <literal>true</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bool-operator-eq-bool"></target>
            <paragraph classes="classref-operator" ids="class-bool-operator-eq-bool" names="class_bool_operator_eq_bool"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个布尔值相同则返回 <literal>true</literal>，即都是 <literal>true</literal> 或都是 <literal>false</literal> 的情况。这个运算可以视为逻辑相等（EQ）或者同或（XNOR）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bool-operator-gt-bool"></target>
            <paragraph classes="classref-operator" ids="class-bool-operator-gt-bool" names="class_bool_operator_gt_bool"><reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator &gt;</strong> <strong>(</strong> <reference internal="True" refid="class-bool"><inline classes="std std-ref">bool</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果左操作数为 <literal>true</literal> 且右操作数为 <literal>false</literal>，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
