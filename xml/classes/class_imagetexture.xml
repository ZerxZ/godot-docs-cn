<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_imagetexture.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ImageTexture.xml.</comment>
    <target refid="class-imagetexture"></target>
    <section ids="imagetexture class-imagetexture" names="imagetexture class_imagetexture">
        <title>ImageTexture</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_texture#class-texture"><inline classes="std std-ref">Texture</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>基于 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>基于 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。对于图像的显示，必须使用 <reference internal="True" refid="class-imagetexture-method-create-from-image"><inline classes="std std-ref">create_from_image</inline></reference> 方法从中创建一个 <strong>ImageTexture</strong>：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var image = Image.load_from_file("res://icon.svg")
var texture = ImageTexture.create_from_image(image)
$Sprite2D.texture = texture</literal_block>
            <paragraph>这样，可以在运行时通过从编辑器内部和外部加载图像来创建纹理。</paragraph>
            <paragraph><strong>警告：</strong>最好使用 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-load"><inline classes="std std-ref">@GDScript.load</inline></reference> 加载导入的纹理，而不是使用 <reference internal="True" refuri="class_image#class-image-method-load"><inline classes="std std-ref">Image.load</inline></reference> 从文件系统中动态加载它们，因为后者可能不适用于导出的项目：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var texture = load("res://icon.svg")
$Sprite2D.texture = texture</literal_block>
            <paragraph>这是因为图像必须首先作为 <reference internal="True" refuri="class_compressedtexture2d#class-compressedtexture2d"><inline classes="std std-ref">CompressedTexture2D</inline></reference> 导入，然后才能使用 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-load"><inline classes="std std-ref">@GDScript.load</inline></reference> 加载。如果仍想像加载任何其他 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 一样加载图像文件，请将其导入为 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 资源，然后使用 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-load"><inline classes="std std-ref">@GDScript.load</inline></reference> 方法正常加载它。</paragraph>
            <paragraph><strong>注意：</strong>可以使用 <reference internal="True" refuri="class_texture2d#class-texture2d-method-get-image"><inline classes="std std-ref">Texture2D.get_image</inline></reference> 方法从导入的纹理中检索该图像，该方法返回该图像的副本：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var texture = load("res://icon.svg")
var image: Image = texture.get_image()</literal_block>
            <paragraph><strong>ImageTexture</strong> 并不意味着直接在编辑器界面中进行操作，主要用于通过代码在屏幕上动态渲染图像。如果需要从编辑器中按程序生成图像，请考虑实现一个新的 <reference internal="True" refuri="class_editorimportplugin#class-editorimportplugin"><inline classes="std std-ref">EditorImportPlugin</inline></reference>，将图像保存和导入为自定义纹理资源。</paragraph>
            <paragraph><strong>注意：</strong>由于图形硬件限制，最大纹理大小为 16384×16384 像素。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/assets_pipeline/importing_images"><inline classes="doc">导入图像</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="88"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>resource_local_to_scene</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal> (overrides <reference internal="True" refuri="class_resource#class-resource-property-resource-local-to-scene"><inline classes="std std-ref">Resource</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="41"></colspec>
                    <colspec colwidth="121"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imagetexture-method-create-from-image"><inline classes="std std-ref">create_from_image</inline></reference>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imagetexture-method-get-format"><inline classes="std std-ref">get_format</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imagetexture-method-set-image"><inline classes="std std-ref">set_image</inline></reference>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imagetexture-method-set-size-override"><inline classes="std std-ref">set_size_override</inline></reference>(size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-imagetexture-method-update"><inline classes="std std-ref">update</inline></reference>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-imagetexture-method-create-from-image"></target>
            <paragraph classes="classref-method" ids="class-imagetexture-method-create-from-image" names="class_imagetexture_method_create_from_image"><reference internal="True" refid="class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference> <strong>create_from_image</strong>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-imagetexture-method-create-from-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的 <strong>ImageTexture</strong>，并通过分配和设置来自 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 的数据来初始化它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-imagetexture-method-get-format"></target>
            <paragraph classes="classref-method" ids="class-imagetexture-method-get-format" names="class_imagetexture_method_get_format"><reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> <strong>get_format</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-imagetexture-method-get-format"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回纹理的格式，<reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> 之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-imagetexture-method-set-image"></target>
            <paragraph classes="classref-method" ids="class-imagetexture-method-set-image" names="class_imagetexture_method_set_image"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_image</strong>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <reference internal="True" refid="class-imagetexture-method-set-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用新的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 替换该纹理的数据。这将为该纹理重新分配新内存。</paragraph>
            <paragraph>如果要更新图像，但不需要更改其参数（格式、大小），请改用 <reference internal="True" refid="class-imagetexture-method-update"><inline classes="std std-ref">update</inline></reference> 以获得更好的性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-imagetexture-method-set-size-override"></target>
            <paragraph classes="classref-method" ids="class-imagetexture-method-set-size-override" names="class_imagetexture_method_set_size_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size_override</strong>(size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-imagetexture-method-set-size-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将纹理的大小调整为指定的尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-imagetexture-method-update"></target>
            <paragraph classes="classref-method" ids="class-imagetexture-method-update" names="class_imagetexture_method_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update</strong>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <reference internal="True" refid="class-imagetexture-method-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用新的 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 替换该纹理的数据。</paragraph>
            <paragraph><strong>注意：</strong>该纹理必须使用 <reference internal="True" refid="class-imagetexture-method-create-from-image"><inline classes="std std-ref">create_from_image</inline></reference> 创建或首先使用 <reference internal="True" refid="class-imagetexture-method-set-image"><inline classes="std std-ref">set_image</inline></reference> 方法初始化，然后才能更新。新的图像大小、格式和 mipmap 配置，应与现有纹理的图像配置相匹配。</paragraph>
            <paragraph>如果需要频繁更新纹理，请使用该方法而不是 <reference internal="True" refid="class-imagetexture-method-set-image"><inline classes="std std-ref">set_image</inline></reference>，这比每次为一个新纹理分配额外内存要快。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
