<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_stylebox.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/StyleBox.xml.</comment>
    <target refid="class-stylebox"></target>
    <section ids="stylebox class-stylebox" names="stylebox class_stylebox">
        <title>StyleBox</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_styleboxempty#class-styleboxempty"><inline classes="std std-ref">StyleBoxEmpty</inline></reference>, <reference internal="True" refuri="class_styleboxflat#class-styleboxflat"><inline classes="std std-ref">StyleBoxFlat</inline></reference>, <reference internal="True" refuri="class_styleboxline#class-styleboxline"><inline classes="std std-ref">StyleBoxLine</inline></reference>, <reference internal="True" refuri="class_styleboxtexture#class-styleboxtexture"><inline classes="std std-ref">StyleBoxTexture</inline></reference></paragraph>
        <paragraph>用于为 UI 元素定义风格化方框的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>样式盒 <strong>StyleBox</strong> 是一个为 UI 元素定义风格化方框的抽象基类。常用于面板、按钮、<reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference> 的背景、<reference internal="True" refuri="class_tree#class-tree"><inline classes="std std-ref">Tree</inline></reference> 的背景等，也用于针对指针信号检查透明掩码。如果 <strong>StyleBox</strong> 是某个控件的掩码，而掩码检查失败，则点击和运动信号会穿透这个控件进入下方控件。</paragraph>
            <paragraph><strong>注意：</strong>对于有<emphasis>主题属性</emphasis>的控件节点，名为 <literal>focus</literal> 的 <strong>StyleBox</strong> 会显示在名为 <literal>normal</literal>、<literal>hover</literal>、<literal>pressed</literal> 的 <strong>StyleBox</strong>之上。这样的行为有助于 <literal>focus</literal> <strong>StyleBox</strong> 在不同节点上复用。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="77"></colspec>
                    <colspec colwidth="10"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-property-content-margin-bottom"><inline classes="std std-ref">content_margin_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-property-content-margin-left"><inline classes="std std-ref">content_margin_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-property-content-margin-right"><inline classes="std std-ref">content_margin_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-property-content-margin-top"><inline classes="std std-ref">content_margin_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="158"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-private-method-draw"><inline classes="std std-ref">_draw</inline></reference>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-private-method-get-draw-rect"><inline classes="std std-ref">_get_draw_rect</inline></reference>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-private-method-get-minimum-size"><inline classes="std std-ref">_get_minimum_size</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-private-method-test-mask"><inline classes="std std-ref">_test_mask</inline></reference>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-draw"><inline classes="std std-ref">draw</inline></reference>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-get-content-margin"><inline classes="std std-ref">get_content_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-get-current-item-drawn"><inline classes="std std-ref">get_current_item_drawn</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-get-margin"><inline classes="std std-ref">get_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-get-minimum-size"><inline classes="std std-ref">get_minimum_size</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-get-offset"><inline classes="std std-ref">get_offset</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-set-content-margin"><inline classes="std std-ref">set_content_margin</inline></reference>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-set-content-margin-all"><inline classes="std std-ref">set_content_margin_all</inline></reference>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-stylebox-method-test-mask"><inline classes="std std-ref">test_mask</inline></reference>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-stylebox-property-content-margin-bottom"></target>
            <paragraph classes="classref-property" ids="class-stylebox-property-content-margin-bottom" names="class_stylebox_property_content_margin_bottom"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>content_margin_bottom</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-stylebox-property-content-margin-bottom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该样式盒内容的底边距。增加该值会从底部减少内容的可用空间。</paragraph>
            <paragraph>如果该值为负，则忽略该值并使用特定于子项的边距。例如，对于 <reference internal="True" refuri="class_styleboxflat#class-styleboxflat"><inline classes="std std-ref">StyleBoxFlat</inline></reference>，（如果有厚度的话）将使用边框厚度。</paragraph>
            <paragraph>内容是什么由使用该样式盒的代码决定：例如，<reference internal="True" refuri="class_button#class-button"><inline classes="std std-ref">Button</inline></reference> 会为其文本内容设置该内容边距。</paragraph>
            <paragraph>应使用 <reference internal="True" refid="class-stylebox-method-get-margin"><inline classes="std std-ref">get_margin</inline></reference> 作为消费者获取该值，而不是直接读取这些属性。这是因为它能够正确地尊重负值和上面提到的后备值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-property-content-margin-left"></target>
            <paragraph classes="classref-property" ids="class-stylebox-property-content-margin-left" names="class_stylebox_property_content_margin_left"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>content_margin_left</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-stylebox-property-content-margin-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该样式盒内容的左边距。增加该值会从左侧减少内容的可用空间。</paragraph>
            <paragraph>额外的注意事项请参阅 <reference internal="True" refid="class-stylebox-property-content-margin-bottom"><inline classes="std std-ref">content_margin_bottom</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-property-content-margin-right"></target>
            <paragraph classes="classref-property" ids="class-stylebox-property-content-margin-right" names="class_stylebox_property_content_margin_right"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>content_margin_right</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-stylebox-property-content-margin-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>此样式盒内容的右边距。增加此值会从右侧减少内容的可用空间。</paragraph>
            <paragraph>额外的注意事项请参阅 <reference internal="True" refid="class-stylebox-property-content-margin-bottom"><inline classes="std std-ref">content_margin_bottom</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-property-content-margin-top"></target>
            <paragraph classes="classref-property" ids="class-stylebox-property-content-margin-top" names="class_stylebox_property_content_margin_top"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>content_margin_top</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-stylebox-property-content-margin-top"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>此样式盒内容的顶边距。增加此值会从顶部减少内容的可用空间。</paragraph>
            <paragraph>额外的注意事项请参阅 <reference internal="True" refid="class-stylebox-property-content-margin-bottom"><inline classes="std std-ref">content_margin_bottom</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-stylebox-private-method-draw"></target>
            <paragraph classes="classref-method" ids="class-stylebox-private-method-draw" names="class_stylebox_private_method__draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw</strong>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-private-method-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-private-method-get-draw-rect"></target>
            <paragraph classes="classref-method" ids="class-stylebox-private-method-get-draw-rect" names="class_stylebox_private_method__get_draw_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>_get_draw_rect</strong>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-private-method-get-draw-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-private-method-get-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-stylebox-private-method-get-minimum-size" names="class_stylebox_private_method__get_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>_get_minimum_size</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-private-method-get-minimum-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可以由用户实现的虚拟方法。样式盒在绘制时必须遵循所返回的自定义最小尺寸。默认情况下，<reference internal="True" refid="class-stylebox-method-get-minimum-size"><inline classes="std std-ref">get_minimum_size</inline></reference> 仅考虑边距。可以覆盖这个方法添加其他尺寸限制。会使用默认行为和这个方法输出的组合，两个大小均进行考虑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-private-method-test-mask"></target>
            <paragraph classes="classref-method" ids="class-stylebox-private-method-test-mask" names="class_stylebox_private_method__test_mask"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_test_mask</strong>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-private-method-test-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-draw"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-draw" names="class_stylebox_method_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw</strong>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-method-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用由给定 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 标识的画布项目绘制此样式盒。</paragraph>
            <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 值可以通过在现有 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 派生节点上调用 <reference internal="True" refuri="class_canvasitem#class-canvasitem-method-get-canvas-item"><inline classes="std std-ref">CanvasItem.get_canvas_item</inline></reference> 得到，也可以在 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 中使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-canvas-item-create"><inline classes="std std-ref">RenderingServer.canvas_item_create</inline></reference> 直接创建。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-get-content-margin"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-get-content-margin" names="class_stylebox_method_get_content_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-method-get-content-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的默认边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-get-current-item-drawn"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-get-current-item-drawn" names="class_stylebox_method_get_current_item_drawn"><reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>get_current_item_drawn</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-method-get-current-item-drawn"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此时处理其 <reference internal="True" refuri="class_canvasitem#class-canvasitem-constant-notification-draw"><inline classes="std std-ref">CanvasItem.NOTIFICATION_DRAW</inline></reference> 或 <reference internal="True" refuri="class_canvasitem#class-canvasitem-private-method-draw"><inline classes="std std-ref">CanvasItem._draw</inline></reference> 回调的 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-get-margin"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-get-margin" names="class_stylebox_method_get_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-method-get-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的内容边距偏移量。</paragraph>
            <paragraph>与 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的边距不同，正值会向内减小大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-get-minimum-size"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-get-minimum-size" names="class_stylebox_method_get_minimum_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_minimum_size</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-method-get-minimum-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此样式盒可以缩小到的最小尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-get-offset"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-get-offset" names="class_stylebox_method_get_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-method-get-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回样式盒的“偏移量”。这个辅助函数返回一个等价于 <literal>Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))</literal> 的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-set-content-margin"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-set-content-margin" names="class_stylebox_method_set_content_margin"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_content_margin</strong>(margin: <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-stylebox-method-set-content-margin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的默认值设置为 <literal>offset</literal> 像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-set-content-margin-all"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-set-content-margin-all" names="class_stylebox_method_set_content_margin_all"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_content_margin_all</strong>(offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-stylebox-method-set-content-margin-all"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将所有边的默认边距设置为 <literal>offset</literal> 像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-stylebox-method-test-mask"></target>
            <paragraph classes="classref-method" ids="class-stylebox-method-test-mask" names="class_stylebox_method_test_mask"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>test_mask</strong>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-stylebox-method-test-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>测试矩形中的一个位置，返回它是否通过掩码测试。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
