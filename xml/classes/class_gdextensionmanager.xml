<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gdextensionmanager.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/GDExtensionManager.xml.</comment>
    <target refid="class-gdextensionmanager"></target>
    <section ids="gdextensionmanager class-gdextensionmanager" names="gdextensionmanager class_gdextensionmanager">
        <title>GDExtensionManager</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供对 GDExtension 功能的访问。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>GDExtensionManager 加载、初始化、并跟踪项目中所有可用的 <reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference> 库。</paragraph>
            <paragraph><strong>注意：</strong>除非你知道自己在做什么，否则无需担心 GDExtension。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/gdextension/what_is_gdextension"><inline classes="doc">GDExtension 概述</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/gdextension/gdextension_cpp_example"><inline classes="doc">C++ 的 GDExtension 示例</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="55"></colspec>
                    <colspec colwidth="131"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextensionmanager-method-get-extension"><inline classes="std std-ref">get_extension</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextensionmanager-method-get-loaded-extensions"><inline classes="std std-ref">get_loaded_extensions</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextensionmanager-method-is-extension-loaded"><inline classes="std std-ref">is_extension_loaded</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextensionmanager-method-load-extension"><inline classes="std std-ref">load_extension</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextensionmanager-method-reload-extension"><inline classes="std std-ref">reload_extension</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdextensionmanager-method-unload-extension"><inline classes="std std-ref">unload_extension</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-gdextensionmanager-signal-extensions-reloaded"></target>
            <paragraph classes="classref-signal" ids="class-gdextensionmanager-signal-extensions-reloaded" names="class_gdextensionmanager_signal_extensions_reloaded"><strong>extensions_reloaded</strong>() <reference internal="True" refid="class-gdextensionmanager-signal-extensions-reloaded"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在编辑器已完成重新加载一个或多个扩展后发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-gdextensionmanager-loadstatus"></target>
            <paragraph classes="classref-enumeration" ids="enum-gdextensionmanager-loadstatus" names="enum_gdextensionmanager_loadstatus">enum <strong>LoadStatus</strong>: <reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-gdextensionmanager-constant-load-status-ok"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextensionmanager-constant-load-status-ok" names="class_gdextensionmanager_constant_load_status_ok"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>LOAD_STATUS_OK</strong> = <literal>0</literal></paragraph>
            <paragraph>扩展已被成功加载。</paragraph>
            <target refid="class-gdextensionmanager-constant-load-status-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextensionmanager-constant-load-status-failed" names="class_gdextensionmanager_constant_load_status_failed"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>LOAD_STATUS_FAILED</strong> = <literal>1</literal></paragraph>
            <paragraph>扩展加载失败，可能是因为它不存在或缺少依赖项。</paragraph>
            <target refid="class-gdextensionmanager-constant-load-status-already-loaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextensionmanager-constant-load-status-already-loaded" names="class_gdextensionmanager_constant_load_status_already_loaded"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>LOAD_STATUS_ALREADY_LOADED</strong> = <literal>2</literal></paragraph>
            <paragraph>扩展已被加载。</paragraph>
            <target refid="class-gdextensionmanager-constant-load-status-not-loaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextensionmanager-constant-load-status-not-loaded" names="class_gdextensionmanager_constant_load_status_not_loaded"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>LOAD_STATUS_NOT_LOADED</strong> = <literal>3</literal></paragraph>
            <paragraph>扩展尚未被加载。</paragraph>
            <target refid="class-gdextensionmanager-constant-load-status-needs-restart"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-gdextensionmanager-constant-load-status-needs-restart" names="class_gdextensionmanager_constant_load_status_needs_restart"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>LOAD_STATUS_NEEDS_RESTART</strong> = <literal>4</literal></paragraph>
            <paragraph>该扩展需要应用程序重新启动才能完全加载。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gdextensionmanager-method-get-extension"></target>
            <paragraph classes="classref-method" ids="class-gdextensionmanager-method-get-extension" names="class_gdextensionmanager_method_get_extension"><reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference> <strong>get_extension</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdextensionmanager-method-get-extension"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定文件 <literal>path</literal> 处的 <reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference>，如果尚未加载或不存在，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdextensionmanager-method-get-loaded-extensions"></target>
            <paragraph classes="classref-method" ids="class-gdextensionmanager-method-get-loaded-extensions" names="class_gdextensionmanager_method_get_loaded_extensions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_loaded_extensions</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-gdextensionmanager-method-get-loaded-extensions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有当前加载的扩展的文件路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdextensionmanager-method-is-extension-loaded"></target>
            <paragraph classes="classref-method" ids="class-gdextensionmanager-method-is-extension-loaded" names="class_gdextensionmanager_method_is_extension_loaded"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_extension_loaded</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-gdextensionmanager-method-is-extension-loaded"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定文件 <literal>path</literal> 处的扩展已成功加载，则返回 <literal>true</literal>。另请参阅 <reference internal="True" refid="class-gdextensionmanager-method-get-loaded-extensions"><inline classes="std std-ref">get_loaded_extensions</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdextensionmanager-method-load-extension"></target>
            <paragraph classes="classref-method" ids="class-gdextensionmanager-method-load-extension" names="class_gdextensionmanager_method_load_extension"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>load_extension</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdextensionmanager-method-load-extension"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用绝对文件路径加载扩展。<literal>path</literal> 需要指向有效的 <reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference>。成功时返回 <reference internal="True" refid="class-gdextensionmanager-constant-load-status-ok"><inline classes="std std-ref">LOAD_STATUS_OK</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdextensionmanager-method-reload-extension"></target>
            <paragraph classes="classref-method" ids="class-gdextensionmanager-method-reload-extension" names="class_gdextensionmanager_method_reload_extension"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>reload_extension</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdextensionmanager-method-reload-extension"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重新加载给定文件路径处的扩展。<literal>path</literal> 需要指向有效的 <reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference>，否则该方法可能返回 <reference internal="True" refid="class-gdextensionmanager-constant-load-status-not-loaded"><inline classes="std std-ref">LOAD_STATUS_NOT_LOADED</inline></reference> 或 <reference internal="True" refid="class-gdextensionmanager-constant-load-status-failed"><inline classes="std std-ref">LOAD_STATUS_FAILED</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>你只能在编辑器中重新加载扩展。在发布构建中，该方法总是失败并返回 <reference internal="True" refid="class-gdextensionmanager-constant-load-status-failed"><inline classes="std std-ref">LOAD_STATUS_FAILED</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdextensionmanager-method-unload-extension"></target>
            <paragraph classes="classref-method" ids="class-gdextensionmanager-method-unload-extension" names="class_gdextensionmanager_method_unload_extension"><reference internal="True" refid="enum-gdextensionmanager-loadstatus"><inline classes="std std-ref">LoadStatus</inline></reference> <strong>unload_extension</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdextensionmanager-method-unload-extension"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按文件路径卸载扩展。<literal>path</literal> 需要指向已经加载的 <reference internal="True" refuri="class_gdextension#class-gdextension"><inline classes="std std-ref">GDExtension</inline></reference>，否则该方法返回 <reference internal="True" refid="class-gdextensionmanager-constant-load-status-not-loaded"><inline classes="std std-ref">LOAD_STATUS_NOT_LOADED</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
