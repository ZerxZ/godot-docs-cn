<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_importermesh.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ImporterMesh.xml.</comment>
    <target refid="class-importermesh"></target>
    <section ids="importermesh class-importermesh" names="importermesh class_importermesh">
        <title>ImporterMesh</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在导入过程中，包含基于顶点数组的几何体的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>ImporterMesh 是一种类似于 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> 的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>。它包含基于顶点数组的几何体，被分为<emphasis>表面</emphasis>。每个表面都包含一个完全独立的数组和一个用于绘制它的材质。在设计方面，具有多个表面的网格优于单个表面，因为在 3D 编辑软件中创建的对象通常包含多种材质。</paragraph>
            <paragraph>与其运行时对应物不同，<strong>ImporterMesh</strong> 在各种导入步骤（例如 lod 和阴影网格生成）发生之前包含网格数据。修改表面数据时，通过先调用 <reference internal="True" refid="class-importermesh-method-clear"><inline classes="std std-ref">clear</inline></reference> ，然后为每个表面调用 <reference internal="True" refid="class-importermesh-method-add-surface"><inline classes="std std-ref">add_surface</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="24"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-property-data"><inline classes="std std-ref">_data</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{ "surfaces": [] }</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="366"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-add-blend-shape"><inline classes="std std-ref">add_blend_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-add-surface"><inline classes="std std-ref">add_surface</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> primitive, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> arrays, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array[]</inline></reference> blend_shapes=[], <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> lods={}, <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> material=null, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name="", <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-generate-lods"><inline classes="std std-ref">generate_lods</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> normal_merge_angle, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> normal_split_angle, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> bone_transform_array <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-blend-shape-count"><inline classes="std std-ref">get_blend_shape_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-blend-shape-mode"><inline classes="std std-ref">get_blend_shape_mode</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-blend-shape-name"><inline classes="std std-ref">get_blend_shape_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> blend_shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-lightmap-size-hint"><inline classes="std std-ref">get_lightmap_size_hint</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-mesh"><inline classes="std std-ref">get_mesh</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> base_mesh=null <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-arrays"><inline classes="std std-ref">get_surface_arrays</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-blend-shape-arrays"><inline classes="std std-ref">get_surface_blend_shape_arrays</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> blend_shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-count"><inline classes="std std-ref">get_surface_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-format"><inline classes="std std-ref">get_surface_format</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-lod-count"><inline classes="std std-ref">get_surface_lod_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-lod-indices"><inline classes="std std-ref">get_surface_lod_indices</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> lod_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-lod-size"><inline classes="std std-ref">get_surface_lod_size</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> lod_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-material"><inline classes="std std-ref">get_surface_material</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-name"><inline classes="std std-ref">get_surface_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-get-surface-primitive-type"><inline classes="std std-ref">get_surface_primitive_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-set-blend-shape-mode"><inline classes="std std-ref">set_blend_shape_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> mode <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-set-lightmap-size-hint"><inline classes="std std-ref">set_lightmap_size_hint</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-set-surface-material"><inline classes="std std-ref">set_surface_material</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> material <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-importermesh-method-set-surface-name"><inline classes="std std-ref">set_surface_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-importermesh-property-data"></target>
            <paragraph classes="classref-property" ids="class-importermesh-property-data" names="class_importermesh_property__data"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_data</strong> = <literal>{ "surfaces": [] }</literal></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-importermesh-method-add-blend-shape"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-add-blend-shape" names="class_importermesh_method_add_blend_shape">void <strong>add_blend_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>为将使用 <reference internal="True" refid="class-importermesh-method-add-surface"><inline classes="std std-ref">add_surface</inline></reference> 添加的混合形状添加名称。必须在表面被添加之前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-add-surface"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-add-surface" names="class_importermesh_method_add_surface">void <strong>add_surface</strong> <strong>(</strong> <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> primitive, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> arrays, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array[]</inline></reference> blend_shapes=[], <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> lods={}, <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> material=null, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name="", <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> flags=0 <strong>)</strong></paragraph>
            <paragraph>创建一个新的表面。<reference internal="True" refuri="class_mesh#class-mesh-method-get-surface-count"><inline classes="std std-ref">Mesh.get_surface_count</inline></reference> 将成为这个新表面的 <literal>surf_idx</literal>。</paragraph>
            <paragraph>创建表面以使用 <literal>primitive</literal> 进行渲染，它可以是 <reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> 中定义的任何值。</paragraph>
            <paragraph><literal>arrays</literal> 参数是数组的数组。每个 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-max"><inline classes="std std-ref">Mesh.ARRAY_MAX</inline></reference> 元素都包含一个数组，其中包含此表面的一些网格数据，如 <reference internal="True" refuri="class_mesh#enum-mesh-arraytype"><inline classes="std std-ref">ArrayType</inline></reference> 的相应成员所描述的一样；如果它未被使用，则为 <literal>null</literal>。例如，<literal>arrays[0]</literal> 是顶点数组。始终需要第一个顶点子数组；其他的是可选的。添加索引数组会将此表面置于“索引模式”，其中顶点和其他数组成为数据源，索引数组定义顶点顺序。所有子数组的长度必须与顶点数组的长度相同（或者是顶点数组长度的精确倍数，当子数组的多个元素对应于单个顶点时）；或者为空，如果使用了 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-index"><inline classes="std std-ref">Mesh.ARRAY_INDEX</inline></reference> 则除外。</paragraph>
            <paragraph><literal>blend_shapes</literal> 参数是每个混合形状的顶点数据数组。 每个元素都是与 <literal>arrays</literal> 具有相同结构的数组，但是 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-vertex"><inline classes="std std-ref">Mesh.ARRAY_VERTEX</inline></reference>、<reference internal="True" refuri="class_mesh#class-mesh-constant-array-normal"><inline classes="std std-ref">Mesh.ARRAY_NORMAL</inline></reference> 和 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-tangent"><inline classes="std std-ref">Mesh.ARRAY_TANGENT</inline></reference> 这些条目，当且仅当在 <literal>arrays</literal> 被设置且所有其他条目都是 <literal>null</literal> 时，会被设置。</paragraph>
            <paragraph><literal>lods</literal> 参数是一个带有 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 键和 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> 值的字典。字典中的每个条目代表了表面的一个 LOD 级别，其中值是用于 LOD 级别的 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-index"><inline classes="std std-ref">Mesh.ARRAY_INDEX</inline></reference> 数组，键大致与使用 LOD 统计信息的距离成正比。即，增加 LOD 的关键点也会增加在使用 LOD 之前对象必须与相机的距离。</paragraph>
            <paragraph><literal>flags</literal> 参数是根据需要按位或的：<reference internal="True" refuri="class_mesh#enum-mesh-arraycustomformat"><inline classes="std std-ref">ArrayCustomFormat</inline></reference> 的一个值左移 <literal>ARRAY_FORMAT_CUSTOMn_SHIFT</literal>，用于每个正在使用的自定义通道，<reference internal="True" refuri="class_mesh#class-mesh-constant-array-flag-use-dynamic-update"><inline classes="std std-ref">Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE</inline></reference>、<reference internal="True" refuri="class_mesh#class-mesh-constant-array-flag-use-8-bone-weights"><inline classes="std std-ref">Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS</inline></reference>、或 <reference internal="True" refuri="class_mesh#class-mesh-constant-array-flag-uses-empty-vertex-array"><inline classes="std std-ref">Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>使用索引时，建议只使用点、线或三角形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-clear"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-clear" names="class_importermesh_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从该 <strong>ImporterMesh</strong> 中，移除所有表面和混合形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-generate-lods"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-generate-lods" names="class_importermesh_method_generate_lods">void <strong>generate_lods</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> normal_merge_angle, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> normal_split_angle, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> bone_transform_array <strong>)</strong></paragraph>
            <paragraph>为这个 ImporterMesh 生成所有 lod。</paragraph>
            <paragraph><literal>normal_merge_angle</literal> 和 <literal>normal_split_angle</literal> 以度为单位，并以与 <literal>lods</literal> 中的导入器设置相同的方式使用。作为一个好的默认值，分别使用 25 和 60。</paragraph>
            <paragraph>生成的 LOD 的数量可以使用 <reference internal="True" refid="class-importermesh-method-get-surface-lod-count"><inline classes="std std-ref">get_surface_lod_count</inline></reference> 访问，并且每个 LOD 在 <reference internal="True" refid="class-importermesh-method-get-surface-lod-size"><inline classes="std std-ref">get_surface_lod_size</inline></reference> 和 <reference internal="True" refid="class-importermesh-method-get-surface-lod-indices"><inline classes="std std-ref">get_surface_lod_indices</inline></reference> 中可用。</paragraph>
            <paragraph><literal>bone_transform_array</literal> 是一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，可以是空的，也可以包含<reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>，对于每个网格的骨骼 ID，在生成 LOD 网格变化时将应用网格蒙皮。这通常用于解释网格本身与其蒙皮数据之间的缩放差异。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-blend-shape-count"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-blend-shape-count" names="class_importermesh_method_get_blend_shape_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_blend_shape_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该网格包含的混合形状的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-blend-shape-mode"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-blend-shape-mode" names="class_importermesh_method_get_blend_shape_mode"><reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> <strong>get_blend_shape_mode</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该网格的混合形状模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-blend-shape-name"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-blend-shape-name" names="class_importermesh_method_get_blend_shape_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_blend_shape_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> blend_shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回此索引处的混合形状的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-lightmap-size-hint"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-lightmap-size-hint" names="class_importermesh_method_get_lightmap_size_hint"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_lightmap_size_hint</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该网格的大小提示，用于在 UV 空间中展开光照贴图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-mesh"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-mesh" names="class_importermesh_method_get_mesh"><reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> <strong>get_mesh</strong> <strong>(</strong> <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> base_mesh=null <strong>)</strong></paragraph>
            <paragraph>将该 <strong>ImporterMesh</strong> 表示的网格数据作为一个可用的 <reference internal="True" refuri="class_arraymesh#class-arraymesh"><inline classes="std std-ref">ArrayMesh</inline></reference> 返回。</paragraph>
            <paragraph>这个方法缓存了返回的网格，后续的调用将返回缓存的数据，直到 <reference internal="True" refid="class-importermesh-method-clear"><inline classes="std std-ref">clear</inline></reference> 被调用。</paragraph>
            <paragraph>如果还没有缓存并且提供了 <literal>base_mesh</literal>，则 <literal>base_mesh</literal> 将被使用并被改变。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-arrays"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-arrays" names="class_importermesh_method_get_surface_arrays"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_surface_arrays</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回构成请求表面的顶点、法线、UV 等的数组。参见 <reference internal="True" refid="class-importermesh-method-add-surface"><inline classes="std std-ref">add_surface</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-blend-shape-arrays"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-blend-shape-arrays" names="class_importermesh_method_get_surface_blend_shape_arrays"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_surface_blend_shape_arrays</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> blend_shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>为一个表面请求的混合形状索引，返回一组混合形状数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-count"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-count" names="class_importermesh_method_get_surface_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_surface_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该网格拥有的表面数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-format"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-format" names="class_importermesh_method_get_surface_format"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_surface_format</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该网格拥有的表面的格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-lod-count"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-lod-count" names="class_importermesh_method_get_surface_lod_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_surface_lod_count</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该网格在给定表面上保留的 lod 数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-lod-indices"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-lod-indices" names="class_importermesh_method_get_surface_lod_indices"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_surface_lod_indices</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> lod_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回表面的 lod 的索引缓冲区。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-lod-size"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-lod-size" names="class_importermesh_method_get_surface_lod_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_surface_lod_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> lod_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回为一个表面激活 lod 的屏幕比率。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-material"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-material" names="class_importermesh_method_get_surface_material"><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> <strong>get_surface_material</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定面的 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> 材质。面将由该材质来渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-name"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-name" names="class_importermesh_method_get_surface_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_surface_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取分配给此表面的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-get-surface-primitive-type"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-get-surface-primitive-type" names="class_importermesh_method_get_surface_primitive_type"><reference internal="True" refuri="class_mesh#enum-mesh-primitivetype"><inline classes="std std-ref">PrimitiveType</inline></reference> <strong>get_surface_primitive_type</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx <strong>)</strong></paragraph>
            <paragraph>返回所请求表面的基元类型（参见 <reference internal="True" refid="class-importermesh-method-add-surface"><inline classes="std std-ref">add_surface</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-set-blend-shape-mode"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-set-blend-shape-mode" names="class_importermesh_method_set_blend_shape_mode">void <strong>set_blend_shape_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> mode <strong>)</strong></paragraph>
            <paragraph>将混合形状模式设置为 <reference internal="True" refuri="class_mesh#enum-mesh-blendshapemode"><inline classes="std std-ref">BlendShapeMode</inline></reference> 之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-set-lightmap-size-hint"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-set-lightmap-size-hint" names="class_importermesh_method_set_lightmap_size_hint">void <strong>set_lightmap_size_hint</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size <strong>)</strong></paragraph>
            <paragraph>设置该网格的大小提示，以便在 UV 空间中展开光照贴图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-set-surface-material"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-set-surface-material" names="class_importermesh_method_set_surface_material">void <strong>set_surface_material</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> material <strong>)</strong></paragraph>
            <paragraph>设置给定面的 <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> 材质。该面将会使用此材质渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-importermesh-method-set-surface-name"></target>
            <paragraph classes="classref-method" ids="class-importermesh-method-set-surface-name" names="class_importermesh_method_set_surface_name">void <strong>set_surface_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> surface_idx, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>设置给定曲面的名称。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
