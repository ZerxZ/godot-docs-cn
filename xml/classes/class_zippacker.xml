<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_zippacker.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/modules/zip/doc_classes/ZIPPacker.xml.</comment>
    <target refid="class-zippacker"></target>
    <section ids="zippacker class-zippacker" names="zippacker class_zippacker">
        <title>ZIPPacker</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>允许创建 zip 文件。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类实现了一个写入器，可以将多个 blob 存储在一个压缩文件中。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func write_zip_file():
    var writer := ZIPPacker.new()
    var err := writer.open("user://archive.zip")
    if err != OK:
        return err
    writer.start_file("hello.txt")
    writer.write_file("Hello World".to_utf8_buffer())
    writer.close_file()

    writer.close()
    return OK</literal_block>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="140"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-zippacker-method-close"><inline classes="std std-ref">close</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-zippacker-method-close-file"><inline classes="std std-ref">close_file</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-zippacker-method-open"><inline classes="std std-ref">open</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refid="enum-zippacker-zipappend"><inline classes="std std-ref">ZipAppend</inline></reference> append=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-zippacker-method-start-file"><inline classes="std std-ref">start_file</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-zippacker-method-write-file"><inline classes="std std-ref">write_file</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-zippacker-zipappend"></target>
            <paragraph classes="classref-enumeration" ids="enum-zippacker-zipappend" names="enum_zippacker_zipappend">enum <strong>ZipAppend</strong>:</paragraph>
            <target refid="class-zippacker-constant-append-create"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-zippacker-constant-append-create" names="class_zippacker_constant_append_create"><reference internal="True" refid="enum-zippacker-zipappend"><inline classes="std std-ref">ZipAppend</inline></reference> <strong>APPEND_CREATE</strong> = <literal>0</literal></paragraph>
            <paragraph>在给定的路径新建 Zip 归档文件。</paragraph>
            <target refid="class-zippacker-constant-append-createafter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-zippacker-constant-append-createafter" names="class_zippacker_constant_append_createafter"><reference internal="True" refid="enum-zippacker-zipappend"><inline classes="std std-ref">ZipAppend</inline></reference> <strong>APPEND_CREATEAFTER</strong> = <literal>1</literal></paragraph>
            <paragraph>在位于给定路径的已有文件的末尾追加新的 Zip 归档文件。</paragraph>
            <target refid="class-zippacker-constant-append-addinzip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-zippacker-constant-append-addinzip" names="class_zippacker_constant_append_addinzip"><reference internal="True" refid="enum-zippacker-zipappend"><inline classes="std std-ref">ZipAppend</inline></reference> <strong>APPEND_ADDINZIP</strong> = <literal>2</literal></paragraph>
            <paragraph>在位于给定路径的已有 Zip 归档文件中添加新文件。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-zippacker-method-close"></target>
            <paragraph classes="classref-method" ids="class-zippacker-method-close" names="class_zippacker_method_close"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>close</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>关闭该实例底层所使用的资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-zippacker-method-close-file"></target>
            <paragraph classes="classref-method" ids="class-zippacker-method-close-file" names="class_zippacker_method_close_file"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>close_file</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>停止向归档中的文件进行写入。</paragraph>
            <paragraph>如果没有打开文件，则会失败。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-zippacker-method-open"></target>
            <paragraph classes="classref-method" ids="class-zippacker-method-open" names="class_zippacker_method_open"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>open</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refid="enum-zippacker-zipappend"><inline classes="std std-ref">ZipAppend</inline></reference> append=0 <strong>)</strong></paragraph>
            <paragraph>打开给定路径处的 Zip 文件，使用指定的写入模式进行写入。</paragraph>
            <paragraph>必须在其他调用前调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-zippacker-method-start-file"></target>
            <paragraph classes="classref-method" ids="class-zippacker-method-start-file" names="class_zippacker_method_start_file"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>start_file</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path <strong>)</strong></paragraph>
            <paragraph>开始向存档中的一个文件写入。同一时间只能写一个文件。</paragraph>
            <paragraph>必须在<reference internal="True" refid="class-zippacker-method-open"><inline classes="std std-ref">open</inline></reference>之后调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-zippacker-method-write-file"></target>
            <paragraph classes="classref-method" ids="class-zippacker-method-write-file" names="class_zippacker_method_write_file"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>write_file</strong> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
            <paragraph>将给定的 <literal>data</literal> 写到文件中。</paragraph>
            <paragraph>需要在 <reference internal="True" refid="class-zippacker-method-start-file"><inline classes="std std-ref">start_file</inline></reference> 之后调用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
