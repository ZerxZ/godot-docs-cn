<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_container.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Container.xml.</comment>
    <target refid="class-container"></target>
    <section ids="container class-container" names="container class_container">
        <title>Container</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_aspectratiocontainer#class-aspectratiocontainer"><inline classes="std std-ref">AspectRatioContainer</inline></reference>, <reference internal="True" refuri="class_boxcontainer#class-boxcontainer"><inline classes="std std-ref">BoxContainer</inline></reference>, <reference internal="True" refuri="class_centercontainer#class-centercontainer"><inline classes="std std-ref">CenterContainer</inline></reference>, <reference internal="True" refuri="class_editorproperty#class-editorproperty"><inline classes="std std-ref">EditorProperty</inline></reference>, <reference internal="True" refuri="class_flowcontainer#class-flowcontainer"><inline classes="std std-ref">FlowContainer</inline></reference>, <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference>, <reference internal="True" refuri="class_gridcontainer#class-gridcontainer"><inline classes="std std-ref">GridContainer</inline></reference>, <reference internal="True" refuri="class_margincontainer#class-margincontainer"><inline classes="std std-ref">MarginContainer</inline></reference>, <reference internal="True" refuri="class_panelcontainer#class-panelcontainer"><inline classes="std std-ref">PanelContainer</inline></reference>, <reference internal="True" refuri="class_scrollcontainer#class-scrollcontainer"><inline classes="std std-ref">ScrollContainer</inline></reference>, <reference internal="True" refuri="class_splitcontainer#class-splitcontainer"><inline classes="std std-ref">SplitContainer</inline></reference>, <reference internal="True" refuri="class_subviewportcontainer#class-subviewportcontainer"><inline classes="std std-ref">SubViewportContainer</inline></reference>, <reference internal="True" refuri="class_tabcontainer#class-tabcontainer"><inline classes="std std-ref">TabContainer</inline></reference></paragraph>
        <paragraph>所有 GUI 容器的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>所有 GUI 容器的基础节点。<strong>Container</strong> 包含其他控件，并自动以某种方式排列它们。可以继承此类来生成自定义的容器类。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/gui_containers"><inline classes="doc">使用容器</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="46"></colspec>
                    <colspec colwidth="14"></colspec>
                    <colspec colwidth="71"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>mouse_filter</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-mouse-filter"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="147"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-container-private-method-get-allowed-size-flags-horizontal"><inline classes="std std-ref">_get_allowed_size_flags_horizontal</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-container-private-method-get-allowed-size-flags-vertical"><inline classes="std std-ref">_get_allowed_size_flags_vertical</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-container-method-fit-child-in-rect"><inline classes="std std-ref">fit_child_in_rect</inline></reference>(child: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-container-method-queue-sort"><inline classes="std std-ref">queue_sort</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-container-signal-pre-sort-children"></target>
            <paragraph classes="classref-signal" ids="class-container-signal-pre-sort-children" names="class_container_signal_pre_sort_children"><strong>pre_sort_children</strong>() <reference internal="True" refid="class-container-signal-pre-sort-children"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>子节点将要被排序时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-container-signal-sort-children"></target>
            <paragraph classes="classref-signal" ids="class-container-signal-sort-children" names="class_container_signal_sort_children"><strong>sort_children</strong>() <reference internal="True" refid="class-container-signal-sort-children"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>需要对子节点进行排序时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="常量">
            <title>常量</title>
            <target refid="class-container-constant-notification-pre-sort-children"></target>
            <paragraph classes="classref-constant" ids="class-container-constant-notification-pre-sort-children" names="class_container_constant_notification_pre_sort_children"><strong>NOTIFICATION_PRE_SORT_CHILDREN</strong> = <literal>50</literal> <reference internal="True" refid="class-container-constant-notification-pre-sort-children"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在子节点将要被排序之前通知，以防有事情需要事先处理。</paragraph>
            <target refid="class-container-constant-notification-sort-children"></target>
            <paragraph classes="classref-constant" ids="class-container-constant-notification-sort-children" names="class_container_constant_notification_sort_children"><strong>NOTIFICATION_SORT_CHILDREN</strong> = <literal>51</literal> <reference internal="True" refid="class-container-constant-notification-sort-children"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>对子节点进行排序时的通知，必须立即服从。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-container-private-method-get-allowed-size-flags-horizontal"></target>
            <paragraph classes="classref-method" ids="class-container-private-method-get-allowed-size-flags-horizontal" names="class_container_private_method__get_allowed_size_flags_horizontal"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_get_allowed_size_flags_horizontal</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-container-private-method-get-allowed-size-flags-horizontal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>实现以返回子节点允许的水平 <reference internal="True" refuri="class_control#enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> 列表。这在技术上并不妨碍任何其他大小标志的使用，如果你的实现需要这样做。这只会限制检查器停靠面板中用户可用的选项。</paragraph>
            <paragraph><strong>注意：</strong>没有大小标志等同于有 <reference internal="True" refuri="class_control#class-control-constant-size-shrink-begin"><inline classes="std std-ref">Control.SIZE_SHRINK_BEGIN</inline></reference>。因此，该值始终是隐式允许的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-container-private-method-get-allowed-size-flags-vertical"></target>
            <paragraph classes="classref-method" ids="class-container-private-method-get-allowed-size-flags-vertical" names="class_container_private_method__get_allowed_size_flags_vertical"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_get_allowed_size_flags_vertical</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-container-private-method-get-allowed-size-flags-vertical"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>实现以返回子节点允许的垂直 <reference internal="True" refuri="class_control#enum-control-sizeflags"><inline classes="std std-ref">SizeFlags</inline></reference> 列表。这在技术上并不妨碍任何其他大小标志的使用，如果你的实现需要这样做。这只会限制检查器停靠面板中用户可用的选项。</paragraph>
            <paragraph><strong>注意：</strong>没有大小标志等同于有 <reference internal="True" refuri="class_control#class-control-constant-size-shrink-begin"><inline classes="std std-ref">Control.SIZE_SHRINK_BEGIN</inline></reference>。因此，该值始终是隐式允许的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-container-method-fit-child-in-rect"></target>
            <paragraph classes="classref-method" ids="class-container-method-fit-child-in-rect" names="class_container_method_fit_child_in_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>fit_child_in_rect</strong>(child: <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-container-method-fit-child-in-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的矩形中适配子控件。这主要是用于创建自定义容器类的辅助工具。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-container-method-queue-sort"></target>
            <paragraph classes="classref-method" ids="class-container-method-queue-sort" names="class_container_method_queue_sort"><abbreviation explanation="无返回值。">void</abbreviation> <strong>queue_sort</strong>() <reference internal="True" refid="class-container-method-queue-sort"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将子节点的重排加入队列。虽然会被自动调用，但也可以在需要时手动调用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
