<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_codehighlighter.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CodeHighlighter.xml.</comment>
    <target refid="class-codehighlighter"></target>
    <section ids="codehighlighter class-codehighlighter" names="codehighlighter class_codehighlighter">
        <title>CodeHighlighter</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_syntaxhighlighter#class-syntaxhighlighter"><inline classes="std std-ref">SyntaxHighlighter</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于代码的语法高亮器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>通过调整该资源的各种属性，可以更改 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 控件内的字符串、注释、数字和其他文本图案的颜色。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="84"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-property-color-regions"><inline classes="std std-ref">color_regions</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{}</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-property-function-color"><inline classes="std std-ref">function_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-property-keyword-colors"><inline classes="std std-ref">keyword_colors</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{}</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-property-member-keyword-colors"><inline classes="std std-ref">member_keyword_colors</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{}</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-property-member-variable-color"><inline classes="std std-ref">member_variable_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-property-number-color"><inline classes="std std-ref">number_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-property-symbol-color"><inline classes="std std-ref">symbol_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="238"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-add-color-region"><inline classes="std std-ref">add_color_region</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, line_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-add-keyword-color"><inline classes="std std-ref">add_keyword_color</inline></reference>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-add-member-keyword-color"><inline classes="std std-ref">add_member_keyword_color</inline></reference>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-clear-color-regions"><inline classes="std std-ref">clear_color_regions</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-clear-keyword-colors"><inline classes="std std-ref">clear_keyword_colors</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-clear-member-keyword-colors"><inline classes="std std-ref">clear_member_keyword_colors</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-get-keyword-color"><inline classes="std std-ref">get_keyword_color</inline></reference>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-get-member-keyword-color"><inline classes="std std-ref">get_member_keyword_color</inline></reference>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-has-color-region"><inline classes="std std-ref">has_color_region</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-has-keyword-color"><inline classes="std std-ref">has_keyword_color</inline></reference>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-has-member-keyword-color"><inline classes="std std-ref">has_member_keyword_color</inline></reference>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-remove-color-region"><inline classes="std std-ref">remove_color_region</inline></reference>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-remove-keyword-color"><inline classes="std std-ref">remove_keyword_color</inline></reference>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-codehighlighter-method-remove-member-keyword-color"><inline classes="std std-ref">remove_member_keyword_color</inline></reference>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-codehighlighter-property-color-regions"></target>
            <paragraph classes="classref-property" ids="class-codehighlighter-property-color-regions" names="class_codehighlighter_property_color_regions"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>color_regions</strong> = <literal>{}</literal> <reference internal="True" refid="class-codehighlighter-property-color-regions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_color_regions</strong>(value: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_color_regions</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置颜色区域。现有区域都将被移除。<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 的键为该区域的开始键和结束键，用空格隔开。对应的值为区域的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-property-function-color"></target>
            <paragraph classes="classref-property" ids="class-codehighlighter-property-function-color" names="class_codehighlighter_property_function_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>function_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-codehighlighter-property-function-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_function_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_function_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置函数的颜色。函数是后跟“(”的非关键字字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-property-keyword-colors"></target>
            <paragraph classes="classref-property" ids="class-codehighlighter-property-keyword-colors" names="class_codehighlighter_property_keyword_colors"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>keyword_colors</strong> = <literal>{}</literal> <reference internal="True" refid="class-codehighlighter-property-keyword-colors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_keyword_colors</strong>(value: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_keyword_colors</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置关键字的颜色。现有关键字都将被移除。<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 的键为关键字。对应的值为关键字的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-property-member-keyword-colors"></target>
            <paragraph classes="classref-property" ids="class-codehighlighter-property-member-keyword-colors" names="class_codehighlighter_property_member_keyword_colors"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>member_keyword_colors</strong> = <literal>{}</literal> <reference internal="True" refid="class-codehighlighter-property-member-keyword-colors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_member_keyword_colors</strong>(value: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_member_keyword_colors</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置成员关键字的颜色。现有成员关键字都将被移除。<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 的键为成员关键字。对应的值为成员关键字的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-property-member-variable-color"></target>
            <paragraph classes="classref-property" ids="class-codehighlighter-property-member-variable-color" names="class_codehighlighter_property_member_variable_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>member_variable_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-codehighlighter-property-member-variable-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_member_variable_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_member_variable_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置成员变量的颜色。成员变量是以“.”开头的非关键字、非函数字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-property-number-color"></target>
            <paragraph classes="classref-property" ids="class-codehighlighter-property-number-color" names="class_codehighlighter_property_number_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>number_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-codehighlighter-property-number-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_number_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_number_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置数字的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-property-symbol-color"></target>
            <paragraph classes="classref-property" ids="class-codehighlighter-property-symbol-color" names="class_codehighlighter_property_symbol_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>symbol_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-codehighlighter-property-symbol-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_symbol_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_symbol_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置符号的颜色。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-codehighlighter-method-add-color-region"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-add-color-region" names="class_codehighlighter_method_add_color_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_color_region</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, end_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, line_only: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-codehighlighter-method-add-color-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加从 <literal>start_key</literal> 到 <literal>end_key</literal> 的颜色区块（例如注释或字符串）。两个键都应该是符号，并且 <literal>start_key</literal> 不得与其他分隔符共享。</paragraph>
            <paragraph>如果 <literal>line_only</literal> 为 <literal>true</literal> 或 <literal>end_key</literal> 为空 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，则该区块不会延续到下一行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-add-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-add-keyword-color" names="class_codehighlighter_method_add_keyword_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_keyword_color</strong>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-codehighlighter-method-add-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置关键字的颜色。</paragraph>
            <paragraph>关键字不能包含除“_”之外的任何符号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-add-member-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-add-member-keyword-color" names="class_codehighlighter_method_add_member_keyword_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_member_keyword_color</strong>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-codehighlighter-method-add-member-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置成员关键字的颜色。</paragraph>
            <paragraph>成员关键字不能包含除“_”之外的任何符号。</paragraph>
            <paragraph>如果前面有“.”，则不会高亮显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-clear-color-regions"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-clear-color-regions" names="class_codehighlighter_method_clear_color_regions"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_color_regions</strong>() <reference internal="True" refid="class-codehighlighter-method-clear-color-regions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有颜色区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-clear-keyword-colors"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-clear-keyword-colors" names="class_codehighlighter_method_clear_keyword_colors"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_keyword_colors</strong>() <reference internal="True" refid="class-codehighlighter-method-clear-keyword-colors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有关键字。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-clear-member-keyword-colors"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-clear-member-keyword-colors" names="class_codehighlighter_method_clear_member_keyword_colors"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_member_keyword_colors</strong>() <reference internal="True" refid="class-codehighlighter-method-clear-member-keyword-colors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有成员关键字。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-get-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-get-keyword-color" names="class_codehighlighter_method_get_keyword_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_keyword_color</strong>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codehighlighter-method-get-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某个关键字的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-get-member-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-get-member-keyword-color" names="class_codehighlighter_method_get_member_keyword_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_member_keyword_color</strong>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codehighlighter-method-get-member-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某个成员关键字的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-has-color-region"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-has-color-region" names="class_codehighlighter_method_has_color_region"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_color_region</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codehighlighter-method-has-color-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果开始键存在则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-has-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-has-keyword-color" names="class_codehighlighter_method_has_keyword_color"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_keyword_color</strong>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codehighlighter-method-has-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果关键字存在则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-has-member-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-has-member-keyword-color" names="class_codehighlighter_method_has_member_keyword_color"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_member_keyword_color</strong>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-codehighlighter-method-has-member-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果成员关键字存在则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-remove-color-region"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-remove-color-region" names="class_codehighlighter_method_remove_color_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_color_region</strong>(start_key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codehighlighter-method-remove-color-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除使用该开始键的颜色区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-remove-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-remove-keyword-color" names="class_codehighlighter_method_remove_keyword_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_keyword_color</strong>(keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codehighlighter-method-remove-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除关键字。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-codehighlighter-method-remove-member-keyword-color"></target>
            <paragraph classes="classref-method" ids="class-codehighlighter-method-remove-member-keyword-color" names="class_codehighlighter_method_remove_member_keyword_color"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_member_keyword_color</strong>(member_keyword: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-codehighlighter-method-remove-member-keyword-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除成员关键字。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
