<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_bitmap.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/BitMap.xml.</comment>
    <target refid="class-bitmap"></target>
    <section ids="bitmap class-bitmap" names="bitmap class_bitmap">
        <title>BitMap</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>布尔矩阵。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>布尔值二维数组，可以用来高效存储二进制矩阵（每个矩阵元素只占一个比特位），并使用自然的笛卡尔坐标查询数值。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="82"></colspec>
                    <colspec colwidth="163"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-convert-to-image"><inline classes="std std-ref">convert_to_image</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-create"><inline classes="std std-ref">create</inline></reference>(size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-create-from-image-alpha"><inline classes="std std-ref">create_from_image_alpha</inline></reference>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-get-bit"><inline classes="std std-ref">get_bit</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-get-bitv"><inline classes="std std-ref">get_bitv</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-get-size"><inline classes="std std-ref">get_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-get-true-bit-count"><inline classes="std std-ref">get_true_bit_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-grow-mask"><inline classes="std std-ref">grow_mask</inline></reference>(pixels: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-opaque-to-polygons"><inline classes="std std-ref">opaque_to_polygons</inline></reference>(rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, epsilon: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 2.0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-resize"><inline classes="std std-ref">resize</inline></reference>(new_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-set-bit"><inline classes="std std-ref">set_bit</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-set-bit-rect"><inline classes="std std-ref">set_bit_rect</inline></reference>(rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, bit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-bitmap-method-set-bitv"><inline classes="std std-ref">set_bitv</inline></reference>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, bit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-bitmap-method-convert-to-image"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-convert-to-image" names="class_bitmap_method_convert_to_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>convert_to_image</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-bitmap-method-convert-to-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与该位图大小相同且具有 <reference internal="True" refuri="class_image#class-image-constant-format-l8"><inline classes="std std-ref">Image.FORMAT_L8</inline></reference> 类型的 <reference internal="True" refuri="class_image#enum-image-format"><inline classes="std std-ref">Format</inline></reference> 的图像。该位图中的 <literal>true</literal> 位被转换为白色像素，<literal>false</literal> 位被转换为黑色像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-create"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-create" names="class_bitmap_method_create"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create</strong>(size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-bitmap-method-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个指定尺寸的位图，用 <literal>false</literal> 填充。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-create-from-image-alpha"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-create-from-image-alpha" names="class_bitmap_method_create_from_image_alpha"><abbreviation explanation="无返回值。">void</abbreviation> <strong>create_from_image_alpha</strong>(image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>, threshold: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.1) <reference internal="True" refid="class-bitmap-method-create-from-image-alpha"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个匹配给定图像大小的位图，如果该位图的 Alpha 值等于或小于 <literal>threshold</literal>，则位图的每个元素都被设置为 <literal>false</literal>；否则被设置为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-get-bit"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-get-bit" names="class_bitmap_method_get_bit"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_bit</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-bitmap-method-get-bit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位图在指定位置的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-get-bitv"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-get-bitv" names="class_bitmap_method_get_bitv"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_bitv</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-bitmap-method-get-bitv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位图在指定位置的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-get-size"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-get-size" names="class_bitmap_method_get_size"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-bitmap-method-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回位图的尺寸。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-get-true-bit-count"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-get-true-bit-count" names="class_bitmap_method_get_true_bit_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_true_bit_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-bitmap-method-get-true-bit-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回设置为 <literal>true</literal> 的位图元素的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-grow-mask"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-grow-mask" names="class_bitmap_method_grow_mask"><abbreviation explanation="无返回值。">void</abbreviation> <strong>grow_mask</strong>(pixels: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>) <reference internal="True" refid="class-bitmap-method-grow-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>对位图进行形态学膨胀或腐蚀操作。如果 <literal>pixels</literal> 为正，则对位图执行膨胀。如果 <literal>pixels</literal> 为负，则对位图执行腐蚀。<literal>rect</literal> 定义进行形态学操作的区域。位于 <literal>rect</literal>] 之外的像素不会被 <reference internal="True" refid="class-bitmap-method-grow-mask"><inline classes="std std-ref">grow_mask</inline></reference> 影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-opaque-to-polygons"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-opaque-to-polygons" names="class_bitmap_method_opaque_to_polygons"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>] <strong>opaque_to_polygons</strong>(rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, epsilon: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 2.0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-bitmap-method-opaque-to-polygons"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个多边形 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，以覆盖位图的矩形部分。它使用行进方块算法，然后使用 Ramer-Douglas-Peucker（RDP）减少顶点数。每个多边形都被描述为其顶点的 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>。</paragraph>
            <paragraph>要获取覆盖整个位图的多边形，请传递：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">Rect2(Vector2(), get_size())</literal_block>
            <paragraph><literal>epsilon</literal> 被传递给 RDP，以控制多边形覆盖位图的准确程度：<literal>epsilon</literal> 越低，对应的多边形中的点越多。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-resize"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-resize" names="class_bitmap_method_resize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>resize</strong>(new_size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-bitmap-method-resize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该图像的大小修改为 <literal>new_size</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-set-bit"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-set-bit" names="class_bitmap_method_set_bit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bit</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-bitmap-method-set-bit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将位图中指定位置的元素设置为指定值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-set-bit-rect"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-set-bit-rect" names="class_bitmap_method_set_bit_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bit_rect</strong>(rect: <reference internal="True" refuri="class_rect2i#class-rect2i"><inline classes="std std-ref">Rect2i</inline></reference>, bit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-bitmap-method-set-bit-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将位图的矩形部分设置为指定值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-bitmap-method-set-bitv"></target>
            <paragraph classes="classref-method" ids="class-bitmap-method-set-bitv" names="class_bitmap_method_set_bitv"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bitv</strong>(position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, bit: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-bitmap-method-set-bitv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将位图中指定位置的元素设置为指定值。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
