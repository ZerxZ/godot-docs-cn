<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_spritebase3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/SpriteBase3D.xml.</comment>
    <target refid="class-spritebase3d"></target>
    <section ids="spritebase3d class-spritebase3d" names="spritebase3d class_spritebase3d">
        <title>SpriteBase3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_animatedsprite3d#class-animatedsprite3d"><inline classes="std std-ref">AnimatedSprite3D</inline></reference>, <reference internal="True" refuri="class_sprite3d#class-sprite3d"><inline classes="std std-ref">Sprite3D</inline></reference></paragraph>
        <paragraph>3D 环境中的 2D 精灵节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>在 3D 环境中显示 2D 纹理信息的节点。另请参阅 <reference internal="True" refuri="class_sprite3d#class-sprite3d"><inline classes="std std-ref">Sprite3D</inline></reference>，其中定义了许多其他属性。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="65"></colspec>
                    <colspec colwidth="85"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-alpha-antialiasing-edge"><inline classes="std std-ref">alpha_antialiasing_edge</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-alpha-antialiasing-mode"><inline classes="std std-ref">alpha_antialiasing_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-alpha-cut"><inline classes="std std-ref">alpha_cut</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-alpha-hash-scale"><inline classes="std std-ref">alpha_hash_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-alpha-scissor-threshold"><inline classes="std std-ref">alpha_scissor_threshold</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>Vector3.Axis</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-axis"><inline classes="std std-ref">axis</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-billboard"><inline classes="std std-ref">billboard</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-centered"><inline classes="std std-ref">centered</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-double-sided"><inline classes="std std-ref">double_sided</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-fixed-size"><inline classes="std std-ref">fixed_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-flip-h"><inline classes="std std-ref">flip_h</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-flip-v"><inline classes="std std-ref">flip_v</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-modulate"><inline classes="std std-ref">modulate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-no-depth-test"><inline classes="std std-ref">no_depth_test</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-pixel-size"><inline classes="std std-ref">pixel_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.01</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-shaded"><inline classes="std std-ref">shaded</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-texture-filter"><inline classes="std std-ref">texture_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-property-transparent"><inline classes="std std-ref">transparent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="41"></colspec>
                    <colspec colwidth="159"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-method-generate-triangle-mesh"><inline classes="std std-ref">generate_triangle_mesh</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-method-get-draw-flag"><inline classes="std std-ref">get_draw_flag</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-method-get-item-rect"><inline classes="std std-ref">get_item_rect</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-spritebase3d-method-set-draw-flag"><inline classes="std std-ref">set_draw_flag</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-spritebase3d-drawflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-spritebase3d-drawflags" names="enum_spritebase3d_drawflags">enum <strong>DrawFlags</strong>:</paragraph>
            <target refid="class-spritebase3d-constant-flag-transparent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-flag-transparent" names="class_spritebase3d_constant_flag_transparent"><reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_TRANSPARENT</strong> = <literal>0</literal></paragraph>
            <paragraph>如果设置，纹理的透明度和不透明性用于使精灵的这些部分不可见。</paragraph>
            <target refid="class-spritebase3d-constant-flag-shaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-flag-shaded" names="class_spritebase3d_constant_flag_shaded"><reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_SHADED</strong> = <literal>1</literal></paragraph>
            <paragraph>如果设置，环境中的灯光会影响精灵。</paragraph>
            <target refid="class-spritebase3d-constant-flag-double-sided"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-flag-double-sided" names="class_spritebase3d_constant_flag_double_sided"><reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_DOUBLE_SIDED</strong> = <literal>2</literal></paragraph>
            <paragraph>如果启用，则纹理也可以从背面看到。如果未启用，则纹理从后面查看时不可见。</paragraph>
            <target refid="class-spritebase3d-constant-flag-disable-depth-test"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-flag-disable-depth-test" names="class_spritebase3d_constant_flag_disable_depth_test"><reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_DISABLE_DEPTH_TEST</strong> = <literal>3</literal></paragraph>
            <paragraph>禁用深度测试，所以这个对象被画在所有其他对象的上面。但是，在绘制顺序中，在它之后绘制的对象可能会覆盖它。</paragraph>
            <target refid="class-spritebase3d-constant-flag-fixed-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-flag-fixed-size" names="class_spritebase3d_constant_flag_fixed_size"><reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_FIXED_SIZE</strong> = <literal>4</literal></paragraph>
            <paragraph>标签会根据深度进行缩放，从而在屏幕上始终以相同的大小显示。</paragraph>
            <target refid="class-spritebase3d-constant-flag-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-flag-max" names="class_spritebase3d_constant_flag_max"><reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-spritebase3d-alphacutmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-spritebase3d-alphacutmode" names="enum_spritebase3d_alphacutmode">enum <strong>AlphaCutMode</strong>:</paragraph>
            <target refid="class-spritebase3d-constant-alpha-cut-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-alpha-cut-disabled" names="class_spritebase3d_constant_alpha_cut_disabled"><reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>这个模式会进行标准的 Alpha 混合。可以显示半透明区域，但透明材质存在重叠时可能会暴露透明度排序问题。</paragraph>
            <target refid="class-spritebase3d-constant-alpha-cut-discard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-alpha-cut-discard" names="class_spritebase3d_constant_alpha_cut_discard"><reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_DISCARD</strong> = <literal>1</literal></paragraph>
            <paragraph>该模式仅允许完全透明或完全不透明的像素。除非启用了某种形式的屏幕空间抗锯齿（请参阅 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-quality-screen-space-aa"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/quality/screen_space_aa</inline></reference>），否则会看到粗糙的边缘。从好的方面来说，当多个透明材质重叠时，该模式不会出现透明度排序问题。这种模式也被称为 <emphasis>alpha 测试</emphasis>或 <emphasis>1 位透明度</emphasis>。</paragraph>
            <target refid="class-spritebase3d-constant-alpha-cut-opaque-prepass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-alpha-cut-opaque-prepass" names="class_spritebase3d_constant_alpha_cut_opaque_prepass"><reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_OPAQUE_PREPASS</strong> = <literal>2</literal></paragraph>
            <paragraph>该模式在深度预渲染阶段绘制完全不透明的像素。这比 <reference internal="True" refid="class-spritebase3d-constant-alpha-cut-disabled"><inline classes="std std-ref">ALPHA_CUT_DISABLED</inline></reference> 或 <reference internal="True" refid="class-spritebase3d-constant-alpha-cut-discard"><inline classes="std std-ref">ALPHA_CUT_DISCARD</inline></reference> 慢，但它允许在使用正确排序的同时显示半透明区域和平滑边缘。</paragraph>
            <target refid="class-spritebase3d-constant-alpha-cut-hash"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-spritebase3d-constant-alpha-cut-hash" names="class_spritebase3d_constant_alpha_cut_hash"><reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_HASH</strong> = <literal>3</literal></paragraph>
            <paragraph>该模式绘制时会截断所有低于空间确定性阈值的值，其余值将保持不透明。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-spritebase3d-property-alpha-antialiasing-edge"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-alpha-antialiasing-edge" names="class_spritebase3d_property_alpha_antialiasing_edge"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_antialiasing_edge</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_alpha_antialiasing_edge</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_antialiasing_edge</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将在 Alpha 通道上应用抗锯齿的阈值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-alpha-antialiasing-mode"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-alpha-antialiasing-mode" names="class_spritebase3d_property_alpha_antialiasing_mode"><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>alpha_antialiasing_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_alpha_antialiasing</strong> <strong>(</strong> <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>get_alpha_antialiasing</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要应用的 Alpha 抗锯齿类型。见 <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-alpha-cut"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-alpha-cut" names="class_spritebase3d_property_alpha_cut"><reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>alpha_cut</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_alpha_cut_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>get_alpha_cut_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该精灵的 Alpha 裁剪模式。可能的取值见 <reference internal="True" refid="enum-spritebase3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-alpha-hash-scale"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-alpha-hash-scale" names="class_spritebase3d_property_alpha_hash_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_hash_scale</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_alpha_hash_scale</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_hash_scale</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Alpha Hash 的哈希比例。推荐 <literal>0</literal> 和 <literal>2</literal> 之间的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-alpha-scissor-threshold"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-alpha-scissor-threshold" names="class_spritebase3d_property_alpha_scissor_threshold"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_scissor_threshold</strong> = <literal>0.5</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_alpha_scissor_threshold</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_scissor_threshold</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Alpha 裁剪丢弃数值的阈值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-axis"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-axis" names="class_spritebase3d_property_axis">Vector3.Axis <strong>axis</strong> = <literal>2</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_axis</strong> <strong>(</strong> Vector3.Axis value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph>Vector3.Axis <strong>get_axis</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理正面朝向的方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-billboard"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-billboard" names="class_spritebase3d_property_billboard"><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>billboard</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_billboard_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>get_billboard_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该精灵使用的公告板模式。可能的值见 <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-centered"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-centered" names="class_spritebase3d_property_centered"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>centered</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_centered</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_centered</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理将被居中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-double-sided"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-double-sided" names="class_spritebase3d_property_double_sided"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>double_sided</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则从后面也可以看到纹理，如果为 <literal>false</literal>，则从后面看它是不可见的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-fixed-size"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-fixed-size" names="class_spritebase3d_property_fixed_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>fixed_size</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则无论距离远近，标签都以相同的尺寸呈现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-flip-h"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-flip-h" names="class_spritebase3d_property_flip_h"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>flip_h</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flip_h</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_flipped_h</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理将被水平翻转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-flip-v"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-flip-v" names="class_spritebase3d_property_flip_v"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>flip_v</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_flip_v</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_flipped_v</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理将被垂直翻转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-modulate"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-modulate" names="class_spritebase3d_property_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>modulate</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_modulate</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_modulate</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于<emphasis>乘以</emphasis>纹理颜色的颜色值。可用于氛围着色或模拟光的颜色。</paragraph>
            <paragraph><strong>注意：</strong>如果在 <strong>SpriteBase3D</strong> 上定义了 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-material-override"><inline classes="std std-ref">GeometryInstance3D.material_override</inline></reference>，则必须配置该材质，让它的反照率考虑顶点颜色。否则 <reference internal="True" refid="class-spritebase3d-property-modulate"><inline classes="std std-ref">modulate</inline></reference> 中定义的颜色将被忽略。对于 <reference internal="True" refuri="class_basematerial3d#class-basematerial3d"><inline classes="std std-ref">BaseMaterial3D</inline></reference>，<reference internal="True" refuri="class_basematerial3d#class-basematerial3d-property-vertex-color-use-as-albedo"><inline classes="std std-ref">BaseMaterial3D.vertex_color_use_as_albedo</inline></reference> 必须为 <literal>true</literal>。对于 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference>，必须将 <literal>ALBEDO *= COLOR.rgb;</literal>，插入到着色器的 <literal>fragment()</literal> 函数中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-no-depth-test"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-no-depth-test" names="class_spritebase3d_property_no_depth_test"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>no_depth_test</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，深度测试被禁用，对象将按渲染顺序绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-offset"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-offset" names="class_spritebase3d_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理的绘图偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-pixel-size"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-pixel-size" names="class_spritebase3d_property_pixel_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pixel_size</strong> = <literal>0.01</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_pixel_size</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_pixel_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>精灵上一个像素宽度的大小，以 3D 缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-render-priority"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-render-priority" names="class_spritebase3d_property_render_priority"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>render_priority</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_render_priority</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_render_priority</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置该精灵的渲染优先级。优先级高的物体将被排序在优先级低的物体前面。</paragraph>
            <paragraph><strong>注意：</strong>仅在 <reference internal="True" refid="class-spritebase3d-property-alpha-cut"><inline classes="std std-ref">alpha_cut</inline></reference> 为 <reference internal="True" refid="class-spritebase3d-constant-alpha-cut-disabled"><inline classes="std std-ref">ALPHA_CUT_DISABLED</inline></reference>（默认值）时适用。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于透明物体的排序。这不会影响透明物体相对于不透明物体的排序方式。这是因为不透明对象不被排序，而透明对象则从后往前排序（取决于优先级）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-shaded"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-shaded" names="class_spritebase3d_property_shaded"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaded</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 中的 <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> 对该精灵有影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-texture-filter"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-texture-filter" names="class_spritebase3d_property_texture_filter"><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>texture_filter</strong> = <literal>3</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_texture_filter</strong> <strong>(</strong> <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>get_texture_filter</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理的过滤标志。选项见 <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-property-transparent"></target>
            <paragraph classes="classref-property" ids="class-spritebase3d-property-transparent" names="class_spritebase3d_property_transparent"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>transparent</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理的透明度和不透明度用于使精灵的这些部分不可见。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-spritebase3d-method-generate-triangle-mesh"></target>
            <paragraph classes="classref-method" ids="class-spritebase3d-method-generate-triangle-mesh" names="class_spritebase3d_method_generate_triangle_mesh"><reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference> <strong>generate_triangle_mesh</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference>，其中精灵的顶点遵循它的当前配置（例如它的 <reference internal="True" refid="class-spritebase3d-property-axis"><inline classes="std std-ref">axis</inline></reference> 和 <reference internal="True" refid="class-spritebase3d-property-pixel-size"><inline classes="std std-ref">pixel_size</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-method-get-draw-flag"></target>
            <paragraph classes="classref-method" ids="class-spritebase3d-method-get-draw-flag" names="class_spritebase3d_method_get_draw_flag"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定标志的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-method-get-item-rect"></target>
            <paragraph classes="classref-method" ids="class-spritebase3d-method-get-item-rect" names="class_spritebase3d_method_get_item_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_item_rect</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回表示此精灵的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-spritebase3d-method-set-draw-flag"></target>
            <paragraph classes="classref-method" ids="class-spritebase3d-method-set-draw-flag" names="class_spritebase3d_method_set_draw_flag">void <strong>set_draw_flag</strong> <strong>(</strong> <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>如果 <literal>true</literal>，则指定的标志将被启用。标志列表见 <reference internal="True" refid="enum-spritebase3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
