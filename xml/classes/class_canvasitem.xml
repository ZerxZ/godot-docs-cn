<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_canvasitem.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/CanvasItem.xml.</comment>
    <target refid="class-canvasitem"></target>
    <section ids="canvasitem class-canvasitem" names="canvasitem class_canvasitem">
        <title>CanvasItem</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>, <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference></paragraph>
        <paragraph>2D 空间中所有对象的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>2D 空间中所有对象的抽象基类。画布项目以树状排列；子节点继承并扩展其父节点的变换。<strong>CanvasItem</strong> 由 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 扩展为 GUI 相关的节点，由 <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> 扩展为 2D 游戏对象。</paragraph>
            <paragraph>任何 <strong>CanvasItem</strong> 都可以进行绘图。绘图时，引擎会调用 <reference internal="True" refid="class-canvasitem-method-queue-redraw"><inline classes="std std-ref">queue_redraw</inline></reference>，然后 <reference internal="True" refid="class-canvasitem-constant-notification-draw"><inline classes="std std-ref">NOTIFICATION_DRAW</inline></reference> 就会在空闲时被接收到以请求重绘。因此，画布项目不需要每一帧都重绘，这显著提升了性能。这个类还提供了几个用于在 <strong>CanvasItem</strong> 上绘图的函数（见 <literal>draw_*</literal> 函数）。不过这些函数都只能在 <reference internal="True" refid="class-canvasitem-private-method-draw"><inline classes="std std-ref">_draw</inline></reference> 及其对应的 <reference internal="True" refuri="class_object#class-object-private-method-notification"><inline classes="std std-ref">Object._notification</inline></reference> 或连接到 <reference internal="True" refid="class-canvasitem-signal-draw"><inline classes="std std-ref">draw</inline></reference> 的方法内使用。</paragraph>
            <paragraph>画布项目在其画布层上是按树状顺序绘制的。默认情况下，子项目位于其父项目的上方，因此根 <strong>CanvasItem</strong> 将被画在所有项目的后面。这种行为可以针对每个画布项目进行更改。</paragraph>
            <paragraph><strong>CanvasItem</strong> 可以隐藏，隐藏时也会隐藏其子项目。通过调整 <strong>CanvasItem</strong> 的各种其它属性，你还可以调制它的颜色（通过 <reference internal="True" refid="class-canvasitem-property-modulate"><inline classes="std std-ref">modulate</inline></reference> 或 <reference internal="True" refid="class-canvasitem-property-self-modulate"><inline classes="std std-ref">self_modulate</inline></reference>）、更改 Z 索引、混合模式等。</paragraph>
            <paragraph>请注意，变换、调制、可见性等属性只会传播至<emphasis>直属</emphasis>的 <strong>CanvasItem</strong> 子节点。如果中间有 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>、<reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 等非 <strong>CanvasItem</strong> 节点，那么更深层 <strong>CanvasItem</strong> 的位置和 <reference internal="True" refid="class-canvasitem-property-modulate"><inline classes="std std-ref">modulate</inline></reference> 链就是独立的了。另见 <reference internal="True" refid="class-canvasitem-property-top-level"><inline classes="std std-ref">top_level</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/2d_transforms"><inline classes="doc">Viewport 和画布变换</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/custom_drawing_in_2d"><inline classes="doc">2D 中的自定义绘图</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频频谱可视化演示" refuri="https://godotengine.org/asset-library/asset/2762">音频频谱可视化演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="59"></colspec>
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-clip-children"><inline classes="std std-ref">clip_children</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-light-mask"><inline classes="std std-ref">light_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-material"><inline classes="std std-ref">material</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-modulate"><inline classes="std std-ref">modulate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-self-modulate"><inline classes="std std-ref">self_modulate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-show-behind-parent"><inline classes="std std-ref">show_behind_parent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-texture-filter"><inline classes="std std-ref">texture_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-texture-repeat"><inline classes="std std-ref">texture_repeat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-top-level"><inline classes="std std-ref">top_level</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-use-parent-material"><inline classes="std std-ref">use_parent_material</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-visibility-layer"><inline classes="std std-ref">visibility_layer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-visible"><inline classes="std std-ref">visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-y-sort-enabled"><inline classes="std std-ref">y_sort_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-z-as-relative"><inline classes="std std-ref">z_as_relative</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-property-z-index"><inline classes="std std-ref">z_index</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="819"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-private-method-draw"><inline classes="std std-ref">_draw</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-animation-slice"><inline classes="std std-ref">draw_animation_slice</inline></reference>(animation_length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-arc"><inline classes="std std-ref">draw_arc</inline></reference>(center: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, start_angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, end_angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, point_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-char"><inline classes="std std-ref">draw_char</inline></reference>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, char: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-char-outline"><inline classes="std std-ref">draw_char_outline</inline></reference>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, char: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-circle"><inline classes="std std-ref">draw_circle</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, filled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-colored-polygon"><inline classes="std std-ref">draw_colored_polygon</inline></reference>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-dashed-line"><inline classes="std std-ref">draw_dashed_line</inline></reference>(from: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, dash: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 2.0, aligned: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-end-animation"><inline classes="std std-ref">draw_end_animation</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-lcd-texture-rect-region"><inline classes="std std-ref">draw_lcd_texture_rect_region</inline></reference>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-line"><inline classes="std std-ref">draw_line</inline></reference>(from: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-mesh"><inline classes="std std-ref">draw_mesh</inline></reference>(mesh: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> = Transform2D(1, 0, 0, 1, 0, 0), modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-msdf-texture-rect-region"><inline classes="std std-ref">draw_msdf_texture_rect_region</inline></reference>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), outline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, pixel_range: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4.0, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-multiline"><inline classes="std std-ref">draw_multiline</inline></reference>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-multiline-colors"><inline classes="std std-ref">draw_multiline_colors</inline></reference>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-multiline-string"><inline classes="std std-ref">draw_multiline_string</inline></reference>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, max_lines: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), brk_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3, justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-multiline-string-outline"><inline classes="std std-ref">draw_multiline_string_outline</inline></reference>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, max_lines: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), brk_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3, justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-multimesh"><inline classes="std std-ref">draw_multimesh</inline></reference>(multimesh: <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-polygon"><inline classes="std std-ref">draw_polygon</inline></reference>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">draw_polyline</inline></reference>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-polyline-colors"><inline classes="std std-ref">draw_polyline_colors</inline></reference>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-primitive"><inline classes="std std-ref">draw_primitive</inline></reference>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-rect"><inline classes="std std-ref">draw_rect</inline></reference>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, filled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-set-transform"><inline classes="std std-ref">draw_set_transform</inline></reference>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(1, 1))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-set-transform-matrix"><inline classes="std std-ref">draw_set_transform_matrix</inline></reference>(xform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-string"><inline classes="std std-ref">draw_string</inline></reference>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-string-outline"><inline classes="std std-ref">draw_string_outline</inline></reference>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-style-box"><inline classes="std std-ref">draw_style_box</inline></reference>(style_box: <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-texture"><inline classes="std std-ref">draw_texture</inline></reference>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-texture-rect"><inline classes="std std-ref">draw_texture_rect</inline></reference>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-draw-texture-rect-region"><inline classes="std std-ref">draw_texture_rect_region</inline></reference>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-force-update-transform"><inline classes="std std-ref">force_update_transform</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-canvas"><inline classes="std std-ref">get_canvas</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-canvas-item"><inline classes="std std-ref">get_canvas_item</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-canvas-layer-node"><inline classes="std std-ref">get_canvas_layer_node</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-canvas-transform"><inline classes="std std-ref">get_canvas_transform</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-global-mouse-position"><inline classes="std std-ref">get_global_mouse_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-global-transform"><inline classes="std std-ref">get_global_transform</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-global-transform-with-canvas"><inline classes="std std-ref">get_global_transform_with_canvas</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-local-mouse-position"><inline classes="std std-ref">get_local_mouse_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-screen-transform"><inline classes="std std-ref">get_screen_transform</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-transform"><inline classes="std std-ref">get_transform</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-viewport-rect"><inline classes="std std-ref">get_viewport_rect</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-viewport-transform"><inline classes="std std-ref">get_viewport_transform</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-visibility-layer-bit"><inline classes="std std-ref">get_visibility_layer_bit</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-get-world-2d"><inline classes="std std-ref">get_world_2d</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-hide"><inline classes="std std-ref">hide</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-is-local-transform-notification-enabled"><inline classes="std std-ref">is_local_transform_notification_enabled</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-is-transform-notification-enabled"><inline classes="std std-ref">is_transform_notification_enabled</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-is-visible-in-tree"><inline classes="std std-ref">is_visible_in_tree</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-make-canvas-position-local"><inline classes="std std-ref">make_canvas_position_local</inline></reference>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-make-input-local"><inline classes="std std-ref">make_input_local</inline></reference>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-move-to-front"><inline classes="std std-ref">move_to_front</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-queue-redraw"><inline classes="std std-ref">queue_redraw</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-set-notify-local-transform"><inline classes="std std-ref">set_notify_local_transform</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-set-notify-transform"><inline classes="std std-ref">set_notify_transform</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-set-visibility-layer-bit"><inline classes="std std-ref">set_visibility_layer_bit</inline></reference>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-canvasitem-method-show"><inline classes="std std-ref">show</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-canvasitem-signal-draw"></target>
            <paragraph classes="classref-signal" ids="class-canvasitem-signal-draw" names="class_canvasitem_signal_draw"><strong>draw</strong>() <reference internal="True" refid="class-canvasitem-signal-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 <strong>CanvasItem</strong> 必须重绘时发出，发生在相关的 <reference internal="True" refid="class-canvasitem-constant-notification-draw"><inline classes="std std-ref">NOTIFICATION_DRAW</inline></reference> 通知<emphasis>之后</emphasis>，调用 <reference internal="True" refid="class-canvasitem-private-method-draw"><inline classes="std std-ref">_draw</inline></reference> <emphasis>之前</emphasis>。</paragraph>
            <paragraph><strong>注意：</strong>延迟连接无法使用 <literal>draw_*</literal> 方法进行绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-signal-hidden"></target>
            <paragraph classes="classref-signal" ids="class-canvasitem-signal-hidden" names="class_canvasitem_signal_hidden"><strong>hidden</strong>() <reference internal="True" refid="class-canvasitem-signal-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当隐藏时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-signal-item-rect-changed"></target>
            <paragraph classes="classref-signal" ids="class-canvasitem-signal-item-rect-changed" names="class_canvasitem_signal_item_rect_changed"><strong>item_rect_changed</strong>() <reference internal="True" refid="class-canvasitem-signal-item-rect-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 CanvasItem 的 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 边界（位置或大小）发生变化时，或者当发生可能影响这些边界的操作（例如，更改 <reference internal="True" refuri="class_sprite2d#class-sprite2d-property-texture"><inline classes="std std-ref">Sprite2D.texture</inline></reference>）时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-signal-visibility-changed"></target>
            <paragraph classes="classref-signal" ids="class-canvasitem-signal-visibility-changed" names="class_canvasitem_signal_visibility_changed"><strong>visibility_changed</strong>() <reference internal="True" refid="class-canvasitem-signal-visibility-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当可见性（隐藏/可见）更改时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-canvasitem-texturefilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-canvasitem-texturefilter" names="enum_canvasitem_texturefilter">enum <strong>TextureFilter</strong>: <reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-canvasitem-constant-texture-filter-parent-node"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-parent-node" names="class_canvasitem_constant_texture_filter_parent_node"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_PARENT_NODE</strong> = <literal>0</literal></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 将从其父级继承过滤器。</paragraph>
            <target refid="class-canvasitem-constant-texture-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-nearest" names="class_canvasitem_constant_texture_filter_nearest"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_NEAREST</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理过滤仅从最近的像素读取。这使得纹理从近距离看是像素化的，从远处看是颗粒状的（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-canvasitem-constant-texture-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-linear" names="class_canvasitem_constant_texture_filter_linear"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_LINEAR</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合。这使得纹理从近处看起来很平滑，从远处看起来却有颗粒感（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-canvasitem-constant-texture-filter-nearest-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-nearest-with-mipmaps" names="class_canvasitem_constant_texture_filter_nearest_with_mipmaps"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_NEAREST_WITH_MIPMAPS</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并在最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-canvasitem-constant-texture-filter-linear-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-linear-with-mipmaps" names="class_canvasitem_constant_texture_filter_linear_with_mipmaps"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_LINEAR_WITH_MIPMAPS</strong> = <literal>4</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素和最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。</paragraph>
            <paragraph>将此用于可能以低缩放查看的非像素艺术纹理（例如，由于 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 缩放或精灵缩放），因为多级渐远纹理对于平滑小于屏幕像素的像素很重要。</paragraph>
            <target refid="class-canvasitem-constant-texture-filter-nearest-with-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-nearest-with-mipmaps-anisotropic" names="class_canvasitem_constant_texture_filter_nearest_with_mipmaps_anisotropic"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC</strong> = <literal>5</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并根据表面和相机视图之间的角度在 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。各向异性过滤提高了几乎与相机位于一条线的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <paragraph><strong>注意：</strong>该纹理过滤在 2D 项目中很少有用。<reference internal="True" refid="class-canvasitem-constant-texture-filter-nearest-with-mipmaps"><inline classes="std std-ref">TEXTURE_FILTER_NEAREST_WITH_MIPMAPS</inline></reference> 在这种情况下通常更合适。</paragraph>
            <target refid="class-canvasitem-constant-texture-filter-linear-with-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-linear-with-mipmaps-anisotropic" names="class_canvasitem_constant_texture_filter_linear_with_mipmaps_anisotropic"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC</strong> = <literal>6</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合，并基于表面与相机视图之间的角度在 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。各向异性过滤提高了几乎与相机位于一条线的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <paragraph><strong>注意：</strong>该纹理过滤在 2D 项目中很少有用。<reference internal="True" refid="class-canvasitem-constant-texture-filter-linear-with-mipmaps"><inline classes="std std-ref">TEXTURE_FILTER_LINEAR_WITH_MIPMAPS</inline></reference> 在这种情况下通常更合适。</paragraph>
            <target refid="class-canvasitem-constant-texture-filter-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-filter-max" names="class_canvasitem_constant_texture_filter_max"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-canvasitem-texturerepeat"></target>
            <paragraph classes="classref-enumeration" ids="enum-canvasitem-texturerepeat" names="enum_canvasitem_texturerepeat">enum <strong>TextureRepeat</strong>: <reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-canvasitem-constant-texture-repeat-parent-node"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-repeat-parent-node" names="class_canvasitem_constant_texture_repeat_parent_node"><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>TEXTURE_REPEAT_PARENT_NODE</strong> = <literal>0</literal></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 将从其父级继承过滤器。</paragraph>
            <target refid="class-canvasitem-constant-texture-repeat-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-repeat-disabled" names="class_canvasitem_constant_texture_repeat_disabled"><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>TEXTURE_REPEAT_DISABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理不会重复。</paragraph>
            <target refid="class-canvasitem-constant-texture-repeat-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-repeat-enabled" names="class_canvasitem_constant_texture_repeat_enabled"><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>TEXTURE_REPEAT_ENABLED</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理将正常重复。</paragraph>
            <target refid="class-canvasitem-constant-texture-repeat-mirror"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-repeat-mirror" names="class_canvasitem_constant_texture_repeat_mirror"><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>TEXTURE_REPEAT_MIRROR</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理将以 2×2 平铺模式重复，其中偶数位置的元素会被镜像。</paragraph>
            <target refid="class-canvasitem-constant-texture-repeat-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-texture-repeat-max" names="class_canvasitem_constant_texture_repeat_max"><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>TEXTURE_REPEAT_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-canvasitem-clipchildrenmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-canvasitem-clipchildrenmode" names="enum_canvasitem_clipchildrenmode">enum <strong>ClipChildrenMode</strong>: <reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-canvasitem-constant-clip-children-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-clip-children-disabled" names="class_canvasitem_constant_clip_children_disabled"><reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference> <strong>CLIP_CHILDREN_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>子级绘制在父级之上，不会被裁剪。</paragraph>
            <target refid="class-canvasitem-constant-clip-children-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-clip-children-only" names="class_canvasitem_constant_clip_children_only"><reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference> <strong>CLIP_CHILDREN_ONLY</strong> = <literal>1</literal></paragraph>
            <paragraph>父级仅用于裁剪目的。子级被裁剪到父级的可见区域，不绘制父级。</paragraph>
            <target refid="class-canvasitem-constant-clip-children-and-draw"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-clip-children-and-draw" names="class_canvasitem_constant_clip_children_and_draw"><reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference> <strong>CLIP_CHILDREN_AND_DRAW</strong> = <literal>2</literal></paragraph>
            <paragraph>父级用于裁剪子级，但在将子级剪裁到其可见区域之前，父级也像往常一样绘制在子级下方。</paragraph>
            <target refid="class-canvasitem-constant-clip-children-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-canvasitem-constant-clip-children-max" names="class_canvasitem_constant_clip_children_max"><reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference> <strong>CLIP_CHILDREN_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="常量">
            <title>常量</title>
            <target refid="class-canvasitem-constant-notification-transform-changed"></target>
            <paragraph classes="classref-constant" ids="class-canvasitem-constant-notification-transform-changed" names="class_canvasitem_constant_notification_transform_changed"><strong>NOTIFICATION_TRANSFORM_CHANGED</strong> = <literal>2000</literal> <reference internal="True" refid="class-canvasitem-constant-notification-transform-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 的全局变换已更改。只有在通过 <reference internal="True" refid="class-canvasitem-method-set-notify-transform"><inline classes="std std-ref">set_notify_transform</inline></reference> 启用时，才会收到这个通知。</paragraph>
            <target refid="class-canvasitem-constant-notification-local-transform-changed"></target>
            <paragraph classes="classref-constant" ids="class-canvasitem-constant-notification-local-transform-changed" names="class_canvasitem_constant_notification_local_transform_changed"><strong>NOTIFICATION_LOCAL_TRANSFORM_CHANGED</strong> = <literal>35</literal> <reference internal="True" refid="class-canvasitem-constant-notification-local-transform-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 的局部变换已更改。只有在通过 <reference internal="True" refid="class-canvasitem-method-set-notify-local-transform"><inline classes="std std-ref">set_notify_local_transform</inline></reference> 启用时，才会收到这个通知。</paragraph>
            <target refid="class-canvasitem-constant-notification-draw"></target>
            <paragraph classes="classref-constant" ids="class-canvasitem-constant-notification-draw" names="class_canvasitem_constant_notification_draw"><strong>NOTIFICATION_DRAW</strong> = <literal>30</literal> <reference internal="True" refid="class-canvasitem-constant-notification-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>要求绘制该 <strong>CanvasItem</strong>（见 <reference internal="True" refid="class-canvasitem-private-method-draw"><inline classes="std std-ref">_draw</inline></reference>）。</paragraph>
            <target refid="class-canvasitem-constant-notification-visibility-changed"></target>
            <paragraph classes="classref-constant" ids="class-canvasitem-constant-notification-visibility-changed" names="class_canvasitem_constant_notification_visibility_changed"><strong>NOTIFICATION_VISIBILITY_CHANGED</strong> = <literal>31</literal> <reference internal="True" refid="class-canvasitem-constant-notification-visibility-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 的可见性已更改。</paragraph>
            <target refid="class-canvasitem-constant-notification-enter-canvas"></target>
            <paragraph classes="classref-constant" ids="class-canvasitem-constant-notification-enter-canvas" names="class_canvasitem_constant_notification_enter_canvas"><strong>NOTIFICATION_ENTER_CANVAS</strong> = <literal>32</literal> <reference internal="True" refid="class-canvasitem-constant-notification-enter-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 已进入画布。</paragraph>
            <target refid="class-canvasitem-constant-notification-exit-canvas"></target>
            <paragraph classes="classref-constant" ids="class-canvasitem-constant-notification-exit-canvas" names="class_canvasitem_constant_notification_exit_canvas"><strong>NOTIFICATION_EXIT_CANVAS</strong> = <literal>33</literal> <reference internal="True" refid="class-canvasitem-constant-notification-exit-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 已退出画布。</paragraph>
            <target refid="class-canvasitem-constant-notification-world-2d-changed"></target>
            <paragraph classes="classref-constant" ids="class-canvasitem-constant-notification-world-2d-changed" names="class_canvasitem_constant_notification_world_2d_changed"><strong>NOTIFICATION_WORLD_2D_CHANGED</strong> = <literal>36</literal> <reference internal="True" refid="class-canvasitem-constant-notification-world-2d-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该 <strong>CanvasItem</strong> 的活动 <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> 已更改。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="属性说明">
            <title>属性说明</title>
            <target refid="class-canvasitem-property-clip-children"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-clip-children" names="class_canvasitem_property_clip_children"><reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference> <strong>clip_children</strong> = <literal>0</literal> <reference internal="True" refid="class-canvasitem-property-clip-children"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clip_children_mode</strong>(value: <reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-canvasitem-clipchildrenmode"><inline classes="std std-ref">ClipChildrenMode</inline></reference> <strong>get_clip_children_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许当前节点裁剪子节点，本质上是充当遮罩。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-light-mask"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-light-mask" names="class_canvasitem_property_light_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>light_mask</strong> = <literal>1</literal> <reference internal="True" refid="class-canvasitem-property-light-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_light_mask</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_light_mask</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 <strong>CanvasItem</strong> 的渲染层，用于响应 <reference internal="True" refuri="class_light2d#class-light2d"><inline classes="std std-ref">Light2D</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-material"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-material" names="class_canvasitem_property_material"><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> <strong>material</strong> <reference internal="True" refid="class-canvasitem-property-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_material</strong>(value: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> <strong>get_material</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>应用于这个 <strong>CanvasItem</strong> 的材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-modulate"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-modulate" names="class_canvasitem_property_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>modulate</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-canvasitem-property-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_modulate</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_modulate</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>应用于这个 <strong>CanvasItem</strong> 的颜色。这个属性会影响子级 <strong>CanvasItem</strong>，与只会影响节点自身的 <reference internal="True" refid="class-canvasitem-property-self-modulate"><inline classes="std std-ref">self_modulate</inline></reference> 不同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-self-modulate"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-self-modulate" names="class_canvasitem_property_self_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>self_modulate</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-canvasitem-property-self-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_self_modulate</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_self_modulate</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>应用于这个 <strong>CanvasItem</strong> 的颜色。这个属性<strong>不会</strong>影响子级 <strong>CanvasItem</strong>，与会同时影响节点自身和子级的 <reference internal="True" refid="class-canvasitem-property-modulate"><inline classes="std std-ref">modulate</inline></reference> 不同。</paragraph>
            <paragraph><strong>注意：</strong>内部子节点（例如 <reference internal="True" refuri="class_colorpicker#class-colorpicker"><inline classes="std std-ref">ColorPicker</inline></reference> 中的滑块、<reference internal="True" refuri="class_tabcontainer#class-tabcontainer"><inline classes="std std-ref">TabContainer</inline></reference> 中的选项卡栏）也不受这个属性的影响（见 <reference internal="True" refuri="class_node#class-node-method-get-child"><inline classes="std std-ref">Node.get_child</inline></reference> 等类似方法的 <literal>include_internal</literal> 参数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-show-behind-parent"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-show-behind-parent" names="class_canvasitem_property_show_behind_parent"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_behind_parent</strong> = <literal>false</literal> <reference internal="True" refid="class-canvasitem-property-show-behind-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_behind_parent</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_draw_behind_parent_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则对象在其父对象后面绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-texture-filter"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-texture-filter" names="class_canvasitem_property_texture_filter"><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>texture_filter</strong> = <literal>0</literal> <reference internal="True" refid="class-canvasitem-property-texture-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_filter</strong>(value: <reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-canvasitem-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>get_texture_filter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在该 <strong>CanvasItem</strong> 上使用的纹理过滤模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-texture-repeat"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-texture-repeat" names="class_canvasitem_property_texture_repeat"><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>texture_repeat</strong> = <literal>0</literal> <reference internal="True" refid="class-canvasitem-property-texture-repeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_repeat</strong>(value: <reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-canvasitem-texturerepeat"><inline classes="std std-ref">TextureRepeat</inline></reference> <strong>get_texture_repeat</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在该 <strong>CanvasItem</strong> 上使用的纹理重复模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-top-level"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-top-level" names="class_canvasitem_property_top_level"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>top_level</strong> = <literal>false</literal> <reference internal="True" refid="class-canvasitem-property-top-level"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_as_top_level</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_set_as_top_level</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>CanvasItem</strong> <emphasis>不会</emphasis>继承父级 <strong>CanvasItem</strong> 的变换。它的绘制顺序也会发生改变，会在其他没有将 <reference internal="True" refid="class-canvasitem-property-top-level"><inline classes="std std-ref">top_level</inline></reference> 设置为 <literal>true</literal> 的 <strong>CanvasItem</strong> 之上绘制。效果和把该 <strong>CanvasItem</strong> 作为裸 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 的子级一样。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-use-parent-material"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-use-parent-material" names="class_canvasitem_property_use_parent_material"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_parent_material</strong> = <literal>false</literal> <reference internal="True" refid="class-canvasitem-property-use-parent-material"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_parent_material</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_use_parent_material</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则将父级 <strong>CanvasItem</strong> 的 <reference internal="True" refid="class-canvasitem-property-material"><inline classes="std std-ref">material</inline></reference> 属性用作此项的材质。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-visibility-layer"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-visibility-layer" names="class_canvasitem_property_visibility_layer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>visibility_layer</strong> = <literal>1</literal> <reference internal="True" refid="class-canvasitem-property-visibility-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visibility_layer</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_visibility_layer</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 节点渲染该 <strong>CanvasItem</strong> 时所使用的渲染层。只有 <strong>CanvasItem</strong> 及其所有父级均与 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 的画布剔除遮罩有交集，该 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 才会渲染此 <strong>CanvasItem</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-visible"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-visible" names="class_canvasitem_property_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>visible</strong> = <literal>true</literal> <reference internal="True" refid="class-canvasitem-property-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visible</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，这个 <strong>CanvasItem</strong> 被绘制。只有当它的所有父节点也可见时，该节点才是可见的（换句话说，<reference internal="True" refid="class-canvasitem-method-is-visible-in-tree"><inline classes="std std-ref">is_visible_in_tree</inline></reference> 必须返回 <literal>true</literal>）。</paragraph>
            <paragraph><strong>注意：</strong>对于继承了 <reference internal="True" refuri="class_popup#class-popup"><inline classes="std std-ref">Popup</inline></reference> 的控件，使其可见的正确方法是调用多个 <literal>popup*()</literal> 函数之一。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-y-sort-enabled"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-y-sort-enabled" names="class_canvasitem_property_y_sort_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>y_sort_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-canvasitem-property-y-sort-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_y_sort_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_y_sort_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If <literal>true</literal>, this and child <strong>CanvasItem</strong> nodes with a higher Y position are rendered in front of nodes with a lower Y position. If <literal>false</literal>, this and child <strong>CanvasItem</strong> nodes are rendered normally in scene tree order.</paragraph>
            <paragraph>With Y-sorting enabled on a parent node ('A') but disabled on a child node ('B'), the child node ('B') is sorted but its children ('C1', 'C2', etc) render together on the same Y position as the child node ('B'). This allows you to organize the render order of a scene without changing the scene tree.</paragraph>
            <paragraph>Nodes sort relative to each other only if they are on the same <reference internal="True" refid="class-canvasitem-property-z-index"><inline classes="std std-ref">z_index</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-z-as-relative"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-z-as-relative" names="class_canvasitem_property_z_as_relative"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>z_as_relative</strong> = <literal>true</literal> <reference internal="True" refid="class-canvasitem-property-z-as-relative"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_z_as_relative</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_z_relative</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，节点的 Z 索引是相对于它的父节点的 Z 索引而言的。如果这个节点的 Z 索引是 2，它的父节点的实际 Z 索引是 3，那么这个节点的实际 Z 索引将是 2 + 3 = 5。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-property-z-index"></target>
            <paragraph classes="classref-property" ids="class-canvasitem-property-z-index" names="class_canvasitem_property_z_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>z_index</strong> = <literal>0</literal> <reference internal="True" refid="class-canvasitem-property-z-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_z_index</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_z_index</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制节点的渲染顺序。具有较高 Z 索引的节点将显示在其他节点的前面。必须在 <reference internal="True" refuri="class_renderingserver#class-renderingserver-constant-canvas-item-z-min"><inline classes="std std-ref">RenderingServer.CANVAS_ITEM_Z_MIN</inline></reference> 和 <reference internal="True" refuri="class_renderingserver#class-renderingserver-constant-canvas-item-z-max"><inline classes="std std-ref">RenderingServer.CANVAS_ITEM_Z_MAX</inline></reference>之间（包含）。</paragraph>
            <paragraph><strong>注意：</strong>改变 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的 Z 索引只影响绘图顺序，不影响处理输入事件的顺序。可用于实现某些 UI 动画，例如对处于悬停状态的菜单项进行缩放，此时会与其他内容重叠。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="方法说明">
            <title>方法说明</title>
            <target refid="class-canvasitem-private-method-draw"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-private-method-draw" names="class_canvasitem_private_method__draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-canvasitem-private-method-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <strong>CanvasItem</strong> 被请求重绘时调用（手动调用或者引擎调用 <reference internal="True" refid="class-canvasitem-method-queue-redraw"><inline classes="std std-ref">queue_redraw</inline></reference> 之后）。</paragraph>
            <paragraph>对应于 <reference internal="True" refuri="class_object#class-object-private-method-notification"><inline classes="std std-ref">Object._notification</inline></reference> 中的 <reference internal="True" refid="class-canvasitem-constant-notification-draw"><inline classes="std std-ref">NOTIFICATION_DRAW</inline></reference> 通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-animation-slice"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-animation-slice" names="class_canvasitem_method_draw_animation_slice"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_animation_slice</strong>(animation_length: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_begin: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, slice_end: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-canvasitem-method-draw-animation-slice"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>后续的绘制命令将被忽略，除非它们位于指定的动画切片内。这是实现在背景上循环而不是不断重绘的动画的更快方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-arc"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-arc" names="class_canvasitem_method_draw_arc"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_arc</strong>(center: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, start_angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, end_angle: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, point_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-arc"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用一个 uniform <literal>color</literal> 和 <literal>width</literal> 以及可选的抗锯齿（仅支持正 <literal>width</literal> ），在给定的角度之间绘制一条未填充的弧线。<literal>point_count</literal> 的值越大，该曲线越平滑。另见 <reference internal="True" refid="class-canvasitem-method-draw-circle"><inline classes="std std-ref">draw_circle</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负，则它将被忽略，并使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver-constant-primitive-line-strip"><inline classes="std std-ref">RenderingServer.PRIMITIVE_LINE_STRIP</inline></reference> 绘制该弧线。这意味着当缩放 CanvasItem 时，弧线将保持细长。如果不需要此行为，请传递一个正的 <literal>width</literal>，如 <literal>1.0</literal>。</paragraph>
            <paragraph>如果 <literal>start_angle &lt; end_angle</literal> ，则圆弧是从 <literal>start_angle</literal> 朝向 <literal>end_angle</literal> 的值绘制的，即是顺时针方向；否则为逆时针方向。以相反的顺序传递相同的角度，将产生相同的弧线。如果 <literal>start_angle</literal> 和 <literal>end_angle</literal> 的差的绝对值大于 <reference internal="True" refuri="class_@gdscript#class-gdscript-constant-tau"><inline classes="std std-ref">@GDScript.TAU</inline></reference> 弧度，则绘制一个完整的圆弧（即弧线不会与自身重叠）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-char"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-char" names="class_canvasitem_method_draw_char"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_char</strong>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, char: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-draw-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用自定义字体绘制字符串的第一个字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-char-outline"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-char-outline" names="class_canvasitem_method_draw_char_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_char_outline</strong>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, char: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-draw-char-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用自定义字体绘制字符串中第一个字符的轮廓。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-circle"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-circle" names="class_canvasitem_method_draw_circle"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_circle</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, radius: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, filled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-circle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制圆形。另见 <reference internal="True" refid="class-canvasitem-method-draw-arc"><inline classes="std std-ref">draw_arc</inline></reference>、<reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">draw_polyline</inline></reference>、<reference internal="True" refid="class-canvasitem-method-draw-polygon"><inline classes="std std-ref">draw_polygon</inline></reference>。</paragraph>
            <paragraph>如果 <literal>filled</literal> 为 <literal>true</literal>，则圆形将使用指定的 <literal>color</literal> 填充。如果 <literal>filled</literal> 为 <literal>false</literal>，则圆形将被绘制为具有指定的 <literal>color</literal> 和 <literal>width</literal> 的笔划。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负，则将绘制两点图元而不是四点图元。这意味着当缩放 CanvasItem 时，线条将保持细长。如果不需要此行为，请传递一个正的 <literal>width</literal>，如 <literal>1.0</literal>。</paragraph>
            <paragraph>如果 <literal>antialiased</literal> 为 <literal>true</literal>，则半透明的“羽毛”将附加到边界，使轮廓变得平滑。</paragraph>
            <paragraph><strong>注意：</strong><literal>width</literal> 只有在 <literal>filled</literal> 为 <literal>false</literal> 时才有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-colored-polygon"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-colored-polygon" names="class_canvasitem_method_draw_colored_polygon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_colored_polygon</strong>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null) <reference internal="True" refid="class-canvasitem-method-draw-colored-polygon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制一个由任意数量的点组成的彩色多边形，凸形或凹形。与 <reference internal="True" refid="class-canvasitem-method-draw-polygon"><inline classes="std std-ref">draw_polygon</inline></reference> 不同，必须为整个多边形指定一个单一颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-dashed-line"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-dashed-line" names="class_canvasitem_method_draw_dashed_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_dashed_line</strong>(from: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, dash: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 2.0, aligned: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-dashed-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的颜色和宽度，从一个 2D 点到另一个点绘制一条虚线。另见 <reference internal="True" refid="class-canvasitem-method-draw-multiline"><inline classes="std std-ref">draw_multiline</inline></reference> 和 <reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">draw_polyline</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负，则将绘制一个两点图元而不是一个四点图元。这意味着当缩放 CanvasItem 时，线条部分将保持细长。如果不需要此行为，请传递一个正的 <literal>width</literal>，如 <literal>1.0</literal>。</paragraph>
            <paragraph>如果 <literal>antialiased</literal> 为 <literal>true</literal>，则半透明的“羽毛”将附加到边界，使轮廓变得平滑。</paragraph>
            <paragraph><strong>注意：</strong>仅当 <literal>width</literal> 大于 <literal>0.0</literal> 时，<literal>antialiased</literal> 才有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-end-animation"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-end-animation" names="class_canvasitem_method_draw_end_animation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_end_animation</strong>() <reference internal="True" refid="class-canvasitem-method-draw-end-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过 <reference internal="True" refid="class-canvasitem-method-draw-animation-slice"><inline classes="std std-ref">draw_animation_slice</inline></reference> 提交所有动画切片后，该函数可以被用来将绘制恢复到其默认状态（所有后续绘制命令都将可见）。如果不关心这个特定用例，则不需要在提交切片后使用该函数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-lcd-texture-rect-region"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-lcd-texture-rect-region" names="class_canvasitem_method_draw_lcd_texture_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_lcd_texture_rect_region</strong>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <reference internal="True" refid="class-canvasitem-method-draw-lcd-texture-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的位置绘制一个带有 LCD 子像素抗锯齿的字体纹理的矩形区域，可以选择用一种颜色来调制。</paragraph>
            <paragraph>纹理是通过以下混合操作绘制的，<reference internal="True" refuri="class_canvasitemmaterial#class-canvasitemmaterial"><inline classes="std std-ref">CanvasItemMaterial</inline></reference> 的混合模式被忽略：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">dst.r = texture.r * modulate.r * modulate.a + dst.r * (1.0 - texture.r * modulate.a);
dst.g = texture.g * modulate.g * modulate.a + dst.g * (1.0 - texture.g * modulate.a);
dst.b = texture.b * modulate.b * modulate.a + dst.b * (1.0 - texture.b * modulate.a);
dst.a = modulate.a + dst.a * (1.0 - modulate.a);</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-line"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-line" names="class_canvasitem_method_draw_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_line</strong>(from: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的颜色和宽度，从一个 2D 点到另一个点绘制一条直线。它可以选择抗锯齿。另请参阅 <reference internal="True" refid="class-canvasitem-method-draw-multiline"><inline classes="std std-ref">draw_multiline</inline></reference> 和 <reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">draw_polyline</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负，则将绘制一个两点图元而不是一个四点图元。这意味着当缩放 CanvasItem 时，线条将保持细长。如果不需要此行为，请传递一个正的 <literal>width</literal>，如 <literal>1.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-mesh"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-mesh" names="class_canvasitem_method_draw_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_mesh</strong>(mesh: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> = Transform2D(1, 0, 0, 1, 0, 0), modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <reference internal="True" refid="class-canvasitem-method-draw-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用所提供的纹理以 2D 方式绘制一个 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>。相关文档请参阅 <reference internal="True" refuri="class_meshinstance2d#class-meshinstance2d"><inline classes="std std-ref">MeshInstance2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-msdf-texture-rect-region"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-msdf-texture-rect-region" names="class_canvasitem_method_draw_msdf_texture_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_msdf_texture_rect_region</strong>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), outline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, pixel_range: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4.0, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0) <reference internal="True" refid="class-canvasitem-method-draw-msdf-texture-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定位置，绘制一条多通道有符号距离场纹理的纹理矩形区域，可以选择用一种颜色来调制。有关 MSDF 字体渲染的更多信息和注意事项，请参阅 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference>。</paragraph>
            <paragraph>如果 <literal>outline</literal> 为正，则区域中像素的每个 Alpha 通道值都被设置为 <literal>outline</literal> 半径内真实距离的最大值。</paragraph>
            <paragraph><literal>pixel_range</literal> 的值应该与距离场纹理生成期间使用的值相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-multiline"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-multiline" names="class_canvasitem_method_draw_multiline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_multiline</strong>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-multiline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用一致的宽度 <literal>width</literal> 和颜色 <literal>color</literal> 绘制多条断开的线段。<literal>points</literal> 数组中相邻的两个点定义一条线段，即第 i 条线段由端点 <literal>points[2 * i]</literal> 和 <literal>points[2 * i + 1]</literal> 组成。绘制大量线段时，这种方法比使用 <reference internal="True" refid="class-canvasitem-method-draw-line"><inline classes="std std-ref">draw_line</inline></reference> 一条条画要快。要绘制相连的线段，请改用 <reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">draw_polyline</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负数，则会绘制由两个点组成的图元，不使用四个点组成的图元。此时如果 CanvasItem 发生缩放，则线段仍然会很细。如果不想要这样的行为，请传入 <literal>1.0</literal> 等正数 <literal>width</literal>。</paragraph>
            <paragraph><strong>注意：</strong>仅当 <literal>width</literal> 大于 <literal>0.0</literal> 时，<literal>antialiased</literal> 才有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-multiline-colors"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-multiline-colors" names="class_canvasitem_method_draw_multiline_colors"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_multiline_colors</strong>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-multiline-colors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用一致的宽度 <literal>width</literal> 分段颜色绘制多条断开的线段。<literal>points</literal> 数组中相邻的两个点定义一条线段，即第 i 条线段由端点 <literal>points[2 * i]</literal> 和 <literal>points[2 * i + 1]</literal> 组成，使用的颜色为 <literal>colors[i]</literal>。绘制大量线段时，这种方法比使用 <reference internal="True" refid="class-canvasitem-method-draw-line"><inline classes="std std-ref">draw_line</inline></reference> 一条条画要快。要绘制相连的线段，请改用 <reference internal="True" refid="class-canvasitem-method-draw-polyline-colors"><inline classes="std std-ref">draw_polyline_colors</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负数，则会绘制由两个点组成的图元，不使用四个点组成的图元。此时如果 CanvasItem 发生缩放，则线段仍然会很细。如果不想要这样的行为，请传入 <literal>1.0</literal> 等正数 <literal>width</literal>。</paragraph>
            <paragraph><strong>注意：</strong>仅当 <literal>width</literal> 大于 <literal>0.0</literal> 时，<literal>antialiased</literal> 才有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-multiline-string"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-multiline-string" names="class_canvasitem_method_draw_multiline_string"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_multiline_string</strong>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, max_lines: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), brk_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3, justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-draw-multiline-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>text</literal> 分成几行，并在 <literal>pos</literal>（左上角）处使用指定的 <literal>font</literal> 绘制文本。该文本的颜色将乘以 <literal>modulate</literal>。如果 <literal>width</literal> 大于等于 0，则当该文本超过指定宽度时将被裁剪。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-multiline-string-outline"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-multiline-string-outline" names="class_canvasitem_method_draw_multiline_string_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_multiline_string_outline</strong>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, max_lines: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), brk_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] = 3, justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-draw-multiline-string-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>text</literal> 分成几行，并在 <literal>pos</literal>（左上角）处使用指定的 <literal>font</literal> 绘制文本轮廓。该文本的颜色将乘以 <literal>modulate</literal>。如果 <literal>width</literal> 大于等于 0，则当该文本超过指定宽度时将被裁剪。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-multimesh"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-multimesh" names="class_canvasitem_method_draw_multimesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_multimesh</strong>(multimesh: <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-canvasitem-method-draw-multimesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用所提供的纹理以 2D 方式绘制一个 <reference internal="True" refuri="class_multimesh#class-multimesh"><inline classes="std std-ref">MultiMesh</inline></reference>。相关文档请参考 <reference internal="True" refuri="class_multimeshinstance2d#class-multimeshinstance2d"><inline classes="std std-ref">MultiMeshInstance2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-polygon"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-polygon" names="class_canvasitem_method_draw_polygon"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_polygon</strong>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> = PackedVector2Array(), texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null) <reference internal="True" refid="class-canvasitem-method-draw-polygon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制一个由任意数量的点构成的实心多边形，凸形或凹形。与 <reference internal="True" refid="class-canvasitem-method-draw-colored-polygon"><inline classes="std std-ref">draw_colored_polygon</inline></reference> 不同，每个点的颜色都可以单独改变。另见 <reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">draw_polyline</inline></reference> 和 <reference internal="True" refid="class-canvasitem-method-draw-polyline-colors"><inline classes="std std-ref">draw_polyline_colors</inline></reference>。如果你需要更大的自由度（例如能够使用骨骼），请改用 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-canvas-item-add-triangle-array"><inline classes="std std-ref">RenderingServer.canvas_item_add_triangle_array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-polyline"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-polyline" names="class_canvasitem_method_draw_polyline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_polyline</strong>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用一致的 <literal>color</literal> 和 <literal>width</literal> 以及可选的抗锯齿（仅支持正 <literal>width</literal> ），绘制相互连接的线段。绘制大量线条时，这比使用单独的 <reference internal="True" refid="class-canvasitem-method-draw-line"><inline classes="std std-ref">draw_line</inline></reference> 调用更快。要绘制不相连的的线段，请改用 <reference internal="True" refid="class-canvasitem-method-draw-multiline"><inline classes="std std-ref">draw_multiline</inline></reference>。另见 <reference internal="True" refid="class-canvasitem-method-draw-polygon"><inline classes="std std-ref">draw_polygon</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负，则它将被忽略，并使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver-constant-primitive-line-strip"><inline classes="std std-ref">RenderingServer.PRIMITIVE_LINE_STRIP</inline></reference> 绘制该折线。这意味着当 CanvasItem 被缩放时，折线将保持为细线。如果不需要该行为，请传入一个正的 <literal>width</literal>，如 <literal>1.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-polyline-colors"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-polyline-colors" names="class_canvasitem_method_draw_polyline_colors"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_polyline_colors</strong>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-polyline-colors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制相连的线段，使用一致的宽度 <literal>width</literal>，按点指定颜色，还可以开启抗锯齿（仅支持正的 <literal>width</literal>）。将颜色与线段上的点匹配时，使用的是 <literal>points</literal> 和 <literal>colors</literal> 的索引，即每条线段填充的都是在两个端点之间颜色的渐变色。绘制大量线段时，这种方法比使用 <reference internal="True" refid="class-canvasitem-method-draw-line"><inline classes="std std-ref">draw_line</inline></reference> 一条条画要快。要绘制不相连的线段，请改用 <reference internal="True" refid="class-canvasitem-method-draw-multiline-colors"><inline classes="std std-ref">draw_multiline_colors</inline></reference>。另见 <reference internal="True" refid="class-canvasitem-method-draw-polygon"><inline classes="std std-ref">draw_polygon</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负，则它将被忽略，并使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver-constant-primitive-line-strip"><inline classes="std std-ref">RenderingServer.PRIMITIVE_LINE_STRIP</inline></reference> 绘制该折线。这意味着当 CanvasItem 被缩放时，折线将保持为细线。如果不需要该行为，请传入一个正的 <literal>width</literal>，如 <literal>1.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-primitive"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-primitive" names="class_canvasitem_method_draw_primitive"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_primitive</strong>(points: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, colors: <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference>, uvs: <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null) <reference internal="True" refid="class-canvasitem-method-draw-primitive"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制自定义图元。1 个点的是个点，2 个点的是线段，3 个点的是三角形，4 个点的是四边形。如果没有指定点或者指定了超过 4 个点，则不会绘制任何东西，只会输出错误消息。另请参阅 <reference internal="True" refid="class-canvasitem-method-draw-line"><inline classes="std std-ref">draw_line</inline></reference>、<reference internal="True" refid="class-canvasitem-method-draw-polyline"><inline classes="std std-ref">draw_polyline</inline></reference>、<reference internal="True" refid="class-canvasitem-method-draw-polygon"><inline classes="std std-ref">draw_polygon</inline></reference>、<reference internal="True" refid="class-canvasitem-method-draw-rect"><inline classes="std std-ref">draw_rect</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-rect"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-rect" names="class_canvasitem_method_draw_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_rect</strong>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, filled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1.0, antialiased: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制一个矩形。如果 <literal>filled</literal> 为 <literal>true</literal>，则矩形将使用指定的 <literal>color</literal> 填充。如果 <literal>filled</literal> 为 <literal>false</literal>，则矩形将被绘制为具有指定的 <literal>color</literal> 和 <literal>width</literal> 的笔划。另见 <reference internal="True" refid="class-canvasitem-method-draw-texture-rect"><inline classes="std std-ref">draw_texture_rect</inline></reference>。</paragraph>
            <paragraph>如果 <literal>width</literal> 为负，则将绘制一个两点图元而不是一个四点图元。这意味着当缩放 CanvasItem 时，线条将保持细长。如果不需要此行为，请传递一个正的 <literal>width</literal>，如 <literal>1.0</literal>。</paragraph>
            <paragraph>如果 <literal>antialiased</literal> 为 <literal>true</literal>，则半透明的“羽毛”将附加到边界，使轮廓变得平滑。</paragraph>
            <paragraph><strong>注意：</strong><literal>width</literal> 只有在 <literal>filled</literal> 为 <literal>false</literal> 时才有效。</paragraph>
            <paragraph><strong>注意：</strong>使用负 <literal>width</literal> 绘制的未填充矩形可能不会完美显示。例如，由于线条的重叠，角可能会缺失或变亮（对于半透明的 <literal>color</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-set-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-set-transform" names="class_canvasitem_method_draw_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_set_transform</strong>(position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, rotation: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0, scale: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> = Vector2(1, 1)) <reference internal="True" refid="class-canvasitem-method-draw-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用分量设置用于绘图的自定义变换。后续的绘制都会使用这个变换。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_fontfile#class-fontfile-property-oversampling"><inline classes="std std-ref">FontFile.oversampling</inline></reference> <emphasis>不会</emphasis>考虑 <literal>scale</literal>。这意味着将位图字体及栅格化（非 MSDF）动态字体放大/缩小会产生模糊或像素化的结果。要让文本无论如何缩放都保持清晰，可以启用 MSDF 字体渲染，方法是启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-theme-default-font-multichannel-signed-distance-field"><inline classes="std std-ref">ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field</inline></reference>（仅应用于默认项目字体），或者启用自定义 DynamicFont 的<strong>多通道带符号距离场</strong>导入选项。对于系统字体，可以在检查器中启用 <reference internal="True" refuri="class_systemfont#class-systemfont-property-multichannel-signed-distance-field"><inline classes="std std-ref">SystemFont.multichannel_signed_distance_field</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-set-transform-matrix"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-set-transform-matrix" names="class_canvasitem_method_draw_set_transform_matrix"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_set_transform_matrix</strong>(xform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-canvasitem-method-draw-set-transform-matrix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置通过矩阵绘制时的自定义变换。此后绘制的任何东西都将被它变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-string"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-string" names="class_canvasitem_method_draw_string"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_string</strong>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-draw-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用指定的 <literal>font</literal> 在 <literal>pos</literal>（使用的字体的基线的左下角）处绘制 <literal>text</literal>。该文本的颜色将乘以 <literal>modulate</literal>。如果 <literal>width</literal> 大于等于 0，则文本超过指定宽度将被裁剪。</paragraph>
            <paragraph><strong>使用项目默认字体的例子：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 如果在不断重绘的脚本中使用此方法，
# 则将 `default_font` 声明移动到在 `_ready()` 中赋值的成员变量中
# 这样 Control 只创建一次。
var default_font = ThemeDB.fallback_font
var default_font_size = ThemeDB.fallback_font_size
draw_string(default_font, Vector2(64, 64), "Hello world", HORIZONTAL_ALIGNMENT_LEFT, -1, default_font_size)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 如果在不断重绘的脚本中使用此方法，
// 则将 `default_font` 声明移动到在 `_ready()` 中赋值的成员变量中
// 这样 Control 只创建一次。
Font defaultFont = ThemeDB.FallbackFont;
int defaultFontSize = ThemeDB.FallbackFontSize;
DrawString(defaultFont, new Vector2(64, 64), "Hello world", HORIZONTAL_ALIGNMENT_LEFT, -1, defaultFontSize);</literal_block>
                </div>
            </container>
            <paragraph>另请参阅 <reference internal="True" refuri="class_font#class-font-method-draw-string"><inline classes="std std-ref">Font.draw_string</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-string-outline"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-string-outline" names="class_canvasitem_method_draw_string_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_string_outline</strong>(font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, alignment: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> = 0, width: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = -1, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 16, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), justification_flags: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] = 3, direction: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> = 0, orientation: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-draw-string-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>pos</literal>（左下角使用字体的基线）处使用指定的 <literal>font</literal> 绘制 <literal>text</literal> 轮廓。该文本的颜色将乘以 <literal>modulate</literal>。如果 <literal>width</literal> 大于等于 0，则当文本超过指定宽度时将被裁剪。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-style-box"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-style-box" names="class_canvasitem_method_draw_style_box"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_style_box</strong>(style_box: <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-canvasitem-method-draw-style-box"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制一个样式矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-texture"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-texture" names="class_canvasitem_method_draw_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_texture</strong>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <reference internal="True" refid="class-canvasitem-method-draw-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的位置绘制纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-texture-rect"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-texture-rect" names="class_canvasitem_method_draw_texture_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_texture_rect</strong>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-canvasitem-method-draw-texture-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定位置绘制一个带纹理的矩形，可以选择用颜色调制。如果 <literal>transpose</literal> 为 <literal>true</literal>，则纹理将交换其 X 和 Y 坐标。另见 <reference internal="True" refid="class-canvasitem-method-draw-rect"><inline classes="std std-ref">draw_rect</inline></reference> 和 <reference internal="True" refid="class-canvasitem-method-draw-texture-rect-region"><inline classes="std std-ref">draw_texture_rect_region</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-draw-texture-rect-region"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-draw-texture-rect-region" names="class_canvasitem_method_draw_texture_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_texture_rect_region</strong>(texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-canvasitem-method-draw-texture-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在给定的位置绘制具有纹理的矩形，可以指定所使用的纹理区域（由 <literal>src_rect</literal> 指定），可选择用颜色调制。如果 <literal>transpose</literal> 为 <literal>true</literal>，则纹理将交换其 X 和 Y 坐标。另见 <reference internal="True" refid="class-canvasitem-method-draw-texture-rect"><inline classes="std std-ref">draw_texture_rect</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-force-update-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-force-update-transform" names="class_canvasitem_method_force_update_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_update_transform</strong>() <reference internal="True" refid="class-canvasitem-method-force-update-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制更新变换。由于性能原因，物理中的变换改变不是即时的。变换是在累积后再设置。如果你在进行物理操作时需要最新的变换，请使用此功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-canvas"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-canvas" names="class_canvasitem_method_get_canvas"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_canvas</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此项目所在的 <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> 画布的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-canvas-item"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-canvas-item" names="class_canvasitem_method_get_canvas_item"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_canvas_item</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-canvas-item"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 对该项目使用的画布项目 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-canvas-layer-node"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-canvas-layer-node" names="class_canvasitem_method_get_canvas_layer_node"><reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> <strong>get_canvas_layer_node</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-canvas-layer-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含该节点的 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference>，如果该节点不在任何 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> 中，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-canvas-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-canvas-transform" names="class_canvasitem_method_get_canvas_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_canvas_transform</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-canvas-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从该项目所在的画布坐标系到 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 坐标系的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-global-mouse-position"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-global-mouse-position" names="class_canvasitem_method_get_global_mouse_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_global_mouse_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-global-mouse-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>CanvasItem</strong> 所在的 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> 中鼠标的位置，使用该 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> 的坐标系。</paragraph>
            <paragraph><strong>注意：</strong>要得到屏幕空间的坐标（例如使用非嵌入式 <reference internal="True" refuri="class_popup#class-popup"><inline classes="std std-ref">Popup</inline></reference> 时），你可以使用 <reference internal="True" refuri="class_displayserver#class-displayserver-method-mouse-get-position"><inline classes="std std-ref">DisplayServer.mouse_get_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-global-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-global-transform" names="class_canvasitem_method_get_global_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_global_transform</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-global-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该项目的全局变换矩阵，即到最顶层的 <strong>CanvasItem</strong> 节点的综合变换。最顶层的项目是一个 <strong>CanvasItem</strong>，它要么没有父级，要么有非 <strong>CanvasItem</strong> 父级，或者要么它启用了 <reference internal="True" refid="class-canvasitem-property-top-level"><inline classes="std std-ref">top_level</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-global-transform-with-canvas"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-global-transform-with-canvas" names="class_canvasitem_method_get_global_transform_with_canvas"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_global_transform_with_canvas</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-global-transform-with-canvas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从该 <strong>CanvasItem</strong> 的局部坐标系到 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 坐标系的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-local-mouse-position"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-local-mouse-position" names="class_canvasitem_method_get_local_mouse_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_local_mouse_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-local-mouse-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>CanvasItem</strong> 中鼠标的位置，使用该 <strong>CanvasItem</strong> 的局部坐标系。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-screen-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-screen-transform" names="class_canvasitem_method_get_screen_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_screen_transform</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-screen-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>CanvasItem</strong> 在全局屏幕坐标中的变换（即考虑窗口位置）。主要用于编辑器插件。</paragraph>
            <paragraph>如果窗口是嵌入的，则等于 <reference internal="True" refid="class-canvasitem-method-get-global-transform"><inline classes="std std-ref">get_global_transform</inline></reference>（参见 <reference internal="True" refuri="class_viewport#class-viewport-property-gui-embed-subwindows"><inline classes="std std-ref">Viewport.gui_embed_subwindows</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-transform" names="class_canvasitem_method_get_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_transform</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此项目的变换矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-viewport-rect"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-viewport-rect" names="class_canvasitem_method_get_viewport_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_viewport_rect</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-viewport-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 形式返回视口的边界。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-viewport-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-viewport-transform" names="class_canvasitem_method_get_viewport_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_viewport_transform</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-viewport-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回从该项目所在的画布坐标系到 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 嵌入坐标系的变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-visibility-layer-bit"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-visibility-layer-bit" names="class_canvasitem_method_get_visibility_layer_bit"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_visibility_layer_bit</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-visibility-layer-bit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回渲染可见层上的某个比特位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-get-world-2d"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-get-world-2d" names="class_canvasitem_method_get_world_2d"><reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference> <strong>get_world_2d</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-get-world-2d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此物品所在的 <reference internal="True" refuri="class_world2d#class-world2d"><inline classes="std std-ref">World2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-hide"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-hide" names="class_canvasitem_method_hide"><abbreviation explanation="无返回值。">void</abbreviation> <strong>hide</strong>() <reference internal="True" refid="class-canvasitem-method-hide"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>CanvasItem</strong> 目前是可见的，则将其隐藏。相当于将 <reference internal="True" refid="class-canvasitem-property-visible"><inline classes="std std-ref">visible</inline></reference> 设为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-is-local-transform-notification-enabled"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-is-local-transform-notification-enabled" names="class_canvasitem_method_is_local_transform_notification_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_local_transform_notification_enabled</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-is-local-transform-notification-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果将局部变换通知传达给子级，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-is-transform-notification-enabled"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-is-transform-notification-enabled" names="class_canvasitem_method_is_transform_notification_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_transform_notification_enabled</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-is-transform-notification-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果将全局变换通知传达给子级，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-is-visible-in-tree"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-is-visible-in-tree" names="class_canvasitem_method_is_visible_in_tree"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visible_in_tree</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-is-visible-in-tree"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the node is present in the <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference>, its <reference internal="True" refid="class-canvasitem-property-visible"><inline classes="std std-ref">visible</inline></reference> property is <literal>true</literal> and all its ancestors are also visible. If any ancestor is hidden, this node will not be visible in the scene tree, and is therefore not drawn (see <reference internal="True" refid="class-canvasitem-private-method-draw"><inline classes="std std-ref">_draw</inline></reference>).</paragraph>
            <paragraph>Visibility is checked only in parent nodes that inherit from <strong>CanvasItem</strong>, <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference>, and <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference>. If the parent is of any other type (such as <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference>, or <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference>), it is assumed to be visible.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-make-canvas-position-local"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-make-canvas-position-local" names="class_canvasitem_method_make_canvas_position_local"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>make_canvas_position_local</strong>(screen_point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-make-canvas-position-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>screen_point</literal> 指定为该节点的新局部变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-make-input-local"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-make-input-local" names="class_canvasitem_method_make_input_local"><reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference> <strong>make_input_local</strong>(event: <reference internal="True" refuri="class_inputevent#class-inputevent"><inline classes="std std-ref">InputEvent</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-canvasitem-method-make-input-local"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><literal>event</literal> 的输入发出的变换将在局部空间而不是全局空间中应用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-move-to-front"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-move-to-front" names="class_canvasitem_method_move_to_front"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_to_front</strong>() <reference internal="True" refid="class-canvasitem-method-move-to-front"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移动该节点以显示在其同级节点之上。</paragraph>
            <paragraph>在内部，该节点被移动到父节点的子节点列表的底部。该方法对没有父节点的节点没有影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-queue-redraw"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-queue-redraw" names="class_canvasitem_method_queue_redraw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>queue_redraw</strong>() <reference internal="True" refid="class-canvasitem-method-queue-redraw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 <strong>CanvasItem</strong> 加入重绘队列。空闲时，如果 <strong>CanvasItem</strong> 可见，则会发送 <reference internal="True" refid="class-canvasitem-constant-notification-draw"><inline classes="std std-ref">NOTIFICATION_DRAW</inline></reference> 并调用 <reference internal="True" refid="class-canvasitem-private-method-draw"><inline classes="std std-ref">_draw</inline></reference>。即便多次调用这个方法，每帧也都只会发生<strong>一次</strong>绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-set-notify-local-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-set-notify-local-transform" names="class_canvasitem_method_set_notify_local_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_notify_local_transform</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-canvasitem-method-set-notify-local-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enable</literal> 为 <literal>true</literal>，则该节点将在其局部变换发生改变时收到 <reference internal="True" refid="class-canvasitem-constant-notification-local-transform-changed"><inline classes="std std-ref">NOTIFICATION_LOCAL_TRANSFORM_CHANGED</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-set-notify-transform"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-set-notify-transform" names="class_canvasitem_method_set_notify_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_notify_transform</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-canvasitem-method-set-notify-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>enable</literal> 为 <literal>true</literal>，那么这个节点会在其全局变换发生改变时接收到 <reference internal="True" refid="class-canvasitem-constant-notification-transform-changed"><inline classes="std std-ref">NOTIFICATION_TRANSFORM_CHANGED</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-set-visibility-layer-bit"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-set-visibility-layer-bit" names="class_canvasitem_method_set_visibility_layer_bit"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_visibility_layer_bit</strong>(layer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-canvasitem-method-set-visibility-layer-bit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置或清除渲染可见层上的单个位。这简化了对该 <strong>CanvasItem</strong> 的可见层的编辑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-canvasitem-method-show"></target>
            <paragraph classes="classref-method" ids="class-canvasitem-method-show" names="class_canvasitem_method_show"><abbreviation explanation="无返回值。">void</abbreviation> <strong>show</strong>() <reference internal="True" refid="class-canvasitem-method-show"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>CanvasItem</strong> 目前是隐藏的，则将其显示。相当于将 <reference internal="True" refid="class-canvasitem-property-visible"><inline classes="std std-ref">visible</inline></reference> 设为 <literal>true</literal>。对于继承自 <reference internal="True" refuri="class_popup#class-popup"><inline classes="std std-ref">Popup</inline></reference> 的控件，让它们可见的正确做法是换成调用各种 <literal>popup*()</literal> 函数的其中之一。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
