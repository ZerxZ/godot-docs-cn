<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_hashingcontext.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/HashingContext.xml.</comment>
    <target refid="class-hashingcontext"></target>
    <section ids="hashingcontext class-hashingcontext" names="hashingcontext class_hashingcontext">
        <title>HashingContext</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供分段计算加密哈希的功能。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>HashingContext 类提供了一个接口，用于在多次迭代中计算加密哈希值。常用于计算大文件（不必全部加载到内存中）、网络流和一般数据流（不必持有缓冲区）的哈希值。</paragraph>
            <paragraph><reference internal="True" refid="enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference> 枚举显示了支持的哈希算法。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">const CHUNK_SIZE = 1024

func hash_file(path):
    # 检查文件是否存在。
    if not FileAccess.file_exists(path):
        return
    # 启动一个 SHA-256 上下文。
    var ctx = HashingContext.new()
    ctx.start(HashingContext.HASH_SHA256)
    # 打开文件进行哈希处理。
    var file = FileAccess.open(path, FileAccess.READ)
    # 读取每个块后更新上下文。
    while not file.eof_reached():
        ctx.update(file.get_buffer(CHUNK_SIZE))
    # 获取计算的哈希值。
    var res = ctx.finish()
    # 将结果打印为十六进制字符串和数组。
    printt(res.hex_encode(), Array(res))</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public const int ChunkSize = 1024;

public void HashFile(string path)
{
    // 检查文件是否存在。
    if (!FileAccess.FileExists(path))
    {
        return;
    }
    // 启动一个 SHA-256 上下文。
    var ctx = new HashingContext();
    ctx.Start(HashingContext.HashType.Sha256);
    // 打开文件进行哈希处理。
    using var file = FileAccess.Open(path, FileAccess.ModeFlags.Read);
    // 读取每个块后更新上下文。
    while (!file.EofReached())
    {
        ctx.Update(file.GetBuffer(ChunkSize));
    }
    // 获取计算的哈希值。
    byte[] res = ctx.Finish();
    // 将结果打印为十六进制字符串和数组。
    GD.PrintT(res.HexEncode(), (Variant)res);
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="115"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-hashingcontext-method-finish"><inline classes="std std-ref">finish</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-hashingcontext-method-start"><inline classes="std std-ref">start</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference> type <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-hashingcontext-method-update"><inline classes="std std-ref">update</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> chunk <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-hashingcontext-hashtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-hashingcontext-hashtype" names="enum_hashingcontext_hashtype">enum <strong>HashType</strong>:</paragraph>
            <target refid="class-hashingcontext-constant-hash-md5"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-hashingcontext-constant-hash-md5" names="class_hashingcontext_constant_hash_md5"><reference internal="True" refid="enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference> <strong>HASH_MD5</strong> = <literal>0</literal></paragraph>
            <paragraph>哈希算法：MD5。</paragraph>
            <target refid="class-hashingcontext-constant-hash-sha1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-hashingcontext-constant-hash-sha1" names="class_hashingcontext_constant_hash_sha1"><reference internal="True" refid="enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference> <strong>HASH_SHA1</strong> = <literal>1</literal></paragraph>
            <paragraph>哈希算法：SHA-1。</paragraph>
            <target refid="class-hashingcontext-constant-hash-sha256"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-hashingcontext-constant-hash-sha256" names="class_hashingcontext_constant_hash_sha256"><reference internal="True" refid="enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference> <strong>HASH_SHA256</strong> = <literal>2</literal></paragraph>
            <paragraph>哈希算法：SHA-256。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-hashingcontext-method-finish"></target>
            <paragraph classes="classref-method" ids="class-hashingcontext-method-finish" names="class_hashingcontext_method_finish"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>finish</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>关闭当前上下文，并返回计算出的哈希值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-hashingcontext-method-start"></target>
            <paragraph classes="classref-method" ids="class-hashingcontext-method-start" names="class_hashingcontext_method_start"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>start</strong> <strong>(</strong> <reference internal="True" refid="enum-hashingcontext-hashtype"><inline classes="std std-ref">HashType</inline></reference> type <strong>)</strong></paragraph>
            <paragraph>开始对给定类型 <literal>type</literal> 的哈希计算（例如 <reference internal="True" refid="class-hashingcontext-constant-hash-sha256"><inline classes="std std-ref">HASH_SHA256</inline></reference> 会开始计算 SHA-256）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-hashingcontext-method-update"></target>
            <paragraph classes="classref-method" ids="class-hashingcontext-method-update" names="class_hashingcontext_method_update"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>update</strong> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> chunk <strong>)</strong></paragraph>
            <paragraph>使用给定的数据块 <literal>chunk</literal> 更新计算。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
