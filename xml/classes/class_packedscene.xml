<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_packedscene.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/PackedScene.xml.</comment>
    <target refid="class-packedscene"></target>
    <section ids="packedscene class-packedscene" names="packedscene class_packedscene">
        <title>PackedScene</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>对序列化场景的抽象。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>场景文件的简化接口。提供可以对场景资源本身进行的操作和检查。</paragraph>
            <paragraph>可以用来将某个节点保存到文件中。保存时，会将该节点和它所拥有的所有节点一起保存（见 <reference internal="True" refuri="class_node#class-node-property-owner"><inline classes="std std-ref">Node.owner</inline></reference> 属性）。</paragraph>
            <paragraph><strong>注意：</strong>该节点不必自我拥有。</paragraph>
            <paragraph><strong>加载保存场景的示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 如果路径在编译期不可知，请使用 load() 而不是 preload()。
var scene = preload("res://scene.tscn").instantiate()
# 将该节点添加为脚本附加节点的子节点。
add_child(scene)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// C# 没有 preload，所以你使用的永远是 ResourceLoader.Load&lt;PackedScene&gt;()。
var scene = ResourceLoader.Load&lt;PackedScene&gt;("res://scene.tscn").Instantiate();
// 将该节点添加为脚本附加节点的子节点。
AddChild(scene);</literal_block>
                </div>
            </container>
            <paragraph><strong>保存不同所有者的节点的示例：</strong>下面的粒子会创建 3 个对象：<reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference>（<literal>node</literal>）、<reference internal="True" refuri="class_rigidbody2d#class-rigidbody2d"><inline classes="std std-ref">RigidBody2D</inline></reference>（<literal>body</literal>）、<reference internal="True" refuri="class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference>（<literal>collision</literal>)）。<literal>node</literal> 的下一级是 <literal>body</literal>，再下一级是 <literal>collision</literal>。只有 <literal>body</literal> 被 <literal>node</literal> 拥有，因此 <reference internal="True" refid="class-packedscene-method-pack"><inline classes="std std-ref">pack</inline></reference> 只会保存两个节点，不会保存 <literal>collision</literal>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 创建对象。
var node = Node2D.new()
var body = RigidBody2D.new()
var collision = CollisionShape2D.new()

# 创建对象架构。
body.add_child(collision)
node.add_child(body)

# 修改 `body` 的拥有者，但不修改 `collision` 的拥有者。
body.owner = node
var scene = PackedScene.new()

# 只会打包 `node` 和 `body`。
var result = scene.pack(node)
if result == OK:
    var error = ResourceSaver.save(scene, "res://path/name.tscn")  # Or "user://..."
    if error != OK:
        push_error("将场景保存到磁盘时出错。")</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 创建对象。
var node = new Node2D();
var body = new RigidBody2D();
var collision = new CollisionShape2D();

// 创建对象架构。
body.AddChild(collision);
node.AddChild(body);

// 修改 `body` 的拥有者，但不修改 `collision` 的拥有者。
body.Owner = node;
var scene = new PackedScene();

// 只会打包 `node` 和 `body`。
Error result = scene.Pack(node);
if (result == Error.Ok)
{
    Error error = ResourceSaver.Save(scene, "res://path/name.tscn"); // Or "user://..."
    if (error != Error.Ok)
    {
        GD.PushError("将场景保存到磁盘时出错。");
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="2D 角色扮演游戏（RPG）演示" refuri="https://godotengine.org/asset-library/asset/2729">2D 角色扮演游戏（RPG）演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="54"></colspec>
                    <colspec colwidth="204"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedscene-property-bundled"><inline classes="std std-ref">_bundled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{ "conn_count": 0, "conns": PackedInt32Array(), "editable_instances": [], "names": PackedStringArray(), "node_count": 0, "node_paths": [], "nodes": PackedInt32Array(), "variants": [], "version": 3 }</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="141"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedscene-method-can-instantiate"><inline classes="std std-ref">can_instantiate</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scenestate#class-scenestate"><inline classes="std std-ref">SceneState</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedscene-method-get-state"><inline classes="std std-ref">get_state</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedscene-method-instantiate"><inline classes="std std-ref">instantiate</inline></reference>(edit_state: <reference internal="True" refid="enum-packedscene-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-packedscene-method-pack"><inline classes="std std-ref">pack</inline></reference>(path: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-packedscene-geneditstate"></target>
            <paragraph classes="classref-enumeration" ids="enum-packedscene-geneditstate" names="enum_packedscene_geneditstate">enum <strong>GenEditState</strong>: <reference internal="True" refid="enum-packedscene-geneditstate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-packedscene-constant-gen-edit-state-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-packedscene-constant-gen-edit-state-disabled" names="class_packedscene_constant_gen_edit_state_disabled"><reference internal="True" refid="enum-packedscene-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>如果传递给 <reference internal="True" refid="class-packedscene-method-instantiate"><inline classes="std std-ref">instantiate</inline></reference>，则会阻止对场景状态的编辑。</paragraph>
            <target refid="class-packedscene-constant-gen-edit-state-instance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-packedscene-constant-gen-edit-state-instance" names="class_packedscene_constant_gen_edit_state_instance"><reference internal="True" refid="enum-packedscene-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_INSTANCE</strong> = <literal>1</literal></paragraph>
            <paragraph>如果传递给 <reference internal="True" refid="class-packedscene-method-instantiate"><inline classes="std std-ref">instantiate</inline></reference>，则会向本地场景提供本地场景资源。</paragraph>
            <paragraph><strong>注意：</strong>仅在编辑器构建中可用。</paragraph>
            <target refid="class-packedscene-constant-gen-edit-state-main"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-packedscene-constant-gen-edit-state-main" names="class_packedscene_constant_gen_edit_state_main"><reference internal="True" refid="enum-packedscene-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_MAIN</strong> = <literal>2</literal></paragraph>
            <paragraph>如果传递给 <reference internal="True" refid="class-packedscene-method-instantiate"><inline classes="std std-ref">instantiate</inline></reference>，则会向本地场景提供本地场景资源。只有主场景应该接收主编辑状态。</paragraph>
            <paragraph><strong>注意：</strong>仅在编辑器构建中可用。</paragraph>
            <target refid="class-packedscene-constant-gen-edit-state-main-inherited"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-packedscene-constant-gen-edit-state-main-inherited" names="class_packedscene_constant_gen_edit_state_main_inherited"><reference internal="True" refid="enum-packedscene-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> <strong>GEN_EDIT_STATE_MAIN_INHERITED</strong> = <literal>3</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-packedscene-constant-gen-edit-state-main"><inline classes="std std-ref">GEN_EDIT_STATE_MAIN</inline></reference> 类似，但适用于场景作为另一个场景的基类实例化的情况。</paragraph>
            <paragraph><strong>注意：</strong>仅在编辑器构建中可用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-packedscene-property-bundled"></target>
            <paragraph classes="classref-property" ids="class-packedscene-property-bundled" names="class_packedscene_property__bundled"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_bundled</strong> = <literal>{ "conn_count": 0, "conns": PackedInt32Array(), "editable_instances": [], "names": PackedStringArray(), "node_count": 0, "node_paths": [], "nodes": PackedInt32Array(), "variants": [], "version": 3 }</literal> <reference internal="True" refid="class-packedscene-property-bundled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>A dictionary representation of the scene contents.</paragraph>
            <paragraph>Available keys include "names" and "variants" for resources, "node_count", "nodes", "node_paths" for nodes, "editable_instances" for paths to overridden nodes, "conn_count" and "conns" for signal connections, and "version" for the format style of the PackedScene.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-packedscene-method-can-instantiate"></target>
            <paragraph classes="classref-method" ids="class-packedscene-method-can-instantiate" names="class_packedscene_method_can_instantiate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>can_instantiate</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedscene-method-can-instantiate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果场景文件有节点，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedscene-method-get-state"></target>
            <paragraph classes="classref-method" ids="class-packedscene-method-get-state" names="class_packedscene_method_get_state"><reference internal="True" refuri="class_scenestate#class-scenestate"><inline classes="std std-ref">SceneState</inline></reference> <strong>get_state</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedscene-method-get-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回代表场景文件内容的 <reference internal="True" refuri="class_scenestate#class-scenestate"><inline classes="std std-ref">SceneState</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedscene-method-instantiate"></target>
            <paragraph classes="classref-method" ids="class-packedscene-method-instantiate" names="class_packedscene_method_instantiate"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>instantiate</strong>(edit_state: <reference internal="True" refid="enum-packedscene-geneditstate"><inline classes="std std-ref">GenEditState</inline></reference> = 0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-packedscene-method-instantiate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>实例化该场景的节点架构。触发子场景的实例化。在根节点上触发 <reference internal="True" refuri="class_node#class-node-constant-notification-scene-instantiated"><inline classes="std std-ref">Node.NOTIFICATION_SCENE_INSTANTIATED</inline></reference> 通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-packedscene-method-pack"></target>
            <paragraph classes="classref-method" ids="class-packedscene-method-pack" names="class_packedscene_method_pack"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>pack</strong>(path: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-packedscene-method-pack"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Packs the <literal>path</literal> node, and all owned sub-nodes, into this <strong>PackedScene</strong>. Any existing data will be cleared. See <reference internal="True" refuri="class_node#class-node-property-owner"><inline classes="std std-ref">Node.owner</inline></reference>.</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
