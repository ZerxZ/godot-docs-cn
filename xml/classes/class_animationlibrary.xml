<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationlibrary.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationLibrary.xml.</comment>
    <target refid="class-animationlibrary"></target>
    <section ids="animationlibrary class-animationlibrary" names="animationlibrary class_animationlibrary">
        <title>AnimationLibrary</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> 资源的容器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>动画库存储一组可通过 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> 键访问的动画，可用于 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/index"><inline classes="doc">动画教程索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="170"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationlibrary-method-add-animation"><inline classes="std std-ref">add_animation</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationlibrary-method-get-animation"><inline classes="std std-ref">get_animation</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationlibrary-method-get-animation-list"><inline classes="std std-ref">get_animation_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationlibrary-method-has-animation"><inline classes="std std-ref">has_animation</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationlibrary-method-remove-animation"><inline classes="std std-ref">remove_animation</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationlibrary-method-rename-animation"><inline classes="std std-ref">rename_animation</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, newname: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-animationlibrary-signal-animation-added"></target>
            <paragraph classes="classref-signal" ids="class-animationlibrary-signal-animation-added" names="class_animationlibrary_signal_animation_added"><strong>animation_added</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationlibrary-signal-animation-added"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在键 <literal>name</literal> 下添加 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> 时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-signal-animation-changed"></target>
            <paragraph classes="classref-signal" ids="class-animationlibrary-signal-animation-changed" names="class_animationlibrary_signal_animation_changed"><strong>animation_changed</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationlibrary-signal-animation-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当其中一个动画发生变化时发出，例如轨道被添加、移动，或路径被更改。<literal>name</literal> 是被改变的动画的键。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_resource#class-resource-signal-changed"><inline classes="std std-ref">Resource.changed</inline></reference>，本信号充当该信号的中继。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-signal-animation-removed"></target>
            <paragraph classes="classref-signal" ids="class-animationlibrary-signal-animation-removed" names="class_animationlibrary_signal_animation_removed"><strong>animation_removed</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationlibrary-signal-animation-removed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当使用键 <literal>name</literal> 存储的 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> 被移除时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-signal-animation-renamed"></target>
            <paragraph classes="classref-signal" ids="class-animationlibrary-signal-animation-renamed" names="class_animationlibrary_signal_animation_renamed"><strong>animation_renamed</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationlibrary-signal-animation-renamed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> 的键从 <literal>name</literal> 更改为 <literal>to_name</literal> 时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationlibrary-method-add-animation"></target>
            <paragraph classes="classref-method" ids="class-animationlibrary-method-add-animation" names="class_animationlibrary_method_add_animation"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>add_animation</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>) <reference internal="True" refid="class-animationlibrary-method-add-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>animation</literal> 添加到库中，可通过键 <literal>name</literal> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-method-get-animation"></target>
            <paragraph classes="classref-method" ids="class-animationlibrary-method-get-animation" names="class_animationlibrary_method_get_animation"><reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> <strong>get_animation</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationlibrary-method-get-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回带有键 <literal>name</literal> 的 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>。如果动画不存在，则返回 <literal>null</literal> 并记录错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-method-get-animation-list"></target>
            <paragraph classes="classref-method" ids="class-animationlibrary-method-get-animation-list" names="class_animationlibrary_method_get_animation_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>] <strong>get_animation_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationlibrary-method-get-animation-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回库中存储的 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> 的键。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-method-has-animation"></target>
            <paragraph classes="classref-method" ids="class-animationlibrary-method-has-animation" names="class_animationlibrary_method_has_animation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_animation</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationlibrary-method-has-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该库存储了以 <literal>name</literal> 作为键的 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-method-remove-animation"></target>
            <paragraph classes="classref-method" ids="class-animationlibrary-method-remove-animation" names="class_animationlibrary_method_remove_animation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_animation</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationlibrary-method-remove-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用键 <literal>name</literal> 移除 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationlibrary-method-rename-animation"></target>
            <paragraph classes="classref-method" ids="class-animationlibrary-method-rename-animation" names="class_animationlibrary_method_rename_animation"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rename_animation</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, newname: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationlibrary-method-rename-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将与键 <literal>name</literal> 关联的 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> 的键更改为 <literal>newname</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
