<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gltfstate.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/gltf/doc_classes/GLTFState.xml.</comment>
    <target refid="class-gltfstate"></target>
    <section ids="gltfstate class-gltfstate" names="gltfstate class_gltfstate">
        <title>GLTFState</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_fbxstate#class-fbxstate"><inline classes="std std-ref">FBXState</inline></reference></paragraph>
        <paragraph>代表 GLTF 文件中的所有数据。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>包含 GLTF 文件中的所有节点和资源。用于 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument"><inline classes="std std-ref">GLTFDocument</inline></reference> 的数据存储，能够让 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument"><inline classes="std std-ref">GLTFDocument</inline></reference> 和所有 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类保持无状态。</paragraph>
            <paragraph>GLTFState 的填写可以通过 <reference internal="True" refuri="class_gltfdocument#class-gltfdocument"><inline classes="std std-ref">GLTFDocument</inline></reference> 读取文件进行，也可以通过转换 Godot 场景进行。填写完成后，可以将数据用于 Godot 场景的创建或者 GLTF 文件的保存。与 Godot 场景之间进行转换的代码可以通过 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类在任意时刻拦截。这样就能够在 GLTF 文件中存储自定义数据，也可以将自定义数据保存到 Godot 节点或者从 Godot 节点读取。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="GLTF 资产头的模式" refuri='https://github.com/KhronosGroup/glTF/blob/main/specification/2.0/schema/asset.schema.json"'>GLTF 资产头的模式</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="76"></colspec>
                    <colspec colwidth="84"></colspec>
                    <colspec colwidth="24"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-bake-fps"><inline classes="std std-ref">bake_fps</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>30.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-base-path"><inline classes="std std-ref">base_path</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-buffers"><inline classes="std std-ref">buffers</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-copyright"><inline classes="std std-ref">copyright</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-create-animations"><inline classes="std std-ref">create_animations</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-filename"><inline classes="std std-ref">filename</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-glb-data"><inline classes="std std-ref">glb_data</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedByteArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-import-as-skeleton-bones"><inline classes="std std-ref">import_as_skeleton_bones</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-json"><inline classes="std std-ref">json</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{}</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-major-version"><inline classes="std std-ref">major_version</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-minor-version"><inline classes="std std-ref">minor_version</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-root-nodes"><inline classes="std std-ref">root_nodes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedInt32Array()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-scene-name"><inline classes="std std-ref">scene_name</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-property-use-named-skin-binds"><inline classes="std std-ref">use_named_skin_binds</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="82"></colspec>
                    <colspec colwidth="181"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-add-used-extension"><inline classes="std std-ref">add_used_extension</inline></reference>(extension_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, required: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-append-data-to-buffers"><inline classes="std std-ref">append_data_to_buffers</inline></reference>(data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, deduplication: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfaccessor#class-gltfaccessor"><inline classes="std std-ref">GLTFAccessor</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-accessors"><inline classes="std std-ref">get_accessors</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-additional-data"><inline classes="std std-ref">get_additional_data</inline></reference>(extension_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-animation-player"><inline classes="std std-ref">get_animation_player</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-animation-players-count"><inline classes="std std-ref">get_animation_players_count</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfanimation#class-gltfanimation"><inline classes="std std-ref">GLTFAnimation</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-animations"><inline classes="std std-ref">get_animations</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfbufferview#class-gltfbufferview"><inline classes="std std-ref">GLTFBufferView</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-buffer-views"><inline classes="std std-ref">get_buffer_views</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-cameras"><inline classes="std std-ref">get_cameras</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-handle-binary-image"><inline classes="std std-ref">get_handle_binary_image</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-images"><inline classes="std std-ref">get_images</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-lights"><inline classes="std std-ref">get_lights</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-materials"><inline classes="std std-ref">get_materials</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-meshes"><inline classes="std std-ref">get_meshes</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-node-index"><inline classes="std std-ref">get_node_index</inline></reference>(scene_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-nodes"><inline classes="std std-ref">get_nodes</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-scene-node"><inline classes="std std-ref">get_scene_node</inline></reference>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-skeletons"><inline classes="std std-ref">get_skeletons</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-skins"><inline classes="std std-ref">get_skins</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexturesampler#class-gltftexturesampler"><inline classes="std std-ref">GLTFTextureSampler</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-texture-samplers"><inline classes="std std-ref">get_texture_samplers</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-textures"><inline classes="std std-ref">get_textures</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-unique-animation-names"><inline classes="std std-ref">get_unique_animation_names</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-get-unique-names"><inline classes="std std-ref">get_unique_names</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-accessors"><inline classes="std std-ref">set_accessors</inline></reference>(accessors: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfaccessor#class-gltfaccessor"><inline classes="std std-ref">GLTFAccessor</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-additional-data"><inline classes="std std-ref">set_additional_data</inline></reference>(extension_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, additional_data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-animations"><inline classes="std std-ref">set_animations</inline></reference>(animations: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfanimation#class-gltfanimation"><inline classes="std std-ref">GLTFAnimation</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-buffer-views"><inline classes="std std-ref">set_buffer_views</inline></reference>(buffer_views: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfbufferview#class-gltfbufferview"><inline classes="std std-ref">GLTFBufferView</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-cameras"><inline classes="std std-ref">set_cameras</inline></reference>(cameras: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-handle-binary-image"><inline classes="std std-ref">set_handle_binary_image</inline></reference>(method: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-images"><inline classes="std std-ref">set_images</inline></reference>(images: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-lights"><inline classes="std std-ref">set_lights</inline></reference>(lights: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-materials"><inline classes="std std-ref">set_materials</inline></reference>(materials: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-meshes"><inline classes="std std-ref">set_meshes</inline></reference>(meshes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-nodes"><inline classes="std std-ref">set_nodes</inline></reference>(nodes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-skeletons"><inline classes="std std-ref">set_skeletons</inline></reference>(skeletons: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-skins"><inline classes="std std-ref">set_skins</inline></reference>(skins: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-texture-samplers"><inline classes="std std-ref">set_texture_samplers</inline></reference>(texture_samplers: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexturesampler#class-gltftexturesampler"><inline classes="std std-ref">GLTFTextureSampler</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-textures"><inline classes="std std-ref">set_textures</inline></reference>(textures: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-unique-animation-names"><inline classes="std std-ref">set_unique_animation_names</inline></reference>(unique_animation_names: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfstate-method-set-unique-names"><inline classes="std std-ref">set_unique_names</inline></reference>(unique_names: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>])</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="常量">
            <title>常量</title>
            <target refid="class-gltfstate-constant-handle-binary-discard-textures"></target>
            <paragraph classes="classref-constant" ids="class-gltfstate-constant-handle-binary-discard-textures" names="class_gltfstate_constant_handle_binary_discard_textures"><strong>HANDLE_BINARY_DISCARD_TEXTURES</strong> = <literal>0</literal> <reference internal="True" refid="class-gltfstate-constant-handle-binary-discard-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>丢弃所有内嵌的纹理，并使用无纹理的材质。</paragraph>
            <target refid="class-gltfstate-constant-handle-binary-extract-textures"></target>
            <paragraph classes="classref-constant" ids="class-gltfstate-constant-handle-binary-extract-textures" names="class_gltfstate_constant_handle_binary_extract_textures"><strong>HANDLE_BINARY_EXTRACT_TEXTURES</strong> = <literal>1</literal> <reference internal="True" refid="class-gltfstate-constant-handle-binary-extract-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>提取内嵌的纹理以重新导入和压缩。仅限编辑器。在运行时充当未压缩的。</paragraph>
            <target refid="class-gltfstate-constant-handle-binary-embed-as-basisu"></target>
            <paragraph classes="classref-constant" ids="class-gltfstate-constant-handle-binary-embed-as-basisu" names="class_gltfstate_constant_handle_binary_embed_as_basisu"><strong>HANDLE_BINARY_EMBED_AS_BASISU</strong> = <literal>2</literal> <reference internal="True" refid="class-gltfstate-constant-handle-binary-embed-as-basisu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将使用 Basis Universal 压缩的纹理 VRAM 嵌入到生成的场景中。</paragraph>
            <target refid="class-gltfstate-constant-handle-binary-embed-as-uncompressed"></target>
            <paragraph classes="classref-constant" ids="class-gltfstate-constant-handle-binary-embed-as-uncompressed" names="class_gltfstate_constant_handle_binary_embed_as_uncompressed"><strong>HANDLE_BINARY_EMBED_AS_UNCOMPRESSED</strong> = <literal>3</literal> <reference internal="True" refid="class-gltfstate-constant-handle-binary-embed-as-uncompressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将无损压缩的纹理嵌入到生成的场景中，匹配旧行为。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-gltfstate-property-bake-fps"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-bake-fps" names="class_gltfstate_property_bake_fps"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>bake_fps</strong> = <literal>30.0</literal> <reference internal="True" refid="class-gltfstate-property-bake-fps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bake_fps</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_bake_fps</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The baking fps of the animation for either import or export.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-base-path"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-base-path" names="class_gltfstate_property_base_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>base_path</strong> = <literal>""</literal> <reference internal="True" refid="class-gltfstate-property-base-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_base_path</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_base_path</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与该 GLTF 数据关联的文件夹路径。这用于查找该 GLTF 文件引用的其他文件，例如图像或二进制缓冲区。这将在导入期间从文件追加时设置，并将在导出期间写入文件时设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-buffers"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-buffers" names="class_gltfstate_property_buffers"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>] <strong>buffers</strong> = <literal>[]</literal> <reference internal="True" refid="class-gltfstate-property-buffers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_buffers</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>] <strong>get_buffers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-copyright"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-copyright" names="class_gltfstate_property_copyright"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>copyright</strong> = <literal>""</literal> <reference internal="True" refid="class-gltfstate-property-copyright"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_copyright</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_copyright</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 GLTF 文件的资产标头中的版权字符串。如果存在，则在导入期间设置；如果非空则在导出期间设置。详见 GLTF 资产标头文档。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-create-animations"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-create-animations" names="class_gltfstate_property_create_animations"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>create_animations</strong> = <literal>true</literal> <reference internal="True" refid="class-gltfstate-property-create-animations"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_create_animations</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_create_animations</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-filename"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-filename" names="class_gltfstate_property_filename"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>filename</strong> = <literal>""</literal> <reference internal="True" refid="class-gltfstate-property-filename"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_filename</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_filename</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与该 GLTF 数据关联的文件名。如果它以 <literal>.gltf</literal> 结尾，则这是基于文本的 GLTF，否则这是二进制 GLB。这将在导入期间从文件追加时设置，并将在导出期间写入文件时设置。如果写入到缓冲区，这将是一个空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-glb-data"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-glb-data" names="class_gltfstate_property_glb_data"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>glb_data</strong> = <literal>PackedByteArray()</literal> <reference internal="True" refid="class-gltfstate-property-glb-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_glb_data</strong>(value: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_glb_data</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>附加到 .glb 文件的二进制缓冲区。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-import-as-skeleton-bones"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-import-as-skeleton-bones" names="class_gltfstate_property_import_as_skeleton_bones"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>import_as_skeleton_bones</strong> = <literal>false</literal> <reference internal="True" refid="class-gltfstate-property-import-as-skeleton-bones"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_import_as_skeleton_bones</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_import_as_skeleton_bones</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>True 则强制文档中的所有 GLTFNode 成为单个 Skeleton3D godot 节点的骨骼。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-json"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-json" names="class_gltfstate_property_json"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>json</strong> = <literal>{}</literal> <reference internal="True" refid="class-gltfstate-property-json"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_json</strong>(value: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_json</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与该 GLTFState 对应的原始 JSON 文档。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-major-version"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-major-version" names="class_gltfstate_property_major_version"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>major_version</strong> = <literal>0</literal> <reference internal="True" refid="class-gltfstate-property-major-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_major_version</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_major_version</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-minor-version"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-minor-version" names="class_gltfstate_property_minor_version"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>minor_version</strong> = <literal>0</literal> <reference internal="True" refid="class-gltfstate-property-minor-version"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_minor_version</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_minor_version</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-root-nodes"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-root-nodes" names="class_gltfstate_property_root_nodes"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>root_nodes</strong> = <literal>PackedInt32Array()</literal> <reference internal="True" refid="class-gltfstate-property-root-nodes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_root_nodes</strong>(value: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_root_nodes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>GLTF 文件的根节点。通常，一个 GLTF 文件只有一个场景，因此只有一个根节点。然而，一个 GLTF 文件可能有多个场景，因此可以有多个根节点，它们将作为彼此的兄弟节点生成，并作为生成的 Godot 场景的根节点的子节点生成。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-scene-name"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-scene-name" names="class_gltfstate_property_scene_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>scene_name</strong> = <literal>""</literal> <reference internal="True" refid="class-gltfstate-property-scene-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scene_name</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_scene_name</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>场景的名称。导入时，如果没有指定，这将是文件名。导出时，如果指定，场景名称将被保存到 GLTF 文件中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-property-use-named-skin-binds"></target>
            <paragraph classes="classref-property" ids="class-gltfstate-property-use-named-skin-binds" names="class_gltfstate_property_use_named_skin_binds"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_named_skin_binds</strong> = <literal>false</literal> <reference internal="True" refid="class-gltfstate-property-use-named-skin-binds"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_use_named_skin_binds</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_use_named_skin_binds</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <container classes="contribute">
                <paragraph>目前没有这个属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gltfstate-method-add-used-extension"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-add-used-extension" names="class_gltfstate_method_add_used_extension"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_used_extension</strong>(extension_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, required: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-gltfstate-method-add-used-extension"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在序列化期间，将一个扩展名追加到该 GLTF 文件使用的扩展名列表在。如果 <literal>required</literal> 为 true，则该扩展名也将被添加到所需扩展名列表中。不要在 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension-private-method-export-post"><inline classes="std std-ref">GLTFDocumentExtension._export_post</inline></reference> 中运行它，因为那个阶段已来不及添加扩展。最终的列表将按字母顺序排序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-append-data-to-buffers"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-append-data-to-buffers" names="class_gltfstate_method_append_data_to_buffers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>append_data_to_buffers</strong>(data: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, deduplication: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-gltfstate-method-append-data-to-buffers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的字节数组数据附加到缓冲区并为其创建一个 <reference internal="True" refuri="class_gltfbufferview#class-gltfbufferview"><inline classes="std std-ref">GLTFBufferView</inline></reference>。返回目标 <reference internal="True" refuri="class_gltfbufferview#class-gltfbufferview"><inline classes="std std-ref">GLTFBufferView</inline></reference> 的索引。如果 <literal>deduplication</literal> 为 true，则将首先在缓冲区中搜索重复数据，否则将始终追加新字节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-accessors"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-accessors" names="class_gltfstate_method_get_accessors"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfaccessor#class-gltfaccessor"><inline classes="std std-ref">GLTFAccessor</inline></reference>] <strong>get_accessors</strong>() <reference internal="True" refid="class-gltfstate-method-get-accessors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-additional-data"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-additional-data" names="class_gltfstate_method_get_additional_data"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_additional_data</strong>(extension_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-gltfstate-method-get-additional-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在该 <strong>GLTFState</strong> 实例中，获取额外的任意数据。这可用于保留在 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类中的每个文件的状态数据，这很重要，因为它们是无状态的。</paragraph>
            <paragraph>该参数应该是 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 的名称（不必与 GLTF 文件中的扩展名相匹配），而该返回值可以是你设置的任何东西。如果没有设置任何东西，则该返回值为 null。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-animation-player"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-animation-player" names="class_gltfstate_method_get_animation_player"><reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> <strong>get_animation_player</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-gltfstate-method-get-animation-player"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定索引的 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点。这些节点仅在将 Godot <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点转换为 GLTF 动画时的导出过程中使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-animation-players-count"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-animation-players-count" names="class_gltfstate_method_get_animation_players_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_animation_players_count</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-gltfstate-method-get-animation-players-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该 <strong>GLTFState</strong> 中 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点的数量。这些节点仅在将 Godot <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点转换为 GLTF 动画时的导出过程中使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-animations"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-animations" names="class_gltfstate_method_get_animations"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfanimation#class-gltfanimation"><inline classes="std std-ref">GLTFAnimation</inline></reference>] <strong>get_animations</strong>() <reference internal="True" refid="class-gltfstate-method-get-animations"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GLTF 文件中所有 <reference internal="True" refuri="class_gltfanimation#class-gltfanimation"><inline classes="std std-ref">GLTFAnimation</inline></reference> 的数组。导入时，这些将在一个 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点生成为动画。导出时，这些将从 Godot <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点生成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-buffer-views"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-buffer-views" names="class_gltfstate_method_get_buffer_views"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfbufferview#class-gltfbufferview"><inline classes="std std-ref">GLTFBufferView</inline></reference>] <strong>get_buffer_views</strong>() <reference internal="True" refid="class-gltfstate-method-get-buffer-views"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-cameras"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-cameras" names="class_gltfstate_method_get_cameras"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference>] <strong>get_cameras</strong>() <reference internal="True" refid="class-gltfstate-method-get-cameras"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GLTF 文件中所有 <reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference> 的数组。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-camera"><inline classes="std std-ref">GLTFNode.camera</inline></reference> 索引引用的相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-handle-binary-image"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-handle-binary-image" names="class_gltfstate_method_get_handle_binary_image"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_handle_binary_image</strong>() <reference internal="True" refid="class-gltfstate-method-get-handle-binary-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-images"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-images" names="class_gltfstate_method_get_images"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>] <strong>get_images</strong>() <reference internal="True" refid="class-gltfstate-method-get-images"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 数组的形式获取 GLTF 文件中的图像。这些是 <reference internal="True" refuri="class_gltftexture#class-gltftexture-property-src-image"><inline classes="std std-ref">GLTFTexture.src_image</inline></reference> 索引引用的图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-lights"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-lights" names="class_gltfstate_method_get_lights"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference>] <strong>get_lights</strong>() <reference internal="True" refid="class-gltfstate-method-get-lights"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GLTF 文件中所有 <reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference> 的数组。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-light"><inline classes="std std-ref">GLTFNode.light</inline></reference> 索引引用的灯。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-materials"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-materials" names="class_gltfstate_method_get_materials"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>] <strong>get_materials</strong>() <reference internal="True" refid="class-gltfstate-method-get-materials"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-meshes"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-meshes" names="class_gltfstate_method_get_meshes"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference>] <strong>get_meshes</strong>() <reference internal="True" refid="class-gltfstate-method-get-meshes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GLTF 文件中所有 <reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference> 的数组。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-mesh"><inline classes="std std-ref">GLTFNode.mesh</inline></reference> 索引引用的网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-node-index"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-node-index" names="class_gltfstate_method_get_node_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_node_index</strong>(scene_node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-gltfstate-method-get-node-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与该 Godot 场景节点对应的 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 的索引。这个方法与 <reference internal="True" refid="class-gltfstate-method-get-scene-node"><inline classes="std std-ref">get_scene_node</inline></reference> 互逆。可以在导出过程中使用。</paragraph>
            <paragraph><strong>注意：</strong>并不是所有 Godot 场景节点都有对应的 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>，也并不是所有 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 都会生成场景节点。如果该场景节点没有 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 索引，则会返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-nodes"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-nodes" names="class_gltfstate_method_get_nodes"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>] <strong>get_nodes</strong>() <reference internal="True" refid="class-gltfstate-method-get-nodes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GLTF 文件中所有 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 的数组。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-children"><inline classes="std std-ref">GLTFNode.children</inline></reference> 和 <reference internal="True" refid="class-gltfstate-property-root-nodes"><inline classes="std std-ref">root_nodes</inline></reference> 引用的节点。这包括可能不会在 Godot 场景中生成的节点，或者可能生成多个 Godot 场景节点的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-scene-node"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-scene-node" names="class_gltfstate_method_get_scene_node"><reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>get_scene_node</strong>(idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-gltfstate-method-get-scene-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定索引的 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 对应生成的 Godot 场景节点。这个方法与 <reference internal="True" refid="class-gltfstate-method-get-node-index"><inline classes="std std-ref">get_node_index</inline></reference> 互逆。可以在导入过程中使用。</paragraph>
            <paragraph><strong>注意：</strong>并不是所有 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 都会生成场景节点，也并不是所有 Godot 场景节点都有对应的 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>。如果该 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference> 索引没有场景节点，则会返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-skeletons"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-skeletons" names="class_gltfstate_method_get_skeletons"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference>] <strong>get_skeletons</strong>() <reference internal="True" refid="class-gltfstate-method-get-skeletons"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GLTF 文件中所有 <reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference> 的数组。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-skeleton"><inline classes="std std-ref">GLTFNode.skeleton</inline></reference> 索引引用的骨架。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-skins"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-skins" names="class_gltfstate_method_get_skins"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference>] <strong>get_skins</strong>() <reference internal="True" refid="class-gltfstate-method-get-skins"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 GLTF 文件中所有 <reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference> 的数组。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-skin"><inline classes="std std-ref">GLTFNode.skin</inline></reference> 索引引用的皮肤。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-texture-samplers"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-texture-samplers" names="class_gltfstate_method_get_texture_samplers"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexturesampler#class-gltftexturesampler"><inline classes="std std-ref">GLTFTextureSampler</inline></reference>] <strong>get_texture_samplers</strong>() <reference internal="True" refid="class-gltfstate-method-get-texture-samplers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检索 GLTF 中包含的纹理所使用的纹理采样器的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-textures"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-textures" names="class_gltfstate_method_get_textures"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>] <strong>get_textures</strong>() <reference internal="True" refid="class-gltfstate-method-get-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-unique-animation-names"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-unique-animation-names" names="class_gltfstate_method_get_unique_animation_names"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>get_unique_animation_names</strong>() <reference internal="True" refid="class-gltfstate-method-get-unique-animation-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一组唯一的动画名称。这仅在导入过程中使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-get-unique-names"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-get-unique-names" names="class_gltfstate_method_get_unique_names"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] <strong>get_unique_names</strong>() <reference internal="True" refid="class-gltfstate-method-get-unique-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回唯一节点名称的数组。这用于导入过程和导出过程。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-accessors"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-accessors" names="class_gltfstate_method_set_accessors"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_accessors</strong>(accessors: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfaccessor#class-gltfaccessor"><inline classes="std std-ref">GLTFAccessor</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-accessors"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-additional-data"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-additional-data" names="class_gltfstate_method_set_additional_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_additional_data</strong>(extension_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, additional_data: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-gltfstate-method-set-additional-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在这个 <strong>GLTFState</strong> 实例中设置额外的任意数据。这可以用来保留在 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 类中的每个文件的状态数据，这很重要，因为它们是无状态的。</paragraph>
            <paragraph>第一个参数应该是 <reference internal="True" refuri="class_gltfdocumentextension#class-gltfdocumentextension"><inline classes="std std-ref">GLTFDocumentExtension</inline></reference> 的名称（不必与 GLTF 文件中的扩展名相匹配），第二个参数可以是任何你想要的东西。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-animations"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-animations" names="class_gltfstate_method_set_animations"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_animations</strong>(animations: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfanimation#class-gltfanimation"><inline classes="std std-ref">GLTFAnimation</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-animations"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的 <reference internal="True" refuri="class_gltfanimation#class-gltfanimation"><inline classes="std std-ref">GLTFAnimation</inline></reference>。导入时，这些将在 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点中生成为动画。导出时，这些将由 Godot <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点生成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-buffer-views"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-buffer-views" names="class_gltfstate_method_set_buffer_views"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_buffer_views</strong>(buffer_views: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfbufferview#class-gltfbufferview"><inline classes="std std-ref">GLTFBufferView</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-buffer-views"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-cameras"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-cameras" names="class_gltfstate_method_set_cameras"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cameras</strong>(cameras: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-cameras"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的 <reference internal="True" refuri="class_gltfcamera#class-gltfcamera"><inline classes="std std-ref">GLTFCamera</inline></reference>。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-camera"><inline classes="std std-ref">GLTFNode.camera</inline></reference> 索引引用的相机。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-handle-binary-image"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-handle-binary-image" names="class_gltfstate_method_set_handle_binary_image"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_handle_binary_image</strong>(method: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-gltfstate-method-set-handle-binary-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-images"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-images" names="class_gltfstate_method_set_images"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_images</strong>(images: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-images"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置状态中以 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 数组形式存储的图像。可以在导出时使用。这些是 <reference internal="True" refuri="class_gltftexture#class-gltftexture-property-src-image"><inline classes="std std-ref">GLTFTexture.src_image</inline></reference> 索引所引用的图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-lights"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-lights" names="class_gltfstate_method_set_lights"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_lights</strong>(lights: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-lights"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的 <reference internal="True" refuri="class_gltflight#class-gltflight"><inline classes="std std-ref">GLTFLight</inline></reference>。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-light"><inline classes="std std-ref">GLTFNode.light</inline></reference> 索引引用的灯。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-materials"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-materials" names="class_gltfstate_method_set_materials"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_materials</strong>(materials: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-materials"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-meshes"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-meshes" names="class_gltfstate_method_set_meshes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_meshes</strong>(meshes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-meshes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的 <reference internal="True" refuri="class_gltfmesh#class-gltfmesh"><inline classes="std std-ref">GLTFMesh</inline></reference>。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-mesh"><inline classes="std std-ref">GLTFNode.mesh</inline></reference> 索引引用的网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-nodes"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-nodes" names="class_gltfstate_method_set_nodes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_nodes</strong>(nodes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-nodes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的 <reference internal="True" refuri="class_gltfnode#class-gltfnode"><inline classes="std std-ref">GLTFNode</inline></reference>。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-children"><inline classes="std std-ref">GLTFNode.children</inline></reference> 和 <reference internal="True" refid="class-gltfstate-property-root-nodes"><inline classes="std std-ref">root_nodes</inline></reference> 引用的节点。这里设置的一些节点在 Godot 场景中可能不会生成，也可能会生成多个 Godot 场景节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-skeletons"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-skeletons" names="class_gltfstate_method_set_skeletons"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_skeletons</strong>(skeletons: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-skeletons"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的 <reference internal="True" refuri="class_gltfskeleton#class-gltfskeleton"><inline classes="std std-ref">GLTFSkeleton</inline></reference>。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-skeleton"><inline classes="std std-ref">GLTFNode.skeleton</inline></reference> 索引引用的骨架。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-skins"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-skins" names="class_gltfstate_method_set_skins"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_skins</strong>(skins: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-skins"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的 <reference internal="True" refuri="class_gltfskin#class-gltfskin"><inline classes="std std-ref">GLTFSkin</inline></reference>。这些是 <reference internal="True" refuri="class_gltfnode#class-gltfnode-property-skin"><inline classes="std std-ref">GLTFNode.skin</inline></reference> 索引引用的皮肤。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-texture-samplers"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-texture-samplers" names="class_gltfstate_method_set_texture_samplers"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_samplers</strong>(texture_samplers: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexturesampler#class-gltftexturesampler"><inline classes="std std-ref">GLTFTextureSampler</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-texture-samplers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置由 GLTF 中包含的纹理所使用的纹理采样器的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-textures"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-textures" names="class_gltfstate_method_set_textures"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_textures</strong>(textures: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_gltftexture#class-gltftexture"><inline classes="std std-ref">GLTFTexture</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-unique-animation-names"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-unique-animation-names" names="class_gltfstate_method_set_unique_animation_names"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_unique_animation_names</strong>(unique_animation_names: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-unique-animation-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的唯一动画名称。这仅在导入过程中使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfstate-method-set-unique-names"></target>
            <paragraph classes="classref-method" ids="class-gltfstate-method-set-unique-names" names="class_gltfstate_method_set_unique_names"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_unique_names</strong>(unique_names: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]) <reference internal="True" refid="class-gltfstate-method-set-unique-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该状态中的唯一节点名称。这用于导入过程和导出过程。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
