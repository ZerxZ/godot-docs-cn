<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_graphnode.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/GraphNode.xml.</comment>
    <target refid="class-graphnode"></target>
    <section ids="graphnode class-graphnode" names="graphnode class_graphnode">
        <title>GraphNode</title>
        <paragraph><strong>实验性：</strong> This class may be changed or removed in future versions.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>带有连接端口的容器，代表 <reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference> 中的一个节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>GraphNode</strong> 能够在 <reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference> 图中创建节点，节点会根据其子控件定制内容。<strong>GraphNode</strong> 派生自 <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference>，负责将其子节点放置在屏幕上。工作原理类似于 <reference internal="True" refuri="class_vboxcontainer#class-vboxcontainer"><inline classes="std std-ref">VBoxContainer</inline></reference>。而子节点为 <strong>GraphNode</strong> 提供所谓的插槽，每个插槽的两侧都可以有一个连接端口。</paragraph>
            <paragraph><strong>GraphNode</strong> 的插槽由其索引定义，一个插槽可以为节点提供最多两个端口：一个在左侧，一个在右侧。根据惯例，左侧端口也被称为<strong>输入端口</strong>，右侧端口被称为<strong>输出端口</strong>。每个端口都可以单独启用和配置，使用不同的类型和颜色。类型是你按照自己的需要来定义的任意值。父 <reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference> 将在每个连接和断开连接请求中收到此信息。</paragraph>
            <paragraph>添加至少一个子 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 后，就可以在“检查器”面板中配置插槽。这些属性在“Slot”部分中按每个插槽的索引进行分组。</paragraph>
            <paragraph><strong>注意：</strong>虽然 GraphNode 是使用插槽和插槽索引设置的，但连接是在启用的端口之间建立的。因此 <reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference> 使用端口的索引，而不是插槽的索引。可以使用 <reference internal="True" refid="class-graphnode-method-get-input-port-slot"><inline classes="std std-ref">get_input_port_slot</inline></reference> 和 <reference internal="True" refid="class-graphnode-method-get-output-port-slot"><inline classes="std std-ref">get_output_port_slot</inline></reference> 从端口索引中获取插槽索引。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="46"></colspec>
                    <colspec colwidth="96"></colspec>
                    <colspec colwidth="71"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-property-ignore-invalid-connection-type"><inline classes="std std-ref">ignore_invalid_connection_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-mousefilter"><inline classes="std std-ref">MouseFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>mouse_filter</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-mouse-filter"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-property-title"><inline classes="std std-ref">title</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="43"></colspec>
                    <colspec colwidth="504"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-private-method-draw-port"><inline classes="std std-ref">_draw_port</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, left: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-clear-all-slots"><inline classes="std std-ref">clear_all_slots</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-clear-slot"><inline classes="std std-ref">clear_slot</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-input-port-color"><inline classes="std std-ref">get_input_port_color</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-input-port-count"><inline classes="std std-ref">get_input_port_count</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-input-port-position"><inline classes="std std-ref">get_input_port_position</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-input-port-slot"><inline classes="std std-ref">get_input_port_slot</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-input-port-type"><inline classes="std std-ref">get_input_port_type</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-output-port-color"><inline classes="std std-ref">get_output_port_color</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-output-port-count"><inline classes="std std-ref">get_output_port_count</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-output-port-position"><inline classes="std std-ref">get_output_port_position</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-output-port-slot"><inline classes="std std-ref">get_output_port_slot</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-output-port-type"><inline classes="std std-ref">get_output_port_type</inline></reference>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-slot-color-left"><inline classes="std std-ref">get_slot_color_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-slot-color-right"><inline classes="std std-ref">get_slot_color_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-slot-custom-icon-left"><inline classes="std std-ref">get_slot_custom_icon_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-slot-custom-icon-right"><inline classes="std std-ref">get_slot_custom_icon_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-slot-type-left"><inline classes="std std-ref">get_slot_type_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-slot-type-right"><inline classes="std std-ref">get_slot_type_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_hboxcontainer#class-hboxcontainer"><inline classes="std std-ref">HBoxContainer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-get-titlebar-hbox"><inline classes="std std-ref">get_titlebar_hbox</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-is-slot-draw-stylebox"><inline classes="std std-ref">is_slot_draw_stylebox</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-is-slot-enabled-left"><inline classes="std std-ref">is_slot_enabled_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-is-slot-enabled-right"><inline classes="std std-ref">is_slot_enabled_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot"><inline classes="std std-ref">set_slot</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable_left_port: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, type_left: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color_left: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, enable_right_port: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, type_right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color_right: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, custom_icon_left: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null, custom_icon_right: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null, draw_stylebox: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-color-left"><inline classes="std std-ref">set_slot_color_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-color-right"><inline classes="std std-ref">set_slot_color_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-custom-icon-left"><inline classes="std std-ref">set_slot_custom_icon_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-custom-icon-right"><inline classes="std std-ref">set_slot_custom_icon_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-draw-stylebox"><inline classes="std std-ref">set_slot_draw_stylebox</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-enabled-left"><inline classes="std std-ref">set_slot_enabled_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-enabled-right"><inline classes="std std-ref">set_slot_enabled_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-type-left"><inline classes="std std-ref">set_slot_type_left</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-method-set-slot-type-right"><inline classes="std std-ref">set_slot_type_right</inline></reference>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="73"></colspec>
                    <colspec colwidth="35"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-color-resizer-color"><inline classes="std std-ref">resizer_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-constant-port-h-offset"><inline classes="std std-ref">port_h_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-constant-separation"><inline classes="std std-ref">separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-icon-port"><inline classes="std std-ref">port</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-style-panel"><inline classes="std std-ref">panel</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-style-panel-selected"><inline classes="std std-ref">panel_selected</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-style-slot"><inline classes="std std-ref">slot</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-style-titlebar"><inline classes="std std-ref">titlebar</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphnode-theme-style-titlebar-selected"><inline classes="std std-ref">titlebar_selected</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-graphnode-signal-slot-updated"></target>
            <paragraph classes="classref-signal" ids="class-graphnode-signal-slot-updated" names="class_graphnode_signal_slot_updated"><strong>slot_updated</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-signal-slot-updated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当任何图形节点的插槽更新时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-graphnode-property-ignore-invalid-connection-type"></target>
            <paragraph classes="classref-property" ids="class-graphnode-property-ignore-invalid-connection-type" names="class_graphnode_property_ignore_invalid_connection_type"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>ignore_invalid_connection_type</strong> = <literal>false</literal> <reference internal="True" refid="class-graphnode-property-ignore-invalid-connection-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ignore_invalid_connection_type</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_ignoring_valid_connection_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则可以连接不同类型的端口，即使父级 <reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference> 中未明确允许该连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-property-title"></target>
            <paragraph classes="classref-property" ids="class-graphnode-property-title" names="class_graphnode_property_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>title</strong> = <literal>""</literal> <reference internal="True" refid="class-graphnode-property-title"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_title</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_title</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>显示在 GraphNode 标题栏中的文本。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-graphnode-private-method-draw-port"></target>
            <paragraph classes="classref-method" ids="class-graphnode-private-method-draw-port" names="class_graphnode_private_method__draw_port"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw_port</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, position: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, left: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-graphnode-private-method-draw-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-clear-all-slots"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-clear-all-slots" names="class_graphnode_method_clear_all_slots"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_all_slots</strong>() <reference internal="True" refid="class-graphnode-method-clear-all-slots"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>禁用 GraphNode 的所有插槽。会移除该 GraphNode 的所有输入/输出端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-clear-slot"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-clear-slot" names="class_graphnode_method_clear_slot"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_slot</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-clear-slot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>禁用索引为 <literal>slot_index</literal> 的插槽。会移除该 GraphNode 的对应输入和输出端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-input-port-color"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-input-port-color" names="class_graphnode_method_get_input_port_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_input_port_color</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-input-port-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输入端口的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-input-port-count"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-input-port-count" names="class_graphnode_method_get_input_port_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_input_port_count</strong>() <reference internal="True" refid="class-graphnode-method-get-input-port-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回启用了输入端口的插槽数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-input-port-position"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-input-port-position" names="class_graphnode_method_get_input_port_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_input_port_position</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-input-port-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输入端口的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-input-port-slot"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-input-port-slot" names="class_graphnode_method_get_input_port_slot"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_input_port_slot</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-input-port-slot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输入端口的对应插槽索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-input-port-type"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-input-port-type" names="class_graphnode_method_get_input_port_type"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_input_port_type</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-input-port-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输入端口的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-output-port-color"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-output-port-color" names="class_graphnode_method_get_output_port_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_output_port_color</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-output-port-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输出端口的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-output-port-count"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-output-port-count" names="class_graphnode_method_get_output_port_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_output_port_count</strong>() <reference internal="True" refid="class-graphnode-method-get-output-port-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回启用了输出端口的插槽数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-output-port-position"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-output-port-position" names="class_graphnode_method_get_output_port_position"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_output_port_position</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-output-port-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输出端口的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-output-port-slot"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-output-port-slot" names="class_graphnode_method_get_output_port_slot"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_output_port_slot</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-output-port-slot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输出端口的对应插槽索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-output-port-type"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-output-port-type" names="class_graphnode_method_get_output_port_type"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_output_port_type</strong>(port_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-get-output-port-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>port_idx</literal> 的输出端口的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-slot-color-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-slot-color-left" names="class_graphnode_method_get_slot_color_left"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_slot_color_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-get-slot-color-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>slot_index</literal> 的插槽左侧（输入）的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-slot-color-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-slot-color-right" names="class_graphnode_method_get_slot_color_right"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_slot_color_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-get-slot-color-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>slot_index</literal> 的插槽右侧（输出）的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-slot-custom-icon-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-slot-custom-icon-left" names="class_graphnode_method_get_slot_custom_icon_left"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_slot_custom_icon_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-get-slot-custom-icon-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>slot_index</literal> 的插槽的左侧（输入）的自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-slot-custom-icon-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-slot-custom-icon-right" names="class_graphnode_method_get_slot_custom_icon_right"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_slot_custom_icon_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-get-slot-custom-icon-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>slot_index</literal> 的插槽的右侧（输出）的自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-slot-type-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-slot-type-left" names="class_graphnode_method_get_slot_type_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_slot_type_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-get-slot-type-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>slot_index</literal> 的插槽左侧（输入）的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-slot-type-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-slot-type-right" names="class_graphnode_method_get_slot_type_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_slot_type_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-get-slot-type-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>slot_index</literal> 的插槽右侧（输出）的类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-get-titlebar-hbox"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-get-titlebar-hbox" names="class_graphnode_method_get_titlebar_hbox"><reference internal="True" refuri="class_hboxcontainer#class-hboxcontainer"><inline classes="std std-ref">HBoxContainer</inline></reference> <strong>get_titlebar_hbox</strong>() <reference internal="True" refid="class-graphnode-method-get-titlebar-hbox"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回标题栏所使用的 <reference internal="True" refuri="class_hboxcontainer#class-hboxcontainer"><inline classes="std std-ref">HBoxContainer</inline></reference>，默认只包含一个 <reference internal="True" refuri="class_label#class-label"><inline classes="std std-ref">Label</inline></reference>，用于显示标题。可用于向标题栏添加自定义控件，例如选项和关闭按钮等。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-is-slot-draw-stylebox"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-is-slot-draw-stylebox" names="class_graphnode_method_is_slot_draw_stylebox"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_slot_draw_stylebox</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-is-slot-draw-stylebox"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果绘制索引为 <literal>slot_index</literal> 的插槽的背景 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，则返回 true。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-is-slot-enabled-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-is-slot-enabled-left" names="class_graphnode_method_is_slot_enabled_left"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_slot_enabled_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-is-slot-enabled-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用了索引为 <literal>slot_index</literal> 的插槽的左侧（输入），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-is-slot-enabled-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-is-slot-enabled-right" names="class_graphnode_method_is_slot_enabled_right"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_slot_enabled_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphnode-method-is-slot-enabled-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果启用了索引为 <literal>slot_index</literal> 的插槽的右侧（输出），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot" names="class_graphnode_method_set_slot"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable_left_port: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, type_left: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color_left: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, enable_right_port: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, type_right: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color_right: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, custom_icon_left: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null, custom_icon_right: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> = null, draw_stylebox: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <reference internal="True" refid="class-graphnode-method-set-slot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置索引为 <literal>slot_index</literal> 的插槽的属性。</paragraph>
            <paragraph>如果 <literal>enable_left_port</literal>/<literal>enable_right_port</literal> 为 <literal>true</literal>，则将出现一个端口，插槽将能够从这一侧连接。</paragraph>
            <paragraph>使用 <literal>type_left</literal>/<literal>type_right</literal> 可以为每个端口分配一个任意类型。如果两个端口具有相同的类型，或者如果它们的类型之间的连接在父 <reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference> 中被允许（参见 <reference internal="True" refuri="class_graphedit#class-graphedit-method-add-valid-connection-type"><inline classes="std std-ref">GraphEdit.add_valid_connection_type</inline></reference>），那么这两个端口就可以被连接。请记住，<reference internal="True" refuri="class_graphedit#class-graphedit"><inline classes="std std-ref">GraphEdit</inline></reference> 在接受连接上拥有最终决定权。类型兼容性只允许发出 <reference internal="True" refuri="class_graphedit#class-graphedit-signal-connection-request"><inline classes="std std-ref">GraphEdit.connection_request</inline></reference> 信号。</paragraph>
            <paragraph>可以使用 <literal>color_left</literal>/<literal>color_right</literal> 和 <literal>custom_icon_left</literal>/<literal>custom_icon_right</literal> 进一步定制端口。颜色参数为图标添加了一个色调。自定义图标可以用来覆盖默认的端口点。</paragraph>
            <paragraph>此外，<literal>draw_stylebox</literal> 可以用来启用或禁用每个插槽的背景样式框的绘制。参见 <reference internal="True" refid="class-graphnode-theme-style-slot"><inline classes="std std-ref">slot</inline></reference>。</paragraph>
            <paragraph>单个属性也可以使用 <literal>set_slot_*</literal> 方法之一来设置。</paragraph>
            <paragraph><strong>注意：</strong>该方法只设置插槽的属性。要创建插槽本身，请将 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 派生的子节点添加到该 GraphNode。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-color-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-color-left" names="class_graphnode_method_set_slot_color_left"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_color_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-color-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>slot_index</literal> 的插槽的左侧（输入）的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 设置为 <literal>color</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-color-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-color-right" names="class_graphnode_method_set_slot_color_right"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_color_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-color-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>slot_index</literal> 的插槽的右侧（输出）的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 设置为 <literal>color</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-custom-icon-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-custom-icon-left" names="class_graphnode_method_set_slot_custom_icon_left"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_custom_icon_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-custom-icon-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>slot_index</literal> 的插槽的左侧（输入）的自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 设置为 <literal>custom_icon</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-custom-icon-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-custom-icon-right" names="class_graphnode_method_set_slot_custom_icon_right"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_custom_icon_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, custom_icon: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-custom-icon-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>slot_index</literal> 的插槽的右侧（输出）的自定义 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 设置为 <literal>custom_icon</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-draw-stylebox"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-draw-stylebox" names="class_graphnode_method_set_slot_draw_stylebox"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_draw_stylebox</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-draw-stylebox"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>开关索引为 <literal>slot_index</literal> 的插槽的背景 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-enabled-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-enabled-left" names="class_graphnode_method_set_slot_enabled_left"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_enabled_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-enabled-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>切换给定插槽 <literal>slot_index</literal> 的左侧（输入）端口。如果 <literal>enable</literal> 为 <literal>true</literal>，则左侧会出现一个端口，并且该插槽可以从这一侧连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-enabled-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-enabled-right" names="class_graphnode_method_set_slot_enabled_right"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_enabled_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-enabled-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>切换给定插槽 <literal>slot_index</literal> 的右侧（输出）端口。如果 <literal>enable</literal> 为 <literal>true</literal>，则右侧会出现一个端口，并且该插槽可以从这一侧连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-type-left"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-type-left" names="class_graphnode_method_set_slot_type_left"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_type_left</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-type-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定插槽 <literal>slot_index</literal> 的左侧（输入）类型设置为 <literal>type</literal>。如果该值为负，则所有的连接将不允许通过用户输入来创建。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-method-set-slot-type-right"></target>
            <paragraph classes="classref-method" ids="class-graphnode-method-set-slot-type-right" names="class_graphnode_method_set_slot_type_right"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_slot_type_right</strong>(slot_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphnode-method-set-slot-type-right"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定插槽 <literal>slot_index</literal> 的右侧（输出）类型设置为 <literal>type</literal>。如果该值为负，则所有的连接将不允许通过用户输入来创建。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-graphnode-theme-color-resizer-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-color-resizer-color" names="class_graphnode_theme_color_resizer_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>resizer_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal> <reference internal="True" refid="class-graphnode-theme-color-resizer-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>应用于调整尺寸大小图标的颜色调制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-constant-port-h-offset"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-constant-port-h-offset" names="class_graphnode_theme_constant_port_h_offset"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>port_h_offset</strong> = <literal>0</literal> <reference internal="True" refid="class-graphnode-theme-constant-port-h-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>端口的水平偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-constant-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-constant-separation" names="class_graphnode_theme_constant_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>separation</strong> = <literal>2</literal> <reference internal="True" refid="class-graphnode-theme-constant-separation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>端口之间的垂直距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-icon-port"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-icon-port" names="class_graphnode_theme_icon_port"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>port</strong> <reference internal="True" refid="class-graphnode-theme-icon-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>该图标用于表示端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-style-panel"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-style-panel" names="class_graphnode_theme_style_panel"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>panel</strong> <reference internal="True" refid="class-graphnode-theme-style-panel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>GraphNode</strong> 槽区域的默认背景。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-style-panel-selected"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-style-panel-selected" names="class_graphnode_theme_style_panel_selected"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>panel_selected</strong> <reference internal="True" refid="class-graphnode-theme-style-panel-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于被选中时的插槽区域的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-style-slot"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-style-slot" names="class_graphnode_theme_style_slot"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>slot</strong> <reference internal="True" refid="class-graphnode-theme-style-slot"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于 <strong>GraphNode</strong> 的每个插槽的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-style-titlebar"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-style-titlebar" names="class_graphnode_theme_style_titlebar"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>titlebar</strong> <reference internal="True" refid="class-graphnode-theme-style-titlebar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于该 <strong>GraphNode</strong> 标题栏的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphnode-theme-style-titlebar-selected"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphnode-theme-style-titlebar-selected" names="class_graphnode_theme_style_titlebar_selected"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>titlebar_selected</strong> <reference internal="True" refid="class-graphnode-theme-style-titlebar-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <strong>GraphNode</strong> 被选中时，用于其标题栏的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
