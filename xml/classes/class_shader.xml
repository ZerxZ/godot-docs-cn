<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_shader.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Shader.xml.</comment>
    <target refid="class-shader"></target>
    <section ids="shader class-shader" names="shader class_shader">
        <title>Shader</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_visualshader#class-visualshader"><inline classes="std std-ref">VisualShader</inline></reference></paragraph>
        <paragraph>用 Godot 着色语言实现的着色器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用 Godot 着色语言实现的自定义着色器程序，使用 <literal>.gdshader</literal> 扩展名保存。</paragraph>
            <paragraph>这个类由 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference> 使用，能够让你编写渲染可视项目或更新粒子信息时的自定义行为。详细解释和用法请参考下列教程链接。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/shaders/index"><inline classes="doc">着色器文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="41"></colspec>
                    <colspec colwidth="8"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shader-property-code"><inline classes="std std-ref">code</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="219"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shader-method-get-default-texture-parameter"><inline classes="std std-ref">get_default_texture_parameter</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shader-method-get-mode"><inline classes="std std-ref">get_mode</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shader-method-get-shader-uniform-list"><inline classes="std std-ref">get_shader_uniform_list</inline></reference>(get_groups: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shader-method-set-default-texture-parameter"><inline classes="std std-ref">set_default_texture_parameter</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-shader-mode"></target>
            <paragraph classes="classref-enumeration" ids="enum-shader-mode" names="enum_shader_mode">enum <strong>Mode</strong>: <reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-shader-constant-mode-spatial"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-shader-constant-mode-spatial" names="class_shader_constant_mode_spatial"><reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_SPATIAL</strong> = <literal>0</literal></paragraph>
            <paragraph>用于绘制所有 3D 对象的模式。</paragraph>
            <target refid="class-shader-constant-mode-canvas-item"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-shader-constant-mode-canvas-item" names="class_shader_constant_mode_canvas_item"><reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_CANVAS_ITEM</strong> = <literal>1</literal></paragraph>
            <paragraph>用于绘制所有 2D 对象的模式。</paragraph>
            <target refid="class-shader-constant-mode-particles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-shader-constant-mode-particles" names="class_shader_constant_mode_particles"><reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_PARTICLES</strong> = <literal>2</literal></paragraph>
            <paragraph>用于基于每个粒子计算粒子信息的模式。不用于绘图。</paragraph>
            <target refid="class-shader-constant-mode-sky"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-shader-constant-mode-sky" names="class_shader_constant_mode_sky"><reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_SKY</strong> = <literal>3</literal></paragraph>
            <paragraph>用于绘制天空的模式。仅适用于附加到 <reference internal="True" refuri="class_sky#class-sky"><inline classes="std std-ref">Sky</inline></reference> 对象的着色器。</paragraph>
            <target refid="class-shader-constant-mode-fog"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-shader-constant-mode-fog" names="class_shader_constant_mode_fog"><reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>MODE_FOG</strong> = <literal>4</literal></paragraph>
            <paragraph>用于设置体积雾效果的颜色和密度的模式。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-shader-property-code"></target>
            <paragraph classes="classref-property" ids="class-shader-property-code" names="class_shader_property_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>code</strong> = <literal>""</literal> <reference internal="True" refid="class-shader-property-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_code</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_code</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>返回用户编写的着色器代码，而不是内部使用的完整生成代码。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-shader-method-get-default-texture-parameter"></target>
            <paragraph classes="classref-method" ids="class-shader-method-get-default-texture-parameter" names="class_shader_method_get_default_texture_parameter"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_default_texture_parameter</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-shader-method-get-default-texture-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回被设置为指定参数的默认值的纹理。</paragraph>
            <paragraph><strong>注意：</strong><literal>name</literal> 必须与代码中的 uniform 名称完全匹配。</paragraph>
            <paragraph><strong>注意：</strong>如果使用采样器数组，则使用 <literal>index</literal> 访问指定的纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shader-method-get-mode"></target>
            <paragraph classes="classref-method" ids="class-shader-method-get-mode" names="class_shader_method_get_mode"><reference internal="True" refid="enum-shader-mode"><inline classes="std std-ref">Mode</inline></reference> <strong>get_mode</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-shader-method-get-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回着色器的着色器模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shader-method-get-shader-uniform-list"></target>
            <paragraph classes="classref-method" ids="class-shader-method-get-shader-uniform-list" names="class_shader_method_get_shader_uniform_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_shader_uniform_list</strong>(get_groups: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-shader-method-get-shader-uniform-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取可以赋值给 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference> 的着色器 uniform 列表，可用于 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial-method-set-shader-parameter"><inline classes="std std-ref">ShaderMaterial.set_shader_parameter</inline></reference> 和 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial-method-get-shader-parameter"><inline classes="std std-ref">ShaderMaterial.get_shader_parameter</inline></reference>。返回的参数包含在字典内，与 <reference internal="True" refuri="class_object#class-object-method-get-property-list"><inline classes="std std-ref">Object.get_property_list</inline></reference> 返回的格式类似。</paragraph>
            <paragraph>如果参数 <literal>get_groups</literal> 为 true，则会提供参数分组提示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shader-method-set-default-texture-parameter"></target>
            <paragraph classes="classref-method" ids="class-shader-method-set-default-texture-parameter" names="class_shader_method_set_default_texture_parameter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_texture_parameter</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-shader-method-set-default-texture-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置要与纹理 uniform 一起使用的默认纹理。如果未在 <reference internal="True" refuri="class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference> 中设置纹理，则使用该默认值。</paragraph>
            <paragraph><strong>注意：</strong><literal>name</literal> 必须与代码中的 uniform 名称完全匹配。</paragraph>
            <paragraph><strong>注意：</strong>如果使用采样器数组，则使用 <literal>index</literal> 访问指定的纹理。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
