<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_tree.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Tree.xml.</comment>
    <target refid="class-tree"></target>
    <section ids="tree class-tree" names="tree class_tree">
        <title>Tree</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于以层级结构显示一组内部 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 的控件。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于以层级结构显示一组内部 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 的控件。树项目可以选择、展开、折叠。该树可以有多列的自定义控件，如 <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference>、按钮和弹出窗口。对于结构化显示和互动很有用。</paragraph>
            <paragraph>树通过代码建立，使用 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 对象来构建结构。根项目只有一个，但可以使用 <reference internal="True" refid="class-tree-property-hide-root"><inline classes="std std-ref">hide_root</inline></reference> 来模拟多个根项目。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var tree = Tree.new()
    var root = tree.create_item()
    tree.hide_root = true
    var child1 = tree.create_item(root)
    var child2 = tree.create_item(root)
    var subchild1 = tree.create_item(child1)
    subchild1.set_text(0, "Subchild1")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    var tree = new Tree();
    TreeItem root = tree.CreateItem();
    tree.HideRoot = true;
    TreeItem child1 = tree.CreateItem(root);
    TreeItem child2 = tree.CreateItem(root);
    TreeItem subchild1 = tree.CreateItem(child1);
    subchild1.SetText(0, "Subchild1");
}</literal_block>
                </div>
            </container>
            <paragraph>要遍历 <strong>Tree</strong> 对象中的所有 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 对象，请在通过 <reference internal="True" refid="class-tree-method-get-root"><inline classes="std std-ref">get_root</inline></reference> 获得根项目之后，使用 <reference internal="True" refuri="class_treeitem#class-treeitem-method-get-next"><inline classes="std std-ref">TreeItem.get_next</inline></reference> 和 <reference internal="True" refuri="class_treeitem#class-treeitem-method-get-children"><inline classes="std std-ref">TreeItem.get_children</inline></reference> 方法。你可以对 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 使用 <reference internal="True" refuri="class_object#class-object-method-free"><inline classes="std std-ref">Object.free</inline></reference> 来把它从 <strong>Tree</strong> 中移除。</paragraph>
            <paragraph><strong>增量搜索：</strong>与 <reference internal="True" refuri="class_itemlist#class-itemlist"><inline classes="std std-ref">ItemList</inline></reference> 和 <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 类似，<strong>Tree</strong> 也支持在聚焦控件时在列表中进行搜索。按下与某个条目名称首字母一致的按键，就会选中以该字母开头的第一个条目。在此之后，进行增量搜索的办法有两种：1）在超时前再次按下同一个按键，选中以该字母开头的下一个条目。2）在超时前按下剩余字母对应的按键，直接匹配并选中所需的条目。这两个动作都会在最后一次按键超时后重置回列表顶端。你可以通过 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-gui-timers-incremental-search-max-interval-msec"><inline classes="std std-ref">ProjectSettings.gui/timers/incremental_search_max_interval_msec</inline></reference> 修改超时时长。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="42"></colspec>
                    <colspec colwidth="81"></colspec>
                    <colspec colwidth="75"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-allow-reselect"><inline classes="std std-ref">allow_reselect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-allow-rmb-select"><inline classes="std std-ref">allow_rmb_select</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-allow-search"><inline classes="std std-ref">allow_search</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>clip_contents</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-clip-contents"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-column-titles-visible"><inline classes="std std-ref">column_titles_visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-columns"><inline classes="std std-ref">columns</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-drop-mode-flags"><inline classes="std std-ref">drop_mode_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-enable-recursive-folding"><inline classes="std std-ref">enable_recursive_folding</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>focus_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-focus-mode"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-hide-folding"><inline classes="std std-ref">hide_folding</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-hide-root"><inline classes="std std-ref">hide_root</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-scroll-horizontal-enabled"><inline classes="std std-ref">scroll_horizontal_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-scroll-vertical-enabled"><inline classes="std std-ref">scroll_vertical_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-property-select-mode"><inline classes="std std-ref">select_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="205"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-create-item"><inline classes="std std-ref">create_item</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> parent=null, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index=-1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-deselect-all"><inline classes="std std-ref">deselect_all</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-edit-selected"><inline classes="std std-ref">edit_selected</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> force_edit=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-ensure-cursor-is-visible"><inline classes="std std-ref">ensure_cursor_is_visible</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-button-id-at-position"><inline classes="std std-ref">get_button_id_at_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-column-at-position"><inline classes="std std-ref">get_column_at_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-column-expand-ratio"><inline classes="std std-ref">get_column_expand_ratio</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-column-title"><inline classes="std std-ref">get_column_title</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-column-title-alignment"><inline classes="std std-ref">get_column_title_alignment</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-column-title-direction"><inline classes="std std-ref">get_column_title_direction</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-column-title-language"><inline classes="std std-ref">get_column_title_language</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-column-width"><inline classes="std std-ref">get_column_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-custom-popup-rect"><inline classes="std std-ref">get_custom_popup_rect</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-drop-section-at-position"><inline classes="std std-ref">get_drop_section_at_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-edited"><inline classes="std std-ref">get_edited</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-edited-column"><inline classes="std std-ref">get_edited_column</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-item-area-rect"><inline classes="std std-ref">get_item_area_rect</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> button_index=-1 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-item-at-position"><inline classes="std std-ref">get_item_at_position</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-next-selected"><inline classes="std std-ref">get_next_selected</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-pressed-button"><inline classes="std std-ref">get_pressed_button</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-root"><inline classes="std std-ref">get_root</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-scroll"><inline classes="std std-ref">get_scroll</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-selected"><inline classes="std std-ref">get_selected</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-get-selected-column"><inline classes="std std-ref">get_selected_column</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-is-column-clipping-content"><inline classes="std std-ref">is_column_clipping_content</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-is-column-expanding"><inline classes="std std-ref">is_column_expanding</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-scroll-to-item"><inline classes="std std-ref">scroll_to_item</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> center_on_item=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-clip-content"><inline classes="std std-ref">set_column_clip_content</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-custom-minimum-width"><inline classes="std std-ref">set_column_custom_minimum_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> min_width <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-expand"><inline classes="std std-ref">set_column_expand</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> expand <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-expand-ratio"><inline classes="std std-ref">set_column_expand_ratio</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> ratio <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-title"><inline classes="std std-ref">set_column_title</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> title <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-title-alignment"><inline classes="std std-ref">set_column_title_alignment</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> title_alignment <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-title-direction"><inline classes="std std-ref">set_column_title_direction</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> direction <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-column-title-language"><inline classes="std std-ref">set_column_title_language</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-method-set-selected"><inline classes="std std-ref">set_selected</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="90"></colspec>
                    <colspec colwidth="35"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-children-hl-line-color"><inline classes="std std-ref">children_hl_line_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.27, 0.27, 0.27, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-custom-button-font-highlight"><inline classes="std std-ref">custom_button_font_highlight</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.95, 0.95, 0.95, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-drop-position-color"><inline classes="std std-ref">drop_position_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-font-color"><inline classes="std std-ref">font_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.7, 0.7, 0.7, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-font-outline-color"><inline classes="std std-ref">font_outline_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-font-selected-color"><inline classes="std std-ref">font_selected_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-guide-color"><inline classes="std std-ref">guide_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.7, 0.7, 0.7, 0.25)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-parent-hl-line-color"><inline classes="std std-ref">parent_hl_line_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.27, 0.27, 0.27, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-relationship-line-color"><inline classes="std std-ref">relationship_line_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.27, 0.27, 0.27, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-color-title-button-color"><inline classes="std std-ref">title_button_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-button-margin"><inline classes="std std-ref">button_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-children-hl-line-width"><inline classes="std std-ref">children_hl_line_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-draw-guides"><inline classes="std std-ref">draw_guides</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-draw-relationship-lines"><inline classes="std std-ref">draw_relationship_lines</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-h-separation"><inline classes="std std-ref">h_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-icon-max-width"><inline classes="std std-ref">icon_max_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-inner-item-margin-bottom"><inline classes="std std-ref">inner_item_margin_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-inner-item-margin-left"><inline classes="std std-ref">inner_item_margin_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-inner-item-margin-right"><inline classes="std std-ref">inner_item_margin_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-inner-item-margin-top"><inline classes="std std-ref">inner_item_margin_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-item-margin"><inline classes="std std-ref">item_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>16</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-parent-hl-line-margin"><inline classes="std std-ref">parent_hl_line_margin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-parent-hl-line-width"><inline classes="std std-ref">parent_hl_line_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-relationship-line-width"><inline classes="std std-ref">relationship_line_width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scroll-border"><inline classes="std std-ref">scroll_border</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scroll-speed"><inline classes="std std-ref">scroll_speed</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>12</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scrollbar-h-separation"><inline classes="std std-ref">scrollbar_h_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scrollbar-margin-bottom"><inline classes="std std-ref">scrollbar_margin_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scrollbar-margin-left"><inline classes="std std-ref">scrollbar_margin_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scrollbar-margin-right"><inline classes="std std-ref">scrollbar_margin_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scrollbar-margin-top"><inline classes="std std-ref">scrollbar_margin_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-scrollbar-v-separation"><inline classes="std std-ref">scrollbar_v_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-constant-v-separation"><inline classes="std std-ref">v_separation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-font-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-font-title-button-font"><inline classes="std std-ref">title_button_font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-font-size-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-font-size-title-button-font-size"><inline classes="std std-ref">title_button_font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-arrow"><inline classes="std std-ref">arrow</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-arrow-collapsed"><inline classes="std std-ref">arrow_collapsed</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-arrow-collapsed-mirrored"><inline classes="std std-ref">arrow_collapsed_mirrored</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-checked"><inline classes="std std-ref">checked</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-indeterminate"><inline classes="std std-ref">indeterminate</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-select-arrow"><inline classes="std std-ref">select_arrow</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-unchecked"><inline classes="std std-ref">unchecked</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-icon-updown"><inline classes="std std-ref">updown</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-button-pressed"><inline classes="std std-ref">button_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-cursor"><inline classes="std std-ref">cursor</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-cursor-unfocused"><inline classes="std std-ref">cursor_unfocused</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-custom-button"><inline classes="std std-ref">custom_button</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-custom-button-hover"><inline classes="std std-ref">custom_button_hover</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-custom-button-pressed"><inline classes="std std-ref">custom_button_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-focus"><inline classes="std std-ref">focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-panel"><inline classes="std std-ref">panel</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-selected"><inline classes="std std-ref">selected</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-selected-focus"><inline classes="std std-ref">selected_focus</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-title-button-hover"><inline classes="std std-ref">title_button_hover</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-title-button-normal"><inline classes="std std-ref">title_button_normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tree-theme-style-title-button-pressed"><inline classes="std std-ref">title_button_pressed</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-tree-signal-button-clicked"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-button-clicked" names="class_tree_signal_button_clicked"><strong>button_clicked</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mouse_button_index <strong>)</strong></paragraph>
            <paragraph>按下树中的某个按钮时发出（见 <reference internal="True" refuri="class_treeitem#class-treeitem-method-add-button"><inline classes="std std-ref">TreeItem.add_button</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-cell-selected"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-cell-selected" names="class_tree_signal_cell_selected"><strong>cell_selected</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>选中某个单元格时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-check-propagated-to-item"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-check-propagated-to-item" names="class_tree_signal_check_propagated_to_item"><strong>check_propagated_to_item</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong></paragraph>
            <paragraph>调用 <reference internal="True" refuri="class_treeitem#class-treeitem-method-propagate-check"><inline classes="std std-ref">TreeItem.propagate_check</inline></reference> 时发出。连接到该信号可以处理在 <reference internal="True" refuri="class_treeitem#class-treeitem-method-propagate-check"><inline classes="std std-ref">TreeItem.propagate_check</inline></reference> 被调用时受影响的项。受影响项的处理顺序如下：调用该方法的项，该项的子项，最后是该项的父项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-column-title-clicked"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-column-title-clicked" names="class_tree_signal_column_title_clicked"><strong>column_title_clicked</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mouse_button_index <strong>)</strong></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-mouse-button-left"><inline classes="std std-ref">@GlobalScope.MOUSE_BUTTON_LEFT</inline></reference> 使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-mouse-button-right"><inline classes="std std-ref">@GlobalScope.MOUSE_BUTTON_RIGHT</inline></reference> 点击某一列的标题时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-custom-item-clicked"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-custom-item-clicked" names="class_tree_signal_custom_item_clicked"><strong>custom_item_clicked</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mouse_button_index <strong>)</strong></paragraph>
            <paragraph>使用鼠标按钮点击某一 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-custom"><inline classes="std std-ref">TreeItem.CELL_MODE_CUSTOM</inline></reference> 项时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-custom-popup-edited"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-custom-popup-edited" names="class_tree_signal_custom_popup_edited"><strong>custom_popup_edited</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> arrow_clicked <strong>)</strong></paragraph>
            <paragraph>点击某一 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-custom"><inline classes="std std-ref">TreeItem.CELL_MODE_CUSTOM</inline></reference> 项进行编辑时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-empty-clicked"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-empty-clicked" names="class_tree_signal_empty_clicked"><strong>empty_clicked</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mouse_button_index <strong>)</strong></paragraph>
            <paragraph>使用鼠标按钮点击该树中的空白区域时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-item-activated"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-item-activated" names="class_tree_signal_item_activated"><strong>item_activated</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>双击某一项，或使用 <literal>ui_accept</literal> 输入事件（例如键盘的<literal classes="kbd">回车</literal>或<literal classes="kbd">空格</literal>键）选中某一项时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-item-collapsed"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-item-collapsed" names="class_tree_signal_item_collapsed"><strong>item_collapsed</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item <strong>)</strong></paragraph>
            <paragraph>点击折叠箭头折叠某一项时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-item-edited"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-item-edited" names="class_tree_signal_item_edited"><strong>item_edited</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>编辑某一项时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-item-icon-double-clicked"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-item-icon-double-clicked" names="class_tree_signal_item_icon_double_clicked"><strong>item_icon_double_clicked</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>双击某一项的图标时发出。双击该项的任意区域所发出的信号见 <reference internal="True" refid="class-tree-signal-item-activated"><inline classes="std std-ref">item_activated</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-item-mouse-selected"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-item-mouse-selected" names="class_tree_signal_item_mouse_selected"><strong>item_mouse_selected</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mouse_button_index <strong>)</strong></paragraph>
            <paragraph>使用鼠标按钮选中某一项时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-item-selected"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-item-selected" names="class_tree_signal_item_selected"><strong>item_selected</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>选中某一项时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-multi-selected"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-multi-selected" names="class_tree_signal_multi_selected"><strong>multi_selected</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> selected <strong>)</strong></paragraph>
            <paragraph>如果 <reference internal="True" refid="class-tree-property-select-mode"><inline classes="std std-ref">select_mode</inline></reference> 被设置为 <reference internal="True" refid="class-tree-constant-select-multi"><inline classes="std std-ref">SELECT_MULTI</inline></reference>，则代替 <reference internal="True" refid="class-tree-signal-item-selected"><inline classes="std std-ref">item_selected</inline></reference> 发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-signal-nothing-selected"></target>
            <paragraph classes="classref-signal" ids="class-tree-signal-nothing-selected" names="class_tree_signal_nothing_selected"><strong>nothing_selected</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>鼠标左键未选中任一项时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-tree-selectmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-tree-selectmode" names="enum_tree_selectmode">enum <strong>SelectMode</strong>:</paragraph>
            <target refid="class-tree-constant-select-single"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tree-constant-select-single" names="class_tree_constant_select_single"><reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>SELECT_SINGLE</strong> = <literal>0</literal></paragraph>
            <paragraph>允许一次选择一个单元格。从项的角度看，只允许选择一个项。而且在所选项中只有一列被选中。</paragraph>
            <paragraph>在这种模式下，焦点光标总被隐藏，被定位在当前的选择处，使当前的选择项成为当前的焦点项。</paragraph>
            <target refid="class-tree-constant-select-row"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tree-constant-select-row" names="class_tree_constant_select_row"><reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>SELECT_ROW</strong> = <literal>1</literal></paragraph>
            <paragraph>允许一次选择单行。从项的角度看，只允许选择单个项。而所有的列都被选择在所选项中。</paragraph>
            <paragraph>在这种模式下，焦点光标总被隐藏，被定位在当前选择的第一列，使当前选择项成为当前焦点项。</paragraph>
            <target refid="class-tree-constant-select-multi"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tree-constant-select-multi" names="class_tree_constant_select_multi"><reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>SELECT_MULTI</strong> = <literal>2</literal></paragraph>
            <paragraph>允许同时选择多个单元格。从项的角度看，允许选择多个项。而且每个被选中的项中可以有多个列被选中。</paragraph>
            <paragraph>在这种模式下，焦点光标可见，光标下的项或列不一定被选中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-tree-dropmodeflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-tree-dropmodeflags" names="enum_tree_dropmodeflags">enum <strong>DropModeFlags</strong>:</paragraph>
            <target refid="class-tree-constant-drop-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tree-constant-drop-mode-disabled" names="class_tree_constant_drop_mode_disabled"><reference internal="True" refid="enum-tree-dropmodeflags"><inline classes="std std-ref">DropModeFlags</inline></reference> <strong>DROP_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用所有放置部分，但仍然允许通过 <reference internal="True" refid="class-tree-method-get-drop-section-at-position"><inline classes="std std-ref">get_drop_section_at_position</inline></reference> 检测“项目上”的放置部分。</paragraph>
            <paragraph><strong>注意：</strong>这是默认的标志，当与其他标志结合时，它没有效果。</paragraph>
            <target refid="class-tree-constant-drop-mode-on-item"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tree-constant-drop-mode-on-item" names="class_tree_constant_drop_mode_on_item"><reference internal="True" refid="enum-tree-dropmodeflags"><inline classes="std std-ref">DropModeFlags</inline></reference> <strong>DROP_MODE_ON_ITEM</strong> = <literal>1</literal></paragraph>
            <paragraph>启用“项目上”的放置部分。这个放置部分覆盖整个项。</paragraph>
            <paragraph>当与 <reference internal="True" refid="class-tree-constant-drop-mode-inbetween"><inline classes="std std-ref">DROP_MODE_INBETWEEN</inline></reference> 结合使用时，这个放置部分的高度减半，并保持垂直居中。</paragraph>
            <target refid="class-tree-constant-drop-mode-inbetween"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-tree-constant-drop-mode-inbetween" names="class_tree_constant_drop_mode_inbetween"><reference internal="True" refid="enum-tree-dropmodeflags"><inline classes="std std-ref">DropModeFlags</inline></reference> <strong>DROP_MODE_INBETWEEN</strong> = <literal>2</literal></paragraph>
            <paragraph>启用“项目上方”和“项目下方”的放置部分。“项目上方”的放置部分覆盖项目的上半部分，“项目下方”的放置部分覆盖下半部分。</paragraph>
            <paragraph>当与 <reference internal="True" refid="class-tree-constant-drop-mode-on-item"><inline classes="std std-ref">DROP_MODE_ON_ITEM</inline></reference> 结合时，这些放置部分的高度减半，并相应地停留在顶部或底部。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-tree-property-allow-reselect"></target>
            <paragraph classes="classref-property" ids="class-tree-property-allow-reselect" names="class_tree_property_allow_reselect"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_reselect</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_allow_reselect</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_allow_reselect</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，可以再次选择当前选定的单元。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-allow-rmb-select"></target>
            <paragraph classes="classref-property" ids="class-tree-property-allow-rmb-select" names="class_tree_property_allow_rmb_select"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_rmb_select</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_allow_rmb_select</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_allow_rmb_select</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，鼠标右键点击可以选择项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-allow-search"></target>
            <paragraph classes="classref-property" ids="class-tree-property-allow-search" names="class_tree_property_allow_search"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_search</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_allow_search</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_allow_search</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，允许在 <strong>Tree</strong> 中以增量搜索的形式使用字母键导航。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-column-titles-visible"></target>
            <paragraph classes="classref-property" ids="class-tree-property-column-titles-visible" names="class_tree_property_column_titles_visible"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>column_titles_visible</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_column_titles_visible</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>are_column_titles_visible</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，列标题可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-columns"></target>
            <paragraph classes="classref-property" ids="class-tree-property-columns" names="class_tree_property_columns"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>columns</strong> = <literal>1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_columns</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_columns</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>列数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-drop-mode-flags"></target>
            <paragraph classes="classref-property" ids="class-tree-property-drop-mode-flags" names="class_tree_property_drop_mode_flags"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>drop_mode_flags</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_drop_mode_flags</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_drop_mode_flags</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>放置模式是标志的按位或（OR）组合。见 <reference internal="True" refid="enum-tree-dropmodeflags"><inline classes="std std-ref">DropModeFlags</inline></reference> 常量。放置完成后会恢复为 <reference internal="True" refid="class-tree-constant-drop-mode-disabled"><inline classes="std std-ref">DROP_MODE_DISABLED</inline></reference>。建议在 <reference internal="True" refuri="class_control#class-control-private-method-can-drop-data"><inline classes="std std-ref">Control._can_drop_data</inline></reference> 期间设置。</paragraph>
            <paragraph>控制的是放置区，即根据鼠标的位置决定并绘制可能的放置位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-enable-recursive-folding"></target>
            <paragraph classes="classref-property" ids="class-tree-property-enable-recursive-folding" names="class_tree_property_enable_recursive_folding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enable_recursive_folding</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_enable_recursive_folding</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_recursive_folding_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 <strong>Tree</strong> 启用了递归折叠。按住 Shift 键点击折叠箭头会折叠或展开该 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 及所有子项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-hide-folding"></target>
            <paragraph classes="classref-property" ids="class-tree-property-hide-folding" names="class_tree_property_hide_folding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>hide_folding</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_hide_folding</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_folding_hidden</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，隐藏折叠箭头。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-hide-root"></target>
            <paragraph classes="classref-property" ids="class-tree-property-hide-root" names="class_tree_property_hide_root"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>hide_root</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_hide_root</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_root_hidden</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则隐藏树的根节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-scroll-horizontal-enabled"></target>
            <paragraph classes="classref-property" ids="class-tree-property-scroll-horizontal-enabled" names="class_tree_property_scroll_horizontal_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_horizontal_enabled</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_h_scroll_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_h_scroll_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，启用水平滚动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-scroll-vertical-enabled"></target>
            <paragraph classes="classref-property" ids="class-tree-property-scroll-vertical-enabled" names="class_tree_property_scroll_vertical_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_vertical_enabled</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_v_scroll_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_v_scroll_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用垂直滚动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-property-select-mode"></target>
            <paragraph classes="classref-property" ids="class-tree-property-select-mode" names="class_tree_property_select_mode"><reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>select_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_select_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> <strong>get_select_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>允许单选或多选。见 <reference internal="True" refid="enum-tree-selectmode"><inline classes="std std-ref">SelectMode</inline></reference> 常量。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-tree-method-clear"></target>
            <paragraph classes="classref-method" ids="class-tree-method-clear" names="class_tree_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除树。这将删除所有项目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-create-item"></target>
            <paragraph classes="classref-method" ids="class-tree-method-create-item" names="class_tree_method_create_item"><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>create_item</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> parent=null, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index=-1 <strong>)</strong></paragraph>
            <paragraph>在树中创建一个项，并将其添加为父项 <literal>parent</literal> 的子项，该父项可以是一个有效的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 或 <literal>null</literal>。</paragraph>
            <paragraph>如果 <literal>parent</literal> 为 <literal>null</literal>，则根项将是父项；或者如果该树为空，则该新项将是根本身。</paragraph>
            <paragraph>新项将是父项的第 <literal>index</literal> 个子项，如果没有足够的同级项，它将是最后一个子项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-deselect-all"></target>
            <paragraph classes="classref-method" ids="class-tree-method-deselect-all" names="class_tree_method_deselect_all">void <strong>deselect_all</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>取消选中树中的所有项目（行和列）。在 <reference internal="True" refid="class-tree-constant-select-multi"><inline classes="std std-ref">SELECT_MULTI</inline></reference> 模式中还会移除选择光标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-edit-selected"></target>
            <paragraph classes="classref-method" ids="class-tree-method-edit-selected" names="class_tree_method_edit_selected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>edit_selected</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> force_edit=false <strong>)</strong></paragraph>
            <paragraph>编辑选中的树项，就像它被点击一样。</paragraph>
            <paragraph>该项必须通过 <reference internal="True" refuri="class_treeitem#class-treeitem-method-set-editable"><inline classes="std std-ref">TreeItem.set_editable</inline></reference> 设置为可编辑，否则 <literal>force_edit</literal> 必须为 <literal>true</literal>。</paragraph>
            <paragraph>如果该项可被编辑，则返回 <literal>true</literal>。如果没有选中任何项则失败。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-ensure-cursor-is-visible"></target>
            <paragraph classes="classref-method" ids="class-tree-method-ensure-cursor-is-visible" names="class_tree_method_ensure_cursor_is_visible">void <strong>ensure_cursor_is_visible</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>使当前获得焦点的单元可见。</paragraph>
            <paragraph>如果有必要，将滚动树。在 <reference internal="True" refid="class-tree-constant-select-row"><inline classes="std std-ref">SELECT_ROW</inline></reference> 模式下，不会做水平滚动，因为所选行中的所有单元都按逻辑获得焦点。</paragraph>
            <paragraph><strong>注意：</strong>尽管这个方法的名称是这样的，但焦点光标本身只在 <reference internal="True" refid="class-tree-constant-select-multi"><inline classes="std std-ref">SELECT_MULTI</inline></reference> 模式下可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-button-id-at-position"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-button-id-at-position" names="class_tree_method_get_button_id_at_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_button_id_at_position</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回位于 <literal>position</literal> 的按钮 ID，如果没有按钮则返回 -1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-column-at-position"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-column-at-position" names="class_tree_method_get_column_at_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_column_at_position</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回位于 <literal>position</literal> 的列索引，如果没有项目则返回 -1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-column-expand-ratio"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-column-expand-ratio" names="class_tree_method_get_column_expand_ratio"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_column_expand_ratio</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回分配给该列的扩展比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-column-title"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-column-title" names="class_tree_method_get_column_title"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_column_title</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该列的标题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-column-title-alignment"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-column-title-alignment" names="class_tree_method_get_column_title_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_column_title_alignment</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该列的标题对齐方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-column-title-direction"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-column-title-direction" names="class_tree_method_get_column_title_direction"><reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> <strong>get_column_title_direction</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回列标题的基础书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-column-title-language"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-column-title-language" names="class_tree_method_get_column_title_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_column_title_language</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回列标题的语言代码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-column-width"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-column-width" names="class_tree_method_get_column_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_column_width</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回列的宽度，单位是像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-custom-popup-rect"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-custom-popup-rect" names="class_tree_method_get_custom_popup_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_custom_popup_rect</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回自定义弹出窗口的矩形。帮助创建显示弹出式的自定义单元格控件。见 <reference internal="True" refuri="class_treeitem#class-treeitem-method-set-cell-mode"><inline classes="std std-ref">TreeItem.set_cell_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-drop-section-at-position"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-drop-section-at-position" names="class_tree_method_get_drop_section_at_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_drop_section_at_position</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回位于 <literal>position</literal> 的放置部分，如果没有项目，则返回 -100。</paragraph>
            <paragraph>在“项目上方”“项目之上”和“项目下方”的放置部分将分别返回 -1、0 或 1 的值。请参阅 <reference internal="True" refid="enum-tree-dropmodeflags"><inline classes="std std-ref">DropModeFlags</inline></reference> 以了解每个放置部分的描述。</paragraph>
            <paragraph>要获得返回的放置部分相对项，请使用 <reference internal="True" refid="class-tree-method-get-item-at-position"><inline classes="std std-ref">get_item_at_position</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-edited"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-edited" names="class_tree_method_get_edited"><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_edited</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前编辑的项。可以与 <reference internal="True" refid="class-tree-signal-item-edited"><inline classes="std std-ref">item_edited</inline></reference> 一起使用以获取被修改的项。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    $Tree.item_edited.connect(on_Tree_item_edited)

func on_Tree_item_edited():
    print($Tree.get_edited()) # 该项刚刚被编辑（例如被勾选）。</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    GetNode&lt;Tree&gt;("Tree").ItemEdited += OnTreeItemEdited;
}

public void OnTreeItemEdited()
{
    GD.Print(GetNode&lt;Tree&gt;("Tree").GetEdited()); // 该项刚刚被编辑（例如被勾选）。
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-edited-column"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-edited-column" names="class_tree_method_get_edited_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_edited_column</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前编辑项的列。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-item-area-rect"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-item-area-rect" names="class_tree_method_get_item_area_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_item_area_rect</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> button_index=-1 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 的矩形区域。如果指定了<literal>column</literal>，则只获取该列的位置和大小，否则获取包含所有列的矩形。如果指定了按钮索引，则将返回该按钮的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-item-at-position"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-item-at-position" names="class_tree_method_get_item_at_position"><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_item_at_position</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定位置，即相对于树的原点位置的树中项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-next-selected"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-next-selected" names="class_tree_method_get_next_selected"><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_next_selected</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>返回给定的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 之后的下一个选中项，如果到达末尾，则返回 <literal>null</literal>。</paragraph>
            <paragraph>如果 <literal>from</literal> 为 <literal>null</literal>，则将返回第一个被选中的项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-pressed-button"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-pressed-button" names="class_tree_method_get_pressed_button"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_pressed_button</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回最后按下的按钮的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-root"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-root" names="class_tree_method_get_root"><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_root</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回树的根项，如果树是空的，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-scroll"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-scroll" names="class_tree_method_get_scroll"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scroll</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前的滚动位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-selected"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-selected" names="class_tree_method_get_selected"><reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> <strong>get_selected</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前的焦点项，如果没有焦点项，则返回 <literal>null</literal>。</paragraph>
            <paragraph>在 <reference internal="True" refid="class-tree-constant-select-row"><inline classes="std std-ref">SELECT_ROW</inline></reference> 和 <reference internal="True" refid="class-tree-constant-select-single"><inline classes="std std-ref">SELECT_SINGLE</inline></reference> 模式下，焦点项与选择项相同。在 <reference internal="True" refid="class-tree-constant-select-multi"><inline classes="std std-ref">SELECT_MULTI</inline></reference> 模式下，焦点项是焦点光标下的项目，不一定被选中。</paragraph>
            <paragraph>要获得当前选中项，请使用 <reference internal="True" refid="class-tree-method-get-next-selected"><inline classes="std std-ref">get_next_selected</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-get-selected-column"></target>
            <paragraph classes="classref-method" ids="class-tree-method-get-selected-column" names="class_tree_method_get_selected_column"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_selected_column</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前获得焦点的列，如果没有焦点列，则返回 -1。</paragraph>
            <paragraph>在 <reference internal="True" refid="class-tree-constant-select-single"><inline classes="std std-ref">SELECT_SINGLE</inline></reference> 模式下，焦点列是被选中的列。在 <reference internal="True" refid="class-tree-constant-select-row"><inline classes="std std-ref">SELECT_ROW</inline></reference> 模式下，如果有任意项被选中，焦点列总是 0。在 <reference internal="True" refid="class-tree-constant-select-multi"><inline classes="std std-ref">SELECT_MULTI</inline></reference> 模式下，焦点列是焦点光标下的列，但不一定有列被选中。</paragraph>
            <paragraph>要判断一个项的某一列是否被选中，请使用 <reference internal="True" refuri="class_treeitem#class-treeitem-method-is-selected"><inline classes="std std-ref">TreeItem.is_selected</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-is-column-clipping-content"></target>
            <paragraph classes="classref-method" ids="class-tree-method-is-column-clipping-content" names="class_tree_method_is_column_clipping_content"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_column_clipping_content</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该列启用了裁剪，则返回 <literal>true</literal>（见 <reference internal="True" refid="class-tree-method-set-column-clip-content"><inline classes="std std-ref">set_column_clip_content</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-is-column-expanding"></target>
            <paragraph classes="classref-method" ids="class-tree-method-is-column-expanding" names="class_tree_method_is_column_expanding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_column_expanding</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该列启用了扩展，则返回 <literal>true</literal>（见 <reference internal="True" refid="class-tree-method-set-column-expand"><inline classes="std std-ref">set_column_expand</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-scroll-to-item"></target>
            <paragraph classes="classref-method" ids="class-tree-method-scroll-to-item" names="class_tree_method_scroll_to_item">void <strong>scroll_to_item</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> center_on_item=false <strong>)</strong></paragraph>
            <paragraph>使 <strong>Tree</strong> 跳转到指定的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-clip-content"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-clip-content" names="class_tree_method_set_column_clip_content">void <strong>set_column_clip_content</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
            <paragraph>允许对列的内容进行裁剪，会忽略内容大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-custom-minimum-width"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-custom-minimum-width" names="class_tree_method_set_column_custom_minimum_width">void <strong>set_column_custom_minimum_width</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> min_width <strong>)</strong></paragraph>
            <paragraph>覆盖某一列的计算的最小宽度。它可以被设置为 <literal>0</literal> 以恢复默认行为。具有“扩展”标志的列将以与 <reference internal="True" refuri="class_control#class-control-property-size-flags-stretch-ratio"><inline classes="std std-ref">Control.size_flags_stretch_ratio</inline></reference> 类似的方式使用它们的最小宽度“min_width”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-expand"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-expand" names="class_tree_method_set_column_expand">void <strong>set_column_expand</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> expand <strong>)</strong></paragraph>
            <paragraph>如果为 <literal>true</literal>，该列将具有 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的“Expand”标志。具有“Expand”标志的列将以与 <reference internal="True" refuri="class_control#class-control-property-size-flags-stretch-ratio"><inline classes="std std-ref">Control.size_flags_stretch_ratio</inline></reference> 类似的方式，使用它们的扩展比率（参见 <reference internal="True" refid="class-tree-method-set-column-expand-ratio"><inline classes="std std-ref">set_column_expand_ratio</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-expand-ratio"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-expand-ratio" names="class_tree_method_set_column_expand_ratio">void <strong>set_column_expand_ratio</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> ratio <strong>)</strong></paragraph>
            <paragraph>设置列的相对扩展比。见 <reference internal="True" refid="class-tree-method-set-column-expand"><inline classes="std std-ref">set_column_expand</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-title"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-title" names="class_tree_method_set_column_title">void <strong>set_column_title</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> title <strong>)</strong></paragraph>
            <paragraph>设置某一列的标题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-title-alignment"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-title-alignment" names="class_tree_method_set_column_title_alignment">void <strong>set_column_title_alignment</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> title_alignment <strong>)</strong></paragraph>
            <paragraph>设置列标题的对齐方式。注意，列标题不支持 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-horizontal-alignment-fill"><inline classes="std std-ref">@GlobalScope.HORIZONTAL_ALIGNMENT_FILL</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-title-direction"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-title-direction" names="class_tree_method_set_column_title_direction">void <strong>set_column_title_direction</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_control#enum-control-textdirection"><inline classes="std std-ref">TextDirection</inline></reference> direction <strong>)</strong></paragraph>
            <paragraph>设置列标题的基础书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-column-title-language"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-column-title-language" names="class_tree_method_set_column_title_language">void <strong>set_column_title_language</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> language <strong>)</strong></paragraph>
            <paragraph>设置列标题的语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-method-set-selected"></target>
            <paragraph classes="classref-method" ids="class-tree-method-set-selected" names="class_tree_method_set_selected">void <strong>set_selected</strong> <strong>(</strong> <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> item, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> column <strong>)</strong></paragraph>
            <paragraph>选中指定的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 和列。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-tree-theme-color-children-hl-line-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-children-hl-line-color" names="class_tree_theme_color_children_hl_line_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>children_hl_line_color</strong> = <literal>Color(0.27, 0.27, 0.27, 1)</literal></paragraph>
            <paragraph>被选中的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 与其子项之间的关系线的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-custom-button-font-highlight"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-custom-button-font-highlight" names="class_tree_theme_color_custom_button_font_highlight"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>custom_button_font_highlight</strong> = <literal>Color(0.95, 0.95, 0.95, 1)</literal></paragraph>
            <paragraph>当 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-custom"><inline classes="std std-ref">TreeItem.CELL_MODE_CUSTOM</inline></reference> 模式的单元格被悬停时的文本 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-drop-position-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-drop-position-color" names="class_tree_theme_color_drop_position_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>drop_position_color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <paragraph>用于绘制可能的放置位置的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色。有关放置位置的描述，参阅 <reference internal="True" refid="enum-tree-dropmodeflags"><inline classes="std std-ref">DropModeFlags</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-font-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-font-color" names="class_tree_theme_color_font_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_color</strong> = <literal>Color(0.7, 0.7, 0.7, 1)</literal></paragraph>
            <paragraph>项目的默认文本颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-font-outline-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-font-outline-color" names="class_tree_theme_color_font_outline_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_outline_color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <paragraph>项目文本轮廓的色调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-font-selected-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-font-selected-color" names="class_tree_theme_color_font_selected_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>font_selected_color</strong> = <literal>Color(1, 1, 1, 1)</literal></paragraph>
            <paragraph>选择项目时使用的文本颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-guide-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-guide-color" names="class_tree_theme_color_guide_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>guide_color</strong> = <literal>Color(0.7, 0.7, 0.7, 0.25)</literal></paragraph>
            <paragraph>参考线的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-parent-hl-line-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-parent-hl-line-color" names="class_tree_theme_color_parent_hl_line_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>parent_hl_line_color</strong> = <literal>Color(0.27, 0.27, 0.27, 1)</literal></paragraph>
            <paragraph>被选中的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 与其父项之间的关系线的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-relationship-line-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-relationship-line-color" names="class_tree_theme_color_relationship_line_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>relationship_line_color</strong> = <literal>Color(0.27, 0.27, 0.27, 1)</literal></paragraph>
            <paragraph>关系线的默认 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-color-title-button-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-color-title-button-color" names="class_tree_theme_color_title_button_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>title_button_color</strong> = <literal>Color(0.875, 0.875, 0.875, 1)</literal></paragraph>
            <paragraph>标题按钮的默认文本 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-button-margin"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-button-margin" names="class_tree_theme_constant_button_margin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>button_margin</strong> = <literal>4</literal></paragraph>
            <paragraph>单元格中按钮之间的水平间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-children-hl-line-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-children-hl-line-width" names="class_tree_theme_constant_children_hl_line_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>children_hl_line_width</strong> = <literal>1</literal></paragraph>
            <paragraph>被选中的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 与其子项之间的关系线的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-draw-guides"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-draw-guides" names="class_tree_theme_constant_draw_guides"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>draw_guides</strong> = <literal>1</literal></paragraph>
            <paragraph>如果不为零就绘制参考线，行为类似于布尔值。参考线是在每个项的底部画的一条水平线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-draw-relationship-lines"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-draw-relationship-lines" names="class_tree_theme_constant_draw_relationship_lines"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>draw_relationship_lines</strong> = <literal>0</literal></paragraph>
            <paragraph>如果不为零就绘制关系线，行为类似于布尔值。关系线在子项的开始处绘制，以显示层次结构。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-h-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-h-separation" names="class_tree_theme_constant_h_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>h_separation</strong> = <literal>4</literal></paragraph>
            <paragraph>项目单元之间的水平空间。这也用作禁用折叠时项目开头的边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-icon-max-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-icon-max-width" names="class_tree_theme_constant_icon_max_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>icon_max_width</strong> = <literal>0</literal></paragraph>
            <paragraph>项目单元格所允许的最大图标宽度。这是在图标默认大小的基础上的限制，在 <reference internal="True" refuri="class_treeitem#class-treeitem-method-set-icon-max-width"><inline classes="std std-ref">TreeItem.set_icon_max_width</inline></reference> 所设置的值之前生效。高度会根据图标的长宽比调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-inner-item-margin-bottom"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-inner-item-margin-bottom" names="class_tree_theme_constant_inner_item_margin_bottom"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>inner_item_margin_bottom</strong> = <literal>0</literal></paragraph>
            <paragraph>项目的底部内边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-inner-item-margin-left"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-inner-item-margin-left" names="class_tree_theme_constant_inner_item_margin_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>inner_item_margin_left</strong> = <literal>0</literal></paragraph>
            <paragraph>项目的左侧内边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-inner-item-margin-right"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-inner-item-margin-right" names="class_tree_theme_constant_inner_item_margin_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>inner_item_margin_right</strong> = <literal>0</literal></paragraph>
            <paragraph>项目的右侧内边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-inner-item-margin-top"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-inner-item-margin-top" names="class_tree_theme_constant_inner_item_margin_top"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>inner_item_margin_top</strong> = <literal>0</literal></paragraph>
            <paragraph>项目的顶部内边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-item-margin"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-item-margin" names="class_tree_theme_constant_item_margin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>item_margin</strong> = <literal>16</literal></paragraph>
            <paragraph>项目开头的水平边距。在项目启用折叠功能时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-outline-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-outline-size" names="class_tree_theme_constant_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>0</literal></paragraph>
            <paragraph>文字轮廓的大小。</paragraph>
            <paragraph><strong>注意：</strong>如果使用启用了 <reference internal="True" refuri="class_fontfile#class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">FontFile.multichannel_signed_distance_field</inline></reference> 的字体，其 <reference internal="True" refuri="class_fontfile#class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">FontFile.msdf_pixel_range</inline></reference> 必须至少设置为 <reference internal="True" refid="class-tree-theme-constant-outline-size"><inline classes="std std-ref">outline_size</inline></reference> 的<emphasis>两倍</emphasis>，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-parent-hl-line-margin"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-parent-hl-line-margin" names="class_tree_theme_constant_parent_hl_line_margin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>parent_hl_line_margin</strong> = <literal>0</literal></paragraph>
            <paragraph>被选中的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 的父关系线，与其未选中的同级的关系线，两者之间的空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-parent-hl-line-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-parent-hl-line-width" names="class_tree_theme_constant_parent_hl_line_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>parent_hl_line_width</strong> = <literal>1</literal></paragraph>
            <paragraph>被选中的 <reference internal="True" refuri="class_treeitem#class-treeitem"><inline classes="std std-ref">TreeItem</inline></reference> 与其父项之间的关系线的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-relationship-line-width"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-relationship-line-width" names="class_tree_theme_constant_relationship_line_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>relationship_line_width</strong> = <literal>1</literal></paragraph>
            <paragraph>关系线的默认宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scroll-border"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scroll-border" names="class_tree_theme_constant_scroll_border"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scroll_border</strong> = <literal>4</literal></paragraph>
            <paragraph>拖动时，鼠标指针与控件边框之间触发边框滚动的最大距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scroll-speed"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scroll-speed" names="class_tree_theme_constant_scroll_speed"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scroll_speed</strong> = <literal>12</literal></paragraph>
            <paragraph>边框滚动的速度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scrollbar-h-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scrollbar-h-separation" names="class_tree_theme_constant_scrollbar_h_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scrollbar_h_separation</strong> = <literal>4</literal></paragraph>
            <paragraph>树中内容与滚动条的水平间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scrollbar-margin-bottom"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scrollbar-margin-bottom" names="class_tree_theme_constant_scrollbar_margin_bottom"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scrollbar_margin_bottom</strong> = <literal>-1</literal></paragraph>
            <paragraph>滚动条的底部边距。为负数时会使用 <reference internal="True" refid="class-tree-theme-style-panel"><inline classes="std std-ref">panel</inline></reference> 的底部边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scrollbar-margin-left"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scrollbar-margin-left" names="class_tree_theme_constant_scrollbar_margin_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scrollbar_margin_left</strong> = <literal>-1</literal></paragraph>
            <paragraph>水平滚动条的左侧边距。为负数时会使用 <reference internal="True" refid="class-tree-theme-style-panel"><inline classes="std std-ref">panel</inline></reference> 的左侧边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scrollbar-margin-right"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scrollbar-margin-right" names="class_tree_theme_constant_scrollbar_margin_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scrollbar_margin_right</strong> = <literal>-1</literal></paragraph>
            <paragraph>滚动条的右侧边距。为负数时会使用 <reference internal="True" refid="class-tree-theme-style-panel"><inline classes="std std-ref">panel</inline></reference> 的右侧边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scrollbar-margin-top"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scrollbar-margin-top" names="class_tree_theme_constant_scrollbar_margin_top"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scrollbar_margin_top</strong> = <literal>-1</literal></paragraph>
            <paragraph>垂直滚动条的顶部边距。为负数时会使用 <reference internal="True" refid="class-tree-theme-style-panel"><inline classes="std std-ref">panel</inline></reference> 的顶部边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-scrollbar-v-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-scrollbar-v-separation" names="class_tree_theme_constant_scrollbar_v_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>scrollbar_v_separation</strong> = <literal>4</literal></paragraph>
            <paragraph>树中内容与滚动条的垂直间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-constant-v-separation"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-constant-v-separation" names="class_tree_theme_constant_v_separation"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>v_separation</strong> = <literal>4</literal></paragraph>
            <paragraph>每个项内的垂直填充，即项内容与上或下边框之间的距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-font-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-font-font" names="class_tree_theme_font_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong></paragraph>
            <paragraph>项目文本的字体 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-font-title-button-font"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-font-title-button-font" names="class_tree_theme_font_title_button_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>title_button_font</strong></paragraph>
            <paragraph>标题按钮文本的 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> 字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-font-size-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-font-size-font-size" names="class_tree_theme_font_size_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong></paragraph>
            <paragraph>项目文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-font-size-title-button-font-size"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-font-size-title-button-font-size" names="class_tree_theme_font_size_title_button_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>title_button_font_size</strong></paragraph>
            <paragraph>标题按钮文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-arrow"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-arrow" names="class_tree_theme_icon_arrow"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>arrow</strong></paragraph>
            <paragraph>箭头图标，可折叠项未折叠时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-arrow-collapsed"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-arrow-collapsed" names="class_tree_theme_icon_arrow_collapsed"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>arrow_collapsed</strong></paragraph>
            <paragraph>箭头图标，可折叠项已折叠时使用（用于从左至右布局）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-arrow-collapsed-mirrored"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-arrow-collapsed-mirrored" names="class_tree_theme_icon_arrow_collapsed_mirrored"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>arrow_collapsed_mirrored</strong></paragraph>
            <paragraph>箭头图标，可折叠项已折叠时使用（用于从右至左布局）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-checked"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-checked" names="class_tree_theme_icon_checked"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>checked</strong></paragraph>
            <paragraph>复选图标，模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-check"><inline classes="std std-ref">TreeItem.CELL_MODE_CHECK</inline></reference> 的单元格处于勾选状态时显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-indeterminate"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-indeterminate" names="class_tree_theme_icon_indeterminate"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>indeterminate</strong></paragraph>
            <paragraph>复选图标，模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-check"><inline classes="std std-ref">TreeItem.CELL_MODE_CHECK</inline></reference> 的单元格处于中间状态时显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-select-arrow"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-select-arrow" names="class_tree_theme_icon_select_arrow"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>select_arrow</strong></paragraph>
            <paragraph>箭头图标，模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">TreeItem.CELL_MODE_RANGE</inline></reference> 的单元格显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-unchecked"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-unchecked" names="class_tree_theme_icon_unchecked"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>unchecked</strong></paragraph>
            <paragraph>复选图标，模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-check"><inline classes="std std-ref">TreeItem.CELL_MODE_CHECK</inline></reference> 的单元格处于未选状态时显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-icon-updown"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-icon-updown" names="class_tree_theme_icon_updown"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>updown</strong></paragraph>
            <paragraph>上下箭头图标，模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">TreeItem.CELL_MODE_RANGE</inline></reference> 的单元格显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-button-pressed"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-button-pressed" names="class_tree_theme_style_button_pressed"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>button_pressed</strong></paragraph>
            <paragraph>树中的按钮处于按下状态时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-cursor"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-cursor" names="class_tree_theme_style_cursor"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>cursor</strong></paragraph>
            <paragraph>用作光标的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，该 <strong>Tree</strong> 处于聚焦状态时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-cursor-unfocused"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-cursor-unfocused" names="class_tree_theme_style_cursor_unfocused"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>cursor_unfocused</strong></paragraph>
            <paragraph>用作光标的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，该 <strong>Tree</strong> 处于失焦状态时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-custom-button"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-custom-button" names="class_tree_theme_style_custom_button"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>custom_button</strong></paragraph>
            <paragraph>模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">TreeItem.CELL_MODE_RANGE</inline></reference> 的单元格的默认 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-custom-button-hover"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-custom-button-hover" names="class_tree_theme_style_custom_button_hover"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>custom_button_hover</strong></paragraph>
            <paragraph>模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">TreeItem.CELL_MODE_RANGE</inline></reference> 的单元格处于悬停状态时的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-custom-button-pressed"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-custom-button-pressed" names="class_tree_theme_style_custom_button_pressed"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>custom_button_pressed</strong></paragraph>
            <paragraph>模式为 <reference internal="True" refuri="class_treeitem#class-treeitem-constant-cell-mode-range"><inline classes="std std-ref">TreeItem.CELL_MODE_RANGE</inline></reference> 的单元格处于按下状态时的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-focus"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-focus" names="class_tree_theme_style_focus"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>focus</strong></paragraph>
            <paragraph>该 <strong>Tree</strong> 的聚焦样式，绘制在所有东西之上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-panel"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-panel" names="class_tree_theme_style_panel"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>panel</strong></paragraph>
            <paragraph>该 <strong>Tree</strong> 的背景样式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-selected"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-selected" names="class_tree_theme_style_selected"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>selected</strong></paragraph>
            <paragraph>所选项目的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，在 <strong>Tree</strong> 没有获得焦点时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-selected-focus"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-selected-focus" names="class_tree_theme_style_selected_focus"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>selected_focus</strong></paragraph>
            <paragraph>所选项目的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>，在 <strong>Tree</strong> 获得焦点时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-title-button-hover"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-title-button-hover" names="class_tree_theme_style_title_button_hover"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>title_button_hover</strong></paragraph>
            <paragraph>当标题按钮被悬停时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-title-button-normal"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-title-button-normal" names="class_tree_theme_style_title_button_normal"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>title_button_normal</strong></paragraph>
            <paragraph>标题按钮的默认 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tree-theme-style-title-button-pressed"></target>
            <paragraph classes="classref-themeproperty" ids="class-tree-theme-style-title-button-pressed" names="class_tree_theme_style_title_button_pressed"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>title_button_pressed</strong></paragraph>
            <paragraph>当标题按钮被按下时使用的 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
