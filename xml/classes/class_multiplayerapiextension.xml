<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_multiplayerapiextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/MultiplayerAPIExtension.xml.</comment>
    <target refid="class-multiplayerapiextension"></target>
    <section ids="multiplayerapiextension class-multiplayerapiextension" names="multiplayerapiextension class_multiplayerapiextension">
        <title>MultiplayerAPIExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于扩展 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类可用于通过脚本或扩展来增强或替换默认的 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 实现。</paragraph>
            <paragraph>下面的例子通过记录每一个正在进行的 RPC 和为复制而配置的每一个对象，增强了默认的实现（<reference internal="True" refuri="class_scenemultiplayer#class-scenemultiplayer"><inline classes="std std-ref">SceneMultiplayer</inline></reference>）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends MultiplayerAPIExtension
class_name LogMultiplayer

# 我们想增强默认的 SceneMultiplayer。
var base_multiplayer = SceneMultiplayer.new()

func _init():
    # 仅传递基本信号（复制到 var 以避免循环引用）
    var cts = connected_to_server
    var cf = connection_failed
    var pc = peer_connected
    var pd = peer_disconnected
    base_multiplayer.connected_to_server.connect(func(): cts.emit())
    base_multiplayer.connection_failed.connect(func(): cf.emit())
    base_multiplayer.peer_connected.connect(func(id): pc.emit(id))
    base_multiplayer.peer_disconnected.connect(func(id): pd.emit(id))

func _poll():
    return base_multiplayer.poll()

# 记录正在进行的 RPC 并将其转发到默认的多人游戏。
func _rpc(peer: int, object: Object, method: StringName, args: Array) -&gt; Error:
    print("获取用于 %d 的 RPC：%s::%s(%s)" % [peer, object, method, args])
    return base_multiplayer.rpc(peer, object, method, args)

# 记录配置添加。例如，根路径（nullptr、NodePath），复制（Node、Spawner|Synchronizer），自定义。
func _object_configuration_add(object, config: Variant) -&gt; Error:
    if config is MultiplayerSynchronizer:
        print("添加用于 %s 的同步配置。同步器：%s" % [object, config])
    elif config is MultiplayerSpawner:
        print("将节点 %s 添加到出生列表。出生器：%s" % [object, config])
    return base_multiplayer.object_configuration_add(object, config)

# 记录配置移除。例如，根路径（nullptr、NodePath），复制（Node、Spawner|Synchronizer），自定义。
func _object_configuration_remove(object, config: Variant) -&gt; Error:
    if config is MultiplayerSynchronizer:
        print("移除用于 %s 的同步配置。同步器：%s" % [object, config])
    elif config is MultiplayerSpawner:
        print("将节点 %s 从出生列表移除。出生器：%s" % [object, config])
    return base_multiplayer.object_configuration_remove(object, config)

# 这些可以是可选的，但在我们的例子中，我们想要增强 SceneMultiplayer，所以转发所有内容。
func _set_multiplayer_peer(p_peer: MultiplayerPeer):
    base_multiplayer.multiplayer_peer = p_peer

func _get_multiplayer_peer() -&gt; MultiplayerPeer:
    return base_multiplayer.multiplayer_peer

func _get_unique_id() -&gt; int:
    return base_multiplayer.get_unique_id()

func _get_peer_ids() -&gt; PackedInt32Array:
    return base_multiplayer.get_peers()</literal_block>
                </div>
            </container>
            <paragraph>然后在你的主场景或在自动加载中调用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-set-multiplayer"><inline classes="std std-ref">SceneTree.set_multiplayer</inline></reference>，以开始使用你的自定义 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># autoload.gd
func _enter_tree():
    # 将我们的自定义多人游戏设置为 SceneTree 中的主要的多人游戏。
get_tree().set_multiplayer(LogMultiplayer.new())</literal_block>
                </div>
            </container>
            <paragraph>原生扩展也可以在初始化期间，使用 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-set-default-interface"><inline classes="std std-ref">MultiplayerAPI.set_default_interface</inline></reference> 方法将自己配置为默认实现。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="225"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-get-multiplayer-peer"><inline classes="std std-ref">_get_multiplayer_peer</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-get-peer-ids"><inline classes="std std-ref">_get_peer_ids</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-get-remote-sender-id"><inline classes="std std-ref">_get_remote_sender_id</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-get-unique-id"><inline classes="std std-ref">_get_unique_id</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-object-configuration-add"><inline classes="std std-ref">_object_configuration_add</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> configuration <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-object-configuration-remove"><inline classes="std std-ref">_object_configuration_remove</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> configuration <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-poll"><inline classes="std std-ref">_poll</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-rpc"><inline classes="std std-ref">_rpc</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> method, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> args <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapiextension-private-method-set-multiplayer-peer"><inline classes="std std-ref">_set_multiplayer_peer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> multiplayer_peer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-multiplayerapiextension-private-method-get-multiplayer-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-get-multiplayer-peer" names="class_multiplayerapiextension_private_method__get_multiplayer_peer"><reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> <strong>_get_multiplayer_peer</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在检索到 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference> 时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-get-peer-ids"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-get-peer-ids" names="class_multiplayerapiextension_private_method__get_peer_ids"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_get_peer_ids</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-get-peers"><inline classes="std std-ref">MultiplayerAPI.get_peers</inline></reference> 的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-get-remote-sender-id"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-get-remote-sender-id" names="class_multiplayerapiextension_private_method__get_remote_sender_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_remote_sender_id</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-get-remote-sender-id"><inline classes="std std-ref">MultiplayerAPI.get_remote_sender_id</inline></reference> 的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-get-unique-id"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-get-unique-id" names="class_multiplayerapiextension_private_method__get_unique_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_unique_id</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-get-unique-id"><inline classes="std std-ref">MultiplayerAPI.get_unique_id</inline></reference> 的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-object-configuration-add"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-object-configuration-add" names="class_multiplayerapiextension_private_method__object_configuration_add"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_object_configuration_add</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> configuration <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-object-configuration-add"><inline classes="std std-ref">MultiplayerAPI.object_configuration_add</inline></reference> 的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-object-configuration-remove"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-object-configuration-remove" names="class_multiplayerapiextension_private_method__object_configuration_remove"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_object_configuration_remove</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> configuration <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-object-configuration-remove"><inline classes="std std-ref">MultiplayerAPI.object_configuration_remove</inline></reference> 的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-poll"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-poll" names="class_multiplayerapiextension_private_method__poll"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_poll</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-poll"><inline classes="std std-ref">MultiplayerAPI.poll</inline></reference> 的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-rpc"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-rpc" names="class_multiplayerapiextension_private_method__rpc"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_rpc</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer, <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> method, <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> args <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-rpc"><inline classes="std std-ref">MultiplayerAPI.rpc</inline></reference> 的回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapiextension-private-method-set-multiplayer-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapiextension-private-method-set-multiplayer-peer" names="class_multiplayerapiextension_private_method__set_multiplayer_peer">void <strong>_set_multiplayer_peer</strong> <strong>(</strong> <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> multiplayer_peer <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
            <paragraph>在设置 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference> 时调用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
