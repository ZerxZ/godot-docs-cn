<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scripteditorbase.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ScriptEditorBase.xml.</comment>
    <target refid="class-scripteditorbase"></target>
    <section ids="scripteditorbase class-scripteditorbase" names="scripteditorbase class_scripteditorbase">
        <title>ScriptEditorBase</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_vboxcontainer#class-vboxcontainer"><inline classes="std std-ref">VBoxContainer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_boxcontainer#class-boxcontainer"><inline classes="std std-ref">BoxContainer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_container#class-container"><inline classes="std std-ref">Container</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于在 <reference internal="True" refuri="class_scripteditor#class-scripteditor"><inline classes="std std-ref">ScriptEditor</inline></reference> 中编辑脚本的基础编辑器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于在 <reference internal="True" refuri="class_scripteditor#class-scripteditor"><inline classes="std std-ref">ScriptEditor</inline></reference> 中编辑脚本的基础编辑器。不包含文档项目。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="171"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditorbase-method-add-syntax-highlighter"><inline classes="std std-ref">add_syntax_highlighter</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference> highlighter <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scripteditorbase-method-get-base-editor"><inline classes="std std-ref">get_base_editor</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-scripteditorbase-signal-edited-script-changed"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-edited-script-changed" names="class_scripteditorbase_signal_edited_script_changed"><strong>edited_script_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>校验脚本后发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-go-to-help"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-go-to-help" names="class_scripteditorbase_signal_go_to_help"><strong>go_to_help</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> what <strong>)</strong></paragraph>
            <paragraph>用户请求特定的文档页面时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-go-to-method"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-go-to-method" names="class_scripteditorbase_signal_go_to_method"><strong>go_to_method</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> script, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> method <strong>)</strong></paragraph>
            <paragraph>用户请求查看脚本中的指定方法时发出，类似于 <reference internal="True" refid="class-scripteditorbase-signal-request-open-script-at-line"><inline classes="std std-ref">request_open_script_at_line</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-name-changed"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-name-changed" names="class_scripteditorbase_signal_name_changed"><strong>name_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>校验脚本后，或者所编辑资源发生更改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-replace-in-files-requested"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-replace-in-files-requested" names="class_scripteditorbase_signal_replace_in_files_requested"><strong>replace_in_files_requested</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text <strong>)</strong></paragraph>
            <paragraph>用户请求在文件系统中查找与替换文本时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-request-help"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-request-help" names="class_scripteditorbase_signal_request_help"><strong>request_help</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> topic <strong>)</strong></paragraph>
            <paragraph>用户请求上下文帮助时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-request-open-script-at-line"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-request-open-script-at-line" names="class_scripteditorbase_signal_request_open_script_at_line"><strong>request_open_script_at_line</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> script, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> line <strong>)</strong></paragraph>
            <paragraph>用户请求查看脚本中的指定行时发出，类似于 <reference internal="True" refid="class-scripteditorbase-signal-go-to-method"><inline classes="std std-ref">go_to_method</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-request-save-history"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-request-save-history" names="class_scripteditorbase_signal_request_save_history"><strong>request_save_history</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>用户进行上下文跳转，并且该条目在同一个脚本中时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-signal-search-in-files-requested"></target>
            <paragraph classes="classref-signal" ids="class-scripteditorbase-signal-search-in-files-requested" names="class_scripteditorbase_signal_search_in_files_requested"><strong>search_in_files_requested</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> text <strong>)</strong></paragraph>
            <paragraph>用户请求在文件系统中搜索文本时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scripteditorbase-method-add-syntax-highlighter"></target>
            <paragraph classes="classref-method" ids="class-scripteditorbase-method-add-syntax-highlighter" names="class_scripteditorbase_method_add_syntax_highlighter">void <strong>add_syntax_highlighter</strong> <strong>(</strong> <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference> highlighter <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference> 添加到打开的脚本中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scripteditorbase-method-get-base-editor"></target>
            <paragraph classes="classref-method" ids="class-scripteditorbase-method-get-base-editor" names="class_scripteditorbase_method_get_base_editor"><reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>get_base_editor</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回用于编辑脚本的底层 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>。文本脚本对应 <reference internal="True" refuri="class_codeedit#class-codeedit"><inline classes="std std-ref">CodeEdit</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
