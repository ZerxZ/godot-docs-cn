<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editornode3dgizmo.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EditorNode3DGizmo.xml.</comment>
    <target refid="class-editornode3dgizmo"></target>
    <section ids="editornode3dgizmo class-editornode3dgizmo" names="editornode3dgizmo class_editornode3dgizmo">
        <title>EditorNode3DGizmo</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node3dgizmo#class-node3dgizmo"><inline classes="std std-ref">Node3DGizmo</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于编辑 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 对象的小工具。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>小工具可用于为 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 对象提供自定义可视化和编辑功能（控柄和子小工具）。可以被重写以创建自定义小工具，但对于简单的小工具而言，通常建议创建 <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="63"></colspec>
                    <colspec colwidth="322"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-begin-handle-action"><inline classes="std std-ref">_begin_handle_action</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-commit-handle"><inline classes="std std-ref">_commit_handle</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, restore: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, cancel: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference>(ids: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, restores: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>], cancel: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-get-handle-name"><inline classes="std std-ref">_get_handle_name</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-get-handle-value"><inline classes="std std-ref">_get_handle_value</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-get-subgizmo-transform"><inline classes="std std-ref">_get_subgizmo_transform</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-is-handle-highlighted"><inline classes="std std-ref">_is_handle_highlighted</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-set-handle"><inline classes="std std-ref">_set_handle</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-set-subgizmo-transform"><inline classes="std std-ref">_set_subgizmo_transform</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-frustum"><inline classes="std std-ref">_subgizmos_intersect_frustum</inline></reference>(camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, frustum: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-ray"><inline classes="std std-ref">_subgizmos_intersect_ray</inline></reference>(camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-add-collision-segments"><inline classes="std std-ref">add_collision_segments</inline></reference>(segments: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-add-collision-triangles"><inline classes="std std-ref">add_collision_triangles</inline></reference>(triangles: <reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference>(handles: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>, ids: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, billboard: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-add-lines"><inline classes="std std-ref">add_lines</inline></reference>(lines: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>, billboard: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-add-mesh"><inline classes="std std-ref">add_mesh</inline></reference>(mesh: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> = null, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), skeleton: <reference internal="True" refuri="class_skinreference#class-skinreference"><inline classes="std std-ref">SkinReference</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-add-unscaled-billboard"><inline classes="std std-ref">add_unscaled_billboard</inline></reference>(material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>, default_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1))</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-get-node-3d"><inline classes="std std-ref">get_node_3d</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-get-plugin"><inline classes="std std-ref">get_plugin</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-get-subgizmo-selection"><inline classes="std std-ref">get_subgizmo_selection</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-is-subgizmo-selected"><inline classes="std std-ref">is_subgizmo_selected</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-set-hidden"><inline classes="std std-ref">set_hidden</inline></reference>(hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editornode3dgizmo-method-set-node-3d"><inline classes="std std-ref">set_node_3d</inline></reference>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editornode3dgizmo-private-method-begin-handle-action"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-begin-handle-action" names="class_editornode3dgizmo_private_method__begin_handle_action"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_begin_handle_action</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-begin-handle-action"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>该方法目前没有描述，请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>吧！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-commit-handle"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-commit-handle" names="class_editornode3dgizmo_private_method__commit_handle"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_commit_handle</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, restore: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, cancel: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-commit-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以提交一个正在编辑的控柄（控柄必须是之前通过 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference> 添加的）。这通常意味着为该修改创建一个 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作，将当前控柄值用作“做”，并将 <literal>restore</literal> 参数用作“撤销”。</paragraph>
            <paragraph>如果 <literal>cancel</literal> 参数为 <literal>true</literal>，则应直接设置 <literal>restore</literal> 值，而不需要任何 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作。</paragraph>
            <paragraph>当提交的控柄为次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-commit-subgizmos"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-commit-subgizmos" names="class_editornode3dgizmo_private_method__commit_subgizmos"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_commit_subgizmos</strong>(ids: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, restores: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>], cancel: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-commit-subgizmos"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以提交一组正在编辑的子小工具（参见 <reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-ray"><inline classes="std std-ref">_subgizmos_intersect_ray</inline></reference> 和 <reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-frustum"><inline classes="std std-ref">_subgizmos_intersect_frustum</inline></reference>）。这通常意味着为该更改创建一个 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作，将当前变换用作“做”，并将 <literal>restores</literal> 变换用作“撤消”。</paragraph>
            <paragraph>如果 <literal>cancel</literal> 参数为 <literal>true</literal>，则<literal>restores</literal> 变换应被直接设置 ，而无需任何 <reference internal="True" refuri="class_undoredo#class-undoredo"><inline classes="std std-ref">UndoRedo</inline></reference> 动作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-get-handle-name"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-get-handle-name" names="class_editornode3dgizmo_private_method__get_handle_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_handle_name</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-get-handle-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以返回编辑的控柄的名称（控柄必须先前通过 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference> 添加的）。可以命名控柄以供用户在编辑时引用。</paragraph>
            <paragraph>当请求的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-get-handle-value"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-get-handle-value" names="class_editornode3dgizmo_private_method__get_handle_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_handle_value</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-get-handle-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以返回一个控柄的当前值。该值将在编辑开始时被请求，并用作 <reference internal="True" refid="class-editornode3dgizmo-private-method-commit-handle"><inline classes="std std-ref">_commit_handle</inline></reference> 中的 <literal>restore</literal> 参数。</paragraph>
            <paragraph>当请求的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-get-subgizmo-transform"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-get-subgizmo-transform" names="class_editornode3dgizmo_private_method__get_subgizmo_transform"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>_get_subgizmo_transform</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-get-subgizmo-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以返回子小工具的当前变换。该变换将在编辑开始时被请求，并用作 <reference internal="True" refid="class-editornode3dgizmo-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference> 中的 <literal>restore</literal> 参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-is-handle-highlighted"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-is-handle-highlighted" names="class_editornode3dgizmo_private_method__is_handle_highlighted"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_handle_highlighted</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-is-handle-highlighted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，只要给定的控柄应该在编辑器中被高亮显示时就返回 <literal>true</literal>。</paragraph>
            <paragraph>当请求的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-redraw"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-redraw" names="class_editornode3dgizmo_private_method__redraw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_redraw</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，每当请求小工具更新时将添加所有小工具元素。通常在该方法的开头调用 <reference internal="True" refid="class-editornode3dgizmo-method-clear"><inline classes="std std-ref">clear</inline></reference>，然后根据节点的属性添加可视元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-set-handle"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-set-handle" names="class_editornode3dgizmo_private_method__set_handle"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_handle</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-set-handle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，当用户拖动小工具控柄（之前使用 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference> 添加的）时更新节点属性。提供的 <literal>point</literal> 是屏幕坐标中的鼠标位置， <literal>camera</literal> 可用于将其转换为射线投射。</paragraph>
            <paragraph>当编辑的控柄是次要控柄时，<literal>secondary</literal> 参数为 <literal>true</literal>（有关更多信息，请参阅 <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">add_handles</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-set-subgizmo-transform"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-set-subgizmo-transform" names="class_editornode3dgizmo_private_method__set_subgizmo_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_subgizmo_transform</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-set-subgizmo-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以在子小工具编辑期间更新节点属性（参见 <reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-ray"><inline classes="std std-ref">_subgizmos_intersect_ray</inline></reference> 和 <reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-frustum"><inline classes="std std-ref">_subgizmos_intersect_frustum</inline></reference>）。<literal>transform</literal> 是在 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 的局部坐标系中给出的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-subgizmos-intersect-frustum"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-subgizmos-intersect-frustum" names="class_editornode3dgizmo_private_method__subgizmos_intersect_frustum"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>_subgizmos_intersect_frustum</strong>(camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, frustum: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>]) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-frustum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以允许使用鼠标拖动框选来选择子小工具。给定一个 <literal>camera</literal> 和一个 <literal>frustum</literal>，这个方法应该返回哪些子小工具包含在锥体中。<literal>frustum</literal> 参数由一个数组组成，其中包含构成选择锥体的所有 <reference internal="True" refuri="class_plane#class-plane"><inline classes="std std-ref">Plane</inline></reference>。返回的值应该包含一个唯一的子小工具标识符列表，它可以有任何非负值，并将用于其他虚方法，如 <reference internal="True" refid="class-editornode3dgizmo-private-method-get-subgizmo-transform"><inline classes="std std-ref">_get_subgizmo_transform</inline></reference> 或 <reference internal="True" refid="class-editornode3dgizmo-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-private-method-subgizmos-intersect-ray"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-private-method-subgizmos-intersect-ray" names="class_editornode3dgizmo_private_method__subgizmos_intersect_ray"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_subgizmos_intersect_ray</strong>(camera: <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>, point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-private-method-subgizmos-intersect-ray"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法，以允许使用鼠标点击选择子小工具。给定屏幕坐标中的 <literal>camera</literal> 和 <literal>point</literal> 时，该方法应返回应选择哪个子小工具。返回值应该是一个唯一的子小工具标识符，它可以有任何非负值，并将用于其他虚方法，如 <reference internal="True" refid="class-editornode3dgizmo-private-method-get-subgizmo-transform"><inline classes="std std-ref">_get_subgizmo_transform</inline></reference> 或 <reference internal="True" refid="class-editornode3dgizmo-private-method-commit-subgizmos"><inline classes="std std-ref">_commit_subgizmos</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-add-collision-segments"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-add-collision-segments" names="class_editornode3dgizmo_method_add_collision_segments"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_collision_segments</strong>(segments: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>) <reference internal="True" refid="class-editornode3dgizmo-method-add-collision-segments"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定的 <literal>segments</literal> 添加到小工具的碰撞形状以进行拾取。在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间调用该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-add-collision-triangles"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-add-collision-triangles" names="class_editornode3dgizmo_method_add_collision_triangles"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_collision_triangles</strong>(triangles: <reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference>) <reference internal="True" refid="class-editornode3dgizmo-method-add-collision-triangles"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将碰撞三角形添加到小工具以进行拾取。<reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference> 也可以从常规 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 生成。在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间调用该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-add-handles"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-add-handles" names="class_editornode3dgizmo_method_add_handles"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_handles</strong>(handles: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>, ids: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>, billboard: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, secondary: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-editornode3dgizmo-method-add-handles"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加可用于编辑该小工具的 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 属性的一组控柄（点）。<literal>ids</literal> 参数可用于为每个控柄指定一个自定义的标识符，如果传递了一个空的数组，id 将按照 <literal>handles</literal> 参数顺序自动分配。</paragraph>
            <paragraph><literal>secondary</literal> 参数将添加的控柄标记为次要控柄，这意味着它们通常比普通控柄具有更低的选择优先级。当用户按住 Shift 键时，次要控柄将被切换为比普通控柄具有更高的优先级。这种优先级的变化可用于在同一点放置多个控柄，同时仍让用户控制他们的选择。</paragraph>
            <paragraph>这些虚方法将在编辑这些控柄时被调用。在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间将调用该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-add-lines"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-add-lines" names="class_editornode3dgizmo_method_add_lines"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_lines</strong>(lines: <reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>, billboard: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <reference internal="True" refid="class-editornode3dgizmo-method-add-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为小工具添加使用给定材质的线段（一对对点的集合）。线段将用于展示和选择。请在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间调用此方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-add-mesh"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-add-mesh" names="class_editornode3dgizmo_method_add_mesh"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_mesh</strong>(mesh: <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>, material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> = null, transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), skeleton: <reference internal="True" refuri="class_skinreference#class-skinreference"><inline classes="std std-ref">SkinReference</inline></reference> = null) <reference internal="True" refid="class-editornode3dgizmo-method-add-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为小工具添加网格，可以指定材质 <literal>material</literal>、本地变换 <literal>transform</literal> 和骨架 <literal>skeleton</literal>。请在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间调用此方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-add-unscaled-billboard"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-add-unscaled-billboard" names="class_editornode3dgizmo_method_add_unscaled_billboard"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_unscaled_billboard</strong>(material: <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference>, default_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <reference internal="True" refid="class-editornode3dgizmo-method-add-unscaled-billboard"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加未缩放的公告板，将用于展示和选择。请在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间调用此方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-clear"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-clear" names="class_editornode3dgizmo_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-editornode3dgizmo-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除小工具中的一切，包括网格、碰撞和控柄。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-get-node-3d"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-get-node-3d" names="class_editornode3dgizmo_method_get_node_3d"><reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>get_node_3d</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-method-get-node-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与这个小工具关联的 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-get-plugin"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-get-plugin" names="class_editornode3dgizmo_method_get_plugin"><reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference> <strong>get_plugin</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-method-get-plugin"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回拥有该小工具的 <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin"><inline classes="std std-ref">EditorNode3DGizmoPlugin</inline></reference>。可以在使用 <reference internal="True" refuri="class_editornode3dgizmoplugin#class-editornode3dgizmoplugin-method-get-material"><inline classes="std std-ref">EditorNode3DGizmoPlugin.get_material</inline></reference> 获取材质时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-get-subgizmo-selection"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-get-subgizmo-selection" names="class_editornode3dgizmo_method_get_subgizmo_selection"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_subgizmo_selection</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-method-get-subgizmo-selection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前选定的子小工具的列表。可用于在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间高亮显示所选元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-is-subgizmo-selected"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-is-subgizmo-selected" names="class_editornode3dgizmo_method_is_subgizmo_selected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_subgizmo_selected</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-editornode3dgizmo-method-is-subgizmo-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定的子小工具是当前所选定的，则返回 <literal>true</literal>。可用于在 <reference internal="True" refid="class-editornode3dgizmo-private-method-redraw"><inline classes="std std-ref">_redraw</inline></reference> 期间高亮显示所选元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-set-hidden"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-set-hidden" names="class_editornode3dgizmo_method_set_hidden"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_hidden</strong>(hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-editornode3dgizmo-method-set-hidden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该小工具的隐藏状态。如果为 <literal>true</literal>，则该小工具将被隐藏。如果为 <literal>false</literal> 则会显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editornode3dgizmo-method-set-node-3d"></target>
            <paragraph classes="classref-method" ids="class-editornode3dgizmo-method-set-node-3d" names="class_editornode3dgizmo_method_set_node_3d"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_node_3d</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-editornode3dgizmo-method-set-node-3d"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置该小工具参考的 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 节点。<literal>node</literal> 必须继承自 <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
