<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_performance.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Performance.xml.</comment>
    <target refid="class-performance"></target>
    <section ids="performance class-performance" names="performance class_performance">
        <title>Performance</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>公开与性能相关的数据。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该类提供对许多与性能相关的不同监视器的访问，例如内存使用情况、绘制调用和 FPS。这些值与编辑器的<strong>调试器</strong>面板中的<strong>监视</strong>选项卡中显示的值相同。通过使用该类的 <reference internal="True" refid="class-performance-method-get-monitor"><inline classes="std std-ref">get_monitor</inline></reference> 方法，你可以从代码中访问该数据。</paragraph>
            <paragraph>可以使用 <reference internal="True" refid="class-performance-method-add-custom-monitor"><inline classes="std std-ref">add_custom_monitor</inline></reference> 方法添加自定义监视器。在编辑器的<strong>调试器</strong>面板的<strong>监视</strong>选项卡中，自定义监视器可以与内置监视器一起使用。</paragraph>
            <paragraph><strong>注意：</strong>某些内置监视器仅在调试模式下可用，并且在以发布模式导出的项目中使用时，将始终返回 <literal>0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>出于性能原因，某些内置监视器不会实时更新，所以在更改之间可能会有长达 1 秒的延迟。</paragraph>
            <paragraph><strong>注意：</strong>自定义监视器不支持负值。负值被钳制为 0。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="208"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-performance-method-add-custom-monitor"><inline classes="std std-ref">add_custom_monitor</inline></reference>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, arguments: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-performance-method-get-custom-monitor"><inline classes="std std-ref">get_custom_monitor</inline></reference>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-performance-method-get-custom-monitor-names"><inline classes="std std-ref">get_custom_monitor_names</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-performance-method-get-monitor"><inline classes="std std-ref">get_monitor</inline></reference>(monitor: <reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-performance-method-get-monitor-modification-time"><inline classes="std std-ref">get_monitor_modification_time</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-performance-method-has-custom-monitor"><inline classes="std std-ref">has_custom_monitor</inline></reference>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-performance-method-remove-custom-monitor"><inline classes="std std-ref">remove_custom_monitor</inline></reference>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-performance-monitor"></target>
            <paragraph classes="classref-enumeration" ids="enum-performance-monitor" names="enum_performance_monitor">enum <strong>Monitor</strong>: <reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-performance-constant-time-fps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-time-fps" names="class_performance_constant_time_fps"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>TIME_FPS</strong> = <literal>0</literal></paragraph>
            <paragraph>上一秒渲染的帧数。该指标每秒仅更新一次，与查询频率无关。<emphasis>越高越好。</emphasis></paragraph>
            <target refid="class-performance-constant-time-process"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-time-process" names="class_performance_constant_time_process"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>TIME_PROCESS</strong> = <literal>1</literal></paragraph>
            <paragraph>完成一帧所需的时间，单位为秒。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-time-physics-process"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-time-physics-process" names="class_performance_constant_time_physics_process"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>TIME_PHYSICS_PROCESS</strong> = <literal>2</literal></paragraph>
            <paragraph>完成一个物理帧所需的时间，单位为秒。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-time-navigation-process"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-time-navigation-process" names="class_performance_constant_time_navigation_process"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>TIME_NAVIGATION_PROCESS</strong> = <literal>3</literal></paragraph>
            <paragraph>完成一个导航步骤的时间，单位为秒。包括导航地图的更新以及代理避障的计算。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-memory-static"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-memory-static" names="class_performance_constant_memory_static"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>MEMORY_STATIC</strong> = <literal>4</literal></paragraph>
            <paragraph>当前使用的静态内存，单位为字节。在发布版本中不可用。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-memory-static-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-memory-static-max" names="class_performance_constant_memory_static_max"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>MEMORY_STATIC_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>可用的静态内存。在发布版本中不可用。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-memory-message-buffer-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-memory-message-buffer-max" names="class_performance_constant_memory_message_buffer_max"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>MEMORY_MESSAGE_BUFFER_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>消息队列缓冲区已使用的最大内存量，单位为字节。消息队列用于延迟函数调用和通知。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-object-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-object-count" names="class_performance_constant_object_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>OBJECT_COUNT</strong> = <literal>7</literal></paragraph>
            <paragraph>当前实例化的对象数（包括节点）。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-object-resource-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-object-resource-count" names="class_performance_constant_object_resource_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>OBJECT_RESOURCE_COUNT</strong> = <literal>8</literal></paragraph>
            <paragraph>当前使用的资源数。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-object-node-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-object-node-count" names="class_performance_constant_object_node_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>OBJECT_NODE_COUNT</strong> = <literal>9</literal></paragraph>
            <paragraph>当前在场景树中实例化的节点数。也包括根节点。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-object-orphan-node-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-object-orphan-node-count" names="class_performance_constant_object_orphan_node_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>OBJECT_ORPHAN_NODE_COUNT</strong> = <literal>10</literal></paragraph>
            <paragraph>孤立节点的数量，即父节点不是场景树节点的节点。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-render-total-objects-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-render-total-objects-in-frame" names="class_performance_constant_render_total_objects_in_frame"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>RENDER_TOTAL_OBJECTS_IN_FRAME</strong> = <literal>11</literal></paragraph>
            <paragraph>在上一个渲染帧中的对象总数。该指标不包括剔除的对象（通过隐藏节点、视锥剔除或遮挡剔除）。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-render-total-primitives-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-render-total-primitives-in-frame" names="class_performance_constant_render_total_primitives_in_frame"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>RENDER_TOTAL_PRIMITIVES_IN_FRAME</strong> = <literal>12</literal></paragraph>
            <paragraph>在上一个渲染帧中渲染的顶点或索引的总数。该指标不包括来自被剔除对象的图元（通过隐藏节点、视锥剔除或遮挡剔除）。由于预深度阶段和阴影阶段，图元的数量总是高于场景中的实际顶点数量（通常是原始顶点数量的两倍或三倍）。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-render-total-draw-calls-in-frame"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-render-total-draw-calls-in-frame" names="class_performance_constant_render_total_draw_calls_in_frame"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>RENDER_TOTAL_DRAW_CALLS_IN_FRAME</strong> = <literal>13</literal></paragraph>
            <paragraph>在上一个渲染帧中执行的绘制调用的总数。该指标不包括剔除对象（通过隐藏节点、视锥剔除或遮挡剔除），因为它们不会导致绘制调用。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-render-video-mem-used"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-render-video-mem-used" names="class_performance_constant_render_video_mem_used"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>RENDER_VIDEO_MEM_USED</strong> = <literal>14</literal></paragraph>
            <paragraph>显存的使用量（纹理和顶点内存之和，单位为字节）。由于该指标还包括其他杂项分配，因此该值始终大于 <reference internal="True" refid="class-performance-constant-render-texture-mem-used"><inline classes="std std-ref">RENDER_TEXTURE_MEM_USED</inline></reference> 和 <reference internal="True" refid="class-performance-constant-render-buffer-mem-used"><inline classes="std std-ref">RENDER_BUFFER_MEM_USED</inline></reference> 的总和。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-render-texture-mem-used"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-render-texture-mem-used" names="class_performance_constant_render_texture_mem_used"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>RENDER_TEXTURE_MEM_USED</strong> = <literal>15</literal></paragraph>
            <paragraph>纹理内存的使用量（单位为字节）。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-render-buffer-mem-used"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-render-buffer-mem-used" names="class_performance_constant_render_buffer_mem_used"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>RENDER_BUFFER_MEM_USED</strong> = <literal>16</literal></paragraph>
            <paragraph>渲染缓冲区内存的使用量（单位为字节）。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-physics-2d-active-objects"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-physics-2d-active-objects" names="class_performance_constant_physics_2d_active_objects"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>PHYSICS_2D_ACTIVE_OBJECTS</strong> = <literal>17</literal></paragraph>
            <paragraph>游戏中活跃的 <reference internal="True" refuri="class_rigidbody2d#class-rigidbody2d"><inline classes="std std-ref">RigidBody2D</inline></reference> 节点数。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-physics-2d-collision-pairs"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-physics-2d-collision-pairs" names="class_performance_constant_physics_2d_collision_pairs"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>PHYSICS_2D_COLLISION_PAIRS</strong> = <literal>18</literal></paragraph>
            <paragraph>2D 物理引擎中碰撞对的数量。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-physics-2d-island-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-physics-2d-island-count" names="class_performance_constant_physics_2d_island_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>PHYSICS_2D_ISLAND_COUNT</strong> = <literal>19</literal></paragraph>
            <paragraph>2D 物理引擎中孤岛的数量。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-physics-3d-active-objects"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-physics-3d-active-objects" names="class_performance_constant_physics_3d_active_objects"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>PHYSICS_3D_ACTIVE_OBJECTS</strong> = <literal>20</literal></paragraph>
            <paragraph>游戏中活跃的 <reference internal="True" refuri="class_rigidbody3d#class-rigidbody3d"><inline classes="std std-ref">RigidBody3D</inline></reference> 和 <reference internal="True" refuri="class_vehiclebody3d#class-vehiclebody3d"><inline classes="std std-ref">VehicleBody3D</inline></reference> 节点数。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-physics-3d-collision-pairs"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-physics-3d-collision-pairs" names="class_performance_constant_physics_3d_collision_pairs"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>PHYSICS_3D_COLLISION_PAIRS</strong> = <literal>21</literal></paragraph>
            <paragraph>3D 物理引擎中碰撞对的数量。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-physics-3d-island-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-physics-3d-island-count" names="class_performance_constant_physics_3d_island_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>PHYSICS_3D_ISLAND_COUNT</strong> = <literal>22</literal></paragraph>
            <paragraph>3D 物理引擎中孤岛的数量。<emphasis>越低越好。</emphasis></paragraph>
            <target refid="class-performance-constant-audio-output-latency"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-audio-output-latency" names="class_performance_constant_audio_output_latency"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>AUDIO_OUTPUT_LATENCY</strong> = <literal>23</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_audioserver#class-audioserver"><inline classes="std std-ref">AudioServer</inline></reference> 的输出延迟。相当于调用 <reference internal="True" refuri="class_audioserver#class-audioserver-method-get-output-latency"><inline classes="std std-ref">AudioServer.get_output_latency</inline></reference>，不建议每帧都调用该方法。</paragraph>
            <target refid="class-performance-constant-navigation-active-maps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-active-maps" names="class_performance_constant_navigation_active_maps"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_ACTIVE_MAPS</strong> = <literal>24</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中活动导航地图的数量。也包含 World2D 和 World3D 所创建的两张默认导航地图。</paragraph>
            <target refid="class-performance-constant-navigation-region-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-region-count" names="class_performance_constant_navigation_region_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_REGION_COUNT</strong> = <literal>25</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中活动导航地区的数量。</paragraph>
            <target refid="class-performance-constant-navigation-agent-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-agent-count" names="class_performance_constant_navigation_agent_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_AGENT_COUNT</strong> = <literal>26</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中正在处理避障的活动导航代理的数量。</paragraph>
            <target refid="class-performance-constant-navigation-link-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-link-count" names="class_performance_constant_navigation_link_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_LINK_COUNT</strong> = <literal>27</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中活动导航链接的数量。</paragraph>
            <target refid="class-performance-constant-navigation-polygon-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-polygon-count" names="class_performance_constant_navigation_polygon_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_POLYGON_COUNT</strong> = <literal>28</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中导航网格多边形的数量。</paragraph>
            <target refid="class-performance-constant-navigation-edge-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-edge-count" names="class_performance_constant_navigation_edge_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_EDGE_COUNT</strong> = <literal>29</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中导航网格多边形边缘的数量。</paragraph>
            <target refid="class-performance-constant-navigation-edge-merge-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-edge-merge-count" names="class_performance_constant_navigation_edge_merge_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_EDGE_MERGE_COUNT</strong> = <literal>30</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中由于边键重叠而被合并的导航网格多边形的边的数量。</paragraph>
            <target refid="class-performance-constant-navigation-edge-connection-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-edge-connection-count" names="class_performance_constant_navigation_edge_connection_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_EDGE_CONNECTION_COUNT</strong> = <literal>31</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中由边缘接近而被认为已连接的多边形的边的数量。</paragraph>
            <target refid="class-performance-constant-navigation-edge-free-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-navigation-edge-free-count" names="class_performance_constant_navigation_edge_free_count"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>NAVIGATION_EDGE_FREE_COUNT</strong> = <literal>32</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d"><inline classes="std std-ref">NavigationServer3D</inline></reference> 中无法合并的导航网格多边形的边的数量。这些边仍然可以通过边缘接近或使用链接而被连接。</paragraph>
            <target refid="class-performance-constant-monitor-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-performance-constant-monitor-max" names="class_performance_constant_monitor_max"><reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> <strong>MONITOR_MAX</strong> = <literal>33</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-performance-method-add-custom-monitor"></target>
            <paragraph classes="classref-method" ids="class-performance-method-add-custom-monitor" names="class_performance_method_add_custom_monitor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_custom_monitor</strong>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>, arguments: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = []) <reference internal="True" refid="class-performance-method-add-custom-monitor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个名为 <literal>id</literal> 的自定义监视器。可以在 <literal>id</literal> 中使用斜线分隔符指定监视器的类别（例如：<literal>"Game/NumberOfNPCs"</literal>）。如果有多个斜线分隔符，则使用默认的类别。默认类别是 <literal>"Custom"</literal>。如果给定的 <literal>id</literal> 已经存在，则打印一个错误。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var monitor_value = Callable(self, "get_monitor_value")

    # 将名称为“MyName”的监视器添加到类别“MyCategory”。
    Performance.add_custom_monitor("MyCategory/MyMonitor", monitor_value)

    # 将名称为“MyName”的监视器添加到类别“Custom”。
    # 注意：“MyCategory/MyMonitor”和“MyMonitor”同名但不同 ID，所以代码有效。
    Performance.add_custom_monitor("MyMonitor", monitor_value)

    # 将名称为“MyName”的监视器添加到类别“Custom”。
    # 注意：“MyMonitor”和“Custom/MyMonitor”名称相同，类别相同，但 ID 不同，所以代码有效。
    Performance.add_custom_monitor("Custom/MyMonitor", monitor_value)

    # 将名称为“MyCategoryOne/MyCategoryTwo/MyMonitor”的监视器添加到类别“Custom”。
    Performance.add_custom_monitor("MyCategoryOne/MyCategoryTwo/MyMonitor", monitor_value)

func get_monitor_value():
    return randi() % 25</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    var monitorValue = new Callable(this, MethodName.GetMonitorValue);

    // 将名称为“MyName”的监视器添加到类别“MyCategory”。
    Performance.AddCustomMonitor("MyCategory/MyMonitor", monitorValue);
    // 将名称为“MyName”的监视器添加到类别“Custom”。
    // 注意：“MyCategory/MyMonitor”和“MyMonitor”同名但不同 ID，所以代码有效。
    Performance.AddCustomMonitor("MyMonitor", monitorValue);

    // 将名称为“MyName”的监视器添加到类别“Custom”。
    // 注意：“MyMonitor”和“Custom/MyMonitor”名称相同，类别相同，但 ID 不同，所以代码有效。
    Performance.AddCustomMonitor("Custom/MyMonitor", monitorValue);

    // 将名称为“MyCategoryOne/MyCategoryTwo/MyMonitor”的监视器添加到类别“Custom”。
    Performance.AddCustomMonitor("MyCategoryOne/MyCategoryTwo/MyMonitor", monitorValue);
}

public int GetMonitorValue()
{
    return GD.Randi() % 25;
}</literal_block>
                </div>
            </container>
            <paragraph>调试器调用可调用对象来获取自定义监视器的值。可调用对象必须返回一个零或正整数或浮点数。</paragraph>
            <paragraph>使用参数数组中提供的参数来调用可调用对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-performance-method-get-custom-monitor"></target>
            <paragraph classes="classref-method" ids="class-performance-method-get-custom-monitor" names="class_performance_method_get_custom_monitor"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_custom_monitor</strong>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-performance-method-get-custom-monitor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定 <literal>id</literal> 的自定义监视器的值。调用这个可调用对象以获取自定义监视器的值。另请参阅 <reference internal="True" refid="class-performance-method-has-custom-monitor"><inline classes="std std-ref">has_custom_monitor</inline></reference>。如果给定的 <literal>id</literal> 不存在，则打印一个错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-performance-method-get-custom-monitor-names"></target>
            <paragraph classes="classref-method" ids="class-performance-method-get-custom-monitor-names" names="class_performance_method_get_custom_monitor_names"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>] <strong>get_custom_monitor_names</strong>() <reference internal="True" refid="class-performance-method-get-custom-monitor-names"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，返回活动自定义监视器的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-performance-method-get-monitor"></target>
            <paragraph classes="classref-method" ids="class-performance-method-get-monitor" names="class_performance_method_get_monitor"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_monitor</strong>(monitor: <reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-performance-method-get-monitor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回任一可用的内置监视器的值。应该提供任一 <reference internal="True" refid="enum-performance-monitor"><inline classes="std std-ref">Monitor</inline></reference> 常量作为参数，如下所示：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">print(Performance.get_monitor(Performance.TIME_FPS)) # 将 FPS 打印到控制台。</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GD.Print(Performance.GetMonitor(Performance.Monitor.TimeFps)); // 将 FPS 打印到控制台。</literal_block>
                </div>
            </container>
            <paragraph>请参阅 <reference internal="True" refid="class-performance-method-get-custom-monitor"><inline classes="std std-ref">get_custom_monitor</inline></reference>，以查询自定义性能监视器的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-performance-method-get-monitor-modification-time"></target>
            <paragraph classes="classref-method" ids="class-performance-method-get-monitor-modification-time" names="class_performance_method_get_monitor_modification_time"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_monitor_modification_time</strong>() <reference internal="True" refid="class-performance-method-get-monitor-modification-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自定义监视器被添加/删除时的最后一个刻度（自引擎启动以来的微秒数）。当该监视器更新时，它被设置为 <reference internal="True" refuri="class_time#class-time-method-get-ticks-usec"><inline classes="std std-ref">Time.get_ticks_usec</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-performance-method-has-custom-monitor"></target>
            <paragraph classes="classref-method" ids="class-performance-method-has-custom-monitor" names="class_performance_method_has_custom_monitor"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_custom_monitor</strong>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-performance-method-has-custom-monitor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果存在具有给定 <literal>id</literal> 的自定义监视器，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-performance-method-remove-custom-monitor"></target>
            <paragraph classes="classref-method" ids="class-performance-method-remove-custom-monitor" names="class_performance_method_remove_custom_monitor"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_custom_monitor</strong>(id: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-performance-method-remove-custom-monitor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除具有给定 <literal>id</literal> 的自定义监视器。如果给定的 <literal>id</literal> 已经不存在，则打印一个错误。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
