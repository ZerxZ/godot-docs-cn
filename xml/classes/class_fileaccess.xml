<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_fileaccess.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/FileAccess.xml.</comment>
    <target refid="class-fileaccess"></target>
    <section ids="fileaccess class-fileaccess" names="fileaccess class_fileaccess">
        <title>FileAccess</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>提供用于文件读写操作的方法。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类可以用于在用户设备的文件系统中永久存储数据，也可以从中读取数据。适用于存储游戏存档数据或玩家配置文件。</paragraph>
            <paragraph>下面是一个关于如何写入和读取文件的示例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func save_to_file(content):
    var file = FileAccess.open("user://save_game.dat", FileAccess.WRITE)
    file.store_string(content)

func load_from_file():
    var file = FileAccess.open("user://save_game.dat", FileAccess.READ)
    var content = file.get_as_text()
    return content</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void SaveToFile(string content)
{
    using var file = FileAccess.Open("user://save_game.dat", FileAccess.ModeFlags.Write);
    file.StoreString(content);
}

public string LoadFromFile()
{
    using var file = FileAccess.Open("user://save_game.dat", FileAccess.ModeFlags.Read);
    string content = file.GetAsText();
    return content;
}</literal_block>
                </div>
            </container>
            <paragraph>在上面的例子中，文件将被保存在<reference internal="True" refuri="../tutorials/io/data_paths"><inline classes="doc">数据路径</inline></reference>文件中指定的用户数据文件夹中。</paragraph>
            <paragraph><strong>FileAccess</strong> 会在释放时关闭，超出作用于、赋值为 <literal>null</literal> 等情况都会导致释放。可以使用 <reference internal="True" refid="class-fileaccess-method-close"><inline classes="std std-ref">close</inline></reference> 在此之前显式关闭。在 C# 中，引用必须手动释放，可以通过 <literal>using</literal> 语句或直接调用 <literal>Dispose</literal> 方法来完成。</paragraph>
            <paragraph><strong>注意：</strong>要在导出后访问项目资源，建议使用 <reference internal="True" refuri="class_resourceloader#class-resourceloader"><inline classes="std std-ref">ResourceLoader</inline></reference> 而不是 <strong>FileAccess</strong>，因为有些文件已被转换为特定于引擎的格式，并且它们的原始源文件可能并不存在于导出的 PCK 包中。</paragraph>
            <paragraph><strong>注意：</strong>只有当进程“正常”退出时（例如通过单击窗口管理器的关闭按钮或按 <strong>Alt + F4</strong>），文件才会自动关闭。如果在项目运行时按 <strong>F8</strong> 停止项目执行，则不会关闭文件，因为游戏进程将被杀死。可以通过定期调用 <reference internal="True" refid="class-fileaccess-method-flush"><inline classes="std std-ref">flush</inline></reference> 来解决这个问题。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/filesystem"><inline classes="doc">文件系统</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/2755">3D 体素演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="57"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-property-big-endian"><inline classes="std std-ref">big_endian</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="79"></colspec>
                    <colspec colwidth="254"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-close"><inline classes="std std-ref">close</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-eof-reached"><inline classes="std std-ref">eof_reached</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-file-exists"><inline classes="std std-ref">file_exists</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-flush"><inline classes="std std-ref">flush</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-8"><inline classes="std std-ref">get_8</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-16"><inline classes="std std-ref">get_16</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-32"><inline classes="std std-ref">get_32</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-64"><inline classes="std std-ref">get_64</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-as-text"><inline classes="std std-ref">get_as_text</inline></reference>(skip_cr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-buffer"><inline classes="std std-ref">get_buffer</inline></reference>(length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-csv-line"><inline classes="std std-ref">get_csv_line</inline></reference>(delim: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = ",") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-double"><inline classes="std std-ref">get_double</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-error"><inline classes="std std-ref">get_error</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-file-as-bytes"><inline classes="std std-ref">get_file_as_bytes</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-file-as-string"><inline classes="std std-ref">get_file_as_string</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-float"><inline classes="std std-ref">get_float</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-hidden-attribute"><inline classes="std std-ref">get_hidden_attribute</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-length"><inline classes="std std-ref">get_length</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-line"><inline classes="std std-ref">get_line</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-md5"><inline classes="std std-ref">get_md5</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-modified-time"><inline classes="std std-ref">get_modified_time</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-pascal-string"><inline classes="std std-ref">get_pascal_string</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-path"><inline classes="std std-ref">get_path</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-path-absolute"><inline classes="std std-ref">get_path_absolute</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-position"><inline classes="std std-ref">get_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-read-only-attribute"><inline classes="std std-ref">get_read_only_attribute</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-real"><inline classes="std std-ref">get_real</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-sha256"><inline classes="std std-ref">get_sha256</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-unix-permissions"><inline classes="std std-ref">get_unix_permissions</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-get-var"><inline classes="std std-ref">get_var</inline></reference>(allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-is-open"><inline classes="std std-ref">is_open</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-open"><inline classes="std std-ref">open</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-open-compressed"><inline classes="std std-ref">open_compressed</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, mode_flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>, compression_mode: <reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> = 0) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-open-encrypted"><inline classes="std std-ref">open_encrypted</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, mode_flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-open-encrypted-with-pass"><inline classes="std std-ref">open_encrypted_with_pass</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, mode_flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>, pass: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-resize"><inline classes="std std-ref">resize</inline></reference>(length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-seek"><inline classes="std std-ref">seek</inline></reference>(position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-seek-end"><inline classes="std std-ref">seek_end</inline></reference>(position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-set-hidden-attribute"><inline classes="std std-ref">set_hidden_attribute</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-set-read-only-attribute"><inline classes="std std-ref">set_read_only_attribute</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ro: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-set-unix-permissions"><inline classes="std std-ref">set_unix_permissions</inline></reference>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, permissions: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference>]) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-8"><inline classes="std std-ref">store_8</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-16"><inline classes="std std-ref">store_16</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-32"><inline classes="std std-ref">store_32</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-64"><inline classes="std std-ref">store_64</inline></reference>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-buffer"><inline classes="std std-ref">store_buffer</inline></reference>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-csv-line"><inline classes="std std-ref">store_csv_line</inline></reference>(values: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, delim: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = ",")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-double"><inline classes="std std-ref">store_double</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-float"><inline classes="std std-ref">store_float</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-line"><inline classes="std std-ref">store_line</inline></reference>(line: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-pascal-string"><inline classes="std std-ref">store_pascal_string</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-real"><inline classes="std std-ref">store_real</inline></reference>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-string"><inline classes="std std-ref">store_string</inline></reference>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fileaccess-method-store-var"><inline classes="std std-ref">store_var</inline></reference>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, full_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-fileaccess-modeflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-fileaccess-modeflags" names="enum_fileaccess_modeflags">enum <strong>ModeFlags</strong>: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fileaccess-constant-read"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-read" names="class_fileaccess_constant_read"><reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference> <strong>READ</strong> = <literal>1</literal></paragraph>
            <paragraph>打开文件进行读取操作。光标位于文件的开头。</paragraph>
            <target refid="class-fileaccess-constant-write"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-write" names="class_fileaccess_constant_write"><reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference> <strong>WRITE</strong> = <literal>2</literal></paragraph>
            <paragraph>打开文件进行写操作。如果文件不存在则会创建该文件，如果存在则会截断。</paragraph>
            <paragraph><strong>注意：</strong>创建文件必须在已有目录中执行。如果要递归创建文件路径中的目录，见 <reference internal="True" refuri="class_diraccess#class-diraccess-method-make-dir-recursive"><inline classes="std std-ref">DirAccess.make_dir_recursive</inline></reference>。</paragraph>
            <target refid="class-fileaccess-constant-read-write"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-read-write" names="class_fileaccess_constant_read_write"><reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference> <strong>READ_WRITE</strong> = <literal>3</literal></paragraph>
            <paragraph>打开文件用于读写操作。不截断文件。光标位于文件的开头。</paragraph>
            <target refid="class-fileaccess-constant-write-read"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-write-read" names="class_fileaccess_constant_write_read"><reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference> <strong>WRITE_READ</strong> = <literal>7</literal></paragraph>
            <paragraph>打开文件进行读写操作。如果文件不存在则会创建该文件，如果存在则会截断。光标位于文件的开头。</paragraph>
            <paragraph><strong>注意：</strong>创建文件必须在已有目录中执行。如果要递归创建文件路径中的目录，见 <reference internal="True" refuri="class_diraccess#class-diraccess-method-make-dir-recursive"><inline classes="std std-ref">DirAccess.make_dir_recursive</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-fileaccess-compressionmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-fileaccess-compressionmode" names="enum_fileaccess_compressionmode">enum <strong>CompressionMode</strong>: <reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fileaccess-constant-compression-fastlz"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-compression-fastlz" names="class_fileaccess_constant_compression_fastlz"><reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> <strong>COMPRESSION_FASTLZ</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 <reference name="FastLZ" refuri="https://fastlz.org/">FastLZ</reference> 压缩方法。</paragraph>
            <target refid="class-fileaccess-constant-compression-deflate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-compression-deflate" names="class_fileaccess_constant_compression_deflate"><reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> <strong>COMPRESSION_DEFLATE</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 <reference name="DEFLATE" refuri="https://en.wikipedia.org/wiki/DEFLATE">DEFLATE</reference> 压缩方法。</paragraph>
            <target refid="class-fileaccess-constant-compression-zstd"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-compression-zstd" names="class_fileaccess_constant_compression_zstd"><reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> <strong>COMPRESSION_ZSTD</strong> = <literal>2</literal></paragraph>
            <paragraph>使用 <reference name="Zstandard" refuri="https://facebook.github.io/zstd/">Zstandard</reference> 压缩方法。</paragraph>
            <target refid="class-fileaccess-constant-compression-gzip"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-compression-gzip" names="class_fileaccess_constant_compression_gzip"><reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> <strong>COMPRESSION_GZIP</strong> = <literal>3</literal></paragraph>
            <paragraph>使用 <reference name="gzip" refuri="https://www.gzip.org/">gzip</reference> 压缩方法。</paragraph>
            <target refid="class-fileaccess-constant-compression-brotli"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-compression-brotli" names="class_fileaccess_constant_compression_brotli"><reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> <strong>COMPRESSION_BROTLI</strong> = <literal>4</literal></paragraph>
            <paragraph>使用 <reference name="brotli" refuri="https://github.com/google/brotli">brotli</reference> 压缩方法（仅支持解压缩）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-fileaccess-unixpermissionflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-fileaccess-unixpermissionflags" names="enum_fileaccess_unixpermissionflags">flags <strong>UnixPermissionFlags</strong>: <reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-fileaccess-constant-unix-read-owner"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-read-owner" names="class_fileaccess_constant_unix_read_owner"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_READ_OWNER</strong> = <literal>256</literal></paragraph>
            <paragraph>读取所有者比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-write-owner"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-write-owner" names="class_fileaccess_constant_unix_write_owner"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_WRITE_OWNER</strong> = <literal>128</literal></paragraph>
            <paragraph>写入所有者比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-execute-owner"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-execute-owner" names="class_fileaccess_constant_unix_execute_owner"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_EXECUTE_OWNER</strong> = <literal>64</literal></paragraph>
            <paragraph>执行所有者比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-read-group"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-read-group" names="class_fileaccess_constant_unix_read_group"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_READ_GROUP</strong> = <literal>32</literal></paragraph>
            <paragraph>读取组比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-write-group"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-write-group" names="class_fileaccess_constant_unix_write_group"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_WRITE_GROUP</strong> = <literal>16</literal></paragraph>
            <paragraph>写入组比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-execute-group"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-execute-group" names="class_fileaccess_constant_unix_execute_group"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_EXECUTE_GROUP</strong> = <literal>8</literal></paragraph>
            <paragraph>执行组比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-read-other"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-read-other" names="class_fileaccess_constant_unix_read_other"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_READ_OTHER</strong> = <literal>4</literal></paragraph>
            <paragraph>读取其他比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-write-other"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-write-other" names="class_fileaccess_constant_unix_write_other"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_WRITE_OTHER</strong> = <literal>2</literal></paragraph>
            <paragraph>写入其他比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-execute-other"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-execute-other" names="class_fileaccess_constant_unix_execute_other"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_EXECUTE_OTHER</strong> = <literal>1</literal></paragraph>
            <paragraph>执行其他比特位。</paragraph>
            <target refid="class-fileaccess-constant-unix-set-user-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-set-user-id" names="class_fileaccess_constant_unix_set_user_id"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_SET_USER_ID</strong> = <literal>2048</literal></paragraph>
            <paragraph>在执行比特位上设置用户 ID 。</paragraph>
            <target refid="class-fileaccess-constant-unix-set-group-id"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-set-group-id" names="class_fileaccess_constant_unix_set_group_id"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_SET_GROUP_ID</strong> = <literal>1024</literal></paragraph>
            <paragraph>在执行位上设置组 ID。</paragraph>
            <target refid="class-fileaccess-constant-unix-restricted-delete"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-fileaccess-constant-unix-restricted-delete" names="class_fileaccess_constant_unix_restricted_delete"><reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference> <strong>UNIX_RESTRICTED_DELETE</strong> = <literal>512</literal></paragraph>
            <paragraph>限制删除（粘性）比特位。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-fileaccess-property-big-endian"></target>
            <paragraph classes="classref-property" ids="class-fileaccess-property-big-endian" names="class_fileaccess_property_big_endian"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>big_endian</strong> <reference internal="True" refid="class-fileaccess-property-big-endian"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_big_endian</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_big_endian</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则文件用大端<reference name="字节序" refuri="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F">字节序</reference>读取。如果为 <literal>false</literal>，则文件以小端字节序读取。如果有疑问，请将其保留为 <literal>false</literal>，因为大多数文件都是用小端字节序编写的。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-fileaccess-property-big-endian"><inline classes="std std-ref">big_endian</inline></reference> 只与文件格式有关，与 CPU 类型无关。CPU 字节序不会影响写入文件的默认字节序。</paragraph>
            <paragraph><strong>注意：</strong>每当打开文件时，该选项总是被重置为 <literal>false</literal>。因此，必须在打开文件<emphasis>之后</emphasis>设置 <reference internal="True" refid="class-fileaccess-property-big-endian"><inline classes="std std-ref">big_endian</inline></reference>，而不是之前。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-fileaccess-method-close"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-close" names="class_fileaccess_method_close"><abbreviation explanation="无返回值。">void</abbreviation> <strong>close</strong>() <reference internal="True" refid="class-fileaccess-method-close"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭当前打开的文件，阻止后续的读写操作。如果要将数据持久化到磁盘而不关闭文件，请使用 <reference internal="True" refid="class-fileaccess-method-flush"><inline classes="std std-ref">flush</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><strong>FileAccess</strong> 被释放时会自动关闭，释放发生在离开作用域或被赋值为 <literal>null</literal> 时。在 C# 中，使用完后必须弃置该引用，可以使用 <literal>using</literal> 语句或直接调用 <literal>Dispose</literal> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-eof-reached"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-eof-reached" names="class_fileaccess_method_eof_reached"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>eof_reached</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-eof-reached"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文件光标已经读到了文件末尾，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong><literal>eof_reached() == false</literal> 不能用于检查是否有更多可用数据。要在有更多可用数据时循环，请使用：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">while file.get_position() &lt; file.get_length():
    # 读取数据</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">while (file.GetPosition() &lt; file.GetLength())
{
    // 读取数据
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-file-exists"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-file-exists" names="class_fileaccess_method_file_exists"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>file_exists</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-file-exists"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文件存在于给定路径中，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>许多资源类型是导入的（例如纹理或声音文件），它们的源资产不会包含在导出的游戏中，因为只使用导入的版本。有关考虑资源重新映射的替代方法，请参阅 <reference internal="True" refuri="class_resourceloader#class-resourceloader-method-exists"><inline classes="std std-ref">ResourceLoader.exists</inline></reference>。</paragraph>
            <paragraph>对于非静态的相对等效项，请使用 <reference internal="True" refuri="class_diraccess#class-diraccess-method-file-exists"><inline classes="std std-ref">DirAccess.file_exists</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-flush"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-flush" names="class_fileaccess_method_flush"><abbreviation explanation="无返回值。">void</abbreviation> <strong>flush</strong>() <reference internal="True" refid="class-fileaccess-method-flush"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件的缓冲区写入磁盘。当关闭文件时，会自动进行刷新。这意味着你不需要在关闭文件前手动调用 <reference internal="True" refid="class-fileaccess-method-flush"><inline classes="std std-ref">flush</inline></reference>。尽管如此，即使项目崩溃而不是正常关闭，调用 <reference internal="True" refid="class-fileaccess-method-flush"><inline classes="std std-ref">flush</inline></reference> 仍可用于确保数据安全。</paragraph>
            <paragraph><strong>注意：</strong>只有在你真正需要的时候才调用 <reference internal="True" refid="class-fileaccess-method-flush"><inline classes="std std-ref">flush</inline></reference>。否则，它会因不断的磁盘写入而降低性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-8"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-8" names="class_fileaccess_method_get_8"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_8</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以整数形式返回文件中接下来的 8 位。请参阅 <reference internal="True" refid="class-fileaccess-method-store-8"><inline classes="std std-ref">store_8</inline></reference>，详细了解哪些值可以通过这种方式存储和检索。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-16"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-16" names="class_fileaccess_method_get_16"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_16</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-16"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以整数形式返回文件中接下来的 16 位。请参阅 <reference internal="True" refid="class-fileaccess-method-store-16"><inline classes="std std-ref">store_16</inline></reference>，以获取有关可以通过这种方式存储和检索哪些值的详细信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-32"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-32" names="class_fileaccess_method_get_32"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_32</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-32"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以整数形式返回文件中接下来的 32 位。请参阅<reference internal="True" refid="class-fileaccess-method-store-32"><inline classes="std std-ref">store_32</inline></reference>，以获取有关可以通过这种方式存储和检索哪些值的详细信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-64"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-64" names="class_fileaccess_method_get_64"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_64</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-64"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以整数形式返回文件中接下来的 64 位。请参阅 <reference internal="True" refid="class-fileaccess-method-store-64"><inline classes="std std-ref">store_64</inline></reference>，以获取有关可以通过这种方式存储和检索哪些值的详细信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-as-text"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-as-text" names="class_fileaccess_method_get_as_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_as_text</strong>(skip_cr: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-as-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 形式返回整个文件。文本会按照 UTF-8 编码解析。</paragraph>
            <paragraph>如果 <literal>skip_cr</literal> 为 <literal>true</literal>，解析 UTF-8 时会忽略回车符（<literal>\r</literal>，CR），因此只使用换行符（<literal>\n</literal>，LF）表示新一行的开始（Unix 规范）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-buffer"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-buffer" names="class_fileaccess_method_get_buffer"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_buffer</strong>(length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件中接下来的 <literal>length</literal> 个字节作为 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> 返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-csv-line"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-csv-line" names="class_fileaccess_method_get_csv_line"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_csv_line</strong>(delim: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = ",") <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-csv-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 CSV（逗号分隔值）格式返回文件的下一个值。可以传递不同的分隔符 <literal>delim</literal>，以使用默认 <literal>","</literal>（逗号）以外的其他分隔符。这个分隔符必须为一个字符长，且不能是双引号。</paragraph>
            <paragraph>文本被解析为 UTF-8 编码。如果文本值包含分隔符，则它们必须用双引号引起来。文本值中的双引号可以通过将它们的出现次数加倍来转义。</paragraph>
            <paragraph>例如，以下 CSV 行是有效的，每行将被正确解析为两个字符串：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Alice,"Hello, Bob!"
Bob,Alice! What a surprise!
Alice,"I thought you'd reply with ""Hello, world""."</literal_block>
            <paragraph>请注意第二行如何省略封闭的引号，因为它不包含分隔符。然而它<emphasis>可以</emphasis>很好地使用引号，它只是为了演示目的而没有编写。第三行必须为每个需要被解析为引号而不是文本值的末尾而使用 <literal>""</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-double"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-double" names="class_fileaccess_method_get_double"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_double</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-double"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件中接下来的 64 位作为浮点数返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-error"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-error" names="class_fileaccess_method_get_error"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>get_error</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-error"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回试图执行操作时发生的最后一个错误。请与 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 中的 <literal>ERR_FILE_*</literal> 常量比较。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-file-as-bytes"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-file-as-bytes" names="class_fileaccess_method_get_file_as_bytes"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_file_as_bytes</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-file-as-bytes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整个 <literal>path</literal> 文件内容作为 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> 返回，无需任何解码。</paragraph>
            <paragraph>如果打开文件时发生错误，则返回空的 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>。你可以使用 <reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference> 来检查发生的错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-file-as-string"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-file-as-string" names="class_fileaccess_method_get_file_as_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_file_as_string</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-file-as-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整个 <literal>path</literal> 文件内容以 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 形式返回。文本被解释为 UTF-8 编码。</paragraph>
            <paragraph>如果打开文件时发生错误，则返回空 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。可以使用 <reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference> 来检查发生的错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-float"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-float" names="class_fileaccess_method_get_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_float</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件中接下来的 32 位作为浮点数返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-hidden-attribute"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-hidden-attribute" names="class_fileaccess_method_get_hidden_attribute"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_hidden_attribute</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-hidden-attribute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文件 <literal>hidden</literal> 属性已设置，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 iOS、BSD、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-length"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-length" names="class_fileaccess_method_get_length"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_length</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-length"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该文件的大小，单位为字节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-line"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-line" names="class_fileaccess_method_get_line"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_line</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>以 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 的形式返回文件中的下一行。返回的字符串不包含换行符（<literal>\n</literal>）和回车符（<literal>\r</literal>），但是会包含开头和结尾的其他空白字符。</paragraph>
            <paragraph>文本按照 UTF-8 编码规则进行解析。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-md5"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-md5" names="class_fileaccess_method_get_md5"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_md5</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-md5"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个给定路径文件的 MD5 字符串，如果失败则返回一个空的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-modified-time"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-modified-time" names="class_fileaccess_method_get_modified_time"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_modified_time</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-modified-time"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>file</literal> 的最后修改时间，使用 Unix 时间戳格式，出错时返回 <literal>0</literal>。这个 Unix 时间戳可以用 <reference internal="True" refuri="class_time#class-time"><inline classes="std std-ref">Time</inline></reference> 单例转换为其他格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-open-error"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-open-error" names="class_fileaccess_method_get_open_error"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>get_open_error</strong>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前线程中最后一次 <reference internal="True" refid="class-fileaccess-method-open"><inline classes="std std-ref">open</inline></reference> 调用的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-pascal-string"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-pascal-string" names="class_fileaccess_method_get_pascal_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_pascal_string</strong>() <reference internal="True" refid="class-fileaccess-method-get-pascal-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文件中按照 Pascal 格式保存的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 字符串。</paragraph>
            <paragraph>将按照 UTF-8 编码解析文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-path"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-path" names="class_fileaccess_method_get_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_path</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前打开的文件的路径为<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-path-absolute"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-path-absolute" names="class_fileaccess_method_get_path_absolute"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_path_absolute</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-path-absolute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回当前打开的文件的绝对路径为<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-position"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-position" names="class_fileaccess_method_get_position"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文件光标的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-read-only-attribute"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-read-only-attribute" names="class_fileaccess_method_get_read_only_attribute"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_read_only_attribute</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-read-only-attribute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文件 <literal>read only</literal> 属性已设置，则返回 <literal>true</literal>。</paragraph>
            <paragraph><strong>注意：</strong>此方法在 iOS、BSD、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-real"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-real" names="class_fileaccess_method_get_real"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_real</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-real"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件中接下来的若干位以浮点数形式返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-sha256"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-sha256" names="class_fileaccess_method_get_sha256"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_sha256</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-sha256"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个表示给定路径下文件的 SHA-256 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，失败时返回一个空的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-unix-permissions"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-unix-permissions" names="class_fileaccess_method_get_unix_permissions"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference>] <strong>get_unix_permissions</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-unix-permissions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文件的 UNIX 权限。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 iOS、Linux/BSD 和 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-get-var"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-get-var" names="class_fileaccess_method_get_var"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_var</strong>(allow_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-get-var"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文件中的下一个 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 值。如果 <literal>allow_objects</literal> 为 <literal>true</literal>，则允许解码对象。</paragraph>
            <paragraph>在内部，这使用与 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-bytes-to-var"><inline classes="std std-ref">@GlobalScope.bytes_to_var</inline></reference> 方法相同的解码机制。</paragraph>
            <paragraph><strong>警告：</strong>反序列化得到的对象可能包含被执行的代码。如果序列化的对象来自不受信任的来源，请不要使用这个选项，以避免潜在的安全威胁，如远程代码执行。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-is-open"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-is-open" names="class_fileaccess_method_is_open"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_open</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fileaccess-method-is-open"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果文件当前被打开，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-open"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-open" names="class_fileaccess_method_open"><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> <strong>open</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-open"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的 <strong>FileAccess</strong> 对象，会根据标志来确定以写入还是读取模式打开文件。</paragraph>
            <paragraph>如果打开文件失败，则返回 <literal>null</literal> 。你可以使用 <reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference> 来检查发生的错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-open-compressed"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-open-compressed" names="class_fileaccess_method_open_compressed"><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> <strong>open_compressed</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, mode_flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>, compression_mode: <reference internal="True" refid="enum-fileaccess-compressionmode"><inline classes="std std-ref">CompressionMode</inline></reference> = 0) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-open-compressed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的 <strong>FileAccess</strong> 对象，并打开一个压缩文件以进行读取或写入。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-fileaccess-method-open-compressed"><inline classes="std std-ref">open_compressed</inline></reference> 只能读取 Godot 保存的文件，不能读取第三方压缩格式。有关解决方法，请参阅 <reference name="GitHub 问题 #28999" refuri="https://github.com/godotengine/godot/issues/28999">GitHub 问题 #28999</reference>。</paragraph>
            <paragraph>如果打开文件失败，则返回 <literal>null</literal>。可以使用 <reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference> 来检查发生的错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-open-encrypted"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-open-encrypted" names="class_fileaccess_method_open_encrypted"><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> <strong>open_encrypted</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, mode_flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-open-encrypted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的 <strong>FileAccess</strong> 对象，并以写入或读取模式打开一个加密文件。需要传入一个二进制密钥来加密/解密它。</paragraph>
            <paragraph><strong>注意：</strong>提供的密钥必须是 32 字节长。</paragraph>
            <paragraph>如果打开文件失败，则返回 <literal>null</literal>。可以使用 <reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference> 来检查发生的错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-open-encrypted-with-pass"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-open-encrypted-with-pass" names="class_fileaccess_method_open_encrypted_with_pass"><reference internal="True" refid="class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> <strong>open_encrypted_with_pass</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, mode_flags: <reference internal="True" refid="enum-fileaccess-modeflags"><inline classes="std std-ref">ModeFlags</inline></reference>, pass: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-open-encrypted-with-pass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的 <strong>FileAccess</strong> 对象，以写或读的模式打开一个加密文件。你需要传递一个密码来加密/解密它。</paragraph>
            <paragraph>如果打开文件失败，则返回 <literal>null</literal> 。你可以使用 <reference internal="True" refid="class-fileaccess-method-get-open-error"><inline classes="std std-ref">get_open_error</inline></reference> 来检查发生的错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-resize"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-resize" names="class_fileaccess_method_resize"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>resize</strong>(length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fileaccess-method-resize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件大小修改为指定长度。文件必须使用允许写操作的模式打开。如果扩展了文件，则会追加 NUL 字符。如果截断了文件，则会丢弃从文件末尾到文件原长度之间的所有数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-seek"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-seek" names="class_fileaccess_method_seek"><abbreviation explanation="无返回值。">void</abbreviation> <strong>seek</strong>(position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fileaccess-method-seek"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件的读/写光标改变到指定的位置（从文件开始的字节数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-seek-end"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-seek-end" names="class_fileaccess_method_seek_end"><abbreviation explanation="无返回值。">void</abbreviation> <strong>seek_end</strong>(position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-fileaccess-method-seek-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将文件的读/写光标改变到指定的位置（从文件的末端算起，以字节为单位）。</paragraph>
            <paragraph><strong>注意：</strong>这是一个偏移量，所以你应该使用负数，否则光标会在文件的末端。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-set-hidden-attribute"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-set-hidden-attribute" names="class_fileaccess_method_set_hidden_attribute"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>set_hidden_attribute</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, hidden: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-set-hidden-attribute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置文件 <strong>hidden</strong> 属性。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 iOS、BSD、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-set-read-only-attribute"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-set-read-only-attribute" names="class_fileaccess_method_set_read_only_attribute"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>set_read_only_attribute</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ro: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-set-read-only-attribute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置文件 <strong>read only</strong> 属性。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 iOS、BSD、macOS 和 Windows 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-set-unix-permissions"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-set-unix-permissions" names="class_fileaccess_method_set_unix_permissions"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>set_unix_permissions</strong>(file: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, permissions: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refid="enum-fileaccess-unixpermissionflags"><inline classes="std std-ref">UnixPermissionFlags</inline></reference>]) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-fileaccess-method-set-unix-permissions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置文件的 UNIX 权限。</paragraph>
            <paragraph><strong>注意：</strong>该方法在 iOS、Linux/BSD 和 macOS 上实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-8"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-8" names="class_fileaccess_method_store_8"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_8</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个整数以 8 位形式存储在文件中。</paragraph>
            <paragraph><strong>注意：</strong><literal>value</literal> 应该位于 <literal>[0, 255]</literal> 的区间内。任何其他的值都会溢出并环绕。</paragraph>
            <paragraph>要存储有符号的整数，请使用 <reference internal="True" refid="class-fileaccess-method-store-64"><inline classes="std std-ref">store_64</inline></reference>，或者手动转换（见 <reference internal="True" refid="class-fileaccess-method-store-16"><inline classes="std std-ref">store_16</inline></reference> 的例子）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-16"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-16" names="class_fileaccess_method_store_16"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_16</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-16"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个整数以 16 位形式存储在文件中。</paragraph>
            <paragraph><strong>注意：</strong><literal>value</literal> 应该位于 <literal>[0, 2^16 - 1]</literal> 区间内。任何其他的值都会溢出并进行环绕。</paragraph>
            <paragraph>要存储有符号的整数，请使用 <reference internal="True" refid="class-fileaccess-method-store-64"><inline classes="std std-ref">store_64</inline></reference> 或者从区间 <literal>[-2^15, 2^15 - 1]</literal> 中存储一个有符号的整数（即保留一位作为符号），在读取时手动计算其符号。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">const MAX_15B = 1 &lt;&lt; 15
const MAX_16B = 1 &lt;&lt; 16

func unsigned16_to_signed(unsigned):
    return (unsigned + MAX_15B) % MAX_16B - MAX_15B

func _ready():
    var f = FileAccess.open("user://file.dat", FileAccess.WRITE_READ)
    f.store_16(-42) # 发生环绕，存储 65494 (2^16 - 42)。
    f.store_16(121) # 在范围内，存储 121。
    f.seek(0) # 回到开头，读取存储的值。
    var read1 = f.get_16() # 65494
    var read2 = f.get_16() # 121
    var converted1 = unsigned16_to_signed(read1) # -42
    var converted2 = unsigned16_to_signed(read2) # 121</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    using var f = FileAccess.Open("user://file.dat", FileAccess.ModeFlags.WriteRead);
    f.Store16(unchecked((ushort)-42)); // 发生环绕，存储 65494 (2^16 - 42)。
    f.Store16(121); // 在范围内，存储 121。
    f.Seek(0); // 回到开头，读取存储的值。
    ushort read1 = f.Get16(); // 65494
    ushort read2 = f.Get16(); // 121
    short converted1 = (short)read1; // -42
    short converted2 = (short)read2; // 121
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-32"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-32" names="class_fileaccess_method_store_32"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_32</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-32"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个整数以 32 位形式存储在文件中。</paragraph>
            <paragraph><strong>注意：</strong><literal>value</literal> 应该位于 <literal>[0, 2^32 - 1]</literal> 区间内。任何其他的值都会溢出并环绕。</paragraph>
            <paragraph>要存储有符号的整数，请使用 <reference internal="True" refid="class-fileaccess-method-store-64"><inline classes="std std-ref">store_64</inline></reference>，或者手动转换（见 <reference internal="True" refid="class-fileaccess-method-store-16"><inline classes="std std-ref">store_16</inline></reference> 的例子）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-64"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-64" names="class_fileaccess_method_store_64"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_64</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-64"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个整数以 64 位形式存储在文件中。</paragraph>
            <paragraph><strong>注意：</strong><literal>value</literal> 必须位于 <literal>[-2^63, 2^63 - 1]</literal> 的区间内（即有效的 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 值）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-buffer"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-buffer" names="class_fileaccess_method_store_buffer"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_buffer</strong>(buffer: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-buffer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在文件中存储给定的字节数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-csv-line"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-csv-line" names="class_fileaccess_method_store_csv_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_csv_line</strong>(values: <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>, delim: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = ",") <reference internal="True" refid="class-fileaccess-method-store-csv-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 作为 CSV（逗号分隔值）格式的行存储在文件中。你可以传递不同的分隔符 <literal>delim</literal> 以使用默认 <literal>","</literal>（逗号）以外的其他分隔符。此分隔符的长度必须为一个字符。</paragraph>
            <paragraph>将使用 UTF-8 编码文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-double"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-double" names="class_fileaccess_method_store_double"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_double</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-double"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个浮点数以 64 位形式存储在文件中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-float"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-float" names="class_fileaccess_method_store_float"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_float</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-float"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个浮点数以 32 位形式存储在文件中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-line"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-line" names="class_fileaccess_method_store_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_line</strong>(line: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>line</literal> 附加到文件末尾，并在后面加上一个换行符（<literal>\n</literal>），将使用 UTF-8 编码文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-pascal-string"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-pascal-string" names="class_fileaccess_method_store_pascal_string"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_pascal_string</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-pascal-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将给定的 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 以 Pascal 格式存储在文件中（即同时存储字符串的长度）。</paragraph>
            <paragraph>将使用 UTF-8 编码文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-real"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-real" names="class_fileaccess_method_store_real"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_real</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-real"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将浮点数存储在文件中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-string"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-string" names="class_fileaccess_method_store_string"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_string</strong>(string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-fileaccess-method-store-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>string</literal> 追加到文件中，不带换行，且将文本编码为 UTF-8。</paragraph>
            <paragraph><strong>注意：</strong>本方法是用来写入文本文件的。字符串会被存储为 UTF-8 编码的缓冲区，不带字符串长度或末尾零，这意味着它不能被轻易加载回来。如果想在二进制文件中存储一个可检索的字符串，可以考虑改用 <reference internal="True" refid="class-fileaccess-method-store-pascal-string"><inline classes="std std-ref">store_pascal_string</inline></reference>。对于从文本文件中检索字符串，可以使用 <literal>get_buffer(length).get_string_from_utf8()</literal>（如果知道长度）或 <reference internal="True" refid="class-fileaccess-method-get-as-text"><inline classes="std std-ref">get_as_text</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fileaccess-method-store-var"></target>
            <paragraph classes="classref-method" ids="class-fileaccess-method-store-var" names="class_fileaccess_method_store_var"><abbreviation explanation="无返回值。">void</abbreviation> <strong>store_var</strong>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, full_objects: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-fileaccess-method-store-var"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在文件中存储任何 Variant 值。如果 <literal>full_objects</literal> 为 <literal>true</literal>，则允许编码对象（并且可能包含代码）。</paragraph>
            <paragraph>在内部，这使用与 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-var-to-bytes"><inline classes="std std-ref">@GlobalScope.var_to_bytes</inline></reference> 方法相同的编码机制。</paragraph>
            <paragraph><strong>注意：</strong>并非所有属性都包括在内。只有配置了 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-storage"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_STORAGE</inline></reference> 标志集的属性才会被序列化。可以通过覆盖类中的 <reference internal="True" refuri="class_object#class-object-private-method-get-property-list"><inline classes="std std-ref">Object._get_property_list</inline></reference> 方法来向属性添加新的使用标志。还可以通过调用 <reference internal="True" refuri="class_object#class-object-private-method-get-property-list"><inline classes="std std-ref">Object._get_property_list</inline></reference> 来检查属性使用的配置方式。有关可能的使用标志，请参阅 <reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
