<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_audiostreamplayback.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AudioStreamPlayback.xml.</comment>
    <target refid="class-audiostreamplayback"></target>
    <section ids="audiostreamplayback class-audiostreamplayback" names="audiostreamplayback class_audiostreamplayback">
        <title>AudioStreamPlayback</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_audiostreamplaybackinteractive#class-audiostreamplaybackinteractive"><inline classes="std std-ref">AudioStreamPlaybackInteractive</inline></reference>, <reference internal="True" refuri="class_audiostreamplaybackplaylist#class-audiostreamplaybackplaylist"><inline classes="std std-ref">AudioStreamPlaybackPlaylist</inline></reference>, <reference internal="True" refuri="class_audiostreamplaybackpolyphonic#class-audiostreamplaybackpolyphonic"><inline classes="std std-ref">AudioStreamPlaybackPolyphonic</inline></reference>, <reference internal="True" refuri="class_audiostreamplaybackresampled#class-audiostreamplaybackresampled"><inline classes="std std-ref">AudioStreamPlaybackResampled</inline></reference>, <reference internal="True" refuri="class_audiostreamplaybacksynchronized#class-audiostreamplaybacksynchronized"><inline classes="std std-ref">AudioStreamPlaybackSynchronized</inline></reference></paragraph>
        <paragraph>播放音频的元类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>可以播放、循环播放、暂停滚动播放音频。有关用法，请参阅 <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference> 和 <reference internal="True" refuri="class_audiostreamoggvorbis#class-audiostreamoggvorbis"><inline classes="std std-ref">AudioStreamOggVorbis</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="音频生成器演示" refuri="https://godotengine.org/asset-library/asset/2759">音频生成器演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="55"></colspec>
                    <colspec colwidth="179"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-get-loop-count"><inline classes="std std-ref">_get_loop_count</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-get-parameter"><inline classes="std std-ref">_get_parameter</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-get-playback-position"><inline classes="std std-ref">_get_playback_position</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-is-playing"><inline classes="std std-ref">_is_playing</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-mix"><inline classes="std std-ref">_mix</inline></reference>(buffer: <literal>AudioFrame*</literal>, rate_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, frames: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-seek"><inline classes="std std-ref">_seek</inline></reference>(position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-set-parameter"><inline classes="std std-ref">_set_parameter</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-start"><inline classes="std std-ref">_start</inline></reference>(from_pos: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-stop"><inline classes="std std-ref">_stop</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-private-method-tag-used-streams"><inline classes="std std-ref">_tag_used_streams</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiosampleplayback#class-audiosampleplayback"><inline classes="std std-ref">AudioSamplePlayback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-method-get-sample-playback"><inline classes="std std-ref">get_sample_playback</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audiostreamplayback-method-set-sample-playback"><inline classes="std std-ref">set_sample_playback</inline></reference>(playback_sample: <reference internal="True" refuri="class_audiosampleplayback#class-audiosampleplayback"><inline classes="std std-ref">AudioSamplePlayback</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-audiostreamplayback-private-method-get-loop-count"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-get-loop-count" names="class_audiostreamplayback_private_method__get_loop_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_loop_count</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-get-loop-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可覆盖的方法。应该返回该音频流已经循环了多少次。大多数内置播放始终返回 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-get-parameter"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-get-parameter" names="class_audiostreamplayback_private_method__get_parameter"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_parameter</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-get-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按名称返回播放参数的当前值（请参阅 <reference internal="True" refuri="class_audiostream#class-audiostream-private-method-get-parameter-list"><inline classes="std std-ref">AudioStream._get_parameter_list</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-get-playback-position"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-get-playback-position" names="class_audiostreamplayback_private_method__get_playback_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_get_playback_position</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-get-playback-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可覆盖的方法。应返回音频流的当前进度，单位为秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-is-playing"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-is-playing" names="class_audiostreamplayback_private_method__is_playing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_playing</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-is-playing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可覆盖的方法。如果该播放处于活动状态并正在播放其音频流，则应返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-mix"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-mix" names="class_audiostreamplayback_private_method__mix"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_mix</strong>(buffer: <literal>AudioFrame*</literal>, rate_scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, frames: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-mix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以自定义音频流的混合方式。即使播放未激活，也会调用该方法。</paragraph>
            <paragraph><strong>注意：</strong>在 GDScript 或 C# 中覆盖该方法没有用。只有 GDExtension 可以利用它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-seek"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-seek" names="class_audiostreamplayback_private_method__seek"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_seek</strong>(position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-seek"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以自定义在给定的 <literal>position</literal> 处查找该音频流时发生的情况，例如通过调用 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer-method-seek"><inline classes="std std-ref">AudioStreamPlayer.seek</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-set-parameter"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-set-parameter" names="class_audiostreamplayback_private_method__set_parameter"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_parameter</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-set-parameter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>按名称设置播放参数的当前值（请参阅 <reference internal="True" refuri="class_audiostream#class-audiostream-private-method-get-parameter-list"><inline classes="std std-ref">AudioStream._get_parameter_list</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-start"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-start" names="class_audiostreamplayback_private_method__start"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_start</strong>(from_pos: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-start"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以自定义在给定位置开始播放时发生的情况，例如通过调用 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer-method-play"><inline classes="std std-ref">AudioStreamPlayer.play</inline></reference> 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-stop"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-stop" names="class_audiostreamplayback_private_method__stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_stop</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖该方法以自定义播放停止时发生的情况，例如通过调用 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer-method-stop"><inline classes="std std-ref">AudioStreamPlayer.stop</inline></reference> 覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-private-method-tag-used-streams"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-private-method-tag-used-streams" names="class_audiostreamplayback_private_method__tag_used_streams"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_tag_used_streams</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-audiostreamplayback-private-method-tag-used-streams"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可覆盖的方法。如果播放处于活动状态并且 <reference internal="True" refuri="class_audioserver#class-audioserver-method-set-enable-tagging-used-audio-streams"><inline classes="std std-ref">AudioServer.set_enable_tagging_used_audio_streams</inline></reference> 已被设置为 <literal>true</literal>，则每当混合音频流时调用。编辑器插件可以使用该方法以“标记”音频流中的当前位置并将其显示在预览中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-method-get-sample-playback"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-method-get-sample-playback" names="class_audiostreamplayback_method_get_sample_playback"><reference internal="True" refuri="class_audiosampleplayback#class-audiosampleplayback"><inline classes="std std-ref">AudioSamplePlayback</inline></reference> <strong>get_sample_playback</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audiostreamplayback-method-get-sample-playback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Returns the <reference internal="True" refuri="class_audiosampleplayback#class-audiosampleplayback"><inline classes="std std-ref">AudioSamplePlayback</inline></reference> associated with this <strong>AudioStreamPlayback</strong> for playing back the audio sample of this stream.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audiostreamplayback-method-set-sample-playback"></target>
            <paragraph classes="classref-method" ids="class-audiostreamplayback-method-set-sample-playback" names="class_audiostreamplayback_method_set_sample_playback"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_sample_playback</strong>(playback_sample: <reference internal="True" refuri="class_audiosampleplayback#class-audiosampleplayback"><inline classes="std std-ref">AudioSamplePlayback</inline></reference>) <reference internal="True" refid="class-audiostreamplayback-method-set-sample-playback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Associates <reference internal="True" refuri="class_audiosampleplayback#class-audiosampleplayback"><inline classes="std std-ref">AudioSamplePlayback</inline></reference> to this <strong>AudioStreamPlayback</strong> for playing back the audio sample of this stream.</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
