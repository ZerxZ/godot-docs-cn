<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_physicsserver2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/PhysicsServer2D.xml.</comment>
    <target refid="class-physicsserver2d"></target>
    <section ids="physicsserver2d class-physicsserver2d" names="physicsserver2d class_physicsserver2d">
        <title>PhysicsServer2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_physicsserver2dextension#class-physicsserver2dextension"><inline classes="std std-ref">PhysicsServer2DExtension</inline></reference></paragraph>
        <paragraph>用于访问低阶 2D 物理的服务器接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>PhysicsServer2D 是负责所有 2D 物理的服务器。它可以直接创建和操作所有物理对象：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><emphasis>Space（空间）</emphasis>是用于物理仿真的自包含世界。它包含实体、区域和关节。可以对其状态进行查询，获取碰撞和相交信息，并且可以修改部分仿真参数。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>Shape（形状）</emphasis>是圆形、矩形、胶囊形、多边形等几何形状。加入到实体/区域中就可以用来进行碰撞检测，还可以带有相对于实体/区域原点的额外变换。实体/区域中可以添加多个（变换后的）形状，并且可以使用不同的局部变换将单个形状多次添加到实体/区域中。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>Body（实体）</emphasis>是物理对象，可以处于静态、运动学或刚性模式。可以对其状态进行查询和更新（例如位置、速度等）。可以设置力的集成回调，自定义实体的物理特性。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>Area（区域）</emphasis>是空间中的区块，可用于检测进入和离开它的实体和区域。可以设置实体的监视回调，报告进入/离开的实体形状，同样可以设置区域的监视回调。通过设置区域参数，可以在区域内覆盖重力和阻尼。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>Joint（关节）</emphasis>是两个实体之间或一个实体相对于某个点的约束。可以调整关节偏置和弹簧关节的放松长度等参数。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>PhysicsServer2D</strong> 中的物理对象可以独立创建和操作；不必将它们绑定到场景树中的节点。</paragraph>
            <paragraph><strong>注意：</strong>所有 2D 物理节点都在内部使用这个物理服务器。将物理节点添加到场景树，就会导致在物理服务器中创建相应的物理对象。刚体节点会注册回调，该回调会（在每次物理更新时）使用物理服务器中相应实体对象的变换更新该节点的变换。区域节点会注册回调，用来通知区域节点与物理服务器中相应区域对象的重叠。射线投射节点会查询物理服务器中相关空间的直接状态。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="308"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-add-shape"><inline classes="std std-ref">area_add_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform=Transform2D(1, 0, 0, 1, 0, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-attach-canvas-instance-id"><inline classes="std std-ref">area_attach_canvas_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-attach-object-instance-id"><inline classes="std std-ref">area_attach_object_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-clear-shapes"><inline classes="std std-ref">area_clear_shapes</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-create"><inline classes="std std-ref">area_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-canvas-instance-id"><inline classes="std std-ref">area_get_canvas_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-collision-layer"><inline classes="std std-ref">area_get_collision_layer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-collision-mask"><inline classes="std std-ref">area_get_collision_mask</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-object-instance-id"><inline classes="std std-ref">area_get_object_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-param"><inline classes="std std-ref">area_get_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-shape"><inline classes="std std-ref">area_get_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-shape-count"><inline classes="std std-ref">area_get_shape_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-shape-transform"><inline classes="std std-ref">area_get_shape_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-space"><inline classes="std std-ref">area_get_space</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-get-transform"><inline classes="std std-ref">area_get_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-remove-shape"><inline classes="std std-ref">area_remove_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-area-monitor-callback"><inline classes="std std-ref">area_set_area_monitor_callback</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-collision-layer"><inline classes="std std-ref">area_set_collision_layer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-collision-mask"><inline classes="std std-ref">area_set_collision_mask</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mask <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-monitor-callback"><inline classes="std std-ref">area_set_monitor_callback</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-monitorable"><inline classes="std std-ref">area_set_monitorable</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> monitorable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-param"><inline classes="std std-ref">area_set_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> param, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-shape"><inline classes="std std-ref">area_set_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-shape-disabled"><inline classes="std std-ref">area_set_shape_disabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-shape-transform"><inline classes="std std-ref">area_set_shape_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-space"><inline classes="std std-ref">area_set_space</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-area-set-transform"><inline classes="std std-ref">area_set_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-add-collision-exception"><inline classes="std std-ref">body_add_collision_exception</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> excepted_body <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-add-constant-central-force"><inline classes="std std-ref">body_add_constant_central_force</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-add-constant-force"><inline classes="std std-ref">body_add_constant_force</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position=Vector2(0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-add-constant-torque"><inline classes="std std-ref">body_add_constant_torque</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> torque <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-add-shape"><inline classes="std std-ref">body_add_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform=Transform2D(1, 0, 0, 1, 0, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-apply-central-force"><inline classes="std std-ref">body_apply_central_force</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-apply-central-impulse"><inline classes="std std-ref">body_apply_central_impulse</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> impulse <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-apply-force"><inline classes="std std-ref">body_apply_force</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position=Vector2(0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-apply-impulse"><inline classes="std std-ref">body_apply_impulse</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> impulse, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position=Vector2(0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-apply-torque"><inline classes="std std-ref">body_apply_torque</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> torque <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-apply-torque-impulse"><inline classes="std std-ref">body_apply_torque_impulse</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> impulse <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-attach-canvas-instance-id"><inline classes="std std-ref">body_attach_canvas_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-attach-object-instance-id"><inline classes="std std-ref">body_attach_object_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-clear-shapes"><inline classes="std std-ref">body_clear_shapes</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-create"><inline classes="std std-ref">body_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-canvas-instance-id"><inline classes="std std-ref">body_get_canvas_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-collision-layer"><inline classes="std std-ref">body_get_collision_layer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-collision-mask"><inline classes="std std-ref">body_get_collision_mask</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-collision-priority"><inline classes="std std-ref">body_get_collision_priority</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-constant-force"><inline classes="std std-ref">body_get_constant_force</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-constant-torque"><inline classes="std std-ref">body_get_constant_torque</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-continuous-collision-detection-mode"><inline classes="std std-ref">body_get_continuous_collision_detection_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_physicsdirectbodystate2d#class-physicsdirectbodystate2d"><inline classes="std std-ref">PhysicsDirectBodyState2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-direct-state"><inline classes="std std-ref">body_get_direct_state</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-max-contacts-reported"><inline classes="std std-ref">body_get_max_contacts_reported</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-mode"><inline classes="std std-ref">body_get_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-object-instance-id"><inline classes="std std-ref">body_get_object_instance_id</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-param"><inline classes="std std-ref">body_get_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-shape"><inline classes="std std-ref">body_get_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-shape-count"><inline classes="std std-ref">body_get_shape_count</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-shape-transform"><inline classes="std std-ref">body_get_shape_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-space"><inline classes="std std-ref">body_get_space</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-get-state"><inline classes="std std-ref">body_get_state</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> state <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-is-omitting-force-integration"><inline classes="std std-ref">body_is_omitting_force_integration</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-remove-collision-exception"><inline classes="std std-ref">body_remove_collision_exception</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> excepted_body <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-remove-shape"><inline classes="std std-ref">body_remove_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-reset-mass-properties"><inline classes="std std-ref">body_reset_mass_properties</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-axis-velocity"><inline classes="std std-ref">body_set_axis_velocity</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> axis_velocity <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-collision-layer"><inline classes="std std-ref">body_set_collision_layer</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-collision-mask"><inline classes="std std-ref">body_set_collision_mask</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mask <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-collision-priority"><inline classes="std std-ref">body_set_collision_priority</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> priority <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-constant-force"><inline classes="std std-ref">body_set_constant_force</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-constant-torque"><inline classes="std std-ref">body_set_constant_torque</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> torque <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-continuous-collision-detection-mode"><inline classes="std std-ref">body_set_continuous_collision_detection_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> mode <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-force-integration-callback"><inline classes="std std-ref">body_set_force_integration_callback</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> userdata=null <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-max-contacts-reported"><inline classes="std std-ref">body_set_max_contacts_reported</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> amount <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-mode"><inline classes="std std-ref">body_set_mode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference> mode <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-omit-force-integration"><inline classes="std std-ref">body_set_omit_force_integration</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-param"><inline classes="std std-ref">body_set_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> param, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-shape"><inline classes="std std-ref">body_set_shape</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-shape-as-one-way-collision"><inline classes="std std-ref">body_set_shape_as_one_way_collision</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> margin <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-shape-disabled"><inline classes="std std-ref">body_set_shape_disabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-shape-transform"><inline classes="std std-ref">body_set_shape_transform</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-space"><inline classes="std std-ref">body_set_space</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-set-state"><inline classes="std std-ref">body_set_state</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> state, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-body-test-motion"><inline classes="std std-ref">body_test_motion</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_physicstestmotionparameters2d#class-physicstestmotionparameters2d"><inline classes="std std-ref">PhysicsTestMotionParameters2D</inline></reference> parameters, <reference internal="True" refuri="class_physicstestmotionresult2d#class-physicstestmotionresult2d"><inline classes="std std-ref">PhysicsTestMotionResult2D</inline></reference> result=null <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-capsule-shape-create"><inline classes="std std-ref">capsule_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-circle-shape-create"><inline classes="std std-ref">circle_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-concave-polygon-shape-create"><inline classes="std std-ref">concave_polygon_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-convex-polygon-shape-create"><inline classes="std std-ref">convex_polygon_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-damped-spring-joint-get-param"><inline classes="std std-ref">damped_spring_joint_get_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-damped-spring-joint-set-param"><inline classes="std std-ref">damped_spring_joint_set_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-get-process-info"><inline classes="std std-ref">get_process_info</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-physicsserver2d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> process_info <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-clear"><inline classes="std std-ref">joint_clear</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-create"><inline classes="std std-ref">joint_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-disable-collisions-between-bodies"><inline classes="std std-ref">joint_disable_collisions_between_bodies</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-get-param"><inline classes="std std-ref">joint_get_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-get-type"><inline classes="std std-ref">joint_get_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-is-disabled-collisions-between-bodies"><inline classes="std std-ref">joint_is_disabled_collisions_between_bodies</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-make-damped-spring"><inline classes="std std-ref">joint_make_damped_spring</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor_b, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_a, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_b=RID() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-make-groove"><inline classes="std std-ref">joint_make_groove</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> groove1_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> groove2_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor_b, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_a=RID(), <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_b=RID() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-make-pin"><inline classes="std std-ref">joint_make_pin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_a, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_b=RID() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-joint-set-param"><inline classes="std std-ref">joint_set_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-pin-joint-get-flag"><inline classes="std std-ref">pin_joint_get_flag</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-pin-joint-get-param"><inline classes="std std-ref">pin_joint_get_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-pin-joint-set-flag"><inline classes="std std-ref">pin_joint_set_flag</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-pin-joint-set-param"><inline classes="std std-ref">pin_joint_set_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-rectangle-shape-create"><inline classes="std std-ref">rectangle_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-segment-shape-create"><inline classes="std std-ref">segment_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-separation-ray-shape-create"><inline classes="std std-ref">separation_ray_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-set-active"><inline classes="std std-ref">set_active</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-shape-get-data"><inline classes="std std-ref">shape_get_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-shape-get-type"><inline classes="std std-ref">shape_get_type</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-space-create"><inline classes="std std-ref">space_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_physicsdirectspacestate2d#class-physicsdirectspacestate2d"><inline classes="std std-ref">PhysicsDirectSpaceState2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-space-get-direct-state"><inline classes="std std-ref">space_get_direct_state</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-space-get-param"><inline classes="std std-ref">space_get_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space, <reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-space-is-active"><inline classes="std std-ref">space_is_active</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-space-set-active"><inline classes="std std-ref">space_set_active</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-space-set-param"><inline classes="std std-ref">space_set_param</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space, <reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-physicsserver2d-method-world-boundary-shape-create"><inline classes="std std-ref">world_boundary_shape_create</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-physicsserver2d-spaceparameter"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-spaceparameter" names="enum_physicsserver2d_spaceparameter">enum <strong>SpaceParameter</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-contact-recycle-radius"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-contact-recycle-radius" names="class_physicsserver2d_constant_space_param_contact_recycle_radius"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_CONTACT_RECYCLE_RADIUS</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于设置/获取一对物体在其碰撞状态被重新计算之前的最大移动距离。该参数的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-solver-contact-recycle-radius"><inline classes="std std-ref">ProjectSettings.physics/2d/solver/contact_recycle_radius</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-contact-max-separation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-contact-max-separation" names="class_physicsserver2d_constant_space_param_contact_max_separation"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_CONTACT_MAX_SEPARATION</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于设置/获取两个形状间的最大距离，超过该距离后它们将被视为分离，接触将被弃置。该参数的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-solver-contact-max-separation"><inline classes="std std-ref">ProjectSettings.physics/2d/solver/contact_max_separation</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-contact-max-allowed-penetration"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-contact-max-allowed-penetration" names="class_physicsserver2d_constant_space_param_contact_max_allowed_penetration"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于设置/获取两个形状互相穿透的最大距离，超过该距离后将视为碰撞。该参数的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-solver-contact-max-allowed-penetration"><inline classes="std std-ref">ProjectSettings.physics/2d/solver/contact_max_allowed_penetration</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-contact-default-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-contact-default-bias" names="class_physicsserver2d_constant_space_param_contact_default_bias"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_CONTACT_DEFAULT_BIAS</strong> = <literal>3</literal></paragraph>
            <paragraph>常量，用于设置/获取所有物理接触的默认求解器偏差。求解器偏差是控制两个对象在重叠后“反弹”的程度的一个系数，以避免由于数值不精确而使它们处于该状态。该参数的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-solver-default-contact-bias"><inline classes="std std-ref">ProjectSettings.physics/2d/solver/default_contact_bias</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-body-linear-velocity-sleep-threshold"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-body-linear-velocity-sleep-threshold" names="class_physicsserver2d_constant_space_param_body_linear_velocity_sleep_threshold"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD</strong> = <literal>4</literal></paragraph>
            <paragraph>常量，用于设置/获取活跃的阈值线速度。一个线性速度和角速度都被标记为可能处于非活动状态的物体，将在给定时间后进入睡眠状态。该参数的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-sleep-threshold-linear"><inline classes="std std-ref">ProjectSettings.physics/2d/sleep_threshold_linear</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-body-angular-velocity-sleep-threshold"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-body-angular-velocity-sleep-threshold" names="class_physicsserver2d_constant_space_param_body_angular_velocity_sleep_threshold"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD</strong> = <literal>5</literal></paragraph>
            <paragraph>常量，用于设置/获取活跃的阈值角速度。一个线性速度和角速度都被标记为可能处于非活动状态的物体，将在给定时间后进入睡眠状态。该参数的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-sleep-threshold-angular"><inline classes="std std-ref">ProjectSettings.physics/2d/sleep_threshold_angular</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-body-time-to-sleep"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-body-time-to-sleep" names="class_physicsserver2d_constant_space_param_body_time_to_sleep"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_BODY_TIME_TO_SLEEP</strong> = <literal>6</literal></paragraph>
            <paragraph>常量，用于设置/获得最大的活动时间。一个被标记为线速度和角速度都可能不活动的物体，在这个时间之后将被置入睡眠状态。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-constraint-default-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-constraint-default-bias" names="class_physicsserver2d_constant_space_param_constraint_default_bias"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS</strong> = <literal>7</literal></paragraph>
            <paragraph>常量，用于设置/获取所有物理约束的默认求解器偏差。求解器偏差是控制两个对象在违反约束后“反弹”的程度的一个系数，以避免由于数值不精确而使它们处于该状态。该参数的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-solver-default-constraint-bias"><inline classes="std std-ref">ProjectSettings.physics/2d/solver/default_constraint_bias</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-space-param-solver-iterations"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-space-param-solver-iterations" names="class_physicsserver2d_constant_space_param_solver_iterations"><reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> <strong>SPACE_PARAM_SOLVER_ITERATIONS</strong> = <literal>8</literal></paragraph>
            <paragraph>常量，用于设置/获取所有接触与约束的求解器迭代数。迭代次数越多，碰撞越准确。但是，大量的迭代会需要更多的 CPU 能力，会降低性能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-shapetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-shapetype" names="enum_physicsserver2d_shapetype">enum <strong>ShapeType</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-shape-world-boundary"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-world-boundary" names="class_physicsserver2d_constant_shape_world_boundary"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_WORLD_BOUNDARY</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于创建世界边界形状。一个世界边界形状，是具有原点和法线的<emphasis>无限</emphasis>直线。因此，它可以用于前面/背面检查。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-separation-ray"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-separation-ray" names="class_physicsserver2d_constant_shape_separation_ray"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_SEPARATION_RAY</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于创建分离射线形状。一条分离射线由一个长度定义，并将其自身与接触其远端点的物体分开。对角色控制器很有用。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-segment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-segment" names="class_physicsserver2d_constant_shape_segment"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_SEGMENT</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于创建线段形状。一条线段形状是从点 A 到点 B 的<emphasis>有限</emphasis>线段。可以用于检查交叉点。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-circle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-circle" names="class_physicsserver2d_constant_shape_circle"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_CIRCLE</strong> = <literal>3</literal></paragraph>
            <paragraph>这是创建圆形的常量。一个圆的形状只有一个半径。它可以用于交点和内/外侧检查。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-rectangle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-rectangle" names="class_physicsserver2d_constant_shape_rectangle"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_RECTANGLE</strong> = <literal>4</literal></paragraph>
            <paragraph>这是用于创建矩形形状的常量。矩形形状是由宽度和高度定义的。它可以用于交点和内/外侧检查。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-capsule"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-capsule" names="class_physicsserver2d_constant_shape_capsule"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_CAPSULE</strong> = <literal>5</literal></paragraph>
            <paragraph>这是创建胶囊形状的常量。一个胶囊形状由一个半径和一个长度定义。它可以用于交点和内/外侧检查。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-convex-polygon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-convex-polygon" names="class_physicsserver2d_constant_shape_convex_polygon"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_CONVEX_POLYGON</strong> = <literal>6</literal></paragraph>
            <paragraph>常量，用于创建凸多边形形状。一个多边形是由一个点的列表定义的。它可以用于交叉点和内侧/外侧检查。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-concave-polygon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-concave-polygon" names="class_physicsserver2d_constant_shape_concave_polygon"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_CONCAVE_POLYGON</strong> = <literal>7</literal></paragraph>
            <paragraph>这是创建凹形多边形的常量。一个多边形是由一个点的列表定义的。它可以用于交叉点检查，但不能用于内/外侧检查。</paragraph>
            <target refid="class-physicsserver2d-constant-shape-custom"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-shape-custom" names="class_physicsserver2d_constant_shape_custom"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>SHAPE_CUSTOM</strong> = <literal>8</literal></paragraph>
            <paragraph>引擎内部会使用这个常量。任何试图创建这种形状的行为都会导致错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-areaparameter"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-areaparameter" names="enum_physicsserver2d_areaparameter">enum <strong>AreaParameter</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-gravity-override-mode"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-gravity-override-mode" names="class_physicsserver2d_constant_area_param_gravity_override_mode"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_GRAVITY_OVERRIDE_MODE</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，在一个区域中设置/获取重力覆盖模式。有关可能的值，请参阅 <reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference>。这个参数的默认值是 <reference internal="True" refid="class-physicsserver2d-constant-area-space-override-disabled"><inline classes="std std-ref">AREA_SPACE_OVERRIDE_DISABLED</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-gravity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-gravity" names="class_physicsserver2d_constant_area_param_gravity"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_GRAVITY</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于设置/获取区域中的重力强度。该参数的默认值为 <literal>9.80665</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-gravity-vector"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-gravity-vector" names="class_physicsserver2d_constant_area_param_gravity_vector"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_GRAVITY_VECTOR</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于设置/获取区域中的重力向量/中心。该参数的默认值为 <literal>Vector2(0, -1)</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-gravity-is-point"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-gravity-is-point" names="class_physicsserver2d_constant_area_param_gravity_is_point"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_GRAVITY_IS_POINT</strong> = <literal>3</literal></paragraph>
            <paragraph>常量，用于设置/获取区域中的重力向量是方向，还是中心点。该参数的默认值为 <literal>false</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-gravity-point-unit-distance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-gravity-point-unit-distance" names="class_physicsserver2d_constant_area_param_gravity_point_unit_distance"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE</strong> = <literal>4</literal></paragraph>
            <paragraph>常量，用于设置/获取重力强度等于 <reference internal="True" refid="class-physicsserver2d-constant-area-param-gravity"><inline classes="std std-ref">AREA_PARAM_GRAVITY</inline></reference> 控制的重力的距离。例如，在一个半径为 100 像素且表面重力为 4.0 px/s² 的行星上，将重力设置为 4.0，将单位距离设置为 100.0。重力将根据平方反比定律衰减，因此在该示例中，距离中心 200 像素处的重力将为 1.0 px/s²（距离的两倍，重力的 1/4），距离中心 50 像素处重力为 16.0 px/s²（距离的一半，重力的 4 倍），依此类推。</paragraph>
            <paragraph>仅当单位距离为正数时，上述情况才成立。当单位距离设置为 0.0 时，重力将与距离无关。该参数的默认值为 <literal>0.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-linear-damp-override-mode"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-linear-damp-override-mode" names="class_physicsserver2d_constant_area_param_linear_damp_override_mode"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE</strong> = <literal>5</literal></paragraph>
            <paragraph>常量，用于在一个区域中设置/获取线性阻尼覆盖模式。有关可能的值，请参阅 <reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference>。这个参数的默认值是 <reference internal="True" refid="class-physicsserver2d-constant-area-space-override-disabled"><inline classes="std std-ref">AREA_SPACE_OVERRIDE_DISABLED</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-linear-damp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-linear-damp" names="class_physicsserver2d_constant_area_param_linear_damp"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_LINEAR_DAMP</strong> = <literal>6</literal></paragraph>
            <paragraph>常数，用于设置/获取区域的线性阻尼系数。该参数的默认值为 <literal>0.1</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-angular-damp-override-mode"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-angular-damp-override-mode" names="class_physicsserver2d_constant_area_param_angular_damp_override_mode"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE</strong> = <literal>7</literal></paragraph>
            <paragraph>常量，用于在一个区域中设置/获取角度阻尼覆盖模式。有关可能的值，请参阅 <reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference>。这个参数的默认值是 <reference internal="True" refid="class-physicsserver2d-constant-area-space-override-disabled"><inline classes="std std-ref">AREA_SPACE_OVERRIDE_DISABLED</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-angular-damp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-angular-damp" names="class_physicsserver2d_constant_area_param_angular_damp"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_ANGULAR_DAMP</strong> = <literal>8</literal></paragraph>
            <paragraph>常数，用于设置/获取区域的角度阻尼系数。该参数的默认值为 <literal>1.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-area-param-priority"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-param-priority" names="class_physicsserver2d_constant_area_param_priority"><reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> <strong>AREA_PARAM_PRIORITY</strong> = <literal>9</literal></paragraph>
            <paragraph>常量，用于设置/获取区域的优先级（处理顺序）。该参数的默认值为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-areaspaceoverridemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-areaspaceoverridemode" names="enum_physicsserver2d_areaspaceoverridemode">enum <strong>AreaSpaceOverrideMode</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-area-space-override-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-space-override-disabled" names="class_physicsserver2d_constant_area_space_override_disabled"><reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference> <strong>AREA_SPACE_OVERRIDE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>这个区域不影响重力/阻尼。这些一般都是只存在于检测碰撞的区域，以及进入或离开它们的物体。</paragraph>
            <target refid="class-physicsserver2d-constant-area-space-override-combine"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-space-override-combine" names="class_physicsserver2d_constant_area_space_override_combine"><reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference> <strong>AREA_SPACE_OVERRIDE_COMBINE</strong> = <literal>1</literal></paragraph>
            <paragraph>此区域把它的重力/阻尼加到目前已经计算过的对象上。这样一来，许多重叠的区域可以结合它们的物理运算来产生有趣的效果。</paragraph>
            <target refid="class-physicsserver2d-constant-area-space-override-combine-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-space-override-combine-replace" names="class_physicsserver2d_constant_area_space_override_combine_replace"><reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference> <strong>AREA_SPACE_OVERRIDE_COMBINE_REPLACE</strong> = <literal>2</literal></paragraph>
            <paragraph>这个区域把它的重力/阻尼加到迄今为止已经计算出来的任何东西上。然后停止考虑其余的区域，甚至默认的区域。</paragraph>
            <target refid="class-physicsserver2d-constant-area-space-override-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-space-override-replace" names="class_physicsserver2d_constant_area_space_override_replace"><reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference> <strong>AREA_SPACE_OVERRIDE_REPLACE</strong> = <literal>3</literal></paragraph>
            <paragraph>这个区域取代了任何重力/阻尼，甚至是默认的，并停止考虑其余的区域。</paragraph>
            <target refid="class-physicsserver2d-constant-area-space-override-replace-combine"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-space-override-replace-combine" names="class_physicsserver2d_constant_area_space_override_replace_combine"><reference internal="True" refid="enum-physicsserver2d-areaspaceoverridemode"><inline classes="std std-ref">AreaSpaceOverrideMode</inline></reference> <strong>AREA_SPACE_OVERRIDE_REPLACE_COMBINE</strong> = <literal>4</literal></paragraph>
            <paragraph>这个区域取代了到目前为止计算的任何重力/阻尼，但继续计算其余的区域，直到默认的区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-bodymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-bodymode" names="enum_physicsserver2d_bodymode">enum <strong>BodyMode</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-body-mode-static"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-mode-static" names="class_physicsserver2d_constant_body_mode_static"><reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference> <strong>BODY_MODE_STATIC</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于静态物体。在这种模式下，物体只能由用户代码移动，移动时不会与路径上的其他物体发生碰撞。</paragraph>
            <target refid="class-physicsserver2d-constant-body-mode-kinematic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-mode-kinematic" names="class_physicsserver2d_constant_body_mode_kinematic"><reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference> <strong>BODY_MODE_KINEMATIC</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于运动学物体。在这种模式下，物体只能由用户代码移动，会与路径上的其他物体发生碰撞。</paragraph>
            <target refid="class-physicsserver2d-constant-body-mode-rigid"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-mode-rigid" names="class_physicsserver2d_constant_body_mode_rigid"><reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference> <strong>BODY_MODE_RIGID</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于刚体。在这种模式下，物体可以被其他物体推动，能够对其施加力。</paragraph>
            <target refid="class-physicsserver2d-constant-body-mode-rigid-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-mode-rigid-linear" names="class_physicsserver2d_constant_body_mode_rigid_linear"><reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference> <strong>BODY_MODE_RIGID_LINEAR</strong> = <literal>3</literal></paragraph>
            <paragraph>常量，用于线性刚体。在这种模式下，物体不能旋转，只有线速度受外力影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-bodyparameter"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-bodyparameter" names="enum_physicsserver2d_bodyparameter">enum <strong>BodyParameter</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-bounce"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-bounce" names="class_physicsserver2d_constant_body_param_bounce"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_BOUNCE</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的反弹系数。该参数的默认值为 <literal>0.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-friction"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-friction" names="class_physicsserver2d_constant_body_param_friction"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_FRICTION</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于设置/获取实体摩擦力。该参数的默认值为 <literal>1.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-mass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-mass" names="class_physicsserver2d_constant_body_param_mass"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_MASS</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于设置/获取一个实体质量。该参数的默认值为<literal>1.0</literal>。如果该实体的模式被设置为 <reference internal="True" refid="class-physicsserver2d-constant-body-mode-rigid"><inline classes="std std-ref">BODY_MODE_RIGID</inline></reference>，那么设置这个参数会有以下附加效果：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>如果该参数 <reference internal="True" refid="class-physicsserver2d-constant-body-param-center-of-mass"><inline classes="std std-ref">BODY_PARAM_CENTER_OF_MASS</inline></reference> 从未被明确设置，则该参数的值将根据实体的形状重新计算。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果该参数 <reference internal="True" refid="class-physicsserver2d-constant-body-param-inertia"><inline classes="std std-ref">BODY_PARAM_INERTIA</inline></reference> 被设置为值 <literal>&lt;= 0.0</literal>，则该参数的值将根据该实体的形状、质量、和质心重新计算。</paragraph>
                </list_item>
            </bullet_list>
            <target refid="class-physicsserver2d-constant-body-param-inertia"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-inertia" names="class_physicsserver2d_constant_body_param_inertia"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_INERTIA</strong> = <literal>3</literal></paragraph>
            <paragraph>常量，用于设置/获取一个实体惯性。该参数的默认值为<literal>0.0</literal>。如果实体的惯性被设置为一个值 <literal>&lt;= 0.0</literal>，那么惯性将根据实体的形状、质量、和质心重新计算。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-center-of-mass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-center-of-mass" names="class_physicsserver2d_constant_body_param_center_of_mass"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_CENTER_OF_MASS</strong> = <literal>4</literal></paragraph>
            <paragraph>常量，用于在实体局部坐标系中设置/获取一个实体质心位置。该参数的默认值为 <literal>Vector2(0,0)</literal>。如果该参数从未明确设置，则在设置参数 <reference internal="True" refid="class-physicsserver2d-constant-body-param-mass"><inline classes="std std-ref">BODY_PARAM_MASS</inline></reference> 或调用 <reference internal="True" refid="class-physicsserver2d-method-body-set-space"><inline classes="std std-ref">body_set_space</inline></reference> 时，会根据实体的形状重新计算。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-gravity-scale"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-gravity-scale" names="class_physicsserver2d_constant_body_param_gravity_scale"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_GRAVITY_SCALE</strong> = <literal>5</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的重力倍数。该参数的默认值为 <literal>1.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-linear-damp-mode"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-linear-damp-mode" names="class_physicsserver2d_constant_body_param_linear_damp_mode"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_LINEAR_DAMP_MODE</strong> = <literal>6</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的线性阻尼模式。可能的值见 <reference internal="True" refid="enum-physicsserver2d-bodydampmode"><inline classes="std std-ref">BodyDampMode</inline></reference>。这个参数的默认值为 <reference internal="True" refid="class-physicsserver2d-constant-body-damp-mode-combine"><inline classes="std std-ref">BODY_DAMP_MODE_COMBINE</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-angular-damp-mode"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-angular-damp-mode" names="class_physicsserver2d_constant_body_param_angular_damp_mode"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_ANGULAR_DAMP_MODE</strong> = <literal>7</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的角度阻尼模式。可能的值见 <reference internal="True" refid="enum-physicsserver2d-bodydampmode"><inline classes="std std-ref">BodyDampMode</inline></reference>。这个参数的默认值为 <reference internal="True" refid="class-physicsserver2d-constant-body-damp-mode-combine"><inline classes="std std-ref">BODY_DAMP_MODE_COMBINE</inline></reference>。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-linear-damp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-linear-damp" names="class_physicsserver2d_constant_body_param_linear_damp"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_LINEAR_DAMP</strong> = <literal>8</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的线性阻尼系数。该参数的默认值为 <literal>0.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-angular-damp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-angular-damp" names="class_physicsserver2d_constant_body_param_angular_damp"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_ANGULAR_DAMP</strong> = <literal>9</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的角度阻尼系数。该参数的默认值为 <literal>0.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-body-param-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-param-max" names="class_physicsserver2d_constant_body_param_max"><reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> <strong>BODY_PARAM_MAX</strong> = <literal>10</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-bodydampmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-bodydampmode" names="enum_physicsserver2d_bodydampmode">enum <strong>BodyDampMode</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-body-damp-mode-combine"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-damp-mode-combine" names="class_physicsserver2d_constant_body_damp_mode_combine"><reference internal="True" refid="enum-physicsserver2d-bodydampmode"><inline classes="std std-ref">BodyDampMode</inline></reference> <strong>BODY_DAMP_MODE_COMBINE</strong> = <literal>0</literal></paragraph>
            <paragraph>物体的阻尼值会叠加到替换区域中所设置的值或默认值。</paragraph>
            <target refid="class-physicsserver2d-constant-body-damp-mode-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-damp-mode-replace" names="class_physicsserver2d_constant_body_damp_mode_replace"><reference internal="True" refid="enum-physicsserver2d-bodydampmode"><inline classes="std std-ref">BodyDampMode</inline></reference> <strong>BODY_DAMP_MODE_REPLACE</strong> = <literal>1</literal></paragraph>
            <paragraph>物体的阻尼值会替换区域中所设置的值或默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-bodystate"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-bodystate" names="enum_physicsserver2d_bodystate">enum <strong>BodyState</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-body-state-transform"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-state-transform" names="class_physicsserver2d_constant_body_state_transform"><reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> <strong>BODY_STATE_TRANSFORM</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的当前变换矩阵。</paragraph>
            <target refid="class-physicsserver2d-constant-body-state-linear-velocity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-state-linear-velocity" names="class_physicsserver2d_constant_body_state_linear_velocity"><reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> <strong>BODY_STATE_LINEAR_VELOCITY</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的当前线速度。</paragraph>
            <target refid="class-physicsserver2d-constant-body-state-angular-velocity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-state-angular-velocity" names="class_physicsserver2d_constant_body_state_angular_velocity"><reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> <strong>BODY_STATE_ANGULAR_VELOCITY</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于设置/获取物体的当前角速度。</paragraph>
            <target refid="class-physicsserver2d-constant-body-state-sleeping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-state-sleeping" names="class_physicsserver2d_constant_body_state_sleeping"><reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> <strong>BODY_STATE_SLEEPING</strong> = <literal>3</literal></paragraph>
            <paragraph>常量，用于使物体沉睡/唤醒，或得到它是否在沉睡。</paragraph>
            <target refid="class-physicsserver2d-constant-body-state-can-sleep"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-body-state-can-sleep" names="class_physicsserver2d_constant_body_state_can_sleep"><reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> <strong>BODY_STATE_CAN_SLEEP</strong> = <literal>4</literal></paragraph>
            <paragraph>常量，用于设置/获取物体是否可以休眠。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-jointtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-jointtype" names="enum_physicsserver2d_jointtype">enum <strong>JointType</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-joint-type-pin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-joint-type-pin" names="class_physicsserver2d_constant_joint_type_pin"><reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference> <strong>JOINT_TYPE_PIN</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于创造钉关节。</paragraph>
            <target refid="class-physicsserver2d-constant-joint-type-groove"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-joint-type-groove" names="class_physicsserver2d_constant_joint_type_groove"><reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference> <strong>JOINT_TYPE_GROOVE</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于创造槽关节。</paragraph>
            <target refid="class-physicsserver2d-constant-joint-type-damped-spring"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-joint-type-damped-spring" names="class_physicsserver2d_constant_joint_type_damped_spring"><reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference> <strong>JOINT_TYPE_DAMPED_SPRING</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于创造有阻尼的弹簧关节。</paragraph>
            <target refid="class-physicsserver2d-constant-joint-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-joint-type-max" names="class_physicsserver2d_constant_joint_type_max"><reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference> <strong>JOINT_TYPE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-jointparam"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-jointparam" names="enum_physicsserver2d_jointparam">enum <strong>JointParam</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-joint-param-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-joint-param-bias" names="class_physicsserver2d_constant_joint_param_bias"><reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference> <strong>JOINT_PARAM_BIAS</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于设置/获取该关节将实体拉回以满足关节约束的速度。值越低，两个物体对关节的拉动就越大。该参数的默认值为 <literal>0.0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>在 Godot 物理中，这个参数只用于销关节和槽关节。</paragraph>
            <target refid="class-physicsserver2d-constant-joint-param-max-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-joint-param-max-bias" names="class_physicsserver2d_constant_joint_param_max_bias"><reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference> <strong>JOINT_PARAM_MAX_BIAS</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用于设置/获取关节可以应用校正的最大速度。该参数的默认值为 <literal>3.40282e+38</literal>。</paragraph>
            <paragraph><strong>注意：</strong>在 Godot 物理中，这个参数只用于槽关节。</paragraph>
            <target refid="class-physicsserver2d-constant-joint-param-max-force"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-joint-param-max-force" names="class_physicsserver2d_constant_joint_param_max_force"><reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference> <strong>JOINT_PARAM_MAX_FORCE</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用于设置/获取关节可用于作用于两个实体的最大力。该参数的默认值为 <literal>3.40282e+38</literal>。</paragraph>
            <paragraph><strong>注意：</strong>在 Godot 物理中，这个参数只用于槽关节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-pinjointparam"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-pinjointparam" names="enum_physicsserver2d_pinjointparam">enum <strong>PinJointParam</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-pin-joint-softness"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-pin-joint-softness" names="class_physicsserver2d_constant_pin_joint_softness"><reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> <strong>PIN_JOINT_SOFTNESS</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用于设置/获取销关节的纽带可以弯曲多少。该参数的默认值为 <literal>0.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-pin-joint-limit-upper"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-pin-joint-limit-upper" names="class_physicsserver2d_constant_pin_joint_limit_upper"><reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> <strong>PIN_JOINT_LIMIT_UPPER</strong> = <literal>1</literal></paragraph>
            <paragraph>绕该销的最大旋转。</paragraph>
            <target refid="class-physicsserver2d-constant-pin-joint-limit-lower"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-pin-joint-limit-lower" names="class_physicsserver2d_constant_pin_joint_limit_lower"><reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> <strong>PIN_JOINT_LIMIT_LOWER</strong> = <literal>2</literal></paragraph>
            <paragraph>绕该销的最小旋转。</paragraph>
            <target refid="class-physicsserver2d-constant-pin-joint-motor-target-velocity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-pin-joint-motor-target-velocity" names="class_physicsserver2d_constant_pin_joint_motor_target_velocity"><reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> <strong>PIN_JOINT_MOTOR_TARGET_VELOCITY</strong> = <literal>3</literal></paragraph>
            <paragraph>马达的目标速度。单位为弧度每秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-pinjointflag"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-pinjointflag" names="enum_physicsserver2d_pinjointflag">enum <strong>PinJointFlag</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-pin-joint-flag-angular-limit-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-pin-joint-flag-angular-limit-enabled" names="class_physicsserver2d_constant_pin_joint_flag_angular_limit_enabled"><reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> <strong>PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>如果为 <literal>true</literal>，则销关节具有最大和最小旋转。</paragraph>
            <target refid="class-physicsserver2d-constant-pin-joint-flag-motor-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-pin-joint-flag-motor-enabled" names="class_physicsserver2d_constant_pin_joint_flag_motor_enabled"><reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> <strong>PIN_JOINT_FLAG_MOTOR_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>如果为 <literal>true</literal>，则马达将转动该销。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-dampedspringparam"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-dampedspringparam" names="enum_physicsserver2d_dampedspringparam">enum <strong>DampedSpringParam</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-damped-spring-rest-length"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-damped-spring-rest-length" names="class_physicsserver2d_constant_damped_spring_rest_length"><reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference> <strong>DAMPED_SPRING_REST_LENGTH</strong> = <literal>0</literal></paragraph>
            <paragraph>设置弹簧关节的放松长度。当拉开时，该关节将始终尝试回到这个长度。该参数的默认值是关节锚点之间的距离。</paragraph>
            <target refid="class-physicsserver2d-constant-damped-spring-stiffness"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-damped-spring-stiffness" names="class_physicsserver2d_constant_damped_spring_stiffness"><reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference> <strong>DAMPED_SPRING_STIFFNESS</strong> = <literal>1</literal></paragraph>
            <paragraph>设置弹簧关节的刚度。该关节施加的力等于刚度乘以距其放松长度的距离。该参数的默认值为 <literal>20.0</literal>。</paragraph>
            <target refid="class-physicsserver2d-constant-damped-spring-damping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-damped-spring-damping" names="class_physicsserver2d_constant_damped_spring_damping"><reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference> <strong>DAMPED_SPRING_DAMPING</strong> = <literal>2</literal></paragraph>
            <paragraph>设置弹簧关节的阻尼比率。值为 0 表示无阻尼弹簧，而 1 表示系统尽可能快地达到平衡（临界阻尼）。该参数的默认值为 <literal>1.5</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-ccdmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-ccdmode" names="enum_physicsserver2d_ccdmode">enum <strong>CCDMode</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-ccd-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-ccd-mode-disabled" names="class_physicsserver2d_constant_ccd_mode_disabled"><reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>CCD_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用连续碰撞检测。这是检测物体碰撞的最快方法，但可能会错过较小和/或快速移动的物体。</paragraph>
            <target refid="class-physicsserver2d-constant-ccd-mode-cast-ray"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-ccd-mode-cast-ray" names="class_physicsserver2d_constant_ccd_mode_cast_ray"><reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>CCD_MODE_CAST_RAY</strong> = <literal>1</literal></paragraph>
            <paragraph>通过射线投射实现连续的碰撞检测。它比形状投射更快，但不够精确。</paragraph>
            <target refid="class-physicsserver2d-constant-ccd-mode-cast-shape"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-ccd-mode-cast-shape" names="class_physicsserver2d_constant_ccd_mode_cast_shape"><reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>CCD_MODE_CAST_SHAPE</strong> = <literal>2</literal></paragraph>
            <paragraph>通过形变实现连续的碰撞检测。它是最慢的 CCD 方法，也是最精确的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-areabodystatus"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-areabodystatus" names="enum_physicsserver2d_areabodystatus">enum <strong>AreaBodyStatus</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-area-body-added"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-body-added" names="class_physicsserver2d_constant_area_body_added"><reference internal="True" refid="enum-physicsserver2d-areabodystatus"><inline classes="std std-ref">AreaBodyStatus</inline></reference> <strong>AREA_BODY_ADDED</strong> = <literal>0</literal></paragraph>
            <paragraph>当对象进入其形状之一时，第一个参数和区域回调函数接收的值。</paragraph>
            <target refid="class-physicsserver2d-constant-area-body-removed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-area-body-removed" names="class_physicsserver2d_constant_area_body_removed"><reference internal="True" refid="enum-physicsserver2d-areabodystatus"><inline classes="std std-ref">AreaBodyStatus</inline></reference> <strong>AREA_BODY_REMOVED</strong> = <literal>1</literal></paragraph>
            <paragraph>当对象退出其形状之一时，第一个参数和区域回调函数接收的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-physicsserver2d-processinfo"></target>
            <paragraph classes="classref-enumeration" ids="enum-physicsserver2d-processinfo" names="enum_physicsserver2d_processinfo">enum <strong>ProcessInfo</strong>:</paragraph>
            <target refid="class-physicsserver2d-constant-info-active-objects"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-info-active-objects" names="class_physicsserver2d_constant_info_active_objects"><reference internal="True" refid="enum-physicsserver2d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_ACTIVE_OBJECTS</strong> = <literal>0</literal></paragraph>
            <paragraph>常量，用以获取未处于睡眠状态的对象的数量。</paragraph>
            <target refid="class-physicsserver2d-constant-info-collision-pairs"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-info-collision-pairs" names="class_physicsserver2d_constant_info_collision_pairs"><reference internal="True" refid="enum-physicsserver2d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_COLLISION_PAIRS</strong> = <literal>1</literal></paragraph>
            <paragraph>常量，用以获取可能的碰撞数。</paragraph>
            <target refid="class-physicsserver2d-constant-info-island-count"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-physicsserver2d-constant-info-island-count" names="class_physicsserver2d_constant_info_island_count"><reference internal="True" refid="enum-physicsserver2d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> <strong>INFO_ISLAND_COUNT</strong> = <literal>2</literal></paragraph>
            <paragraph>常量，用以获取可能发生碰撞的空间区域数。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-physicsserver2d-method-area-add-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-add-shape" names="class_physicsserver2d_method_area_add_shape">void <strong>area_add_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform=Transform2D(1, 0, 0, 1, 0, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled=false <strong>)</strong></paragraph>
            <paragraph>使用给定的局部变换向区域添加一个形状。该形状（连同它的 <literal>transform</literal> 和 <literal>disabled</literal> 属性）被添加到一个形状数组中，一个区域的形状通常由它们在这个数组中的索引引用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-attach-canvas-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-attach-canvas-instance-id" names="class_physicsserver2d_method_area_attach_canvas_instance_id">void <strong>area_attach_canvas_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>将画布的 <literal>ObjectID</literal> 附加到该区域。使用 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference> 获取 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> 的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-attach-object-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-attach-object-instance-id" names="class_physicsserver2d_method_area_attach_object_instance_id">void <strong>area_attach_object_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 的 <literal>ObjectID</literal> 附加到该区域。使用 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference> 获取 <reference internal="True" refuri="class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference> 的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-clear-shapes"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-clear-shapes" names="class_physicsserver2d_method_area_clear_shapes">void <strong>area_clear_shapes</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong></paragraph>
            <paragraph>从该区域移除所有形状。这不会删除形状本身，因此它们可以继续在别处使用或稍后添加回来。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-create" names="class_physicsserver2d_method_area_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>area_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 区域对象，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。使用 <reference internal="True" refid="class-physicsserver2d-method-area-add-shape"><inline classes="std std-ref">area_add_shape</inline></reference> 为其添加形状，使用 <reference internal="True" refid="class-physicsserver2d-method-area-set-transform"><inline classes="std std-ref">area_set_transform</inline></reference> 设置其变换，并使用 <reference internal="True" refid="class-physicsserver2d-method-area-set-space"><inline classes="std std-ref">area_set_space</inline></reference> 将区域添加到一个空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-canvas-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-canvas-instance-id" names="class_physicsserver2d_method_area_get_canvas_instance_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>area_get_canvas_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回附加到该区域的画布的 <literal>ObjectID</literal>。使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 从非零 <literal>ObjectID</literal> 检索一个 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-collision-layer"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-collision-layer" names="class_physicsserver2d_method_area_get_collision_layer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>area_get_collision_layer</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该区域所属的物理层，形式为位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-collision-mask"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-collision-mask" names="class_physicsserver2d_method_area_get_collision_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>area_get_collision_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该区域所能接触的物理层，形式为位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-object-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-object-instance-id" names="class_physicsserver2d_method_area_get_object_instance_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>area_get_object_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回附加到该区域的 <literal>ObjectID</literal>。可使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 从非零 <literal>ObjectID</literal> 中检索一个 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-param" names="class_physicsserver2d_method_area_get_param"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>area_get_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定区域参数的值。可用参数的列表见 <reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-shape" names="class_physicsserver2d_method_area_get_shape"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>area_get_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该区域的形状数组中给定索引的形状的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-shape-count"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-shape-count" names="class_physicsserver2d_method_area_get_shape_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>area_get_shape_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回添加给该区域的形状数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-shape-transform"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-shape-transform" names="class_physicsserver2d_method_area_get_shape_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>area_get_shape_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该区域的形状数组中给定索引的形状的局部变换矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-space"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-space" names="class_physicsserver2d_method_area_get_space"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>area_get_space</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回分配给该区域的空间 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。如果没有分配空间，则返回空 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-get-transform"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-get-transform" names="class_physicsserver2d_method_area_get_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>area_get_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该区域的变换矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-remove-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-remove-shape" names="class_physicsserver2d_method_area_remove_shape">void <strong>area_remove_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong></paragraph>
            <paragraph>从区域的形状数组中移除具有给定索引的形状。该形状本身并没有被删除，所以它可以继续在别处使用或稍后添加回来。此操作会使曾经索引高于 <literal>shape_idx</literal> 的区域形状的索引将减少一个。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-area-monitor-callback"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-area-monitor-callback" names="class_physicsserver2d_method_area_set_area_monitor_callback">void <strong>area_set_area_monitor_callback</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback <strong>)</strong></paragraph>
            <paragraph>设置该区域的区域监视回调。当任何其他（形状）区域进入或退出（形状）给定区域时，将调用此回调，并且必须采用以下五个参数：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>一个整数 <literal>status</literal>：<reference internal="True" refid="class-physicsserver2d-constant-area-body-added"><inline classes="std std-ref">AREA_BODY_ADDED</inline></reference> 或 <reference internal="True" refid="class-physicsserver2d-constant-area-body-removed"><inline classes="std std-ref">AREA_BODY_REMOVED</inline></reference> 取决于其他区域的形状是进入还是退出该区域，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <literal>area_rid</literal>：进入或退出该区域的其他区域的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个整数 <literal>instance_id</literal>：附加到其他区域的 <literal>ObjectID</literal>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个整数 <literal>area_shape_idx</literal>：进入或退出该区域的其他区域的形状索引，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个整数 <literal>self_shape_idx</literal>：其他区域进入或退出的区域的形状索引。</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>通过计算（或跟踪）进入和退出的形状，可以确定一个区域（及其所有形状）是第一次进入还是最后一次退出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-collision-layer"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-collision-layer" names="class_physicsserver2d_method_area_set_collision_layer">void <strong>area_set_collision_layer</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
            <paragraph>将该区域分配给若干个物理层，使用位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-collision-mask"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-collision-mask" names="class_physicsserver2d_method_area_set_collision_mask">void <strong>area_set_collision_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mask <strong>)</strong></paragraph>
            <paragraph>设置该区域所监视的物理层，使用位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-monitor-callback"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-monitor-callback" names="class_physicsserver2d_method_area_set_monitor_callback">void <strong>area_set_monitor_callback</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callback <strong>)</strong></paragraph>
            <paragraph>设置区域的实体监视器回调。当任何其他（形状的）实体进入或退出（形状的）给定区域时，将调用此回调，并且必须采用以下五个参数：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>一个整数 <literal>status</literal>：<reference internal="True" refid="class-physicsserver2d-constant-area-body-added"><inline classes="std std-ref">AREA_BODY_ADDED</inline></reference> 或 <reference internal="True" refid="class-physicsserver2d-constant-area-body-removed"><inline classes="std std-ref">AREA_BODY_REMOVED</inline></reference> 取决于其他实体形状是否进入或退出该区域，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <literal>body_rid</literal>：进入或离开该区域的实体的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个整数 <literal>instance_id</literal>：附加到该实体上的 <literal>ObjectID</literal>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个整数 <literal>body_shape_idx</literal>：进入或离开该区域的实体形状索引，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个整数 <literal>self_shape_idx</literal>：实体进入或离开的区域的形状索引。</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>通过计算（或跟踪）进入和退出的形状，可以确定一个实体（及其所有形状）是第一次进入还是最后一次退出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-monitorable"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-monitorable" names="class_physicsserver2d_method_area_set_monitorable">void <strong>area_set_monitorable</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> monitorable <strong>)</strong></paragraph>
            <paragraph>设置该区域是否可监视。如果 <literal>monitorable</literal> 为 <literal>true</literal>，则该区域进入或退出其他区域时，会调用其他区域的区域监视回调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-param" names="class_physicsserver2d_method_area_set_param">void <strong>area_set_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference> param, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置给定的区域参数的值。可用参数列表见 <reference internal="True" refid="enum-physicsserver2d-areaparameter"><inline classes="std std-ref">AreaParameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-shape" names="class_physicsserver2d_method_area_set_shape">void <strong>area_set_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong></paragraph>
            <paragraph>用另一个形状替换给定索引处的区域形状，同时不会影响在同一索引处的 <literal>transform</literal> 和 <literal>disabled</literal> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-shape-disabled"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-shape-disabled" names="class_physicsserver2d_method_area_set_shape_disabled">void <strong>area_set_shape_disabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled <strong>)</strong></paragraph>
            <paragraph>使用给定索引设置区域形状的禁用属性。如果 <literal>disabled</literal> 为 <literal>true</literal>，则该形状将不会检测任何其他形状进入或退出它。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-shape-transform"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-shape-transform" names="class_physicsserver2d_method_area_set_shape_transform">void <strong>area_set_shape_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
            <paragraph>设置该区域给定索引的形状的局部变换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-space"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-space" names="class_physicsserver2d_method_area_set_space">void <strong>area_set_space</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong></paragraph>
            <paragraph>从先前赋予的空间（如果有）中移除该区域后，将该区域添加到给定空间。</paragraph>
            <paragraph><strong>注意：</strong>要从空间中移除一个区域而不立即将其添加回其他地方，请使用 <literal>PhysicsServer2D.area_set_space(area, RID())</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-area-set-transform"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-area-set-transform" names="class_physicsserver2d_method_area_set_transform">void <strong>area_set_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> area, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
            <paragraph>设置该区域的变换矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-add-collision-exception"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-add-collision-exception" names="class_physicsserver2d_method_body_add_collision_exception">void <strong>body_add_collision_exception</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> excepted_body <strong>)</strong></paragraph>
            <paragraph>将 <literal>excepted_body</literal> 添加到实体的碰撞例外列表中，以便忽略与它的碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-add-constant-central-force"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-add-constant-central-force" names="class_physicsserver2d_method_body_add_constant_central_force">void <strong>body_add_constant_central_force</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force <strong>)</strong></paragraph>
            <paragraph>向实体添加一个恒定的定向力。该力不影响旋转。随着时间的推移，力会一直施加，直到使用 <literal>PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))</literal> 清除。</paragraph>
            <paragraph>这相当于在实体的质心处使用 <reference internal="True" refid="class-physicsserver2d-method-body-add-constant-force"><inline classes="std std-ref">body_add_constant_force</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-add-constant-force"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-add-constant-force" names="class_physicsserver2d_method_body_add_constant_force">void <strong>body_add_constant_force</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position=Vector2(0, 0) <strong>)</strong></paragraph>
            <paragraph>向实体添加一个恒定的定位力。如果 <literal>position</literal> 与实体的质心不同，则力会影响旋转。力会持续施加，直到使用 <literal>PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))</literal> 清除。</paragraph>
            <paragraph><literal>position</literal> 是在全局坐标中距实体原点的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-add-constant-torque"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-add-constant-torque" names="class_physicsserver2d_method_body_add_constant_torque">void <strong>body_add_constant_torque</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> torque <strong>)</strong></paragraph>
            <paragraph>向实体添加一个恒定的旋转力。该力不影响位置。随着时间的推移，该力会一直施加，直到使用 <literal>PhysicsServer2D.body_set_constant_torque(body, 0)</literal> 清除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-add-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-add-shape" names="class_physicsserver2d_method_body_add_shape">void <strong>body_add_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform=Transform2D(1, 0, 0, 1, 0, 0), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled=false <strong>)</strong></paragraph>
            <paragraph>使用给定的局部变换向该区域添加一个形状。该形状（连同它的 <literal>transform</literal> 和 <literal>disabled</literal> 属性）将被添加到一个形状数组中，一个实体的形状通常由它们在这个数组中的索引引用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-apply-central-force"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-apply-central-force" names="class_physicsserver2d_method_body_apply_central_force">void <strong>body_apply_central_force</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force <strong>)</strong></paragraph>
            <paragraph>在实体的质心处向实体施加一个定向力。该力不影响旋转。力是时间相关的，这意味着每次物理更新都会被施加。</paragraph>
            <paragraph>这相当于在实体的质心处使用 <reference internal="True" refid="class-physicsserver2d-method-body-apply-force"><inline classes="std std-ref">body_apply_force</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-apply-central-impulse"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-apply-central-impulse" names="class_physicsserver2d_method_body_apply_central_impulse">void <strong>body_apply_central_impulse</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> impulse <strong>)</strong></paragraph>
            <paragraph>在实体的质心处向该实体施加一个定向冲量。该冲量不影响旋转。</paragraph>
            <paragraph>冲量是时间无关的！每帧施加一个冲量将产生一个依赖于帧速率的力。出于这个原因，它应该只在模拟一次性影响时使用（否则使用“_force”函数）。</paragraph>
            <paragraph>这相当于在实体的质心处使用 <reference internal="True" refid="class-physicsserver2d-method-body-apply-impulse"><inline classes="std std-ref">body_apply_impulse</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-apply-force"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-apply-force" names="class_physicsserver2d_method_body_apply_force">void <strong>body_apply_force</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position=Vector2(0, 0) <strong>)</strong></paragraph>
            <paragraph>向实体施加一个定位力。如果 <literal>position</literal> 与实体的质心不同，则力会影响旋转。力是时间相关的，意味着每次物理更新都会被施加。</paragraph>
            <paragraph><literal>position</literal> 是在全局坐标中距实体原点的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-apply-impulse"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-apply-impulse" names="class_physicsserver2d_method_body_apply_impulse">void <strong>body_apply_impulse</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> impulse, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> position=Vector2(0, 0) <strong>)</strong></paragraph>
            <paragraph>向实体施加一个定位冲量。如果 <literal>position</literal> 与实体的质心不同，则该冲量会影响旋转。</paragraph>
            <paragraph>冲量是时间无关的！每帧施加一个冲量将产生一个依赖于帧速率的力。出于这个原因，它应该只在模拟一次性影响时使用（否则使用“_force”函数）。</paragraph>
            <paragraph><literal>position</literal> 是在全局坐标中距实体原点的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-apply-torque"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-apply-torque" names="class_physicsserver2d_method_body_apply_torque">void <strong>body_apply_torque</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> torque <strong>)</strong></paragraph>
            <paragraph>对实体施加一个旋转力。该力不影响位置。力是时间相关的，意味着每次物理更新都会被施加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-apply-torque-impulse"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-apply-torque-impulse" names="class_physicsserver2d_method_body_apply_torque_impulse">void <strong>body_apply_torque_impulse</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> impulse <strong>)</strong></paragraph>
            <paragraph>对实体施加一个旋转的冲量。该冲量不影响位置。</paragraph>
            <paragraph>冲量是时间无关的！每帧施加一个冲量将产生一个依赖于帧速率的力。出于这个原因，它应该只在模拟一次性影响时使用（否则使用“_force”函数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-attach-canvas-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-attach-canvas-instance-id" names="class_physicsserver2d_method_body_attach_canvas_instance_id">void <strong>body_attach_canvas_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>将画布的 <literal>ObjectID</literal> 附加到该实体。可使用 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference> 获取 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> 的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-attach-object-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-attach-object-instance-id" names="class_physicsserver2d_method_body_attach_object_instance_id">void <strong>body_attach_object_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 的 <literal>ObjectID</literal> 附加到该实体。可使用 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference> 获取 <reference internal="True" refuri="class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference> 的 <literal>ObjectID</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-clear-shapes"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-clear-shapes" names="class_physicsserver2d_method_body_clear_shapes">void <strong>body_clear_shapes</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong></paragraph>
            <paragraph>从该实体中移除所有形状。这不会删除形状本身，因此它们可以继续在别处使用或稍后添加回来。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-create" names="class_physicsserver2d_method_body_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>body_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 物体对象，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-body-add-shape"><inline classes="std std-ref">body_add_shape</inline></reference> 为其添加形状，使用 <reference internal="True" refid="class-physicsserver2d-method-body-set-state"><inline classes="std std-ref">body_set_state</inline></reference> 设置其变换，以及使用 <reference internal="True" refid="class-physicsserver2d-method-body-set-space"><inline classes="std std-ref">body_set_space</inline></reference> 将实体添加到一个空间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-canvas-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-canvas-instance-id" names="class_physicsserver2d_method_body_get_canvas_instance_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>body_get_canvas_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回附加到该实体的画布的 <literal>ObjectID</literal>。可使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 从非零 <literal>ObjectID</literal> 检索一个 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-collision-layer"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-collision-layer" names="class_physicsserver2d_method_body_get_collision_layer"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>body_get_collision_layer</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回物体所属的物理层，形式为位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-collision-mask"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-collision-mask" names="class_physicsserver2d_method_body_get_collision_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>body_get_collision_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回物体可以碰撞的物理层，形式为位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-collision-priority"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-collision-priority" names="class_physicsserver2d_method_body_get_collision_priority"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>body_get_collision_priority</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该实体的碰撞优先级。这用于 <reference internal="True" refid="class-physicsserver2d-method-body-test-motion"><inline classes="std std-ref">body_test_motion</inline></reference> 的穿透阶段。优先级越高，对该实体的穿透力就越低。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-constant-force"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-constant-force" names="class_physicsserver2d_method_body_get_constant_force"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>body_get_constant_force</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在每次物理更新期间，该物体被施加的总的恒定位置的力。</paragraph>
            <paragraph>参阅 <reference internal="True" refid="class-physicsserver2d-method-body-add-constant-force"><inline classes="std std-ref">body_add_constant_force</inline></reference> 和 <reference internal="True" refid="class-physicsserver2d-method-body-add-constant-central-force"><inline classes="std std-ref">body_add_constant_central_force</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-constant-torque"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-constant-torque" names="class_physicsserver2d_method_body_get_constant_torque"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>body_get_constant_torque</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在每次物理更新期间，该物体被施加的总的恒定旋转的力。</paragraph>
            <paragraph>参阅 <reference internal="True" refid="class-physicsserver2d-method-body-add-constant-torque"><inline classes="std std-ref">body_add_constant_torque</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-continuous-collision-detection-mode"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-continuous-collision-detection-mode" names="class_physicsserver2d_method_body_get_continuous_collision_detection_mode"><reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> <strong>body_get_continuous_collision_detection_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该物体的连续碰撞检测模式（见 <reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-direct-state"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-direct-state" names="class_physicsserver2d_method_body_get_direct_state"><reference internal="True" refuri="class_physicsdirectbodystate2d#class-physicsdirectbodystate2d"><inline classes="std std-ref">PhysicsDirectBodyState2D</inline></reference> <strong>body_get_direct_state</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong></paragraph>
            <paragraph>返回该实体的 <reference internal="True" refuri="class_physicsdirectbodystate2d#class-physicsdirectbodystate2d"><inline classes="std std-ref">PhysicsDirectBodyState2D</inline></reference>。如果该实体已被销毁或未被分配给一个空间，则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-max-contacts-reported"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-max-contacts-reported" names="class_physicsserver2d_method_body_get_max_contacts_reported"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>body_get_max_contacts_reported</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该实体可以报告的最大接触数。请参阅 <reference internal="True" refid="class-physicsserver2d-method-body-set-max-contacts-reported"><inline classes="std std-ref">body_set_max_contacts_reported</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-mode"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-mode" names="class_physicsserver2d_method_body_get_mode"><reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference> <strong>body_get_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该物体的模式（见 <reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-object-instance-id"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-object-instance-id" names="class_physicsserver2d_method_body_get_object_instance_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>body_get_object_instance_id</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回附加到该实体的 <literal>ObjectID</literal>。可使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 从非零 <literal>ObjectID</literal> 中检索一个 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-param" names="class_physicsserver2d_method_body_get_param"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>body_get_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定实体参数的值。有关可用的参数列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-shape" names="class_physicsserver2d_method_body_get_shape"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>body_get_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该实体形状数组中具有给定索引的形状的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-shape-count"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-shape-count" names="class_physicsserver2d_method_body_get_shape_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>body_get_shape_count</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回添加至该物体的形状的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-shape-transform"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-shape-transform" names="class_physicsserver2d_method_body_get_shape_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>body_get_shape_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该区域的形状数组中给定索引的形状的局部变换矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-space"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-space" names="class_physicsserver2d_method_body_get_space"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>body_get_space</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回分配给该实体的空间的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。如果没有分配空间，则返回空 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-get-state"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-get-state" names="class_physicsserver2d_method_body_get_state"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>body_get_state</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> state <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该实体给定状态的值。有关可用状态的列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-is-omitting-force-integration"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-is-omitting-force-integration" names="class_physicsserver2d_method_body_is_omitting_force_integration"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>body_is_omitting_force_integration</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果实体使用回调函数来计算自己的物理运算（请参阅 <reference internal="True" refid="class-physicsserver2d-method-body-set-force-integration-callback"><inline classes="std std-ref">body_set_force_integration_callback</inline></reference>），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-remove-collision-exception"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-remove-collision-exception" names="class_physicsserver2d_method_body_remove_collision_exception">void <strong>body_remove_collision_exception</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> excepted_body <strong>)</strong></paragraph>
            <paragraph>返回附加到该实体的 <literal>ObjectID</literal>。可使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-instance-from-id"><inline classes="std std-ref">@GlobalScope.instance_from_id</inline></reference> 从非零 <literal>ObjectID</literal> 中检索一个 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-remove-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-remove-shape" names="class_physicsserver2d_method_body_remove_shape">void <strong>body_remove_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx <strong>)</strong></paragraph>
            <paragraph>从该实体的形状数组中移除具有给定索引的形状。该形状本身并没有被删除，所以它可以继续在别处使用或稍后添加回来。该操作将会使曾经索引高于 <literal>shape_idx</literal> 的实体形状的索引将减少一个。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-reset-mass-properties"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-reset-mass-properties" names="class_physicsserver2d_method_body_reset_mass_properties">void <strong>body_reset_mass_properties</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body <strong>)</strong></paragraph>
            <paragraph>根据实体的形状恢复该实体的默认惯性和质心。这会撤消之前使用 <reference internal="True" refid="class-physicsserver2d-method-body-set-param"><inline classes="std std-ref">body_set_param</inline></reference> 设置的任何自定义值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-axis-velocity"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-axis-velocity" names="class_physicsserver2d_method_body_set_axis_velocity">void <strong>body_set_axis_velocity</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> axis_velocity <strong>)</strong></paragraph>
            <paragraph>修改实体的线速度，使其到轴 <literal>axis_velocity.normalized()</literal> 的投影正好是 <literal>axis_velocity.length()</literal>。这对于跳跃行为很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-collision-layer"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-collision-layer" names="class_physicsserver2d_method_body_set_collision_layer">void <strong>body_set_collision_layer</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
            <paragraph>设置该物体所属的物理层，使用位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-collision-mask"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-collision-mask" names="class_physicsserver2d_method_body_set_collision_mask">void <strong>body_set_collision_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mask <strong>)</strong></paragraph>
            <paragraph>设置该物体能够碰撞的物理层，使用位掩码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-collision-priority"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-collision-priority" names="class_physicsserver2d_method_body_set_collision_priority">void <strong>body_set_collision_priority</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> priority <strong>)</strong></paragraph>
            <paragraph>设置该实体的碰撞优先级。这用于 <reference internal="True" refid="class-physicsserver2d-method-body-test-motion"><inline classes="std std-ref">body_test_motion</inline></reference> 的穿透阶段。优先级越高，对实体的穿透力就越低。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-constant-force"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-constant-force" names="class_physicsserver2d_method_body_set_constant_force">void <strong>body_set_constant_force</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> force <strong>)</strong></paragraph>
            <paragraph>设置在每次物理更新期间，该物体被施加的总的恒定位置的力。</paragraph>
            <paragraph>参阅 <reference internal="True" refid="class-physicsserver2d-method-body-add-constant-force"><inline classes="std std-ref">body_add_constant_force</inline></reference> 和 <reference internal="True" refid="class-physicsserver2d-method-body-add-constant-central-force"><inline classes="std std-ref">body_add_constant_central_force</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-constant-torque"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-constant-torque" names="class_physicsserver2d_method_body_set_constant_torque">void <strong>body_set_constant_torque</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> torque <strong>)</strong></paragraph>
            <paragraph>设置在每次物理更新期间，该物体被施加的总的恒定旋转的力。</paragraph>
            <paragraph>参阅 <reference internal="True" refid="class-physicsserver2d-method-body-add-constant-torque"><inline classes="std std-ref">body_add_constant_torque</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-continuous-collision-detection-mode"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-continuous-collision-detection-mode" names="class_physicsserver2d_method_body_set_continuous_collision_detection_mode">void <strong>body_set_continuous_collision_detection_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> mode <strong>)</strong></paragraph>
            <paragraph>使用 <reference internal="True" refid="enum-physicsserver2d-ccdmode"><inline classes="std std-ref">CCDMode</inline></reference> 常量之一设置连续碰撞检测模式。</paragraph>
            <paragraph>连续碰撞检测试图预测一个移动的物体将在物理更新之间发生碰撞的位置，而不是移动它并在发生碰撞时纠正它的运动。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-force-integration-callback"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-force-integration-callback" names="class_physicsserver2d_method_body_set_force_integration_callback">void <strong>body_set_force_integration_callback</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> userdata=null <strong>)</strong></paragraph>
            <paragraph>如果该实体允许的话，设置用于计算实体物理的函数（参见 <reference internal="True" refid="class-physicsserver2d-method-body-set-omit-force-integration"><inline classes="std std-ref">body_set_omit_force_integration</inline></reference>）。</paragraph>
            <paragraph>该力的积分函数采用以下两个参数：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>一个 <reference internal="True" refuri="class_physicsdirectbodystate2d#class-physicsdirectbodystate2d"><inline classes="std std-ref">PhysicsDirectBodyState2D</inline></reference> <literal>state</literal>：用于检索和修改实体的状态，</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <literal>userdata</literal>：可选的用户数据。</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph><strong>注意：</strong>该回调目前在 Godot 物理中不会被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-max-contacts-reported"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-max-contacts-reported" names="class_physicsserver2d_method_body_set_max_contacts_reported">void <strong>body_set_max_contacts_reported</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> amount <strong>)</strong></paragraph>
            <paragraph>设置该实体可以报告的接触的最大数量。如果 <literal>amount</literal> 大于零，那么实体将最多跟踪与其他实体的这么多次接触。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-mode"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-mode" names="class_physicsserver2d_method_body_set_mode">void <strong>body_set_mode</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference> mode <strong>)</strong></paragraph>
            <paragraph>设置该实体的模式。有关可用模式的列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-bodymode"><inline classes="std std-ref">BodyMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-omit-force-integration"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-omit-force-integration" names="class_physicsserver2d_method_body_set_omit_force_integration">void <strong>body_set_omit_force_integration</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable <strong>)</strong></paragraph>
            <paragraph>设置一个物体是否使用回调函数来计算它自己的物理（参见 <reference internal="True" refid="class-physicsserver2d-method-body-set-force-integration-callback"><inline classes="std std-ref">body_set_force_integration_callback</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-param" names="class_physicsserver2d_method_body_set_param">void <strong>body_set_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference> param, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置给定实体参数的值。有关可用参数列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-bodyparameter"><inline classes="std std-ref">BodyParameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-shape"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-shape" names="class_physicsserver2d_method_body_set_shape">void <strong>body_set_shape</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong></paragraph>
            <paragraph>用另一个形状替换给定索引处的实体形状，同时不会影响同一索引处的 <literal>transform</literal>、<literal>disabled</literal> 和单向碰撞属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-shape-as-one-way-collision"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-shape-as-one-way-collision" names="class_physicsserver2d_method_body_set_shape_as_one_way_collision">void <strong>body_set_shape_as_one_way_collision</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enable, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> margin <strong>)</strong></paragraph>
            <paragraph>使用给定索引设置实体形状的单向碰撞属性。如果 <literal>enable</literal> 为 <literal>true</literal>，则形状的局部向上轴 <literal>body_get_shape_transform(body, shape_idx).y</literal> 给出的单向碰撞方向将用于忽略与相反方向的形状，并确保运动实体的穿透发生在这个方向上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-shape-disabled"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-shape-disabled" names="class_physicsserver2d_method_body_set_shape_disabled">void <strong>body_set_shape_disabled</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disabled <strong>)</strong></paragraph>
            <paragraph>使用给定索引设置实体形状的禁用属性。如果 <literal>disabled</literal> 为 <literal>true</literal>，则在所有碰撞检测中将忽略该形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-shape-transform"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-shape-transform" names="class_physicsserver2d_method_body_set_shape_transform">void <strong>body_set_shape_transform</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shape_idx, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> transform <strong>)</strong></paragraph>
            <paragraph>使用给定索引设置该实体形状的局部变换矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-space"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-space" names="class_physicsserver2d_method_body_set_space">void <strong>body_set_space</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong></paragraph>
            <paragraph>从先前分配的空间（若存在）中移除实体后，将该实体添加到给定空间。如果实体的模式被设置为 <reference internal="True" refid="class-physicsserver2d-constant-body-mode-rigid"><inline classes="std std-ref">BODY_MODE_RIGID</inline></reference>，则将该实体添加到空间将具有以下额外效果：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>如果从未明确设置参数 <reference internal="True" refid="class-physicsserver2d-constant-body-param-center-of-mass"><inline classes="std std-ref">BODY_PARAM_CENTER_OF_MASS</inline></reference>，则该参数的值将根据实体的形状重新计算。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果参数 <reference internal="True" refid="class-physicsserver2d-constant-body-param-inertia"><inline classes="std std-ref">BODY_PARAM_INERTIA</inline></reference> 被设置为一个 <literal>&lt;= 0.0</literal> 的值，则该参数的值将根据实体的形状、质量、和质心重新计算。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>要从一个空间中移除实体，且不立即将其添加回其他地方，请使用 <literal>PhysicsServer2D.body_set_space(body, RID())</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-set-state"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-set-state" names="class_physicsserver2d_method_body_set_state">void <strong>body_set_state</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference> state, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置实体状态的值。有关可用状态的列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-bodystate"><inline classes="std std-ref">BodyState</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>状态更改不会立即生效。状态更改将发生在下一个物理帧上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-body-test-motion"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-body-test-motion" names="class_physicsserver2d_method_body_test_motion"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>body_test_motion</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body, <reference internal="True" refuri="class_physicstestmotionparameters2d#class-physicstestmotionparameters2d"><inline classes="std std-ref">PhysicsTestMotionParameters2D</inline></reference> parameters, <reference internal="True" refuri="class_physicstestmotionresult2d#class-physicstestmotionresult2d"><inline classes="std std-ref">PhysicsTestMotionResult2D</inline></reference> result=null <strong>)</strong></paragraph>
            <paragraph>如果从空间中的给定点，沿着运动向量移动实体会产生一个碰撞，则返回 <literal>true</literal>。有关可用的运动参数，请参阅 <reference internal="True" refuri="class_physicstestmotionparameters2d#class-physicstestmotionparameters2d"><inline classes="std std-ref">PhysicsTestMotionParameters2D</inline></reference>。可以选择传递一个 <reference internal="True" refuri="class_physicstestmotionresult2d#class-physicstestmotionresult2d"><inline classes="std std-ref">PhysicsTestMotionResult2D</inline></reference> 对象，该对象将用于存储有关所产生碰撞的信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-capsule-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-capsule-shape-create" names="class_physicsserver2d_method_capsule_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>capsule_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 胶囊形状，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置胶囊的高度和半径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-circle-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-circle-shape-create" names="class_physicsserver2d_method_circle_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>circle_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 圆形，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置圆的半径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-concave-polygon-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-concave-polygon-shape-create" names="class_physicsserver2d_method_concave_polygon_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>concave_polygon_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 凹多边形形状，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置凹多边形的线段。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-convex-polygon-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-convex-polygon-shape-create" names="class_physicsserver2d_method_convex_polygon_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>convex_polygon_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 凸多边形形状，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置凸多边形的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-damped-spring-joint-get-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-damped-spring-joint-get-param" names="class_physicsserver2d_method_damped_spring_joint_get_param"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>damped_spring_joint_get_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定阻尼弹簧关节参数的值。有关可用参数的列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-damped-spring-joint-set-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-damped-spring-joint-set-param" names="class_physicsserver2d_method_damped_spring_joint_set_param">void <strong>damped_spring_joint_set_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置给定阻尼弹簧关节参数的值。有关可用参数的列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-dampedspringparam"><inline classes="std std-ref">DampedSpringParam</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-free-rid"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-free-rid" names="class_physicsserver2d_method_free_rid">void <strong>free_rid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong></paragraph>
            <paragraph>销毁由 PhysicsServer2D 创建的任何对象。如果传递的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 不是 PhysicsServer2D 可以创建的对象之一，则会将一个错误发送到控制台。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-get-process-info"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-get-process-info" names="class_physicsserver2d_method_get_process_info"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_process_info</strong> <strong>(</strong> <reference internal="True" refid="enum-physicsserver2d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference> process_info <strong>)</strong></paragraph>
            <paragraph>返回关于 2D 物理引擎当前状态的信息。可用状态的列表见 <reference internal="True" refid="enum-physicsserver2d-processinfo"><inline classes="std std-ref">ProcessInfo</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-clear"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-clear" names="class_physicsserver2d_method_joint_clear">void <strong>joint_clear</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint <strong>)</strong></paragraph>
            <paragraph>销毁具有给定 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 的关节，创建一个新的未初始化关节，并使该 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 引用这个新关节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-create" names="class_physicsserver2d_method_joint_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>joint_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 关节，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。要设置关节类型，请使用 <reference internal="True" refid="class-physicsserver2d-method-joint-make-damped-spring"><inline classes="std std-ref">joint_make_damped_spring</inline></reference>、<reference internal="True" refid="class-physicsserver2d-method-joint-make-groove"><inline classes="std std-ref">joint_make_groove</inline></reference> 或 <reference internal="True" refid="class-physicsserver2d-method-joint-make-pin"><inline classes="std std-ref">joint_make_pin</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-joint-set-param"><inline classes="std std-ref">joint_set_param</inline></reference> 设置通用关节参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-disable-collisions-between-bodies"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-disable-collisions-between-bodies" names="class_physicsserver2d_method_joint_disable_collisions_between_bodies">void <strong>joint_disable_collisions_between_bodies</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> disable <strong>)</strong></paragraph>
            <paragraph>设置附加到该 <reference internal="True" refuri="class_joint2d#class-joint2d"><inline classes="std std-ref">Joint2D</inline></reference> 的物体能否互相碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-get-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-get-param" names="class_physicsserver2d_method_joint_get_param"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>joint_get_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定关节参数的值。可用参数的列表见 <reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-get-type"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-get-type" names="class_physicsserver2d_method_joint_get_type"><reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference> <strong>joint_get_type</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该关节的类型（见 <reference internal="True" refid="enum-physicsserver2d-jointtype"><inline classes="std std-ref">JointType</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-is-disabled-collisions-between-bodies"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-is-disabled-collisions-between-bodies" names="class_physicsserver2d_method_joint_is_disabled_collisions_between_bodies"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>joint_is_disabled_collisions_between_bodies</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回分配给该 <reference internal="True" refuri="class_joint2d#class-joint2d"><inline classes="std std-ref">Joint2D</inline></reference> 的物体能否相互碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-make-damped-spring"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-make-damped-spring" names="class_physicsserver2d_method_joint_make_damped_spring">void <strong>joint_make_damped_spring</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor_b, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_a, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_b=RID() <strong>)</strong></paragraph>
            <paragraph>使该关节成为一个阻尼弹簧关节，连接到实体 <literal>body_a</literal> 上的点 <literal>anchor_a</literal>（在全局坐标中给出）和实体 <literal>body_b</literal> 上的点 <literal>anchor_b</literal>（在全局坐标中给出）。要设置特定于阻尼弹簧的参数，请参阅 <reference internal="True" refid="class-physicsserver2d-method-damped-spring-joint-set-param"><inline classes="std std-ref">damped_spring_joint_set_param</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-make-groove"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-make-groove" names="class_physicsserver2d_method_joint_make_groove">void <strong>joint_make_groove</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> groove1_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> groove2_a, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor_b, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_a=RID(), <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_b=RID() <strong>)</strong></paragraph>
            <paragraph>使关节成为凹槽关节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-make-pin"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-make-pin" names="class_physicsserver2d_method_joint_make_pin">void <strong>joint_make_pin</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> anchor, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_a, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> body_b=RID() <strong>)</strong></paragraph>
            <paragraph>使关节成为一个销关节。如果 <literal>body_b</literal> 是一个空 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>，则 <literal>body_a</literal> 被固定到点 <literal>anchor</literal>（在全局坐标中给出）； 否则，<literal>body_a</literal> 在 <literal>anchor</literal> 点被固定到 <literal>body_b</literal>（在全局坐标中给出）。要设置特定于销关节的参数，请参阅 <reference internal="True" refid="class-physicsserver2d-method-pin-joint-set-param"><inline classes="std std-ref">pin_joint_set_param</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-joint-set-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-joint-set-param" names="class_physicsserver2d_method_joint_set_param">void <strong>joint_set_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置给定关节参数的值。可用参数的列表见 <reference internal="True" refid="enum-physicsserver2d-jointparam"><inline classes="std std-ref">JointParam</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-pin-joint-get-flag"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-pin-joint-get-flag" names="class_physicsserver2d_method_pin_joint_get_flag"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>pin_joint_get_flag</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> flag <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取销关节标志（请参阅 <reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> 常量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-pin-joint-get-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-pin-joint-get-param" names="class_physicsserver2d_method_pin_joint_get_param"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pin_joint_get_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回销关节参数的值。有关可用参数列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-pin-joint-set-flag"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-pin-joint-set-flag" names="class_physicsserver2d_method_pin_joint_set_flag">void <strong>pin_joint_set_flag</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> flag, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong></paragraph>
            <paragraph>设置销关节标志（请参阅 <reference internal="True" refid="enum-physicsserver2d-pinjointflag"><inline classes="std std-ref">PinJointFlag</inline></reference> 常量）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-pin-joint-set-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-pin-joint-set-param" names="class_physicsserver2d_method_pin_joint_set_param">void <strong>pin_joint_set_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> joint, <reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置销关节参数。有关可用参数列表，请参阅 <reference internal="True" refid="enum-physicsserver2d-pinjointparam"><inline classes="std std-ref">PinJointParam</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-rectangle-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-rectangle-shape-create" names="class_physicsserver2d_method_rectangle_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>rectangle_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 矩形形状，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置该矩形的半边距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-segment-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-segment-shape-create" names="class_physicsserver2d_method_segment_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>segment_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 线段形状，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置线段的起点和终点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-separation-ray-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-separation-ray-shape-create" names="class_physicsserver2d_method_separation_ray_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>separation_ray_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 分离射线形状，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置形状的 <literal>length</literal> 和 <literal>slide_on_slope</literal> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-set-active"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-set-active" names="class_physicsserver2d_method_set_active">void <strong>set_active</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
            <paragraph>激活或停用 2D 物理服务。如果 <literal>active</literal> 为 <literal>false</literal>，则物理服务将不会在其物理步骤中执行任何操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-shape-get-data"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-shape-get-data" names="class_physicsserver2d_method_shape_get_data"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>shape_get_data</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回定义形状配置的形状数据，例如矩形的半边长或凹形的线段。有关每种情况下该数据的精确格式，请参阅 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-shape-get-type"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-shape-get-type" names="class_physicsserver2d_method_shape_get_type"><reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference> <strong>shape_get_type</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该形状的类型（见 <reference internal="True" refid="enum-physicsserver2d-shapetype"><inline classes="std std-ref">ShapeType</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-shape-set-data"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-shape-set-data" names="class_physicsserver2d_method_shape_set_data">void <strong>shape_set_data</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shape, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> data <strong>)</strong></paragraph>
            <paragraph>设置定义形状配置的形状数据。要传递的 <literal>data</literal> 取决于形状的类型（参见 <reference internal="True" refid="class-physicsserver2d-method-shape-get-type"><inline classes="std std-ref">shape_get_type</inline></reference>）：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-world-boundary"><inline classes="std std-ref">SHAPE_WORLD_BOUNDARY</inline></reference>：长度为 2 的数组，包含 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 类型的 <literal>normal</literal> 方向和 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 类型的距离 <literal>d</literal>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-separation-ray"><inline classes="std std-ref">SHAPE_SEPARATION_RAY</inline></reference>：字典，包含键 <literal>length</literal> 和 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 值、以及键 <literal>slide_on_slope</literal> 和 <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> 值，</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-segment"><inline classes="std std-ref">SHAPE_SEGMENT</inline></reference>：<reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 类型的 <literal>rect</literal>，以 <literal>rect.position</literal> 表示线段中的第一个点，并以 <literal>rect.size</literal> 表示线段中的第二个点，</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-circle"><inline classes="std std-ref">SHAPE_CIRCLE</inline></reference>：<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 类型的 <literal>radius</literal>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-rectangle"><inline classes="std std-ref">SHAPE_RECTANGLE</inline></reference>：<reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 类型的 <literal>half_extents</literal>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-capsule"><inline classes="std std-ref">SHAPE_CAPSULE</inline></reference>：长度为 2 的数组（或一个 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>），包含一个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 类型的 <literal>height</literal> 和一个 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 类型的 <literal>radius</literal>，</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-convex-polygon"><inline classes="std std-ref">SHAPE_CONVEX_POLYGON</inline></reference>：按逆时针顺序定义凸多边形的点的 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>（在内部使用由连续点形成的每个线段的顺时针向外法线计算）；或一个长度可被 4 整除的 <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>，以便每个 4 元组的 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> 包含一个点的坐标，后跟一个向量的坐标表示，该向量是当前点和下一个点之间的线段的顺时针向外法向量，</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="class-physicsserver2d-constant-shape-concave-polygon"><inline classes="std std-ref">SHAPE_CONCAVE_POLYGON</inline></reference>：长度可被 2 整除的 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>（每对点形成一个线段）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>警告：</strong>在 <reference internal="True" refid="class-physicsserver2d-constant-shape-convex-polygon"><inline classes="std std-ref">SHAPE_CONVEX_POLYGON</inline></reference> 的情况下，该方法不检查提供的点是否能够形成凸多边形（与 <reference internal="True" refuri="class_collisionpolygon2d#class-collisionpolygon2d-property-polygon"><inline classes="std std-ref">CollisionPolygon2D.polygon</inline></reference> 属性不同）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-space-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-space-create" names="class_physicsserver2d_method_space_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>space_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 空间，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。空间包含实体和区域，并控制其中实体的物理模拟的步骤。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-space-get-direct-state"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-space-get-direct-state" names="class_physicsserver2d_method_space_get_direct_state"><reference internal="True" refuri="class_physicsdirectspacestate2d#class-physicsdirectspacestate2d"><inline classes="std std-ref">PhysicsDirectSpaceState2D</inline></reference> <strong>space_get_direct_state</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong></paragraph>
            <paragraph>返回空间的状态，即 <reference internal="True" refuri="class_physicsdirectspacestate2d#class-physicsdirectspacestate2d"><inline classes="std std-ref">PhysicsDirectSpaceState2D</inline></reference>。该对象可用于进行碰撞/相交的查询。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-space-get-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-space-get-param" names="class_physicsserver2d_method_space_get_param"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>space_get_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space, <reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> param <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定空间参数的值。可用参数的列表见 <reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-space-is-active"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-space-is-active" names="class_physicsserver2d_method_space_is_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>space_is_active</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果该空间处于活动状态，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-space-set-active"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-space-set-active" names="class_physicsserver2d_method_space_set_active">void <strong>space_set_active</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> active <strong>)</strong></paragraph>
            <paragraph>激活或停用该空间。如果 <literal>active</literal> 为 <literal>false</literal>，那么物理服务将不会在它的物理步骤中对这个空间做任何事情。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-space-set-param"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-space-set-param" names="class_physicsserver2d_method_space_set_param">void <strong>space_set_param</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> space, <reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference> param, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>设置给定空间参数的值。可用参数的列表见 <reference internal="True" refid="enum-physicsserver2d-spaceparameter"><inline classes="std std-ref">SpaceParameter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-physicsserver2d-method-world-boundary-shape-create"></target>
            <paragraph classes="classref-method" ids="class-physicsserver2d-method-world-boundary-shape-create" names="class_physicsserver2d_method_world_boundary_shape_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>world_boundary_shape_create</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>在物理服务中创建一个 2D 世界边界形状，并返回标识它的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。可使用 <reference internal="True" refid="class-physicsserver2d-method-shape-set-data"><inline classes="std std-ref">shape_set_data</inline></reference> 设置形状的法线方向和距离属性。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
