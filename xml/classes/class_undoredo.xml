<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_undoredo.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/UndoRedo.xml.</comment>
    <target refid="class-undoredo"></target>
    <section ids="undoredo class-undoredo" names="undoredo class_undoredo">
        <title>UndoRedo</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>为实现撤销和重做操作提供高阶接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>UndoRedo 的原理是在“动作”中注册方法和属性的变化。你可以创建一个动作，然后提供执行（do）和撤销（undo）这个动作需要进行的函数调用和属性更改，然后提交该动作。</paragraph>
            <paragraph>动作提交后就会执行所有 <literal>do_*</literal> 方法。如果使用 <reference internal="True" refid="class-undoredo-method-undo"><inline classes="std std-ref">undo</inline></reference> 方法，那么就会执行 <literal>undo_*</literal> 方法。如果使用 <reference internal="True" refid="class-undoredo-method-redo"><inline classes="std std-ref">redo</inline></reference> 方法，那么就会再次执行所有 <literal>do_*</literal> 方法。</paragraph>
            <paragraph>以下是添加动作的示例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var undo_redo = UndoRedo.new()

func do_something():
    pass # 在此处编写你的代码。

func undo_something():
    pass # 在此处编写恢复“do_something()”里所做事情的代码。

func _on_my_button_pressed():
    var node = get_node("MyNode2D")
    undo_redo.create_action("移动节点")
    undo_redo.add_do_method(do_something)
    undo_redo.add_undo_method(undo_something)
    undo_redo.add_do_property(node, "position", Vector2(100,100))
    undo_redo.add_undo_property(node, "position", node.position)
    undo_redo.commit_action()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private UndoRedo _undoRedo;

public override void _Ready()
{
    _undoRedo = new UndoRedo();
}

public void DoSomething()
{
    // 在此处编写你的代码。
}

public void UndoSomething()
{
    // 在此处编写恢复“DoSomething()”里所做事情的代码。
}

private void OnMyButtonPressed()
{
    var node = GetNode&lt;Node2D&gt;("MyNode2D");
    _undoRedo.CreateAction("移动节点");
    _undoRedo.AddDoMethod(new Callable(this, MethodName.DoSomething));
    _undoRedo.AddUndoMethod(new Callable(this, MethodName.UndoSomething));
    _undoRedo.AddDoProperty(node, "position", new Vector2(100, 100));
    _undoRedo.AddUndoProperty(node, "position", node.Position);
    _undoRedo.CommitAction();
}</literal_block>
                </div>
            </container>
            <paragraph>调用 <literal>add_(un)do_*</literal> 方法之前，你需要先调用 <reference internal="True" refid="class-undoredo-method-create-action"><inline classes="std std-ref">create_action</inline></reference>。调用之后则需要调用 <reference internal="True" refid="class-undoredo-method-commit-action"><inline classes="std std-ref">commit_action</inline></reference>。</paragraph>
            <paragraph>如果你不需要注册方法，则可以将 <reference internal="True" refid="class-undoredo-method-add-do-method"><inline classes="std std-ref">add_do_method</inline></reference> 和 <reference internal="True" refid="class-undoredo-method-add-undo-method"><inline classes="std std-ref">add_undo_method</inline></reference> 省去；属性同理。你也可以注册多个方法/属性。</paragraph>
            <paragraph>如果你要制作 <reference internal="True" refuri="class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference>，希望集成编辑器的撤销历史，请改用 <reference internal="True" refuri="class_editorundoredomanager#class-editorundoredomanager"><inline classes="std std-ref">EditorUndoRedoManager</inline></reference>。</paragraph>
            <paragraph>如果你所注册的不同属性/方法之间有相互依赖，请注意默认情况下撤销操作的调用顺序和添加顺序是一致的。因此请不要将 do 操作和 undo 操作写在一起，最好还是和下面一样 do 和 do 一起写，undo 和 undo 一起写。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">undo_redo.create_action("添加对象")

# DO
undo_redo.add_do_method(_create_object)
undo_redo.add_do_method(_add_object_to_singleton)

# UNDO
undo_redo.add_undo_method(_remove_object_from_singleton)
undo_redo.add_undo_method(_destroy_that_object)

undo_redo.commit_action()</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">_undo_redo.CreateAction("添加对象");

// DO
_undo_redo.AddDoMethod(new Callable(this, MethodName.CreateObject));
_undo_redo.AddDoMethod(new Callable(this, MethodName.AddObjectToSingleton));

// UNDO
_undo_redo.AddUndoMethod(new Callable(this, MethodName.RemoveObjectFromSingleton));
_undo_redo.AddUndoMethod(new Callable(this, MethodName.DestroyThatObject));

_undo_redo.CommitAction();</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="209"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-add-do-method"><inline classes="std std-ref">add_do_method</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-add-do-property"><inline classes="std std-ref">add_do_property</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-add-do-reference"><inline classes="std std-ref">add_do_reference</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-add-undo-method"><inline classes="std std-ref">add_undo_method</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-add-undo-property"><inline classes="std std-ref">add_undo_property</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-add-undo-reference"><inline classes="std std-ref">add_undo_reference</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-clear-history"><inline classes="std std-ref">clear_history</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> increase_version=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-commit-action"><inline classes="std std-ref">commit_action</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> execute=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-create-action"><inline classes="std std-ref">create_action</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refid="enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference> merge_mode=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> backward_undo_ops=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-end-force-keep-in-merge-ends"><inline classes="std std-ref">end_force_keep_in_merge_ends</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-get-action-name"><inline classes="std std-ref">get_action_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-get-current-action"><inline classes="std std-ref">get_current_action</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-get-current-action-name"><inline classes="std std-ref">get_current_action_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-get-history-count"><inline classes="std std-ref">get_history_count</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-get-version"><inline classes="std std-ref">get_version</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-has-redo"><inline classes="std std-ref">has_redo</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-has-undo"><inline classes="std std-ref">has_undo</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-is-committing-action"><inline classes="std std-ref">is_committing_action</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-redo"><inline classes="std std-ref">redo</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-start-force-keep-in-merge-ends"><inline classes="std std-ref">start_force_keep_in_merge_ends</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-undoredo-method-undo"><inline classes="std std-ref">undo</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-undoredo-signal-version-changed"></target>
            <paragraph classes="classref-signal" ids="class-undoredo-signal-version-changed" names="class_undoredo_signal_version_changed"><strong>version_changed</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>当 <reference internal="True" refid="class-undoredo-method-undo"><inline classes="std std-ref">undo</inline></reference> 或 <reference internal="True" refid="class-undoredo-method-redo"><inline classes="std std-ref">redo</inline></reference> 被调用时调用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-undoredo-mergemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-undoredo-mergemode" names="enum_undoredo_mergemode">enum <strong>MergeMode</strong>:</paragraph>
            <target refid="class-undoredo-constant-merge-disable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-undoredo-constant-merge-disable" names="class_undoredo_constant_merge_disable"><reference internal="True" refid="enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference> <strong>MERGE_DISABLE</strong> = <literal>0</literal></paragraph>
            <paragraph>使“do”/“undo”操作保持在单独的动作中。</paragraph>
            <target refid="class-undoredo-constant-merge-ends"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-undoredo-constant-merge-ends" names="class_undoredo_constant_merge_ends"><reference internal="True" refid="enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference> <strong>MERGE_ENDS</strong> = <literal>1</literal></paragraph>
            <paragraph>使得动作的“撤消”操作来自创建的第一个动作，“执行”操作来自最后一个具有相同名称的后续动作。</paragraph>
            <target refid="class-undoredo-constant-merge-all"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-undoredo-constant-merge-all" names="class_undoredo_constant_merge_all"><reference internal="True" refid="enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference> <strong>MERGE_ALL</strong> = <literal>2</literal></paragraph>
            <paragraph>使具有相同名称的后续动作合并为一个。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-undoredo-method-add-do-method"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-add-do-method" names="class_undoredo_method_add_do_method">void <strong>add_do_method</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong></paragraph>
            <paragraph>注册 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>，会在提交动作时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-add-do-property"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-add-do-property" names="class_undoredo_method_add_do_property">void <strong>add_do_property</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>注册 <literal>property</literal>，会在提交动作时将其值更改为 <literal>value</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-add-do-reference"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-add-do-reference" names="class_undoredo_method_add_do_reference">void <strong>add_do_reference</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong></paragraph>
            <paragraph>为“do”（执行）注册引用，丢弃该“do”历史时会擦除该引用。主要可用于“do”调用新建的节点。请勿用于资源。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var node = Node2D.new()
undo_redo.create_action("添加节点")
undo_redo.add_do_method(add_child.bind(node))
undo_redo.add_do_reference(node)
undo_redo.add_undo_method(remove_child.bind(node))
undo_redo.commit_action()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-add-undo-method"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-add-undo-method" names="class_undoredo_method_add_undo_method">void <strong>add_undo_method</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable <strong>)</strong></paragraph>
            <paragraph>注册 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>，会在撤销动作时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-add-undo-property"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-add-undo-property" names="class_undoredo_method_add_undo_property">void <strong>add_undo_property</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> property, <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>注册 <literal>property</literal>，会在撤销动作时将其值更改为 <literal>value</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-add-undo-reference"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-add-undo-reference" names="class_undoredo_method_add_undo_reference">void <strong>add_undo_reference</strong> <strong>(</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> object <strong>)</strong></paragraph>
            <paragraph>为“undo”（撤销）注册引用，丢弃该“undo”历史时会擦除该引用。主要可用于“do”调用移除的节点（不是“undo”调用）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var node = $Node2D
undo_redo.create_action("移除节点")
undo_redo.add_do_method(remove_child.bind(node))
undo_redo.add_undo_method(add_child.bind(node))
undo_redo.add_undo_reference(node)
undo_redo.commit_action()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-clear-history"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-clear-history" names="class_undoredo_method_clear_history">void <strong>clear_history</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> increase_version=true <strong>)</strong></paragraph>
            <paragraph>清除撤销/重做历史和相关的引用。</paragraph>
            <paragraph>将 <literal>false</literal> 传递给 <literal>increase_version</literal> 将防止在清除历史记录时增加版本号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-commit-action"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-commit-action" names="class_undoredo_method_commit_action">void <strong>commit_action</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> execute=true <strong>)</strong></paragraph>
            <paragraph>提交动作。如果 <literal>execute</literal> 为 <literal>true</literal>（默认情况），则会在调用此函数时调用/设置所有“执行（do）”方法/属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-create-action"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-create-action" names="class_undoredo_method_create_action">void <strong>create_action</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refid="enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference> merge_mode=0, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> backward_undo_ops=false <strong>)</strong></paragraph>
            <paragraph>创建一个新的动作。调用后，请执行所有你需要的 <reference internal="True" refid="class-undoredo-method-add-do-method"><inline classes="std std-ref">add_do_method</inline></reference>、<reference internal="True" refid="class-undoredo-method-add-undo-method"><inline classes="std std-ref">add_undo_method</inline></reference>、<reference internal="True" refid="class-undoredo-method-add-do-property"><inline classes="std std-ref">add_do_property</inline></reference> 和 <reference internal="True" refid="class-undoredo-method-add-undo-property"><inline classes="std std-ref">add_undo_property</inline></reference> 调用，然后再用 <reference internal="True" refid="class-undoredo-method-commit-action"><inline classes="std std-ref">commit_action</inline></reference> 提交这个动作。</paragraph>
            <paragraph>动作的合并方式由 <literal>merge_mode</literal> 决定。详见 <reference internal="True" refid="enum-undoredo-mergemode"><inline classes="std std-ref">MergeMode</inline></reference>。</paragraph>
            <paragraph>动作中撤销操作的顺序由 <literal>backward_undo_ops</literal> 决定。<literal>backward_undo_ops</literal> 为 <literal>false</literal> 时，撤销选项的顺序和添加顺序一致。也就是说，先添加的操作会先撤销。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-end-force-keep-in-merge-ends"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-end-force-keep-in-merge-ends" names="class_undoredo_method_end_force_keep_in_merge_ends">void <strong>end_force_keep_in_merge_ends</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>停止将操作标记为要处理，即使该动作在 <reference internal="True" refid="class-undoredo-constant-merge-ends"><inline classes="std std-ref">MERGE_ENDS</inline></reference> 模式下与另一个动作合并。请参阅 <reference internal="True" refid="class-undoredo-method-start-force-keep-in-merge-ends"><inline classes="std std-ref">start_force_keep_in_merge_ends</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-get-action-name"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-get-action-name" names="class_undoredo_method_get_action_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_action_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> id <strong>)</strong></paragraph>
            <paragraph>根据索引获取动作名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-get-current-action"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-get-current-action" names="class_undoredo_method_get_current_action"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_current_action</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>获取当前动作的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-get-current-action-name"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-get-current-action-name" names="class_undoredo_method_get_current_action_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_current_action_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取当前动作的名称，等价于 <literal>get_action_name(get_current_action())</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-get-history-count"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-get-history-count" names="class_undoredo_method_get_history_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_history_count</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回历史中有多少元素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-get-version"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-get-version" names="class_undoredo_method_get_version"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_version</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取版本。每次提交一个新的操作，<strong>UndoRedo</strong> 的版本号都会自动增加。</paragraph>
            <paragraph>这主要用于检查保存的版本是否发生了更改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-has-redo"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-has-redo" names="class_undoredo_method_has_redo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_redo</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>有“重做”动作可用时返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-has-undo"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-has-undo" names="class_undoredo_method_has_undo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_undo</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>有“撤销”动作可用时返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-is-committing-action"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-is-committing-action" names="class_undoredo_method_is_committing_action"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_committing_action</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果 <strong>UndoRedo</strong> 当前正在提交动作，即运行其“do”的方法或属性变化，则返回 <literal>true</literal>（请参阅 <reference internal="True" refid="class-undoredo-method-commit-action"><inline classes="std std-ref">commit_action</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-redo"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-redo" names="class_undoredo_method_redo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>redo</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>重做上一个动作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-start-force-keep-in-merge-ends"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-start-force-keep-in-merge-ends" names="class_undoredo_method_start_force_keep_in_merge_ends">void <strong>start_force_keep_in_merge_ends</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>标记要处理的下一个“执行”和“撤消”操作，即使该动作在 <reference internal="True" refid="class-undoredo-constant-merge-ends"><inline classes="std std-ref">MERGE_ENDS</inline></reference> 模式下与另一个动作合并。使用 <reference internal="True" refid="class-undoredo-method-end-force-keep-in-merge-ends"><inline classes="std std-ref">end_force_keep_in_merge_ends</inline></reference> 返回到正常操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-undoredo-method-undo"></target>
            <paragraph classes="classref-method" ids="class-undoredo-method-undo" names="class_undoredo_method_undo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>undo</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>撤销上一个动作。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
