<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_tcpserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TCPServer.xml.</comment>
    <target refid="class-tcpserver"></target>
    <section ids="tcpserver class-tcpserver" names="tcpserver class_tcpserver">
        <title>TCPServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>TCP 服务器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>TCP 服务器。监听端口上的连接，并在获得传入连接时返回 <reference internal="True" refuri="class_streampeertcp#class-streampeertcp"><inline classes="std std-ref">StreamPeerTCP</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>导出到安卓时，在导出项目或使用一键部署之前，请务必在安卓导出预设中开启 <literal>INTERNET</literal> 权限。否则 Android 会阻止任何形式的网络通信。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="43"></colspec>
                    <colspec colwidth="132"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tcpserver-method-get-local-port"><inline classes="std std-ref">get_local_port</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tcpserver-method-is-connection-available"><inline classes="std std-ref">is_connection_available</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tcpserver-method-is-listening"><inline classes="std std-ref">is_listening</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tcpserver-method-listen"><inline classes="std std-ref">listen</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bind_address: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "*")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tcpserver-method-stop"><inline classes="std std-ref">stop</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_streampeertcp#class-streampeertcp"><inline classes="std std-ref">StreamPeerTCP</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-tcpserver-method-take-connection"><inline classes="std std-ref">take_connection</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-tcpserver-method-get-local-port"></target>
            <paragraph classes="classref-method" ids="class-tcpserver-method-get-local-port" names="class_tcpserver_method_get_local_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_local_port</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tcpserver-method-get-local-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该服务器正在监听的本地端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tcpserver-method-is-connection-available"></target>
            <paragraph classes="classref-method" ids="class-tcpserver-method-is-connection-available" names="class_tcpserver_method_is_connection_available"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_connection_available</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tcpserver-method-is-connection-available"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果有连接可供获取，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tcpserver-method-is-listening"></target>
            <paragraph classes="classref-method" ids="class-tcpserver-method-is-listening" names="class_tcpserver_method_is_listening"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_listening</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-tcpserver-method-is-listening"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果服务器当前正在侦听连接，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tcpserver-method-listen"></target>
            <paragraph classes="classref-method" ids="class-tcpserver-method-listen" names="class_tcpserver_method_listen"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>listen</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, bind_address: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "*") <reference internal="True" refid="class-tcpserver-method-listen"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>port</literal> 上监听与 <literal>bind_address</literal> 绑定的地址。</paragraph>
            <paragraph>如果 <literal>bind_address</literal> 被设置为 <literal>"*"</literal>（默认），该服务器将监听所有可用地址（包括 IPv4 和 IPv6）。</paragraph>
            <paragraph>如果 <literal>bind_address</literal> 被设置为 <literal>"0.0.0.0"</literal>（用于 IPv4）或 <literal>"::"</literal>（用于 IPv6），该服务器将监听所有符合该 IP 类型的可用地址。</paragraph>
            <paragraph>如果 <literal>bind_address</literal> 被设置为任何有效的地址（如 <literal>"192.168.1.101"</literal>、<literal>"::1"</literal> 等），该服务器将只在具有该地址的接口上监听（如果不存在具有该地址的接口则失败）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tcpserver-method-stop"></target>
            <paragraph classes="classref-method" ids="class-tcpserver-method-stop" names="class_tcpserver_method_stop"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop</strong>() <reference internal="True" refid="class-tcpserver-method-stop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>停止监听。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-tcpserver-method-take-connection"></target>
            <paragraph classes="classref-method" ids="class-tcpserver-method-take-connection" names="class_tcpserver_method_take_connection"><reference internal="True" refuri="class_streampeertcp#class-streampeertcp"><inline classes="std std-ref">StreamPeerTCP</inline></reference> <strong>take_connection</strong>() <reference internal="True" refid="class-tcpserver-method-take-connection"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果连接可用，则返回带有该连接的 StreamPeerTCP。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
