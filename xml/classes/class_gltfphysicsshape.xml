<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_gltfphysicsshape.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/gltf/doc_classes/GLTFPhysicsShape.xml.</comment>
    <target refid="class-gltfphysicsshape"></target>
    <section ids="gltfphysicsshape class-gltfphysicsshape" names="gltfphysicsshape class_gltfphysicsshape">
        <title>GLTFPhysicsShape</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>代表 GLTF 物理形状。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>代表由 <literal>OMI_physics_shape</literal> 或 <literal>OMI_collider</literal> GLTF 扩展定义的物理形状。这个类是 GLTF 数据与 Godot 节点的中介，并且经过了抽象，支持将来添加不同 GLTF 物理扩展。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="OMI_physics_shape GLTF 扩展" refuri="https://github.com/omigroup/gltf-extensions/tree/main/extensions/2.0/OMI_physics_shape">OMI_physics_shape GLTF 扩展</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="OMI_collider GLTF 扩展" refuri="https://github.com/omigroup/gltf-extensions/tree/main/extensions/2.0/Archived/OMI_collider">OMI_collider GLTF 扩展</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="41"></colspec>
                    <colspec colwidth="69"></colspec>
                    <colspec colwidth="22"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-property-height"><inline classes="std std-ref">height</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_importermesh#class-importermesh"><inline classes="std std-ref">ImporterMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-property-importer-mesh"><inline classes="std std-ref">importer_mesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-property-is-trigger"><inline classes="std std-ref">is_trigger</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-property-mesh-index"><inline classes="std std-ref">mesh_index</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-property-radius"><inline classes="std std-ref">radius</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-property-shape-type"><inline classes="std std-ref">shape_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="136"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape"><inline classes="std std-ref">GLTFPhysicsShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-method-from-dictionary"><inline classes="std std-ref">from_dictionary</inline></reference>(dictionary: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape"><inline classes="std std-ref">GLTFPhysicsShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-method-from-node"><inline classes="std std-ref">from_node</inline></reference>(shape_node: <reference internal="True" refuri="class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape"><inline classes="std std-ref">GLTFPhysicsShape</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-method-from-resource"><inline classes="std std-ref">from_resource</inline></reference>(shape_resource: <reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-method-to-dictionary"><inline classes="std std-ref">to_dictionary</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-method-to-node"><inline classes="std std-ref">to_node</inline></reference>(cache_shapes: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gltfphysicsshape-method-to-resource"><inline classes="std std-ref">to_resource</inline></reference>(cache_shapes: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-gltfphysicsshape-property-height"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsshape-property-height" names="class_gltfphysicsshape_property_height"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>height</strong> = <literal>2.0</literal> <reference internal="True" refid="class-gltfphysicsshape-property-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_height</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_height</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>形状的高度，单位为米。仅在形状类型为“capsule”或“cylinder”时使用。这个值不能为负数，并且对于“capsule”而言应当至少是半径的两倍。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-property-importer-mesh"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsshape-property-importer-mesh" names="class_gltfphysicsshape_property_importer_mesh"><reference internal="True" refuri="class_importermesh#class-importermesh"><inline classes="std std-ref">ImporterMesh</inline></reference> <strong>importer_mesh</strong> <reference internal="True" refid="class-gltfphysicsshape-property-importer-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_importer_mesh</strong>(value: <reference internal="True" refuri="class_importermesh#class-importermesh"><inline classes="std std-ref">ImporterMesh</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_importermesh#class-importermesh"><inline classes="std std-ref">ImporterMesh</inline></reference> <strong>get_importer_mesh</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>形状的 <reference internal="True" refuri="class_importermesh#class-importermesh"><inline classes="std std-ref">ImporterMesh</inline></reference> 资源。仅在形状类型为“hull”（凸包）和“trimesh”（凹三角网格）时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-property-is-trigger"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsshape-property-is-trigger" names="class_gltfphysicsshape_property_is_trigger"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_trigger</strong> = <literal>false</literal> <reference internal="True" refid="class-gltfphysicsshape-property-is-trigger"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_is_trigger</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_is_trigger</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则表示这个形状是触发器。对于 Godot 而言，这意味着该形状应当是 Area3D 节点的子节点。</paragraph>
            <paragraph>这是 <reference internal="True" refid="class-gltfphysicsshape-method-to-node"><inline classes="std std-ref">to_node</inline></reference> 方法中唯一没有用到的变量，应该单独用来确定要将生成的节点添加到哪个节点之下。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-property-mesh-index"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsshape-property-mesh-index" names="class_gltfphysicsshape_property_mesh_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>mesh_index</strong> = <literal>-1</literal> <reference internal="True" refid="class-gltfphysicsshape-property-mesh-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_mesh_index</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_mesh_index</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>形状网格在 GLTF 文件中的索引。仅在形状类型为“hull”（凸包）和“trimesh”（凹三角网格）时使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-property-radius"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsshape-property-radius" names="class_gltfphysicsshape_property_radius"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>radius</strong> = <literal>0.5</literal> <reference internal="True" refid="class-gltfphysicsshape-property-radius"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_radius</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_radius</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>形状的半径，单位为米。仅在形状类型为“capsule”“cylinder”或“sphere”时使用。这个值不应为负数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-property-shape-type"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsshape-property-shape-type" names="class_gltfphysicsshape_property_shape_type"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>shape_type</strong> = <literal>""</literal> <reference internal="True" refid="class-gltfphysicsshape-property-shape-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shape_type</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_shape_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>这个形状所代表的形状类型。有效取值有“box”“capsule”“cylinder”“sphere”“hull”以及“trimesh”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-property-size"></target>
            <paragraph classes="classref-property" ids="class-gltfphysicsshape-property-size" names="class_gltfphysicsshape_property_size"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>size</strong> = <literal>Vector3(1, 1, 1)</literal> <reference internal="True" refid="class-gltfphysicsshape-property-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_size</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>形状的大小，单位为米。仅在碰撞体类型为“box”时使用，代表盒子的“直径”。这个值不应为负数。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gltfphysicsshape-method-from-dictionary"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsshape-method-from-dictionary" names="class_gltfphysicsshape_method_from_dictionary"><reference internal="True" refid="class-gltfphysicsshape"><inline classes="std std-ref">GLTFPhysicsShape</inline></reference> <strong>from_dictionary</strong>(dictionary: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-gltfphysicsshape-method-from-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通过解析给定的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 新建 GLTFPhysicsShape 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-method-from-node"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsshape-method-from-node" names="class_gltfphysicsshape_method_from_node"><reference internal="True" refid="class-gltfphysicsshape"><inline classes="std std-ref">GLTFPhysicsShape</inline></reference> <strong>from_node</strong>(shape_node: <reference internal="True" refuri="class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-gltfphysicsshape-method-from-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据给定的 Godot <reference internal="True" refuri="class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference> 节点新建 GLTFPhysicsShape 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-method-from-resource"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsshape-method-from-resource" names="class_gltfphysicsshape_method_from_resource"><reference internal="True" refid="class-gltfphysicsshape"><inline classes="std std-ref">GLTFPhysicsShape</inline></reference> <strong>from_resource</strong>(shape_resource: <reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-gltfphysicsshape-method-from-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据给定的 Godot <reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference> 节点新建 GLTFPhysicsShape 实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-method-to-dictionary"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsshape-method-to-dictionary" names="class_gltfphysicsshape_method_to_dictionary"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>to_dictionary</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-gltfphysicsshape-method-to-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将该 GLTFPhysicsShape 实例序列化为 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>，其格式由 <literal>OMI_physics_shape</literal> 定义。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-method-to-node"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsshape-method-to-node" names="class_gltfphysicsshape_method_to_node"><reference internal="True" refuri="class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference> <strong>to_node</strong>(cache_shapes: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-gltfphysicsshape-method-to-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将这个 GLTFPhysicsShape 实例转换为 Godot <reference internal="True" refuri="class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gltfphysicsshape-method-to-resource"></target>
            <paragraph classes="classref-method" ids="class-gltfphysicsshape-method-to-resource" names="class_gltfphysicsshape_method_to_resource"><reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference> <strong>to_resource</strong>(cache_shapes: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-gltfphysicsshape-method-to-resource"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将这个 GLTFPhysicsShape 实例转换为 Godot <reference internal="True" refuri="class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference> 节点。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
