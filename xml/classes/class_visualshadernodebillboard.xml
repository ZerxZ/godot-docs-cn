<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodebillboard.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeBillboard.xml.</comment>
    <target refid="class-visualshadernodebillboard"></target>
    <section ids="visualshadernodebillboard class-visualshadernodebillboard" names="visualshadernodebillboard class_visualshadernodebillboard">
        <title>VisualShaderNodeBillboard</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在可视化着色器图中，用于控制对象如何面向相机的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个节点的输出端口需要连接至 <reference internal="True" refuri="class_visualshadernodeoutput#class-visualshadernodeoutput"><inline classes="std std-ref">VisualShaderNodeOutput</inline></reference> 的 <literal>Model View Matrix</literal> 端口。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="80"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodebillboard-property-billboard-type"><inline classes="std std-ref">billboard_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodebillboard-property-keep-scale"><inline classes="std std-ref">keep_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshadernodebillboard-billboardtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodebillboard-billboardtype" names="enum_visualshadernodebillboard_billboardtype">enum <strong>BillboardType</strong>: <reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernodebillboard-constant-billboard-type-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodebillboard-constant-billboard-type-disabled" names="class_visualshadernodebillboard_constant_billboard_type_disabled"><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> <strong>BILLBOARD_TYPE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>公告板被禁用，该节点不做任何事情。</paragraph>
            <target refid="class-visualshadernodebillboard-constant-billboard-type-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodebillboard-constant-billboard-type-enabled" names="class_visualshadernodebillboard_constant_billboard_type_enabled"><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> <strong>BILLBOARD_TYPE_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>启用标准公告板算法。</paragraph>
            <target refid="class-visualshadernodebillboard-constant-billboard-type-fixed-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodebillboard-constant-billboard-type-fixed-y" names="class_visualshadernodebillboard_constant_billboard_type_fixed_y"><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> <strong>BILLBOARD_TYPE_FIXED_Y</strong> = <literal>2</literal></paragraph>
            <paragraph>启用围绕 Y 轴旋转的公告板算法。</paragraph>
            <target refid="class-visualshadernodebillboard-constant-billboard-type-particles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodebillboard-constant-billboard-type-particles" names="class_visualshadernodebillboard_constant_billboard_type_particles"><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> <strong>BILLBOARD_TYPE_PARTICLES</strong> = <literal>3</literal></paragraph>
            <paragraph>启用针对粒子设计的公告板算法。</paragraph>
            <target refid="class-visualshadernodebillboard-constant-billboard-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodebillboard-constant-billboard-type-max" names="class_visualshadernodebillboard_constant_billboard_type_max"><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> <strong>BILLBOARD_TYPE_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernodebillboard-property-billboard-type"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodebillboard-property-billboard-type" names="class_visualshadernodebillboard_property_billboard_type"><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> <strong>billboard_type</strong> = <literal>1</literal> <reference internal="True" refid="class-visualshadernodebillboard-property-billboard-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_billboard_type</strong>(value: <reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference> <strong>get_billboard_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制对象如何面对相机。请参阅 <reference internal="True" refid="enum-visualshadernodebillboard-billboardtype"><inline classes="std std-ref">BillboardType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodebillboard-property-keep-scale"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodebillboard-property-keep-scale" names="class_visualshadernodebillboard_property_keep_scale"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>keep_scale</strong> = <literal>false</literal> <reference internal="True" refid="class-visualshadernodebillboard-property-keep-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_keep_scale_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_keep_scale_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则着色器将保持为网格设置的缩放。否则，进行公告板处理时将丢失缩放。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
