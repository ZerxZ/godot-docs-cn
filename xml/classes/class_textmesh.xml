<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textmesh.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextMesh.xml.</comment>
    <target refid="class-textmesh"></target>
    <section ids="textmesh class-textmesh" names="textmesh class_textmesh">
        <title>TextMesh</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_primitivemesh#class-primitivemesh"><inline classes="std std-ref">PrimitiveMesh</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>从文本生成 <reference internal="True" refuri="class_primitivemesh#class-primitivemesh"><inline classes="std std-ref">PrimitiveMesh</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>根据文本生成 <reference internal="True" refuri="class_primitivemesh#class-primitivemesh"><inline classes="std std-ref">PrimitiveMesh</inline></reference>。</paragraph>
            <paragraph>使用了矢量字形轮廓的动态字体才能用于生成 TextMesh。不支持位图字体（包括 TrueType/OpenType 容器中的位图数据，例如彩色 Emoji 字体）。</paragraph>
            <paragraph>UV 布局由 4 个横条组成，从上到下依次为：正面占 40% 高度，背面占 40% 的高度，外面占 10% 的高度，内侧面占 10% 的高度。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/3d_text"><inline classes="doc">3D 文本</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="109"></colspec>
                    <colspec colwidth="19"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-autowrap-mode"><inline classes="std std-ref">autowrap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-curve-step"><inline classes="std std-ref">curve_step</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-depth"><inline classes="std std-ref">depth</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.05</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>16</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-horizontal-alignment"><inline classes="std std-ref">horizontal_alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-justification-flags"><inline classes="std std-ref">justification_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>163</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-language"><inline classes="std std-ref">language</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-line-spacing"><inline classes="std std-ref">line_spacing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-pixel-size"><inline classes="std std-ref">pixel_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.01</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-structured-text-bidi-override"><inline classes="std std-ref">structured_text_bidi_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-structured-text-bidi-override-options"><inline classes="std std-ref">structured_text_bidi_override_options</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-text"><inline classes="std std-ref">text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-text-direction"><inline classes="std std-ref">text_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-uppercase"><inline classes="std std-ref">uppercase</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-vertical-alignment"><inline classes="std std-ref">vertical_alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textmesh-property-width"><inline classes="std std-ref">width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>500.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-textmesh-property-autowrap-mode"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-autowrap-mode" names="class_textmesh_property_autowrap_mode"><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>autowrap_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-textmesh-property-autowrap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autowrap_mode</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>get_autowrap_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <reference internal="True" refuri="class_textserver#class-textserver-constant-autowrap-off"><inline classes="std std-ref">TextServer.AUTOWRAP_OFF</inline></reference> 以外的值，则文本将在节点的边界矩形内自动换行。如果你调整节点大小，就会自动更改其高度，从而显示所有文本。要了解每种模式的行为方式，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-curve-step"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-curve-step" names="class_textmesh_property_curve_step"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>curve_step</strong> = <literal>0.5</literal> <reference internal="True" refid="class-textmesh-property-curve-step"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_curve_step</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_curve_step</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于近似贝塞尔曲线的步长（单位为像素）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-depth"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-depth" names="class_textmesh_property_depth"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>depth</strong> = <literal>0.05</literal> <reference internal="True" refid="class-textmesh-property-depth"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_depth</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_depth</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>生成的网格的深度，设为 <literal>0.0</literal> 时只有正面，此时的 UV 布局会变为让正面占据整张纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-font"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-font" names="class_textmesh_property_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong> <reference internal="True" refid="class-textmesh-property-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font</strong>(value: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_font</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于显示文本的字体配置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-font-size"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-font-size" names="class_textmesh_property_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong> = <literal>16</literal> <reference internal="True" refid="class-textmesh-property-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_font_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 <strong>TextMesh</strong> 文本的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-horizontal-alignment"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-horizontal-alignment" names="class_textmesh_property_horizontal_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>horizontal_alignment</strong> = <literal>1</literal> <reference internal="True" refid="class-textmesh-property-horizontal-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_horizontal_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_horizontal_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制文本的水平对齐方式。支持左对齐、居中对齐、右对齐、填充（即两端对齐）。请将其设置为 <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-justification-flags"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-justification-flags" names="class_textmesh_property_justification_flags"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>justification_flags</strong> = <literal>163</literal> <reference internal="True" refid="class-textmesh-property-justification-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_justification_flags</strong>(value: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>get_justification_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>行两端对齐规则。详见 <reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-language"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-language" names="class_textmesh_property_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>language</strong> = <literal>""</literal> <reference internal="True" refid="class-textmesh-property-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>语言代码，用于文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-line-spacing"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-line-spacing" names="class_textmesh_property_line_spacing"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>line_spacing</strong> = <literal>0.0</literal> <reference internal="True" refid="class-textmesh-property-line-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_spacing</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_spacing</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>多行 <strong>TextMesh</strong> 中，行与行之间的垂直间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-offset"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-offset" names="class_textmesh_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-textmesh-property-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本绘制偏移（单位为像素）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-pixel-size"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-pixel-size" names="class_textmesh_property_pixel_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pixel_size</strong> = <literal>0.01</literal> <reference internal="True" refid="class-textmesh-property-pixel-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pixel_size</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_pixel_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本上一个像素宽度的大小，以 3D 缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-structured-text-bidi-override"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-structured-text-bidi-override" names="class_textmesh_property_structured_text_bidi_override"><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>structured_text_bidi_override</strong> = <literal>0</literal> <reference internal="True" refid="class-textmesh-property-structured-text-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>get_structured_text_bidi_override</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为结构化文本设置 BiDi 算法覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-structured-text-bidi-override-options" names="class_textmesh_property_structured_text_bidi_override_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>structured_text_bidi_override_options</strong> = <literal>[]</literal> <reference internal="True" refid="class-textmesh-property-structured-text-bidi-override-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override_options</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_structured_text_bidi_override_options</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 BiDi 覆盖的附加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-text"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-text" names="class_textmesh_property_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>text</strong> = <literal>""</literal> <reference internal="True" refid="class-textmesh-property-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要从中生成网格的文本。</paragraph>
            <paragraph><strong>注意：</strong>由于是 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>，所以它并不遵循 <reference internal="True" refuri="class_node#class-node-property-auto-translate-mode"><inline classes="std std-ref">Node.auto_translate_mode</inline></reference> 的规则。如果需要禁用翻译，则应使用 <reference internal="True" refuri="class_object#class-object-method-set-message-translation"><inline classes="std std-ref">Object.set_message_translation</inline></reference> 手动完成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-text-direction"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-text-direction" names="class_textmesh_property_text_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>text_direction</strong> = <literal>0</literal> <reference internal="True" refid="class-textmesh-property-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_direction</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>get_text_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>基础文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-uppercase"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-uppercase" names="class_textmesh_property_uppercase"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uppercase</strong> = <literal>false</literal> <reference internal="True" refid="class-textmesh-property-uppercase"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uppercase</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_uppercase</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，所有文本都将显示为大写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-vertical-alignment"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-vertical-alignment" names="class_textmesh_property_vertical_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>vertical_alignment</strong> = <literal>1</literal> <reference internal="True" refid="class-textmesh-property-vertical-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vertical_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>get_vertical_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制文本的垂直对齐方式。支持顶部对齐、居中对齐、底部对齐。请将其设置为 <reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textmesh-property-width"></target>
            <paragraph classes="classref-property" ids="class-textmesh-property-width" names="class_textmesh_property_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>width</strong> = <literal>500.0</literal> <reference internal="True" refid="class-textmesh-property-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_width</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本宽度（单位为像素），用于填充对齐。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
