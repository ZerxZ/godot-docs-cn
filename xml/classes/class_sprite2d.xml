<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_sprite2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Sprite2D.xml.</comment>
    <target refid="class-sprite2d"></target>
    <section ids="sprite2d class-sprite2d" names="sprite2d class_sprite2d">
        <title>Sprite2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>通用精灵节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>显示 2D 纹理的节点。显示的纹理可以是较大图集纹理中的某个区域，也可以是精灵表动画中的某一帧。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="实例化演示" refuri="https://godotengine.org/asset-library/asset/2716">实例化演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="87"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-centered"><inline classes="std std-ref">centered</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-flip-h"><inline classes="std std-ref">flip_h</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-flip-v"><inline classes="std std-ref">flip_v</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">frame</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-frame-coords"><inline classes="std std-ref">frame_coords</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2i(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-hframes"><inline classes="std std-ref">hframes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-region-enabled"><inline classes="std std-ref">region_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-region-filter-clip-enabled"><inline classes="std std-ref">region_filter_clip_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-region-rect"><inline classes="std std-ref">region_rect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Rect2(0, 0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-texture"><inline classes="std std-ref">texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-property-vframes"><inline classes="std std-ref">vframes</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="114"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-method-get-rect"><inline classes="std std-ref">get_rect</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-sprite2d-method-is-pixel-opaque"><inline classes="std std-ref">is_pixel_opaque</inline></reference>(pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-sprite2d-signal-frame-changed"></target>
            <paragraph classes="classref-signal" ids="class-sprite2d-signal-frame-changed" names="class_sprite2d_signal_frame_changed"><strong>frame_changed</strong>() <reference internal="True" refid="class-sprite2d-signal-frame-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">frame</inline></reference> 更改时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-signal-texture-changed"></target>
            <paragraph classes="classref-signal" ids="class-sprite2d-signal-texture-changed" names="class_sprite2d_signal_texture_changed"><strong>texture_changed</strong>() <reference internal="True" refid="class-sprite2d-signal-texture-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当 <reference internal="True" refid="class-sprite2d-property-texture"><inline classes="std std-ref">texture</inline></reference> 更改时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-sprite2d-property-centered"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-centered" names="class_sprite2d_property_centered"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>centered</strong> = <literal>true</literal> <reference internal="True" refid="class-sprite2d-property-centered"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_centered</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_centered</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会将纹理居中。</paragraph>
            <paragraph><strong>注意：</strong>像素风游戏中，纹理在居中后可能会变形。这是因为此时纹理的位置在两个像素之间。要避免这种情况，请将该属性设为 <literal>false</literal>，或者考虑启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-2d-snap-snap-2d-vertices-to-pixel"><inline classes="std std-ref">ProjectSettings.rendering/2d/snap/snap_2d_vertices_to_pixel</inline></reference> 和 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-2d-snap-snap-2d-transforms-to-pixel"><inline classes="std std-ref">ProjectSettings.rendering/2d/snap/snap_2d_transforms_to_pixel</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-flip-h"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-flip-h" names="class_sprite2d_property_flip_h"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>flip_h</strong> = <literal>false</literal> <reference internal="True" refid="class-sprite2d-property-flip-h"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flip_h</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_flipped_h</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理将被水平翻转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-flip-v"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-flip-v" names="class_sprite2d_property_flip_v"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>flip_v</strong> = <literal>false</literal> <reference internal="True" refid="class-sprite2d-property-flip-v"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flip_v</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_flipped_v</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理将被垂直翻转。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-frame"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-frame" names="class_sprite2d_property_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>frame</strong> = <literal>0</literal> <reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frame</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frame</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前显示的精灵表中的帧。<reference internal="True" refid="class-sprite2d-property-hframes"><inline classes="std std-ref">hframes</inline></reference> 和 <reference internal="True" refid="class-sprite2d-property-vframes"><inline classes="std std-ref">vframes</inline></reference> 必须大于 1。<reference internal="True" refid="class-sprite2d-property-hframes"><inline classes="std std-ref">hframes</inline></reference> 或 <reference internal="True" refid="class-sprite2d-property-vframes"><inline classes="std std-ref">vframes</inline></reference> 发生变化时会自动调整该属性，让它在视觉上保持指向同一帧（同一行、同一列）。 如果无法保持，则会重置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-frame-coords"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-frame-coords" names="class_sprite2d_property_frame_coords"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>frame_coords</strong> = <literal>Vector2i(0, 0)</literal> <reference internal="True" refid="class-sprite2d-property-frame-coords"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frame_coords</strong>(value: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_frame_coords</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>显示的帧在精灵表中的坐标。这是 <reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">frame</inline></reference> 属性的别名。<reference internal="True" refid="class-sprite2d-property-vframes"><inline classes="std std-ref">vframes</inline></reference> 或 <reference internal="True" refid="class-sprite2d-property-hframes"><inline classes="std std-ref">hframes</inline></reference> 必须大于 1。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-hframes"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-hframes" names="class_sprite2d_property_hframes"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>hframes</strong> = <literal>1</literal> <reference internal="True" refid="class-sprite2d-property-hframes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_hframes</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_hframes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>精灵表中的列数。该属性发生变化时会对 <reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">frame</inline></reference> 进行调整，在视觉上维持相同的帧（同一行、同一列）。如果无法维持，则会将 <reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">frame</inline></reference> 重置为 <literal>0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-offset"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-offset" names="class_sprite2d_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-sprite2d-property-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理的绘图偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-region-enabled"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-region-enabled" names="class_sprite2d_property_region_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>region_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-sprite2d-property-region-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_region_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_region_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则从较大的图集纹理中剪切纹理。见 <reference internal="True" refid="class-sprite2d-property-region-rect"><inline classes="std std-ref">region_rect</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-region-filter-clip-enabled"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-region-filter-clip-enabled" names="class_sprite2d_property_region_filter_clip_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>region_filter_clip_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-sprite2d-property-region-filter-clip-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_region_filter_clip_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_region_filter_clip_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则最外侧的像素会变得模糊。<reference internal="True" refid="class-sprite2d-property-region-enabled"><inline classes="std std-ref">region_enabled</inline></reference> 必须为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-region-rect"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-region-rect" names="class_sprite2d_property_region_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>region_rect</strong> = <literal>Rect2(0, 0, 0, 0)</literal> <reference internal="True" refid="class-sprite2d-property-region-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_region_rect</strong>(value: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_region_rect</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要显示的图集纹理区域。<reference internal="True" refid="class-sprite2d-property-region-enabled"><inline classes="std std-ref">region_enabled</inline></reference> 必须是 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-texture"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-texture" names="class_sprite2d_property_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>texture</strong> <reference internal="True" refid="class-sprite2d-property-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(value: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要绘制的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-property-vframes"></target>
            <paragraph classes="classref-property" ids="class-sprite2d-property-vframes" names="class_sprite2d_property_vframes"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>vframes</strong> = <literal>1</literal> <reference internal="True" refid="class-sprite2d-property-vframes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vframes</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_vframes</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>精灵表中的行数。该属性发生变化时会对 <reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">frame</inline></reference> 进行调整，在视觉上维持相同的帧（同一行、同一列）。如果无法维持，则会将 <reference internal="True" refid="class-sprite2d-property-frame"><inline classes="std std-ref">frame</inline></reference> 重置为 <literal>0</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-sprite2d-method-get-rect"></target>
            <paragraph classes="classref-method" ids="class-sprite2d-method-get-rect" names="class_sprite2d_method_get_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_rect</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-sprite2d-method-get-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回代表该 Sprite2D 边界的 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>，使用局部坐标。可用于检测该 Sprite2D 是否被点击。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _input(event):
    if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
        if get_rect().has_point(to_local(event.position)):
            print("我点！")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Input(InputEvent @event)
{
    if (@event is InputEventMouseButton inputEventMouse)
    {
        if (inputEventMouse.Pressed &amp;&amp; inputEventMouse.ButtonIndex == MouseButton.Left)
        {
            if (GetRect().HasPoint(ToLocal(inputEventMouse.Position)))
            {
                GD.Print("我点！");
            }
        }
    }
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-sprite2d-method-is-pixel-opaque"></target>
            <paragraph classes="classref-method" ids="class-sprite2d-method-is-pixel-opaque" names="class_sprite2d_method_is_pixel_opaque"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_pixel_opaque</strong>(pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-sprite2d-method-is-pixel-opaque"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果给定位置的像素不透明，则返回 <literal>true</literal>，其他情况下返回 <literal>false</literal>。该位置采用局部坐标。</paragraph>
            <paragraph><strong>注意：</strong>如果精灵的纹理为 <literal>null</literal> 或者给定的位置无效，它也会返回 <literal>false</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
