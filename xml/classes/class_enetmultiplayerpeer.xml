<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_enetmultiplayerpeer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/enet/doc_classes/ENetMultiplayerPeer.xml.</comment>
    <target refid="class-enetmultiplayerpeer"></target>
    <section ids="enetmultiplayerpeer class-enetmultiplayerpeer" names="enetmultiplayerpeer class_enetmultiplayerpeer">
        <title>ENetMultiplayerPeer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>使用 <reference name="ENet" refuri="http://enet.bespin.org/index.html">ENet</reference> 库实现的 MultiplayerPeer。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>MultiplayerPeer 的一种实现，应该在初始化为客户端、服务器或网格之后传递给 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference>。然后就可以通过连接到 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> 的信号来处理事件。有关 ENet 库包装的更多信息，请参见 <reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>ENet 仅使用 UDP，不使用 TCP。当你想要将服务器端口转发到公共互联网上以便让服务器可以被访问时，只需要转发 UDP 服务器端口即可。可以使用 <reference internal="True" refuri="class_upnp#class-upnp"><inline classes="std std-ref">UPNP</inline></reference> 类尝试在启动服务器时自动转发服务器端口。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/high_level_multiplayer"><inline classes="doc">高级多人游戏</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="ENet 网站上的 API 文档" refuri="http://enet.bespin.org/usergroup0.html">ENet 网站上的 API 文档</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="45"></colspec>
                    <colspec colwidth="54"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetmultiplayerpeer-property-host"><inline classes="std std-ref">host</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="45"></colspec>
                    <colspec colwidth="313"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetmultiplayerpeer-method-add-mesh-peer"><inline classes="std std-ref">add_mesh_peer</inline></reference>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, host: <reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetmultiplayerpeer-method-create-client"><inline classes="std std-ref">create_client</inline></reference>(address: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, in_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, out_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, local_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetmultiplayerpeer-method-create-mesh"><inline classes="std std-ref">create_mesh</inline></reference>(unique_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetmultiplayerpeer-method-create-server"><inline classes="std std-ref">create_server</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_clients: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 32, max_channels: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, in_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, out_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_enetpacketpeer#class-enetpacketpeer"><inline classes="std std-ref">ENetPacketPeer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetmultiplayerpeer-method-get-peer"><inline classes="std std-ref">get_peer</inline></reference>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetmultiplayerpeer-method-set-bind-ip"><inline classes="std std-ref">set_bind_ip</inline></reference>(ip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-enetmultiplayerpeer-property-host"></target>
            <paragraph classes="classref-property" ids="class-enetmultiplayerpeer-property-host" names="class_enetmultiplayerpeer_property_host"><reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference> <strong>host</strong> <reference internal="True" refid="class-enetmultiplayerpeer-property-host"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference> <strong>get_host</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在 <reference internal="True" refid="class-enetmultiplayerpeer-method-create-client"><inline classes="std std-ref">create_client</inline></reference> 和 <reference internal="True" refid="class-enetmultiplayerpeer-method-create-server"><inline classes="std std-ref">create_server</inline></reference> 之后，创建的底层 <reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-enetmultiplayerpeer-method-add-mesh-peer"></target>
            <paragraph classes="classref-method" ids="class-enetmultiplayerpeer-method-add-mesh-peer" names="class_enetmultiplayerpeer_method_add_mesh_peer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>add_mesh_peer</strong>(peer_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, host: <reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference>) <reference internal="True" refid="class-enetmultiplayerpeer-method-add-mesh-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <literal>peer_id</literal> 添加一个新的远程对等体，并将其连接到给定的 <literal>host</literal>。</paragraph>
            <paragraph><strong>注意：</strong><literal>host</literal> 必须只有一个处于 <reference internal="True" refuri="class_enetpacketpeer#class-enetpacketpeer-constant-state-connected"><inline classes="std std-ref">ENetPacketPeer.STATE_CONNECTED</inline></reference> 状态的对等体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetmultiplayerpeer-method-create-client"></target>
            <paragraph classes="classref-method" ids="class-enetmultiplayerpeer-method-create-client" names="class_enetmultiplayerpeer_method_create_client"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_client</strong>(address: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, in_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, out_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, local_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-enetmultiplayerpeer-method-create-client"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建客户端，该客户端使用指定的 <literal>port</literal> 连接到位于 <literal>address</literal> 的服务器。给定的地址必须是完全限定的域名（例如 <literal>"www.example.com"</literal>），或 IPv4 或 IPv6 格式的 IP 地址（例如 <literal>"192.168.1.1"</literal>）。<literal>port</literal> 是服务器监听的端口。<literal>channel_count</literal> 参数可用于指定为连接分配的 ENet 通道数。<literal>in_bandwidth</literal> 和 <literal>out_bandwidth</literal> 参数可用于将传入和传出带宽限制为给定的每秒字节数。默认值 0 表示无限制的带宽。请注意，ENet 将对在对等体之间的连接的特定端，策略性地丢弃数据包，以确保对等体的带宽不会被淹没。带宽参数还决定了连接的窗口大小，它限制了在任何给定时间可能正在传输的可靠数据包的数量。如果创建了一个客户端，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果该 ENetMultiplayerPeer 实例已经有一个打开的连接（在这种情况下，需要先调用 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-close"><inline classes="std std-ref">MultiplayerPeer.close</inline></reference>），则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-already-in-use"><inline classes="std std-ref">@GlobalScope.ERR_ALREADY_IN_USE</inline></reference>；如果不能被创建客户端，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。如果指定了 <literal>local_port</literal>，客户端也会监听给定的端口；这对一些 NAT 穿越技术很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetmultiplayerpeer-method-create-mesh"></target>
            <paragraph classes="classref-method" ids="class-enetmultiplayerpeer-method-create-mesh" names="class_enetmultiplayerpeer_method_create_mesh"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_mesh</strong>(unique_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-enetmultiplayerpeer-method-create-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在网格网络模式下初始化该 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference>。提供的 <literal>unique_id</literal> 一旦被分配为 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">MultiplayerAPI.multiplayer_peer</inline></reference>，就将被用作本地对等体的网络唯一 ID。在网格网络配置中，需要在调用 <reference internal="True" refid="class-enetmultiplayerpeer-method-add-mesh-peer"><inline classes="std std-ref">add_mesh_peer</inline></reference> 之前，使用 <reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference> 手动设置每个新的对等体。这种技术更先进，它可以更好地控制连接过程（例如，在处理 NAT 穿透时），并更好地分配网络负载（否则会给服务器带来更大的负担）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetmultiplayerpeer-method-create-server"></target>
            <paragraph classes="classref-method" ids="class-enetmultiplayerpeer-method-create-server" names="class_enetmultiplayerpeer_method_create_server"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_server</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, max_clients: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 32, max_channels: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, in_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0, out_bandwidth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-enetmultiplayerpeer-method-create-server"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建通过 <literal>port</literal> 监听连接的服务器。该端口需要是一个介于 0 到 65535 之间的可用且未被使用的端口。请注意，低于 1024 的端口是特权端口，可能需要提升权限，具体取决于平台。要更改服务器监听的接口，请使用 <reference internal="True" refid="class-enetmultiplayerpeer-method-set-bind-ip"><inline classes="std std-ref">set_bind_ip</inline></reference>。默认 IP 是通配符 <literal>"*"</literal>，它会监听所有可用的接口。<literal>max_clients</literal> 是同时允许的最大客户端数，可以使用最大可达 4095 的任何数字，尽管可实现的同时客户端数可能要低得多，并且取决于应用程序。有关带宽参数的其他详细信息，请参阅 <reference internal="True" refid="class-enetmultiplayerpeer-method-create-client"><inline classes="std std-ref">create_client</inline></reference>。如果服务器被创建，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果该 ENetMultiplayerPeer 实例已经有一个打开的连接（在这种情况下，需要先调用 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-method-close"><inline classes="std std-ref">MultiplayerPeer.close</inline></reference>），则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-already-in-use"><inline classes="std std-ref">@GlobalScope.ERR_ALREADY_IN_USE</inline></reference>；如果服务器不能被创建，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetmultiplayerpeer-method-get-peer"></target>
            <paragraph classes="classref-method" ids="class-enetmultiplayerpeer-method-get-peer" names="class_enetmultiplayerpeer_method_get_peer"><reference internal="True" refuri="class_enetpacketpeer#class-enetpacketpeer"><inline classes="std std-ref">ENetPacketPeer</inline></reference> <strong>get_peer</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enetmultiplayerpeer-method-get-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与给定 <literal>id</literal> 关联的 <reference internal="True" refuri="class_enetpacketpeer#class-enetpacketpeer"><inline classes="std std-ref">ENetPacketPeer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetmultiplayerpeer-method-set-bind-ip"></target>
            <paragraph classes="classref-method" ids="class-enetmultiplayerpeer-method-set-bind-ip" names="class_enetmultiplayerpeer_method_set_bind_ip"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bind_ip</strong>(ip: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-enetmultiplayerpeer-method-set-bind-ip"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建服务器时使用的 IP。默认情况下，这被设置为通配符 <literal>"*"</literal>，它绑定到所有可用的接口。给定的 IP 地址格式需要是 IPv4 或 IPv6，例如：<literal>"192.168.1.1"</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
