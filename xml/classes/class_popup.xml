<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_popup.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Popup.xml.</comment>
    <target refid="class-popup"></target>
    <section ids="popup class-popup" names="popup class_popup">
        <title>Popup</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_window#class-window"><inline classes="std std-ref">Window</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference>, <reference internal="True" refuri="class_popuppanel#class-popuppanel"><inline classes="std std-ref">PopupPanel</inline></reference></paragraph>
        <paragraph>上下文窗口以及固定位置的面板的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>Popup</strong> 是上下文窗口以及固定位置的面板的基类。默认情况下是模态的（见 <reference internal="True" refuri="class_window#class-window-property-popup-window"><inline classes="std std-ref">Window.popup_window</inline></reference>），还提供了用于自定义弹出行为的方法。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="15"></colspec>
                    <colspec colwidth="73"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>borderless</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_window#class-window-property-borderless"><inline classes="std std-ref">Window</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>popup_window</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_window#class-window-property-popup-window"><inline classes="std std-ref">Window</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>transient</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_window#class-window-property-transient"><inline classes="std std-ref">Window</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>unresizable</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_window#class-window-property-unresizable"><inline classes="std std-ref">Window</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>visible</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal> (overrides <reference internal="True" refuri="class_window#class-window-property-visible"><inline classes="std std-ref">Window</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>wrap_controls</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_window#class-window-property-wrap-controls"><inline classes="std std-ref">Window</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-popup-signal-popup-hide"></target>
            <paragraph classes="classref-signal" ids="class-popup-signal-popup-hide" names="class_popup_signal_popup_hide"><strong>popup_hide</strong>() <reference internal="True" refid="class-popup-signal-popup-hide"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该弹出窗口被隐藏时发出。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
