<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernode.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNode.xml.</comment>
    <target refid="class-visualshadernode"></target>
    <section ids="visualshadernode class-visualshadernode" names="visualshadernode class_visualshadernode">
        <title>VisualShaderNode</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_visualshadernodebillboard#class-visualshadernodebillboard"><inline classes="std std-ref">VisualShaderNodeBillboard</inline></reference>, <reference internal="True" refuri="class_visualshadernodeclamp#class-visualshadernodeclamp"><inline classes="std std-ref">VisualShaderNodeClamp</inline></reference>, <reference internal="True" refuri="class_visualshadernodecolorfunc#class-visualshadernodecolorfunc"><inline classes="std std-ref">VisualShaderNodeColorFunc</inline></reference>, <reference internal="True" refuri="class_visualshadernodecolorop#class-visualshadernodecolorop"><inline classes="std std-ref">VisualShaderNodeColorOp</inline></reference>, <reference internal="True" refuri="class_visualshadernodecompare#class-visualshadernodecompare"><inline classes="std std-ref">VisualShaderNodeCompare</inline></reference>, <reference internal="True" refuri="class_visualshadernodeconstant#class-visualshadernodeconstant"><inline classes="std std-ref">VisualShaderNodeConstant</inline></reference>, <reference internal="True" refuri="class_visualshadernodecubemap#class-visualshadernodecubemap"><inline classes="std std-ref">VisualShaderNodeCubemap</inline></reference>, <reference internal="True" refuri="class_visualshadernodecustom#class-visualshadernodecustom"><inline classes="std std-ref">VisualShaderNodeCustom</inline></reference>, <reference internal="True" refuri="class_visualshadernodederivativefunc#class-visualshadernodederivativefunc"><inline classes="std std-ref">VisualShaderNodeDerivativeFunc</inline></reference>, <reference internal="True" refuri="class_visualshadernodedeterminant#class-visualshadernodedeterminant"><inline classes="std std-ref">VisualShaderNodeDeterminant</inline></reference>, <reference internal="True" refuri="class_visualshadernodedistancefade#class-visualshadernodedistancefade"><inline classes="std std-ref">VisualShaderNodeDistanceFade</inline></reference>, <reference internal="True" refuri="class_visualshadernodedotproduct#class-visualshadernodedotproduct"><inline classes="std std-ref">VisualShaderNodeDotProduct</inline></reference>, <reference internal="True" refuri="class_visualshadernodefloatfunc#class-visualshadernodefloatfunc"><inline classes="std std-ref">VisualShaderNodeFloatFunc</inline></reference>, <reference internal="True" refuri="class_visualshadernodefloatop#class-visualshadernodefloatop"><inline classes="std std-ref">VisualShaderNodeFloatOp</inline></reference>, <reference internal="True" refuri="class_visualshadernodefresnel#class-visualshadernodefresnel"><inline classes="std std-ref">VisualShaderNodeFresnel</inline></reference>, <reference internal="True" refuri="class_visualshadernodeif#class-visualshadernodeif"><inline classes="std std-ref">VisualShaderNodeIf</inline></reference>, <reference internal="True" refuri="class_visualshadernodeinput#class-visualshadernodeinput"><inline classes="std std-ref">VisualShaderNodeInput</inline></reference>, <reference internal="True" refuri="class_visualshadernodeintfunc#class-visualshadernodeintfunc"><inline classes="std std-ref">VisualShaderNodeIntFunc</inline></reference>, <reference internal="True" refuri="class_visualshadernodeintop#class-visualshadernodeintop"><inline classes="std std-ref">VisualShaderNodeIntOp</inline></reference>, <reference internal="True" refuri="class_visualshadernodeis#class-visualshadernodeis"><inline classes="std std-ref">VisualShaderNodeIs</inline></reference>, <reference internal="True" refuri="class_visualshadernodelinearscenedepth#class-visualshadernodelinearscenedepth"><inline classes="std std-ref">VisualShaderNodeLinearSceneDepth</inline></reference>, <reference internal="True" refuri="class_visualshadernodemix#class-visualshadernodemix"><inline classes="std std-ref">VisualShaderNodeMix</inline></reference>, <reference internal="True" refuri="class_visualshadernodemultiplyadd#class-visualshadernodemultiplyadd"><inline classes="std std-ref">VisualShaderNodeMultiplyAdd</inline></reference>, <reference internal="True" refuri="class_visualshadernodeouterproduct#class-visualshadernodeouterproduct"><inline classes="std std-ref">VisualShaderNodeOuterProduct</inline></reference>, <reference internal="True" refuri="class_visualshadernodeoutput#class-visualshadernodeoutput"><inline classes="std std-ref">VisualShaderNodeOutput</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparameter#class-visualshadernodeparameter"><inline classes="std std-ref">VisualShaderNodeParameter</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparameterref#class-visualshadernodeparameterref"><inline classes="std std-ref">VisualShaderNodeParameterRef</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparticleaccelerator#class-visualshadernodeparticleaccelerator"><inline classes="std std-ref">VisualShaderNodeParticleAccelerator</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparticleconevelocity#class-visualshadernodeparticleconevelocity"><inline classes="std std-ref">VisualShaderNodeParticleConeVelocity</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparticleemit#class-visualshadernodeparticleemit"><inline classes="std std-ref">VisualShaderNodeParticleEmit</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparticleemitter#class-visualshadernodeparticleemitter"><inline classes="std std-ref">VisualShaderNodeParticleEmitter</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparticlemultiplybyaxisangle#class-visualshadernodeparticlemultiplybyaxisangle"><inline classes="std std-ref">VisualShaderNodeParticleMultiplyByAxisAngle</inline></reference>, <reference internal="True" refuri="class_visualshadernodeparticlerandomness#class-visualshadernodeparticlerandomness"><inline classes="std std-ref">VisualShaderNodeParticleRandomness</inline></reference>, <reference internal="True" refuri="class_visualshadernodeproximityfade#class-visualshadernodeproximityfade"><inline classes="std std-ref">VisualShaderNodeProximityFade</inline></reference>, <reference internal="True" refuri="class_visualshadernoderandomrange#class-visualshadernoderandomrange"><inline classes="std std-ref">VisualShaderNodeRandomRange</inline></reference>, <reference internal="True" refuri="class_visualshadernoderemap#class-visualshadernoderemap"><inline classes="std std-ref">VisualShaderNodeRemap</inline></reference>, <reference internal="True" refuri="class_visualshadernodereroute#class-visualshadernodereroute"><inline classes="std std-ref">VisualShaderNodeReroute</inline></reference>, <reference internal="True" refuri="class_visualshadernoderesizablebase#class-visualshadernoderesizablebase"><inline classes="std std-ref">VisualShaderNodeResizableBase</inline></reference>, <reference internal="True" refuri="class_visualshadernoderotationbyaxis#class-visualshadernoderotationbyaxis"><inline classes="std std-ref">VisualShaderNodeRotationByAxis</inline></reference>, <reference internal="True" refuri="class_visualshadernodesample3d#class-visualshadernodesample3d"><inline classes="std std-ref">VisualShaderNodeSample3D</inline></reference>, <reference internal="True" refuri="class_visualshadernodescreennormalworldspace#class-visualshadernodescreennormalworldspace"><inline classes="std std-ref">VisualShaderNodeScreenNormalWorldSpace</inline></reference>, <reference internal="True" refuri="class_visualshadernodescreenuvtosdf#class-visualshadernodescreenuvtosdf"><inline classes="std std-ref">VisualShaderNodeScreenUVToSDF</inline></reference>, <reference internal="True" refuri="class_visualshadernodesdfraymarch#class-visualshadernodesdfraymarch"><inline classes="std std-ref">VisualShaderNodeSDFRaymarch</inline></reference>, <reference internal="True" refuri="class_visualshadernodesdftoscreenuv#class-visualshadernodesdftoscreenuv"><inline classes="std std-ref">VisualShaderNodeSDFToScreenUV</inline></reference>, <reference internal="True" refuri="class_visualshadernodesmoothstep#class-visualshadernodesmoothstep"><inline classes="std std-ref">VisualShaderNodeSmoothStep</inline></reference>, <reference internal="True" refuri="class_visualshadernodestep#class-visualshadernodestep"><inline classes="std std-ref">VisualShaderNodeStep</inline></reference>, <reference internal="True" refuri="class_visualshadernodeswitch#class-visualshadernodeswitch"><inline classes="std std-ref">VisualShaderNodeSwitch</inline></reference>, <reference internal="True" refuri="class_visualshadernodetexture#class-visualshadernodetexture"><inline classes="std std-ref">VisualShaderNodeTexture</inline></reference>, <reference internal="True" refuri="class_visualshadernodetexturesdf#class-visualshadernodetexturesdf"><inline classes="std std-ref">VisualShaderNodeTextureSDF</inline></reference>, <reference internal="True" refuri="class_visualshadernodetexturesdfnormal#class-visualshadernodetexturesdfnormal"><inline classes="std std-ref">VisualShaderNodeTextureSDFNormal</inline></reference>, <reference internal="True" refuri="class_visualshadernodetransformcompose#class-visualshadernodetransformcompose"><inline classes="std std-ref">VisualShaderNodeTransformCompose</inline></reference>, <reference internal="True" refuri="class_visualshadernodetransformdecompose#class-visualshadernodetransformdecompose"><inline classes="std std-ref">VisualShaderNodeTransformDecompose</inline></reference>, <reference internal="True" refuri="class_visualshadernodetransformfunc#class-visualshadernodetransformfunc"><inline classes="std std-ref">VisualShaderNodeTransformFunc</inline></reference>, <reference internal="True" refuri="class_visualshadernodetransformop#class-visualshadernodetransformop"><inline classes="std std-ref">VisualShaderNodeTransformOp</inline></reference>, <reference internal="True" refuri="class_visualshadernodetransformvecmult#class-visualshadernodetransformvecmult"><inline classes="std std-ref">VisualShaderNodeTransformVecMult</inline></reference>, <reference internal="True" refuri="class_visualshadernodeuintfunc#class-visualshadernodeuintfunc"><inline classes="std std-ref">VisualShaderNodeUIntFunc</inline></reference>, <reference internal="True" refuri="class_visualshadernodeuintop#class-visualshadernodeuintop"><inline classes="std std-ref">VisualShaderNodeUIntOp</inline></reference>, <reference internal="True" refuri="class_visualshadernodeuvfunc#class-visualshadernodeuvfunc"><inline classes="std std-ref">VisualShaderNodeUVFunc</inline></reference>, <reference internal="True" refuri="class_visualshadernodeuvpolarcoord#class-visualshadernodeuvpolarcoord"><inline classes="std std-ref">VisualShaderNodeUVPolarCoord</inline></reference>, <reference internal="True" refuri="class_visualshadernodevarying#class-visualshadernodevarying"><inline classes="std std-ref">VisualShaderNodeVarying</inline></reference>, <reference internal="True" refuri="class_visualshadernodevectorbase#class-visualshadernodevectorbase"><inline classes="std std-ref">VisualShaderNodeVectorBase</inline></reference>, <reference internal="True" refuri="class_visualshadernodeworldpositionfromdepth#class-visualshadernodeworldpositionfromdepth"><inline classes="std std-ref">VisualShaderNodeWorldPositionFromDepth</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_visualshader#class-visualshader"><inline classes="std std-ref">VisualShader</inline></reference> 节点的基类。与场景节点无关。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>可视化着色器图由各种节点组成。图中的每个节点都是一个独立的对象，它们被表示为带有标题和一系列属性的矩形框。每个节点还有连接端口，可以将其连接到另一个节点并控制着色器的流程。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/shaders/visual_shaders"><inline classes="doc">使用可视化着色器</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="93"></colspec>
                    <colspec colwidth="8"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-property-linked-parent-graph-frame"><inline classes="std std-ref">linked_parent_graph_frame</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-property-output-port-for-preview"><inline classes="std std-ref">output_port_for_preview</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="223"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-method-clear-default-input-values"><inline classes="std std-ref">clear_default_input_values</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-method-get-default-input-port"><inline classes="std std-ref">get_default_input_port</inline></reference>(type: <reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-method-get-default-input-values"><inline classes="std std-ref">get_default_input_values</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-method-get-input-port-default-value"><inline classes="std std-ref">get_input_port_default_value</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-method-remove-input-port-default-value"><inline classes="std std-ref">remove_input_port_default_value</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-method-set-default-input-values"><inline classes="std std-ref">set_default_input_values</inline></reference>(values: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernode-method-set-input-port-default-value"><inline classes="std std-ref">set_input_port_default_value</inline></reference>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, prev_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshadernode-porttype"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernode-porttype" names="enum_visualshadernode_porttype">enum <strong>PortType</strong>: <reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernode-constant-port-type-scalar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-scalar" names="class_visualshadernode_constant_port_type_scalar"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_SCALAR</strong> = <literal>0</literal></paragraph>
            <paragraph>浮点数类型。在着色器代码中，会被翻译为 <literal>float</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-scalar-int"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-scalar-int" names="class_visualshadernode_constant_port_type_scalar_int"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_SCALAR_INT</strong> = <literal>1</literal></paragraph>
            <paragraph>整数标量。在着色器代码中，会被翻译为 <literal>int</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-scalar-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-scalar-uint" names="class_visualshadernode_constant_port_type_scalar_uint"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_SCALAR_UINT</strong> = <literal>2</literal></paragraph>
            <paragraph>无符号整数标量。在着色器代码中，会被翻译为 <literal>uint</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-vector-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-vector-2d" names="class_visualshadernode_constant_port_type_vector_2d"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_VECTOR_2D</strong> = <literal>3</literal></paragraph>
            <paragraph>浮点数 2D 向量。在着色器代码中，会被翻译为 <literal>vec2</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-vector-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-vector-3d" names="class_visualshadernode_constant_port_type_vector_3d"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_VECTOR_3D</strong> = <literal>4</literal></paragraph>
            <paragraph>浮点数 3D 向量。在着色器代码中，会被翻译为 <literal>vec3</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-vector-4d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-vector-4d" names="class_visualshadernode_constant_port_type_vector_4d"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_VECTOR_4D</strong> = <literal>5</literal></paragraph>
            <paragraph>浮点数 4D 向量。在着色器代码中，会被翻译为 <literal>vec4</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-boolean"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-boolean" names="class_visualshadernode_constant_port_type_boolean"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_BOOLEAN</strong> = <literal>6</literal></paragraph>
            <paragraph>布尔值类型。在着色器代码中，会被翻译为 <literal>bool</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-transform"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-transform" names="class_visualshadernode_constant_port_type_transform"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_TRANSFORM</strong> = <literal>7</literal></paragraph>
            <paragraph>变换类型。在着色器代码中，会被翻译为 <literal>mat4</literal> 类型。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-sampler"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-sampler" names="class_visualshadernode_constant_port_type_sampler"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_SAMPLER</strong> = <literal>8</literal></paragraph>
            <paragraph>采样器类型。在着色器代码中，会被翻译为对采样器 uniform 的引用。只能用于非 uniform 节点的输入端口。</paragraph>
            <target refid="class-visualshadernode-constant-port-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernode-constant-port-type-max" names="class_visualshadernode_constant_port_type_max"><reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> <strong>PORT_TYPE_MAX</strong> = <literal>9</literal></paragraph>
            <paragraph>表示 <reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernode-property-linked-parent-graph-frame"></target>
            <paragraph classes="classref-property" ids="class-visualshadernode-property-linked-parent-graph-frame" names="class_visualshadernode_property_linked_parent_graph_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>linked_parent_graph_frame</strong> = <literal>-1</literal> <reference internal="True" refid="class-visualshadernode-property-linked-parent-graph-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_frame</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frame</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Represents the index of the frame this node is linked to. If set to <literal>-1</literal> the node is not linked to any frame.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernode-property-output-port-for-preview"></target>
            <paragraph classes="classref-property" ids="class-visualshadernode-property-output-port-for-preview" names="class_visualshadernode_property_output_port_for_preview"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>output_port_for_preview</strong> = <literal>-1</literal> <reference internal="True" refid="class-visualshadernode-property-output-port-for-preview"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_output_port_for_preview</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_output_port_for_preview</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置将被显示为预览的输出端口索引。如果设置为<literal>-1</literal>，则没有端口会被打开进行预览。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-visualshadernode-method-clear-default-input-values"></target>
            <paragraph classes="classref-method" ids="class-visualshadernode-method-clear-default-input-values" names="class_visualshadernode_method_clear_default_input_values"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_default_input_values</strong>() <reference internal="True" refid="class-visualshadernode-method-clear-default-input-values"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除默认输入端口值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernode-method-get-default-input-port"></target>
            <paragraph classes="classref-method" ids="class-visualshadernode-method-get-default-input-port" names="class_visualshadernode_method_get_default_input_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_default_input_port</strong>(type: <reference internal="True" refid="enum-visualshadernode-porttype"><inline classes="std std-ref">PortType</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernode-method-get-default-input-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回输入端口，当由于将连接从已有节点拖动到图形上的空白区域而创建节点时，默认情况下应连接该输入端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernode-method-get-default-input-values"></target>
            <paragraph classes="classref-method" ids="class-visualshadernode-method-get-default-input-values" names="class_visualshadernode_method_get_default_input_values"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_default_input_values</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernode-method-get-default-input-values"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个包含节点所有输入端口默认值的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，形式为 <literal>[index0, value0, index1, value1, ...]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernode-method-get-input-port-default-value"></target>
            <paragraph classes="classref-method" ids="class-visualshadernode-method-get-input-port-default-value" names="class_visualshadernode_method_get_input_port_default_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_input_port_default_value</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-visualshadernode-method-get-input-port-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回输入端口 <literal>port</literal> 的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernode-method-remove-input-port-default-value"></target>
            <paragraph classes="classref-method" ids="class-visualshadernode-method-remove-input-port-default-value" names="class_visualshadernode_method_remove_input_port_default_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_input_port_default_value</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-visualshadernode-method-remove-input-port-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除输入端口 <literal>port</literal> 的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernode-method-set-default-input-values"></target>
            <paragraph classes="classref-method" ids="class-visualshadernode-method-set-default-input-values" names="class_visualshadernode_method_set_default_input_values"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_input_values</strong>(values: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-visualshadernode-method-set-default-input-values"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <literal>[index0, value0, index1, value1, ...]</literal> 形式的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 设置默认输入端口值。例如: <literal>[0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernode-method-set-input-port-default-value"></target>
            <paragraph classes="classref-method" ids="class-visualshadernode-method-set-input-port-default-value" names="class_visualshadernode_method_set_input_port_default_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_port_default_value</strong>(port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, prev_value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <reference internal="True" refid="class-visualshadernode-method-set-input-port-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置输入端口 <literal>port</literal> 的默认值 <literal>value</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
