<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_audioserver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AudioServer.xml.</comment>
    <target refid="class-audioserver"></target>
    <section ids="audioserver class-audioserver" names="audioserver class_audioserver">
        <title>AudioServer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>低级音频访问的服务器接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>AudioServer</strong> 是用于音频访问的底层服务器接口。它负责创建样本数据（可播放的音频）以及通过语音接口进行播放。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/audio/audio_buses"><inline classes="doc">音频总线</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频设备切换演示" refuri="https://godotengine.org/asset-library/asset/2758">音频设备切换演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频麦克风录音演示" refuri="https://godotengine.org/asset-library/asset/2760">音频麦克风录音演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="音频频谱可视化演示" refuri="https://godotengine.org/asset-library/asset/2762">音频频谱可视化演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="29"></colspec>
                    <colspec colwidth="78"></colspec>
                    <colspec colwidth="15"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-property-bus-count"><inline classes="std std-ref">bus_count</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-property-input-device"><inline classes="std std-ref">input_device</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"Default"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-property-output-device"><inline classes="std std-ref">output_device</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"Default"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-property-playback-speed-scale"><inline classes="std std-ref">playback_speed_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="55"></colspec>
                    <colspec colwidth="194"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-add-bus"><inline classes="std std-ref">add_bus</inline></reference>(at_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-add-bus-effect"><inline classes="std std-ref">add_bus_effect</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect: <reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference>, at_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audiobuslayout#class-audiobuslayout"><inline classes="std std-ref">AudioBusLayout</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-generate-bus-layout"><inline classes="std std-ref">generate_bus_layout</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-channels"><inline classes="std std-ref">get_bus_channels</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-effect"><inline classes="std std-ref">get_bus_effect</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-effect-count"><inline classes="std std-ref">get_bus_effect_count</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_audioeffectinstance#class-audioeffectinstance"><inline classes="std std-ref">AudioEffectInstance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-effect-instance"><inline classes="std std-ref">get_bus_effect_instance</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-index"><inline classes="std std-ref">get_bus_index</inline></reference>(bus_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-name"><inline classes="std std-ref">get_bus_name</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-peak-volume-left-db"><inline classes="std std-ref">get_bus_peak_volume_left_db</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-peak-volume-right-db"><inline classes="std std-ref">get_bus_peak_volume_right_db</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-send"><inline classes="std std-ref">get_bus_send</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-bus-volume-db"><inline classes="std std-ref">get_bus_volume_db</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-input-device-list"><inline classes="std std-ref">get_input_device_list</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-mix-rate"><inline classes="std std-ref">get_mix_rate</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-output-device-list"><inline classes="std std-ref">get_output_device_list</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-output-latency"><inline classes="std std-ref">get_output_latency</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-audioserver-speakermode"><inline classes="std std-ref">SpeakerMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-speaker-mode"><inline classes="std std-ref">get_speaker_mode</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-time-since-last-mix"><inline classes="std std-ref">get_time_since_last_mix</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-get-time-to-next-mix"><inline classes="std std-ref">get_time_to_next_mix</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-is-bus-bypassing-effects"><inline classes="std std-ref">is_bus_bypassing_effects</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-is-bus-effect-enabled"><inline classes="std std-ref">is_bus_effect_enabled</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-is-bus-mute"><inline classes="std std-ref">is_bus_mute</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-is-bus-solo"><inline classes="std std-ref">is_bus_solo</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-is-stream-registered-as-sample"><inline classes="std std-ref">is_stream_registered_as_sample</inline></reference>(stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-lock"><inline classes="std std-ref">lock</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-move-bus"><inline classes="std std-ref">move_bus</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-register-stream-as-sample"><inline classes="std std-ref">register_stream_as_sample</inline></reference>(stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-remove-bus"><inline classes="std std-ref">remove_bus</inline></reference>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-remove-bus-effect"><inline classes="std std-ref">remove_bus_effect</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-bypass-effects"><inline classes="std std-ref">set_bus_bypass_effects</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-effect-enabled"><inline classes="std std-ref">set_bus_effect_enabled</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-layout"><inline classes="std std-ref">set_bus_layout</inline></reference>(bus_layout: <reference internal="True" refuri="class_audiobuslayout#class-audiobuslayout"><inline classes="std std-ref">AudioBusLayout</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-mute"><inline classes="std std-ref">set_bus_mute</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-name"><inline classes="std std-ref">set_bus_name</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-send"><inline classes="std std-ref">set_bus_send</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, send: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-solo"><inline classes="std std-ref">set_bus_solo</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-bus-volume-db"><inline classes="std std-ref">set_bus_volume_db</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, volume_db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-set-enable-tagging-used-audio-streams"><inline classes="std std-ref">set_enable_tagging_used_audio_streams</inline></reference>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-swap-bus-effects"><inline classes="std std-ref">swap_bus_effects</inline></reference>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, by_effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-audioserver-method-unlock"><inline classes="std std-ref">unlock</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-audioserver-signal-bus-layout-changed"></target>
            <paragraph classes="classref-signal" ids="class-audioserver-signal-bus-layout-changed" names="class_audioserver_signal_bus_layout_changed"><strong>bus_layout_changed</strong>() <reference internal="True" refid="class-audioserver-signal-bus-layout-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加、修改、删除音频总线时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-signal-bus-renamed"></target>
            <paragraph classes="classref-signal" ids="class-audioserver-signal-bus-renamed" names="class_audioserver_signal_bus_renamed"><strong>bus_renamed</strong>(bus_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, old_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, new_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-audioserver-signal-bus-renamed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当索引为 <literal>bus_index</literal> 的音频总线的名称从 <literal>old_name</literal> 更改为 <literal>new_name</literal> 时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-audioserver-speakermode"></target>
            <paragraph classes="classref-enumeration" ids="enum-audioserver-speakermode" names="enum_audioserver_speakermode">enum <strong>SpeakerMode</strong>: <reference internal="True" refid="enum-audioserver-speakermode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audioserver-constant-speaker-mode-stereo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-speaker-mode-stereo" names="class_audioserver_constant_speaker_mode_stereo"><reference internal="True" refid="enum-audioserver-speakermode"><inline classes="std std-ref">SpeakerMode</inline></reference> <strong>SPEAKER_MODE_STEREO</strong> = <literal>0</literal></paragraph>
            <paragraph>检测到两个或更少的扬声器。</paragraph>
            <target refid="class-audioserver-constant-speaker-surround-31"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-speaker-surround-31" names="class_audioserver_constant_speaker_surround_31"><reference internal="True" refid="enum-audioserver-speakermode"><inline classes="std std-ref">SpeakerMode</inline></reference> <strong>SPEAKER_SURROUND_31</strong> = <literal>1</literal></paragraph>
            <paragraph>检测到 3.1 声道环绕声设置。</paragraph>
            <target refid="class-audioserver-constant-speaker-surround-51"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-speaker-surround-51" names="class_audioserver_constant_speaker_surround_51"><reference internal="True" refid="enum-audioserver-speakermode"><inline classes="std std-ref">SpeakerMode</inline></reference> <strong>SPEAKER_SURROUND_51</strong> = <literal>2</literal></paragraph>
            <paragraph>检测到 5.1 声道环绕声设置。</paragraph>
            <target refid="class-audioserver-constant-speaker-surround-71"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-speaker-surround-71" names="class_audioserver_constant_speaker_surround_71"><reference internal="True" refid="enum-audioserver-speakermode"><inline classes="std std-ref">SpeakerMode</inline></reference> <strong>SPEAKER_SURROUND_71</strong> = <literal>3</literal></paragraph>
            <paragraph>检测到 7.1 声道环绕声设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-audioserver-playbacktype"></target>
            <paragraph classes="classref-enumeration" ids="enum-audioserver-playbacktype" names="enum_audioserver_playbacktype">enum <strong>PlaybackType</strong>: <reference internal="True" refid="enum-audioserver-playbacktype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-audioserver-constant-playback-type-default"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-playback-type-default" names="class_audioserver_constant_playback_type_default"><reference internal="True" refid="enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> <strong>PLAYBACK_TYPE_DEFAULT</strong> = <literal>0</literal></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该常量。</paragraph>
            <paragraph>The playback will be considered of the type declared at <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-general-default-playback-type"><inline classes="std std-ref">ProjectSettings.audio/general/default_playback_type</inline></reference>.</paragraph>
            <target refid="class-audioserver-constant-playback-type-stream"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-playback-type-stream" names="class_audioserver_constant_playback_type_stream"><reference internal="True" refid="enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> <strong>PLAYBACK_TYPE_STREAM</strong> = <literal>1</literal></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该常量。</paragraph>
            <paragraph>Force the playback to be considered as a stream.</paragraph>
            <target refid="class-audioserver-constant-playback-type-sample"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-playback-type-sample" names="class_audioserver_constant_playback_type_sample"><reference internal="True" refid="enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> <strong>PLAYBACK_TYPE_SAMPLE</strong> = <literal>2</literal></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该常量。</paragraph>
            <paragraph>Force the playback to be considered as a sample. This can provide lower latency and more stable playback (with less risk of audio crackling), at the cost of having less flexibility.</paragraph>
            <paragraph><strong>Note:</strong> Only currently supported on the web platform.</paragraph>
            <paragraph><strong>Note:</strong> <reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference>s are not supported when playback is considered as a sample.</paragraph>
            <target refid="class-audioserver-constant-playback-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-audioserver-constant-playback-type-max" names="class_audioserver_constant_playback_type_max"><reference internal="True" refid="enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> <strong>PLAYBACK_TYPE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该常量。</paragraph>
            <paragraph>Represents the size of the <reference internal="True" refid="enum-audioserver-playbacktype"><inline classes="std std-ref">PlaybackType</inline></reference> enum.</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-audioserver-property-bus-count"></target>
            <paragraph classes="classref-property" ids="class-audioserver-property-bus-count" names="class_audioserver_property_bus_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>bus_count</strong> = <literal>1</literal> <reference internal="True" refid="class-audioserver-property-bus-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_count</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_bus_count</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>可用音频总线的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-property-input-device"></target>
            <paragraph classes="classref-property" ids="class-audioserver-property-input-device" names="class_audioserver_property_input_device"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>input_device</strong> = <literal>"Default"</literal> <reference internal="True" refid="class-audioserver-property-input-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_input_device</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_input_device</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前音频输入设备的名称（见 <reference internal="True" refid="class-audioserver-method-get-input-device-list"><inline classes="std std-ref">get_input_device_list</inline></reference>）。在具有多个音频输入（例如模拟、USB、HDMI 音频）的系统中，可用于选择音频输入设备。为 <literal>"Default"</literal> 时会从系统默认的音频输入录制音频。如果设置了无效的设备名称，该值会被恢复为 <literal>"Default"</literal>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-driver-enable-input"><inline classes="std std-ref">ProjectSettings.audio/driver/enable_input</inline></reference> 必须为 <literal>true</literal> 音频输入才能正常工作。另请参阅该设置项的描述，了解权限和操作系统隐私设置相关的说明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-property-output-device"></target>
            <paragraph classes="classref-property" ids="class-audioserver-property-output-device" names="class_audioserver_property_output_device"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>output_device</strong> = <literal>"Default"</literal> <reference internal="True" refid="class-audioserver-property-output-device"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_output_device</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_output_device</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前音频输出设备的名称（见 <reference internal="True" refid="class-audioserver-method-get-output-device-list"><inline classes="std std-ref">get_output_device_list</inline></reference>）。在具有多个音频输出（例如模拟、USB、HDMI 音频）的系统中，可用于选择音频输出设备。为 <literal>"Default"</literal> 时会从系统默认的音频输出播放音频。如果设置了无效的设备名称，该值会被恢复为 <literal>"Default"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-property-playback-speed-scale"></target>
            <paragraph classes="classref-property" ids="class-audioserver-property-playback-speed-scale" names="class_audioserver_property_playback_speed_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>playback_speed_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-audioserver-property-playback-speed-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_playback_speed_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_playback_speed_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>音频播放的缩放速率（即将其设置为 <literal>0.5</literal> 将使音频以其一半的速度播放）。另见 <reference internal="True" refuri="class_engine#class-engine-property-time-scale"><inline classes="std std-ref">Engine.time_scale</inline></reference> 影响一般模拟速度，它独立于 <reference internal="True" refid="class-audioserver-property-playback-speed-scale"><inline classes="std std-ref">playback_speed_scale</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-audioserver-method-add-bus"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-add-bus" names="class_audioserver_method_add_bus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_bus</strong>(at_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-audioserver-method-add-bus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <literal>at_position</literal> 处添加一条总线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-add-bus-effect"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-add-bus-effect" names="class_audioserver_method_add_bus_effect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_bus_effect</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect: <reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference>, at_position: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = -1) <reference internal="True" refid="class-audioserver-method-add-bus-effect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为在 <literal>at_position</literal> 处索引为 <literal>bus_idx</literal> 的总线添加 <reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference> 效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-generate-bus-layout"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-generate-bus-layout" names="class_audioserver_method_generate_bus_layout"><reference internal="True" refuri="class_audiobuslayout#class-audiobuslayout"><inline classes="std std-ref">AudioBusLayout</inline></reference> <strong>generate_bus_layout</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-generate-bus-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用可用的总线和效果来生成 <reference internal="True" refuri="class_audiobuslayout#class-audiobuslayout"><inline classes="std std-ref">AudioBusLayout</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-channels"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-channels" names="class_audioserver_method_get_bus_channels"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_bus_channels</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-bus-channels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>bus_idx</literal> 的总线的通道数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-effect"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-effect" names="class_audioserver_method_get_bus_effect"><reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference> <strong>get_bus_effect</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audioserver-method-get-bus-effect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>bus_idx</literal> 的总线中位于 <literal>effect_idx</literal> 的 <reference internal="True" refuri="class_audioeffect#class-audioeffect"><inline classes="std std-ref">AudioEffect</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-effect-count"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-effect-count" names="class_audioserver_method_get_bus_effect_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_bus_effect_count</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audioserver-method-get-bus-effect-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>bus_idx</literal> 的总线上的效果数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-effect-instance"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-effect-instance" names="class_audioserver_method_get_bus_effect_instance"><reference internal="True" refuri="class_audioeffectinstance#class-audioeffectinstance"><inline classes="std std-ref">AudioEffectInstance</inline></reference> <strong>get_bus_effect_instance</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-audioserver-method-get-bus-effect-instance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回分配给给定总线和效果索引（以及可选的通道）的<reference internal="True" refuri="class_audioeffectinstance#class-audioeffectinstance"><inline classes="std std-ref">AudioEffectInstance</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-index"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-index" names="class_audioserver_method_get_bus_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_bus_index</strong>(bus_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-bus-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回名称为 <literal>bus_name</literal> 的总线的索引。如果不存在指定名称的总线，则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-name"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-name" names="class_audioserver_method_get_bus_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_bus_name</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-bus-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>bus_idx</literal> 的总线的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-peak-volume-left-db"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-peak-volume-left-db" names="class_audioserver_method_get_bus_peak_volume_left_db"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_bus_peak_volume_left_db</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-bus-peak-volume-left-db"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回总线索引为 <literal>bus_idx</literal> 且通道索引为 <literal>channel</literal> 处的左扬声器的峰值音量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-peak-volume-right-db"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-peak-volume-right-db" names="class_audioserver_method_get_bus_peak_volume_right_db"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_bus_peak_volume_right_db</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-bus-peak-volume-right-db"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回总线索引为 <literal>bus_idx</literal> 且通道索引为 <literal>channel</literal> 处的右扬声器的峰值音量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-send"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-send" names="class_audioserver_method_get_bus_send"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_bus_send</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-bus-send"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>bus_idx</literal> 的总线的发送目标总线的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-bus-volume-db"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-bus-volume-db" names="class_audioserver_method_get_bus_volume_db"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_bus_volume_db</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-bus-volume-db"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回索引为 <literal>bus_idx</literal> 的总线的音量，单位为 dB。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-input-device-list"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-input-device-list" names="class_audioserver_method_get_input_device_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_input_device_list</strong>() <reference internal="True" refid="class-audioserver-method-get-input-device-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回系统中检测到的所有音频输入设备的名称。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-driver-enable-input"><inline classes="std std-ref">ProjectSettings.audio/driver/enable_input</inline></reference> 必须为 <literal>true</literal> 音频输入才能正常工作。另请参阅该设置的说明，了解与权限和操作系统隐私设置相关的注意事项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-mix-rate"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-mix-rate" names="class_audioserver_method_get_mix_rate"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_mix_rate</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-mix-rate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <strong>AudioServer</strong> 输出的采样率。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-output-device-list"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-output-device-list" names="class_audioserver_method_get_output_device_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_output_device_list</strong>() <reference internal="True" refid="class-audioserver-method-get-output-device-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回系统中检测到的所有音频输出设备的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-output-latency"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-output-latency" names="class_audioserver_method_get_output_latency"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_output_latency</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-output-latency"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回音频驱动的实际输出延迟。基于 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-audio-driver-output-latency"><inline classes="std std-ref">ProjectSettings.audio/driver/output_latency</inline></reference>，但实际的返回值取决于操作系统和音频驱动。</paragraph>
            <paragraph><strong>注意：</strong>可能开销较大；不建议每帧都调用 <reference internal="True" refid="class-audioserver-method-get-output-latency"><inline classes="std std-ref">get_output_latency</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-speaker-mode"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-speaker-mode" names="class_audioserver_method_get_speaker_mode"><reference internal="True" refid="enum-audioserver-speakermode"><inline classes="std std-ref">SpeakerMode</inline></reference> <strong>get_speaker_mode</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-speaker-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回扬声器的配置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-time-since-last-mix"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-time-since-last-mix" names="class_audioserver_method_get_time_since_last_mix"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_time_since_last_mix</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-time-since-last-mix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回自上次混合以来的相对时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-get-time-to-next-mix"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-get-time-to-next-mix" names="class_audioserver_method_get_time_to_next_mix"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_time_to_next_mix</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-get-time-to-next-mix"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回下一次混合之前的相对时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-is-bus-bypassing-effects"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-is-bus-bypassing-effects" names="class_audioserver_method_is_bus_bypassing_effects"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_bus_bypassing_effects</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-is-bus-bypassing-effects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线会绕过效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-is-bus-effect-enabled"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-is-bus-effect-enabled" names="class_audioserver_method_is_bus_effect_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_bus_effect_enabled</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-is-bus-effect-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线上启用了索引为 <literal>effect_idx</literal> 的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-is-bus-mute"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-is-bus-mute" names="class_audioserver_method_is_bus_mute"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_bus_mute</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-is-bus-mute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线已静音。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-is-bus-solo"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-is-bus-solo" names="class_audioserver_method_is_bus_solo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_bus_solo</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-audioserver-method-is-bus-solo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线处于独奏模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-is-stream-registered-as-sample"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-is-stream-registered-as-sample" names="class_audioserver_method_is_stream_registered_as_sample"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_stream_registered_as_sample</strong>(stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>) <reference internal="True" refid="class-audioserver-method-is-stream-registered-as-sample"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>If <literal>true</literal>, the stream is registered as a sample. The engine will not have to register it before playing the sample.</paragraph>
            <paragraph>If <literal>false</literal>, the stream will have to be registered before playing it. To prevent lag spikes, register the stream as sample with <reference internal="True" refid="class-audioserver-method-register-stream-as-sample"><inline classes="std std-ref">register_stream_as_sample</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-lock"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-lock" names="class_audioserver_method_lock"><abbreviation explanation="无返回值。">void</abbreviation> <strong>lock</strong>() <reference internal="True" refid="class-audioserver-method-lock"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>锁定音频驱动程序的主循环。</paragraph>
            <paragraph><strong>注意：</strong>之后记得解锁。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-move-bus"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-move-bus" names="class_audioserver_method_move_bus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>move_bus</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audioserver-method-move-bus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将总线从索引 <literal>index</literal> 移动到索引 <literal>to_index</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-register-stream-as-sample"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-register-stream-as-sample" names="class_audioserver_method_register_stream_as_sample"><abbreviation explanation="无返回值。">void</abbreviation> <strong>register_stream_as_sample</strong>(stream: <reference internal="True" refuri="class_audiostream#class-audiostream"><inline classes="std std-ref">AudioStream</inline></reference>) <reference internal="True" refid="class-audioserver-method-register-stream-as-sample"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Forces the registration of a stream as a sample.</paragraph>
            <paragraph><strong>Note:</strong> Lag spikes may occur when calling this method, especially on single-threaded builds. It is suggested to call this method while loading assets, where the lag spike could be masked, instead of registering the sample right before it needs to be played.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-remove-bus"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-remove-bus" names="class_audioserver_method_remove_bus"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_bus</strong>(index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audioserver-method-remove-bus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除索引 <literal>index</literal> 处的总线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-remove-bus-effect"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-remove-bus-effect" names="class_audioserver_method_remove_bus_effect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_bus_effect</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audioserver-method-remove-bus-effect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引 <literal>effect_idx</literal> 的效果从索引 <literal>bus_idx</literal> 的总线上移除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-bypass-effects"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-bypass-effects" names="class_audioserver_method_set_bus_bypass_effects"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_bypass_effects</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-bypass-effects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线会绕过效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-effect-enabled"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-effect-enabled" names="class_audioserver_method_set_bus_effect_enabled"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_effect_enabled</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-effect-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线上启用了索引为 <literal>effect_idx</literal> 的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-layout"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-layout" names="class_audioserver_method_set_bus_layout"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_layout</strong>(bus_layout: <reference internal="True" refuri="class_audiobuslayout#class-audiobuslayout"><inline classes="std std-ref">AudioBusLayout</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖当前使用的 <reference internal="True" refuri="class_audiobuslayout#class-audiobuslayout"><inline classes="std std-ref">AudioBusLayout</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-mute"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-mute" names="class_audioserver_method_set_bus_mute"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_mute</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-mute"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线已静音。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-name"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-name" names="class_audioserver_method_set_bus_name"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_name</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>bus_idx</literal> 的总线的名称设为 <literal>name</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-send"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-send" names="class_audioserver_method_set_bus_send"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_send</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, send: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-send"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>bus_idx</literal> 处的总线输出连接到名为 <literal>send</literal> 的总线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-solo"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-solo" names="class_audioserver_method_set_bus_solo"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_solo</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-solo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则索引为 <literal>bus_idx</literal> 的总线处于独奏模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-bus-volume-db"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-bus-volume-db" names="class_audioserver_method_set_bus_volume_db"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bus_volume_db</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, volume_db: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-bus-volume-db"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将索引为 <literal>bus_idx</literal> 的总线的音量设为 <literal>volume_db</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-set-enable-tagging-used-audio-streams"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-set-enable-tagging-used-audio-streams" names="class_audioserver_method_set_enable_tagging_used_audio_streams"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enable_tagging_used_audio_streams</strong>(enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-audioserver-method-set-enable-tagging-used-audio-streams"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置为 <literal>true</literal>，<reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback"><inline classes="std std-ref">AudioStreamPlayback</inline></reference> 的所有实例将在每个混音步骤调用 <reference internal="True" refuri="class_audiostreamplayback#class-audiostreamplayback-private-method-tag-used-streams"><inline classes="std std-ref">AudioStreamPlayback._tag_used_streams</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>这在编辑器中默认启用，因为编辑器插件将其用于音频流预览。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-swap-bus-effects"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-swap-bus-effects" names="class_audioserver_method_swap_bus_effects"><abbreviation explanation="无返回值。">void</abbreviation> <strong>swap_bus_effects</strong>(bus_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, by_effect_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-audioserver-method-swap-bus-effects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在索引为 <literal>bus_idx</literal> 的总线中交换两个效果的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-audioserver-method-unlock"></target>
            <paragraph classes="classref-method" ids="class-audioserver-method-unlock" names="class_audioserver_method_unlock"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unlock</strong>() <reference internal="True" refid="class-audioserver-method-unlock"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>解锁音频驱动程序的主循环。（锁定后，你始终需要手动解锁它。）</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
