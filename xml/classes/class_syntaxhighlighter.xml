<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_syntaxhighlighter.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/SyntaxHighlighter.xml.</comment>
    <target refid="class-syntaxhighlighter"></target>
    <section ids="syntaxhighlighter class-syntaxhighlighter" names="syntaxhighlighter class_syntaxhighlighter">
        <title>SyntaxHighlighter</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_codehighlighter#class-codehighlighter"><inline classes="std std-ref">CodeHighlighter</inline></reference>, <reference internal="True" refuri="class_editorsyntaxhighlighter#class-editorsyntaxhighlighter"><inline classes="std std-ref">EditorSyntaxHighlighter</inline></reference></paragraph>
        <paragraph>语法高亮器的基类。可以向 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 提供语法高亮数据。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>语法高亮器的基类。向 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 提供语法高亮数据。关联的 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 节点会根据需要调用 <strong>SyntaxHighlighter</strong>。</paragraph>
            <paragraph><strong>注意：</strong>不应在多个 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 节点间共享 <strong>SyntaxHighlighter</strong> 实例。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="162"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-syntaxhighlighter-private-method-clear-highlighting-cache"><inline classes="std std-ref">_clear_highlighting_cache</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-syntaxhighlighter-private-method-get-line-syntax-highlighting"><inline classes="std std-ref">_get_line_syntax_highlighting</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-syntaxhighlighter-private-method-update-cache"><inline classes="std std-ref">_update_cache</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-syntaxhighlighter-method-clear-highlighting-cache"><inline classes="std std-ref">clear_highlighting_cache</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-syntaxhighlighter-method-get-line-syntax-highlighting"><inline classes="std std-ref">get_line_syntax_highlighting</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-syntaxhighlighter-method-get-text-edit"><inline classes="std std-ref">get_text_edit</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-syntaxhighlighter-method-update-cache"><inline classes="std std-ref">update_cache</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-syntaxhighlighter-private-method-clear-highlighting-cache"></target>
            <paragraph classes="classref-method" ids="class-syntaxhighlighter-private-method-clear-highlighting-cache" names="class_syntaxhighlighter_private_method__clear_highlighting_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_clear_highlighting_cache</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-syntaxhighlighter-private-method-clear-highlighting-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>虚方法，覆盖后可以清空本地缓存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-syntaxhighlighter-private-method-get-line-syntax-highlighting"></target>
            <paragraph classes="classref-method" ids="class-syntaxhighlighter-private-method-get-line-syntax-highlighting" names="class_syntaxhighlighter_private_method__get_line_syntax_highlighting"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_line_syntax_highlighting</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-syntaxhighlighter-private-method-get-line-syntax-highlighting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>虚方法，覆盖后可以返回语法高亮数据。</paragraph>
            <paragraph>详情见 <reference internal="True" refid="class-syntaxhighlighter-method-get-line-syntax-highlighting"><inline classes="std std-ref">get_line_syntax_highlighting</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-syntaxhighlighter-private-method-update-cache"></target>
            <paragraph classes="classref-method" ids="class-syntaxhighlighter-private-method-update-cache" names="class_syntaxhighlighter_private_method__update_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_update_cache</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-syntaxhighlighter-private-method-update-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>虚方法，覆盖后可以更新本地缓存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-syntaxhighlighter-method-clear-highlighting-cache"></target>
            <paragraph classes="classref-method" ids="class-syntaxhighlighter-method-clear-highlighting-cache" names="class_syntaxhighlighter_method_clear_highlighting_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_highlighting_cache</strong>() <reference internal="True" refid="class-syntaxhighlighter-method-clear-highlighting-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空所有缓存的语法高亮数据。</paragraph>
            <paragraph>然后调用可覆盖的 <reference internal="True" refid="class-syntaxhighlighter-private-method-clear-highlighting-cache"><inline classes="std std-ref">_clear_highlighting_cache</inline></reference> 方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-syntaxhighlighter-method-get-line-syntax-highlighting"></target>
            <paragraph classes="classref-method" ids="class-syntaxhighlighter-method-get-line-syntax-highlighting" names="class_syntaxhighlighter_method_get_line_syntax_highlighting"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_line_syntax_highlighting</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-syntaxhighlighter-method-get-line-syntax-highlighting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某一行的语法高亮数据。如果尚未缓存该行，则会调用 <reference internal="True" refid="class-syntaxhighlighter-private-method-get-line-syntax-highlighting"><inline classes="std std-ref">_get_line_syntax_highlighting</inline></reference> 来计算相关数据。</paragraph>
            <paragraph>返回的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 是将列号映射到另一个 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。列号代表区域的开始位置，当前区域在遇到其他区域或行尾时结束。嵌套的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 中包含该区域的数据，目前仅支持“color”字段。</paragraph>
            <paragraph><strong>示例返回：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var color_map = {
    0: {
        "color": Color(1, 0, 0)
    },
    5: {
        "color": Color(0, 1, 0)
    }
}</literal_block>
            <paragraph>这样就会让 0-4 列为红色，让 5-行尾为绿色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-syntaxhighlighter-method-get-text-edit"></target>
            <paragraph classes="classref-method" ids="class-syntaxhighlighter-method-get-text-edit" names="class_syntaxhighlighter_method_get_text_edit"><reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> <strong>get_text_edit</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-syntaxhighlighter-method-get-text-edit"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回关联的 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-syntaxhighlighter-method-update-cache"></target>
            <paragraph classes="classref-method" ids="class-syntaxhighlighter-method-update-cache" names="class_syntaxhighlighter_method_update_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>update_cache</strong>() <reference internal="True" refid="class-syntaxhighlighter-method-update-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清除然后更新 <strong>SyntaxHighlighter</strong> 缓存。为一个回调覆盖 <reference internal="True" refid="class-syntaxhighlighter-private-method-update-cache"><inline classes="std std-ref">_update_cache</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>当关联的 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 节点更新它自己的缓存时，该函数会被自动调用。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
