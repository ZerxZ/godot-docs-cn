<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_reflectionprobe.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ReflectionProbe.xml.</comment>
    <target refid="class-reflectionprobe"></target>
    <section ids="reflectionprobe class-reflectionprobe" names="reflectionprobe class_reflectionprobe">
        <title>ReflectionProbe</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>捕捉某个位置周围的环境，用于快速创建准确的反射。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>将其周围环境捕捉为立方体贴图，并存储不同版本，其模糊级别递增以模拟不同的材质粗糙度。</paragraph>
            <paragraph><strong>ReflectionProbe</strong> 用于以低性能成本（当 <reference internal="True" refid="class-reflectionprobe-property-update-mode"><inline classes="std std-ref">update_mode</inline></reference> 为 <reference internal="True" refid="class-reflectionprobe-constant-update-once"><inline classes="std std-ref">UPDATE_ONCE</inline></reference> 时），创建高质量反射。<strong>ReflectionProbe</strong> 可以与场景的其余部分，平滑地混合在一起。<strong>ReflectionProbe</strong> 还可以与 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference>、SDFGI（<reference internal="True" refuri="class_environment#class-environment-property-sdfgi-enabled"><inline classes="std std-ref">Environment.sdfgi_enabled</inline></reference>）和屏幕空间反射（<reference internal="True" refuri="class_environment#class-environment-property-ssr-enabled"><inline classes="std std-ref">Environment.ssr_enabled</inline></reference>）结合使用，以在特定区域获得更准确的反射。<strong>ReflectionProbe</strong> 渲染其 <reference internal="True" refid="class-reflectionprobe-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference> 内的所有对象，因此更新它们可能会非常昂贵。最好仅用重要的静态对象更新一次，然后保持原样。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference> 和 SDFGI 不同，<strong>ReflectionProbe</strong> 仅从一个 <reference internal="True" refuri="class_worldenvironment#class-worldenvironment"><inline classes="std std-ref">WorldEnvironment</inline></reference> 节点获取环境。如果你在一个 <reference internal="True" refuri="class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference> 节点中指定了一个 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 资源，它将被该 <strong>ReflectionProbe</strong> 忽略。这可能会导致 <strong>ReflectionProbe</strong> 内的照明不正确。</paragraph>
            <paragraph><strong>注意：</strong>反射探针仅支持 Forward+ 和 Mobile 渲染方法，不支持 Compatibility。使用移动渲染方法时，每个网格资源上最多只能显示 8 个反射探针。尝试在单个网格资源上显示 8 个以上的反射探针，将导致反射探针随着相机移动而闪烁。</paragraph>
            <paragraph><strong>注意：</strong>当使用移动渲染方法时，反射探针只会正确地影响可见 AABB 与反射探针的 AABB 相交的网格。如果使用着色器以使网格超出其 AABB 的方式变形该网格，则必须在网格上增加 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-extra-cull-margin"><inline classes="std std-ref">GeometryInstance3D.extra_cull_margin</inline></reference>。否则，反射探针可能在网格上不可见。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/global_illumination/reflection_probes"><inline classes="doc">反射探针</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="54"></colspec>
                    <colspec colwidth="82"></colspec>
                    <colspec colwidth="25"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-ambient-color"><inline classes="std std-ref">ambient_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-ambient-color-energy"><inline classes="std std-ref">ambient_color_energy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-reflectionprobe-ambientmode"><inline classes="std std-ref">AmbientMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-ambient-mode"><inline classes="std std-ref">ambient_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-box-projection"><inline classes="std std-ref">box_projection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-cull-mask"><inline classes="std std-ref">cull_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1048575</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-enable-shadows"><inline classes="std std-ref">enable_shadows</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-intensity"><inline classes="std std-ref">intensity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-interior"><inline classes="std std-ref">interior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-max-distance"><inline classes="std std-ref">max_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-mesh-lod-threshold"><inline classes="std std-ref">mesh_lod_threshold</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-origin-offset"><inline classes="std std-ref">origin_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(20, 20, 20)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-reflectionprobe-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-reflectionprobe-property-update-mode"><inline classes="std std-ref">update_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-reflectionprobe-updatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-reflectionprobe-updatemode" names="enum_reflectionprobe_updatemode">enum <strong>UpdateMode</strong>:</paragraph>
            <target refid="class-reflectionprobe-constant-update-once"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-reflectionprobe-constant-update-once" names="class_reflectionprobe_constant_update_once"><reference internal="True" refid="enum-reflectionprobe-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_ONCE</strong> = <literal>0</literal></paragraph>
            <paragraph>在下一帧更新一次探针（建议大多数对象使用）。对应的辐照度贴图会在后续六帧中陆续生成。更新所花费的时间比 <reference internal="True" refid="class-reflectionprobe-constant-update-always"><inline classes="std std-ref">UPDATE_ALWAYS</inline></reference> 多，但消耗的性能比它少、产生的反射质量也更高。ReflectionProbe 的变换发生变化时也会进行更新，但不会在周围几何体变化时更新。你可以通过将该 <strong>ReflectionProbe</strong> 在任意方向上进行小幅度移动来强制更新 <strong>ReflectionProbe</strong>。</paragraph>
            <target refid="class-reflectionprobe-constant-update-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-reflectionprobe-constant-update-always" names="class_reflectionprobe_constant_update_always"><reference internal="True" refid="enum-reflectionprobe-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>UPDATE_ALWAYS</strong> = <literal>1</literal></paragraph>
            <paragraph>每一帧都更新该探针。可以为快速移动的对象（如汽车）提供更好的结果。然而，带来的性能消耗也是显著的。因此，建议同一个场景中最多只使用一个 <reference internal="True" refid="class-reflectionprobe-constant-update-always"><inline classes="std std-ref">UPDATE_ALWAYS</inline></reference> 的 ReflectionProbe。其他用途请使用 <reference internal="True" refid="class-reflectionprobe-constant-update-once"><inline classes="std std-ref">UPDATE_ONCE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-reflectionprobe-ambientmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-reflectionprobe-ambientmode" names="enum_reflectionprobe_ambientmode">enum <strong>AmbientMode</strong>:</paragraph>
            <target refid="class-reflectionprobe-constant-ambient-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-reflectionprobe-constant-ambient-disabled" names="class_reflectionprobe_constant_ambient_disabled"><reference internal="True" refid="enum-reflectionprobe-ambientmode"><inline classes="std std-ref">AmbientMode</inline></reference> <strong>AMBIENT_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不在 <strong>ReflectionProbe</strong> 的大小为 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 的框内部应用环境光照。</paragraph>
            <target refid="class-reflectionprobe-constant-ambient-environment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-reflectionprobe-constant-ambient-environment" names="class_reflectionprobe_constant_ambient_environment"><reference internal="True" refid="enum-reflectionprobe-ambientmode"><inline classes="std std-ref">AmbientMode</inline></reference> <strong>AMBIENT_ENVIRONMENT</strong> = <literal>1</literal></paragraph>
            <paragraph>在 <strong>ReflectionProbe</strong> 的大小为 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 的框内部应用自动来源的环境光照。</paragraph>
            <target refid="class-reflectionprobe-constant-ambient-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-reflectionprobe-constant-ambient-color" names="class_reflectionprobe_constant_ambient_color"><reference internal="True" refid="enum-reflectionprobe-ambientmode"><inline classes="std std-ref">AmbientMode</inline></reference> <strong>AMBIENT_COLOR</strong> = <literal>2</literal></paragraph>
            <paragraph>在 <strong>ReflectionProbe</strong> 的大小为 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 的框内部应用自定义环境光照。见 <reference internal="True" refid="class-reflectionprobe-property-ambient-color"><inline classes="std std-ref">ambient_color</inline></reference> 和 <reference internal="True" refid="class-reflectionprobe-property-ambient-color-energy"><inline classes="std std-ref">ambient_color_energy</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-reflectionprobe-property-ambient-color"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-ambient-color" names="class_reflectionprobe_property_ambient_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>ambient_color</strong> = <literal>Color(0, 0, 0, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_ambient_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_ambient_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>ReflectionProbe</strong> 的大小为 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 的框中使用的自定义环境光颜色。仅在 <reference internal="True" refid="class-reflectionprobe-property-ambient-mode"><inline classes="std std-ref">ambient_mode</inline></reference> 为 <reference internal="True" refid="class-reflectionprobe-constant-ambient-color"><inline classes="std std-ref">AMBIENT_COLOR</inline></reference> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-ambient-color-energy"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-ambient-color-energy" names="class_reflectionprobe_property_ambient_color_energy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>ambient_color_energy</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_ambient_color_energy</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_ambient_color_energy</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>ReflectionProbe</strong> 的大小为 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 的框中使用的自定义环境光颜色能量。仅在 <reference internal="True" refid="class-reflectionprobe-property-ambient-mode"><inline classes="std std-ref">ambient_mode</inline></reference> 为 <reference internal="True" refid="class-reflectionprobe-constant-ambient-color"><inline classes="std std-ref">AMBIENT_COLOR</inline></reference> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-ambient-mode"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-ambient-mode" names="class_reflectionprobe_property_ambient_mode"><reference internal="True" refid="enum-reflectionprobe-ambientmode"><inline classes="std std-ref">AmbientMode</inline></reference> <strong>ambient_mode</strong> = <literal>1</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_ambient_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-reflectionprobe-ambientmode"><inline classes="std std-ref">AmbientMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-reflectionprobe-ambientmode"><inline classes="std std-ref">AmbientMode</inline></reference> <strong>get_ambient_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>ReflectionProbe</strong> 的大小为 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 的框中使用的环境光颜色。环境光颜色会和其他 <strong>ReflectionProbe</strong> 和场景（<strong>ReflectionProbe</strong> 的大小为 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 的框之外）的其他部分进行平滑混合。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-box-projection"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-box-projection" names="class_reflectionprobe_property_box_projection"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>box_projection</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_enable_box_projection</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_box_projection_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时将启用箱体投影。通过根据相机的位置偏移反射中心，这使得在矩形房间中的反射看起来更正确。</paragraph>
            <paragraph><strong>注意：</strong>为了更好地适应未与网格对齐的区域，你可以旋转 <strong>ReflectionProbe</strong> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-cull-mask"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-cull-mask" names="class_reflectionprobe_property_cull_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>cull_mask</strong> = <literal>1048575</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_cull_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_cull_mask</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置剔除掩码，该掩码确定该探针绘制的对象。每个 <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference>，若它有一个层被包含在该剔除掩码中，则它将由该探针渲染。为了提高性能，最好只包含可能在反射中占用大量空间的大型对象。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-enable-shadows"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-enable-shadows" names="class_reflectionprobe_property_enable_shadows"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enable_shadows</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_enable_shadows</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>are_shadows_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在反射探测中计算阴影。这使得反射探针渲染更慢;如果想禁用它,可以使用 <reference internal="True" refid="class-reflectionprobe-constant-update-always"><inline classes="std std-ref">UPDATE_ALWAYS</inline></reference> <reference internal="True" refid="class-reflectionprobe-property-update-mode"><inline classes="std std-ref">update_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-intensity"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-intensity" names="class_reflectionprobe_property_intensity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>intensity</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_intensity</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_intensity</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义反射强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-interior"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-interior" names="class_reflectionprobe_property_interior"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>interior</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_as_interior</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_set_as_interior</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则反射将忽略天空的贡献。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-max-distance"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-max-distance" names="class_reflectionprobe_property_max_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>max_distance</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_max_distance</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_max_distance</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>对象在被剔除之前可以距该 <strong>ReflectionProbe</strong> 的最大距离。减少它可以提高性能，尤其是在使用 <reference internal="True" refid="class-reflectionprobe-constant-update-always"><inline classes="std std-ref">UPDATE_ALWAYS</inline></reference> 作为 <reference internal="True" refid="class-reflectionprobe-property-update-mode"><inline classes="std std-ref">update_mode</inline></reference> 时。</paragraph>
            <paragraph><strong>注意：</strong>最大反射距离始终至少等于探针的范围。这意味着减少 <reference internal="True" refid="class-reflectionprobe-property-max-distance"><inline classes="std std-ref">max_distance</inline></reference> 并不总是会从反射中剔除对象，尤其是在反射探针由 <reference internal="True" refid="class-reflectionprobe-property-size"><inline classes="std std-ref">size</inline></reference> 定义的框已经很大的情况下。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-mesh-lod-threshold"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-mesh-lod-threshold" names="class_reflectionprobe_property_mesh_lod_threshold"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>mesh_lod_threshold</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_mesh_lod_threshold</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_mesh_lod_threshold</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于在 <strong>ReflectionProbe</strong> 内渲染网格的自动 LOD 偏置（这类似于 <reference internal="True" refuri="class_viewport#class-viewport-property-mesh-lod-threshold"><inline classes="std std-ref">Viewport.mesh_lod_threshold</inline></reference>）。较高的值将使用生成了 LOD 变化的不太详细的网格版本。如果设置为 <literal>0.0</literal>，则自动 LOD 将被禁用。增加 <reference internal="True" refid="class-reflectionprobe-property-mesh-lod-threshold"><inline classes="std std-ref">mesh_lod_threshold</inline></reference> 以牺牲几何细节为代价提高性能，尤其是在使用 <reference internal="True" refid="class-reflectionprobe-constant-update-always"><inline classes="std std-ref">UPDATE_ALWAYS</inline></reference> 的 <reference internal="True" refid="class-reflectionprobe-property-update-mode"><inline classes="std std-ref">update_mode</inline></reference> 时。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-reflectionprobe-property-mesh-lod-threshold"><inline classes="std std-ref">mesh_lod_threshold</inline></reference> 不影响 <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> 可见性范围（也称为“手动”LOD 或分层 LOD）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-origin-offset"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-origin-offset" names="class_reflectionprobe_property_origin_offset"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>origin_offset</strong> = <literal>Vector3(0, 0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_origin_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_origin_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置当该 <strong>ReflectionProbe</strong> 处于 <reference internal="True" refid="class-reflectionprobe-property-box-projection"><inline classes="std std-ref">box_projection</inline></reference> 模式时要使用的原点偏移量。这可以被设置为一个非零值，以确保反射适合矩形房间，同时减少“妨碍”反射的对象数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-size"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-size" names="class_reflectionprobe_property_size"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>size</strong> = <literal>Vector3(20, 20, 20)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_size</strong> <strong>(</strong> <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>反射探针的大小。大小越大，探针覆盖的空间就越大，这将降低感知的分辨率。最好将大小保持在需要的大小。</paragraph>
            <paragraph><strong>注意：</strong>为了更好地适应未与网格对齐的区域，可以旋转 <strong>ReflectionProbe</strong> 节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-reflectionprobe-property-update-mode"></target>
            <paragraph classes="classref-property" ids="class-reflectionprobe-property-update-mode" names="class_reflectionprobe_property_update_mode"><reference internal="True" refid="enum-reflectionprobe-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>update_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_update_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-reflectionprobe-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-reflectionprobe-updatemode"><inline classes="std std-ref">UpdateMode</inline></reference> <strong>get_update_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置该 <strong>ReflectionProbe</strong> 的更新频率。可以是 <reference internal="True" refid="class-reflectionprobe-constant-update-once"><inline classes="std std-ref">UPDATE_ONCE</inline></reference> 或 <reference internal="True" refid="class-reflectionprobe-constant-update-always"><inline classes="std std-ref">UPDATE_ALWAYS</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
