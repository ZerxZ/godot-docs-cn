<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_thread.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Thread.xml.</comment>
    <target refid="class-thread"></target>
    <section ids="thread class-thread" names="thread class_thread">
        <title>Thread</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>进程中的执行单元。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>进程中的执行单元。可以让任意 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 上的任意方法同时运行。如果使用共享对象，建议通过 <reference internal="True" refuri="class_mutex#class-mutex"><inline classes="std std-ref">Mutex</inline></reference> 或 <reference internal="True" refuri="class_semaphore#class-semaphore"><inline classes="std std-ref">Semaphore</inline></reference> 进行同步。</paragraph>
            <paragraph><strong>警告：</strong></paragraph>
            <paragraph>为了确保能够正确清理，避免崩溃和死锁，<strong>Thread</strong> 的引用计数变为零进行销毁时，必须满足以下条件：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>必须没有任何上锁的 <reference internal="True" refuri="class_mutex#class-mutex"><inline classes="std std-ref">Mutex</inline></reference> 对象。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>必须没有在任何 <reference internal="True" refuri="class_semaphore#class-semaphore"><inline classes="std std-ref">Semaphore</inline></reference> 对象上等待。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>必须已调用过它的 <reference internal="True" refid="class-thread-method-wait-to-finish"><inline classes="std std-ref">wait_to_finish</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/using_multiple_threads"><inline classes="doc">使用多线程</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/thread_safe_apis"><inline classes="doc">线程安全的 API</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/676">3D 体素演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="148"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-thread-method-get-id"><inline classes="std std-ref">get_id</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-thread-method-is-alive"><inline classes="std std-ref">is_alive</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-thread-method-is-started"><inline classes="std std-ref">is_started</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-thread-method-set-thread-safety-checks-enabled"><inline classes="std std-ref">set_thread_safety_checks_enabled</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-thread-method-start"><inline classes="std std-ref">start</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable, <reference internal="True" refid="enum-thread-priority"><inline classes="std std-ref">Priority</inline></reference> priority=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-thread-method-wait-to-finish"><inline classes="std std-ref">wait_to_finish</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-thread-priority"></target>
            <paragraph classes="classref-enumeration" ids="enum-thread-priority" names="enum_thread_priority">enum <strong>Priority</strong>:</paragraph>
            <target refid="class-thread-constant-priority-low"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-thread-constant-priority-low" names="class_thread_constant_priority_low"><reference internal="True" refid="enum-thread-priority"><inline classes="std std-ref">Priority</inline></reference> <strong>PRIORITY_LOW</strong> = <literal>0</literal></paragraph>
            <paragraph>线程以比正常情况下更低的优先级运行。</paragraph>
            <target refid="class-thread-constant-priority-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-thread-constant-priority-normal" names="class_thread_constant_priority_normal"><reference internal="True" refid="enum-thread-priority"><inline classes="std std-ref">Priority</inline></reference> <strong>PRIORITY_NORMAL</strong> = <literal>1</literal></paragraph>
            <paragraph>具有标准优先级的线程。</paragraph>
            <target refid="class-thread-constant-priority-high"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-thread-constant-priority-high" names="class_thread_constant_priority_high"><reference internal="True" refid="enum-thread-priority"><inline classes="std std-ref">Priority</inline></reference> <strong>PRIORITY_HIGH</strong> = <literal>2</literal></paragraph>
            <paragraph>以比正常情况更高的优先级运行的线程。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-thread-method-get-id"></target>
            <paragraph classes="classref-method" ids="class-thread-method-get-id" names="class_thread_method_get_id"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_id</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回当前 <strong>Thread</strong> 的 ID，能够在所有线程中唯一标识该线程。如果该 <strong>Thread</strong> 尚未运行，或者已经调用过 <reference internal="True" refid="class-thread-method-wait-to-finish"><inline classes="std std-ref">wait_to_finish</inline></reference>，则返回空字符串。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-thread-method-is-alive"></target>
            <paragraph classes="classref-method" ids="class-thread-method-is-alive" names="class_thread_method_is_alive"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_alive</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果这个 <strong>Thread</strong> 当前正在运行，则返回 <literal>true</literal>。可用于确定调用 <reference internal="True" refid="class-thread-method-wait-to-finish"><inline classes="std std-ref">wait_to_finish</inline></reference> 是否可以不阻塞调用的线程。</paragraph>
            <paragraph>要检查 <strong>Thread</strong> 是否可被并入，请使用 <reference internal="True" refid="class-thread-method-is-started"><inline classes="std std-ref">is_started</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-thread-method-is-started"></target>
            <paragraph classes="classref-method" ids="class-thread-method-is-started" names="class_thread_method_is_started"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_started</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果此 <strong>Thread</strong> 已启动，则返回 <literal>true</literal>。一旦开始，这将返回 <literal>true</literal> ，直到它使用 <reference internal="True" refid="class-thread-method-wait-to-finish"><inline classes="std std-ref">wait_to_finish</inline></reference> 加入。要检查 <strong>Thread</strong> 是否仍在执行其任务，请使用 <reference internal="True" refid="class-thread-method-is-alive"><inline classes="std std-ref">is_alive</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-thread-method-set-thread-safety-checks-enabled"></target>
            <paragraph classes="classref-method" ids="class-thread-method-set-thread-safety-checks-enabled" names="class_thread_method_set_thread_safety_checks_enabled">void <strong>set_thread_safety_checks_enabled</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> enabled <strong>)</strong> <abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></paragraph>
            <paragraph>设置是否应该<strong>在当前线程</strong>执行线程安全检查，这些检查在一般是在某些类（例如 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>）的方法中进行的。</paragraph>
            <paragraph>每个线程的默认值是启用（就像将 <literal>true</literal> 传给 <literal>enabled</literal> 调用一样）。</paragraph>
            <paragraph>这些检查是保守的。也就是说，只有在引擎能够确保安全时才会认为该调用是线程安全的，检查通过（因此允许进行调用）。</paragraph>
            <paragraph>因此，某些情况下用于可能会想要将其禁用（让 <literal>enabled</literal> 为 <literal>false</literal>），允许某些操作。此时引擎不再保护这些对象的线程安全，（通过使用 <reference internal="True" refuri="class_mutex#class-mutex"><inline classes="std std-ref">Mutex</inline></reference> 等方法来）确保线程安全就是用户自己的责任了。</paragraph>
            <paragraph><strong>注意：</strong>这是引擎的高阶用法。建议只有在你知道自己在做什么，并且没有其他更安全的方法时才使用这个方法。</paragraph>
            <paragraph><strong>注意：</strong>可用于任意 <strong>Thread</strong> 对象中执行的脚本，或者提交至 <reference internal="True" refuri="class_workerthreadpool#class-workerthreadpool"><inline classes="std std-ref">WorkerThreadPool</inline></reference> 的任务。<reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 分组处理时执行的代码不适用，这种情况下会始终执行检查。</paragraph>
            <paragraph><strong>注意：</strong>即使是在 <reference internal="True" refuri="class_workerthreadpool#class-workerthreadpool"><inline classes="std std-ref">WorkerThreadPool</inline></reference> 任务中禁用了检查，也不需要在结束后将其重新启用。引擎会帮你去启用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-thread-method-start"></target>
            <paragraph classes="classref-method" ids="class-thread-method-start" names="class_thread_method_start"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>start</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> callable, <reference internal="True" refid="enum-thread-priority"><inline classes="std std-ref">Priority</inline></reference> priority=1 <strong>)</strong></paragraph>
            <paragraph>启动一个调用 <literal>callable</literal> 的新 <strong>Thread</strong>。</paragraph>
            <paragraph>如果该方法需要一些参数，可以使用 <reference internal="True" refuri="class_callable#class-callable-method-bind"><inline classes="std std-ref">Callable.bind</inline></reference> 传递它们。</paragraph>
            <paragraph><strong>Thread</strong> 的 <literal>priority</literal> 可以通过传递 <reference internal="True" refid="enum-thread-priority"><inline classes="std std-ref">Priority</inline></reference> 枚举中的值来更改。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，失败时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-cant-create"><inline classes="std std-ref">@GlobalScope.ERR_CANT_CREATE</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-thread-method-wait-to-finish"></target>
            <paragraph classes="classref-method" ids="class-thread-method-wait-to-finish" names="class_thread_method_wait_to_finish"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>wait_to_finish</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>合并该 <strong>Thread</strong> 并等待其完成。返回传入 <reference internal="True" refid="class-thread-method-start"><inline classes="std std-ref">start</inline></reference> 的 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 的输出。</paragraph>
            <paragraph>应该在你想要获取该 <strong>Thread</strong> 所调用的方法的返回值时使用，或者在释放包含该 <strong>Thread</strong> 的实例前使用。</paragraph>
            <paragraph>要确定调用时是否不会阻塞调用线程，请检查 <reference internal="True" refid="class-thread-method-is-alive"><inline classes="std std-ref">is_alive</inline></reference> 是否为 <literal>false</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
