<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_shape2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Shape2D.xml.</comment>
    <target refid="class-shape2d"></target>
    <section ids="shape2d class-shape2d" names="shape2d class_shape2d">
        <title>Shape2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_capsuleshape2d#class-capsuleshape2d"><inline classes="std std-ref">CapsuleShape2D</inline></reference>, <reference internal="True" refuri="class_circleshape2d#class-circleshape2d"><inline classes="std std-ref">CircleShape2D</inline></reference>, <reference internal="True" refuri="class_concavepolygonshape2d#class-concavepolygonshape2d"><inline classes="std std-ref">ConcavePolygonShape2D</inline></reference>, <reference internal="True" refuri="class_convexpolygonshape2d#class-convexpolygonshape2d"><inline classes="std std-ref">ConvexPolygonShape2D</inline></reference>, <reference internal="True" refuri="class_rectangleshape2d#class-rectangleshape2d"><inline classes="std std-ref">RectangleShape2D</inline></reference>, <reference internal="True" refuri="class_segmentshape2d#class-segmentshape2d"><inline classes="std std-ref">SegmentShape2D</inline></reference>, <reference internal="True" refuri="class_separationrayshape2d#class-separationrayshape2d"><inline classes="std std-ref">SeparationRayShape2D</inline></reference>, <reference internal="True" refuri="class_worldboundaryshape2d#class-worldboundaryshape2d"><inline classes="std std-ref">WorldBoundaryShape2D</inline></reference></paragraph>
        <paragraph>用于物理碰撞的 2D 形状的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>所有 2D 形状的抽象基类，针对物理使用设计。</paragraph>
            <paragraph><strong>性能：</strong>对图元形状进行碰撞检测很快，尤其是 <reference internal="True" refuri="class_circleshape2d#class-circleshape2d"><inline classes="std std-ref">CircleShape2D</inline></reference>。<reference internal="True" refuri="class_convexpolygonshape2d#class-convexpolygonshape2d"><inline classes="std std-ref">ConvexPolygonShape2D</inline></reference> 较慢，<reference internal="True" refuri="class_concavepolygonshape2d#class-concavepolygonshape2d"><inline classes="std std-ref">ConcavePolygonShape2D</inline></reference> 最慢。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/physics/physics_introduction"><inline classes="doc">物理介绍</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="70"></colspec>
                    <colspec colwidth="9"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shape2d-property-custom-solver-bias"><inline classes="std std-ref">custom_solver_bias</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="347"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shape2d-method-collide"><inline classes="std std-ref">collide</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shape2d-method-collide-and-get-contacts"><inline classes="std std-ref">collide_and_get_contacts</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shape2d-method-collide-with-motion"><inline classes="std std-ref">collide_with_motion</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> local_motion, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> shape_motion <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shape2d-method-collide-with-motion-and-get-contacts"><inline classes="std std-ref">collide_with_motion_and_get_contacts</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> local_motion, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> shape_motion <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shape2d-method-draw"><inline classes="std std-ref">draw</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-shape2d-method-get-rect"><inline classes="std std-ref">get_rect</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-shape2d-property-custom-solver-bias"></target>
            <paragraph classes="classref-property" ids="class-shape2d-property-custom-solver-bias" names="class_shape2d_property_custom_solver_bias"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>custom_solver_bias</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_custom_solver_bias</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_custom_solver_bias</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该形状的的自定义求解器偏差。定义了强制接触分离涉及到这个形状时，物体会做出多大的反应。</paragraph>
            <paragraph>设为 <literal>0.0</literal> 时，使用的默认值为 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-physics-2d-solver-default-contact-bias"><inline classes="std std-ref">ProjectSettings.physics/2d/solver/default_contact_bias</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-shape2d-method-collide"></target>
            <paragraph classes="classref-method" ids="class-shape2d-method-collide" names="class_shape2d_method_collide"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>collide</strong> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform <strong>)</strong></paragraph>
            <paragraph>如果该形状与另一个形状发生碰撞，返回 <literal>true</literal>。</paragraph>
            <paragraph>本方法需要该形状的变换矩阵（<literal>local_xform</literal>）、要检查与该形状碰撞的形状（<literal>with_shape</literal>）、以及那个形状的变换矩阵（<literal>shape_xform</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shape2d-method-collide-and-get-contacts"></target>
            <paragraph classes="classref-method" ids="class-shape2d-method-collide-and-get-contacts" names="class_shape2d_method_collide_and_get_contacts"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>collide_and_get_contacts</strong> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform <strong>)</strong></paragraph>
            <paragraph>返回该形状与另一形状接触的接触点对的列表。</paragraph>
            <paragraph>如果不存在碰撞，则返回的列表为空。否则，返回的列表中包含的是成对排列的接触点，在该形状边界上的点和 <literal>with_shape</literal> 边界上的点之间交替排列。</paragraph>
            <paragraph>有了碰撞对 A 和 B，就可以通过 <literal>(B - A).normalized()</literal> 计算碰撞法线，通过 <literal>(B - A).length()</literal> 计算碰撞深度。这些信息通常用于分离形状，在碰撞求解器中比较常见。</paragraph>
            <paragraph>这个方法需要用到该形状的变换矩阵（<literal>local_xform</literal>）、要检查与该形状是否碰撞的形状（<literal>with_shape</literal>）、以及那个形状的变换矩阵（<literal>shape_xform</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shape2d-method-collide-with-motion"></target>
            <paragraph classes="classref-method" ids="class-shape2d-method-collide-with-motion" names="class_shape2d_method_collide_with_motion"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>collide_with_motion</strong> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> local_motion, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> shape_motion <strong>)</strong></paragraph>
            <paragraph>返回应用给定的运动后，这个形状是否会与另一个形状发生碰撞。</paragraph>
            <paragraph>这个方法需要这个形状的变换矩阵（<literal>local_xform</literal>），要在这个形状上测试的运动（<literal>local_motion</literal>），检查碰撞的形状（<literal>with_shape</literal>），那个形状的变换矩阵（<literal>shape_xform</literal>），以及用于测试其他物体的运动（<literal>shape_motion</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shape2d-method-collide-with-motion-and-get-contacts"></target>
            <paragraph classes="classref-method" ids="class-shape2d-method-collide-with-motion-and-get-contacts" names="class_shape2d_method_collide_with_motion_and_get_contacts"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>collide_with_motion_and_get_contacts</strong> <strong>(</strong> <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> local_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> local_motion, <reference internal="True" refid="class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> with_shape, <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> shape_xform, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> shape_motion <strong>)</strong></paragraph>
            <paragraph>返回如果应用了给定的移动后，该形状将接触另一形状的接触点对列表。</paragraph>
            <paragraph>如果不存在碰撞，则返回的列表为空。否则，返回的列表中包含的是成对排列的接触点，在该形状边界上的点和 <literal>with_shape</literal> 边界上的点之间会交替出现。</paragraph>
            <paragraph>有了碰撞对 A 和 B，就可以通过 <literal>(B - A).normalized()</literal> 计算碰撞法线，通过 <literal>(B - A).length()</literal> 计算碰撞深度。这些信息通常用于分离形状，在碰撞求解器中比较常见。</paragraph>
            <paragraph>本方法需要用到该形状的变换矩阵（<literal>local_xform</literal>）、要在该形状上测试的运动（<literal>local_motion</literal>）、要检查与该形状是否碰撞的形状（<literal>with_shape</literal>）、那个形状的变换矩阵（<literal>shape_xform</literal>）、以及要在其他形状上测试的运动（<literal>shape_motion</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shape2d-method-draw"></target>
            <paragraph classes="classref-method" ids="class-shape2d-method-draw" names="class_shape2d_method_draw">void <strong>draw</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> canvas_item, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>用 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> API 在 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制实体形状，并填充指定的颜色 <literal>color</literal>。确切的绘制方法是每个形状特有的，无法配置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-shape2d-method-get-rect"></target>
            <paragraph classes="classref-method" ids="class-shape2d-method-get-rect" names="class_shape2d_method_get_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_rect</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回代表形状边界的 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
