<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_styleboxflat.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/StyleBoxFlat.xml.</comment>
    <target refid="class-styleboxflat"></target>
    <section ids="styleboxflat class-styleboxflat" names="styleboxflat class_styleboxflat">
        <title>StyleBoxFlat</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>不使用纹理的自定义 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>通过配置这个样式盒的各种属性，你可以不使用纹理实现许多常见外观，包括可选的圆角边框、抗锯齿、阴影、偏斜等。</paragraph>
            <paragraph>允许将圆角半径设置为较高的值。两角重叠时，样式盒将切换到相对系统。</paragraph>
            <paragraph><strong>示例：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">height = 30
corner_radius_top_left = 50
corner_radius_bottom_left = 100</literal_block>
            <paragraph>相对系统现在将采用两个左角的 1:2 比率来计算实际角宽度。添加的两个角<strong>永远</strong>不会超过高度。结果：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">corner_radius_top_left: 10
corner_radius_bottom_left: 20</literal_block>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="91"></colspec>
                    <colspec colwidth="29"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-anti-aliasing"><inline classes="std std-ref">anti_aliasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-anti-aliasing-size"><inline classes="std std-ref">anti_aliasing_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-bg-color"><inline classes="std std-ref">bg_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.6, 0.6, 0.6, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-border-blend"><inline classes="std std-ref">border_blend</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-border-color"><inline classes="std std-ref">border_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.8, 0.8, 0.8, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-border-width-bottom"><inline classes="std std-ref">border_width_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-border-width-left"><inline classes="std std-ref">border_width_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-border-width-right"><inline classes="std std-ref">border_width_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-border-width-top"><inline classes="std std-ref">border_width_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-corner-detail"><inline classes="std std-ref">corner_detail</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>8</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-corner-radius-bottom-left"><inline classes="std std-ref">corner_radius_bottom_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-corner-radius-bottom-right"><inline classes="std std-ref">corner_radius_bottom_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-corner-radius-top-left"><inline classes="std std-ref">corner_radius_top_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-corner-radius-top-right"><inline classes="std std-ref">corner_radius_top_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-draw-center"><inline classes="std std-ref">draw_center</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-expand-margin-bottom"><inline classes="std std-ref">expand_margin_bottom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-expand-margin-left"><inline classes="std std-ref">expand_margin_left</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-expand-margin-right"><inline classes="std std-ref">expand_margin_right</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-expand-margin-top"><inline classes="std std-ref">expand_margin_top</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-shadow-color"><inline classes="std std-ref">shadow_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0.6)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-shadow-offset"><inline classes="std std-ref">shadow_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-shadow-size"><inline classes="std std-ref">shadow_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-property-skew"><inline classes="std std-ref">skew</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="27"></colspec>
                    <colspec colwidth="160"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-get-border-width"><inline classes="std std-ref">get_border_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-get-border-width-min"><inline classes="std std-ref">get_border_width_min</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-get-corner-radius"><inline classes="std std-ref">get_corner_radius</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-get-expand-margin"><inline classes="std std-ref">get_expand_margin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-set-border-width"><inline classes="std std-ref">set_border_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-set-border-width-all"><inline classes="std std-ref">set_border_width_all</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-set-corner-radius"><inline classes="std std-ref">set_corner_radius</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-set-corner-radius-all"><inline classes="std std-ref">set_corner_radius_all</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-set-expand-margin"><inline classes="std std-ref">set_expand_margin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-styleboxflat-method-set-expand-margin-all"><inline classes="std std-ref">set_expand_margin_all</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-styleboxflat-property-anti-aliasing"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-anti-aliasing" names="class_styleboxflat_property_anti_aliasing"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>anti_aliasing</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_anti_aliased</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_anti_aliased</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>抗锯齿会在边缘周围绘制一个渐变到透明的小环。因此边缘看起来会更加平滑。这仅在使用圆角或 <reference internal="True" refid="class-styleboxflat-property-skew"><inline classes="std std-ref">skew</inline></reference> 时才明显。</paragraph>
            <paragraph><strong>注意：</strong>使用 45 度倒角（<reference internal="True" refid="class-styleboxflat-property-corner-detail"><inline classes="std std-ref">corner_detail</inline></reference> = 1）时，建议将 <reference internal="True" refid="class-styleboxflat-property-anti-aliasing"><inline classes="std std-ref">anti_aliasing</inline></reference> 设为 <literal>false</literal>，这样可以保证画面锐利、避免一些显示问题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-anti-aliasing-size"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-anti-aliasing-size" names="class_styleboxflat_property_anti_aliasing_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>anti_aliasing_size</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_aa_size</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_aa_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>修改抗锯齿效果的大小。要在 100% 缩放时达到最佳效果推荐使用 <literal>1.0</literal>，和网页浏览器以及大多数矢量图绘制软件中圆角矩阵的绘制方式是一致的。</paragraph>
            <paragraph><strong>注意：</strong>较高的值可能产生模糊效果，但框本身较小、圆角半径较大的情况下也可能产生不理想的显示问题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-bg-color"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-bg-color" names="class_styleboxflat_property_bg_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>bg_color</strong> = <literal>Color(0.6, 0.6, 0.6, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_bg_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_bg_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>StyleBox的背景颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-border-blend"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-border-blend" names="class_styleboxflat_property_border_blend"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>border_blend</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_border_blend</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_border_blend</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，边框会淡入背景色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-border-color"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-border-color" names="class_styleboxflat_property_border_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>border_color</strong> = <literal>Color(0.8, 0.8, 0.8, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_border_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_border_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置边框的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-border-width-bottom"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-border-width-bottom" names="class_styleboxflat_property_border_width_bottom"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>border_width_bottom</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>底边框的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-border-width-left"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-border-width-left" names="class_styleboxflat_property_border_width_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>border_width_left</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>左边框的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-border-width-right"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-border-width-right" names="class_styleboxflat_property_border_width_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>border_width_right</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>右边框的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-border-width-top"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-border-width-top" names="class_styleboxflat_property_border_width_top"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>border_width_top</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>顶边框的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-corner-detail"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-corner-detail" names="class_styleboxflat_property_corner_detail"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>corner_detail</strong> = <literal>8</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_corner_detail</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_corner_detail</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置用于每个角的顶点数。更高的值生成更圆的角，但需要更多的处理计算。选择值时，应考虑角半径（<reference internal="True" refid="class-styleboxflat-method-set-corner-radius-all"><inline classes="std std-ref">set_corner_radius_all</inline></reference>）。</paragraph>
            <paragraph>对于小于 10 的角半径，<literal>4</literal> 或 <literal>5</literal> 应该就足够。对于小于 30 的角半径，<literal>8</literal> 和 <literal>12</literal> 之间的值应该足够。</paragraph>
            <paragraph><literal>1</literal>的角细节会导致倒角而不是圆角，这对于某些艺术效果很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-corner-radius-bottom-left"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-corner-radius-bottom-left" names="class_styleboxflat_property_corner_radius_bottom_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>corner_radius_bottom_left</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>左下角的半径。如果为 <literal>0</literal>，则该角不圆滑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-corner-radius-bottom-right"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-corner-radius-bottom-right" names="class_styleboxflat_property_corner_radius_bottom_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>corner_radius_bottom_right</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>右下角的半径。如果为 <literal>0</literal>，则该角不圆滑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-corner-radius-top-left"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-corner-radius-top-left" names="class_styleboxflat_property_corner_radius_top_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>corner_radius_top_left</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>左上角的半径。如果为 <literal>0</literal>，则该角不圆滑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-corner-radius-top-right"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-corner-radius-top-right" names="class_styleboxflat_property_corner_radius_top_right"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>corner_radius_top_right</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>右上角的半径。如果为 <literal>0</literal>，则该角不圆滑。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-draw-center"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-draw-center" names="class_styleboxflat_property_draw_center"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>draw_center</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_draw_center</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_draw_center_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>切换绘制 StyleBox 的内部部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-expand-margin-bottom"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-expand-margin-bottom" names="class_styleboxflat_property_expand_margin_bottom"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>expand_margin_bottom</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将该样式盒扩展到该控件矩形的底边。可以与 <reference internal="True" refid="class-styleboxflat-property-border-width-bottom"><inline classes="std std-ref">border_width_bottom</inline></reference> 组合，在该控件矩形之外绘制边框。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_stylebox#class-stylebox-property-content-margin-bottom"><inline classes="std std-ref">StyleBox.content_margin_bottom</inline></reference> 不同，<reference internal="True" refid="class-styleboxflat-property-expand-margin-bottom"><inline classes="std std-ref">expand_margin_bottom</inline></reference> <emphasis>并不会</emphasis>影响 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的可点击区域。错误使用时会对可用性造成负面影响，因为用户可能会点击该 StyleBox 上实际无法接受点击的区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-expand-margin-left"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-expand-margin-left" names="class_styleboxflat_property_expand_margin_left"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>expand_margin_left</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将该样式盒扩展到该控件矩形的左边。可以与 <reference internal="True" refid="class-styleboxflat-property-border-width-left"><inline classes="std std-ref">border_width_left</inline></reference> 组合，在该控件矩形之外绘制边框。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_stylebox#class-stylebox-property-content-margin-left"><inline classes="std std-ref">StyleBox.content_margin_left</inline></reference> 不同，<reference internal="True" refid="class-styleboxflat-property-expand-margin-left"><inline classes="std std-ref">expand_margin_left</inline></reference> <emphasis>并不会</emphasis>影响 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的可点击区域。错误使用时会对可用性造成负面影响，因为用户可能会点击该 StyleBox 上实际无法接受点击的区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-expand-margin-right"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-expand-margin-right" names="class_styleboxflat_property_expand_margin_right"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>expand_margin_right</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将该样式盒扩展到该控件矩形的右边。可以与 <reference internal="True" refid="class-styleboxflat-property-border-width-right"><inline classes="std std-ref">border_width_right</inline></reference> 组合，在该控件矩形之外绘制边框。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_stylebox#class-stylebox-property-content-margin-right"><inline classes="std std-ref">StyleBox.content_margin_right</inline></reference> 不同，<reference internal="True" refid="class-styleboxflat-property-expand-margin-right"><inline classes="std std-ref">expand_margin_right</inline></reference> <emphasis>并不会</emphasis>影响 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的可点击区域。错误使用时会对可用性造成负面影响，因为用户可能会点击该 StyleBox 上实际无法接受点击的区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-expand-margin-top"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-expand-margin-top" names="class_styleboxflat_property_expand_margin_top"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>expand_margin_top</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将该样式盒扩展到该控件矩形的顶边。可以与 <reference internal="True" refid="class-styleboxflat-property-border-width-top"><inline classes="std std-ref">border_width_top</inline></reference> 组合，在该控件矩形之外绘制边框。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refuri="class_stylebox#class-stylebox-property-content-margin-top"><inline classes="std std-ref">StyleBox.content_margin_top</inline></reference> 不同，<reference internal="True" refid="class-styleboxflat-property-expand-margin-top"><inline classes="std std-ref">expand_margin_top</inline></reference> <emphasis>并不会</emphasis>影响 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的可点击区域。错误使用时会对可用性造成负面影响，因为用户可能会点击该 StyleBox 上实际无法接受点击的区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-shadow-color"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-shadow-color" names="class_styleboxflat_property_shadow_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>shadow_color</strong> = <literal>Color(0, 0, 0, 0.6)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_color</strong> <strong>(</strong> <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_shadow_color</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>阴影的颜色。如果 <reference internal="True" refid="class-styleboxflat-property-shadow-size"><inline classes="std std-ref">shadow_size</inline></reference> 小于 1，这将不起作用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-shadow-offset"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-shadow-offset" names="class_styleboxflat_property_shadow_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>shadow_offset</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_shadow_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>以像素为单位的阴影偏移。相对于StyleBox调整阴影的位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-shadow-size"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-shadow-size" names="class_styleboxflat_property_shadow_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shadow_size</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_shadow_size</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_shadow_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>以像素为单位的阴影大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-property-skew"></target>
            <paragraph classes="classref-property" ids="class-styleboxflat-property-skew" names="class_styleboxflat_property_skew"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>skew</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_skew</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_skew</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果任何轴被设为了非零值，<reference internal="True" refid="class-styleboxflat-property-skew"><inline classes="std std-ref">skew</inline></reference> 就会将该 StyleBox 进行横向和/或纵向变形。可用于实现“未来风”的 UI。正值会让该 StyleBox 朝右（X 轴）上（Y 轴）偏斜，负值会让该 StyleBox 朝左（X 轴）下（Y 轴）偏斜。</paragraph>
            <paragraph><strong>注意：</strong>为了让文本不触碰到该 StyleBox 的边缘，请考虑增大该 <reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> 的内容边距（见 <reference internal="True" refuri="class_stylebox#class-stylebox-property-content-margin-bottom"><inline classes="std std-ref">StyleBox.content_margin_bottom</inline></reference>）。增大内容边距比增大扩展边距（见 <reference internal="True" refid="class-styleboxflat-property-expand-margin-bottom"><inline classes="std std-ref">expand_margin_bottom</inline></reference>）更好，因为增大扩展边距并不会增大 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 的可点击区域。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-styleboxflat-method-get-border-width"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-get-border-width" names="class_styleboxflat_method_get_border_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的边框宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-get-border-width-min"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-get-border-width-min" names="class_styleboxflat_method_get_border_width_min"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_border_width_min</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回所有四条边中，最小的边框宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-get-corner-radius"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-get-corner-radius" names="class_styleboxflat_method_get_corner_radius"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回给定角 <literal>corner</literal> 的半径。可能的取值见 <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-get-expand-margin"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-get-expand-margin" names="class_styleboxflat_method_get_expand_margin"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的扩展边距的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-set-border-width"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-set-border-width" names="class_styleboxflat_method_set_border_width">void <strong>set_border_width</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
            <paragraph>将指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的边框宽度设置为 <literal>width</literal> 像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-set-border-width-all"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-set-border-width-all" names="class_styleboxflat_method_set_border_width_all">void <strong>set_border_width_all</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width <strong>)</strong></paragraph>
            <paragraph>将所有边的边框宽度设置为 <literal>width</literal> 像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-set-corner-radius"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-set-corner-radius" names="class_styleboxflat_method_set_corner_radius">void <strong>set_corner_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference> corner, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
            <paragraph>将给定角 <literal>corner</literal> 的圆角半径设置为 <literal>radius</literal> 像素。可能的取值见 <reference internal="True" refuri="class_@globalscope#enum-globalscope-corner"><inline classes="std std-ref">Corner</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-set-corner-radius-all"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-set-corner-radius-all" names="class_styleboxflat_method_set_corner_radius_all">void <strong>set_corner_radius_all</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> radius <strong>)</strong></paragraph>
            <paragraph>将所有角的圆角半径设置为 <literal>radius</literal> 像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-set-expand-margin"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-set-expand-margin" names="class_styleboxflat_method_set_expand_margin">void <strong>set_expand_margin</strong> <strong>(</strong> <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> margin, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
            <paragraph>将指定边 <reference internal="True" refuri="class_@globalscope#enum-globalscope-side"><inline classes="std std-ref">Side</inline></reference> 的扩展边距设置为 <literal>size</literal> 像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-styleboxflat-method-set-expand-margin-all"></target>
            <paragraph classes="classref-method" ids="class-styleboxflat-method-set-expand-margin-all" names="class_styleboxflat_method_set_expand_margin_all">void <strong>set_expand_margin_all</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> size <strong>)</strong></paragraph>
            <paragraph>将所有边的扩展边距都设置为 <literal>size</literal> 像素。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
