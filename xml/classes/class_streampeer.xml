<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_streampeer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/StreamPeer.xml.</comment>
    <target refid="class-streampeer"></target>
    <section ids="streampeer class-streampeer" names="streampeer class_streampeer">
        <title>StreamPeer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_streampeerbuffer#class-streampeerbuffer"><inline classes="std std-ref">StreamPeerBuffer</inline></reference>, <reference internal="True" refuri="class_streampeerextension#class-streampeerextension"><inline classes="std std-ref">StreamPeerExtension</inline></reference>, <reference internal="True" refuri="class_streampeergzip#class-streampeergzip"><inline classes="std std-ref">StreamPeerGZIP</inline></reference>, <reference internal="True" refuri="class_streampeertcp#class-streampeertcp"><inline classes="std std-ref">StreamPeerTCP</inline></reference>, <reference internal="True" refuri="class_streampeertls#class-streampeertls"><inline classes="std std-ref">StreamPeerTLS</inline></reference></paragraph>
        <paragraph>与流交互的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>StreamPeer 是一种抽象基类，常用于流式协议（例如 TCP）。它提供了通过流发送数据的 API，将数据作为原始数据或字符串处理。</paragraph>
            <paragraph><strong>注意：</strong>导出到安卓时，在导出项目或使用一键部署之前，请务必在安卓导出预设中，开启 <literal>INTERNET</literal> 权限。否则，任何类型的网络通信都将被 Android 阻止。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="57"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-property-big-endian"><inline classes="std std-ref">big_endian</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="39"></colspec>
                    <colspec colwidth="141"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-8"><inline classes="std std-ref">get_8</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-16"><inline classes="std std-ref">get_16</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-32"><inline classes="std std-ref">get_32</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-64"><inline classes="std std-ref">get_64</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-available-bytes"><inline classes="std std-ref">get_available_bytes</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-data"><inline classes="std std-ref">get_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-double"><inline classes="std std-ref">get_double</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-float"><inline classes="std std-ref">get_float</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-partial-data"><inline classes="std std-ref">get_partial_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-string"><inline classes="std std-ref">get_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes=-1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-u8"><inline classes="std std-ref">get_u8</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-u16"><inline classes="std std-ref">get_u16</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-u32"><inline classes="std std-ref">get_u32</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-u64"><inline classes="std std-ref">get_u64</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-utf8-string"><inline classes="std std-ref">get_utf8_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes=-1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-get-var"><inline classes="std std-ref">get_var</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_objects=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-8"><inline classes="std std-ref">put_8</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-16"><inline classes="std std-ref">put_16</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-32"><inline classes="std std-ref">put_32</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-64"><inline classes="std std-ref">put_64</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-data"><inline classes="std std-ref">put_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-double"><inline classes="std std-ref">put_double</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-float"><inline classes="std std-ref">put_float</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-partial-data"><inline classes="std std-ref">put_partial_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-string"><inline classes="std std-ref">put_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-u8"><inline classes="std std-ref">put_u8</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-u16"><inline classes="std std-ref">put_u16</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-u32"><inline classes="std std-ref">put_u32</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-u64"><inline classes="std std-ref">put_u64</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-utf8-string"><inline classes="std std-ref">put_utf8_string</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-streampeer-method-put-var"><inline classes="std std-ref">put_var</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> full_objects=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-streampeer-property-big-endian"></target>
            <paragraph classes="classref-property" ids="class-streampeer-property-big-endian" names="class_streampeer_property_big_endian"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>big_endian</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_big_endian</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_big_endian_enabled</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时，该 <strong>StreamPeer</strong> 进行编解码时会使用大端格式。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-streampeer-method-get-8"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-8" names="class_streampeer_method_get_8"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_8</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取有符号字节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-16"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-16" names="class_streampeer_method_get_16"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_16</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取有符号 16 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-32"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-32" names="class_streampeer_method_get_32"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_32</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取有符号 32 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-64"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-64" names="class_streampeer_method_get_64"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_64</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取有符号 64 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-available-bytes"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-available-bytes" names="class_streampeer_method_get_available_bytes"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_available_bytes</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回该 <strong>StreamPeer</strong> 可用的字节数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-data"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-data" names="class_streampeer_method_get_data"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_data</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes <strong>)</strong></paragraph>
            <paragraph>返回接收到的块数据。可以使用 <literal>bytes</literal> 参数设置所需接收的字节数。如果可用的字节数不足，函数会阻塞至接收到所需字节数为止。该函数返回两个值，一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码以及一个数据数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-double"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-double" names="class_streampeer_method_get_double"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_double</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取一个双精度浮点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-float"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-float" names="class_streampeer_method_get_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_float</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取一个单精度浮点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-partial-data"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-partial-data" names="class_streampeer_method_get_partial_data"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_partial_data</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes <strong>)</strong></paragraph>
            <paragraph>返回接收到的块数据。可以使用“bytes”参数设置所需接收的字节数。如果可用的字节数不足，函数会阻塞至接收到所需字节数为止。该函数返回两个值，一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码以及一个数据数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-string"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-string" names="class_streampeer_method_get_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_string</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes=-1 <strong>)</strong></paragraph>
            <paragraph>从流中获取一个字节长度为 <literal>bytes</literal> 的 ASCII 字符串。如果 <literal>bytes</literal> 为负（默认），会按照 <reference internal="True" refid="class-streampeer-method-put-string"><inline classes="std std-ref">put_string</inline></reference> 的逆向操作从流中读取长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-u8"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-u8" names="class_streampeer_method_get_u8"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_u8</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取一个无符号字节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-u16"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-u16" names="class_streampeer_method_get_u16"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_u16</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取一个无符号 16 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-u32"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-u32" names="class_streampeer_method_get_u32"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_u32</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取一个无符号 32 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-u64"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-u64" names="class_streampeer_method_get_u64"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_u64</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从流中获取一个无符号 64 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-utf8-string"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-utf8-string" names="class_streampeer_method_get_utf8_string"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_utf8_string</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> bytes=-1 <strong>)</strong></paragraph>
            <paragraph>从流中获取一个字节长度为 <literal>bytes</literal> 的 UTF-8 字符串（将发送的字符串解码为 UTF-8）。如果 <literal>bytes</literal> 为负（默认），会按照 <reference internal="True" refid="class-streampeer-method-put-utf8-string"><inline classes="std std-ref">put_utf8_string</inline></reference> 的逆向操作从流中读取长度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-get-var"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-get-var" names="class_streampeer_method_get_var"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_var</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_objects=false <strong>)</strong></paragraph>
            <paragraph>从流中获取一个 Variant。如果 <literal>allow_objects</literal> 为 <literal>true</literal>，则会允许解码出对象。</paragraph>
            <paragraph>内部实现时，使用的解码机制与 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-bytes-to-var"><inline classes="std std-ref">@GlobalScope.bytes_to_var</inline></reference> 方法相同。</paragraph>
            <paragraph><strong>警告：</strong>反序列化的对象可能包含会被执行的代码。如果序列化的对象来自不可信的来源，请勿使用该选项，以免造成远程代码执行等安全威胁。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-8"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-8" names="class_streampeer_method_put_8">void <strong>put_8</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个有符号字节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-16"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-16" names="class_streampeer_method_put_16">void <strong>put_16</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个有符号 16 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-32"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-32" names="class_streampeer_method_put_32">void <strong>put_32</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个有符号 32 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-64"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-64" names="class_streampeer_method_put_64">void <strong>put_64</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个有符号 64 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-data"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-data" names="class_streampeer_method_put_data"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>put_data</strong> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
            <paragraph>通过连接发送块数据，数据完成发送前会阻塞。该函数返回 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-double"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-double" names="class_streampeer_method_put_double">void <strong>put_double</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个双精度浮点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-float"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-float" names="class_streampeer_method_put_float">void <strong>put_float</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个单精度浮点数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-partial-data"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-partial-data" names="class_streampeer_method_put_partial_data"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>put_partial_data</strong> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data <strong>)</strong></paragraph>
            <paragraph>通过连接发送数据。如果数据无法一次性发完，则仅会发送部分数据。该函数返回两个值，一个 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 错误码以及一个整数，表示实际发送的数据量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-string"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-string" names="class_streampeer_method_put_string">void <strong>put_string</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个以零结尾的 ASCII 字符串，会前置一个表示其大小的 32 位无符号整数。</paragraph>
            <paragraph><strong>注意：</strong>如果要放置 ASCII 字符串，而不前置大小，可以使用 <reference internal="True" refid="class-streampeer-method-put-data"><inline classes="std std-ref">put_data</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">put_data("Hello world".to_ascii_buffer())</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">PutData("Hello World".ToAsciiBuffer());</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-u8"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-u8" names="class_streampeer_method_put_u8">void <strong>put_u8</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个无符号字节。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-u16"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-u16" names="class_streampeer_method_put_u16">void <strong>put_u16</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个无符号 16 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-u32"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-u32" names="class_streampeer_method_put_u32">void <strong>put_u32</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个无符号 32 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-u64"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-u64" names="class_streampeer_method_put_u64">void <strong>put_u64</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个无符号 64 位值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-utf8-string"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-utf8-string" names="class_streampeer_method_put_utf8_string">void <strong>put_utf8_string</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>向流中放入一个以零结尾的 UTF-8 字符串，前置一个表示其大小的 32 位无符号整数。</paragraph>
            <paragraph><strong>注意：</strong>如果要放置 UTF-8 字符串，而不前置其大小，可以使用 <reference internal="True" refid="class-streampeer-method-put-data"><inline classes="std std-ref">put_data</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">put_data("Hello world".to_utf8_buffer())</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">PutData("Hello World".ToUtf8Buffer());</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-streampeer-method-put-var"></target>
            <paragraph classes="classref-method" ids="class-streampeer-method-put-var" names="class_streampeer_method_put_var">void <strong>put_var</strong> <strong>(</strong> <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> value, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> full_objects=false <strong>)</strong></paragraph>
            <paragraph>向流中放入一个 Variant。如果 <literal>full_objects</literal> 为 <literal>true</literal>，则会允许将对象编码（其中可能包含代码）。</paragraph>
            <paragraph>内部实现时，使用的编码机制与 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-var-to-bytes"><inline classes="std std-ref">@GlobalScope.var_to_bytes</inline></reference> 方法相同。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
