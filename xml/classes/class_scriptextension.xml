<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_scriptextension.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ScriptExtension.xml.</comment>
    <target refid="class-scriptextension"></target>
    <section ids="scriptextension class-scriptextension" names="scriptextension class_scriptextension">
        <title>ScriptExtension</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <container classes="contribute">
            <paragraph>目前没有这个类的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
        </container>
        <section classes="classref-reftable-group" ids="id1" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="184"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-can-instantiate"><inline classes="std std-ref">_can_instantiate</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-editor-can-reload-from-file"><inline classes="std std-ref">_editor_can_reload_from_file</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-base-script"><inline classes="std std-ref">_get_base_script</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-class-icon-path"><inline classes="std std-ref">_get_class_icon_path</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-constants"><inline classes="std std-ref">_get_constants</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-documentation"><inline classes="std std-ref">_get_documentation</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-global-name"><inline classes="std std-ref">_get_global_name</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-instance-base-type"><inline classes="std std-ref">_get_instance_base_type</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-language"><inline classes="std std-ref">_get_language</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-member-line"><inline classes="std std-ref">_get_member_line</inline></reference>(member: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-members"><inline classes="std std-ref">_get_members</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-method-info"><inline classes="std std-ref">_get_method_info</inline></reference>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-property-default-value"><inline classes="std std-ref">_get_property_default_value</inline></reference>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-rpc-config"><inline classes="std std-ref">_get_rpc_config</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-script-method-argument-count"><inline classes="std std-ref">_get_script_method_argument_count</inline></reference>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-script-method-list"><inline classes="std std-ref">_get_script_method_list</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-script-property-list"><inline classes="std std-ref">_get_script_property_list</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-script-signal-list"><inline classes="std std-ref">_get_script_signal_list</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-get-source-code"><inline classes="std std-ref">_get_source_code</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-has-method"><inline classes="std std-ref">_has_method</inline></reference>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-has-property-default-value"><inline classes="std std-ref">_has_property_default_value</inline></reference>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-has-script-signal"><inline classes="std std-ref">_has_script_signal</inline></reference>(signal: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-has-source-code"><inline classes="std std-ref">_has_source_code</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-has-static-method"><inline classes="std std-ref">_has_static_method</inline></reference>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-inherits-script"><inline classes="std std-ref">_inherits_script</inline></reference>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>void*</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-instance-create"><inline classes="std std-ref">_instance_create</inline></reference>(for_object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-instance-has"><inline classes="std std-ref">_instance_has</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-is-abstract"><inline classes="std std-ref">_is_abstract</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-is-placeholder-fallback-enabled"><inline classes="std std-ref">_is_placeholder_fallback_enabled</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-is-tool"><inline classes="std std-ref">_is_tool</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-is-valid"><inline classes="std std-ref">_is_valid</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-placeholder-erased"><inline classes="std std-ref">_placeholder_erased</inline></reference>(placeholder: <literal>void*</literal>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>void*</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-placeholder-instance-create"><inline classes="std std-ref">_placeholder_instance_create</inline></reference>(for_object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-reload"><inline classes="std std-ref">_reload</inline></reference>(keep_state: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-set-source-code"><inline classes="std std-ref">_set_source_code</inline></reference>(code: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-scriptextension-private-method-update-exports"><inline classes="std std-ref">_update_exports</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id2" names="方法说明">
            <title>方法说明</title>
            <target refid="class-scriptextension-private-method-can-instantiate"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-can-instantiate" names="class_scriptextension_private_method__can_instantiate"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_can_instantiate</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-can-instantiate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-editor-can-reload-from-file"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-editor-can-reload-from-file" names="class_scriptextension_private_method__editor_can_reload_from_file"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_editor_can_reload_from_file</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-editor-can-reload-from-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-base-script"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-base-script" names="class_scriptextension_private_method__get_base_script"><reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference> <strong>_get_base_script</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-base-script"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-class-icon-path"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-class-icon-path" names="class_scriptextension_private_method__get_class_icon_path"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_class_icon_path</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-class-icon-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-constants"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-constants" names="class_scriptextension_private_method__get_constants"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_constants</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-constants"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-documentation"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-documentation" names="class_scriptextension_private_method__get_documentation"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>_get_documentation</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-documentation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-global-name"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-global-name" names="class_scriptextension_private_method__get_global_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>_get_global_name</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-global-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-instance-base-type"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-instance-base-type" names="class_scriptextension_private_method__get_instance_base_type"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>_get_instance_base_type</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-instance-base-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-language"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-language" names="class_scriptextension_private_method__get_language"><reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference> <strong>_get_language</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-member-line"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-member-line" names="class_scriptextension_private_method__get_member_line"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_member_line</strong>(member: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-member-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-members"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-members" names="class_scriptextension_private_method__get_members"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>] <strong>_get_members</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-members"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-method-info"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-method-info" names="class_scriptextension_private_method__get_method_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>_get_method_info</strong>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-method-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-property-default-value"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-property-default-value" names="class_scriptextension_private_method__get_property_default_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_property_default_value</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-property-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-rpc-config"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-rpc-config" names="class_scriptextension_private_method__get_rpc_config"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_rpc_config</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-rpc-config"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-script-method-argument-count"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-script-method-argument-count" names="class_scriptextension_private_method__get_script_method_argument_count"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_get_script_method_argument_count</strong>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-script-method-argument-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Return the expected argument count for the given <literal>method</literal>, or <literal>null</literal> if it can't be determined (which will then fall back to the default behavior).</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-script-method-list"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-script-method-list" names="class_scriptextension_private_method__get_script_method_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>_get_script_method_list</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-script-method-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-script-property-list"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-script-property-list" names="class_scriptextension_private_method__get_script_property_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>_get_script_property_list</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-script-property-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-script-signal-list"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-script-signal-list" names="class_scriptextension_private_method__get_script_signal_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>_get_script_signal_list</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-script-signal-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-get-source-code"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-get-source-code" names="class_scriptextension_private_method__get_source_code"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_source_code</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-get-source-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-has-method"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-has-method" names="class_scriptextension_private_method__has_method"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_method</strong>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-has-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-has-property-default-value"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-has-property-default-value" names="class_scriptextension_private_method__has_property_default_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_property_default_value</strong>(property: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-has-property-default-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-has-script-signal"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-has-script-signal" names="class_scriptextension_private_method__has_script_signal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_script_signal</strong>(signal: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-has-script-signal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-has-source-code"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-has-source-code" names="class_scriptextension_private_method__has_source_code"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_source_code</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-has-source-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-has-static-method"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-has-static-method" names="class_scriptextension_private_method__has_static_method"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_static_method</strong>(method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-has-static-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-inherits-script"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-inherits-script" names="class_scriptextension_private_method__inherits_script"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_inherits_script</strong>(script: <reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-inherits-script"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-instance-create"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-instance-create" names="class_scriptextension_private_method__instance_create"><literal>void*</literal> <strong>_instance_create</strong>(for_object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-instance-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-instance-has"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-instance-has" names="class_scriptextension_private_method__instance_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_instance_has</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-instance-has"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-is-abstract"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-is-abstract" names="class_scriptextension_private_method__is_abstract"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_abstract</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-is-abstract"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果脚本是抽象脚本，则返回 <literal>true</literal>。抽象脚本没有构造函数，无法被实例化。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-is-placeholder-fallback-enabled"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-is-placeholder-fallback-enabled" names="class_scriptextension_private_method__is_placeholder_fallback_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_placeholder_fallback_enabled</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-is-placeholder-fallback-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-is-tool"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-is-tool" names="class_scriptextension_private_method__is_tool"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_tool</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-is-tool"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-is-valid"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-is-valid" names="class_scriptextension_private_method__is_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_valid</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-is-valid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-placeholder-erased"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-placeholder-erased" names="class_scriptextension_private_method__placeholder_erased"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_placeholder_erased</strong>(placeholder: <literal>void*</literal>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-placeholder-erased"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-placeholder-instance-create"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-placeholder-instance-create" names="class_scriptextension_private_method__placeholder_instance_create"><literal>void*</literal> <strong>_placeholder_instance_create</strong>(for_object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-placeholder-instance-create"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-reload"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-reload" names="class_scriptextension_private_method__reload"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_reload</strong>(keep_state: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-reload"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-set-source-code"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-set-source-code" names="class_scriptextension_private_method__set_source_code"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_set_source_code</strong>(code: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-set-source-code"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-scriptextension-private-method-update-exports"></target>
            <paragraph classes="classref-method" ids="class-scriptextension-private-method-update-exports" names="class_scriptextension_private_method__update_exports"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_update_exports</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-scriptextension-private-method-update-exports"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个方法的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
