<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_rdpipelinecolorblendstateattachment.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/RDPipelineColorBlendStateAttachment.xml.</comment>
    <target refid="class-rdpipelinecolorblendstateattachment"></target>
    <section ids="rdpipelinecolorblendstateattachment class-rdpipelinecolorblendstateattachment" names="rdpipelinecolorblendstateattachment class_rdpipelinecolorblendstateattachment">
        <title>RDPipelineColorBlendStateAttachment</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>管线颜色混合状态附件（由 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 使用）。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>控制使用 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> 时如何在来源和目标片段之间进行混合。</paragraph>
            <paragraph>以下是常见面向用户的混合模式在 Godot 的 2D 渲染器中的实现方法，仅供参考：</paragraph>
            <paragraph><strong>混合：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</literal_block>
            <paragraph><strong>加：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE</literal_block>
            <paragraph><strong>减：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
attachment.color_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE</literal_block>
            <paragraph><strong>乘：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_DST_COLOR
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_DST_ALPHA
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO</literal_block>
            <paragraph><strong>预乘 Alpha：</strong></paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var attachment = RDPipelineColorBlendStateAttachment.new()
attachment.enable_blend = true
attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</literal_block>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="60"></colspec>
                    <colspec colwidth="106"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-alpha-blend-op"><inline classes="std std-ref">alpha_blend_op</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-color-blend-op"><inline classes="std std-ref">color_blend_op</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-dst-alpha-blend-factor"><inline classes="std std-ref">dst_alpha_blend_factor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-dst-color-blend-factor"><inline classes="std std-ref">dst_color_blend_factor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-enable-blend"><inline classes="std std-ref">enable_blend</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-src-alpha-blend-factor"><inline classes="std std-ref">src_alpha_blend_factor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-src-color-blend-factor"><inline classes="std std-ref">src_color_blend_factor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-a"><inline classes="std std-ref">write_a</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-b"><inline classes="std std-ref">write_b</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-g"><inline classes="std std-ref">write_g</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-r"><inline classes="std std-ref">write_r</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="6"></colspec>
                    <colspec colwidth="92"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-rdpipelinecolorblendstateattachment-method-set-as-mix"><inline classes="std std-ref">set_as_mix</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-rdpipelinecolorblendstateattachment-property-alpha-blend-op"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-alpha-blend-op" names="class_rdpipelinecolorblendstateattachment_property_alpha_blend_op"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>alpha_blend_op</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_alpha_blend_op</strong> <strong>(</strong> <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>get_alpha_blend_op</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Alpha 通道使用的混合模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-color-blend-op"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-color-blend-op" names="class_rdpipelinecolorblendstateattachment_property_color_blend_op"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>color_blend_op</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_color_blend_op</strong> <strong>(</strong> <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>get_color_blend_op</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>红、绿、蓝通道使用的混合模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-dst-alpha-blend-factor"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-dst-alpha-blend-factor" names="class_rdpipelinecolorblendstateattachment_property_dst_alpha_blend_factor"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>dst_alpha_blend_factor</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_dst_alpha_blend_factor</strong> <strong>(</strong> <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>get_dst_alpha_blend_factor</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制如何根据目标片段确定 Alpha 通道的混合系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-dst-color-blend-factor"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-dst-color-blend-factor" names="class_rdpipelinecolorblendstateattachment_property_dst_color_blend_factor"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>dst_color_blend_factor</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_dst_color_blend_factor</strong> <strong>(</strong> <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>get_dst_color_blend_factor</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制如何根据目标片段确定颜色通道的混合系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-enable-blend"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-enable-blend" names="class_rdpipelinecolorblendstateattachment_property_enable_blend"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enable_blend</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_enable_blend</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_enable_blend</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会根据 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-src-color-blend-factor"><inline classes="std std-ref">src_color_blend_factor</inline></reference>、<reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-dst-color-blend-factor"><inline classes="std std-ref">dst_color_blend_factor</inline></reference>、<reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-src-alpha-blend-factor"><inline classes="std std-ref">src_alpha_blend_factor</inline></reference> 和 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-dst-alpha-blend-factor"><inline classes="std std-ref">dst_alpha_blend_factor</inline></reference> 中定义的系数对来源和目标进行混合。同时也会考虑 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-color-blend-op"><inline classes="std std-ref">color_blend_op</inline></reference> 和 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-alpha-blend-op"><inline classes="std std-ref">alpha_blend_op</inline></reference> 混合模式，<reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-r"><inline classes="std std-ref">write_r</inline></reference>、<reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-g"><inline classes="std std-ref">write_g</inline></reference>、<reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-b"><inline classes="std std-ref">write_b</inline></reference> 和 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-write-a"><inline classes="std std-ref">write_a</inline></reference> 则控制的是输出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-src-alpha-blend-factor"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-src-alpha-blend-factor" names="class_rdpipelinecolorblendstateattachment_property_src_alpha_blend_factor"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>src_alpha_blend_factor</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_src_alpha_blend_factor</strong> <strong>(</strong> <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>get_src_alpha_blend_factor</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制如何根据来源片段确定 Alpha 通道的混合系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-src-color-blend-factor"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-src-color-blend-factor" names="class_rdpipelinecolorblendstateattachment_property_src_color_blend_factor"><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>src_color_blend_factor</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_src_color_blend_factor</strong> <strong>(</strong> <reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_renderingdevice#enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>get_src_color_blend_factor</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制如何根据来源片段确定颜色通道的混合系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-write-a"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-write-a" names="class_rdpipelinecolorblendstateattachment_property_write_a"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>write_a</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_write_a</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_write_a</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则将新的 Alpha 通道写入最终结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-write-b"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-write-b" names="class_rdpipelinecolorblendstateattachment_property_write_b"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>write_b</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_write_b</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_write_b</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则将新的蓝色通道写入最终结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-write-g"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-write-g" names="class_rdpipelinecolorblendstateattachment_property_write_g"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>write_g</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_write_g</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_write_g</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则将新的绿色通道写入最终结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-rdpipelinecolorblendstateattachment-property-write-r"></target>
            <paragraph classes="classref-property" ids="class-rdpipelinecolorblendstateattachment-property-write-r" names="class_rdpipelinecolorblendstateattachment_property_write_r"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>write_r</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_write_r</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_write_r</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则将新的红色通道写入最终结果。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-rdpipelinecolorblendstateattachment-method-set-as-mix"></target>
            <paragraph classes="classref-method" ids="class-rdpipelinecolorblendstateattachment-method-set-as-mix" names="class_rdpipelinecolorblendstateattachment_method_set_as_mix">void <strong>set_as_mix</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>使用普通（非预乘）Alpha 进行标准混合混合（mix blending）的简便方法。这个方法会将 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-enable-blend"><inline classes="std std-ref">enable_blend</inline></reference> 设为 <literal>true</literal>，将 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-src-color-blend-factor"><inline classes="std std-ref">src_color_blend_factor</inline></reference> 设为 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice-constant-blend-factor-src-alpha"><inline classes="std std-ref">RenderingDevice.BLEND_FACTOR_SRC_ALPHA</inline></reference>，将 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-dst-color-blend-factor"><inline classes="std std-ref">dst_color_blend_factor</inline></reference> 设为 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice-constant-blend-factor-one-minus-src-alpha"><inline classes="std std-ref">RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</inline></reference>，将 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-src-alpha-blend-factor"><inline classes="std std-ref">src_alpha_blend_factor</inline></reference> 设为 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice-constant-blend-factor-src-alpha"><inline classes="std std-ref">RenderingDevice.BLEND_FACTOR_SRC_ALPHA</inline></reference>，将 <reference internal="True" refid="class-rdpipelinecolorblendstateattachment-property-dst-alpha-blend-factor"><inline classes="std std-ref">dst_alpha_blend_factor</inline></reference> 设为 <reference internal="True" refuri="class_renderingdevice#class-renderingdevice-constant-blend-factor-one-minus-src-alpha"><inline classes="std std-ref">RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
