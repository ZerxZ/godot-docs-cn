<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_animationmixer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/AnimationMixer.xml.</comment>
    <target refid="class-animationmixer"></target>
    <section ids="animationmixer class-animationmixer" names="animationmixer class_animationmixer">
        <title>AnimationMixer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference>, <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference></paragraph>
        <paragraph><reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 和 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 和 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 的基类，用于管理动画列表。同时还提供了用于播放和混合的常用属性和方法。</paragraph>
            <paragraph>在扩展后的类中实例化播放信息数据后，就会由 <strong>AnimationMixer</strong> 负责处理混合。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="89"></colspec>
                    <colspec colwidth="85"></colspec>
                    <colspec colwidth="20"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-active"><inline classes="std std-ref">active</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-audio-max-polyphony"><inline classes="std std-ref">audio_max_polyphony</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>32</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-callback-mode-discrete"><inline classes="std std-ref">callback_mode_discrete</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationmixer-animationcallbackmodemethod"><inline classes="std std-ref">AnimationCallbackModeMethod</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-callback-mode-method"><inline classes="std std-ref">callback_mode_method</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">AnimationCallbackModeProcess</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-callback-mode-process"><inline classes="std std-ref">callback_mode_process</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-deterministic"><inline classes="std std-ref">deterministic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-reset-on-save"><inline classes="std std-ref">reset_on_save</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-property-root-node"><inline classes="std std-ref">root_node</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("..")</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="309"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-private-method-post-process-key-value"><inline classes="std std-ref">_post_process_key_value</inline></reference>(animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>, track: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, object_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, object_sub_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-add-animation-library"><inline classes="std std-ref">add_animation_library</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, library: <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-advance"><inline classes="std std-ref">advance</inline></reference>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-capture"><inline classes="std std-ref">capture</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, trans_type: <reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> = 0, ease_type: <reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-clear-caches"><inline classes="std std-ref">clear_caches</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-find-animation"><inline classes="std std-ref">find_animation</inline></reference>(animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-find-animation-library"><inline classes="std std-ref">find_animation_library</inline></reference>(animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-animation"><inline classes="std std-ref">get_animation</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-animation-library"><inline classes="std std-ref">get_animation_library</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-animation-library-list"><inline classes="std std-ref">get_animation_library_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-animation-list"><inline classes="std std-ref">get_animation_list</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-root-motion-position"><inline classes="std std-ref">get_root_motion_position</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-root-motion-position-accumulator"><inline classes="std std-ref">get_root_motion_position_accumulator</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-root-motion-rotation"><inline classes="std std-ref">get_root_motion_rotation</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-root-motion-rotation-accumulator"><inline classes="std std-ref">get_root_motion_rotation_accumulator</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-root-motion-scale"><inline classes="std std-ref">get_root_motion_scale</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-get-root-motion-scale-accumulator"><inline classes="std std-ref">get_root_motion_scale_accumulator</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-has-animation"><inline classes="std std-ref">has_animation</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-has-animation-library"><inline classes="std std-ref">has_animation_library</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-remove-animation-library"><inline classes="std std-ref">remove_animation_library</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-animationmixer-method-rename-animation-library"><inline classes="std std-ref">rename_animation_library</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, newname: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-animationmixer-signal-animation-finished"></target>
            <paragraph classes="classref-signal" ids="class-animationmixer-signal-animation-finished" names="class_animationmixer_signal_animation_finished"><strong>animation_finished</strong>(anim_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationmixer-signal-animation-finished"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>动画播放结束时通知。</paragraph>
            <paragraph><strong>注意：</strong>如果动画正在循环播放，则不会发出此信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-signal-animation-libraries-updated"></target>
            <paragraph classes="classref-signal" ids="class-animationmixer-signal-animation-libraries-updated" names="class_animationmixer_signal_animation_libraries_updated"><strong>animation_libraries_updated</strong>() <reference internal="True" refid="class-animationmixer-signal-animation-libraries-updated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当动画库发生更改时发出通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-signal-animation-list-changed"></target>
            <paragraph classes="classref-signal" ids="class-animationmixer-signal-animation-list-changed" names="class_animationmixer_signal_animation_list_changed"><strong>animation_list_changed</strong>() <reference internal="True" refid="class-animationmixer-signal-animation-list-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当动画列表发生更改时发出通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-signal-animation-started"></target>
            <paragraph classes="classref-signal" ids="class-animationmixer-signal-animation-started" names="class_animationmixer_signal_animation_started"><strong>animation_started</strong>(anim_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationmixer-signal-animation-started"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当动画开始播放时发出通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-signal-caches-cleared"></target>
            <paragraph classes="classref-signal" ids="class-animationmixer-signal-caches-cleared" names="class_animationmixer_signal_caches_cleared"><strong>caches_cleared</strong>() <reference internal="True" refid="class-animationmixer-signal-caches-cleared"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当缓存被清除时通知，可以是自动清除，也可以是通过 <reference internal="True" refid="class-animationmixer-method-clear-caches"><inline classes="std std-ref">clear_caches</inline></reference> 手动清除。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-signal-mixer-applied"></target>
            <paragraph classes="classref-signal" ids="class-animationmixer-signal-mixer-applied" names="class_animationmixer_signal_mixer_applied"><strong>mixer_applied</strong>() <reference internal="True" refid="class-animationmixer-signal-mixer-applied"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当相关的混合结果应用于目标对象时发出通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-signal-mixer-updated"></target>
            <paragraph classes="classref-signal" ids="class-animationmixer-signal-mixer-updated" names="class_animationmixer_signal_mixer_updated"><strong>mixer_updated</strong>() <reference internal="True" refid="class-animationmixer-signal-mixer-updated"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当处理相关属性发生更改时发出通知。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-animationmixer-animationcallbackmodeprocess"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationmixer-animationcallbackmodeprocess" names="enum_animationmixer_animationcallbackmodeprocess">enum <strong>AnimationCallbackModeProcess</strong>: <reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-process-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-process-physics" names="class_animationmixer_constant_animation_callback_mode_process_physics"><reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">AnimationCallbackModeProcess</inline></reference> <strong>ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS</strong> = <literal>0</literal></paragraph>
            <paragraph>在物理帧中处理动画（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-physics-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS</inline></reference>）。尤其适用于对物理体进行动画处理。</paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-process-idle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-process-idle" names="class_animationmixer_constant_animation_callback_mode_process_idle"><reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">AnimationCallbackModeProcess</inline></reference> <strong>ANIMATION_CALLBACK_MODE_PROCESS_IDLE</strong> = <literal>1</literal></paragraph>
            <paragraph>在处理帧中处理动画（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PROCESS</inline></reference>）。</paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-process-manual"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-process-manual" names="class_animationmixer_constant_animation_callback_mode_process_manual"><reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">AnimationCallbackModeProcess</inline></reference> <strong>ANIMATION_CALLBACK_MODE_PROCESS_MANUAL</strong> = <literal>2</literal></paragraph>
            <paragraph>不处理动画。使用<reference internal="True" refid="class-animationmixer-method-advance"><inline classes="std std-ref">advance</inline></reference>手动处理动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animationmixer-animationcallbackmodemethod"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationmixer-animationcallbackmodemethod" names="enum_animationmixer_animationcallbackmodemethod">enum <strong>AnimationCallbackModeMethod</strong>: <reference internal="True" refid="enum-animationmixer-animationcallbackmodemethod"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-method-deferred"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-method-deferred" names="class_animationmixer_constant_animation_callback_mode_method_deferred"><reference internal="True" refid="enum-animationmixer-animationcallbackmodemethod"><inline classes="std std-ref">AnimationCallbackModeMethod</inline></reference> <strong>ANIMATION_CALLBACK_MODE_METHOD_DEFERRED</strong> = <literal>0</literal></paragraph>
            <paragraph>在动画过程中批量调用方法，然后在处理完事件后再进行调用。这样就避免了在播放过程中涉及删除节点或修改AnimationPlayer的错误。</paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-method-immediate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-method-immediate" names="class_animationmixer_constant_animation_callback_mode_method_immediate"><reference internal="True" refid="enum-animationmixer-animationcallbackmodemethod"><inline classes="std std-ref">AnimationCallbackModeMethod</inline></reference> <strong>ANIMATION_CALLBACK_MODE_METHOD_IMMEDIATE</strong> = <literal>1</literal></paragraph>
            <paragraph>在动画中达到时立即进行方法调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-animationmixer-animationcallbackmodediscrete"></target>
            <paragraph classes="classref-enumeration" ids="enum-animationmixer-animationcallbackmodediscrete" names="enum_animationmixer_animationcallbackmodediscrete">enum <strong>AnimationCallbackModeDiscrete</strong>: <reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-discrete-dominant"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-discrete-dominant" names="class_animationmixer_constant_animation_callback_mode_discrete_dominant"><reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference> <strong>ANIMATION_CALLBACK_MODE_DISCRETE_DOMINANT</strong> = <literal>0</literal></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_animation#class-animation-constant-update-continuous"><inline classes="std std-ref">Animation.UPDATE_CONTINUOUS</inline></reference> 或 <reference internal="True" refuri="class_animation#class-animation-constant-update-capture"><inline classes="std std-ref">Animation.UPDATE_CAPTURE</inline></reference> 轨道值与 <reference internal="True" refuri="class_animation#class-animation-constant-update-discrete"><inline classes="std std-ref">Animation.UPDATE_DISCRETE</inline></reference> 轨道值混合时，<reference internal="True" refuri="class_animation#class-animation-constant-update-discrete"><inline classes="std std-ref">Animation.UPDATE_DISCRETE</inline></reference> 轨道值优先。</paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-discrete-recessive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-discrete-recessive" names="class_animationmixer_constant_animation_callback_mode_discrete_recessive"><reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference> <strong>ANIMATION_CALLBACK_MODE_DISCRETE_RECESSIVE</strong> = <literal>1</literal></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_animation#class-animation-constant-update-continuous"><inline classes="std std-ref">Animation.UPDATE_CONTINUOUS</inline></reference> 或 <reference internal="True" refuri="class_animation#class-animation-constant-update-capture"><inline classes="std std-ref">Animation.UPDATE_CAPTURE</inline></reference> 轨道值与 <reference internal="True" refuri="class_animation#class-animation-constant-update-discrete"><inline classes="std std-ref">Animation.UPDATE_DISCRETE</inline></reference> 轨道值混合时，<reference internal="True" refuri="class_animation#class-animation-constant-update-continuous"><inline classes="std std-ref">Animation.UPDATE_CONTINUOUS</inline></reference> 或 <reference internal="True" refuri="class_animation#class-animation-constant-update-capture"><inline classes="std std-ref">Animation.UPDATE_CAPTURE</inline></reference> 轨道值优先。这是 <reference internal="True" refuri="class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 的默认行为。</paragraph>
            <target refid="class-animationmixer-constant-animation-callback-mode-discrete-force-continuous"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-animationmixer-constant-animation-callback-mode-discrete-force-continuous" names="class_animationmixer_constant_animation_callback_mode_discrete_force_continuous"><reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference> <strong>ANIMATION_CALLBACK_MODE_DISCRETE_FORCE_CONTINUOUS</strong> = <literal>2</literal></paragraph>
            <paragraph>在和 <reference internal="True" refuri="class_animation#class-animation-constant-interpolation-nearest"><inline classes="std std-ref">Animation.INTERPOLATION_NEAREST</inline></reference> 混合时，始终将 <reference internal="True" refuri="class_animation#class-animation-constant-update-discrete"><inline classes="std std-ref">Animation.UPDATE_DISCRETE</inline></reference> 轨道值视为 <reference internal="True" refuri="class_animation#class-animation-constant-update-continuous"><inline classes="std std-ref">Animation.UPDATE_CONTINUOUS</inline></reference>。这是 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 的默认行为。</paragraph>
            <paragraph>如果值轨道具有非数字类型键值，则在和 <reference internal="True" refuri="class_animation#class-animation-constant-update-discrete"><inline classes="std std-ref">Animation.UPDATE_DISCRETE</inline></reference> 混合时，会在内部转换为使用 <reference internal="True" refid="class-animationmixer-constant-animation-callback-mode-discrete-recessive"><inline classes="std std-ref">ANIMATION_CALLBACK_MODE_DISCRETE_RECESSIVE</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-animationmixer-property-active"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-active" names="class_animationmixer_property_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>active</strong> = <literal>true</literal> <reference internal="True" refid="class-animationmixer-property-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_active</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_active</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果 <literal>true</literal> 时，<strong>AnimationMixer</strong> 将执行逻辑处理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-audio-max-polyphony"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-audio-max-polyphony" names="class_animationmixer_property_audio_max_polyphony"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>audio_max_polyphony</strong> = <literal>32</literal> <reference internal="True" refid="class-animationmixer-property-audio-max-polyphony"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_audio_max_polyphony</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_audio_max_polyphony</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>每个指定的 AudioStreamPlayer 可能同时发出的声音的数量。</paragraph>
            <paragraph>例如，如果该值为 <literal>32</literal> 并且动画有两个音轨，则分配的两个 <reference internal="True" refuri="class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference> 可以同时播放最多 <literal>32</literal> 个声音。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-callback-mode-discrete"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-callback-mode-discrete" names="class_animationmixer_property_callback_mode_discrete"><reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference> <strong>callback_mode_discrete</strong> = <literal>1</literal> <reference internal="True" refid="class-animationmixer-property-callback-mode-discrete"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_callback_mode_discrete</strong>(value: <reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference> <strong>get_callback_mode_discrete</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>一般而言，可以将轨道设置为 <reference internal="True" refuri="class_animation#class-animation-constant-update-discrete"><inline classes="std std-ref">Animation.UPDATE_DISCRETE</inline></reference> 降低更新频率，通常在最近邻插值时使用。</paragraph>
            <paragraph>但在使用 <reference internal="True" refuri="class_animation#class-animation-constant-update-continuous"><inline classes="std std-ref">Animation.UPDATE_CONTINUOUS</inline></reference> 进行混合时需要考虑不同的结果，可以用 <reference internal="True" refid="class-animationmixer-property-callback-mode-discrete"><inline classes="std std-ref">callback_mode_discrete</inline></reference> 来显式指定。另见 <reference internal="True" refid="enum-animationmixer-animationcallbackmodediscrete"><inline classes="std std-ref">AnimationCallbackModeDiscrete</inline></reference>。</paragraph>
            <paragraph>为了在混合时得到更好的结果，建议将其设置为 <reference internal="True" refid="class-animationmixer-constant-animation-callback-mode-discrete-force-continuous"><inline classes="std std-ref">ANIMATION_CALLBACK_MODE_DISCRETE_FORCE_CONTINUOUS</inline></reference>，在混合时每一帧都更新。其他值主要用于兼容，在不需要混合时没有问题，但需要混合时则可能产生问题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-callback-mode-method"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-callback-mode-method" names="class_animationmixer_property_callback_mode_method"><reference internal="True" refid="enum-animationmixer-animationcallbackmodemethod"><inline classes="std std-ref">AnimationCallbackModeMethod</inline></reference> <strong>callback_mode_method</strong> = <literal>0</literal> <reference internal="True" refid="class-animationmixer-property-callback-mode-method"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_callback_mode_method</strong>(value: <reference internal="True" refid="enum-animationmixer-animationcallbackmodemethod"><inline classes="std std-ref">AnimationCallbackModeMethod</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-animationmixer-animationcallbackmodemethod"><inline classes="std std-ref">AnimationCallbackModeMethod</inline></reference> <strong>get_callback_mode_method</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于“方法调用”轨道的调用模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-callback-mode-process"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-callback-mode-process" names="class_animationmixer_property_callback_mode_process"><reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">AnimationCallbackModeProcess</inline></reference> <strong>callback_mode_process</strong> = <literal>1</literal> <reference internal="True" refid="class-animationmixer-property-callback-mode-process"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_callback_mode_process</strong>(value: <reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">AnimationCallbackModeProcess</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-animationmixer-animationcallbackmodeprocess"><inline classes="std std-ref">AnimationCallbackModeProcess</inline></reference> <strong>get_callback_mode_process</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>更新动画的过程通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-deterministic"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-deterministic" names="class_animationmixer_property_deterministic"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>deterministic</strong> = <literal>false</literal> <reference internal="True" refid="class-animationmixer-property-deterministic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_deterministic</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_deterministic</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则混合使用确定性算法。总权重不进行归一化，在初始值的基础上进行累加（初始值为 <literal>0</literal>，表示可能存在的 <literal>"RESET"</literal> 动画）。</paragraph>
            <paragraph>这意味着如果混合总权重为 <literal>0.0</literal>，则结果等于 <literal>"RESET"</literal> 动画。</paragraph>
            <paragraph>如果混合动画之间的轨道数量不同，则缺少轨道的动画将被视为具有初始值。</paragraph>
            <paragraph>如果为 <literal>false</literal>，则混合不会使用确定性算法。总权重将归一化且始终为 <literal>1.0</literal>。如果混合动画之间的轨道数量不同，则不会对缺少轨道的动画执行任何操作。</paragraph>
            <paragraph><strong>注意：</strong>在 <reference internal="True" refuri="class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 中，与 <reference internal="True" refuri="class_animationnodeadd2#class-animationnodeadd2"><inline classes="std std-ref">AnimationNodeAdd2</inline></reference> 、 <reference internal="True" refuri="class_animationnodeadd3#class-animationnodeadd3"><inline classes="std std-ref">AnimationNodeAdd3</inline></reference> 、 <reference internal="True" refuri="class_animationnodesub2#class-animationnodesub2"><inline classes="std std-ref">AnimationNodeSub2</inline></reference> 或权重大于 <literal>1.0</literal> 混合可能产生意想不到的结果。</paragraph>
            <paragraph>例如，如果 <reference internal="True" refuri="class_animationnodeadd2#class-animationnodeadd2"><inline classes="std std-ref">AnimationNodeAdd2</inline></reference> 混合了两个取值为 <literal>1.0</literal> 的节点，则总权重为 <literal>2.0</literal>，但它将被归一化使总权重保持 <literal>1.0</literal>，且结果将等于取值为 <literal>0.5</literal> 的 <reference internal="True" refuri="class_animationnodeblend2#class-animationnodeblend2"><inline classes="std std-ref">AnimationNodeBlend2</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-reset-on-save"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-reset-on-save" names="class_animationmixer_property_reset_on_save"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>reset_on_save</strong> = <literal>true</literal> <reference internal="True" refid="class-animationmixer-property-reset-on-save"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_reset_on_save_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_reset_on_save_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>由编辑器使用。如果设置为 <literal>true</literal>，场景将被保存，并应用重置动画（带有键 <literal>"RESET"</literal> 的动画）的效果，就好像它已被定位到时间 0 一样，编辑器保留场景在保存之前的值。</paragraph>
            <paragraph>这使得在编辑器中预览和编辑动画更加方便，因为对场景的更改，只要在重置动画中被设置，就不会被保存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-root-motion-track"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-root-motion-track" names="class_animationmixer_property_root_motion_track"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>root_motion_track</strong> = <literal>NodePath("")</literal> <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_root_motion_track</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_root_motion_track</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The path to the Animation track used for root motion. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. The <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> uses the same format as <reference internal="True" refuri="class_animation#class-animation-method-track-set-path"><inline classes="std std-ref">Animation.track_set_path</inline></reference>, but note that a bone must be specified.</paragraph>
            <paragraph>If the track has type <reference internal="True" refuri="class_animation#class-animation-constant-type-position-3d"><inline classes="std std-ref">Animation.TYPE_POSITION_3D</inline></reference>, <reference internal="True" refuri="class_animation#class-animation-constant-type-rotation-3d"><inline classes="std std-ref">Animation.TYPE_ROTATION_3D</inline></reference>, or <reference internal="True" refuri="class_animation#class-animation-constant-type-scale-3d"><inline classes="std std-ref">Animation.TYPE_SCALE_3D</inline></reference> the transformation will be canceled visually, and the animation will appear to stay in place. See also <reference internal="True" refid="class-animationmixer-method-get-root-motion-position"><inline classes="std std-ref">get_root_motion_position</inline></reference>, <reference internal="True" refid="class-animationmixer-method-get-root-motion-rotation"><inline classes="std std-ref">get_root_motion_rotation</inline></reference>, <reference internal="True" refid="class-animationmixer-method-get-root-motion-scale"><inline classes="std std-ref">get_root_motion_scale</inline></reference>, and <reference internal="True" refuri="class_rootmotionview#class-rootmotionview"><inline classes="std std-ref">RootMotionView</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-property-root-node"></target>
            <paragraph classes="classref-property" ids="class-animationmixer-property-root-node" names="class_animationmixer_property_root_node"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>root_node</strong> = <literal>NodePath("..")</literal> <reference internal="True" refid="class-animationmixer-property-root-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_root_node</strong>(value: <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_root_node</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>节点路径引用将从其出发的节点。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-animationmixer-private-method-post-process-key-value"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-private-method-post-process-key-value" names="class_animationmixer_private_method__post_process_key_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>_post_process_key_value</strong>(animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>, track: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, object_id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, object_sub_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-private-method-post-process-key-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>虚函数，用于播放期间在获取关键帧之后的处理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-add-animation-library"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-add-animation-library" names="class_animationmixer_method_add_animation_library"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>add_animation_library</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, library: <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference>) <reference internal="True" refid="class-animationmixer-method-add-animation-library"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Adds <literal>library</literal> to the animation player, under the key <literal>name</literal>.</paragraph>
            <paragraph>AnimationMixer has a global library by default with an empty string as key. For adding an animation to the global library:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var global_library = mixer.get_animation_library("")
global_library.add_animation("animation_name", animation_resource)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-advance"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-advance" names="class_animationmixer_method_advance"><abbreviation explanation="无返回值。">void</abbreviation> <strong>advance</strong>(delta: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-animationmixer-method-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>手动将动画前进指定的时间（单位为秒）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-capture"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-capture" names="class_animationmixer_method_capture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>capture</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, duration: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, trans_type: <reference internal="True" refuri="class_tween#enum-tween-transitiontype"><inline classes="std std-ref">TransitionType</inline></reference> = 0, ease_type: <reference internal="True" refuri="class_tween#enum-tween-easetype"><inline classes="std std-ref">EaseType</inline></reference> = 0) <reference internal="True" refid="class-animationmixer-method-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>name</literal> 指定的动画轨道具有 <reference internal="True" refuri="class_animation#class-animation-constant-update-capture"><inline classes="std std-ref">Animation.UPDATE_CAPTURE</inline></reference> 选项，则会将轨道路径表示的对象当前值存储下来作为缓存。如果已存在捕获缓存，则会丢弃旧缓存。</paragraph>
            <paragraph>在此之后，就会在播放过程中进行时长为 <literal>duration</literal> 的与当前动画混合结果的插值，类似淡入淡出。</paragraph>
            <paragraph>可以使用 <literal>trans_type</literal> 来指定插值曲线。为了达到最佳效果，如果轨道的第一个关键帧非零或键值不会改变，则最好使用 <reference internal="True" refuri="class_tween#class-tween-constant-trans-linear"><inline classes="std std-ref">Tween.TRANS_LINEAR</inline></reference>；如果键值有线性变化，则最好使用 <reference internal="True" refuri="class_tween#class-tween-constant-trans-quad"><inline classes="std std-ref">Tween.TRANS_QUAD</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-clear-caches"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-clear-caches" names="class_animationmixer_method_clear_caches"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_caches</strong>() <reference internal="True" refid="class-animationmixer-method-clear-caches"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>AnimationMixer</strong> 会缓存动画节点。如果一个节点消失，它可能不会注意到；<reference internal="True" refid="class-animationmixer-method-clear-caches"><inline classes="std std-ref">clear_caches</inline></reference> 能够强制它再次更新缓存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-find-animation"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-find-animation" names="class_animationmixer_method_find_animation"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>find_animation</strong>(animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-find-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>animation</literal> 的键；如果未找到，则返回一个空的 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-find-animation-library"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-find-animation-library" names="class_animationmixer_method_find_animation_library"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>find_animation_library</strong>(animation: <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-find-animation-library"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含 <literal>animation</literal> 的 <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference> 的键；如果找不到，则返回一个空的 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-animation"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-animation" names="class_animationmixer_method_get_animation"><reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> <strong>get_animation</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回带有键 <literal>name</literal> 的 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>。如果动画不存在，则返回 <literal>null</literal> 并记录错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-animation-library"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-animation-library" names="class_animationmixer_method_get_animation_library"><reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference> <strong>get_animation_library</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-animation-library"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回第一个键为 <literal>name</literal> 的 <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference>，如果没有找到则返回 <literal>null</literal>。</paragraph>
            <paragraph>要获得 <strong>AnimationMixer</strong> 的全局动画库，请使用 <literal>get_animation_library("")</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-animation-library-list"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-animation-library-list" names="class_animationmixer_method_get_animation_library_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>] <strong>get_animation_library_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-animation-library-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回存储库的键名列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-animation-list"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-animation-list" names="class_animationmixer_method_get_animation_list"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_animation_list</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-animation-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回存储的动画键列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-root-motion-position"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-root-motion-position" names="class_animationmixer_method_get_root_motion_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_root_motion_position</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-root-motion-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将具有 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 的位置的运动增量，检索为一个可以在其他地方使用的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 不是 <reference internal="True" refuri="class_animation#class-animation-constant-type-position-3d"><inline classes="std std-ref">Animation.TYPE_POSITION_3D</inline></reference> 类型轨道的路径，则返回 <literal>Vector3(0, 0, 0)</literal>。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 和 <reference internal="True" refuri="class_rootmotionview#class-rootmotionview"><inline classes="std std-ref">RootMotionView</inline></reference>。</paragraph>
            <paragraph>最基本的示例是将位置应用于 <reference internal="True" refuri="class_characterbody3d#class-characterbody3d"><inline classes="std std-ref">CharacterBody3D</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var current_rotation: Quaternion

func _process(delta):
    if Input.is_action_just_pressed("animate"):
        current_rotation = get_quaternion()
        state_machine.travel("Animate")
    var velocity: Vector3 = current_rotation * animation_tree.get_root_motion_position() / delta
    set_velocity(velocity)
    move_and_slide()</literal_block>
                </div>
            </container>
            <paragraph>通过将其与 <reference internal="True" refid="class-animationmixer-method-get-root-motion-position-accumulator"><inline classes="std std-ref">get_root_motion_position_accumulator</inline></reference> 结合使用，你可以更正确地应用根运动位置来考虑节点的旋转。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    set_quaternion(get_quaternion() * animation_tree.get_root_motion_rotation())
    var velocity: Vector3 = (animation_tree.get_root_motion_rotation_accumulator().inverse() * get_quaternion()) * animation_tree.get_root_motion_position() / delta
    set_velocity(velocity)
    move_and_slide()</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-root-motion-position-accumulator"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-root-motion-position-accumulator" names="class_animationmixer_method_get_root_motion_position_accumulator"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_root_motion_position_accumulator</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-root-motion-position-accumulator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检索具有 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 的位置轨道的混合值，返回的是可以在其他地方使用的 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>。</paragraph>
            <paragraph>在想要遵循动画的初始动画帧值的情况下很有用。</paragraph>
            <paragraph>例如，如果前一帧播放的是一个只有单个动画帧 <literal>Vector3(0, 0, 0)</literal> 的动画，然后下一帧播放的是一个只有单个动画帧<literal>Vector3(1, 0, 1)</literal> 的动画，它们之间的差异可以这样计算：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var prev_root_motion_position_accumulator: Vector3

func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    var current_root_motion_position_accumulator: Vector3 = animation_tree.get_root_motion_position_accumulator()
    var difference: Vector3 = current_root_motion_position_accumulator - prev_root_motion_position_accumulator
    prev_root_motion_position_accumulator = current_root_motion_position_accumulator
    transform.origin += difference</literal_block>
                </div>
            </container>
            <paragraph>不过，如果动画是循环播放的，就可能会发生预料之外的不连续变化，所以这只对一些简单的情况有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-root-motion-rotation"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-root-motion-rotation" names="class_animationmixer_method_get_root_motion_rotation"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>get_root_motion_rotation</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-root-motion-rotation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检索带有 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 的旋转运动，作为一个 <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference>，可以在其他地方使用。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 不是 <reference internal="True" refuri="class_animation#class-animation-constant-type-rotation-3d"><inline classes="std std-ref">Animation.TYPE_ROTATION_3D</inline></reference> 类型的轨迹的路径，返回 <literal>Quaternion(0, 0, 0, 1)</literal> 。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 和 <reference internal="True" refuri="class_rootmotionview#class-rootmotionview"><inline classes="std std-ref">RootMotionView</inline></reference>。</paragraph>
            <paragraph>最基本的例子是对 <reference internal="True" refuri="class_characterbody3d#class-characterbody3d"><inline classes="std std-ref">CharacterBody3D</inline></reference> 应用旋转。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    set_quaternion(get_quaternion() * animation_tree.get_root_motion_rotation() )</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-root-motion-rotation-accumulator"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-root-motion-rotation-accumulator" names="class_animationmixer_method_get_root_motion_rotation_accumulator"><reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> <strong>get_root_motion_rotation_accumulator</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-root-motion-rotation-accumulator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Retrieve the blended value of the rotation tracks with the <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> as a <reference internal="True" refuri="class_quaternion#class-quaternion"><inline classes="std std-ref">Quaternion</inline></reference> that can be used elsewhere.</paragraph>
            <paragraph>This is necessary to apply the root motion position correctly, taking rotation into account. See also <reference internal="True" refid="class-animationmixer-method-get-root-motion-position"><inline classes="std std-ref">get_root_motion_position</inline></reference>.</paragraph>
            <paragraph>Also, this is useful in cases where you want to respect the initial key values of the animation.</paragraph>
            <paragraph>For example, if an animation with only one key <literal>Quaternion(0, 0, 0, 1)</literal> is played in the previous frame and then an animation with only one key <literal>Quaternion(0, 0.707, 0, 0.707)</literal> is played in the next frame, the difference can be calculated as follows:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var prev_root_motion_rotation_accumulator: Quaternion

func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    var current_root_motion_rotation_accumulator: Quaternion = animation_tree.get_root_motion_rotation_accumulator()
    var difference: Quaternion = prev_root_motion_rotation_accumulator.inverse() * current_root_motion_rotation_accumulator
    prev_root_motion_rotation_accumulator = current_root_motion_rotation_accumulator
    transform.basis *=  Basis(difference)</literal_block>
                </div>
            </container>
            <paragraph>However, if the animation loops, an unintended discrete change may occur, so this is only useful for some simple use cases.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-root-motion-scale"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-root-motion-scale" names="class_animationmixer_method_get_root_motion_scale"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_root_motion_scale</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-root-motion-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 的缩放运动增量，类型为 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>，可以在其他地方使用。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 不是类型为 <reference internal="True" refuri="class_animation#class-animation-constant-type-scale-3d"><inline classes="std std-ref">Animation.TYPE_SCALE_3D</inline></reference> 的轨道的路径，则返回 <literal>Vector3(0, 0, 0)</literal> 。</paragraph>
            <paragraph>另见 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 和 <reference internal="True" refuri="class_rootmotionview#class-rootmotionview"><inline classes="std std-ref">RootMotionView</inline></reference>。</paragraph>
            <paragraph>最基本的例子是对 <reference internal="True" refuri="class_characterbody3d#class-characterbody3d"><inline classes="std std-ref">CharacterBody3D</inline></reference> 应用缩放。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var current_scale: Vector3 = Vector3(1, 1, 1)
var scale_accum: Vector3 = Vector3(1, 1, 1)

func _process(delta):
    if Input.is_action_just_pressed("animate"):
        current_scale = get_scale()
        scale_accum = Vector3(1, 1, 1)
        state_machine.travel("Animate")
    scale_accum += animation_tree.get_root_motion_scale()
    set_scale(current_scale * scale_accum)</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-get-root-motion-scale-accumulator"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-get-root-motion-scale-accumulator" names="class_animationmixer_method_get_root_motion_scale_accumulator"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_root_motion_scale_accumulator</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-get-root-motion-scale-accumulator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>检索带有 <reference internal="True" refid="class-animationmixer-property-root-motion-track"><inline classes="std std-ref">root_motion_track</inline></reference> 的缩放轨道的混合值，作为一个 <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>，可以在其他地方使用。</paragraph>
            <paragraph>例如，如果一个动画在前一帧只播放了一个动画帧 <literal>Vector3(1, 1, 1)</literal>，并且一个动画在后一帧只播放了一个动画帧 <literal>Vector3(2, 2, 2)</literal>，他们之间相差的值可以这样求出：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var prev_root_motion_scale_accumulator: Vector3

func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    var current_root_motion_scale_accumulator: Vector3 = animation_tree.get_root_motion_scale_accumulator()
    var difference: Vector3 = current_root_motion_scale_accumulator - prev_root_motion_scale_accumulator
    prev_root_motion_scale_accumulator = current_root_motion_scale_accumulator
    transform.basis = transform.basis.scaled(difference)</literal_block>
                </div>
            </container>
            <paragraph>然而，当一个动画循环时，可能会得到一个意料之外的变化，所以这个只在一些简单情况下才有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-has-animation"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-has-animation" names="class_animationmixer_method_has_animation"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_animation</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-has-animation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>AnimationMixer</strong> 存有键名为 <literal>name</literal> 的 <reference internal="True" refuri="class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-has-animation-library"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-has-animation-library" names="class_animationmixer_method_has_animation_library"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_animation_library</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-animationmixer-method-has-animation-library"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>AnimationMixer</strong> 存有键名为 <literal>name</literal> 的 <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-remove-animation-library"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-remove-animation-library" names="class_animationmixer_method_remove_animation_library"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_animation_library</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationmixer-method-remove-animation-library"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除与键 <literal>name</literal> 关联的 <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-animationmixer-method-rename-animation-library"></target>
            <paragraph classes="classref-method" ids="class-animationmixer-method-rename-animation-library" names="class_animationmixer_method_rename_animation_library"><abbreviation explanation="无返回值。">void</abbreviation> <strong>rename_animation_library</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, newname: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-animationmixer-method-rename-animation-library"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将与键 <literal>name</literal> 关联的 <reference internal="True" refuri="class_animationlibrary#class-animationlibrary"><inline classes="std std-ref">AnimationLibrary</inline></reference> 移动到键 <literal>newname</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
