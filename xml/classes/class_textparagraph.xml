<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_textparagraph.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/TextParagraph.xml.</comment>
    <target refid="class-textparagraph"></target>
    <section ids="textparagraph class-textparagraph" names="textparagraph class_textparagraph">
        <title>TextParagraph</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>持有一个文本段落。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>对 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference> 的抽象，用于处理单个文本段落。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="82"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-alignment"><inline classes="std std-ref">alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-break-flags"><inline classes="std std-ref">break_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-custom-punctuation"><inline classes="std std-ref">custom_punctuation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-direction"><inline classes="std std-ref">direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-ellipsis-char"><inline classes="std std-ref">ellipsis_char</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>"…"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-justification-flags"><inline classes="std std-ref">justification_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>163</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-max-lines-visible"><inline classes="std std-ref">max_lines_visible</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-orientation"><inline classes="std std-ref">orientation</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-preserve-control"><inline classes="std std-ref">preserve_control</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-preserve-invalid"><inline classes="std std-ref">preserve_invalid</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-text-overrun-behavior"><inline classes="std std-ref">text_overrun_behavior</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-property-width"><inline classes="std std-ref">width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="300"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-add-object"><inline classes="std std-ref">add_object</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-add-string"><inline classes="std std-ref">add_string</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-clear-dropcap"><inline classes="std std-ref">clear_dropcap</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-draw"><inline classes="std std-ref">draw</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), dc_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-draw-dropcap"><inline classes="std std-ref">draw_dropcap</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-draw-dropcap-outline"><inline classes="std std-ref">draw_dropcap_outline</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-draw-line"><inline classes="std std-ref">draw_line</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-draw-line-outline"><inline classes="std std-ref">draw_line_outline</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-draw-outline"><inline classes="std std-ref">draw_outline</inline></reference>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), dc_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-dropcap-lines"><inline classes="std std-ref">get_dropcap_lines</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-dropcap-rid"><inline classes="std std-ref">get_dropcap_rid</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-dropcap-size"><inline classes="std std-ref">get_dropcap_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-ascent"><inline classes="std std-ref">get_line_ascent</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-count"><inline classes="std std-ref">get_line_count</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-descent"><inline classes="std std-ref">get_line_descent</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-object-rect"><inline classes="std std-ref">get_line_object_rect</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-objects"><inline classes="std std-ref">get_line_objects</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-range"><inline classes="std std-ref">get_line_range</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-rid"><inline classes="std std-ref">get_line_rid</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-size"><inline classes="std std-ref">get_line_size</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-underline-position"><inline classes="std std-ref">get_line_underline_position</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-underline-thickness"><inline classes="std std-ref">get_line_underline_thickness</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-line-width"><inline classes="std std-ref">get_line_width</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-non-wrapped-size"><inline classes="std std-ref">get_non_wrapped_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-rid"><inline classes="std std-ref">get_rid</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-get-size"><inline classes="std std-ref">get_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-hit-test"><inline classes="std std-ref">hit_test</inline></reference>(coords: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-resize-object"><inline classes="std std-ref">resize_object</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-set-bidi-override"><inline classes="std std-ref">set_bidi_override</inline></reference>(override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-set-dropcap"><inline classes="std std-ref">set_dropcap</inline></reference>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, dropcap_margins: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0), language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-textparagraph-method-tab-align"><inline classes="std std-ref">tab_align</inline></reference>(tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-textparagraph-property-alignment"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-alignment" names="class_textparagraph_property_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>alignment</strong> = <literal>0</literal> <reference internal="True" refid="class-textparagraph-property-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>段落的水平对齐。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-break-flags"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-break-flags" names="class_textparagraph_property_break_flags"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] <strong>break_flags</strong> = <literal>3</literal> <reference internal="True" refid="class-textparagraph-property-break-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_break_flags</strong>(value: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-linebreakflag"><inline classes="std std-ref">LineBreakFlag</inline></reference>] <strong>get_break_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>断行规则。详情见 <reference internal="True" refuri="class_textserver#class-textserver"><inline classes="std std-ref">TextServer</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-custom-punctuation"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-custom-punctuation" names="class_textparagraph_property_custom_punctuation"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>custom_punctuation</strong> = <literal>""</literal> <reference internal="True" refid="class-textparagraph-property-custom-punctuation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_custom_punctuation</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_custom_punctuation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>自定义标点字符列表，用于分词。如果设置为空字符串，则使用服务器的默认值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-direction"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-direction" names="class_textparagraph_property_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>direction</strong> = <literal>0</literal> <reference internal="True" refid="class-textparagraph-property-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_direction</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>get_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-ellipsis-char"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-ellipsis-char" names="class_textparagraph_property_ellipsis_char"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>ellipsis_char</strong> = <literal>"…"</literal> <reference internal="True" refid="class-textparagraph-property-ellipsis-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ellipsis_char</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_ellipsis_char</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于文本裁剪的省略字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-justification-flags"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-justification-flags" names="class_textparagraph_property_justification_flags"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>justification_flags</strong> = <literal>163</literal> <reference internal="True" refid="class-textparagraph-property-justification-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_justification_flags</strong>(value: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>get_justification_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>行两端对齐规则。详见 <reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-max-lines-visible"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-max-lines-visible" names="class_textparagraph_property_max_lines_visible"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>max_lines_visible</strong> = <literal>-1</literal> <reference internal="True" refid="class-textparagraph-property-max-lines-visible"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_max_lines_visible</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_max_lines_visible</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>限制显示文本的行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-orientation"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-orientation" names="class_textparagraph_property_orientation"><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>orientation</strong> = <literal>0</literal> <reference internal="True" refid="class-textparagraph-property-orientation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_orientation</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-orientation"><inline classes="std std-ref">Orientation</inline></reference> <strong>get_orientation</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本朝向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-preserve-control"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-preserve-control" names="class_textparagraph_property_preserve_control"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>preserve_control</strong> = <literal>false</literal> <reference internal="True" refid="class-textparagraph-property-preserve-control"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_preserve_control</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_preserve_control</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>true</literal>，则将在文本中显示控制字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-preserve-invalid"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-preserve-invalid" names="class_textparagraph_property_preserve_invalid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>preserve_invalid</strong> = <literal>true</literal> <reference internal="True" refid="class-textparagraph-property-preserve-invalid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_preserve_invalid</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_preserve_invalid</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>true</literal>，则将在文本中显示无效字符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-text-overrun-behavior"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-text-overrun-behavior" names="class_textparagraph_property_text_overrun_behavior"><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>text_overrun_behavior</strong> = <literal>0</literal> <reference internal="True" refid="class-textparagraph-property-text-overrun-behavior"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_overrun_behavior</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference> <strong>get_text_overrun_behavior</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置当文本超过段落的设置宽度时的裁剪行为。有关所有模式的描述，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-overrunbehavior"><inline classes="std std-ref">OverrunBehavior</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-property-width"></target>
            <paragraph classes="classref-property" ids="class-textparagraph-property-width" names="class_textparagraph_property_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>width</strong> = <literal>-1.0</literal> <reference internal="True" refid="class-textparagraph-property-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_width</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>段落宽度。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-textparagraph-method-add-object"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-add-object" names="class_textparagraph_method_add_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>add_object</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, length: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-textparagraph-method-add-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向文本缓冲中添加内联对象，<literal>key</literal> 必须唯一。在文本中，对象使用 <literal>length</literal> 个对象替换字符表示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-add-string"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-add-string" names="class_textparagraph_method_add_string"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>add_string</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", meta: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <reference internal="True" refid="class-textparagraph-method-add-string"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加文本区间以及用于绘制的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-clear"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-clear" names="class_textparagraph_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-textparagraph-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空文本段落（移除文本和内联对象）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-clear-dropcap"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-clear-dropcap" names="class_textparagraph_method_clear_dropcap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_dropcap</strong>() <reference internal="True" refid="class-textparagraph-method-clear-dropcap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除首字下沉。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-draw"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-draw" names="class_textparagraph_method_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), dc_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制文本中所有行和首字下沉，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-draw-dropcap"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-draw-dropcap" names="class_textparagraph_method_draw_dropcap"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_dropcap</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-draw-dropcap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制首字下沉，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-draw-dropcap-outline"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-draw-dropcap-outline" names="class_textparagraph_method_draw_dropcap_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_dropcap_outline</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-draw-dropcap-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制首字下沉的轮廓，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-draw-line"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-draw-line" names="class_textparagraph_method_draw_line"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_line</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-draw-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制一行文本，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-draw-line-outline"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-draw-line-outline" names="class_textparagraph_method_draw_line_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_line_outline</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-draw-line-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制一行文本的轮廓，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-draw-outline"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-draw-outline" names="class_textparagraph_method_draw_outline"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_outline</strong>(canvas: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, outline_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 1, color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), dc_color: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1)) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-draw-outline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在画布项中的给定位置绘制文本中所有行和首字下沉的轮廓，颜色为 <literal>color</literal>。<literal>pos</literal> 指定的是边界框的左上角。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-dropcap-lines"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-dropcap-lines" names="class_textparagraph_method_get_dropcap_lines"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_dropcap_lines</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-dropcap-lines"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回首字下沉使用的行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-dropcap-rid"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-dropcap-rid" names="class_textparagraph_method_get_dropcap_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_dropcap_rid</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-dropcap-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回首字下沉文本缓冲 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-dropcap-size"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-dropcap-size" names="class_textparagraph_method_get_dropcap_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_dropcap_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-dropcap-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回首字下沉边界框大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-ascent"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-ascent" names="class_textparagraph_method_get_line_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_ascent</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本行上高（对于水平布局，为基线上方的像素数；或对于垂直布局，基线左侧的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-count"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-count" names="class_textparagraph_method_get_line_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_line_count</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回段落中的行数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-descent"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-descent" names="class_textparagraph_method_get_line_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_descent</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本行下深（对于水平布局，为基线下方的像素数；或对于垂直布局，基线右侧的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-object-rect"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-object-rect" names="class_textparagraph_method_get_line_object_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_line_object_rect</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-object-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回内联对象的边界矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-objects"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-objects" names="class_textparagraph_method_get_line_objects"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_line_objects</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-objects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某行中内联对象的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-range"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-range" names="class_textparagraph_method_get_line_range"><reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> <strong>get_line_range</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回某行中的字符范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-rid"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-rid" names="class_textparagraph_method_get_line_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_line_rid</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TextServer 行缓冲 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-size"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-size" names="class_textparagraph_method_get_line_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_line_size</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本行边界框的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-underline-position"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-underline-position" names="class_textparagraph_method_get_line_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_underline_position</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-underline-thickness" names="class_textparagraph_method_get_line_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_underline_thickness</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回下划线的粗细度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-line-width"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-line-width" names="class_textparagraph_method_get_line_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_width</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-line-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文本行的宽度（水平排版）或高度（垂直排版）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-non-wrapped-size"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-non-wrapped-size" names="class_textparagraph_method_get_non_wrapped_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_non_wrapped_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-non-wrapped-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回段落边界框的大小，不带换行符。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-rid"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-rid" names="class_textparagraph_method_get_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_rid</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TextServer 完整字符串缓冲区的 RID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-get-size"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-get-size" names="class_textparagraph_method_get_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回段落边界框的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-hit-test"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-hit-test" names="class_textparagraph_method_hit_test"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>hit_test</strong>(coords: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-textparagraph-method-hit-test"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定坐标处的文本光标的偏移量。该函数始终返回一个有效位置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-resize-object"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-resize-object" names="class_textparagraph_method_resize_object"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>resize_object</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, inline_align: <reference internal="True" refuri="class_@globalscope#enum-globalscope-inlinealignment"><inline classes="std std-ref">InlineAlignment</inline></reference> = 5, baseline: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 0.0) <reference internal="True" refid="class-textparagraph-method-resize-object"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置嵌入对象的新大小和对齐方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-set-bidi-override"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-set-bidi-override" names="class_textparagraph_method_set_bidi_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_bidi_override</strong>(override: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-textparagraph-method-set-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>覆盖用于结构化文本的 BiDi。</paragraph>
            <paragraph>覆盖范围应覆盖完整的源文本而没有重叠。BiDi 算法将分别被用于每个范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-set-dropcap"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-set-dropcap" names="class_textparagraph_method_set_dropcap"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>set_dropcap</strong>(text: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, font: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>, font_size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, dropcap_margins: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> = Rect2(0, 0, 0, 0), language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-textparagraph-method-set-dropcap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置首字下沉，会覆盖之前设置的首字下沉。首字下沉是段落开头的装饰元素，比文本的其余部分大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-textparagraph-method-tab-align"></target>
            <paragraph classes="classref-method" ids="class-textparagraph-method-tab-align" names="class_textparagraph_method_tab_align"><abbreviation explanation="无返回值。">void</abbreviation> <strong>tab_align</strong>(tab_stops: <reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference>) <reference internal="True" refid="class-textparagraph-method-tab-align"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将段落与给定的制表位对齐。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
