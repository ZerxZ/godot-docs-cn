<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_renderingdevice.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/RenderingDevice.xml.</comment>
    <target refid="class-renderingdevice"></target>
    <section ids="renderingdevice class-renderingdevice" names="renderingdevice class_renderingdevice">
        <title>RenderingDevice</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于处理现代低阶图形 API 的抽象。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>RenderingDevice</strong> 是用来使用 Vulkan 等现代低阶图形 API 的抽象。与（适用于 Godot 自有渲染子系统的）<reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 相比，<strong>RenderingDevice</strong> 所处的层级更低，能够更加直接地使用底层图形 API。Godot 使用 <strong>RenderingDevice</strong> 来支持部分现代低阶图形 API，能够减少所需的重复代码。你也可以在自己的项目中使用 <strong>RenderingDevice</strong>，从而执行 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> 和高阶节点未暴露的功能，例如使用计算着色器。</paragraph>
            <paragraph>启动时，Godot 会创建一个全局的 <strong>RenderingDevice</strong>，可以使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-get-rendering-device"><inline classes="std std-ref">RenderingServer.get_rendering_device</inline></reference> 获取。这个全局的 <strong>RenderingDevice</strong> 进行的是屏幕绘图。</paragraph>
            <paragraph><strong>局部 RenderingDevice：</strong>你可以使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-create-local-rendering-device"><inline classes="std std-ref">RenderingServer.create_local_rendering_device</inline></reference> 创建“次级”渲染设备，在单独的线程中进行渲染和 GPU 计算操作。</paragraph>
            <paragraph><strong>注意：</strong>使用 <strong>RenderingDevice</strong> 需要对 Vulkan、Direct3D 12、Metal 或 WebGPU 有中等水平的知识。这些图形 API 比 OpenGL 和 Direct3D 所处的层级更低，能够执行原本由图形驱动自己实现的功能。如果这个类中所使用的概念你理解起来有困难，请学习 <reference name="Vulkan 教程" refuri="https://vulkan-tutorial.com/">Vulkan 教程</reference>或 <reference name="Vulkan 指南" refuri="https://vkguide.dev/">Vulkan 指南</reference>。在尝试学习低阶图形 API 之前，建议先学习现代 OpenGL 或 Direct3D 11 相关的知识。</paragraph>
            <paragraph><strong>注意：</strong>使用无头模式运行或使用 Compatibility 渲染方法时，<strong>RenderingDevice</strong> 不可用。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/shaders/compute_shaders"><inline classes="doc">使用计算着色器</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="60"></colspec>
                    <colspec colwidth="896"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-barrier"><inline classes="std std-ref">barrier</inline></reference> <strong>(</strong> <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; from=32767, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; to=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-buffer-clear"><inline classes="std std-ref">buffer_clear</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> offset, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-buffer-get-data"><inline classes="std std-ref">buffer_get_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> offset_bytes=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-buffer-update"><inline classes="std std-ref">buffer_update</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> offset, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-capture-timestamp"><inline classes="std std-ref">capture_timestamp</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-list-add-barrier"><inline classes="std std-ref">compute_list_add_barrier</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-list-begin"><inline classes="std std-ref">compute_list_begin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_draw_overlap=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-list-bind-compute-pipeline"><inline classes="std std-ref">compute_list_bind_compute_pipeline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> compute_pipeline <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-list-bind-uniform-set"><inline classes="std std-ref">compute_list_bind_uniform_set</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> uniform_set, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> set_index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-list-dispatch"><inline classes="std std-ref">compute_list_dispatch</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> x_groups, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> y_groups, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> z_groups <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-list-end"><inline classes="std std-ref">compute_list_end</inline></reference> <strong>(</strong> <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-list-set-push-constant"><inline classes="std std-ref">compute_list_set_push_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-pipeline-create"><inline classes="std std-ref">compute_pipeline_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader, <reference internal="True" refuri="class_rdpipelinespecializationconstant#class-rdpipelinespecializationconstant"><inline classes="std std-ref">RDPipelineSpecializationConstant[]</inline></reference> specialization_constants=[] <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-compute-pipeline-is-valid"><inline classes="std std-ref">compute_pipeline_is_valid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> compute_pipeline <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-create-local-device"><inline classes="std std-ref">create_local_device</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-command-begin-label"><inline classes="std std-ref">draw_command_begin_label</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-command-end-label"><inline classes="std std-ref">draw_command_end_label</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-command-insert-label"><inline classes="std std-ref">draw_command_insert_label</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-begin"><inline classes="std std-ref">draw_list_begin</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_color_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_color_action, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_depth_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_depth_action, <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> clear_color_values=PackedColorArray(), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clear_depth=1.0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> clear_stencil=0, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> storage_textures=[] <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-begin-for-screen"><inline classes="std std-ref">draw_list_begin_for_screen</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> screen=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> clear_color=Color(0, 0, 0, 1) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-begin-split"><inline classes="std std-ref">draw_list_begin_split</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> splits, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_color_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_color_action, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_depth_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_depth_action, <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> clear_color_values=PackedColorArray(), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clear_depth=1.0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> clear_stencil=0, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> storage_textures=[] <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-bind-index-array"><inline classes="std std-ref">draw_list_bind_index_array</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> index_array <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-bind-render-pipeline"><inline classes="std std-ref">draw_list_bind_render_pipeline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> render_pipeline <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-bind-uniform-set"><inline classes="std std-ref">draw_list_bind_uniform_set</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> uniform_set, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> set_index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-bind-vertex-array"><inline classes="std std-ref">draw_list_bind_vertex_array</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> vertex_array <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-disable-scissor"><inline classes="std std-ref">draw_list_disable_scissor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-draw"><inline classes="std std-ref">draw_list_draw</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_indices, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instances, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> procedural_vertex_count=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-enable-scissor"><inline classes="std std-ref">draw_list_enable_scissor</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> rect=Rect2(0, 0, 0, 0) <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-end"><inline classes="std std-ref">draw_list_end</inline></reference> <strong>(</strong> <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-set-blend-constants"><inline classes="std std-ref">draw_list_set_blend_constants</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-set-push-constant"><inline classes="std std-ref">draw_list_set_push_constant</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-switch-to-next-pass"><inline classes="std std-ref">draw_list_switch_to_next_pass</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-switch-to-next-pass-split"><inline classes="std std-ref">draw_list_switch_to_next_pass_split</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> splits <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-create"><inline classes="std std-ref">framebuffer_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> textures, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> validate_with_format=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-create-empty"><inline classes="std std-ref">framebuffer_create_empty</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> samples=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> validate_with_format=-1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-create-multipass"><inline classes="std std-ref">framebuffer_create_multipass</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> textures, <reference internal="True" refuri="class_rdframebufferpass#class-rdframebufferpass"><inline classes="std std-ref">RDFramebufferPass[]</inline></reference> passes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> validate_with_format=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-format-create"><inline classes="std std-ref">framebuffer_format_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdattachmentformat#class-rdattachmentformat"><inline classes="std std-ref">RDAttachmentFormat[]</inline></reference> attachments, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-format-create-empty"><inline classes="std std-ref">framebuffer_format_create_empty</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> samples=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-format-create-multipass"><inline classes="std std-ref">framebuffer_format_create_multipass</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdattachmentformat#class-rdattachmentformat"><inline classes="std std-ref">RDAttachmentFormat[]</inline></reference> attachments, <reference internal="True" refuri="class_rdframebufferpass#class-rdframebufferpass"><inline classes="std std-ref">RDFramebufferPass[]</inline></reference> passes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-format-get-texture-samples"><inline classes="std std-ref">framebuffer_format_get_texture_samples</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> format, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> render_pass=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-get-format"><inline classes="std std-ref">framebuffer_get_format</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-framebuffer-is-valid"><inline classes="std std-ref">framebuffer_is_valid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-full-barrier"><inline classes="std std-ref">full_barrier</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-cpu-time"><inline classes="std std-ref">get_captured_timestamp_cpu_time</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-gpu-time"><inline classes="std std-ref">get_captured_timestamp_gpu_time</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-name"><inline classes="std std-ref">get_captured_timestamp_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-captured-timestamps-count"><inline classes="std std-ref">get_captured_timestamps_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-captured-timestamps-frame"><inline classes="std std-ref">get_captured_timestamps_frame</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-device-name"><inline classes="std std-ref">get_device_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-device-pipeline-cache-uuid"><inline classes="std std-ref">get_device_pipeline_cache_uuid</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-device-vendor-name"><inline classes="std std-ref">get_device_vendor_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-driver-resource"><inline classes="std std-ref">get_driver_resource</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> resource, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-frame-delay"><inline classes="std std-ref">get_frame_delay</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-get-memory-usage"><inline classes="std std-ref">get_memory_usage</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-memorytype"><inline classes="std std-ref">MemoryType</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-index-array-create"><inline classes="std std-ref">index_array_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> index_buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index_offset, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index_count <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-index-buffer-create"><inline classes="std std-ref">index_buffer_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_indices, <reference internal="True" refid="enum-renderingdevice-indexbufferformat"><inline classes="std std-ref">IndexBufferFormat</inline></reference> format, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray(), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_restart_indices=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-limit-get"><inline classes="std std-ref">limit_get</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> limit <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-render-pipeline-create"><inline classes="std std-ref">render_pipeline_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> framebuffer_format, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> vertex_format, <reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> primitive, <reference internal="True" refuri="class_rdpipelinerasterizationstate#class-rdpipelinerasterizationstate"><inline classes="std std-ref">RDPipelineRasterizationState</inline></reference> rasterization_state, <reference internal="True" refuri="class_rdpipelinemultisamplestate#class-rdpipelinemultisamplestate"><inline classes="std std-ref">RDPipelineMultisampleState</inline></reference> multisample_state, <reference internal="True" refuri="class_rdpipelinedepthstencilstate#class-rdpipelinedepthstencilstate"><inline classes="std std-ref">RDPipelineDepthStencilState</inline></reference> stencil_state, <reference internal="True" refuri="class_rdpipelinecolorblendstate#class-rdpipelinecolorblendstate"><inline classes="std std-ref">RDPipelineColorBlendState</inline></reference> color_blend_state, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference>&gt; dynamic_state_flags=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> for_render_pass=0, <reference internal="True" refuri="class_rdpipelinespecializationconstant#class-rdpipelinespecializationconstant"><inline classes="std std-ref">RDPipelineSpecializationConstant[]</inline></reference> specialization_constants=[] <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-render-pipeline-is-valid"><inline classes="std std-ref">render_pipeline_is_valid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> render_pipeline <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-sampler-create"><inline classes="std std-ref">sampler_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdsamplerstate#class-rdsamplerstate"><inline classes="std std-ref">RDSamplerState</inline></reference> state <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-sampler-is-format-supported-for-filter"><inline classes="std std-ref">sampler_is_format_supported_for_filter</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <reference internal="True" refid="enum-renderingdevice-samplerfilter"><inline classes="std std-ref">SamplerFilter</inline></reference> sampler_filter <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-screen-get-framebuffer-format"><inline classes="std std-ref">screen_get_framebuffer_format</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-screen-get-height"><inline classes="std std-ref">screen_get_height</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> screen=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-screen-get-width"><inline classes="std std-ref">screen_get_width</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> screen=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-set-resource-name"><inline classes="std std-ref">set_resource_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> id, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-shader-compile-binary-from-spirv"><inline classes="std std-ref">shader_compile_binary_from_spirv</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference> spirv_data, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name="" <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-shader-compile-spirv-from-source"><inline classes="std std-ref">shader_compile_spirv_from_source</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdshadersource#class-rdshadersource"><inline classes="std std-ref">RDShaderSource</inline></reference> shader_source, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_cache=true <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-shader-create-from-bytecode"><inline classes="std std-ref">shader_create_from_bytecode</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> binary_data, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> placeholder_rid=RID() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-shader-create-from-spirv"><inline classes="std std-ref">shader_create_from_spirv</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference> spirv_data, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name="" <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-shader-create-placeholder"><inline classes="std std-ref">shader_create_placeholder</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-shader-get-vertex-input-attribute-mask"><inline classes="std std-ref">shader_get_vertex_input_attribute_mask</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-storage-buffer-create"><inline classes="std std-ref">storage_buffer_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray(), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-storagebufferusage"><inline classes="std std-ref">StorageBufferUsage</inline></reference>&gt; usage=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-submit"><inline classes="std std-ref">submit</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-sync"><inline classes="std std-ref">sync</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-buffer-create"><inline classes="std std-ref">texture_buffer_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-clear"><inline classes="std std-ref">texture_clear</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> base_mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap_count, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> base_layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_count, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-copy"><inline classes="std std-ref">texture_copy</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> from_texture, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> to_texture, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from_pos, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_pos, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> src_mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> dst_mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> src_layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> dst_layer, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-create"><inline classes="std std-ref">texture_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference> format, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray[]</inline></reference> data=[] <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-create-from-extension"><inline classes="std std-ref">texture_create_from_extension</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> type, <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> samples, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference>&gt; usage_flags, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> image, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> height, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> depth, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-create-shared"><inline classes="std std-ref">texture_create_shared</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> with_texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-create-shared-from-slice"><inline classes="std std-ref">texture_create_shared_from_slice</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> with_texture, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps=1, <reference internal="True" refid="enum-renderingdevice-textureslicetype"><inline classes="std std-ref">TextureSliceType</inline></reference> slice_type=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-get-data"><inline classes="std std-ref">texture_get_data</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-get-format"><inline classes="std std-ref">texture_get_format</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-get-native-handle"><inline classes="std std-ref">texture_get_native_handle</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-is-format-supported-for-usage"><inline classes="std std-ref">texture_is_format_supported_for_usage</inline></reference> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference>&gt; usage_flags <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-is-shared"><inline classes="std std-ref">texture_is_shared</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-is-valid"><inline classes="std std-ref">texture_is_valid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-resolve-multisample"><inline classes="std std-ref">texture_resolve_multisample</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> from_texture, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> to_texture, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-texture-update"><inline classes="std std-ref">texture_update</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-uniform-buffer-create"><inline classes="std std-ref">uniform_buffer_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-uniform-set-create"><inline classes="std std-ref">uniform_set_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rduniform#class-rduniform"><inline classes="std std-ref">RDUniform[]</inline></reference> uniforms, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shader_set <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-uniform-set-is-valid"><inline classes="std std-ref">uniform_set_is_valid</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> uniform_set <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-vertex-array-create"><inline classes="std std-ref">vertex_array_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> vertex_count, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> vertex_format, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> src_buffers, <reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> offsets=PackedInt64Array() <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-vertex-buffer-create"><inline classes="std std-ref">vertex_buffer_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray(), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_as_storage=false <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-renderingdevice-method-vertex-format-create"><inline classes="std std-ref">vertex_format_create</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_rdvertexattribute#class-rdvertexattribute"><inline classes="std std-ref">RDVertexAttribute[]</inline></reference> vertex_descriptions <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-renderingdevice-devicetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-devicetype" names="enum_renderingdevice_devicetype">enum <strong>DeviceType</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-device-type-other"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-device-type-other" names="class_renderingdevice_constant_device_type_other"><reference internal="True" refid="enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> <strong>DEVICE_TYPE_OTHER</strong> = <literal>0</literal></paragraph>
            <paragraph>渲染设备的类型与其他枚举值均不匹配，或者未知。</paragraph>
            <target refid="class-renderingdevice-constant-device-type-integrated-gpu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-device-type-integrated-gpu" names="class_renderingdevice_constant_device_type_integrated_gpu"><reference internal="True" refid="enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> <strong>DEVICE_TYPE_INTEGRATED_GPU</strong> = <literal>1</literal></paragraph>
            <paragraph>渲染设备为集成 GPU，通常<emphasis>（但不一定）</emphasis>比独立 GPU（<reference internal="True" refid="class-renderingdevice-constant-device-type-discrete-gpu"><inline classes="std std-ref">DEVICE_TYPE_DISCRETE_GPU</inline></reference>）要慢。在 Android 和 iOS 上，渲染设备的类型始终为 <reference internal="True" refid="class-renderingdevice-constant-device-type-integrated-gpu"><inline classes="std std-ref">DEVICE_TYPE_INTEGRATED_GPU</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-device-type-discrete-gpu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-device-type-discrete-gpu" names="class_renderingdevice_constant_device_type_discrete_gpu"><reference internal="True" refid="enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> <strong>DEVICE_TYPE_DISCRETE_GPU</strong> = <literal>2</literal></paragraph>
            <paragraph>渲染设备为独立 GPU，通常<emphasis>（但不一定）</emphasis>比集成 GPU（<reference internal="True" refid="class-renderingdevice-constant-device-type-integrated-gpu"><inline classes="std std-ref">DEVICE_TYPE_INTEGRATED_GPU</inline></reference>）要快。</paragraph>
            <target refid="class-renderingdevice-constant-device-type-virtual-gpu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-device-type-virtual-gpu" names="class_renderingdevice_constant_device_type_virtual_gpu"><reference internal="True" refid="enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> <strong>DEVICE_TYPE_VIRTUAL_GPU</strong> = <literal>3</literal></paragraph>
            <paragraph>渲染设备为虚拟环境中的模拟 GPU。通常比主机 GPU 要慢很多，这意味着独立 GPU 的预期性能等级大概与 <reference internal="True" refid="class-renderingdevice-constant-device-type-integrated-gpu"><inline classes="std std-ref">DEVICE_TYPE_INTEGRATED_GPU</inline></reference> 等价。使用虚拟机 GPU 穿透（例如 VFIO）时，设备类型不会被汇报为 <reference internal="True" refid="class-renderingdevice-constant-device-type-virtual-gpu"><inline classes="std std-ref">DEVICE_TYPE_VIRTUAL_GPU</inline></reference>。而是会汇报主机 GPU 的设备类型，就好像使用的不是模拟 GPU 一样。</paragraph>
            <target refid="class-renderingdevice-constant-device-type-cpu"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-device-type-cpu" names="class_renderingdevice_constant_device_type_cpu"><reference internal="True" refid="enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> <strong>DEVICE_TYPE_CPU</strong> = <literal>4</literal></paragraph>
            <paragraph>渲染设备由软件模拟提供（例如 Lavapipe 或 <reference name="SwiftShader" refuri="https://github.com/google/swiftshader">SwiftShader</reference>）。这是可用的渲染设备中最慢的一种；通常比 <reference internal="True" refid="class-renderingdevice-constant-device-type-integrated-gpu"><inline classes="std std-ref">DEVICE_TYPE_INTEGRATED_GPU</inline></reference> 要慢很多。</paragraph>
            <target refid="class-renderingdevice-constant-device-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-device-type-max" names="class_renderingdevice_constant_device_type_max"><reference internal="True" refid="enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> <strong>DEVICE_TYPE_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-devicetype"><inline classes="std std-ref">DeviceType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-driverresource"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-driverresource" names="enum_renderingdevice_driverresource">enum <strong>DriverResource</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-device"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-device" names="class_renderingdevice_constant_driver_resource_vulkan_device"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_DEVICE</strong> = <literal>0</literal></paragraph>
            <paragraph>Vulkan 设备驱动资源。这是一种“全局”资源，会忽略传入的 RID</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-physical-device"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-physical-device" names="class_renderingdevice_constant_driver_resource_vulkan_physical_device"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_PHYSICAL_DEVICE</strong> = <literal>1</literal></paragraph>
            <paragraph>物理设备（显卡）驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-instance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-instance" names="class_renderingdevice_constant_driver_resource_vulkan_instance"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_INSTANCE</strong> = <literal>2</literal></paragraph>
            <paragraph>Vulkan 实例驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-queue"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-queue" names="class_renderingdevice_constant_driver_resource_vulkan_queue"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_QUEUE</strong> = <literal>3</literal></paragraph>
            <paragraph>Vulkan 队列驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-queue-family-index"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-queue-family-index" names="class_renderingdevice_constant_driver_resource_vulkan_queue_family_index"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_QUEUE_FAMILY_INDEX</strong> = <literal>4</literal></paragraph>
            <paragraph>Vulkan 队列族索引驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-image"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-image" names="class_renderingdevice_constant_driver_resource_vulkan_image"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_IMAGE</strong> = <literal>5</literal></paragraph>
            <paragraph>Vulkan 图像驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-image-view"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-image-view" names="class_renderingdevice_constant_driver_resource_vulkan_image_view"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_IMAGE_VIEW</strong> = <literal>6</literal></paragraph>
            <paragraph>Vulkan 图像查看驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-image-native-texture-format"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-image-native-texture-format" names="class_renderingdevice_constant_driver_resource_vulkan_image_native_texture_format"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_IMAGE_NATIVE_TEXTURE_FORMAT</strong> = <literal>7</literal></paragraph>
            <paragraph>Vulkan 图像原生纹理格式驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-sampler"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-sampler" names="class_renderingdevice_constant_driver_resource_vulkan_sampler"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_SAMPLER</strong> = <literal>8</literal></paragraph>
            <paragraph>Vulkan 采样器驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-descriptor-set"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-descriptor-set" names="class_renderingdevice_constant_driver_resource_vulkan_descriptor_set"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_DESCRIPTOR_SET</strong> = <literal>9</literal></paragraph>
            <paragraph>Vulkan <reference name="描述符集" refuri="https://vkguide.dev/docs/chapter-4/descriptors/">描述符集</reference>驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-buffer" names="class_renderingdevice_constant_driver_resource_vulkan_buffer"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_BUFFER</strong> = <literal>10</literal></paragraph>
            <paragraph>Vulkan 缓冲驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-compute-pipeline"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-compute-pipeline" names="class_renderingdevice_constant_driver_resource_vulkan_compute_pipeline"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_COMPUTE_PIPELINE</strong> = <literal>11</literal></paragraph>
            <paragraph>Vulkan 计算管线驱动资源。</paragraph>
            <target refid="class-renderingdevice-constant-driver-resource-vulkan-render-pipeline"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-driver-resource-vulkan-render-pipeline" names="class_renderingdevice_constant_driver_resource_vulkan_render_pipeline"><reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> <strong>DRIVER_RESOURCE_VULKAN_RENDER_PIPELINE</strong> = <literal>12</literal></paragraph>
            <paragraph>Vulkan 渲染管线驱动资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-dataformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-dataformat" names="enum_renderingdevice_dataformat">enum <strong>DataFormat</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r4g4-unorm-pack8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r4g4-unorm-pack8" names="class_renderingdevice_constant_data_format_r4g4_unorm_pack8"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R4G4_UNORM_PACK8</strong> = <literal>0</literal></paragraph>
            <paragraph>每通道 4 位的红、绿通道数据格式，紧缩在 8 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <paragraph><strong>注意：</strong>所有数据格式的更多信息可以在 Vulkan 规格说明的 <reference name="Identification of formats" refuri="https://registry.khronos.org/vulkan/specs/1.1/html/vkspec.html#_identification_of_formats">Identification of formats</reference> 章节和 <reference name="VkFormat" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFormat.html">VkFormat</reference> 枚举中找到。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r4g4b4a4-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r4g4b4a4-unorm-pack16" names="class_renderingdevice_constant_data_format_r4g4b4a4_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R4G4B4A4_UNORM_PACK16</strong> = <literal>1</literal></paragraph>
            <paragraph>每通道 4 位的红、绿、蓝、Alpha 通道数据格式，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b4g4r4a4-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b4g4r4a4-unorm-pack16" names="class_renderingdevice_constant_data_format_b4g4r4a4_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B4G4R4A4_UNORM_PACK16</strong> = <literal>2</literal></paragraph>
            <paragraph>每通道 4 位的蓝、绿、红、Alpha 通道数据格式，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r5g6b5-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r5g6b5-unorm-pack16" names="class_renderingdevice_constant_data_format_r5g6b5_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R5G6B5_UNORM_PACK16</strong> = <literal>3</literal></paragraph>
            <paragraph>红、绿、蓝通道数据格式，红占 5 位、绿占 6 位、蓝占 5 位，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b5g6r5-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b5g6r5-unorm-pack16" names="class_renderingdevice_constant_data_format_b5g6r5_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B5G6R5_UNORM_PACK16</strong> = <literal>4</literal></paragraph>
            <paragraph>蓝、绿、红通道数据格式，蓝占 5 位、绿占 6 位、红占 5 位，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r5g5b5a1-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r5g5b5a1-unorm-pack16" names="class_renderingdevice_constant_data_format_r5g5b5a1_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R5G5B5A1_UNORM_PACK16</strong> = <literal>5</literal></paragraph>
            <paragraph>红、绿、蓝、Alpha 通道数据格式，红占 5 位、绿占 6 位、蓝占 5 位、Alpha 占 1 位，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b5g5r5a1-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b5g5r5a1-unorm-pack16" names="class_renderingdevice_constant_data_format_b5g5r5a1_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B5G5R5A1_UNORM_PACK16</strong> = <literal>6</literal></paragraph>
            <paragraph>蓝、绿、红、Alpha 通道数据格式，蓝占 5 位、绿占 6 位、红占 5 位、Alpha 占 1 位，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a1r5g5b5-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a1r5g5b5-unorm-pack16" names="class_renderingdevice_constant_data_format_a1r5g5b5_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A1R5G5B5_UNORM_PACK16</strong> = <literal>7</literal></paragraph>
            <paragraph>Alpha、红、绿、蓝通道数据格式，Alpha 占 1 位、红占 5 位、绿占 6 位、蓝占 5 位，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8-unorm" names="class_renderingdevice_constant_data_format_r8_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8_UNORM</strong> = <literal>8</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8-snorm" names="class_renderingdevice_constant_data_format_r8_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8_SNORM</strong> = <literal>9</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8-uscaled" names="class_renderingdevice_constant_data_format_r8_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8_USCALED</strong> = <literal>10</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 255.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8-sscaled" names="class_renderingdevice_constant_data_format_r8_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8_SSCALED</strong> = <literal>11</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-127.0, 127.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8-uint" names="class_renderingdevice_constant_data_format_r8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8_UINT</strong> = <literal>12</literal></paragraph>
            <paragraph>每通道 8 位的无符号整数红通道数据格式。取值均在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8-sint" names="class_renderingdevice_constant_data_format_r8_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8_SINT</strong> = <literal>13</literal></paragraph>
            <paragraph>每通道 8 位的带符号整数红通道数据格式。取值均在 <literal>[-127, 127]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8-srgb" names="class_renderingdevice_constant_data_format_r8_srgb"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8_SRGB</strong> = <literal>14</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8-unorm" names="class_renderingdevice_constant_data_format_r8g8_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8_UNORM</strong> = <literal>15</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8-snorm" names="class_renderingdevice_constant_data_format_r8g8_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8_SNORM</strong> = <literal>16</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红、绿通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8-uscaled" names="class_renderingdevice_constant_data_format_r8g8_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8_USCALED</strong> = <literal>17</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 255.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8-sscaled" names="class_renderingdevice_constant_data_format_r8g8_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8_SSCALED</strong> = <literal>18</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红、绿通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-127.0, 127.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8-uint" names="class_renderingdevice_constant_data_format_r8g8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8_UINT</strong> = <literal>19</literal></paragraph>
            <paragraph>每通道 8 位的无符号整数红、绿通道数据格式。取值均在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8-sint" names="class_renderingdevice_constant_data_format_r8g8_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8_SINT</strong> = <literal>20</literal></paragraph>
            <paragraph>每通道 8 位的带符号整数红、绿通道数据格式。取值均在 <literal>[-127, 127]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8-srgb" names="class_renderingdevice_constant_data_format_r8g8_srgb"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8_SRGB</strong> = <literal>21</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8-unorm" names="class_renderingdevice_constant_data_format_r8g8b8_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8_UNORM</strong> = <literal>22</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿、蓝通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8-snorm" names="class_renderingdevice_constant_data_format_r8g8b8_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8_SNORM</strong> = <literal>23</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红、绿、蓝通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8-uscaled" names="class_renderingdevice_constant_data_format_r8g8b8_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8_USCALED</strong> = <literal>24</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿、蓝通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 255.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8-sscaled" names="class_renderingdevice_constant_data_format_r8g8b8_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8_SSCALED</strong> = <literal>25</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红、绿、蓝通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-127.0, 127.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8-uint" names="class_renderingdevice_constant_data_format_r8g8b8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8_UINT</strong> = <literal>26</literal></paragraph>
            <paragraph>每通道 8 位的无符号整数红、绿、蓝通道数据格式。取值均在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8-sint" names="class_renderingdevice_constant_data_format_r8g8b8_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8_SINT</strong> = <literal>27</literal></paragraph>
            <paragraph>每通道 8 位的带符号整数红、绿、蓝通道数据格式。取值均在 <literal>[-127, 127]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8-srgb" names="class_renderingdevice_constant_data_format_r8g8b8_srgb"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8_SRGB</strong> = <literal>28</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿、蓝通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8-unorm" names="class_renderingdevice_constant_data_format_b8g8r8_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8_UNORM</strong> = <literal>29</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数蓝、绿、红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8-snorm" names="class_renderingdevice_constant_data_format_b8g8r8_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8_SNORM</strong> = <literal>30</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数蓝、绿、红通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8-uscaled" names="class_renderingdevice_constant_data_format_b8g8r8_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8_USCALED</strong> = <literal>31</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数蓝、绿、红通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 255.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8-sscaled" names="class_renderingdevice_constant_data_format_b8g8r8_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8_SSCALED</strong> = <literal>32</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数蓝、绿、红通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-127.0, 127.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8-uint" names="class_renderingdevice_constant_data_format_b8g8r8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8_UINT</strong> = <literal>33</literal></paragraph>
            <paragraph>每通道 8 位的无符号整数蓝、绿、红通道数据格式。取值均在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8-sint" names="class_renderingdevice_constant_data_format_b8g8r8_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8_SINT</strong> = <literal>34</literal></paragraph>
            <paragraph>每通道 8 位的带符号整数蓝、绿、红通道数据格式。取值均在 <literal>[-127, 127]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8-srgb" names="class_renderingdevice_constant_data_format_b8g8r8_srgb"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8_SRGB</strong> = <literal>35</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数蓝、绿、红通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8a8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8a8-unorm" names="class_renderingdevice_constant_data_format_r8g8b8a8_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8A8_UNORM</strong> = <literal>36</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8a8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8a8-snorm" names="class_renderingdevice_constant_data_format_r8g8b8a8_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8A8_SNORM</strong> = <literal>37</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8a8-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8a8-uscaled" names="class_renderingdevice_constant_data_format_r8g8b8a8_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8A8_USCALED</strong> = <literal>38</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿、蓝、Alpha 通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 255.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8a8-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8a8-sscaled" names="class_renderingdevice_constant_data_format_r8g8b8a8_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8A8_SSCALED</strong> = <literal>39</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数红、绿、蓝、Alpha 通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-127.0, 127.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8a8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8a8-uint" names="class_renderingdevice_constant_data_format_r8g8b8a8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8A8_UINT</strong> = <literal>40</literal></paragraph>
            <paragraph>每通道 8 位的无符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8a8-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8a8-sint" names="class_renderingdevice_constant_data_format_r8g8b8a8_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8A8_SINT</strong> = <literal>41</literal></paragraph>
            <paragraph>每通道 8 位的带符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[-127, 127]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r8g8b8a8-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r8g8b8a8-srgb" names="class_renderingdevice_constant_data_format_r8g8b8a8_srgb"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R8G8B8A8_SRGB</strong> = <literal>42</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数红、绿、蓝、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8a8-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8a8-unorm" names="class_renderingdevice_constant_data_format_b8g8r8a8_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8A8_UNORM</strong> = <literal>43</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数蓝、绿、红、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8a8-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8a8-snorm" names="class_renderingdevice_constant_data_format_b8g8r8a8_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8A8_SNORM</strong> = <literal>44</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数蓝、绿、红、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8a8-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8a8-uscaled" names="class_renderingdevice_constant_data_format_b8g8r8a8_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8A8_USCALED</strong> = <literal>45</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数蓝、绿、红、Alpha 通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 255.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8a8-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8a8-sscaled" names="class_renderingdevice_constant_data_format_b8g8r8a8_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8A8_SSCALED</strong> = <literal>46</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数蓝、绿、红、Alpha 通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-127.0, 127.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8a8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8a8-uint" names="class_renderingdevice_constant_data_format_b8g8r8a8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8A8_UINT</strong> = <literal>47</literal></paragraph>
            <paragraph>每通道 8 位的无符号整数蓝、绿、红、Alpha 通道数据格式。取值均在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8a8-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8a8-sint" names="class_renderingdevice_constant_data_format_b8g8r8a8_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8A8_SINT</strong> = <literal>48</literal></paragraph>
            <paragraph>每通道 8 位的带符号整数蓝、绿、红、Alpha 通道数据格式。取值均在 <literal>[-127, 127]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8a8-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8a8-srgb" names="class_renderingdevice_constant_data_format_b8g8r8a8_srgb"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8A8_SRGB</strong> = <literal>49</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数蓝、绿、红、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a8b8g8r8-unorm-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a8b8g8r8-unorm-pack32" names="class_renderingdevice_constant_data_format_a8b8g8r8_unorm_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A8B8G8R8_UNORM_PACK32</strong> = <literal>50</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a8b8g8r8-snorm-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a8b8g8r8-snorm-pack32" names="class_renderingdevice_constant_data_format_a8b8g8r8_snorm_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A8B8G8R8_SNORM_PACK32</strong> = <literal>51</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a8b8g8r8-uscaled-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a8b8g8r8-uscaled-pack32" names="class_renderingdevice_constant_data_format_a8b8g8r8_uscaled_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A8B8G8R8_USCALED_PACK32</strong> = <literal>52</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数 Alpha、红、绿、蓝通道数据格式，使用缩放后的值（值从整数转换为浮点数），紧缩在 32 个比特位中。取值均在 <literal>[0.0, 255.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a8b8g8r8-sscaled-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a8b8g8r8-sscaled-pack32" names="class_renderingdevice_constant_data_format_a8b8g8r8_sscaled_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A8B8G8R8_SSCALED_PACK32</strong> = <literal>53</literal></paragraph>
            <paragraph>每通道 8 位的带符号浮点数 Alpha、红、绿、蓝通道数据格式，使用缩放后的值（值从整数转换为浮点数），紧缩在 32 个比特位中。取值均在 <literal>[-127.0, 127.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a8b8g8r8-uint-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a8b8g8r8-uint-pack32" names="class_renderingdevice_constant_data_format_a8b8g8r8_uint_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A8B8G8R8_UINT_PACK32</strong> = <literal>54</literal></paragraph>
            <paragraph>每通道 8 位的无符号整数 Alpha、红、绿、蓝通道数据格式，紧缩在 32 个比特位中。取值均在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a8b8g8r8-sint-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a8b8g8r8-sint-pack32" names="class_renderingdevice_constant_data_format_a8b8g8r8_sint_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A8B8G8R8_SINT_PACK32</strong> = <literal>55</literal></paragraph>
            <paragraph>每通道 8 位的带符号整数 Alpha、红、绿、蓝通道数据格式，紧缩在 32 个比特位中。取值均在 <literal>[-127, 127]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a8b8g8r8-srgb-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a8b8g8r8-srgb-pack32" names="class_renderingdevice_constant_data_format_a8b8g8r8_srgb_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A8B8G8R8_SRGB_PACK32</strong> = <literal>56</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数 Alpha、红、绿、蓝通道数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 32 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2r10g10b10-unorm-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2r10g10b10-unorm-pack32" names="class_renderingdevice_constant_data_format_a2r10g10b10_unorm_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2R10G10B10_UNORM_PACK32</strong> = <literal>57</literal></paragraph>
            <paragraph>无符号浮点数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位红、10 位绿、10 位蓝。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2r10g10b10-snorm-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2r10g10b10-snorm-pack32" names="class_renderingdevice_constant_data_format_a2r10g10b10_snorm_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2R10G10B10_SNORM_PACK32</strong> = <literal>58</literal></paragraph>
            <paragraph>带符号浮点数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位红、10 位绿、10 位蓝。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2r10g10b10-uscaled-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2r10g10b10-uscaled-pack32" names="class_renderingdevice_constant_data_format_a2r10g10b10_uscaled_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2R10G10B10_USCALED_PACK32</strong> = <literal>59</literal></paragraph>
            <paragraph>无符号浮点数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位红、10 位绿、10 位蓝。红、绿、蓝的取值在 <literal>[0.0, 1023.0]</literal> 的范围内，Alpha 的取值在 <literal>[0.0, 3.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2r10g10b10-sscaled-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2r10g10b10-sscaled-pack32" names="class_renderingdevice_constant_data_format_a2r10g10b10_sscaled_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2R10G10B10_SSCALED_PACK32</strong> = <literal>60</literal></paragraph>
            <paragraph>带符号浮点数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位红、10 位绿、10 位蓝。红、绿、蓝的取值在 <literal>[-511.0, 511.0]</literal> 的范围内，Alpha 的取值在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2r10g10b10-uint-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2r10g10b10-uint-pack32" names="class_renderingdevice_constant_data_format_a2r10g10b10_uint_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2R10G10B10_UINT_PACK32</strong> = <literal>61</literal></paragraph>
            <paragraph>无符号整数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位红、10 位绿、10 位蓝。红、绿、蓝的取值在 <literal>[0, 1023]</literal> 的范围内，Alpha 的取值在 <literal>[0, 3]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2r10g10b10-sint-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2r10g10b10-sint-pack32" names="class_renderingdevice_constant_data_format_a2r10g10b10_sint_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2R10G10B10_SINT_PACK32</strong> = <literal>62</literal></paragraph>
            <paragraph>带符号整数 Alpha、红、绿、蓝通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位红、10 位绿、10 位蓝。红、绿、蓝的取值在 <literal>[-511, 511]</literal> 的范围内，Alpha 的取值在 <literal>[-1, 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2b10g10r10-unorm-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2b10g10r10-unorm-pack32" names="class_renderingdevice_constant_data_format_a2b10g10r10_unorm_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2B10G10R10_UNORM_PACK32</strong> = <literal>63</literal></paragraph>
            <paragraph>无符号浮点数 Alpha、蓝、绿、红通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位蓝、10 位绿、10 位红。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2b10g10r10-snorm-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2b10g10r10-snorm-pack32" names="class_renderingdevice_constant_data_format_a2b10g10r10_snorm_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2B10G10R10_SNORM_PACK32</strong> = <literal>64</literal></paragraph>
            <paragraph>带符号浮点数 Alpha、蓝、绿、红通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位蓝、10 位绿、10 位红。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2b10g10r10-uscaled-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2b10g10r10-uscaled-pack32" names="class_renderingdevice_constant_data_format_a2b10g10r10_uscaled_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2B10G10R10_USCALED_PACK32</strong> = <literal>65</literal></paragraph>
            <paragraph>无符号浮点数 Alpha、蓝、绿、红通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位蓝、10 位绿、10 位红。蓝、绿、红的取值在 <literal>[0.0, 1023.0]</literal> 的范围内，Alpha 的取值在 <literal>[0.0, 3.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2b10g10r10-sscaled-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2b10g10r10-sscaled-pack32" names="class_renderingdevice_constant_data_format_a2b10g10r10_sscaled_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2B10G10R10_SSCALED_PACK32</strong> = <literal>66</literal></paragraph>
            <paragraph>带符号浮点数 Alpha、蓝、绿、红通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位蓝、10 位绿、10 位红。蓝、绿、红的取值在 <literal>[-511.0, 511.0]</literal> 的范围内，Alpha 的取值在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2b10g10r10-uint-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2b10g10r10-uint-pack32" names="class_renderingdevice_constant_data_format_a2b10g10r10_uint_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2B10G10R10_UINT_PACK32</strong> = <literal>67</literal></paragraph>
            <paragraph>无符号整数 Alpha、蓝、绿、红通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位蓝、10 位绿、10 位红。蓝、绿、红的取值在 <literal>[0, 1023]</literal> 的范围内，Alpha 的取值在 <literal>[0, 3]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-a2b10g10r10-sint-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-a2b10g10r10-sint-pack32" names="class_renderingdevice_constant_data_format_a2b10g10r10_sint_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_A2B10G10R10_SINT_PACK32</strong> = <literal>68</literal></paragraph>
            <paragraph>带符号整数 Alpha、蓝、绿、红通道数据格式，使用归一化的值，紧缩在 32 个比特位中。格式中包含 2 位 Alpha、10 位蓝、10 位绿、10 位红。蓝、绿、红的取值在 <literal>[-511, 511]</literal> 的范围内，Alpha 的取值在 <literal>[-1, 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16-unorm" names="class_renderingdevice_constant_data_format_r16_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16_UNORM</strong> = <literal>69</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16-snorm" names="class_renderingdevice_constant_data_format_r16_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16_SNORM</strong> = <literal>70</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16-uscaled" names="class_renderingdevice_constant_data_format_r16_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16_USCALED</strong> = <literal>71</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 65535.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16-sscaled" names="class_renderingdevice_constant_data_format_r16_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16_SSCALED</strong> = <literal>72</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-32767.0, 32767.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16-uint" names="class_renderingdevice_constant_data_format_r16_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16_UINT</strong> = <literal>73</literal></paragraph>
            <paragraph>每通道 16 位的无符号整数红通道数据格式。取值均在 <literal>[0.0, 65535]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16-sint" names="class_renderingdevice_constant_data_format_r16_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16_SINT</strong> = <literal>74</literal></paragraph>
            <paragraph>每通道 16 位的带符号整数红通道数据格式。取值均在 <literal>[-32767, 32767]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16-sfloat" names="class_renderingdevice_constant_data_format_r16_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16_SFLOAT</strong> = <literal>75</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16-unorm" names="class_renderingdevice_constant_data_format_r16g16_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16_UNORM</strong> = <literal>76</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红、绿通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16-snorm" names="class_renderingdevice_constant_data_format_r16g16_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16_SNORM</strong> = <literal>77</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16-uscaled" names="class_renderingdevice_constant_data_format_r16g16_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16_USCALED</strong> = <literal>78</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红、绿通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 65535.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16-sscaled" names="class_renderingdevice_constant_data_format_r16g16_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16_SSCALED</strong> = <literal>79</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-32767.0, 32767.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16-uint" names="class_renderingdevice_constant_data_format_r16g16_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16_UINT</strong> = <literal>80</literal></paragraph>
            <paragraph>每通道 16 位的无符号整数红、绿通道数据格式。取值均在 <literal>[0.0, 65535]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16-sint" names="class_renderingdevice_constant_data_format_r16g16_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16_SINT</strong> = <literal>81</literal></paragraph>
            <paragraph>每通道 16 位的带符号整数红、绿通道数据格式。取值均在 <literal>[-32767, 32767]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16-sfloat" names="class_renderingdevice_constant_data_format_r16g16_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16_SFLOAT</strong> = <literal>82</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16-unorm" names="class_renderingdevice_constant_data_format_r16g16b16_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16_UNORM</strong> = <literal>83</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红、绿、蓝通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16-snorm" names="class_renderingdevice_constant_data_format_r16g16b16_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16_SNORM</strong> = <literal>84</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿、蓝通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16-uscaled" names="class_renderingdevice_constant_data_format_r16g16b16_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16_USCALED</strong> = <literal>85</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红、绿、蓝通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 65535.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16-sscaled" names="class_renderingdevice_constant_data_format_r16g16b16_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16_SSCALED</strong> = <literal>86</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿、蓝通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-32767.0, 32767.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16-uint" names="class_renderingdevice_constant_data_format_r16g16b16_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16_UINT</strong> = <literal>87</literal></paragraph>
            <paragraph>每通道 16 位的无符号整数红、绿、蓝通道数据格式。取值均在 <literal>[0.0, 65535]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16-sint" names="class_renderingdevice_constant_data_format_r16g16b16_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16_SINT</strong> = <literal>88</literal></paragraph>
            <paragraph>每通道 16 位的带符号整数红、绿、蓝通道数据格式。取值均在 <literal>[-32767, 32767]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16-sfloat" names="class_renderingdevice_constant_data_format_r16g16b16_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16_SFLOAT</strong> = <literal>89</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿、蓝通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16a16-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16a16-unorm" names="class_renderingdevice_constant_data_format_r16g16b16a16_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16A16_UNORM</strong> = <literal>90</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16a16-snorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16a16-snorm" names="class_renderingdevice_constant_data_format_r16g16b16a16_snorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16A16_SNORM</strong> = <literal>91</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16a16-uscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16a16-uscaled" names="class_renderingdevice_constant_data_format_r16g16b16a16_uscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16A16_USCALED</strong> = <literal>92</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数红、绿、蓝、Alpha 通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[0.0, 65535.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16a16-sscaled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16a16-sscaled" names="class_renderingdevice_constant_data_format_r16g16b16a16_sscaled"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16A16_SSCALED</strong> = <literal>93</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿、蓝、Alpha 通道数据格式，使用缩放后的值（值从整数转换为浮点数）。取值均在 <literal>[-32767.0, 32767.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16a16-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16a16-uint" names="class_renderingdevice_constant_data_format_r16g16b16a16_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16A16_UINT</strong> = <literal>94</literal></paragraph>
            <paragraph>每通道 16 位的无符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[0.0, 65535]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16a16-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16a16-sint" names="class_renderingdevice_constant_data_format_r16g16b16a16_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16A16_SINT</strong> = <literal>95</literal></paragraph>
            <paragraph>每通道 16 位的带符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[-32767, 32767]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r16g16b16a16-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r16g16b16a16-sfloat" names="class_renderingdevice_constant_data_format_r16g16b16a16_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R16G16B16A16_SFLOAT</strong> = <literal>96</literal></paragraph>
            <paragraph>每通道 16 位的带符号浮点数红、绿、蓝、Alpha 通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32-uint" names="class_renderingdevice_constant_data_format_r32_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32_UINT</strong> = <literal>97</literal></paragraph>
            <paragraph>每通道 32 位的无符号整数红通道数据格式。取值均在 <literal>[0, 2^32 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32-sint" names="class_renderingdevice_constant_data_format_r32_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32_SINT</strong> = <literal>98</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红通道数据格式。取值均在 <literal>[2^31 + 1, 2^31 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32-sfloat" names="class_renderingdevice_constant_data_format_r32_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32_SFLOAT</strong> = <literal>99</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32-uint" names="class_renderingdevice_constant_data_format_r32g32_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32_UINT</strong> = <literal>100</literal></paragraph>
            <paragraph>每通道 32 位的无符号整数红、绿通道数据格式。取值均在 <literal>[0, 2^32 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32-sint" names="class_renderingdevice_constant_data_format_r32g32_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32_SINT</strong> = <literal>101</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红、绿通道数据格式。取值均在 <literal>[2^31 + 1, 2^31 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32-sfloat" names="class_renderingdevice_constant_data_format_r32g32_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32_SFLOAT</strong> = <literal>102</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红、绿通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32b32-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32b32-uint" names="class_renderingdevice_constant_data_format_r32g32b32_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32B32_UINT</strong> = <literal>103</literal></paragraph>
            <paragraph>每通道 32 位的无符号整数红、绿、蓝通道数据格式。取值均在 <literal>[0, 2^32 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32b32-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32b32-sint" names="class_renderingdevice_constant_data_format_r32g32b32_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32B32_SINT</strong> = <literal>104</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红、绿、蓝通道数据格式。取值均在 <literal>[2^31 + 1, 2^31 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32b32-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32b32-sfloat" names="class_renderingdevice_constant_data_format_r32g32b32_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32B32_SFLOAT</strong> = <literal>105</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红、绿、蓝通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32b32a32-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32b32a32-uint" names="class_renderingdevice_constant_data_format_r32g32b32a32_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32B32A32_UINT</strong> = <literal>106</literal></paragraph>
            <paragraph>每通道 32 位的无符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[0, 2^32 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32b32a32-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32b32a32-sint" names="class_renderingdevice_constant_data_format_r32g32b32a32_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32B32A32_SINT</strong> = <literal>107</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[2^31 + 1, 2^31 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r32g32b32a32-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r32g32b32a32-sfloat" names="class_renderingdevice_constant_data_format_r32g32b32a32_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R32G32B32A32_SFLOAT</strong> = <literal>108</literal></paragraph>
            <paragraph>每通道 32 位的带符号整数红、绿、蓝、Alpha 通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64-uint" names="class_renderingdevice_constant_data_format_r64_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64_UINT</strong> = <literal>109</literal></paragraph>
            <paragraph>每通道 64 位的无符号整数红通道数据格式。取值均在 <literal>[0, 2^64 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64-sint" names="class_renderingdevice_constant_data_format_r64_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64_SINT</strong> = <literal>110</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红通道数据格式。取值均在 <literal>[2^63 + 1, 2^63 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64-sfloat" names="class_renderingdevice_constant_data_format_r64_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64_SFLOAT</strong> = <literal>111</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64-uint" names="class_renderingdevice_constant_data_format_r64g64_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64_UINT</strong> = <literal>112</literal></paragraph>
            <paragraph>每通道 64 位的无符号整数红、绿通道数据格式。取值均在 <literal>[0, 2^64 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64-sint" names="class_renderingdevice_constant_data_format_r64g64_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64_SINT</strong> = <literal>113</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红、绿通道数据格式。取值均在 <literal>[2^63 + 1, 2^63 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64-sfloat" names="class_renderingdevice_constant_data_format_r64g64_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64_SFLOAT</strong> = <literal>114</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红、绿通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64b64-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64b64-uint" names="class_renderingdevice_constant_data_format_r64g64b64_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64B64_UINT</strong> = <literal>115</literal></paragraph>
            <paragraph>每通道 64 位的无符号整数红、绿、蓝通道数据格式。取值均在 <literal>[0, 2^64 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64b64-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64b64-sint" names="class_renderingdevice_constant_data_format_r64g64b64_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64B64_SINT</strong> = <literal>116</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红、绿、蓝通道数据格式。取值均在 <literal>[2^63 + 1, 2^63 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64b64-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64b64-sfloat" names="class_renderingdevice_constant_data_format_r64g64b64_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64B64_SFLOAT</strong> = <literal>117</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红、绿、蓝通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64b64a64-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64b64a64-uint" names="class_renderingdevice_constant_data_format_r64g64b64a64_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64B64A64_UINT</strong> = <literal>118</literal></paragraph>
            <paragraph>每通道 64 位的无符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[0, 2^64 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64b64a64-sint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64b64a64-sint" names="class_renderingdevice_constant_data_format_r64g64b64a64_sint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64B64A64_SINT</strong> = <literal>119</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红、绿、蓝、Alpha 通道数据格式。取值均在 <literal>[2^63 + 1, 2^63 - 1]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r64g64b64a64-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r64g64b64a64-sfloat" names="class_renderingdevice_constant_data_format_r64g64b64a64_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R64G64B64A64_SFLOAT</strong> = <literal>120</literal></paragraph>
            <paragraph>每通道 64 位的带符号整数红、绿、蓝、Alpha 通道数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b10g11r11-ufloat-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b10g11r11-ufloat-pack32" names="class_renderingdevice_constant_data_format_b10g11r11_ufloat_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B10G11R11_UFLOAT_PACK32</strong> = <literal>121</literal></paragraph>
            <paragraph>无符号浮点数蓝、绿、红数据格式，数值原样存储，紧缩在 32 个比特位中。该格式的精度为蓝通道 10 位、绿通道 11 位、红通道 11 位。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-e5b9g9r9-ufloat-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-e5b9g9r9-ufloat-pack32" names="class_renderingdevice_constant_data_format_e5b9g9r9_ufloat_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_E5B9G9R9_UFLOAT_PACK32</strong> = <literal>122</literal></paragraph>
            <paragraph>无符号浮点数曝光、蓝、绿、红数据格式，数值原样存储，紧缩在 32 个比特位中。该格式的精度为曝光 5 位、蓝通道 9 位、绿通道 9 位、红通道 9 位。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-d16-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-d16-unorm" names="class_renderingdevice_constant_data_format_d16_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_D16_UNORM</strong> = <literal>123</literal></paragraph>
            <paragraph>16 位无符号浮点数深度数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-x8-d24-unorm-pack32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-x8-d24-unorm-pack32" names="class_renderingdevice_constant_data_format_x8_d24_unorm_pack32"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_X8_D24_UNORM_PACK32</strong> = <literal>124</literal></paragraph>
            <paragraph>24 位无符号浮点数深度数据格式，使用归一化的值，另有 8 位未使用，紧缩在 32 个比特位中。深度取值在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-d32-sfloat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-d32-sfloat" names="class_renderingdevice_constant_data_format_d32_sfloat"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_D32_SFLOAT</strong> = <literal>125</literal></paragraph>
            <paragraph>32 位无符号浮点数深度数据格式，数值原样存储。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-s8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-s8-uint" names="class_renderingdevice_constant_data_format_s8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_S8_UINT</strong> = <literal>126</literal></paragraph>
            <paragraph>8 位无符号整数模板数据格式。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-d16-unorm-s8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-d16-unorm-s8-uint" names="class_renderingdevice_constant_data_format_d16_unorm_s8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_D16_UNORM_S8_UINT</strong> = <literal>127</literal></paragraph>
            <paragraph>16 位无符号浮点数深度数据格式，使用归一化的值，另有 8 位使用无符号整数格式的模板。深度取值在 <literal>[0.0, 1.0]</literal> 的范围内。模板取值在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-d24-unorm-s8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-d24-unorm-s8-uint" names="class_renderingdevice_constant_data_format_d24_unorm_s8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_D24_UNORM_S8_UINT</strong> = <literal>128</literal></paragraph>
            <paragraph>24 位无符号浮点数深度数据格式，使用归一化的值，另有 8 位使用无符号整数格式的模板。深度取值在 <literal>[0.0, 1.0]</literal> 的范围内。模板取值在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-d32-sfloat-s8-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-d32-sfloat-s8-uint" names="class_renderingdevice_constant_data_format_d32_sfloat_s8_uint"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_D32_SFLOAT_S8_UINT</strong> = <literal>129</literal></paragraph>
            <paragraph>32 位无符号浮点数深度数据格式，数值原样存储，另有 8 位使用无符号整数格式的模板。模板取值在 <literal>[0, 255]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc1-rgb-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc1-rgb-unorm-block" names="class_renderingdevice_constant_data_format_bc1_rgb_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC1_RGB_UNORM_BLOCK</strong> = <literal>130</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位。使用 BC1 纹理压缩（也叫 S3TC DXT1）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc1-rgb-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc1-rgb-srgb-block" names="class_renderingdevice_constant_data_format_bc1_rgb_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC1_RGB_SRGB_BLOCK</strong> = <literal>131</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位。使用 BC1 纹理压缩（也叫 S3TC DXT1）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc1-rgba-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc1-rgba-unorm-block" names="class_renderingdevice_constant_data_format_bc1_rgba_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC1_RGBA_UNORM_BLOCK</strong> = <literal>132</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位、Alpha 通道 1 位。使用 BC1 纹理压缩（也叫 S3TC DXT1）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc1-rgba-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc1-rgba-srgb-block" names="class_renderingdevice_constant_data_format_bc1_rgba_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC1_RGBA_SRGB_BLOCK</strong> = <literal>133</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位、Alpha 通道 1 位。使用 BC1 纹理压缩（也叫 S3TC DXT1）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc2-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc2-unorm-block" names="class_renderingdevice_constant_data_format_bc2_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC2_UNORM_BLOCK</strong> = <literal>134</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位、Alpha 通道 4 位。使用 BC2 纹理压缩（也叫 S3TC DXT3）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc2-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc2-srgb-block" names="class_renderingdevice_constant_data_format_bc2_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC2_SRGB_BLOCK</strong> = <literal>135</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位、Alpha 通道 4 位。使用 BC2 纹理压缩（也叫 S3TC DXT3）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc3-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc3-unorm-block" names="class_renderingdevice_constant_data_format_bc3_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC3_UNORM_BLOCK</strong> = <literal>136</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位、Alpha 通道 8 位。使用 BC3 纹理压缩（也叫 S3TC DXT5）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc3-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc3-srgb-block" names="class_renderingdevice_constant_data_format_bc3_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC3_SRGB_BLOCK</strong> = <literal>137</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 5 位、绿通道 6 位、蓝通道 5 位、Alpha 通道 8 位。使用 BC3 纹理压缩（也叫 S3TC DXT5）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc4-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc4-unorm-block" names="class_renderingdevice_constant_data_format_bc4_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC4_UNORM_BLOCK</strong> = <literal>138</literal></paragraph>
            <paragraph>显存压缩的无符号红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 8 位。使用 BC4 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc4-snorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc4-snorm-block" names="class_renderingdevice_constant_data_format_bc4_snorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC4_SNORM_BLOCK</strong> = <literal>139</literal></paragraph>
            <paragraph>显存压缩的带符号红通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。该格式的精度为红通道 8 位。使用 BC4 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc5-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc5-unorm-block" names="class_renderingdevice_constant_data_format_bc5_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC5_UNORM_BLOCK</strong> = <literal>140</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红通道 8 位、绿通道 8 位。使用 BC5 纹理压缩（也叫 S3TC RGTC）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc5-snorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc5-snorm-block" names="class_renderingdevice_constant_data_format_bc5_snorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC5_SNORM_BLOCK</strong> = <literal>141</literal></paragraph>
            <paragraph>显存压缩的带符号红、绿通道数据格式，使用归一化的值。取值均在 <literal>[-1.0, 1.0]</literal> 的范围内。该格式的精度为红通道 8 位、绿通道 8 位。使用 BC5 纹理压缩（也叫 S3TC RGTC）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc6h-ufloat-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc6h-ufloat-block" names="class_renderingdevice_constant_data_format_bc6h_ufloat_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC6H_UFLOAT_BLOCK</strong> = <literal>142</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝通道数据格式，浮点数值原样存储。该格式的精度为红通道 8 位、绿通道 8 位。使用 BC6H 纹理压缩（也叫 BPTC HDR）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc6h-sfloat-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc6h-sfloat-block" names="class_renderingdevice_constant_data_format_bc6h_sfloat_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC6H_SFLOAT_BLOCK</strong> = <literal>143</literal></paragraph>
            <paragraph>显存压缩的带符号红、绿、蓝通道数据格式，浮点数值原样存储。该格式的精度为红、绿、蓝通道在 4 到 7 位之间，Alpha 通道在 0 到 8 位之间。使用 BC7 纹理压缩（也叫 BPTC HDR）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc7-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc7-unorm-block" names="class_renderingdevice_constant_data_format_bc7_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC7_UNORM_BLOCK</strong> = <literal>144</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红、绿、蓝通道在 4 到 7 位之间，Alpha 通道在 0 到 8 位之间。使用 BC7 纹理压缩。也叫 BPTC HDR。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-bc7-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-bc7-srgb-block" names="class_renderingdevice_constant_data_format_bc7_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_BC7_SRGB_BLOCK</strong> = <literal>145</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。该格式的精度为红、绿、蓝通道在 4 到 7 位之间，Alpha 通道在 0 到 8 位之间。使用 BC7 纹理压缩。也叫 BPTC HDR。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-etc2-r8g8b8-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-etc2-r8g8b8-unorm-block" names="class_renderingdevice_constant_data_format_etc2_r8g8b8_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ETC2_R8G8B8_UNORM_BLOCK</strong> = <literal>146</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-etc2-r8g8b8-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-etc2-r8g8b8-srgb-block" names="class_renderingdevice_constant_data_format_etc2_r8g8b8_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ETC2_R8G8B8_SRGB_BLOCK</strong> = <literal>147</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-etc2-r8g8b8a1-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-etc2-r8g8b8a1-unorm-block" names="class_renderingdevice_constant_data_format_etc2_r8g8b8a1_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK</strong> = <literal>148</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。红、绿、蓝均使用 8 位精度，Alpha 使用 1 位精度。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-etc2-r8g8b8a1-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-etc2-r8g8b8a1-srgb-block" names="class_renderingdevice_constant_data_format_etc2_r8g8b8a1_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK</strong> = <literal>149</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。红、绿、蓝均使用 8 位精度，Alpha 使用 1 位精度。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-etc2-r8g8b8a8-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-etc2-r8g8b8a8-unorm-block" names="class_renderingdevice_constant_data_format_etc2_r8g8b8a8_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK</strong> = <literal>150</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。红、绿、蓝均使用 8 位精度，Alpha 使用 8 位精度。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-etc2-r8g8b8a8-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-etc2-r8g8b8a8-srgb-block" names="class_renderingdevice_constant_data_format_etc2_r8g8b8a8_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK</strong> = <literal>151</literal></paragraph>
            <paragraph>显存压缩的无符号红、绿、蓝、Alpha 通道数据格式，使用归一化的值、非线性 sRGB 编码。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。红、绿、蓝均使用 8 位精度，Alpha 使用 8 位精度。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-eac-r11-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-eac-r11-unorm-block" names="class_renderingdevice_constant_data_format_eac_r11_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_EAC_R11_UNORM_BLOCK</strong> = <literal>152</literal></paragraph>
            <paragraph>11 位显存压缩的无符号红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-eac-r11-snorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-eac-r11-snorm-block" names="class_renderingdevice_constant_data_format_eac_r11_snorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_EAC_R11_SNORM_BLOCK</strong> = <literal>153</literal></paragraph>
            <paragraph>11 位显存压缩的带符号红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-eac-r11g11-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-eac-r11g11-unorm-block" names="class_renderingdevice_constant_data_format_eac_r11g11_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_EAC_R11G11_UNORM_BLOCK</strong> = <literal>154</literal></paragraph>
            <paragraph>11 位显存压缩的无符号红、绿通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-eac-r11g11-snorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-eac-r11g11-snorm-block" names="class_renderingdevice_constant_data_format_eac_r11g11_snorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_EAC_R11G11_SNORM_BLOCK</strong> = <literal>155</literal></paragraph>
            <paragraph>11 位显存压缩的带符号红、绿通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ETC2 纹理压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-4x4-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-4x4-unorm-block" names="class_renderingdevice_constant_data_format_astc_4x4_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_4x4_UNORM_BLOCK</strong> = <literal>156</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 4x4 的区块内（质量最高）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-4x4-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-4x4-srgb-block" names="class_renderingdevice_constant_data_format_astc_4x4_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_4x4_SRGB_BLOCK</strong> = <literal>157</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 4x4 的区块内（质量最高）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-5x4-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-5x4-unorm-block" names="class_renderingdevice_constant_data_format_astc_5x4_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_5x4_UNORM_BLOCK</strong> = <literal>158</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 5x4 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-5x4-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-5x4-srgb-block" names="class_renderingdevice_constant_data_format_astc_5x4_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_5x4_SRGB_BLOCK</strong> = <literal>159</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 5x4 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-5x5-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-5x5-unorm-block" names="class_renderingdevice_constant_data_format_astc_5x5_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_5x5_UNORM_BLOCK</strong> = <literal>160</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 5x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-5x5-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-5x5-srgb-block" names="class_renderingdevice_constant_data_format_astc_5x5_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_5x5_SRGB_BLOCK</strong> = <literal>161</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 5x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-6x5-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-6x5-unorm-block" names="class_renderingdevice_constant_data_format_astc_6x5_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_6x5_UNORM_BLOCK</strong> = <literal>162</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 6x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-6x5-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-6x5-srgb-block" names="class_renderingdevice_constant_data_format_astc_6x5_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_6x5_SRGB_BLOCK</strong> = <literal>163</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 6x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-6x6-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-6x6-unorm-block" names="class_renderingdevice_constant_data_format_astc_6x6_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_6x6_UNORM_BLOCK</strong> = <literal>164</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 6x6 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-6x6-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-6x6-srgb-block" names="class_renderingdevice_constant_data_format_astc_6x6_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_6x6_SRGB_BLOCK</strong> = <literal>165</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 6x6 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-8x5-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-8x5-unorm-block" names="class_renderingdevice_constant_data_format_astc_8x5_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_8x5_UNORM_BLOCK</strong> = <literal>166</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 8x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-8x5-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-8x5-srgb-block" names="class_renderingdevice_constant_data_format_astc_8x5_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_8x5_SRGB_BLOCK</strong> = <literal>167</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 8x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-8x6-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-8x6-unorm-block" names="class_renderingdevice_constant_data_format_astc_8x6_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_8x6_UNORM_BLOCK</strong> = <literal>168</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 8x6 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-8x6-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-8x6-srgb-block" names="class_renderingdevice_constant_data_format_astc_8x6_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_8x6_SRGB_BLOCK</strong> = <literal>169</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 8x6 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-8x8-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-8x8-unorm-block" names="class_renderingdevice_constant_data_format_astc_8x8_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_8x8_UNORM_BLOCK</strong> = <literal>170</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 8x8 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-8x8-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-8x8-srgb-block" names="class_renderingdevice_constant_data_format_astc_8x8_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_8x8_SRGB_BLOCK</strong> = <literal>171</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 8x8 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x5-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x5-unorm-block" names="class_renderingdevice_constant_data_format_astc_10x5_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x5_UNORM_BLOCK</strong> = <literal>172</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 10x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x5-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x5-srgb-block" names="class_renderingdevice_constant_data_format_astc_10x5_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x5_SRGB_BLOCK</strong> = <literal>173</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 10x5 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x6-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x6-unorm-block" names="class_renderingdevice_constant_data_format_astc_10x6_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x6_UNORM_BLOCK</strong> = <literal>174</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 10x6 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x6-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x6-srgb-block" names="class_renderingdevice_constant_data_format_astc_10x6_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x6_SRGB_BLOCK</strong> = <literal>175</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 10x6 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x8-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x8-unorm-block" names="class_renderingdevice_constant_data_format_astc_10x8_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x8_UNORM_BLOCK</strong> = <literal>176</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 10x8 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x8-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x8-srgb-block" names="class_renderingdevice_constant_data_format_astc_10x8_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x8_SRGB_BLOCK</strong> = <literal>177</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 10x8 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x10-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x10-unorm-block" names="class_renderingdevice_constant_data_format_astc_10x10_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x10_UNORM_BLOCK</strong> = <literal>178</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 10x10 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-10x10-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-10x10-srgb-block" names="class_renderingdevice_constant_data_format_astc_10x10_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_10x10_SRGB_BLOCK</strong> = <literal>179</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 10x10 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-12x10-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-12x10-unorm-block" names="class_renderingdevice_constant_data_format_astc_12x10_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_12x10_UNORM_BLOCK</strong> = <literal>180</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 12x10 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-12x10-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-12x10-srgb-block" names="class_renderingdevice_constant_data_format_astc_12x10_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_12x10_SRGB_BLOCK</strong> = <literal>181</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 12x10 的区块内。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-12x12-unorm-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-12x12-unorm-block" names="class_renderingdevice_constant_data_format_astc_12x12_unorm_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_12x12_UNORM_BLOCK</strong> = <literal>182</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值，紧缩在 12 个区块内（质量最低）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-astc-12x12-srgb-block"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-astc-12x12-srgb-block" names="class_renderingdevice_constant_data_format_astc_12x12_srgb_block"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_ASTC_12x12_SRGB_BLOCK</strong> = <literal>183</literal></paragraph>
            <paragraph>显存压缩的无符号浮点数数据格式，使用归一化的值、非线性 sRGB 编码，紧缩在 12 个区块内（质量最低）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。使用 ASTC 压缩。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g8b8g8r8-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g8b8g8r8-422-unorm" names="class_renderingdevice_constant_data_format_g8b8g8r8_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G8B8G8R8_422_UNORM</strong> = <literal>184</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数绿、蓝、红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b8g8r8g8-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b8g8r8g8-422-unorm" names="class_renderingdevice_constant_data_format_b8g8r8g8_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B8G8R8G8_422_UNORM</strong> = <literal>185</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数蓝、绿、红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g8-b8-r8-3plane-420-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g8-b8-r8-3plane-420-unorm" names="class_renderingdevice_constant_data_format_g8_b8_r8_3plane_420_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G8_B8_R8_3PLANE_420_UNORM</strong> = <literal>186</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数绿、蓝、红通道数据格式，使用归一化的值，分别在三个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g8-b8r8-2plane-420-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g8-b8r8-2plane-420-unorm" names="class_renderingdevice_constant_data_format_g8_b8r8_2plane_420_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G8_B8R8_2PLANE_420_UNORM</strong> = <literal>187</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数绿、蓝、红通道数据格式，使用归一化的值，分别在两个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g8-b8-r8-3plane-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g8-b8-r8-3plane-422-unorm" names="class_renderingdevice_constant_data_format_g8_b8_r8_3plane_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G8_B8_R8_3PLANE_422_UNORM</strong> = <literal>188</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数绿、蓝、红通道数据格式，使用归一化的值，分别在两个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g8-b8r8-2plane-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g8-b8r8-2plane-422-unorm" names="class_renderingdevice_constant_data_format_g8_b8r8_2plane_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G8_B8R8_2PLANE_422_UNORM</strong> = <literal>189</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数绿、蓝、红通道数据格式，使用归一化的值，分别在两个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g8-b8-r8-3plane-444-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g8-b8-r8-3plane-444-unorm" names="class_renderingdevice_constant_data_format_g8_b8_r8_3plane_444_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G8_B8_R8_3PLANE_444_UNORM</strong> = <literal>190</literal></paragraph>
            <paragraph>每通道 8 位的无符号浮点数绿、蓝、红通道数据格式，使用归一化的值，分别在三个独立平面存储。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r10x6-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r10x6-unorm-pack16" names="class_renderingdevice_constant_data_format_r10x6_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R10X6_UNORM_PACK16</strong> = <literal>191</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数红通道数据，使用归一化的值，另有 6 位未使用，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r10x6g10x6-unorm-2pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r10x6g10x6-unorm-2pack16" names="class_renderingdevice_constant_data_format_r10x6g10x6_unorm_2pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R10X6G10X6_UNORM_2PACK16</strong> = <literal>192</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数红、绿通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 2x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r10x6g10x6b10x6a10x6-unorm-4pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r10x6g10x6b10x6a10x6-unorm-4pack16" names="class_renderingdevice_constant_data_format_r10x6g10x6b10x6a10x6_unorm_4pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16</strong> = <literal>193</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数红、绿、蓝、Alpha 通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 4x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g10x6b10x6g10x6r10x6-422-unorm-4pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g10x6b10x6g10x6r10x6-422-unorm-4pack16" names="class_renderingdevice_constant_data_format_g10x6b10x6g10x6r10x6_422_unorm_4pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16</strong> = <literal>194</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数绿、蓝、绿、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 4x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。绿通道出现两次，但包含不同的值，因此能够表示为完整的分辨率。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b10x6g10x6r10x6g10x6-422-unorm-4pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b10x6g10x6r10x6g10x6-422-unorm-4pack16" names="class_renderingdevice_constant_data_format_b10x6g10x6r10x6g10x6_422_unorm_4pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16</strong> = <literal>195</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数蓝、绿、红、绿通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 4x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。绿通道出现两次，但包含不同的值，因此能够表示为完整的分辨率。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g10x6-b10x6-r10x6-3plane-420-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g10x6-b10x6-r10x6-3plane-420-unorm-3pack16" names="class_renderingdevice_constant_data_format_g10x6_b10x6_r10x6_3plane_420_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16</strong> = <literal>196</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在两个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g10x6-b10x6r10x6-2plane-420-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g10x6-b10x6r10x6-2plane-420-unorm-3pack16" names="class_renderingdevice_constant_data_format_g10x6_b10x6r10x6_2plane_420_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16</strong> = <literal>197</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在两个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g10x6-b10x6-r10x6-3plane-422-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g10x6-b10x6-r10x6-3plane-422-unorm-3pack16" names="class_renderingdevice_constant_data_format_g10x6_b10x6_r10x6_3plane_422_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16</strong> = <literal>198</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在三个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g10x6-b10x6r10x6-2plane-422-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g10x6-b10x6r10x6-2plane-422-unorm-3pack16" names="class_renderingdevice_constant_data_format_g10x6_b10x6r10x6_2plane_422_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16</strong> = <literal>199</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在三个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g10x6-b10x6-r10x6-3plane-444-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g10x6-b10x6-r10x6-3plane-444-unorm-3pack16" names="class_renderingdevice_constant_data_format_g10x6_b10x6_r10x6_3plane_444_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16</strong> = <literal>200</literal></paragraph>
            <paragraph>每通道 10 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在三个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r12x4-unorm-pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r12x4-unorm-pack16" names="class_renderingdevice_constant_data_format_r12x4_unorm_pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R12X4_UNORM_PACK16</strong> = <literal>201</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数红通道数据，使用归一化的值，另有 6 位未使用，紧缩在 16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r12x4g12x4-unorm-2pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r12x4g12x4-unorm-2pack16" names="class_renderingdevice_constant_data_format_r12x4g12x4_unorm_2pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R12X4G12X4_UNORM_2PACK16</strong> = <literal>202</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数红、绿通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 2x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-r12x4g12x4b12x4a12x4-unorm-4pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-r12x4g12x4b12x4a12x4-unorm-4pack16" names="class_renderingdevice_constant_data_format_r12x4g12x4b12x4a12x4_unorm_4pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16</strong> = <literal>203</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数红、绿、蓝、Alpha 通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 4x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g12x4b12x4g12x4r12x4-422-unorm-4pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g12x4b12x4g12x4r12x4-422-unorm-4pack16" names="class_renderingdevice_constant_data_format_g12x4b12x4g12x4r12x4_422_unorm_4pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16</strong> = <literal>204</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数绿、蓝、绿、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 4x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。绿通道出现两次，但包含不同的值，因此能够表示为完整的分辨率。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b12x4g12x4r12x4g12x4-422-unorm-4pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b12x4g12x4r12x4g12x4-422-unorm-4pack16" names="class_renderingdevice_constant_data_format_b12x4g12x4r12x4g12x4_422_unorm_4pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16</strong> = <literal>205</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数蓝、绿、红、绿通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 4x16 个比特位中。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。绿通道出现两次，但包含不同的值，因此能够表示为完整的分辨率。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g12x4-b12x4-r12x4-3plane-420-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g12x4-b12x4-r12x4-3plane-420-unorm-3pack16" names="class_renderingdevice_constant_data_format_g12x4_b12x4_r12x4_3plane_420_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16</strong> = <literal>206</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在两个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g12x4-b12x4r12x4-2plane-420-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g12x4-b12x4r12x4-2plane-420-unorm-3pack16" names="class_renderingdevice_constant_data_format_g12x4_b12x4r12x4_2plane_420_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16</strong> = <literal>207</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在两个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g12x4-b12x4-r12x4-3plane-422-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g12x4-b12x4-r12x4-3plane-422-unorm-3pack16" names="class_renderingdevice_constant_data_format_g12x4_b12x4_r12x4_3plane_422_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16</strong> = <literal>208</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在三个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g12x4-b12x4r12x4-2plane-422-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g12x4-b12x4r12x4-2plane-422-unorm-3pack16" names="class_renderingdevice_constant_data_format_g12x4_b12x4r12x4_2plane_422_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16</strong> = <literal>209</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在三个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g12x4-b12x4-r12x4-3plane-444-unorm-3pack16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g12x4-b12x4-r12x4-3plane-444-unorm-3pack16" names="class_renderingdevice_constant_data_format_g12x4_b12x4_r12x4_3plane_444_unorm_3pack16"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16</strong> = <literal>210</literal></paragraph>
            <paragraph>每通道 12 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用，紧缩在 3x16 个比特位中，分别在三个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g16b16g16r16-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g16b16g16r16-422-unorm" names="class_renderingdevice_constant_data_format_g16b16g16r16_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G16B16G16R16_422_UNORM</strong> = <literal>211</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数绿、蓝、红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-b16g16r16g16-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-b16g16r16g16-422-unorm" names="class_renderingdevice_constant_data_format_b16g16r16g16_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_B16G16R16G16_422_UNORM</strong> = <literal>212</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数蓝、绿、红通道数据格式，使用归一化的值。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g16-b16-r16-3plane-420-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g16-b16-r16-3plane-420-unorm" names="class_renderingdevice_constant_data_format_g16_b16_r16_3plane_420_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G16_B16_R16_3PLANE_420_UNORM</strong> = <literal>213</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用。分别在两个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g16-b16r16-2plane-420-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g16-b16r16-2plane-420-unorm" names="class_renderingdevice_constant_data_format_g16_b16r16_2plane_420_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G16_B16R16_2PLANE_420_UNORM</strong> = <literal>214</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用。分别在两个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据纵横半分辨率存储（即 2x2 相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g16-b16-r16-3plane-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g16-b16-r16-3plane-422-unorm" names="class_renderingdevice_constant_data_format_g16_b16_r16_3plane_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G16_B16_R16_3PLANE_422_UNORM</strong> = <literal>215</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用。分别在三个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g16-b16r16-2plane-422-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g16-b16r16-2plane-422-unorm" names="class_renderingdevice_constant_data_format_g16_b16r16_2plane_422_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G16_B16R16_2PLANE_422_UNORM</strong> = <literal>216</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用。分别在三个独立平面存储（绿 + 蓝、红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。蓝、红通道数据横向半分辨率存储（即两个横向相邻的像素共享同一个蓝、红通道数值）。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-g16-b16-r16-3plane-444-unorm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-g16-b16-r16-3plane-444-unorm" names="class_renderingdevice_constant_data_format_g16_b16_r16_3plane_444_unorm"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_G16_B16_R16_3PLANE_444_UNORM</strong> = <literal>217</literal></paragraph>
            <paragraph>每通道 16 位的无符号浮点数绿、蓝、红通道数据，使用归一化的值，每个通道均另有 6 位未使用。分别在三个独立平面存储（绿 + 蓝 + 红）。取值均在 <literal>[0.0, 1.0]</literal> 的范围内。</paragraph>
            <target refid="class-renderingdevice-constant-data-format-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-data-format-max" names="class_renderingdevice_constant_data_format_max"><reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> <strong>DATA_FORMAT_MAX</strong> = <literal>218</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-barriermask"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-barriermask" names="enum_renderingdevice_barriermask">flags <strong>BarrierMask</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-barrier-mask-vertex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-barrier-mask-vertex" names="class_renderingdevice_constant_barrier_mask_vertex"><reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference> <strong>BARRIER_MASK_VERTEX</strong> = <literal>1</literal></paragraph>
            <paragraph>顶点着色器屏障掩码。</paragraph>
            <target refid="class-renderingdevice-constant-barrier-mask-fragment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-barrier-mask-fragment" names="class_renderingdevice_constant_barrier_mask_fragment"><reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference> <strong>BARRIER_MASK_FRAGMENT</strong> = <literal>8</literal></paragraph>
            <paragraph>片段着色器屏障掩码。</paragraph>
            <target refid="class-renderingdevice-constant-barrier-mask-compute"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-barrier-mask-compute" names="class_renderingdevice_constant_barrier_mask_compute"><reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference> <strong>BARRIER_MASK_COMPUTE</strong> = <literal>2</literal></paragraph>
            <paragraph>计算屏障掩码。</paragraph>
            <target refid="class-renderingdevice-constant-barrier-mask-transfer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-barrier-mask-transfer" names="class_renderingdevice_constant_barrier_mask_transfer"><reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference> <strong>BARRIER_MASK_TRANSFER</strong> = <literal>4</literal></paragraph>
            <paragraph>传输屏障掩码。</paragraph>
            <target refid="class-renderingdevice-constant-barrier-mask-raster"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-barrier-mask-raster" names="class_renderingdevice_constant_barrier_mask_raster"><reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference> <strong>BARRIER_MASK_RASTER</strong> = <literal>9</literal></paragraph>
            <paragraph>光栅屏障掩码（顶点及片段）。等价于 <literal>BARRIER_MASK_VERTEX | BARRIER_MASK_FRAGMENT</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-barrier-mask-all-barriers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-barrier-mask-all-barriers" names="class_renderingdevice_constant_barrier_mask_all_barriers"><reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference> <strong>BARRIER_MASK_ALL_BARRIERS</strong> = <literal>32767</literal></paragraph>
            <paragraph>所有类型的屏障掩码（顶点、片段、计算、传输）。</paragraph>
            <target refid="class-renderingdevice-constant-barrier-mask-no-barrier"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-barrier-mask-no-barrier" names="class_renderingdevice_constant_barrier_mask_no_barrier"><reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference> <strong>BARRIER_MASK_NO_BARRIER</strong> = <literal>32768</literal></paragraph>
            <paragraph>任何类型都没有屏障。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-texturetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-texturetype" names="enum_renderingdevice_texturetype">enum <strong>TextureType</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-1d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-1d" names="class_renderingdevice_constant_texture_type_1d"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_1D</strong> = <literal>0</literal></paragraph>
            <paragraph>一维纹理。</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-2d" names="class_renderingdevice_constant_texture_type_2d"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_2D</strong> = <literal>1</literal></paragraph>
            <paragraph>二维纹理。</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-3d" names="class_renderingdevice_constant_texture_type_3d"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_3D</strong> = <literal>2</literal></paragraph>
            <paragraph>三维纹理。</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-cube"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-cube" names="class_renderingdevice_constant_texture_type_cube"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_CUBE</strong> = <literal>3</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 纹理。</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-1d-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-1d-array" names="class_renderingdevice_constant_texture_type_1d_array"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_1D_ARRAY</strong> = <literal>4</literal></paragraph>
            <paragraph>一维纹理数组。</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-2d-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-2d-array" names="class_renderingdevice_constant_texture_type_2d_array"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_2D_ARRAY</strong> = <literal>5</literal></paragraph>
            <paragraph>二维纹理数组。</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-cube-array"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-cube-array" names="class_renderingdevice_constant_texture_type_cube_array"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_CUBE_ARRAY</strong> = <literal>6</literal></paragraph>
            <paragraph><reference internal="True" refuri="class_cubemap#class-cubemap"><inline classes="std std-ref">Cubemap</inline></reference> 纹理数组。</paragraph>
            <target refid="class-renderingdevice-constant-texture-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-type-max" names="class_renderingdevice_constant_texture_type_max"><reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> <strong>TEXTURE_TYPE_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-texturesamples"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-texturesamples" names="enum_renderingdevice_texturesamples">enum <strong>TextureSamples</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-1" names="class_renderingdevice_constant_texture_samples_1"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_1</strong> = <literal>0</literal></paragraph>
            <paragraph>执行 1 次纹理采样（最快，但抗锯齿质量最低）。</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-2" names="class_renderingdevice_constant_texture_samples_2"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_2</strong> = <literal>1</literal></paragraph>
            <paragraph>执行 2 次纹理采样。</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-4"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-4" names="class_renderingdevice_constant_texture_samples_4"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_4</strong> = <literal>2</literal></paragraph>
            <paragraph>执行 4 次纹理采样。</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-8"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-8" names="class_renderingdevice_constant_texture_samples_8"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_8</strong> = <literal>3</literal></paragraph>
            <paragraph>执行 8 次纹理采样。移动 GPU 不支持（包括 Apple Silicon）。</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-16" names="class_renderingdevice_constant_texture_samples_16"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_16</strong> = <literal>4</literal></paragraph>
            <paragraph>执行 16 次纹理采样。移动 GPU 及许多桌面 GPU 均不支持。</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-32" names="class_renderingdevice_constant_texture_samples_32"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_32</strong> = <literal>5</literal></paragraph>
            <paragraph>执行 32 次纹理采样。大多数 GPU 均不支持。</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-64"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-64" names="class_renderingdevice_constant_texture_samples_64"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_64</strong> = <literal>6</literal></paragraph>
            <paragraph>执行 64 次纹理采样（最慢，但抗锯齿质量最高）。大多数 GPU 均不支持。</paragraph>
            <target refid="class-renderingdevice-constant-texture-samples-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-samples-max" names="class_renderingdevice_constant_texture_samples_max"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>TEXTURE_SAMPLES_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-textureusagebits"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-textureusagebits" names="enum_renderingdevice_textureusagebits">flags <strong>TextureUsageBits</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-sampling-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-sampling-bit" names="class_renderingdevice_constant_texture_usage_sampling_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_SAMPLING_BIT</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理可以采样。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-color-attachment-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-color-attachment-bit" names="class_renderingdevice_constant_texture_usage_color_attachment_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_COLOR_ATTACHMENT_BIT</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理可以用作帧缓冲的颜色附件。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-depth-stencil-attachment-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-depth-stencil-attachment-bit" names="class_renderingdevice_constant_texture_usage_depth_stencil_attachment_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</strong> = <literal>4</literal></paragraph>
            <paragraph>纹理可以用作帧缓冲的深度/模板附件。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-storage-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-storage-bit" names="class_renderingdevice_constant_texture_usage_storage_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_STORAGE_BIT</strong> = <literal>8</literal></paragraph>
            <paragraph>纹理可以用作<reference name="存储图像" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage">存储图像</reference>。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-storage-atomic-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-storage-atomic-bit" names="class_renderingdevice_constant_texture_usage_storage_atomic_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_STORAGE_ATOMIC_BIT</strong> = <literal>16</literal></paragraph>
            <paragraph>纹理可以用作支持原子操作的<reference name="存储图像" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-storageimage">存储图像</reference>。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-cpu-read-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-cpu-read-bit" names="class_renderingdevice_constant_texture_usage_cpu_read_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_CPU_READ_BIT</strong> = <literal>32</literal></paragraph>
            <paragraph>纹理可以在 CPU 上使用 <reference internal="True" refid="class-renderingdevice-method-texture-get-data"><inline classes="std std-ref">texture_get_data</inline></reference> 读取，比不设置这一位要快，因为会始终在系统内存中保留。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-can-update-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-can-update-bit" names="class_renderingdevice_constant_texture_usage_can_update_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_CAN_UPDATE_BIT</strong> = <literal>64</literal></paragraph>
            <paragraph>纹理可以使用 <reference internal="True" refid="class-renderingdevice-method-texture-update"><inline classes="std std-ref">texture_update</inline></reference> 更新。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-can-copy-from-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-can-copy-from-bit" names="class_renderingdevice_constant_texture_usage_can_copy_from_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_CAN_COPY_FROM_BIT</strong> = <literal>128</literal></paragraph>
            <paragraph>纹理可以作为 <reference internal="True" refid="class-renderingdevice-method-texture-copy"><inline classes="std std-ref">texture_copy</inline></reference> 的来源。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-can-copy-to-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-can-copy-to-bit" names="class_renderingdevice_constant_texture_usage_can_copy_to_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_CAN_COPY_TO_BIT</strong> = <literal>256</literal></paragraph>
            <paragraph>纹理可以作为 <reference internal="True" refid="class-renderingdevice-method-texture-copy"><inline classes="std std-ref">texture_copy</inline></reference> 的目标。</paragraph>
            <target refid="class-renderingdevice-constant-texture-usage-input-attachment-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-usage-input-attachment-bit" names="class_renderingdevice_constant_texture_usage_input_attachment_bit"><reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference> <strong>TEXTURE_USAGE_INPUT_ATTACHMENT_BIT</strong> = <literal>512</literal></paragraph>
            <paragraph>纹理可以用作帧缓冲的<reference name="输入附件" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#descriptorsets-inputattachment">输入附件</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-textureswizzle"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-textureswizzle" names="enum_renderingdevice_textureswizzle">enum <strong>TextureSwizzle</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-identity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-identity" names="class_renderingdevice_constant_texture_swizzle_identity"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_IDENTITY</strong> = <literal>0</literal></paragraph>
            <paragraph>原样返回采样数值。</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-zero"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-zero" names="class_renderingdevice_constant_texture_swizzle_zero"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_ZERO</strong> = <literal>1</literal></paragraph>
            <paragraph>采样时使用返回 <literal>0.0</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-one"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-one" names="class_renderingdevice_constant_texture_swizzle_one"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_ONE</strong> = <literal>2</literal></paragraph>
            <paragraph>采样时使用返回 <literal>1.0</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-r"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-r" names="class_renderingdevice_constant_texture_swizzle_r"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_R</strong> = <literal>3</literal></paragraph>
            <paragraph>对红色通道进行采样。</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-g"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-g" names="class_renderingdevice_constant_texture_swizzle_g"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_G</strong> = <literal>4</literal></paragraph>
            <paragraph>对绿色通道进行采样。</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-b"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-b" names="class_renderingdevice_constant_texture_swizzle_b"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_B</strong> = <literal>5</literal></paragraph>
            <paragraph>对蓝色通道进行采样。</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-a"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-a" names="class_renderingdevice_constant_texture_swizzle_a"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_A</strong> = <literal>6</literal></paragraph>
            <paragraph>对 Alpha 通道进行采样。</paragraph>
            <target refid="class-renderingdevice-constant-texture-swizzle-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-swizzle-max" names="class_renderingdevice_constant_texture_swizzle_max"><reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> <strong>TEXTURE_SWIZZLE_MAX</strong> = <literal>7</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-textureswizzle"><inline classes="std std-ref">TextureSwizzle</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-textureslicetype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-textureslicetype" names="enum_renderingdevice_textureslicetype">enum <strong>TextureSliceType</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-texture-slice-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-slice-2d" names="class_renderingdevice_constant_texture_slice_2d"><reference internal="True" refid="enum-renderingdevice-textureslicetype"><inline classes="std std-ref">TextureSliceType</inline></reference> <strong>TEXTURE_SLICE_2D</strong> = <literal>0</literal></paragraph>
            <paragraph>二维纹理切片。</paragraph>
            <target refid="class-renderingdevice-constant-texture-slice-cubemap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-slice-cubemap" names="class_renderingdevice_constant_texture_slice_cubemap"><reference internal="True" refid="enum-renderingdevice-textureslicetype"><inline classes="std std-ref">TextureSliceType</inline></reference> <strong>TEXTURE_SLICE_CUBEMAP</strong> = <literal>1</literal></paragraph>
            <paragraph>立方体贴图纹理切片。</paragraph>
            <target refid="class-renderingdevice-constant-texture-slice-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-texture-slice-3d" names="class_renderingdevice_constant_texture_slice_3d"><reference internal="True" refid="enum-renderingdevice-textureslicetype"><inline classes="std std-ref">TextureSliceType</inline></reference> <strong>TEXTURE_SLICE_3D</strong> = <literal>2</literal></paragraph>
            <paragraph>三维纹理切片。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-samplerfilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-samplerfilter" names="enum_renderingdevice_samplerfilter">enum <strong>SamplerFilter</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-sampler-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-filter-nearest" names="class_renderingdevice_constant_sampler_filter_nearest"><reference internal="True" refid="enum-renderingdevice-samplerfilter"><inline classes="std std-ref">SamplerFilter</inline></reference> <strong>SAMPLER_FILTER_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>最近邻采样器过滤。按照比源更高分辨率采样时，会产生像素化的效果。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-filter-linear" names="class_renderingdevice_constant_sampler_filter_linear"><reference internal="True" refid="enum-renderingdevice-samplerfilter"><inline classes="std std-ref">SamplerFilter</inline></reference> <strong>SAMPLER_FILTER_LINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>双线性采样器过滤。按照比源更高分辨率采样时，会产生模糊的效果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-samplerrepeatmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-samplerrepeatmode" names="enum_renderingdevice_samplerrepeatmode">enum <strong>SamplerRepeatMode</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-sampler-repeat-mode-repeat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-repeat-mode-repeat" names="class_renderingdevice_constant_sampler_repeat_mode_repeat"><reference internal="True" refid="enum-renderingdevice-samplerrepeatmode"><inline classes="std std-ref">SamplerRepeatMode</inline></reference> <strong>SAMPLER_REPEAT_MODE_REPEAT</strong> = <literal>0</literal></paragraph>
            <paragraph>启用重复采样。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-repeat-mode-mirrored-repeat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-repeat-mode-mirrored-repeat" names="class_renderingdevice_constant_sampler_repeat_mode_mirrored_repeat"><reference internal="True" refid="enum-renderingdevice-samplerrepeatmode"><inline classes="std std-ref">SamplerRepeatMode</inline></reference> <strong>SAMPLER_REPEAT_MODE_MIRRORED_REPEAT</strong> = <literal>1</literal></paragraph>
            <paragraph>启用镜像重复采样。对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回采样器的镜像版本。如果采样的是更远的位置，则会对镜像版本再次镜像，并按照这样的规律无限重复下去。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-edge"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-edge" names="class_renderingdevice_constant_sampler_repeat_mode_clamp_to_edge"><reference internal="True" refid="enum-renderingdevice-samplerrepeatmode"><inline classes="std std-ref">SamplerRepeatMode</inline></reference> <strong>SAMPLER_REPEAT_MODE_CLAMP_TO_EDGE</strong> = <literal>2</literal></paragraph>
            <paragraph>禁用重复采样。对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回边缘上最后一个像素的颜色。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border" names="class_renderingdevice_constant_sampler_repeat_mode_clamp_to_border"><reference internal="True" refid="enum-renderingdevice-samplerrepeatmode"><inline classes="std std-ref">SamplerRepeatMode</inline></reference> <strong>SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER</strong> = <literal>3</literal></paragraph>
            <paragraph>禁用重复采样。对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回指定的边框颜色 <reference internal="True" refuri="class_rdsamplerstate#class-rdsamplerstate-property-border-color"><inline classes="std std-ref">RDSamplerState.border_color</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-repeat-mode-mirror-clamp-to-edge"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-repeat-mode-mirror-clamp-to-edge" names="class_renderingdevice_constant_sampler_repeat_mode_mirror_clamp_to_edge"><reference internal="True" refid="enum-renderingdevice-samplerrepeatmode"><inline classes="std std-ref">SamplerRepeatMode</inline></reference> <strong>SAMPLER_REPEAT_MODE_MIRROR_CLAMP_TO_EDGE</strong> = <literal>4</literal></paragraph>
            <paragraph>启用单次镜像重复采样。对 <literal>[-1.0, 0.0]</literal> 范围进行采样时，返回采样器的镜像版本。对 <literal>[-1.0, 1.0]</literal> 范围外进行采样时，返回边缘上最后一个像素的颜色。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-repeat-mode-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-repeat-mode-max" names="class_renderingdevice_constant_sampler_repeat_mode_max"><reference internal="True" refid="enum-renderingdevice-samplerrepeatmode"><inline classes="std std-ref">SamplerRepeatMode</inline></reference> <strong>SAMPLER_REPEAT_MODE_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-samplerrepeatmode"><inline classes="std std-ref">SamplerRepeatMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-samplerbordercolor"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-samplerbordercolor" names="enum_renderingdevice_samplerbordercolor">enum <strong>SamplerBorderColor</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-sampler-border-color-float-transparent-black"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-border-color-float-transparent-black" names="class_renderingdevice_constant_sampler_border_color_float_transparent_black"><reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> <strong>SAMPLER_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK</strong> = <literal>0</literal></paragraph>
            <paragraph>对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回浮点型的透明黑色。仅在采样器的重复模式为 <reference internal="True" refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border"><inline classes="std std-ref">SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER</inline></reference> 时有效。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-border-color-int-transparent-black"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-border-color-int-transparent-black" names="class_renderingdevice_constant_sampler_border_color_int_transparent_black"><reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> <strong>SAMPLER_BORDER_COLOR_INT_TRANSPARENT_BLACK</strong> = <literal>1</literal></paragraph>
            <paragraph>对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回整型的透明黑色。仅在采样器的重复模式为 <reference internal="True" refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border"><inline classes="std std-ref">SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER</inline></reference> 时有效。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-border-color-float-opaque-black"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-border-color-float-opaque-black" names="class_renderingdevice_constant_sampler_border_color_float_opaque_black"><reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> <strong>SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_BLACK</strong> = <literal>2</literal></paragraph>
            <paragraph>对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回浮点型的不透明黑色。仅在采样器的重复模式为 <reference internal="True" refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border"><inline classes="std std-ref">SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER</inline></reference> 时有效。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-border-color-int-opaque-black"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-border-color-int-opaque-black" names="class_renderingdevice_constant_sampler_border_color_int_opaque_black"><reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> <strong>SAMPLER_BORDER_COLOR_INT_OPAQUE_BLACK</strong> = <literal>3</literal></paragraph>
            <paragraph>对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回整型的不透明黑色。仅在采样器的重复模式为 <reference internal="True" refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border"><inline classes="std std-ref">SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER</inline></reference> 时有效。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-border-color-float-opaque-white"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-border-color-float-opaque-white" names="class_renderingdevice_constant_sampler_border_color_float_opaque_white"><reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> <strong>SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_WHITE</strong> = <literal>4</literal></paragraph>
            <paragraph>对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回浮点型的不透明白色。仅在采样器的重复模式为 <reference internal="True" refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border"><inline classes="std std-ref">SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER</inline></reference> 时有效。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-border-color-int-opaque-white"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-border-color-int-opaque-white" names="class_renderingdevice_constant_sampler_border_color_int_opaque_white"><reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> <strong>SAMPLER_BORDER_COLOR_INT_OPAQUE_WHITE</strong> = <literal>5</literal></paragraph>
            <paragraph>对 <literal>[0.0, 1.0]</literal> 范围外进行采样时，返回整型的不透明白色。仅在采样器的重复模式为 <reference internal="True" refid="class-renderingdevice-constant-sampler-repeat-mode-clamp-to-border"><inline classes="std std-ref">SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER</inline></reference> 时有效。</paragraph>
            <target refid="class-renderingdevice-constant-sampler-border-color-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-sampler-border-color-max" names="class_renderingdevice_constant_sampler_border_color_max"><reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> <strong>SAMPLER_BORDER_COLOR_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-samplerbordercolor"><inline classes="std std-ref">SamplerBorderColor</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-vertexfrequency"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-vertexfrequency" names="enum_renderingdevice_vertexfrequency">enum <strong>VertexFrequency</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-vertex-frequency-vertex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-vertex-frequency-vertex" names="class_renderingdevice_constant_vertex_frequency_vertex"><reference internal="True" refid="enum-renderingdevice-vertexfrequency"><inline classes="std std-ref">VertexFrequency</inline></reference> <strong>VERTEX_FREQUENCY_VERTEX</strong> = <literal>0</literal></paragraph>
            <paragraph>顶点属性寻址是顶点的功能。用于指定从缓冲中拉取顶点属性的频率。</paragraph>
            <target refid="class-renderingdevice-constant-vertex-frequency-instance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-vertex-frequency-instance" names="class_renderingdevice_constant_vertex_frequency_instance"><reference internal="True" refid="enum-renderingdevice-vertexfrequency"><inline classes="std std-ref">VertexFrequency</inline></reference> <strong>VERTEX_FREQUENCY_INSTANCE</strong> = <literal>1</literal></paragraph>
            <paragraph>顶点属性寻址是实例索引的功能。用于指定从缓冲中拉取顶点属性的频率。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-indexbufferformat"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-indexbufferformat" names="enum_renderingdevice_indexbufferformat">enum <strong>IndexBufferFormat</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-index-buffer-format-uint16"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-index-buffer-format-uint16" names="class_renderingdevice_constant_index_buffer_format_uint16"><reference internal="True" refid="enum-renderingdevice-indexbufferformat"><inline classes="std std-ref">IndexBufferFormat</inline></reference> <strong>INDEX_BUFFER_FORMAT_UINT16</strong> = <literal>0</literal></paragraph>
            <paragraph>16 位无符号整数格式的索引缓冲。对可指定索引最大值的限制为 <literal>65535</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-index-buffer-format-uint32"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-index-buffer-format-uint32" names="class_renderingdevice_constant_index_buffer_format_uint32"><reference internal="True" refid="enum-renderingdevice-indexbufferformat"><inline classes="std std-ref">IndexBufferFormat</inline></reference> <strong>INDEX_BUFFER_FORMAT_UINT32</strong> = <literal>1</literal></paragraph>
            <paragraph>32 位无符号整数格式的索引缓冲。对可指定索引最大值的限制为 <literal>4294967295</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-storagebufferusage"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-storagebufferusage" names="enum_renderingdevice_storagebufferusage">flags <strong>StorageBufferUsage</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-storage-buffer-usage-dispatch-indirect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-storage-buffer-usage-dispatch-indirect" names="class_renderingdevice_constant_storage_buffer_usage_dispatch_indirect"><reference internal="True" refid="enum-renderingdevice-storagebufferusage"><inline classes="std std-ref">StorageBufferUsage</inline></reference> <strong>STORAGE_BUFFER_USAGE_DISPATCH_INDIRECT</strong> = <literal>1</literal></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-uniformtype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-uniformtype" names="enum_renderingdevice_uniformtype">enum <strong>UniformType</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-sampler"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-sampler" names="class_renderingdevice_constant_uniform_type_sampler"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_SAMPLER</strong> = <literal>0</literal></paragraph>
            <paragraph>采样器 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-sampler-with-texture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-sampler-with-texture" names="class_renderingdevice_constant_uniform_type_sampler_with_texture"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_SAMPLER_WITH_TEXTURE</strong> = <literal>1</literal></paragraph>
            <paragraph>带有纹理的采样器 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-texture"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-texture" names="class_renderingdevice_constant_uniform_type_texture"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_TEXTURE</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-image"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-image" names="class_renderingdevice_constant_uniform_type_image"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_IMAGE</strong> = <literal>3</literal></paragraph>
            <paragraph>图像 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-texture-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-texture-buffer" names="class_renderingdevice_constant_uniform_type_texture_buffer"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_TEXTURE_BUFFER</strong> = <literal>4</literal></paragraph>
            <paragraph>纹理缓冲 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-sampler-with-texture-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-sampler-with-texture-buffer" names="class_renderingdevice_constant_uniform_type_sampler_with_texture_buffer"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_SAMPLER_WITH_TEXTURE_BUFFER</strong> = <literal>5</literal></paragraph>
            <paragraph>带有纹理缓冲的采样器 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-image-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-image-buffer" names="class_renderingdevice_constant_uniform_type_image_buffer"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_IMAGE_BUFFER</strong> = <literal>6</literal></paragraph>
            <paragraph>图像缓冲 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-uniform-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-uniform-buffer" names="class_renderingdevice_constant_uniform_type_uniform_buffer"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_UNIFORM_BUFFER</strong> = <literal>7</literal></paragraph>
            <paragraph>Uniform 缓冲区 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-storage-buffer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-storage-buffer" names="class_renderingdevice_constant_uniform_type_storage_buffer"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_STORAGE_BUFFER</strong> = <literal>8</literal></paragraph>
            <paragraph><reference name="存储缓冲区" refuri="https://vkguide.dev/docs/chapter-4/storage_buffers/">存储缓冲区</reference> uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-input-attachment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-input-attachment" names="class_renderingdevice_constant_uniform_type_input_attachment"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_INPUT_ATTACHMENT</strong> = <literal>9</literal></paragraph>
            <paragraph>输入附件 uniform。</paragraph>
            <target refid="class-renderingdevice-constant-uniform-type-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-uniform-type-max" names="class_renderingdevice_constant_uniform_type_max"><reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> <strong>UNIFORM_TYPE_MAX</strong> = <literal>10</literal></paragraph>
            <paragraph>表示 <reference internal="True" refid="enum-renderingdevice-uniformtype"><inline classes="std std-ref">UniformType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-renderprimitive"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-renderprimitive" names="enum_renderingdevice_renderprimitive">enum <strong>RenderPrimitive</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-points"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-points" names="class_renderingdevice_constant_render_primitive_points"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_POINTS</strong> = <literal>0</literal></paragraph>
            <paragraph>渲染点的图元（大小为常量，和与相机之间的距离无关）。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-lines"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-lines" names="class_renderingdevice_constant_render_primitive_lines"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_LINES</strong> = <literal>1</literal></paragraph>
            <paragraph>渲染线段列表的图元。线段在绘制时是彼此独立的。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-lines-with-adjacency"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-lines-with-adjacency" names="class_renderingdevice_constant_render_primitive_lines_with_adjacency"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_LINES_WITH_ADJACENCY</strong> = <literal>2</literal></paragraph>
            <paragraph><reference name="渲染线段列表的图元，提供邻接数据。" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-lists-with-adjacency">渲染线段列表的图元，提供邻接数据。</reference></paragraph>
            <paragraph><strong>注意：</strong>邻接数据仅在几何着色器中有用，但 Godot 并没有暴露。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-linestrips"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-linestrips" names="class_renderingdevice_constant_render_primitive_linestrips"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_LINESTRIPS</strong> = <literal>3</literal></paragraph>
            <paragraph>渲染线段条带的图元。绘制的线段与它的前一个顶点是相连的。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-linestrips-with-adjacency"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-linestrips-with-adjacency" names="class_renderingdevice_constant_render_primitive_linestrips_with_adjacency"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_LINESTRIPS_WITH_ADJACENCY</strong> = <literal>4</literal></paragraph>
            <paragraph><reference name="渲染线段条带的图元，提供邻接数据。" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-line-strips-with-adjacency">渲染线段条带的图元，提供邻接数据。</reference></paragraph>
            <paragraph><strong>注意：</strong>邻接数据仅在几何着色器中有用，但 Godot 并没有暴露。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-triangles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-triangles" names="class_renderingdevice_constant_render_primitive_triangles"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_TRIANGLES</strong> = <literal>5</literal></paragraph>
            <paragraph>渲染三角形列表的图元。三角形在绘制时是彼此独立的。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-triangles-with-adjacency"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-triangles-with-adjacency" names="class_renderingdevice_constant_render_primitive_triangles_with_adjacency"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_TRIANGLES_WITH_ADJACENCY</strong> = <literal>6</literal></paragraph>
            <paragraph><reference name="渲染三角形列表的图元，提供邻接数据。" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-lists-with-adjacency">渲染三角形列表的图元，提供邻接数据。</reference></paragraph>
            <paragraph><strong>注意：</strong>邻接数据仅在几何着色器中有用，但 Godot 并没有暴露。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-triangle-strips"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-triangle-strips" names="class_renderingdevice_constant_render_primitive_triangle_strips"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_TRIANGLE_STRIPS</strong> = <literal>7</literal></paragraph>
            <paragraph>渲染三角形条带的图元。绘制的三角形与它的前一个三角形是相连的。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-triangle-strips-with-ajacency"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-triangle-strips-with-ajacency" names="class_renderingdevice_constant_render_primitive_triangle_strips_with_ajacency"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_AJACENCY</strong> = <literal>8</literal></paragraph>
            <paragraph><reference name="渲染三角形条带的图元，提供邻接数据。" refuri="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#drawing-triangle-strips-with-adjacency">渲染三角形条带的图元，提供邻接数据。</reference></paragraph>
            <paragraph><strong>注意：</strong>邻接数据仅在几何着色器中有用，但 Godot 并没有暴露。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-triangle-strips-with-restart-index"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-triangle-strips-with-restart-index" names="class_renderingdevice_constant_render_primitive_triangle_strips_with_restart_index"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_RESTART_INDEX</strong> = <literal>9</literal></paragraph>
            <paragraph>渲染三角形条带的图元，启用<emphasis>图元重启</emphasis>。绘制的三角形与它的前一个三角形是相连的，但是在绘制前可以指定图元重启索引，这样在指定索引之后就会再创建一条三角形条带。</paragraph>
            <paragraph><strong>注意：</strong>仅兼容索引绘图。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-tesselation-patch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-tesselation-patch" names="class_renderingdevice_constant_render_primitive_tesselation_patch"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_TESSELATION_PATCH</strong> = <literal>10</literal></paragraph>
            <paragraph>曲面细分面片渲染图元。仅对曲面细分着色器有用，可以将面片变形。</paragraph>
            <target refid="class-renderingdevice-constant-render-primitive-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-render-primitive-max" names="class_renderingdevice_constant_render_primitive_max"><reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> <strong>RENDER_PRIMITIVE_MAX</strong> = <literal>11</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-polygoncullmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-polygoncullmode" names="enum_renderingdevice_polygoncullmode">enum <strong>PolygonCullMode</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-polygon-cull-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-polygon-cull-disabled" names="class_renderingdevice_constant_polygon_cull_disabled"><reference internal="True" refid="enum-renderingdevice-polygoncullmode"><inline classes="std std-ref">PolygonCullMode</inline></reference> <strong>POLYGON_CULL_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不使用多边形的正面和背面剔除。</paragraph>
            <target refid="class-renderingdevice-constant-polygon-cull-front"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-polygon-cull-front" names="class_renderingdevice_constant_polygon_cull_front"><reference internal="True" refid="enum-renderingdevice-polygoncullmode"><inline classes="std std-ref">PolygonCullMode</inline></reference> <strong>POLYGON_CULL_FRONT</strong> = <literal>1</literal></paragraph>
            <paragraph>使用多边形的正面剔除（隐藏正对相机的面）。</paragraph>
            <target refid="class-renderingdevice-constant-polygon-cull-back"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-polygon-cull-back" names="class_renderingdevice_constant_polygon_cull_back"><reference internal="True" refid="enum-renderingdevice-polygoncullmode"><inline classes="std std-ref">PolygonCullMode</inline></reference> <strong>POLYGON_CULL_BACK</strong> = <literal>2</literal></paragraph>
            <paragraph>使用多边形的背面剔除（隐藏背对相机的面）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-polygonfrontface"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-polygonfrontface" names="enum_renderingdevice_polygonfrontface">enum <strong>PolygonFrontFace</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-polygon-front-face-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-polygon-front-face-clockwise" names="class_renderingdevice_constant_polygon_front_face_clockwise"><reference internal="True" refid="enum-renderingdevice-polygonfrontface"><inline classes="std std-ref">PolygonFrontFace</inline></reference> <strong>POLYGON_FRONT_FACE_CLOCKWISE</strong> = <literal>0</literal></paragraph>
            <paragraph>决定多边形面为是否为正面时，使用顺时针缠绕顺序。</paragraph>
            <target refid="class-renderingdevice-constant-polygon-front-face-counter-clockwise"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-polygon-front-face-counter-clockwise" names="class_renderingdevice_constant_polygon_front_face_counter_clockwise"><reference internal="True" refid="enum-renderingdevice-polygonfrontface"><inline classes="std std-ref">PolygonFrontFace</inline></reference> <strong>POLYGON_FRONT_FACE_COUNTER_CLOCKWISE</strong> = <literal>1</literal></paragraph>
            <paragraph>决定多边形面为是否为正面时，使用逆时针缠绕顺序。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-stenciloperation"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-stenciloperation" names="enum_renderingdevice_stenciloperation">enum <strong>StencilOperation</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-keep"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-keep" names="class_renderingdevice_constant_stencil_op_keep"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_KEEP</strong> = <literal>0</literal></paragraph>
            <paragraph>保留当前的模板值。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-zero"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-zero" names="class_renderingdevice_constant_stencil_op_zero"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_ZERO</strong> = <literal>1</literal></paragraph>
            <paragraph>将模板值设置为 <literal>0</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-replace"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-replace" names="class_renderingdevice_constant_stencil_op_replace"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_REPLACE</strong> = <literal>2</literal></paragraph>
            <paragraph>将现有的模板值替换为新值。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-increment-and-clamp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-increment-and-clamp" names="class_renderingdevice_constant_stencil_op_increment_and_clamp"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_INCREMENT_AND_CLAMP</strong> = <literal>3</literal></paragraph>
            <paragraph>将现有的模板值加一，到达能够表示的最大无符号值之后就不会再增长。会将模板位视作无符号整数。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-decrement-and-clamp"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-decrement-and-clamp" names="class_renderingdevice_constant_stencil_op_decrement_and_clamp"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_DECREMENT_AND_CLAMP</strong> = <literal>4</literal></paragraph>
            <paragraph>将现有的模板值减一，到达最小值之后就不会再降低。会将模板位视作无符号整数。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-invert"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-invert" names="class_renderingdevice_constant_stencil_op_invert"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_INVERT</strong> = <literal>5</literal></paragraph>
            <paragraph>将现有的模板值按位取反。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-increment-and-wrap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-increment-and-wrap" names="class_renderingdevice_constant_stencil_op_increment_and_wrap"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_INCREMENT_AND_WRAP</strong> = <literal>6</literal></paragraph>
            <paragraph>将现有的模板值加一，到达能够表示的最大无符号值之后环绕至 <literal>0</literal>。会将模板位视作无符号整数。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-decrement-and-wrap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-decrement-and-wrap" names="class_renderingdevice_constant_stencil_op_decrement_and_wrap"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_DECREMENT_AND_WRAP</strong> = <literal>7</literal></paragraph>
            <paragraph>将现有的模板值减一，到达最小值之后环绕至能够表示的最大无符号值。会将模板位视作无符号整数。</paragraph>
            <target refid="class-renderingdevice-constant-stencil-op-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-stencil-op-max" names="class_renderingdevice_constant_stencil_op_max"><reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> <strong>STENCIL_OP_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-stenciloperation"><inline classes="std std-ref">StencilOperation</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-compareoperator"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-compareoperator" names="enum_renderingdevice_compareoperator">enum <strong>CompareOperator</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-never"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-never" names="class_renderingdevice_constant_compare_op_never"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_NEVER</strong> = <literal>0</literal></paragraph>
            <paragraph>“永不”比较（与 <reference internal="True" refid="class-renderingdevice-constant-compare-op-always"><inline classes="std std-ref">COMPARE_OP_ALWAYS</inline></reference> 相对）。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-less"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-less" names="class_renderingdevice_constant_compare_op_less"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_LESS</strong> = <literal>1</literal></paragraph>
            <paragraph>“小于”比较。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-equal" names="class_renderingdevice_constant_compare_op_equal"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_EQUAL</strong> = <literal>2</literal></paragraph>
            <paragraph>“等于”比较。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-less-or-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-less-or-equal" names="class_renderingdevice_constant_compare_op_less_or_equal"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_LESS_OR_EQUAL</strong> = <literal>3</literal></paragraph>
            <paragraph>“小于等于”比较。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-greater"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-greater" names="class_renderingdevice_constant_compare_op_greater"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_GREATER</strong> = <literal>4</literal></paragraph>
            <paragraph>“大于”比较。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-not-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-not-equal" names="class_renderingdevice_constant_compare_op_not_equal"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_NOT_EQUAL</strong> = <literal>5</literal></paragraph>
            <paragraph>“不等于”比较。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-greater-or-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-greater-or-equal" names="class_renderingdevice_constant_compare_op_greater_or_equal"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_GREATER_OR_EQUAL</strong> = <literal>6</literal></paragraph>
            <paragraph>“大于等于”比较。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-always" names="class_renderingdevice_constant_compare_op_always"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_ALWAYS</strong> = <literal>7</literal></paragraph>
            <paragraph>“始终”比较（与 <reference internal="True" refid="class-renderingdevice-constant-compare-op-never"><inline classes="std std-ref">COMPARE_OP_NEVER</inline></reference> 相对）。</paragraph>
            <target refid="class-renderingdevice-constant-compare-op-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-compare-op-max" names="class_renderingdevice_constant_compare_op_max"><reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> <strong>COMPARE_OP_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-compareoperator"><inline classes="std std-ref">CompareOperator</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-logicoperation"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-logicoperation" names="enum_renderingdevice_logicoperation">enum <strong>LogicOperation</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-clear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-clear" names="class_renderingdevice_constant_logic_op_clear"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_CLEAR</strong> = <literal>0</literal></paragraph>
            <paragraph>逻辑清除运算（结果始终为 <literal>0</literal>）。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-set"><inline classes="std std-ref">LOGIC_OP_SET</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-and"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-and" names="class_renderingdevice_constant_logic_op_and"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_AND</strong> = <literal>1</literal></paragraph>
            <paragraph>逻辑与（AND）运算。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-and-reverse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-and-reverse" names="class_renderingdevice_constant_logic_op_and_reverse"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_AND_REVERSE</strong> = <literal>2</literal></paragraph>
            <paragraph>逻辑与（AND）运算，翻转<emphasis>目标</emphasis>操作数。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-and-inverted"><inline classes="std std-ref">LOGIC_OP_AND_INVERTED</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-copy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-copy" names="class_renderingdevice_constant_logic_op_copy"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_COPY</strong> = <literal>3</literal></paragraph>
            <paragraph>逻辑复制运算（保留<emphasis>来源</emphasis>的值）。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-copy-inverted"><inline classes="std std-ref">LOGIC_OP_COPY_INVERTED</inline></reference> 和 <reference internal="True" refid="class-renderingdevice-constant-logic-op-no-op"><inline classes="std std-ref">LOGIC_OP_NO_OP</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-and-inverted"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-and-inverted" names="class_renderingdevice_constant_logic_op_and_inverted"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_AND_INVERTED</strong> = <literal>4</literal></paragraph>
            <paragraph>逻辑与（AND）运算，翻转<emphasis>来源</emphasis>操作数。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-and-reverse"><inline classes="std std-ref">LOGIC_OP_AND_REVERSE</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-no-op"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-no-op" names="class_renderingdevice_constant_logic_op_no_op"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_NO_OP</strong> = <literal>5</literal></paragraph>
            <paragraph>逻辑空运算（保留<emphasis>目标</emphasis>值）。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-copy"><inline classes="std std-ref">LOGIC_OP_COPY</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-xor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-xor" names="class_renderingdevice_constant_logic_op_xor"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_XOR</strong> = <literal>6</literal></paragraph>
            <paragraph>逻辑异或（XOR）运算。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-or"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-or" names="class_renderingdevice_constant_logic_op_or"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_OR</strong> = <literal>7</literal></paragraph>
            <paragraph>逻辑或（OR）运算。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-nor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-nor" names="class_renderingdevice_constant_logic_op_nor"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_NOR</strong> = <literal>8</literal></paragraph>
            <paragraph>逻辑非或（NOR）运算。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-equivalent"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-equivalent" names="class_renderingdevice_constant_logic_op_equivalent"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_EQUIVALENT</strong> = <literal>9</literal></paragraph>
            <paragraph>逻辑非异或（XNOR）运算。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-invert"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-invert" names="class_renderingdevice_constant_logic_op_invert"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_INVERT</strong> = <literal>10</literal></paragraph>
            <paragraph>逻辑翻转运算。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-or-reverse"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-or-reverse" names="class_renderingdevice_constant_logic_op_or_reverse"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_OR_REVERSE</strong> = <literal>11</literal></paragraph>
            <paragraph>逻辑或（OR）运算，翻转<emphasis>目标</emphasis>操作数。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-or-reverse"><inline classes="std std-ref">LOGIC_OP_OR_REVERSE</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-copy-inverted"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-copy-inverted" names="class_renderingdevice_constant_logic_op_copy_inverted"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_COPY_INVERTED</strong> = <literal>12</literal></paragraph>
            <paragraph>逻辑非（NOT）运算（将值翻转）。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-copy"><inline classes="std std-ref">LOGIC_OP_COPY</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-or-inverted"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-or-inverted" names="class_renderingdevice_constant_logic_op_or_inverted"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_OR_INVERTED</strong> = <literal>13</literal></paragraph>
            <paragraph>逻辑或（OR）运算，翻转<emphasis>来源</emphasis>操作数。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-or-reverse"><inline classes="std std-ref">LOGIC_OP_OR_REVERSE</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-nand"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-nand" names="class_renderingdevice_constant_logic_op_nand"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_NAND</strong> = <literal>14</literal></paragraph>
            <paragraph>逻辑非与（NAND）运算。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-set"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-set" names="class_renderingdevice_constant_logic_op_set"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_SET</strong> = <literal>15</literal></paragraph>
            <paragraph>逻辑设置运算（结果始终为 <literal>1</literal>）。另见 <reference internal="True" refid="class-renderingdevice-constant-logic-op-clear"><inline classes="std std-ref">LOGIC_OP_CLEAR</inline></reference>。</paragraph>
            <target refid="class-renderingdevice-constant-logic-op-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-logic-op-max" names="class_renderingdevice_constant_logic_op_max"><reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> <strong>LOGIC_OP_MAX</strong> = <literal>16</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-logicoperation"><inline classes="std std-ref">LogicOperation</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-blendfactor"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-blendfactor" names="enum_renderingdevice_blendfactor">enum <strong>BlendFactor</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-zero"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-zero" names="class_renderingdevice_constant_blend_factor_zero"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ZERO</strong> = <literal>0</literal></paragraph>
            <paragraph>混合系数常量 <literal>0.0</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one" names="class_renderingdevice_constant_blend_factor_one"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE</strong> = <literal>1</literal></paragraph>
            <paragraph>混合系数常量 <literal>1.0</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-src-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-src-color" names="class_renderingdevice_constant_blend_factor_src_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_SRC_COLOR</strong> = <literal>2</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>source color</literal>。Alpha 混合系数为 <literal>source alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-src-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-src-color" names="class_renderingdevice_constant_blend_factor_one_minus_src_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_SRC_COLOR</strong> = <literal>3</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>1.0 - source color</literal>。Alpha 混合系数为 <literal>1.0 - source alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-dst-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-dst-color" names="class_renderingdevice_constant_blend_factor_dst_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_DST_COLOR</strong> = <literal>4</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>destination color</literal>。Alpha 混合系数为 <literal>destination alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-dst-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-dst-color" names="class_renderingdevice_constant_blend_factor_one_minus_dst_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_DST_COLOR</strong> = <literal>5</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>1.0 - destination color</literal>。Alpha 混合系数为 <literal>1.0 - destination alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-src-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-src-alpha" names="class_renderingdevice_constant_blend_factor_src_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_SRC_ALPHA</strong> = <literal>6</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>source alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-src-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-src-alpha" names="class_renderingdevice_constant_blend_factor_one_minus_src_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</strong> = <literal>7</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>1.0 - source alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-dst-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-dst-alpha" names="class_renderingdevice_constant_blend_factor_dst_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_DST_ALPHA</strong> = <literal>8</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>destination alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-dst-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-dst-alpha" names="class_renderingdevice_constant_blend_factor_one_minus_dst_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_DST_ALPHA</strong> = <literal>9</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>1.0 - destination alpha</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-constant-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-constant-color" names="class_renderingdevice_constant_blend_factor_constant_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_CONSTANT_COLOR</strong> = <literal>10</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>blend constant color</literal>。Alpha 混合系数为 <literal>blend constant alpha</literal>（见 <reference internal="True" refid="class-renderingdevice-method-draw-list-set-blend-constants"><inline classes="std std-ref">draw_list_set_blend_constants</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-constant-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-constant-color" names="class_renderingdevice_constant_blend_factor_one_minus_constant_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR</strong> = <literal>11</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>1.0 - blend constant color</literal>。Alpha 混合系数为 <literal>1.0 - blend constant alpha</literal>（见 <reference internal="True" refid="class-renderingdevice-method-draw-list-set-blend-constants"><inline classes="std std-ref">draw_list_set_blend_constants</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-constant-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-constant-alpha" names="class_renderingdevice_constant_blend_factor_constant_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_CONSTANT_ALPHA</strong> = <literal>12</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>blend constant alpha</literal>（见 <reference internal="True" refid="class-renderingdevice-method-draw-list-set-blend-constants"><inline classes="std std-ref">draw_list_set_blend_constants</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-constant-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-constant-alpha" names="class_renderingdevice_constant_blend_factor_one_minus_constant_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA</strong> = <literal>13</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>1.0 - blend constant alpha</literal>（见 <reference internal="True" refid="class-renderingdevice-method-draw-list-set-blend-constants"><inline classes="std std-ref">draw_list_set_blend_constants</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-src-alpha-saturate"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-src-alpha-saturate" names="class_renderingdevice_constant_blend_factor_src_alpha_saturate"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_SRC_ALPHA_SATURATE</strong> = <literal>14</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>min(source alpha, 1.0 - destination alpha)</literal>。Alpha 混合系数为 <literal>1.0</literal>。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-src1-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-src1-color" names="class_renderingdevice_constant_blend_factor_src1_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_SRC1_COLOR</strong> = <literal>15</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>second source color</literal>。Alpha 混合系数为 <literal>second source alpha</literal>。仅适用于双源混合。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-src1-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-src1-color" names="class_renderingdevice_constant_blend_factor_one_minus_src1_color"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</strong> = <literal>16</literal></paragraph>
            <paragraph>颜色混合系数为 <literal>1.0 - second source color</literal>。Alpha 混合系数为 <literal>1.0 - second source alpha</literal>。仅适用于双源混合。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-src1-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-src1-alpha" names="class_renderingdevice_constant_blend_factor_src1_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_SRC1_ALPHA</strong> = <literal>17</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>second source alpha</literal>。仅适用于双源混合。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-one-minus-src1-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-one-minus-src1-alpha" names="class_renderingdevice_constant_blend_factor_one_minus_src1_alpha"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</strong> = <literal>18</literal></paragraph>
            <paragraph>颜色混合和 Alpha 混合系数为 <literal>1.0 - second source alpha</literal>。仅适用于双源混合。</paragraph>
            <target refid="class-renderingdevice-constant-blend-factor-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-factor-max" names="class_renderingdevice_constant_blend_factor_max"><reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> <strong>BLEND_FACTOR_MAX</strong> = <literal>19</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-blendfactor"><inline classes="std std-ref">BlendFactor</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-blendoperation"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-blendoperation" names="enum_renderingdevice_blendoperation">enum <strong>BlendOperation</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-blend-op-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-op-add" names="class_renderingdevice_constant_blend_op_add"><reference internal="True" refid="enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>BLEND_OP_ADD</strong> = <literal>0</literal></paragraph>
            <paragraph>加法混合运算（<literal>source + destination</literal>）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-op-subtract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-op-subtract" names="class_renderingdevice_constant_blend_op_subtract"><reference internal="True" refid="enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>BLEND_OP_SUBTRACT</strong> = <literal>1</literal></paragraph>
            <paragraph>减法混合运算（<literal>source - destination</literal>）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-op-reverse-subtract"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-op-reverse-subtract" names="class_renderingdevice_constant_blend_op_reverse_subtract"><reference internal="True" refid="enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>BLEND_OP_REVERSE_SUBTRACT</strong> = <literal>2</literal></paragraph>
            <paragraph>逆减法混合运算（<literal>destination - source</literal>）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-op-minimum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-op-minimum" names="class_renderingdevice_constant_blend_op_minimum"><reference internal="True" refid="enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>BLEND_OP_MINIMUM</strong> = <literal>3</literal></paragraph>
            <paragraph>最小混合运算（保留两者之间的较小值）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-op-maximum"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-op-maximum" names="class_renderingdevice_constant_blend_op_maximum"><reference internal="True" refid="enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>BLEND_OP_MAXIMUM</strong> = <literal>4</literal></paragraph>
            <paragraph>最大混合运算（保留两者之间的较大值）。</paragraph>
            <target refid="class-renderingdevice-constant-blend-op-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-blend-op-max" names="class_renderingdevice_constant_blend_op_max"><reference internal="True" refid="enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> <strong>BLEND_OP_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-blendoperation"><inline classes="std std-ref">BlendOperation</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-pipelinedynamicstateflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-pipelinedynamicstateflags" names="enum_renderingdevice_pipelinedynamicstateflags">flags <strong>PipelineDynamicStateFlags</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-dynamic-state-line-width"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-dynamic-state-line-width" names="class_renderingdevice_constant_dynamic_state_line_width"><reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference> <strong>DYNAMIC_STATE_LINE_WIDTH</strong> = <literal>1</literal></paragraph>
            <target refid="class-renderingdevice-constant-dynamic-state-depth-bias"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-dynamic-state-depth-bias" names="class_renderingdevice_constant_dynamic_state_depth_bias"><reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference> <strong>DYNAMIC_STATE_DEPTH_BIAS</strong> = <literal>2</literal></paragraph>
            <target refid="class-renderingdevice-constant-dynamic-state-blend-constants"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-dynamic-state-blend-constants" names="class_renderingdevice_constant_dynamic_state_blend_constants"><reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference> <strong>DYNAMIC_STATE_BLEND_CONSTANTS</strong> = <literal>4</literal></paragraph>
            <target refid="class-renderingdevice-constant-dynamic-state-depth-bounds"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-dynamic-state-depth-bounds" names="class_renderingdevice_constant_dynamic_state_depth_bounds"><reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference> <strong>DYNAMIC_STATE_DEPTH_BOUNDS</strong> = <literal>8</literal></paragraph>
            <target refid="class-renderingdevice-constant-dynamic-state-stencil-compare-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-dynamic-state-stencil-compare-mask" names="class_renderingdevice_constant_dynamic_state_stencil_compare_mask"><reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference> <strong>DYNAMIC_STATE_STENCIL_COMPARE_MASK</strong> = <literal>16</literal></paragraph>
            <target refid="class-renderingdevice-constant-dynamic-state-stencil-write-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-dynamic-state-stencil-write-mask" names="class_renderingdevice_constant_dynamic_state_stencil_write_mask"><reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference> <strong>DYNAMIC_STATE_STENCIL_WRITE_MASK</strong> = <literal>32</literal></paragraph>
            <target refid="class-renderingdevice-constant-dynamic-state-stencil-reference"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-dynamic-state-stencil-reference" names="class_renderingdevice_constant_dynamic_state_stencil_reference"><reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference> <strong>DYNAMIC_STATE_STENCIL_REFERENCE</strong> = <literal>64</literal></paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-initialaction"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-initialaction" names="enum_renderingdevice_initialaction">enum <strong>InitialAction</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-initial-action-clear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-initial-action-clear" names="class_renderingdevice_constant_initial_action_clear"><reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> <strong>INITIAL_ACTION_CLEAR</strong> = <literal>0</literal></paragraph>
            <paragraph>开始渲染并清空整个帧缓冲。</paragraph>
            <target refid="class-renderingdevice-constant-initial-action-clear-region"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-initial-action-clear-region" names="class_renderingdevice_constant_initial_action_clear_region"><reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> <strong>INITIAL_ACTION_CLEAR_REGION</strong> = <literal>1</literal></paragraph>
            <paragraph>开始渲染并清空帧缓冲里的指定区域。</paragraph>
            <target refid="class-renderingdevice-constant-initial-action-clear-region-continue"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-initial-action-clear-region-continue" names="class_renderingdevice_constant_initial_action_clear_region_continue"><reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> <strong>INITIAL_ACTION_CLEAR_REGION_CONTINUE</strong> = <literal>2</literal></paragraph>
            <paragraph>继续渲染并清空帧缓冲里的指定区域。帧缓冲必须在之前的最后一次动作后停留在 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference> 状态。</paragraph>
            <target refid="class-renderingdevice-constant-initial-action-keep"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-initial-action-keep" names="class_renderingdevice_constant_initial_action_keep"><reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> <strong>INITIAL_ACTION_KEEP</strong> = <literal>3</literal></paragraph>
            <paragraph>开始渲染但保留附加颜色纹理的内容。如果帧缓冲之前用于在着色器中读取，此操作会自动插入布局过渡。</paragraph>
            <target refid="class-renderingdevice-constant-initial-action-drop"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-initial-action-drop" names="class_renderingdevice_constant_initial_action_drop"><reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> <strong>INITIAL_ACTION_DROP</strong> = <literal>4</literal></paragraph>
            <paragraph>开始渲染，忽略原有内容；在内容上覆盖。当你会写入所有像素并且不需要清屏颜色时，这通常是最快的选项。</paragraph>
            <target refid="class-renderingdevice-constant-initial-action-continue"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-initial-action-continue" names="class_renderingdevice_constant_initial_action_continue"><reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> <strong>INITIAL_ACTION_CONTINUE</strong> = <literal>5</literal></paragraph>
            <paragraph>继续渲染。帧缓冲必须在之前的最后一次动作后停留在 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference> 状态。</paragraph>
            <target refid="class-renderingdevice-constant-initial-action-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-initial-action-max" names="class_renderingdevice_constant_initial_action_max"><reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> <strong>INITIAL_ACTION_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-finalaction"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-finalaction" names="enum_renderingdevice_finalaction">enum <strong>FinalAction</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-final-action-read"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-final-action-read" names="class_renderingdevice_constant_final_action_read"><reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> <strong>FINAL_ACTION_READ</strong> = <literal>0</literal></paragraph>
            <paragraph>以读取为目的存储纹理，如果设置了 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-sampling-bit"><inline classes="std std-ref">TEXTURE_USAGE_SAMPLING_BIT</inline></reference> 位则将其设为只读（仅适用于颜色、深度、模板附件）。</paragraph>
            <target refid="class-renderingdevice-constant-final-action-discard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-final-action-discard" names="class_renderingdevice_constant_final_action_discard"><reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> <strong>FINAL_ACTION_DISCARD</strong> = <literal>1</literal></paragraph>
            <paragraph>丢弃纹理数据，如果设置了 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-sampling-bit"><inline classes="std std-ref">TEXTURE_USAGE_SAMPLING_BIT</inline></reference> 位则将其设为只读（仅适用于颜色、深度、模板附件）。</paragraph>
            <target refid="class-renderingdevice-constant-final-action-continue"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-final-action-continue" names="class_renderingdevice_constant_final_action_continue"><reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> <strong>FINAL_ACTION_CONTINUE</strong> = <literal>2</literal></paragraph>
            <paragraph>存储纹理并继续后续处理。与 <reference internal="True" refid="class-renderingdevice-constant-final-action-read"><inline classes="std std-ref">FINAL_ACTION_READ</inline></reference> 类似，但不会在设置了 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-sampling-bit"><inline classes="std std-ref">TEXTURE_USAGE_SAMPLING_BIT</inline></reference> 位时将其设为只读。</paragraph>
            <target refid="class-renderingdevice-constant-final-action-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-final-action-max" names="class_renderingdevice_constant_final_action_max"><reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> <strong>FINAL_ACTION_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-shaderstage"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-shaderstage" names="enum_renderingdevice_shaderstage">enum <strong>ShaderStage</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-vertex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-vertex" names="class_renderingdevice_constant_shader_stage_vertex"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_VERTEX</strong> = <literal>0</literal></paragraph>
            <paragraph>顶点着色器阶段。可用于在着色器中操作顶点（但无法新建顶点）。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-fragment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-fragment" names="class_renderingdevice_constant_shader_stage_fragment"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_FRAGMENT</strong> = <literal>1</literal></paragraph>
            <paragraph>片段着色器阶段（Direct3D 中成为“像素着色器”）。可用于在着色器中操作像素。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-tesselation-control"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-tesselation-control" names="class_renderingdevice_constant_shader_stage_tesselation_control"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_TESSELATION_CONTROL</strong> = <literal>2</literal></paragraph>
            <paragraph>曲面细分控制着色器阶段。可用于在着色器中创建额外的几何体。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-tesselation-evaluation"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-tesselation-evaluation" names="class_renderingdevice_constant_shader_stage_tesselation_evaluation"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_TESSELATION_EVALUATION</strong> = <literal>3</literal></paragraph>
            <paragraph>曲面细分求值着色器阶段。可用于在着色器中创建额外的几何体。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-compute"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-compute" names="class_renderingdevice_constant_shader_stage_compute"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_COMPUTE</strong> = <literal>4</literal></paragraph>
            <paragraph>计算着色器阶段。可用于在着色器中执行任意计算任务，在 GPU 而不是 CPU 上进行计算。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-max" names="class_renderingdevice_constant_shader_stage_max"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> 枚举的大小。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-vertex-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-vertex-bit" names="class_renderingdevice_constant_shader_stage_vertex_bit"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_VERTEX_BIT</strong> = <literal>1</literal></paragraph>
            <paragraph>顶点着色器阶段位（另见 <reference internal="True" refid="class-renderingdevice-constant-shader-stage-vertex"><inline classes="std std-ref">SHADER_STAGE_VERTEX</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-fragment-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-fragment-bit" names="class_renderingdevice_constant_shader_stage_fragment_bit"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_FRAGMENT_BIT</strong> = <literal>2</literal></paragraph>
            <paragraph>片段着色器阶段位（另见 <reference internal="True" refid="class-renderingdevice-constant-shader-stage-fragment"><inline classes="std std-ref">SHADER_STAGE_FRAGMENT</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-tesselation-control-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-tesselation-control-bit" names="class_renderingdevice_constant_shader_stage_tesselation_control_bit"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_TESSELATION_CONTROL_BIT</strong> = <literal>4</literal></paragraph>
            <paragraph>曲面细分控制着色器阶段位（另见 <reference internal="True" refid="class-renderingdevice-constant-shader-stage-tesselation-control"><inline classes="std std-ref">SHADER_STAGE_TESSELATION_CONTROL</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-tesselation-evaluation-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-tesselation-evaluation-bit" names="class_renderingdevice_constant_shader_stage_tesselation_evaluation_bit"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_TESSELATION_EVALUATION_BIT</strong> = <literal>8</literal></paragraph>
            <paragraph>曲面细分求值着色器阶段位（另见 <reference internal="True" refid="class-renderingdevice-constant-shader-stage-tesselation-evaluation"><inline classes="std std-ref">SHADER_STAGE_TESSELATION_EVALUATION</inline></reference>）。</paragraph>
            <target refid="class-renderingdevice-constant-shader-stage-compute-bit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-stage-compute-bit" names="class_renderingdevice_constant_shader_stage_compute_bit"><reference internal="True" refid="enum-renderingdevice-shaderstage"><inline classes="std std-ref">ShaderStage</inline></reference> <strong>SHADER_STAGE_COMPUTE_BIT</strong> = <literal>16</literal></paragraph>
            <paragraph>计算着色器阶段位（另见 <reference internal="True" refid="class-renderingdevice-constant-shader-stage-compute"><inline classes="std std-ref">SHADER_STAGE_COMPUTE</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-shaderlanguage"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-shaderlanguage" names="enum_renderingdevice_shaderlanguage">enum <strong>ShaderLanguage</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-shader-language-glsl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-language-glsl" names="class_renderingdevice_constant_shader_language_glsl"><reference internal="True" refid="enum-renderingdevice-shaderlanguage"><inline classes="std std-ref">ShaderLanguage</inline></reference> <strong>SHADER_LANGUAGE_GLSL</strong> = <literal>0</literal></paragraph>
            <paragraph>Khronos 的 GLSL 着色语言（OpenGL 和 Vulkan 原生使用）。这是核心 Godot 着色器所使用的语言。</paragraph>
            <target refid="class-renderingdevice-constant-shader-language-hlsl"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-shader-language-hlsl" names="class_renderingdevice_constant_shader_language_hlsl"><reference internal="True" refid="enum-renderingdevice-shaderlanguage"><inline classes="std std-ref">ShaderLanguage</inline></reference> <strong>SHADER_LANGUAGE_HLSL</strong> = <literal>1</literal></paragraph>
            <paragraph>Microsoft 的高级着色器语言（Direct3D 原生使用，Vulkan 中也能使用）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-pipelinespecializationconstanttype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-pipelinespecializationconstanttype" names="enum_renderingdevice_pipelinespecializationconstanttype">enum <strong>PipelineSpecializationConstantType</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-pipeline-specialization-constant-type-bool"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-pipeline-specialization-constant-type-bool" names="class_renderingdevice_constant_pipeline_specialization_constant_type_bool"><reference internal="True" refid="enum-renderingdevice-pipelinespecializationconstanttype"><inline classes="std std-ref">PipelineSpecializationConstantType</inline></reference> <strong>PIPELINE_SPECIALIZATION_CONSTANT_TYPE_BOOL</strong> = <literal>0</literal></paragraph>
            <paragraph>布尔型特化常量。</paragraph>
            <target refid="class-renderingdevice-constant-pipeline-specialization-constant-type-int"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-pipeline-specialization-constant-type-int" names="class_renderingdevice_constant_pipeline_specialization_constant_type_int"><reference internal="True" refid="enum-renderingdevice-pipelinespecializationconstanttype"><inline classes="std std-ref">PipelineSpecializationConstantType</inline></reference> <strong>PIPELINE_SPECIALIZATION_CONSTANT_TYPE_INT</strong> = <literal>1</literal></paragraph>
            <paragraph>整型特化常量。</paragraph>
            <target refid="class-renderingdevice-constant-pipeline-specialization-constant-type-float"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-pipeline-specialization-constant-type-float" names="class_renderingdevice_constant_pipeline_specialization_constant_type_float"><reference internal="True" refid="enum-renderingdevice-pipelinespecializationconstanttype"><inline classes="std std-ref">PipelineSpecializationConstantType</inline></reference> <strong>PIPELINE_SPECIALIZATION_CONSTANT_TYPE_FLOAT</strong> = <literal>2</literal></paragraph>
            <paragraph>浮点型特化常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-limit"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-limit" names="enum_renderingdevice_limit">enum <strong>Limit</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-bound-uniform-sets"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-bound-uniform-sets" names="class_renderingdevice_constant_limit_max_bound_uniform_sets"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_BOUND_UNIFORM_SETS</strong> = <literal>0</literal></paragraph>
            <paragraph>能够同时绑定的最大 uniform 集的数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-framebuffer-color-attachments"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-framebuffer-color-attachments" names="class_renderingdevice_constant_limit_max_framebuffer_color_attachments"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_FRAMEBUFFER_COLOR_ATTACHMENTS</strong> = <literal>1</literal></paragraph>
            <paragraph>能够同时使用的最大颜色帧缓冲附件的数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-textures-per-uniform-set"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-textures-per-uniform-set" names="class_renderingdevice_constant_limit_max_textures_per_uniform_set"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_TEXTURES_PER_UNIFORM_SET</strong> = <literal>2</literal></paragraph>
            <paragraph>单个 uniform 集能够使用的最大纹理数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-samplers-per-uniform-set"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-samplers-per-uniform-set" names="class_renderingdevice_constant_limit_max_samplers_per_uniform_set"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_SAMPLERS_PER_UNIFORM_SET</strong> = <literal>3</literal></paragraph>
            <paragraph>单个 uniform 集能够使用的最大采样器数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-storage-buffers-per-uniform-set"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-storage-buffers-per-uniform-set" names="class_renderingdevice_constant_limit_max_storage_buffers_per_uniform_set"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_STORAGE_BUFFERS_PER_UNIFORM_SET</strong> = <literal>4</literal></paragraph>
            <paragraph>单个 uniform 集的最大<reference name="存储缓冲" refuri="https://vkguide.dev/docs/chapter-4/storage_buffers/">存储缓冲</reference>数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-storage-images-per-uniform-set"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-storage-images-per-uniform-set" names="class_renderingdevice_constant_limit_max_storage_images_per_uniform_set"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_STORAGE_IMAGES_PER_UNIFORM_SET</strong> = <literal>5</literal></paragraph>
            <paragraph>单个 uniform 集的最大存储图像数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-uniform-buffers-per-uniform-set"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-uniform-buffers-per-uniform-set" names="class_renderingdevice_constant_limit_max_uniform_buffers_per_uniform_set"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_UNIFORM_BUFFERS_PER_UNIFORM_SET</strong> = <literal>6</literal></paragraph>
            <paragraph>单个 uniform 集的最大 uniform 缓冲数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-draw-indexed-index"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-draw-indexed-index" names="class_renderingdevice_constant_limit_max_draw_indexed_index"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_DRAW_INDEXED_INDEX</strong> = <literal>7</literal></paragraph>
            <paragraph>索引绘图指令的最大索引。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-framebuffer-height"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-framebuffer-height" names="class_renderingdevice_constant_limit_max_framebuffer_height"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_FRAMEBUFFER_HEIGHT</strong> = <literal>8</literal></paragraph>
            <paragraph>帧缓冲的最大高度（单位为像素）。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-framebuffer-width"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-framebuffer-width" names="class_renderingdevice_constant_limit_max_framebuffer_width"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_FRAMEBUFFER_WIDTH</strong> = <literal>9</literal></paragraph>
            <paragraph>帧缓冲的最大宽度（单位为像素）。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-texture-array-layers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-texture-array-layers" names="class_renderingdevice_constant_limit_max_texture_array_layers"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_TEXTURE_ARRAY_LAYERS</strong> = <literal>10</literal></paragraph>
            <paragraph>纹理数组的最大层数。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-texture-size-1d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-texture-size-1d" names="class_renderingdevice_constant_limit_max_texture_size_1d"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_TEXTURE_SIZE_1D</strong> = <literal>11</literal></paragraph>
            <paragraph>支持的一维纹理的最大尺寸（单轴像素数）。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-texture-size-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-texture-size-2d" names="class_renderingdevice_constant_limit_max_texture_size_2d"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_TEXTURE_SIZE_2D</strong> = <literal>12</literal></paragraph>
            <paragraph>支持的二维纹理的最大尺寸（单轴像素数）。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-texture-size-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-texture-size-3d" names="class_renderingdevice_constant_limit_max_texture_size_3d"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_TEXTURE_SIZE_3D</strong> = <literal>13</literal></paragraph>
            <paragraph>支持的三维纹理的最大尺寸（单轴像素数）。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-texture-size-cube"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-texture-size-cube" names="class_renderingdevice_constant_limit_max_texture_size_cube"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_TEXTURE_SIZE_CUBE</strong> = <literal>14</literal></paragraph>
            <paragraph>支持的立方体贴图纹理的最大尺寸（单轴像素数）。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-textures-per-shader-stage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-textures-per-shader-stage" names="class_renderingdevice_constant_limit_max_textures_per_shader_stage"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_TEXTURES_PER_SHADER_STAGE</strong> = <literal>15</literal></paragraph>
            <paragraph>每个着色器阶段的最大纹理数。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-samplers-per-shader-stage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-samplers-per-shader-stage" names="class_renderingdevice_constant_limit_max_samplers_per_shader_stage"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_SAMPLERS_PER_SHADER_STAGE</strong> = <literal>16</literal></paragraph>
            <paragraph>每个着色器阶段的最大采样器数。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-storage-buffers-per-shader-stage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-storage-buffers-per-shader-stage" names="class_renderingdevice_constant_limit_max_storage_buffers_per_shader_stage"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_STORAGE_BUFFERS_PER_SHADER_STAGE</strong> = <literal>17</literal></paragraph>
            <paragraph>每个着色器阶段的最大<reference name="存储缓冲" refuri="https://vkguide.dev/docs/chapter-4/storage_buffers/">存储缓冲</reference>数。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-storage-images-per-shader-stage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-storage-images-per-shader-stage" names="class_renderingdevice_constant_limit_max_storage_images_per_shader_stage"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_STORAGE_IMAGES_PER_SHADER_STAGE</strong> = <literal>18</literal></paragraph>
            <paragraph>每个着色器阶段的最大存储图像数。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-uniform-buffers-per-shader-stage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-uniform-buffers-per-shader-stage" names="class_renderingdevice_constant_limit_max_uniform_buffers_per_shader_stage"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE</strong> = <literal>19</literal></paragraph>
            <paragraph>单个 uniform 集的最大 uniform 缓冲数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-push-constant-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-push-constant-size" names="class_renderingdevice_constant_limit_max_push_constant_size"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_PUSH_CONSTANT_SIZE</strong> = <literal>20</literal></paragraph>
            <paragraph>推送常量的最大大小。许多设备都有 128 字节的限制，所以即便你的 GPU 汇报的值更大，也请尝试避免让推送常量超过 127 字节，从而确保兼容性。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-uniform-buffer-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-uniform-buffer-size" names="class_renderingdevice_constant_limit_max_uniform_buffer_size"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_UNIFORM_BUFFER_SIZE</strong> = <literal>21</literal></paragraph>
            <paragraph>Uniform 缓冲的最大大小。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-vertex-input-attribute-offset"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-vertex-input-attribute-offset" names="class_renderingdevice_constant_limit_max_vertex_input_attribute_offset"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_VERTEX_INPUT_ATTRIBUTE_OFFSET</strong> = <literal>22</literal></paragraph>
            <paragraph>顶点输入属性的最大偏移。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-vertex-input-attributes"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-vertex-input-attributes" names="class_renderingdevice_constant_limit_max_vertex_input_attributes"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_VERTEX_INPUT_ATTRIBUTES</strong> = <literal>23</literal></paragraph>
            <paragraph>顶点输入属性的最大数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-vertex-input-bindings"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-vertex-input-bindings" names="class_renderingdevice_constant_limit_max_vertex_input_bindings"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_VERTEX_INPUT_BINDINGS</strong> = <literal>24</literal></paragraph>
            <paragraph>顶点输入绑定的最大数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-vertex-input-binding-stride"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-vertex-input-binding-stride" names="class_renderingdevice_constant_limit_max_vertex_input_binding_stride"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_VERTEX_INPUT_BINDING_STRIDE</strong> = <literal>25</literal></paragraph>
            <paragraph>顶点输入绑定的最大步幅。</paragraph>
            <target refid="class-renderingdevice-constant-limit-min-uniform-buffer-offset-alignment"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-min-uniform-buffer-offset-alignment" names="class_renderingdevice_constant_limit_min_uniform_buffer_offset_alignment"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MIN_UNIFORM_BUFFER_OFFSET_ALIGNMENT</strong> = <literal>26</literal></paragraph>
            <paragraph>Uniform 缓冲的最小偏移对齐。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-shared-memory-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-shared-memory-size" names="class_renderingdevice_constant_limit_max_compute_shared_memory_size"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_SHARED_MEMORY_SIZE</strong> = <literal>27</literal></paragraph>
            <paragraph>计算着色器的最大共享内存大小。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-workgroup-count-x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-workgroup-count-x" names="class_renderingdevice_constant_limit_max_compute_workgroup_count_x"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_X</strong> = <literal>28</literal></paragraph>
            <paragraph>计算着色器在 X 轴上的最大工作组数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-workgroup-count-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-workgroup-count-y" names="class_renderingdevice_constant_limit_max_compute_workgroup_count_y"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Y</strong> = <literal>29</literal></paragraph>
            <paragraph>计算着色器在 Y 轴上的最大工作组数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-workgroup-count-z"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-workgroup-count-z" names="class_renderingdevice_constant_limit_max_compute_workgroup_count_z"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Z</strong> = <literal>30</literal></paragraph>
            <paragraph>计算着色器在 Z 轴上的最大工作组数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-workgroup-invocations"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-workgroup-invocations" names="class_renderingdevice_constant_limit_max_compute_workgroup_invocations"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_WORKGROUP_INVOCATIONS</strong> = <literal>31</literal></paragraph>
            <paragraph>计算着色器的最大工作组调用数量。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-workgroup-size-x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-workgroup-size-x" names="class_renderingdevice_constant_limit_max_compute_workgroup_size_x"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_X</strong> = <literal>32</literal></paragraph>
            <paragraph>计算着色器在 X 轴上的最大工作组大小。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-workgroup-size-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-workgroup-size-y" names="class_renderingdevice_constant_limit_max_compute_workgroup_size_y"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Y</strong> = <literal>33</literal></paragraph>
            <paragraph>计算着色器在 Y 轴上的最大工作组大小。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-compute-workgroup-size-z"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-compute-workgroup-size-z" names="class_renderingdevice_constant_limit_max_compute_workgroup_size_z"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Z</strong> = <literal>34</literal></paragraph>
            <paragraph>计算着色器在 Z 轴上的最大工作组大小。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-viewport-dimensions-x"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-viewport-dimensions-x" names="class_renderingdevice_constant_limit_max_viewport_dimensions_x"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_VIEWPORT_DIMENSIONS_X</strong> = <literal>35</literal></paragraph>
            <paragraph>视口的最大宽度（单位为像素）。</paragraph>
            <target refid="class-renderingdevice-constant-limit-max-viewport-dimensions-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-limit-max-viewport-dimensions-y" names="class_renderingdevice_constant_limit_max_viewport_dimensions_y"><reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> <strong>LIMIT_MAX_VIEWPORT_DIMENSIONS_Y</strong> = <literal>36</literal></paragraph>
            <paragraph>视口的最大高度（单位为像素）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-renderingdevice-memorytype"></target>
            <paragraph classes="classref-enumeration" ids="enum-renderingdevice-memorytype" names="enum_renderingdevice_memorytype">enum <strong>MemoryType</strong>:</paragraph>
            <target refid="class-renderingdevice-constant-memory-textures"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-memory-textures" names="class_renderingdevice_constant_memory_textures"><reference internal="True" refid="enum-renderingdevice-memorytype"><inline classes="std std-ref">MemoryType</inline></reference> <strong>MEMORY_TEXTURES</strong> = <literal>0</literal></paragraph>
            <paragraph>纹理占用的内存。</paragraph>
            <target refid="class-renderingdevice-constant-memory-buffers"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-memory-buffers" names="class_renderingdevice_constant_memory_buffers"><reference internal="True" refid="enum-renderingdevice-memorytype"><inline classes="std std-ref">MemoryType</inline></reference> <strong>MEMORY_BUFFERS</strong> = <literal>1</literal></paragraph>
            <paragraph>缓冲区占用的内存。</paragraph>
            <target refid="class-renderingdevice-constant-memory-total"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-renderingdevice-constant-memory-total" names="class_renderingdevice_constant_memory_total"><reference internal="True" refid="enum-renderingdevice-memorytype"><inline classes="std std-ref">MemoryType</inline></reference> <strong>MEMORY_TOTAL</strong> = <literal>2</literal></paragraph>
            <paragraph>内存中占用。比 <reference internal="True" refid="class-renderingdevice-constant-memory-textures"><inline classes="std std-ref">MEMORY_TEXTURES</inline></reference> 和 <reference internal="True" refid="class-renderingdevice-constant-memory-buffers"><inline classes="std std-ref">MEMORY_BUFFERS</inline></reference> 的总和要大，因为还会包含其他杂项内存占用。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="常量">
            <title>常量</title>
            <target refid="class-renderingdevice-constant-invalid-id"></target>
            <paragraph classes="classref-constant" ids="class-renderingdevice-constant-invalid-id" names="class_renderingdevice_constant_invalid_id"><strong>INVALID_ID</strong> = <literal>-1</literal></paragraph>
            <paragraph>返回 ID 的函数会在值无效时返回此值。</paragraph>
            <target refid="class-renderingdevice-constant-invalid-format-id"></target>
            <paragraph classes="classref-constant" ids="class-renderingdevice-constant-invalid-format-id" names="class_renderingdevice_constant_invalid_format_id"><strong>INVALID_FORMAT_ID</strong> = <literal>-1</literal></paragraph>
            <paragraph>返回格式 ID 的函数会在值无效时返回此值。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-renderingdevice-method-barrier"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-barrier" names="class_renderingdevice_method_barrier">void <strong>barrier</strong> <strong>(</strong> <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; from=32767, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; to=32767 <strong>)</strong></paragraph>
            <paragraph>原地放置一个内存屏障。内存屏障可用于进行同步，避免数据竞争。另见 <reference internal="True" refid="class-renderingdevice-method-full-barrier"><inline classes="std std-ref">full_barrier</inline></reference>，可能更适合调试。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-buffer-clear"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-buffer-clear" names="class_renderingdevice_method_buffer_clear"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>buffer_clear</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> offset, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>清除 <literal>buffer</literal> 的内容，清除 <literal>size_bytes</literal> 字节，从 <literal>offset</literal> 开始。总是会造成内存障碍。</paragraph>
            <paragraph>如果出现以下情况，则打印错误：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>大小不是四的倍数</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>offset</literal> + <literal>size_bytes</literal> 指定的区域超出缓冲区</paragraph>
                </list_item>
                <list_item>
                    <paragraph>绘制列表当前处于活动状态（由 <reference internal="True" refid="class-renderingdevice-method-draw-list-begin"><inline classes="std std-ref">draw_list_begin</inline></reference> 创建）</paragraph>
                </list_item>
                <list_item>
                    <paragraph>计算列表当前处于活动状态（由 <reference internal="True" refid="class-renderingdevice-method-compute-list-begin"><inline classes="std std-ref">compute_list_begin</inline></reference> 创建）</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-buffer-get-data"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-buffer-get-data" names="class_renderingdevice_method_buffer_get_data"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>buffer_get_data</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> offset_bytes=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes=0 <strong>)</strong></paragraph>
            <paragraph>返回指定 <literal>buffer</literal> 中数据的副本，还可以设置 <literal>offset_bytes</literal> 和 <literal>size_bytes</literal>，仅复制缓冲区的某一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-buffer-update"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-buffer-update" names="class_renderingdevice_method_buffer_update"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>buffer_update</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> offset, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>使用指定的 <literal>data</literal> 更新缓冲区中从 <literal>offset</literal> 开始的 <literal>size_bytes</literal> 字节区块。引发一个内存屏障，除非 <literal>post_barrier</literal> 被设置为 <reference internal="True" refid="class-renderingdevice-constant-barrier-mask-no-barrier"><inline classes="std std-ref">BARRIER_MASK_NO_BARRIER</inline></reference>。</paragraph>
            <paragraph>如果出现以下情况，则打印错误：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>offset</literal> + <literal>size_bytes</literal> 指定的区块超出该缓冲区</paragraph>
                </list_item>
                <list_item>
                    <paragraph>绘制列表当前处于活动状态（由 <reference internal="True" refid="class-renderingdevice-method-draw-list-begin"><inline classes="std std-ref">draw_list_begin</inline></reference> 创建）</paragraph>
                </list_item>
                <list_item>
                    <paragraph>计算列表当前处于活动状态（由 <reference internal="True" refid="class-renderingdevice-method-compute-list-begin"><inline classes="std std-ref">compute_list_begin</inline></reference> 创建）</paragraph>
                </list_item>
            </bullet_list>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-capture-timestamp"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-capture-timestamp" names="class_renderingdevice_method_capture_timestamp">void <strong>capture_timestamp</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>使用指定的名称 <literal>name</literal> 创建时间戳标记。用于 <reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-cpu-time"><inline classes="std std-ref">get_captured_timestamp_cpu_time</inline></reference>、<reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-gpu-time"><inline classes="std std-ref">get_captured_timestamp_gpu_time</inline></reference>、<reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-name"><inline classes="std std-ref">get_captured_timestamp_name</inline></reference> 等方法的性能汇报。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-list-add-barrier"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-list-add-barrier" names="class_renderingdevice_method_compute_list_add_barrier">void <strong>compute_list_add_barrier</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list <strong>)</strong></paragraph>
            <paragraph>在指定的 <literal>compute_list</literal> 中引发 Vulkan 计算屏障。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-list-begin"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-list-begin" names="class_renderingdevice_method_compute_list_begin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>compute_list_begin</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_draw_overlap=false <strong>)</strong></paragraph>
            <paragraph>开始由 <literal>compute_*</literal> 方法创建的计算命令列表。应该将返回值传递给其他 <literal>compute_list_*</literal> 函数。</paragraph>
            <paragraph>如果 <literal>allow_draw_overlap</literal> 为 <literal>true</literal>，就可以在执行绘图列表的同时执行计算列表。无法同时创建多个计算列表；你必须先使用 <reference internal="True" refid="class-renderingdevice-method-compute-list-end"><inline classes="std std-ref">compute_list_end</inline></reference> 把之前的计算列表完成。</paragraph>
            <paragraph>简易的计算操作类似于下面这样（代码不是完整的示例）：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var rd = RenderingDevice.new()
var compute_list = rd.compute_list_begin()

rd.compute_list_bind_compute_pipeline(compute_list, compute_shader_dilate_pipeline)
rd.compute_list_bind_uniform_set(compute_list, compute_base_uniform_set, 0)
rd.compute_list_bind_uniform_set(compute_list, dilate_uniform_set, 1)

for i in atlas_slices:
    rd.compute_list_set_push_constant(compute_list, push_constant, push_constant.size())
    rd.compute_list_dispatch(compute_list, group_size.x, group_size.y, group_size.z)
    # 没有屏障，一起执行。

rd.compute_list_end()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-list-bind-compute-pipeline"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-list-bind-compute-pipeline" names="class_renderingdevice_method_compute_list_bind_compute_pipeline">void <strong>compute_list_bind_compute_pipeline</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> compute_pipeline <strong>)</strong></paragraph>
            <paragraph>告诉 GPU 在处理计算列表时使用什么计算管道。如果自上次调用该函数以来着色器发生了更改，Godot 将取消绑定所有描述符集，并在 <reference internal="True" refid="class-renderingdevice-method-compute-list-dispatch"><inline classes="std std-ref">compute_list_dispatch</inline></reference> 中重新绑定它们。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-list-bind-uniform-set"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-list-bind-uniform-set" names="class_renderingdevice_method_compute_list_bind_uniform_set">void <strong>compute_list_bind_uniform_set</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> uniform_set, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> set_index <strong>)</strong></paragraph>
            <paragraph>将 <literal>uniform_set</literal> 绑定到该 <literal>compute_list</literal>。Godot 确保统一集中的所有纹理都具有正确的 Vulkan 访问蒙版。如果 Godot 必须更改纹理的访问蒙版，则会引发 Vulkan 图像内存障碍。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-list-dispatch"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-list-dispatch" names="class_renderingdevice_method_compute_list_dispatch">void <strong>compute_list_dispatch</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> x_groups, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> y_groups, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> z_groups <strong>)</strong></paragraph>
            <paragraph>将计算列表提交给 GPU 处理。相当于是计算版本的 <reference internal="True" refid="class-renderingdevice-method-draw-list-draw"><inline classes="std std-ref">draw_list_draw</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-list-end"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-list-end" names="class_renderingdevice_method_compute_list_end">void <strong>compute_list_end</strong> <strong>(</strong> <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>结束由 <literal>compute_*</literal> 方法创建的计算命令列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-list-set-push-constant"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-list-set-push-constant" names="class_renderingdevice_method_compute_list_set_push_constant">void <strong>compute_list_set_push_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> compute_list, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes <strong>)</strong></paragraph>
            <paragraph>为指定的 <literal>compute_list</literal> 设置 <literal>buffer</literal> 的推送常量数据。如何使用这个二进制数据由着色器决定。另外还必须在 <literal>size_bytes</literal> 中指定缓冲的字节大小（可以通过对 <literal>buffer</literal> 调用 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray-method-size"><inline classes="std std-ref">PackedByteArray.size</inline></reference> 获取）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-pipeline-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-pipeline-create" names="class_renderingdevice_method_compute_pipeline_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>compute_pipeline_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader, <reference internal="True" refuri="class_rdpipelinespecializationconstant#class-rdpipelinespecializationconstant"><inline classes="std std-ref">RDPipelineSpecializationConstant[]</inline></reference> specialization_constants=[] <strong>)</strong></paragraph>
            <paragraph>新建计算管线。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-compute-pipeline-is-valid"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-compute-pipeline-is-valid" names="class_renderingdevice_method_compute_pipeline_is_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>compute_pipeline_is_valid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> compute_pipeline <strong>)</strong></paragraph>
            <paragraph>如果由 <literal>compute_pipeline</literal> RID 指定的计算管线有效，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-create-local-device"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-create-local-device" names="class_renderingdevice_method_create_local_device"><reference internal="True" refid="class-renderingdevice"><inline classes="std std-ref">RenderingDevice</inline></reference> <strong>create_local_device</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>新建局部 <strong>RenderingDevice</strong>。主要用于在 GPU 上执行计算操作，独立于引擎的其他部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-command-begin-label"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-command-begin-label" names="class_renderingdevice_method_draw_command_begin_label">void <strong>draw_command_begin_label</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>创建命令缓冲调试标签区域，能够在 <reference name="RenderDoc" refuri="https://renderdoc.org/">RenderDoc</reference> 等第三方工具中显示。所有的区域都应该调用 <reference internal="True" refid="class-renderingdevice-method-draw-command-end-label"><inline classes="std std-ref">draw_command_end_label</inline></reference> 结束。观察单个队列的线性提交序列时，<reference internal="True" refid="class-renderingdevice-method-draw-command-begin-label"><inline classes="std std-ref">draw_command_begin_label</inline></reference> 必须有与之对应的 <reference internal="True" refid="class-renderingdevice-method-draw-command-end-label"><inline classes="std std-ref">draw_command_end_label</inline></reference>。</paragraph>
            <paragraph>Vulkan 扩展 <literal>VK_EXT_DEBUG_UTILS_EXTENSION_NAME</literal> 必须可用并启用，这样命令缓冲调试标签区域才能正常工作。另见 <reference internal="True" refid="class-renderingdevice-method-draw-command-insert-label"><inline classes="std std-ref">draw_command_insert_label</inline></reference> 和 <reference internal="True" refid="class-renderingdevice-method-draw-command-end-label"><inline classes="std std-ref">draw_command_end_label</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-command-end-label"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-command-end-label" names="class_renderingdevice_method_draw_command_end_label">void <strong>draw_command_end_label</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>结束命令缓冲调试标签区域，该区域由 <reference internal="True" refid="class-renderingdevice-method-draw-command-begin-label"><inline classes="std std-ref">draw_command_begin_label</inline></reference> 调用开启。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-command-insert-label"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-command-insert-label" names="class_renderingdevice_method_draw_command_insert_label">void <strong>draw_command_insert_label</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>在当前的命令缓冲中插入命令缓冲调试标签区域。与 <reference internal="True" refid="class-renderingdevice-method-draw-command-begin-label"><inline classes="std std-ref">draw_command_begin_label</inline></reference> 不同，不应该调用 <reference internal="True" refid="class-renderingdevice-method-draw-command-end-label"><inline classes="std std-ref">draw_command_end_label</inline></reference> 来结束这个区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-begin"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-begin" names="class_renderingdevice_method_draw_list_begin"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>draw_list_begin</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_color_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_color_action, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_depth_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_depth_action, <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> clear_color_values=PackedColorArray(), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clear_depth=1.0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> clear_stencil=0, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> storage_textures=[] <strong>)</strong></paragraph>
            <paragraph>开始由 <literal>draw_*</literal> 方法创建的栅格绘图命令列表。应该将返回值传递给其他 <literal>draw_list_*</literal> 函数。</paragraph>
            <paragraph>无法同时创建多个绘图列表；你必须先使用 <reference internal="True" refid="class-renderingdevice-method-draw-list-end"><inline classes="std std-ref">draw_list_end</inline></reference> 把之前的绘图列表完成。</paragraph>
            <paragraph>简易的绘图操作类似于下面这样（代码不是完整的示例）：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var rd = RenderingDevice.new()
var clear_colors = PackedColorArray([Color(0, 0, 0, 0), Color(0, 0, 0, 0), Color(0, 0, 0, 0)])
var draw_list = rd.draw_list_begin(framebuffers[i], RenderingDevice.INITIAL_ACTION_CLEAR, RenderingDevice.FINAL_ACTION_READ, RenderingDevice.INITIAL_ACTION_CLEAR, RenderingDevice.FINAL_ACTION_DISCARD, clear_colors)

# 实心绘制。
rd.draw_list_bind_render_pipeline(draw_list, raster_pipeline)
rd.draw_list_bind_uniform_set(draw_list, raster_base_uniform, 0)
rd.draw_list_set_push_constant(draw_list, raster_push_constant, raster_push_constant.size())
rd.draw_list_draw(draw_list, false, 1, slice_triangle_count[i] * 3)
# 线框绘制。
rd.draw_list_bind_render_pipeline(draw_list, raster_pipeline_wire)
rd.draw_list_bind_uniform_set(draw_list, raster_base_uniform, 0)
rd.draw_list_set_push_constant(draw_list, raster_push_constant, raster_push_constant.size())
rd.draw_list_draw(draw_list, false, 1, slice_triangle_count[i] * 3)

rd.draw_list_end()</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-begin-for-screen"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-begin-for-screen" names="class_renderingdevice_method_draw_list_begin_for_screen"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>draw_list_begin_for_screen</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> screen=0, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> clear_color=Color(0, 0, 0, 1) <strong>)</strong></paragraph>
            <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-begin"><inline classes="std std-ref">draw_list_begin</inline></reference> 的高阶变体，会针对绘制到 <literal>screen</literal> ID 指定的窗口上自动调整参数。</paragraph>
            <paragraph><strong>注意：</strong>局部 RenderingDevice 没有屏幕，所以无法使用。如果在局部 RenderingDevice 上调用，<reference internal="True" refid="class-renderingdevice-method-draw-list-begin-for-screen"><inline classes="std std-ref">draw_list_begin_for_screen</inline></reference> 会返回 <reference internal="True" refid="class-renderingdevice-constant-invalid-id"><inline classes="std std-ref">INVALID_ID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-begin-split"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-begin-split" names="class_renderingdevice_method_draw_list_begin_split"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>draw_list_begin_split</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> splits, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_color_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_color_action, <reference internal="True" refid="enum-renderingdevice-initialaction"><inline classes="std std-ref">InitialAction</inline></reference> initial_depth_action, <reference internal="True" refid="enum-renderingdevice-finalaction"><inline classes="std std-ref">FinalAction</inline></reference> final_depth_action, <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> clear_color_values=PackedColorArray(), <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> clear_depth=1.0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> clear_stencil=0, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> region=Rect2(0, 0, 0, 0), <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> storage_textures=[] <strong>)</strong></paragraph>
            <paragraph><reference internal="True" refid="class-renderingdevice-method-draw-list-begin"><inline classes="std std-ref">draw_list_begin</inline></reference> 的变体，支持多个拆分。<literal>splits</literal> 参数决定创建多少拆分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-bind-index-array"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-bind-index-array" names="class_renderingdevice_method_draw_list_bind_index_array">void <strong>draw_list_bind_index_array</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> index_array <strong>)</strong></paragraph>
            <paragraph>将 <literal>index_array</literal> 绑定到指定的 <literal>draw_list</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-bind-render-pipeline"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-bind-render-pipeline" names="class_renderingdevice_method_draw_list_bind_render_pipeline">void <strong>draw_list_bind_render_pipeline</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> render_pipeline <strong>)</strong></paragraph>
            <paragraph>将 <literal>render_pipeline</literal> 绑定到指定的 <literal>draw_list</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-bind-uniform-set"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-bind-uniform-set" names="class_renderingdevice_method_draw_list_bind_uniform_set">void <strong>draw_list_bind_uniform_set</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> uniform_set, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> set_index <strong>)</strong></paragraph>
            <paragraph>将 <literal>uniform_set</literal> 绑定到指定的 <literal>draw_list</literal>。还必须指定 <literal>set_index</literal>，这是从 <literal>0</literal> 开始的标识符，必须与绘制列表中所需要的相匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-bind-vertex-array"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-bind-vertex-array" names="class_renderingdevice_method_draw_list_bind_vertex_array">void <strong>draw_list_bind_vertex_array</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> vertex_array <strong>)</strong></paragraph>
            <paragraph>将 <literal>vertex_array</literal> 绑定到指定的 <literal>draw_list</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-disable-scissor"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-disable-scissor" names="class_renderingdevice_method_draw_list_disable_scissor">void <strong>draw_list_disable_scissor</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list <strong>)</strong></paragraph>
            <paragraph>为指定的 <literal>draw_list</literal> 移除并禁用裁剪矩形。另见 <reference internal="True" refid="class-renderingdevice-method-draw-list-enable-scissor"><inline classes="std std-ref">draw_list_enable_scissor</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-draw"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-draw" names="class_renderingdevice_method_draw_list_draw">void <strong>draw_list_draw</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_indices, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> instances, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> procedural_vertex_count=0 <strong>)</strong></paragraph>
            <paragraph>将 <literal>draw_list</literal> 提交给 GPU 渲染。相当于是栅格版本的 <reference internal="True" refid="class-renderingdevice-method-compute-list-dispatch"><inline classes="std std-ref">compute_list_dispatch</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-enable-scissor"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-enable-scissor" names="class_renderingdevice_method_draw_list_enable_scissor">void <strong>draw_list_enable_scissor</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> rect=Rect2(0, 0, 0, 0) <strong>)</strong></paragraph>
            <paragraph>创建裁剪矩形并为指定的 <literal>draw_list</literal> 启用。裁剪矩形可以用来实现裁剪，会丢弃落在屏幕上指定矩形范围之外的片段。另见 <reference internal="True" refid="class-renderingdevice-method-draw-list-disable-scissor"><inline classes="std std-ref">draw_list_disable_scissor</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>指定的 <literal>rect</literal> 会自动与屏幕尺寸求交集，也就是说裁剪矩形无法超出屏幕的范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-end"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-end" names="class_renderingdevice_method_draw_list_end">void <strong>draw_list_end</strong> <strong>(</strong> <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>结束由 <literal>draw_*</literal> 方法创建的栅格绘图命令列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-set-blend-constants"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-set-blend-constants" names="class_renderingdevice_method_draw_list_set_blend_constants">void <strong>draw_list_set_blend_constants</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color <strong>)</strong></paragraph>
            <paragraph>将指定 <literal>draw_list</literal> 的混合常量设置为 <literal>color</literal>。创建图形管线时设置了 <reference internal="True" refid="class-renderingdevice-constant-dynamic-state-blend-constants"><inline classes="std std-ref">DYNAMIC_STATE_BLEND_CONSTANTS</inline></reference> 标志时才会使用混合常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-set-push-constant"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-set-push-constant" names="class_renderingdevice_method_draw_list_set_push_constant">void <strong>draw_list_set_push_constant</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> draw_list, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes <strong>)</strong></paragraph>
            <paragraph>为指定的 <literal>draw_list</literal> 设置 <literal>buffer</literal> 的推送常量数据。如何使用这个二进制数据由着色器决定。另外还必须在 <literal>size_bytes</literal> 中指定缓冲的字节大小（可以通过对 <literal>buffer</literal> 调用 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray-method-size"><inline classes="std std-ref">PackedByteArray.size</inline></reference> 获取）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-switch-to-next-pass"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-switch-to-next-pass" names="class_renderingdevice_method_draw_list_switch_to_next_pass"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>draw_list_switch_to_next_pass</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>切换到下一个绘制阶段并返回拆分 ID。等价于调用 <reference internal="True" refid="class-renderingdevice-method-draw-list-switch-to-next-pass-split"><inline classes="std std-ref">draw_list_switch_to_next_pass_split</inline></reference> 时将 <literal>splits</literal> 设为 <literal>1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-draw-list-switch-to-next-pass-split"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-draw-list-switch-to-next-pass-split" names="class_renderingdevice_method_draw_list_switch_to_next_pass_split"><reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> <strong>draw_list_switch_to_next_pass_split</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> splits <strong>)</strong></paragraph>
            <paragraph>切换到下一个绘制阶段，分配的拆分数在 <literal>splits</literal> 中指定。返回值是一个数组，包含各个拆分的 ID。如果使用的是单个拆分，请参阅 <reference internal="True" refid="class-renderingdevice-method-draw-list-switch-to-next-pass"><inline classes="std std-ref">draw_list_switch_to_next_pass</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-create" names="class_renderingdevice_method_framebuffer_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>framebuffer_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> textures, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> validate_with_format=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
            <paragraph>新建帧缓冲。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-create-empty"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-create-empty" names="class_renderingdevice_method_framebuffer_create_empty"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>framebuffer_create_empty</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference> size, <reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> samples=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> validate_with_format=-1 <strong>)</strong></paragraph>
            <paragraph>新建空的帧缓冲。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-create-multipass"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-create-multipass" names="class_renderingdevice_method_framebuffer_create_multipass"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>framebuffer_create_multipass</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> textures, <reference internal="True" refuri="class_rdframebufferpass#class-rdframebufferpass"><inline classes="std std-ref">RDFramebufferPass[]</inline></reference> passes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> validate_with_format=-1, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
            <paragraph>新建多阶段帧缓冲。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-format-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-format-create" names="class_renderingdevice_method_framebuffer_format_create"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>framebuffer_format_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rdattachmentformat#class-rdattachmentformat"><inline classes="std std-ref">RDAttachmentFormat[]</inline></reference> attachments, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
            <paragraph>新建帧缓冲格式，附件为 <literal>attachments</literal>、视图数为 <literal>view_count</literal>。返回的是新帧缓冲的唯一帧缓冲格式 ID。</paragraph>
            <paragraph>如果 <literal>view_count</literal> 大于等于 <literal>2</literal>，则会针对 VR 渲染启用多视图。要求支持 Vulkan 的多视图扩展。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-format-create-empty"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-format-create-empty" names="class_renderingdevice_method_framebuffer_format_create_empty"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>framebuffer_format_create_empty</strong> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> samples=0 <strong>)</strong></paragraph>
            <paragraph>新建空的帧缓冲格式并返回其 ID，采样数为 <literal>samples</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-format-create-multipass"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-format-create-multipass" names="class_renderingdevice_method_framebuffer_format_create_multipass"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>framebuffer_format_create_multipass</strong> <strong>(</strong> <reference internal="True" refuri="class_rdattachmentformat#class-rdattachmentformat"><inline classes="std std-ref">RDAttachmentFormat[]</inline></reference> attachments, <reference internal="True" refuri="class_rdframebufferpass#class-rdframebufferpass"><inline classes="std std-ref">RDFramebufferPass[]</inline></reference> passes, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> view_count=1 <strong>)</strong></paragraph>
            <paragraph>创建多阶段帧缓冲格式并返回其 ID，附件为 <literal>attachments</literal>、阶段数为 <literal>passes</literal>、视图数为 <literal>view_count</literal>。如果 <literal>view_count</literal> 大于等于 <literal>2</literal>，则会针对 VR 渲染启用多视图。要求支持 Vulkan 的多视图扩展。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-format-get-texture-samples"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-format-get-texture-samples" names="class_renderingdevice_method_framebuffer_format_get_texture_samples"><reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> <strong>framebuffer_format_get_texture_samples</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> format, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> render_pass=0 <strong>)</strong></paragraph>
            <paragraph>返回给定帧缓冲格式 ID <literal>format</literal> 所使用的纹理采样数量（格式由 <reference internal="True" refid="class-renderingdevice-method-framebuffer-get-format"><inline classes="std std-ref">framebuffer_get_format</inline></reference> 返回）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-get-format"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-get-format" names="class_renderingdevice_method_framebuffer_get_format"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>framebuffer_get_format</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer <strong>)</strong></paragraph>
            <paragraph>返回由帧缓冲 RID <literal>framebuffer</literal> 指定的帧缓冲的格式 ID。相同格式下，这个 ID 一定是唯一的，不需要释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-framebuffer-is-valid"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-framebuffer-is-valid" names="class_renderingdevice_method_framebuffer_is_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>framebuffer_is_valid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> framebuffer <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回由帧缓冲 RID <literal>framebuffer</literal> 指定的帧缓冲有效，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-free-rid"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-free-rid" names="class_renderingdevice_method_free_rid">void <strong>free_rid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid <strong>)</strong></paragraph>
            <paragraph>尝试释放 RenderingDevice 中的某个对象。为了防止内存泄漏，对象使用完后就应该调用这个方法，因为直接使用 RenderingDevice 时并不会自动进行内存管理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-full-barrier"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-full-barrier" names="class_renderingdevice_method_full_barrier">void <strong>full_barrier</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>原地放置一个<emphasis>完整</emphasis>的内存屏障。这是启用了所有标志的 <reference internal="True" refid="class-renderingdevice-method-barrier"><inline classes="std std-ref">barrier</inline></reference>。<reference internal="True" refid="class-renderingdevice-method-full-barrier"><inline classes="std std-ref">full_barrier</inline></reference> 应该仅用于调试，因为对性能的影响极大。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-captured-timestamp-cpu-time"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-captured-timestamp-cpu-time" names="class_renderingdevice_method_get_captured_timestamp_cpu_time"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_captured_timestamp_cpu_time</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回渲染步骤的 CPU 时间戳（引擎启动后经过的毫秒数），渲染步骤由 <literal>index</literal> 指定。另见 <reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-gpu-time"><inline classes="std std-ref">get_captured_timestamp_gpu_time</inline></reference> 和 <reference internal="True" refid="class-renderingdevice-method-capture-timestamp"><inline classes="std std-ref">capture_timestamp</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-captured-timestamp-gpu-time"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-captured-timestamp-gpu-time" names="class_renderingdevice_method_get_captured_timestamp_gpu_time"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_captured_timestamp_gpu_time</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回渲染步骤的 GPU 时间戳（引擎启动后经过的毫秒数），渲染步骤由 <literal>index</literal> 指定。另见 <reference internal="True" refid="class-renderingdevice-method-get-captured-timestamp-cpu-time"><inline classes="std std-ref">get_captured_timestamp_cpu_time</inline></reference> 和 <reference internal="True" refid="class-renderingdevice-method-capture-timestamp"><inline classes="std std-ref">capture_timestamp</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-captured-timestamp-name"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-captured-timestamp-name" names="class_renderingdevice_method_get_captured_timestamp_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_captured_timestamp_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回渲染步骤的时间戳的名称，渲染步骤由 <literal>index</literal> 指定。另见 <reference internal="True" refid="class-renderingdevice-method-capture-timestamp"><inline classes="std std-ref">capture_timestamp</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-captured-timestamps-count"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-captured-timestamps-count" names="class_renderingdevice_method_get_captured_timestamps_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_captured_timestamps_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回能够进行性能分析的时间戳（渲染步骤）总数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-captured-timestamps-frame"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-captured-timestamps-frame" names="class_renderingdevice_method_get_captured_timestamps_frame"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_captured_timestamps_frame</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回能够进行渲染时间戳查询的最后一个渲染帧的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-device-name"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-device-name" names="class_renderingdevice_method_get_device_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_device_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回视频适配器的名称（例如 "GeForce GTX 1080/PCIe/SSE2"）。等价于 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-get-video-adapter-name"><inline classes="std std-ref">RenderingServer.get_video_adapter_name</inline></reference>。另见 <reference internal="True" refid="class-renderingdevice-method-get-device-vendor-name"><inline classes="std std-ref">get_device_vendor_name</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-device-pipeline-cache-uuid"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-device-pipeline-cache-uuid" names="class_renderingdevice_method_get_device_pipeline_cache_uuid"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_device_pipeline_cache_uuid</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回管线缓存的通用唯一标识符。用于将着色器文件缓存到磁盘，避免后续运行引擎时进行着色器的重新编译。这个 UUID 会根据显卡型号以及驱动版本的不同而不同。因此，更新图形驱动会使着色器缓存失效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-device-vendor-name"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-device-vendor-name" names="class_renderingdevice_method_get_device_vendor_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_device_vendor_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回视频适配器的供应商（例如 "NVIDIA Corporation"）。等价于 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-get-video-adapter-vendor"><inline classes="std std-ref">RenderingServer.get_video_adapter_vendor</inline></reference>。另见 <reference internal="True" refid="class-renderingdevice-method-get-device-name"><inline classes="std std-ref">get_device_name</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-driver-resource"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-driver-resource" names="class_renderingdevice_method_get_driver_resource"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_driver_resource</strong> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference> resource, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> rid, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
            <paragraph>返回指定 <literal>rid</literal> 的驱动资源 <literal>resource</literal> 的唯一标识符。部分驱动资源类型会忽略指定的 <literal>rid</literal>（说明见 <reference internal="True" refid="enum-renderingdevice-driverresource"><inline classes="std std-ref">DriverResource</inline></reference>）。<literal>index</literal> 始终会被忽略，但仍然必须指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-frame-delay"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-frame-delay" names="class_renderingdevice_method_get_frame_delay"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_frame_delay</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回图形 API 所记录的帧数。值越高输入延迟就越高，但吞吐量也更一致。对于主 <strong>RenderingDevice</strong> 而言，帧会进行循环（启用三缓冲垂直同步时通常为 3）。但是局部 <strong>RenderingDevice</strong> 只有 1 帧。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-get-memory-usage"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-get-memory-usage" names="class_renderingdevice_method_get_memory_usage"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_memory_usage</strong> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-memorytype"><inline classes="std std-ref">MemoryType</inline></reference> type <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回与类型 <literal>type</literal> 对应的内存用量，单位为字节。使用 Vulkan 时，会通过 <reference name="Vulkan Memory Allocator" refuri="https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator">Vulkan Memory Allocator</reference> 计算这些统计信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-index-array-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-index-array-create" names="class_renderingdevice_method_index_array_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>index_array_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> index_buffer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index_offset, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index_count <strong>)</strong></paragraph>
            <paragraph>新建索引数组。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-index-buffer-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-index-buffer-create" names="class_renderingdevice_method_index_buffer_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>index_buffer_create</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_indices, <reference internal="True" refid="enum-renderingdevice-indexbufferformat"><inline classes="std std-ref">IndexBufferFormat</inline></reference> format, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray(), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_restart_indices=false <strong>)</strong></paragraph>
            <paragraph>新建索引缓冲。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-limit-get"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-limit-get" names="class_renderingdevice_method_limit_get"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>limit_get</strong> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-limit"><inline classes="std std-ref">Limit</inline></reference> limit <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回指定 <literal>limit</literal> 的值。这个极限值取决于当前的图形硬件（有时也和驱动版本有关）。如果超出了给定的极限，则会发生渲染错误。</paragraph>
            <paragraph>各种图形硬件的极限可以在 <reference name="Vulkan 硬件数据库" refuri="https://vulkan.gpuinfo.org/">Vulkan 硬件数据库</reference>中找到。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-render-pipeline-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-render-pipeline-create" names="class_renderingdevice_method_render_pipeline_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>render_pipeline_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> framebuffer_format, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> vertex_format, <reference internal="True" refid="enum-renderingdevice-renderprimitive"><inline classes="std std-ref">RenderPrimitive</inline></reference> primitive, <reference internal="True" refuri="class_rdpipelinerasterizationstate#class-rdpipelinerasterizationstate"><inline classes="std std-ref">RDPipelineRasterizationState</inline></reference> rasterization_state, <reference internal="True" refuri="class_rdpipelinemultisamplestate#class-rdpipelinemultisamplestate"><inline classes="std std-ref">RDPipelineMultisampleState</inline></reference> multisample_state, <reference internal="True" refuri="class_rdpipelinedepthstencilstate#class-rdpipelinedepthstencilstate"><inline classes="std std-ref">RDPipelineDepthStencilState</inline></reference> stencil_state, <reference internal="True" refuri="class_rdpipelinecolorblendstate#class-rdpipelinecolorblendstate"><inline classes="std std-ref">RDPipelineColorBlendState</inline></reference> color_blend_state, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-pipelinedynamicstateflags"><inline classes="std std-ref">PipelineDynamicStateFlags</inline></reference>&gt; dynamic_state_flags=0, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> for_render_pass=0, <reference internal="True" refuri="class_rdpipelinespecializationconstant#class-rdpipelinespecializationconstant"><inline classes="std std-ref">RDPipelineSpecializationConstant[]</inline></reference> specialization_constants=[] <strong>)</strong></paragraph>
            <paragraph>新建渲染管线。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-render-pipeline-is-valid"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-render-pipeline-is-valid" names="class_renderingdevice_method_render_pipeline_is_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>render_pipeline_is_valid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> render_pipeline <strong>)</strong></paragraph>
            <paragraph>如果由 <literal>render_pipeline</literal> RID 指定的渲染管线有效则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-sampler-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-sampler-create" names="class_renderingdevice_method_sampler_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>sampler_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rdsamplerstate#class-rdsamplerstate"><inline classes="std std-ref">RDSamplerState</inline></reference> state <strong>)</strong></paragraph>
            <paragraph>新建采样器。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-sampler-is-format-supported-for-filter"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-sampler-is-format-supported-for-filter" names="class_renderingdevice_method_sampler_is_format_supported_for_filter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>sampler_is_format_supported_for_filter</strong> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <reference internal="True" refid="enum-renderingdevice-samplerfilter"><inline classes="std std-ref">SamplerFilter</inline></reference> sampler_filter <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果实现支持使用格式为 <literal>format</literal> 和 <literal>sampler_filter</literal> 采样过滤的纹理，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-screen-get-framebuffer-format"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-screen-get-framebuffer-format" names="class_renderingdevice_method_screen_get_framebuffer_format"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>screen_get_framebuffer_format</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回屏幕帧缓冲的格式。</paragraph>
            <paragraph><strong>注意：</strong>只有 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-get-rendering-device"><inline classes="std std-ref">RenderingServer.get_rendering_device</inline></reference> 返回的主 <strong>RenderingDevice</strong> 有格式。对局部 <strong>RenderingDevice</strong> 调用时，这个方法会输出错误并返回 <reference internal="True" refid="class-renderingdevice-constant-invalid-id"><inline classes="std std-ref">INVALID_ID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-screen-get-height"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-screen-get-height" names="class_renderingdevice_method_screen_get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>screen_get_height</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> screen=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回与给定窗口 ID 图形 API 上下文相匹配的窗口高度（单位为像素）。虽然参数的名字叫 <literal>screen</literal>，但返回的是<emphasis>窗口</emphasis>的大小。另见 <reference internal="True" refid="class-renderingdevice-method-screen-get-width"><inline classes="std std-ref">screen_get_width</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>只有 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-get-rendering-device"><inline classes="std std-ref">RenderingServer.get_rendering_device</inline></reference> 返回的主 <strong>RenderingDevice</strong> 有高度。如果对局部 <strong>RenderingDevice</strong> 调用，则会输出错误并返回 <reference internal="True" refid="class-renderingdevice-constant-invalid-id"><inline classes="std std-ref">INVALID_ID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-screen-get-width"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-screen-get-width" names="class_renderingdevice_method_screen_get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>screen_get_width</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> screen=0 <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回与给定窗口 ID 图形 API 上下文相匹配的窗口宽度（单位为像素）。虽然参数的名字叫 <literal>screen</literal>，但返回的是<emphasis>窗口</emphasis>的大小。另见 <reference internal="True" refid="class-renderingdevice-method-screen-get-height"><inline classes="std std-ref">screen_get_height</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>只有 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-get-rendering-device"><inline classes="std std-ref">RenderingServer.get_rendering_device</inline></reference> 返回的主 <strong>RenderingDevice</strong> 有宽度。如果对局部 <strong>RenderingDevice</strong> 调用，则会输出错误并返回 <reference internal="True" refid="class-renderingdevice-constant-invalid-id"><inline classes="std std-ref">INVALID_ID</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-set-resource-name"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-set-resource-name" names="class_renderingdevice_method_set_resource_name">void <strong>set_resource_name</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> id, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>将 ID 为 <literal>id</literal> 的资源名称设置为 <literal>name</literal>。用于使用 <reference name="RenderDoc" refuri="https://renderdoc.org/">RenderDoc</reference> 等第三方工具进行调试。</paragraph>
            <paragraph>可以为以下类型的资源命名：纹理、采样器、顶点缓冲、索引缓冲、uniform 缓冲、纹理缓冲、存储缓冲、uniform 集缓冲、着色器、渲染管线、计算管线。无法为帧缓冲命名。尝试为不兼容的资源类型命名会输出错误。</paragraph>
            <paragraph><strong>注意：</strong>引擎以详细模式运行时（<reference internal="True" refuri="class_os#class-os-method-is-stdout-verbose"><inline classes="std std-ref">OS.is_stdout_verbose</inline></reference> = <literal>true</literal>），或者使用 <literal>dev_mode=yes</literal> SCons 选项编译引擎构建时，才会设置资源的名称。图形驱动也必须支持 Vulkan 扩展 <literal>VK_EXT_DEBUG_UTILS_EXTENSION_NAME</literal> 具名资源才能正常工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-shader-compile-binary-from-spirv"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-shader-compile-binary-from-spirv" names="class_renderingdevice_method_shader_compile_binary_from_spirv"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>shader_compile_binary_from_spirv</strong> <strong>(</strong> <reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference> spirv_data, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name="" <strong>)</strong></paragraph>
            <paragraph>从 <literal>spirv_data</literal> 编译二进制着色器，并将编译得到的二进制数据以 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> 的形式返回。编译后的着色器与所使用的 GPU 型号和驱动版本对应；无法在不同的 GPU 型号甚至不同的驱动版本上正常工作。另见 <reference internal="True" refid="class-renderingdevice-method-shader-compile-spirv-from-source"><inline classes="std std-ref">shader_compile_spirv_from_source</inline></reference>。</paragraph>
            <paragraph><literal>name</literal> 是可选的人类可读名称，会给予编译后的着色器，方便组织。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-shader-compile-spirv-from-source"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-shader-compile-spirv-from-source" names="class_renderingdevice_method_shader_compile_spirv_from_source"><reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference> <strong>shader_compile_spirv_from_source</strong> <strong>(</strong> <reference internal="True" refuri="class_rdshadersource#class-rdshadersource"><inline classes="std std-ref">RDShaderSource</inline></reference> shader_source, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> allow_cache=true <strong>)</strong></paragraph>
            <paragraph>将 <literal>shader_source</literal> 中的着色器源代码编译为 <reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference> 形式的 SPIR-V。这种中间语言的着色器可以在不同 GPU 型号和驱动版本之间移植，但无法直接在 GPU 上运行，需要先使用 <reference internal="True" refid="class-renderingdevice-method-shader-compile-binary-from-spirv"><inline classes="std std-ref">shader_compile_binary_from_spirv</inline></reference> 编译为二进制着色器。</paragraph>
            <paragraph>如果 <literal>allow_cache</literal> 为 <literal>true</literal>，则会使用 Godot 生成的着色器缓存。如果着色器已经在缓存中，这样就可能避免冗长的着色器编译步骤。<literal>allow_cache</literal> 为 <literal>false</literal>，则会忽略 Godot 的着色器缓存，始终重新编译着色器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-shader-create-from-bytecode"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-shader-create-from-bytecode" names="class_renderingdevice_method_shader_create_from_bytecode"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>shader_create_from_bytecode</strong> <strong>(</strong> <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> binary_data, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> placeholder_rid=RID() <strong>)</strong></paragraph>
            <paragraph>根据二进制的已编译着色器创建新的着色器实例。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingDevice 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。另见 <reference internal="True" refid="class-renderingdevice-method-shader-compile-binary-from-spirv"><inline classes="std std-ref">shader_compile_binary_from_spirv</inline></reference> 和 <reference internal="True" refid="class-renderingdevice-method-shader-create-from-spirv"><inline classes="std std-ref">shader_create_from_spirv</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-shader-create-from-spirv"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-shader-create-from-spirv" names="class_renderingdevice_method_shader_create_from_spirv"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>shader_create_from_spirv</strong> <strong>(</strong> <reference internal="True" refuri="class_rdshaderspirv#class-rdshaderspirv"><inline classes="std std-ref">RDShaderSPIRV</inline></reference> spirv_data, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name="" <strong>)</strong></paragraph>
            <paragraph>根据 SPIR-V 中间代码创建新的着色器实例。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingDevice 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。另见 <reference internal="True" refid="class-renderingdevice-method-shader-compile-spirv-from-source"><inline classes="std std-ref">shader_compile_spirv_from_source</inline></reference> 和 <reference internal="True" refid="class-renderingdevice-method-shader-create-from-bytecode"><inline classes="std std-ref">shader_create_from_bytecode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-shader-create-placeholder"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-shader-create-placeholder" names="class_renderingdevice_method_shader_create_placeholder"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>shader_create_placeholder</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>通过分配 RID 来创建占位符 RID，而不对其进行初始化以供在 <reference internal="True" refid="class-renderingdevice-method-shader-create-from-bytecode"><inline classes="std std-ref">shader_create_from_bytecode</inline></reference> 中使用。这允许你为着色器创建 RID 并传递它，但将着色器的编译推迟到以后的时间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-shader-get-vertex-input-attribute-mask"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-shader-get-vertex-input-attribute-mask" names="class_renderingdevice_method_shader_get_vertex_input_attribute_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>shader_get_vertex_input_attribute_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader <strong>)</strong></paragraph>
            <paragraph>返回内部顶点输入掩码。在内部，顶点输入掩码是一个无符号整数，由输入变量（在 GLSL 中通过 <literal>in</literal> 关键字指定）的位置（在 GLSL 中通过 <literal>layout(location = ...)</literal> 指定）组成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-storage-buffer-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-storage-buffer-create" names="class_renderingdevice_method_storage_buffer_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>storage_buffer_create</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray(), <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-storagebufferusage"><inline classes="std std-ref">StorageBufferUsage</inline></reference>&gt; usage=0 <strong>)</strong></paragraph>
            <paragraph>创建带有指定数据 <literal>data</literal> 用法为 <literal>usage</literal> 的<reference name="存储缓冲" refuri="https://vkguide.dev/docs/chapter-4/storage_buffers/">存储缓冲</reference>。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-submit"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-submit" names="class_renderingdevice_method_submit">void <strong>submit</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>推送帧设置与绘图命令缓冲，然后将局部设备标记为当前正在处理（这样就能够调用 <reference internal="True" refid="class-renderingdevice-method-sync"><inline classes="std std-ref">sync</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>仅在局部 RenderingDevice 上可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-sync"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-sync" names="class_renderingdevice_method_sync">void <strong>sync</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>让 CPU 与 GPU 进行强制同步，部分场合可能需要进行这样的操作。请只在需要时调用，因为 CPU 与 GPU 的同步存在性能开销。</paragraph>
            <paragraph><strong>注意：</strong>仅在局部 RenderingDevice 上可用。</paragraph>
            <paragraph><strong>注意：</strong>只能在 <reference internal="True" refid="class-renderingdevice-method-submit"><inline classes="std std-ref">submit</inline></reference> 后调用 <reference internal="True" refid="class-renderingdevice-method-sync"><inline classes="std std-ref">sync</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-buffer-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-buffer-create" names="class_renderingdevice_method_texture_buffer_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_buffer_create</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray() <strong>)</strong></paragraph>
            <paragraph>新建纹理缓冲。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-clear"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-clear" names="class_renderingdevice_method_texture_clear"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>texture_clear</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture, <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> color, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> base_mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap_count, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> base_layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_count, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>将指定的 <literal>texture</literal> 清屏，将所有像素替换为指定的颜色 <literal>color</literal>。<literal>base_mipmap</literal> 和 <literal>mipmap_count</literal> 决定该清屏操作影响纹理的哪些 mipmap，而 <literal>base_layer</literal> 和 <literal>layer_count</literal> 决定该清屏操作影响 3D 纹理（或纹理数组）的哪几层。如果是 2D 纹理（本来就只有一层），则 <literal>base_layer</literal> 必须为 <literal>0</literal>，<literal>layer_count</literal> 必须为 <literal>1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果使用 <literal>texture</literal> 的绘图列表是创建的帧缓冲的一部分，则该纹理不能被清屏。确保绘图列表释放后（并且使用它的颜色和深度纹理没有被设为 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference>）才能对该纹理做清屏操作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-copy"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-copy" names="class_renderingdevice_method_texture_copy"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>texture_copy</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> from_texture, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> to_texture, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> from_pos, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> to_pos, <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> size, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> src_mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> dst_mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> src_layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> dst_layer, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>将 <literal>from_texture</literal> 复制到 <literal>to_texture</literal>，使用指定的 <literal>from_pos</literal>、<literal>to_pos</literal> 和 <literal>size</literal> 坐标。对于二维纹理，<literal>from_pos</literal>、<literal>to_pos</literal> 和 <literal>size</literal> 的 Z 轴必须为 <literal>0</literal>。来源和目标的 mipmap/图层也必须指定，对于没有 mipmap 或单层纹理的情况，这些参数应为 <literal>0</literal>。如果纹理复制成功，则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，否则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果使用 <literal>from_texture</literal> 纹理的绘图列表是创建的帧缓冲的一部分，则无法复制。请确保绘图列表已经完成（并且使用它的颜色/深度纹理没有设置为 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference>），然后再复制纹理。</paragraph>
            <paragraph><strong>注意：</strong><literal>from_texture</literal> 纹理需要获取 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-can-copy-from-bit"><inline classes="std std-ref">TEXTURE_USAGE_CAN_COPY_FROM_BIT</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果使用 <literal>to_texture</literal> 纹理的绘图列表是创建的帧缓冲的一部分，则无法复制。请确保绘图列表已经完成（并且使用它的颜色/深度纹理没有设置为 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference>），然后再复制纹理。</paragraph>
            <paragraph><strong>注意：</strong><literal>to_texture</literal> 纹理需要获取 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-can-copy-to-bit"><inline classes="std std-ref">TEXTURE_USAGE_CAN_COPY_TO_BIT</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>from_texture</literal> 和 <literal>to_texture</literal> 的类型必须相同（颜色或深度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-create" names="class_renderingdevice_method_texture_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference> format, <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray[]</inline></reference> data=[] <strong>)</strong></paragraph>
            <paragraph>新建纹理。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <paragraph><strong>注意：</strong>请勿与 <reference internal="True" refuri="class_renderingserver#class-renderingserver-method-texture-2d-create"><inline classes="std std-ref">RenderingServer.texture_2d_create</inline></reference> 混淆，后者创建的是 Godot 专属的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> 资源，不是图形 API 自己的纹理类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-create-from-extension"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-create-from-extension" names="class_renderingdevice_method_texture_create_from_extension"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_create_from_extension</strong> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-texturetype"><inline classes="std std-ref">TextureType</inline></reference> type, <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <reference internal="True" refid="enum-renderingdevice-texturesamples"><inline classes="std std-ref">TextureSamples</inline></reference> samples, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference>&gt; usage_flags, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> image, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> width, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> height, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> depth, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layers <strong>)</strong></paragraph>
            <paragraph>使用给定的 <literal>type</literal>、<literal>format</literal>、<literal>samples</literal>、<literal>usage_flags</literal>、<literal>width</literal>、<literal>height</literal>、<literal>depth</literal>、和 <literal>layers</literal> 返回已有 <literal>image</literal>（<literal>VkImage</literal>）的 RID。这可被用于允许 Godot 渲染到外部图像上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-create-shared"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-create-shared" names="class_renderingdevice_method_texture_create_shared"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_create_shared</strong> <strong>(</strong> <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> with_texture <strong>)</strong></paragraph>
            <paragraph>使用指定的 <literal>view</literal> 和 <literal>with_texture</literal> 中的纹理信息创建共享纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-create-shared-from-slice"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-create-shared-from-slice" names="class_renderingdevice_method_texture_create_shared_from_slice"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>texture_create_shared_from_slice</strong> <strong>(</strong> <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference> view, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> with_texture, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmap, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> mipmaps=1, <reference internal="True" refid="enum-renderingdevice-textureslicetype"><inline classes="std std-ref">TextureSliceType</inline></reference> slice_type=0 <strong>)</strong></paragraph>
            <paragraph>使用指定的 <literal>view</literal> 和 <literal>with_texture</literal> 的 <literal>layer</literal> 和 <literal>mipmap</literal> 中的纹理信息创建共享纹理。可以使用 <literal>mipmaps</literal> 参数控制从原始纹理中包含的 mipmap 数量。仅适用于 3D 纹理、纹理数组、立方体贴图等多层纹理。单层纹理请使用 <reference internal="True" refid="class-renderingdevice-method-texture-create-shared"><inline classes="std std-ref">texture_create_shared</inline></reference>。</paragraph>
            <paragraph>对于 2D 纹理（仅有一个图层），<literal>layer</literal> 必须为 <literal>0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>图层切片仅支持 2D 纹理数组，不支持 3D 纹理或立方体贴图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-get-data"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-get-data" names="class_renderingdevice_method_texture_get_data"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>texture_get_data</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer <strong>)</strong></paragraph>
            <paragraph>将纹理 <literal>texture</literal> 中指定层 <literal>layer</literal> 的纹理数据以原始二进制数据的形式返回。2D 纹理（只有一层）的 <literal>layer</literal> 必须为 <literal>0</literal>。</paragraph>
            <paragraph><strong>注意：</strong>如果使用 <literal>texture</literal> 纹理的绘图列表是创建的帧缓冲的一部分，则无法获取。请确保绘图列表已经完成（并且使用它的颜色/深度纹理没有设置为 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference>），然后获取纹理。否则会输出错误并返回空的 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>texture</literal> 纹理需要获取 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-can-copy-from-bit"><inline classes="std std-ref">TEXTURE_USAGE_CAN_COPY_FROM_BIT</inline></reference>。否则会输出错误并返回空的 <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-get-format"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-get-format" names="class_renderingdevice_method_texture_get_format"><reference internal="True" refuri="class_rdtextureformat#class-rdtextureformat"><inline classes="std std-ref">RDTextureFormat</inline></reference> <strong>texture_get_format</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
            <paragraph>返回用于创建该纹理的数据格式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-get-native-handle"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-get-native-handle" names="class_renderingdevice_method_texture_get_native_handle"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>texture_get_native_handle</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
            <paragraph>返回该纹理对象的内部图形句柄。主要用于 GDExtension 与第三方 API 通讯。</paragraph>
            <paragraph><strong>注意：</strong>这个函数返回的是 <literal>uint64_t</literal>，内部映射到 <literal>GLuint</literal>（OpenGL）或 <literal>VkImage</literal>（Vulkan）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-is-format-supported-for-usage"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-is-format-supported-for-usage" names="class_renderingdevice_method_texture_is_format_supported_for_usage"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>texture_is_format_supported_for_usage</strong> <strong>(</strong> <reference internal="True" refid="enum-renderingdevice-dataformat"><inline classes="std std-ref">DataFormat</inline></reference> format, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-textureusagebits"><inline classes="std std-ref">TextureUsageBits</inline></reference>&gt; usage_flags <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果指定的格式 <literal>format</literal> 支持给定的用途标志 <literal>usage_flags</literal>，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-is-shared"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-is-shared" names="class_renderingdevice_method_texture_is_shared"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>texture_is_shared</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
            <paragraph>如果 <literal>texture</literal> 是共享纹理，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。见 <reference internal="True" refuri="class_rdtextureview#class-rdtextureview"><inline classes="std std-ref">RDTextureView</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-is-valid"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-is-valid" names="class_renderingdevice_method_texture_is_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>texture_is_valid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture <strong>)</strong></paragraph>
            <paragraph>如果 <literal>texture</literal> 有效，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-resolve-multisample"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-resolve-multisample" names="class_renderingdevice_method_texture_resolve_multisample"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>texture_resolve_multisample</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> from_texture, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> to_texture, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>启用多重采样抗锯齿，将 <literal>from_texture</literal> 纹理溶解至 <literal>to_texture</literal>。启用后才能够正常渲染 MSAA 帧缓冲。成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，否则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>from_texture</literal> 和 <literal>to_texture</literal> 的尺寸、格式、类型（颜色或深度）都必须相同。</paragraph>
            <paragraph><strong>注意：</strong>如果使用 <literal>from_texture</literal> 纹理的绘图列表是创建的帧缓冲的一部分，则无法复制。请确保绘图列表已经完成（并且使用它的颜色/深度纹理没有设置为 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference>），然后再复制纹理。</paragraph>
            <paragraph><strong>注意：</strong><literal>from_texture</literal> 纹理需要获取 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-can-copy-from-bit"><inline classes="std std-ref">TEXTURE_USAGE_CAN_COPY_FROM_BIT</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>from_texture</literal> 纹理必须为多重采样，并且必须为 2D 纹理（或者是 3D/立方体贴图纹理的切片）。</paragraph>
            <paragraph><strong>注意：</strong>如果使用 <literal>to_texture</literal> 纹理的绘图列表是创建的帧缓冲的一部分，则无法复制。请确保绘图列表已经完成（并且使用它的颜色/深度纹理没有设置为 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference>），然后再溶解纹理。</paragraph>
            <paragraph><strong>注意：</strong><literal>to_texture</literal> 纹理需要获取 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-can-copy-to-bit"><inline classes="std std-ref">TEXTURE_USAGE_CAN_COPY_TO_BIT</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><literal>from_texture</literal> 纹理必须<strong>不能</strong>是多重采样，并且必须为 2D 纹理（或者是 3D/立方体贴图纹理的切片）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-texture-update"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-texture-update" names="class_renderingdevice_method_texture_update"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>texture_update</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> texture, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data, <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>&lt;<reference internal="True" refid="enum-renderingdevice-barriermask"><inline classes="std std-ref">BarrierMask</inline></reference>&gt; post_barrier=32767 <strong>)</strong></paragraph>
            <paragraph>使用新的数据更新纹理数据，会原地替换之前的数据。更新后的纹理数据必须和原有尺寸、格式一致。2D 纹理（只有一层）的 <literal>layer</literal> 必须为 <literal>0</literal>。如果更新成功则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，否则返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-err-invalid-parameter"><inline classes="std std-ref">@GlobalScope.ERR_INVALID_PARAMETER</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>精致在创建绘图列表或计算列表时更新纹理。</paragraph>
            <paragraph><strong>注意：</strong>如果使用 <literal>texture</literal> 纹理的绘图列表是创建的帧缓冲的一部分，则无法更新。请确保绘图列表已经完成（并且使用它的颜色/深度纹理没有设置为 <reference internal="True" refid="class-renderingdevice-constant-final-action-continue"><inline classes="std std-ref">FINAL_ACTION_CONTINUE</inline></reference>），然后再更新纹理。</paragraph>
            <paragraph><strong>注意：</strong><literal>texture</literal> 纹理需要获取 <reference internal="True" refid="class-renderingdevice-constant-texture-usage-can-update-bit"><inline classes="std std-ref">TEXTURE_USAGE_CAN_UPDATE_BIT</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-uniform-buffer-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-uniform-buffer-create" names="class_renderingdevice_method_uniform_buffer_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>uniform_buffer_create</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray() <strong>)</strong></paragraph>
            <paragraph>新建 uniform 缓冲。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingDevice 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-uniform-set-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-uniform-set-create" names="class_renderingdevice_method_uniform_set_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>uniform_set_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rduniform#class-rduniform"><inline classes="std std-ref">RDUniform[]</inline></reference> uniforms, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> shader, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> shader_set <strong>)</strong></paragraph>
            <paragraph>新建 uniform 集。可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingDevice 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-uniform-set-is-valid"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-uniform-set-is-valid" names="class_renderingdevice_method_uniform_set_is_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uniform_set_is_valid</strong> <strong>(</strong> <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> uniform_set <strong>)</strong></paragraph>
            <paragraph>检查 <literal>uniform_set</literal> 是否有效，即是否有归属。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-vertex-array-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-vertex-array-create" names="class_renderingdevice_method_vertex_array_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>vertex_array_create</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> vertex_count, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> vertex_format, <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID[]</inline></reference> src_buffers, <reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> offsets=PackedInt64Array() <strong>)</strong></paragraph>
            <paragraph>根据给定的缓冲区创建顶点数组。还可以为各个缓冲区定义偏移量 <literal>offsets</literal>（单位为字节）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-vertex-buffer-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-vertex-buffer-create" names="class_renderingdevice_method_vertex_buffer_create"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>vertex_buffer_create</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> size_bytes, <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> data=PackedByteArray(), <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> use_as_storage=false <strong>)</strong></paragraph>
            <paragraph>可以通过返回的 RID 进行访问。</paragraph>
            <paragraph>RID 使用结束后，应该使用 RenderingServer 的 <reference internal="True" refid="class-renderingdevice-method-free-rid"><inline classes="std std-ref">free_rid</inline></reference> 方法进行释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-renderingdevice-method-vertex-format-create"></target>
            <paragraph classes="classref-method" ids="class-renderingdevice-method-vertex-format-create" names="class_renderingdevice_method_vertex_format_create"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>vertex_format_create</strong> <strong>(</strong> <reference internal="True" refuri="class_rdvertexattribute#class-rdvertexattribute"><inline classes="std std-ref">RDVertexAttribute[]</inline></reference> vertex_descriptions <strong>)</strong></paragraph>
            <paragraph>新建顶点描述为 <literal>vertex_descriptions</literal> 的顶点格式。返回与新建顶点格式对应的唯一格式 ID。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
