<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_webrtcpeerconnection.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/webrtc/doc_classes/WebRTCPeerConnection.xml.</comment>
    <target refid="class-webrtcpeerconnection"></target>
    <section ids="webrtcpeerconnection class-webrtcpeerconnection" names="webrtcpeerconnection class_webrtcpeerconnection">
        <title>WebRTCPeerConnection</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_webrtcpeerconnectionextension#class-webrtcpeerconnectionextension"><inline classes="std std-ref">WebRTCPeerConnectionExtension</inline></reference></paragraph>
        <paragraph>与 WebRTC 对等体连接的接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>本地计算机和远程对等体之间的 WebRTC 连接。提供一个接口来连接、维护和监控连接。</paragraph>
            <paragraph>在两个对等体之间建立 WebRTC 连接看上去可能不是一项简单的任务，但它可以分解为 3 个主要步骤。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>想要启动连接的对等体（<literal>A</literal>从现在开始）创建一个提交，并将其发送给另一个对等体（<literal>B</literal>从现在开始）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>B</literal> 收到要约，生成和回答，并将其发送给 <literal>A</literal>）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>A</literal> 和 <literal>B</literal> 然后生成并相互交换 ICE 候选。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在这些步骤之后，连接应该成功建立。继续阅读或查看教程以了解更多信息。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="67"></colspec>
                    <colspec colwidth="189"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-add-ice-candidate"><inline classes="std std-ref">add_ice_candidate</inline></reference>(media: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-close"><inline classes="std std-ref">close</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_webrtcdatachannel#class-webrtcdatachannel"><inline classes="std std-ref">WebRTCDataChannel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-create-data-channel"><inline classes="std std-ref">create_data_channel</inline></reference>(label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, options: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {})</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-create-offer"><inline classes="std std-ref">create_offer</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-get-connection-state"><inline classes="std std-ref">get_connection_state</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-webrtcpeerconnection-gatheringstate"><inline classes="std std-ref">GatheringState</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-get-gathering-state"><inline classes="std std-ref">get_gathering_state</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-get-signaling-state"><inline classes="std std-ref">get_signaling_state</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-initialize"><inline classes="std std-ref">initialize</inline></reference>(configuration: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {})</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-poll"><inline classes="std std-ref">poll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-set-default-extension"><inline classes="std std-ref">set_default_extension</inline></reference>(extension_class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-set-local-description"><inline classes="std std-ref">set_local_description</inline></reference>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, sdp: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-webrtcpeerconnection-method-set-remote-description"><inline classes="std std-ref">set_remote_description</inline></reference>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, sdp: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="信号">
            <title>信号</title>
            <target refid="class-webrtcpeerconnection-signal-data-channel-received"></target>
            <paragraph classes="classref-signal" ids="class-webrtcpeerconnection-signal-data-channel-received" names="class_webrtcpeerconnection_signal_data_channel_received"><strong>data_channel_received</strong>(channel: <reference internal="True" refuri="class_webrtcdatachannel#class-webrtcdatachannel"><inline classes="std std-ref">WebRTCDataChannel</inline></reference>) <reference internal="True" refid="class-webrtcpeerconnection-signal-data-channel-received"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当收到一个新的带内通道时发出，即在通道是用<literal>negotiated: false</literal>（默认）。</paragraph>
            <paragraph>该对象将是<reference internal="True" refuri="class_webrtcdatachannel#class-webrtcdatachannel"><inline classes="std std-ref">WebRTCDataChannel</inline></reference>的一个实例。你必须保持它的引用，否则它将被自动关闭。参阅<reference internal="True" refid="class-webrtcpeerconnection-method-create-data-channel"><inline classes="std std-ref">create_data_channel</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-signal-ice-candidate-created"></target>
            <paragraph classes="classref-signal" ids="class-webrtcpeerconnection-signal-ice-candidate-created" names="class_webrtcpeerconnection_signal_ice_candidate_created"><strong>ice_candidate_created</strong>(media: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-webrtcpeerconnection-signal-ice-candidate-created"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当新的 ICE 候选者被创建时触发。这三个参数是为了通过信号服务器传递给远程对等体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-signal-session-description-created"></target>
            <paragraph classes="classref-signal" ids="class-webrtcpeerconnection-signal-session-description-created" names="class_webrtcpeerconnection_signal_session_description_created"><strong>session_description_created</strong>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, sdp: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-webrtcpeerconnection-signal-session-description-created"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在成功调用 <reference internal="True" refid="class-webrtcpeerconnection-method-create-offer"><inline classes="std std-ref">create_offer</inline></reference> 或 <reference internal="True" refid="class-webrtcpeerconnection-method-set-remote-description"><inline classes="std std-ref">set_remote_description</inline></reference> 后触发，当它产生一个应答时。这些参数是为了传递给这个对象上的 <reference internal="True" refid="class-webrtcpeerconnection-method-set-local-description"><inline classes="std std-ref">set_local_description</inline></reference>，并通过信号服务器发送给远程对等体。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-webrtcpeerconnection-connectionstate"></target>
            <paragraph classes="classref-enumeration" ids="enum-webrtcpeerconnection-connectionstate" names="enum_webrtcpeerconnection_connectionstate">enum <strong>ConnectionState</strong>: <reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-webrtcpeerconnection-constant-state-new"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-state-new" names="class_webrtcpeerconnection_constant_state_new"><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference> <strong>STATE_NEW</strong> = <literal>0</literal></paragraph>
            <paragraph>连接是新的，数据通道和提交可以在这种状态下创建。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-state-connecting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-state-connecting" names="class_webrtcpeerconnection_constant_state_connecting"><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference> <strong>STATE_CONNECTING</strong> = <literal>1</literal></paragraph>
            <paragraph>对等体正在连接，ICE 正在进行中，没有任何传输失败。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-state-connected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-state-connected" names="class_webrtcpeerconnection_constant_state_connected"><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference> <strong>STATE_CONNECTED</strong> = <literal>2</literal></paragraph>
            <paragraph>对等体已连接，所有的 ICE 传输都已连接。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-state-disconnected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-state-disconnected" names="class_webrtcpeerconnection_constant_state_disconnected"><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference> <strong>STATE_DISCONNECTED</strong> = <literal>3</literal></paragraph>
            <paragraph>至少有一个 ICE 传输被断开连接。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-state-failed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-state-failed" names="class_webrtcpeerconnection_constant_state_failed"><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference> <strong>STATE_FAILED</strong> = <literal>4</literal></paragraph>
            <paragraph>一个或更多的 ICE 传输失败。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-state-closed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-state-closed" names="class_webrtcpeerconnection_constant_state_closed"><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference> <strong>STATE_CLOSED</strong> = <literal>5</literal></paragraph>
            <paragraph>对等连接已关闭，例如在调用 <reference internal="True" refid="class-webrtcpeerconnection-method-close"><inline classes="std std-ref">close</inline></reference> 后。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-webrtcpeerconnection-gatheringstate"></target>
            <paragraph classes="classref-enumeration" ids="enum-webrtcpeerconnection-gatheringstate" names="enum_webrtcpeerconnection_gatheringstate">enum <strong>GatheringState</strong>: <reference internal="True" refid="enum-webrtcpeerconnection-gatheringstate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-webrtcpeerconnection-constant-gathering-state-new"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-gathering-state-new" names="class_webrtcpeerconnection_constant_gathering_state_new"><reference internal="True" refid="enum-webrtcpeerconnection-gatheringstate"><inline classes="std std-ref">GatheringState</inline></reference> <strong>GATHERING_STATE_NEW</strong> = <literal>0</literal></paragraph>
            <paragraph>对等体连接刚刚建立，还没有做任何联网工作。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-gathering-state-gathering"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-gathering-state-gathering" names="class_webrtcpeerconnection_constant_gathering_state_gathering"><reference internal="True" refid="enum-webrtcpeerconnection-gatheringstate"><inline classes="std std-ref">GatheringState</inline></reference> <strong>GATHERING_STATE_GATHERING</strong> = <literal>1</literal></paragraph>
            <paragraph>ICE 代理正在收集候选连接。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-gathering-state-complete"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-gathering-state-complete" names="class_webrtcpeerconnection_constant_gathering_state_complete"><reference internal="True" refid="enum-webrtcpeerconnection-gatheringstate"><inline classes="std std-ref">GatheringState</inline></reference> <strong>GATHERING_STATE_COMPLETE</strong> = <literal>2</literal></paragraph>
            <paragraph>ICE 代理已完成候选连接的收集。如果发生了需要收集新候选的情况，例如新添加了接口、新添加了 ICE 服务器，则会返回收集状态，进行候选项的收集。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-webrtcpeerconnection-signalingstate"></target>
            <paragraph classes="classref-enumeration" ids="enum-webrtcpeerconnection-signalingstate" names="enum_webrtcpeerconnection_signalingstate">enum <strong>SignalingState</strong>: <reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-webrtcpeerconnection-constant-signaling-state-stable"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-signaling-state-stable" names="class_webrtcpeerconnection_constant_signaling_state_stable"><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference> <strong>SIGNALING_STATE_STABLE</strong> = <literal>0</literal></paragraph>
            <paragraph>没有正在进行的要约和答复的交换。这可能意味着 <strong>WebRTCPeerConnection</strong> 是新的（<reference internal="True" refid="class-webrtcpeerconnection-constant-state-new"><inline classes="std std-ref">STATE_NEW</inline></reference>），或者协商已完成并且连接已经建立（<reference internal="True" refid="class-webrtcpeerconnection-constant-state-connected"><inline classes="std std-ref">STATE_CONNECTED</inline></reference>）。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-signaling-state-have-local-offer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-signaling-state-have-local-offer" names="class_webrtcpeerconnection_constant_signaling_state_have_local_offer"><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference> <strong>SIGNALING_STATE_HAVE_LOCAL_OFFER</strong> = <literal>1</literal></paragraph>
            <paragraph>本地对等体已调用 <reference internal="True" refid="class-webrtcpeerconnection-method-set-local-description"><inline classes="std std-ref">set_local_description</inline></reference>，正在传入代表邀约的 SDP（通常由调用 <reference internal="True" refid="class-webrtcpeerconnection-method-create-offer"><inline classes="std std-ref">create_offer</inline></reference> 创建），邀约已成功应用。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-signaling-state-have-remote-offer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-signaling-state-have-remote-offer" names="class_webrtcpeerconnection_constant_signaling_state_have_remote_offer"><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference> <strong>SIGNALING_STATE_HAVE_REMOTE_OFFER</strong> = <literal>2</literal></paragraph>
            <paragraph>远程对等体已创建邀约，并将其使用信号服务器传递给了本地对等体，本地对等体已调用 <reference internal="True" refid="class-webrtcpeerconnection-method-set-remote-description"><inline classes="std std-ref">set_remote_description</inline></reference> 将邀约设置为远程描述。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-signaling-state-have-local-pranswer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-signaling-state-have-local-pranswer" names="class_webrtcpeerconnection_constant_signaling_state_have_local_pranswer"><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference> <strong>SIGNALING_STATE_HAVE_LOCAL_PRANSWER</strong> = <literal>3</literal></paragraph>
            <paragraph>已应用远程对等体发送的邀约，已创建恢复并调用了 <reference internal="True" refid="class-webrtcpeerconnection-method-set-local-description"><inline classes="std std-ref">set_local_description</inline></reference> 进行应用。这个临时应答描述了支持的媒体格式等信息，但可能不包含完整的 ICE 候选项。后续会单独发送更多候选项。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-signaling-state-have-remote-pranswer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-signaling-state-have-remote-pranswer" names="class_webrtcpeerconnection_constant_signaling_state_have_remote_pranswer"><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference> <strong>SIGNALING_STATE_HAVE_REMOTE_PRANSWER</strong> = <literal>4</literal></paragraph>
            <paragraph>已经接收到初步回应，并已成功地应用到之前通过调用 <reference internal="True" refid="class-webrtcpeerconnection-method-set-local-description"><inline classes="std std-ref">set_local_description</inline></reference> 发送并建立的邀请中。</paragraph>
            <target refid="class-webrtcpeerconnection-constant-signaling-state-closed"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-webrtcpeerconnection-constant-signaling-state-closed" names="class_webrtcpeerconnection_constant_signaling_state_closed"><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference> <strong>SIGNALING_STATE_CLOSED</strong> = <literal>5</literal></paragraph>
            <paragraph>该 <strong>WebRTCPeerConnection</strong> 已关闭连接。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-webrtcpeerconnection-method-add-ice-candidate"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-add-ice-candidate" names="class_webrtcpeerconnection_method_add_ice_candidate"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>add_ice_candidate</strong>(media: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-webrtcpeerconnection-method-add-ice-candidate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加一个由远程对等体产生的冻结候选，并通过信令服务器接收。请参阅<reference internal="True" refid="class-webrtcpeerconnection-signal-ice-candidate-created"><inline classes="std std-ref">ice_candidate_created</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-close"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-close" names="class_webrtcpeerconnection_method_close"><abbreviation explanation="无返回值。">void</abbreviation> <strong>close</strong>() <reference internal="True" refid="class-webrtcpeerconnection-method-close"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭对等体连接和与之相关的所有数据通道。</paragraph>
            <paragraph><strong>注意：</strong>你不能为一个新的连接重复使用这个对象，除非你调用 <reference internal="True" refid="class-webrtcpeerconnection-method-initialize"><inline classes="std std-ref">initialize</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-create-data-channel"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-create-data-channel" names="class_webrtcpeerconnection_method_create_data_channel"><reference internal="True" refuri="class_webrtcdatachannel#class-webrtcdatachannel"><inline classes="std std-ref">WebRTCDataChannel</inline></reference> <strong>create_data_channel</strong>(label: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, options: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}) <reference internal="True" refid="class-webrtcpeerconnection-method-create-data-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回新的 <reference internal="True" refuri="class_webrtcdatachannel#class-webrtcdatachannel"><inline classes="std std-ref">WebRTCDataChannel</inline></reference>，或在失败时返回 <literal>null</literal>，具有给定的 <literal>label</literal>，并通过 <literal>options</literal> 字典进行配置。这个方法只有在连接处于 <reference internal="True" refid="class-webrtcpeerconnection-constant-state-new"><inline classes="std std-ref">STATE_NEW</inline></reference> 状态时才能被调用。</paragraph>
            <paragraph>有两种方法来创建工作数据通道：要么只在其中一个对等体上调用 <reference internal="True" refid="class-webrtcpeerconnection-method-create-data-channel"><inline classes="std std-ref">create_data_channel</inline></reference>，并在另一个对等体上监听<reference internal="True" refid="class-webrtcpeerconnection-signal-data-channel-received"><inline classes="std std-ref">data_channel_received</inline></reference>，要么在两个对等体上调用 <reference internal="True" refid="class-webrtcpeerconnection-method-create-data-channel"><inline classes="std std-ref">create_data_channel</inline></reference>，数值相同，并将 <literal>"negotiated"</literal> 选项设置为 <literal>true</literal>。</paragraph>
            <paragraph>有效的 <literal>options</literal> 是：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
    "negotiated": true, # 当设置为 "true"时，默认关闭，意味着该通道是在频带外协商的。"id"也必须被设置。"data_channel_received" 将不会被调用。
    "id":1, # 当 "negotiated"为真时，这个值也必须被设置为两个对等体的相同值。

    # 只能指定maxRetransmits和maxPacketLifeTime中的一个，不能同时指定。它们会使信道变得不可靠，但在实时性方面会更好。
    "maxRetransmits":1, # 指定对等体在数据包未被确认时尝试重传的最大次数。
    "maxPacketLifeTime":100, # 指定放弃重传未被确认的数据包之前的最大时间，以毫秒为单位。
    "ordered": true, # 当处于不可靠模式时，即 "maxRetransmits "或 "maxPacketLifetime "被设置，"ordered"指定是否要强制执行数据包排序，默认为true。

    "protocol":"my-custom-protocol", # 这个通道的自定义子协议字符串。
}</literal_block>
            <paragraph><strong>注意：</strong>你必须保持对以这种方式创建的通道的引用，否则它将被关闭。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-create-offer"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-create-offer" names="class_webrtcpeerconnection_method_create_offer"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>create_offer</strong>() <reference internal="True" refid="class-webrtcpeerconnection-method-create-offer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建一个新的 SDP 提交，以开始与远程对等体的 WebRTC 连接。在调用此方法之前，至少要创建一个 <reference internal="True" refuri="class_webrtcdatachannel#class-webrtcdatachannel"><inline classes="std std-ref">WebRTCDataChannel</inline></reference>。</paragraph>
            <paragraph>如果这个函数返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>，当会话准备好被发送时，<reference internal="True" refid="class-webrtcpeerconnection-signal-session-description-created"><inline classes="std std-ref">session_description_created</inline></reference> 将被调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-get-connection-state"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-get-connection-state" names="class_webrtcpeerconnection_method_get_connection_state"><reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference> <strong>get_connection_state</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webrtcpeerconnection-method-get-connection-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回连接状态。见 <reference internal="True" refid="enum-webrtcpeerconnection-connectionstate"><inline classes="std std-ref">ConnectionState</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-get-gathering-state"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-get-gathering-state" names="class_webrtcpeerconnection_method_get_gathering_state"><reference internal="True" refid="enum-webrtcpeerconnection-gatheringstate"><inline classes="std std-ref">GatheringState</inline></reference> <strong>get_gathering_state</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webrtcpeerconnection-method-get-gathering-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回连接的 ICE <reference internal="True" refid="enum-webrtcpeerconnection-gatheringstate"><inline classes="std std-ref">GatheringState</inline></reference>。你可以据此来检测，例如，ICE 候选项的收集是否完成。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-get-signaling-state"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-get-signaling-state" names="class_webrtcpeerconnection_method_get_signaling_state"><reference internal="True" refid="enum-webrtcpeerconnection-signalingstate"><inline classes="std std-ref">SignalingState</inline></reference> <strong>get_signaling_state</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-webrtcpeerconnection-method-get-signaling-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>连接或重新连接到另一个对等体时，返回连接本地端的信令状态。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-initialize"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-initialize" names="class_webrtcpeerconnection_method_initialize"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>initialize</strong>(configuration: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> = {}) <reference internal="True" refid="class-webrtcpeerconnection-method-initialize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重新初始化这个对等体连接，关闭任何先前活动的连接，并回到 <reference internal="True" refid="class-webrtcpeerconnection-constant-state-new"><inline classes="std std-ref">STATE_NEW</inline></reference> 状态。传入配置选项字典 <literal>configuration</literal> 能够对该对等体连接进行配置。</paragraph>
            <paragraph>有效的 <literal>configuration</literal> 选项有：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
    "iceServers": [
        {
            "urls": [ "stun:stun.example.com:3478" ], # 若干 STUN 服务器。
        },
        {
            "urls": [ "turn:turn.example.com:3478" ], # 若干 TURN 服务器。
            "username": "a_username", # TURN 服务器的用户名，选填。
            "credential": "a_password", # TURN 服务器的密码，选填。
        }
    ]
}</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-poll"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-poll" names="class_webrtcpeerconnection_method_poll"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>poll</strong>() <reference internal="True" refid="class-webrtcpeerconnection-method-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>经常调用这个方法以正确接收信号，例如在 <reference internal="True" refuri="class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process</inline></reference> 或 <reference internal="True" refuri="class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process</inline></reference> 中。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-set-default-extension"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-set-default-extension" names="class_webrtcpeerconnection_method_set_default_extension"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_extension</strong>(extension_class: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-webrtcpeerconnection-method-set-default-extension"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>extension_class</literal> 设置为创建新 <strong>WebRTCPeerConnection</strong> 时返回的默认 <reference internal="True" refuri="class_webrtcpeerconnectionextension#class-webrtcpeerconnectionextension"><inline classes="std std-ref">WebRTCPeerConnectionExtension</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-set-local-description"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-set-local-description" names="class_webrtcpeerconnection_method_set_local_description"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>set_local_description</strong>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, sdp: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-webrtcpeerconnection-method-set-local-description"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置本地对等体的 SDP 描述。这应是在响应 <reference internal="True" refid="class-webrtcpeerconnection-signal-session-description-created"><inline classes="std std-ref">session_description_created</inline></reference> 时调用的。</paragraph>
            <paragraph>调用此函数后，对等体将开始发出 <reference internal="True" refid="class-webrtcpeerconnection-signal-ice-candidate-created"><inline classes="std std-ref">ice_candidate_created</inline></reference>，除非返回与 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference> 不同的 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-webrtcpeerconnection-method-set-remote-description"></target>
            <paragraph classes="classref-method" ids="class-webrtcpeerconnection-method-set-remote-description" names="class_webrtcpeerconnection_method_set_remote_description"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>set_remote_description</strong>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, sdp: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-webrtcpeerconnection-method-set-remote-description"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置远程对等体的 SDP 描述。应用远程对等体产生的值来调用，并通过信号服务器接收。</paragraph>
            <paragraph>如果 <literal>type</literal> 为 <literal>"offer"</literal>，对等体将发出 <reference internal="True" refid="class-webrtcpeerconnection-signal-session-description-created"><inline classes="std std-ref">session_description_created</inline></reference> 并给出适当的应答。</paragraph>
            <paragraph>如果 <literal>type</literal> 为 <literal>"answer"</literal>，对等体将开始发出 <reference internal="True" refid="class-webrtcpeerconnection-signal-ice-candidate-created"><inline classes="std std-ref">ice_candidate_created</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
