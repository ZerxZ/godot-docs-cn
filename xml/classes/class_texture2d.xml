<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_texture2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Texture2D.xml.</comment>
    <target refid="class-texture2d"></target>
    <section ids="texture2d class-texture2d" names="texture2d class_texture2d">
        <title>Texture2D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_texture#class-texture"><inline classes="std std-ref">Texture</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_animatedtexture#class-animatedtexture"><inline classes="std std-ref">AnimatedTexture</inline></reference>, <reference internal="True" refuri="class_atlastexture#class-atlastexture"><inline classes="std std-ref">AtlasTexture</inline></reference>, <reference internal="True" refuri="class_cameratexture#class-cameratexture"><inline classes="std std-ref">CameraTexture</inline></reference>, <reference internal="True" refuri="class_canvastexture#class-canvastexture"><inline classes="std std-ref">CanvasTexture</inline></reference>, <reference internal="True" refuri="class_compressedtexture2d#class-compressedtexture2d"><inline classes="std std-ref">CompressedTexture2D</inline></reference>, <reference internal="True" refuri="class_curvetexture#class-curvetexture"><inline classes="std std-ref">CurveTexture</inline></reference>, <reference internal="True" refuri="class_curvexyztexture#class-curvexyztexture"><inline classes="std std-ref">CurveXYZTexture</inline></reference>, <reference internal="True" refuri="class_gradienttexture1d#class-gradienttexture1d"><inline classes="std std-ref">GradientTexture1D</inline></reference>, <reference internal="True" refuri="class_gradienttexture2d#class-gradienttexture2d"><inline classes="std std-ref">GradientTexture2D</inline></reference>, <reference internal="True" refuri="class_imagetexture#class-imagetexture"><inline classes="std std-ref">ImageTexture</inline></reference>, <reference internal="True" refuri="class_meshtexture#class-meshtexture"><inline classes="std std-ref">MeshTexture</inline></reference>, <reference internal="True" refuri="class_noisetexture2d#class-noisetexture2d"><inline classes="std std-ref">NoiseTexture2D</inline></reference>, <reference internal="True" refuri="class_placeholdertexture2d#class-placeholdertexture2d"><inline classes="std std-ref">PlaceholderTexture2D</inline></reference>, <reference internal="True" refuri="class_portablecompressedtexture2d#class-portablecompressedtexture2d"><inline classes="std std-ref">PortableCompressedTexture2D</inline></reference>, <reference internal="True" refuri="class_texture2drd#class-texture2drd"><inline classes="std std-ref">Texture2DRD</inline></reference>, <reference internal="True" refuri="class_viewporttexture#class-viewporttexture"><inline classes="std std-ref">ViewportTexture</inline></reference></paragraph>
        <paragraph>用于 2D 和 3D 的纹理。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>纹理的工作原理是在视频硬件中注册图像，该图像在注册后就可以在 3D 模型、2D <reference internal="True" refuri="class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference>、GUI <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 中使用。</paragraph>
            <paragraph>纹理通常是通过从文件中加载来创建的。见 <reference internal="True" refuri="class_@gdscript#class-gdscript-method-load"><inline classes="std std-ref">@GDScript.load</inline></reference>。</paragraph>
            <paragraph><strong>Texture2D</strong> 是其他资源的基类，无法直接使用。</paragraph>
            <paragraph><strong>注意：</strong>由于图形硬件的限制，最大的纹理尺寸是 16384×16384 像素。较大的纹理可能无法导入。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="334"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-private-method-draw"><inline classes="std std-ref">_draw</inline></reference>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-private-method-draw-rect"><inline classes="std std-ref">_draw_rect</inline></reference>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-private-method-draw-rect-region"><inline classes="std std-ref">_draw_rect_region</inline></reference>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-private-method-get-height"><inline classes="std std-ref">_get_height</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-private-method-get-width"><inline classes="std std-ref">_get_width</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-private-method-has-alpha"><inline classes="std std-ref">_has_alpha</inline></reference>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-private-method-is-pixel-opaque"><inline classes="std std-ref">_is_pixel_opaque</inline></reference>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-create-placeholder"><inline classes="std std-ref">create_placeholder</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-draw"><inline classes="std std-ref">draw</inline></reference>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-draw-rect"><inline classes="std std-ref">draw_rect</inline></reference>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-draw-rect-region"><inline classes="std std-ref">draw_rect_region</inline></reference>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-get-height"><inline classes="std std-ref">get_height</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-get-image"><inline classes="std std-ref">get_image</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-get-size"><inline classes="std std-ref">get_size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-get-width"><inline classes="std std-ref">get_width</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-texture2d-method-has-alpha"><inline classes="std std-ref">has_alpha</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-texture2d-private-method-draw"></target>
            <paragraph classes="classref-method" ids="class-texture2d-private-method-draw" names="class_texture2d_private_method__draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw</strong>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, pos: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-private-method-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当请求在 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制整个 <strong>Texture2D</strong> 时调用，左上角的偏移量由 <literal>pos</literal> 指定。<literal>modulate</literal> 指定绘制颜色的乘数，<literal>transpose</literal> 指定绘制是否应按列主顺序而不是行主顺序执行（会导致顺时针旋转 90 度）。</paragraph>
            <paragraph><strong>注意：</strong>仅用于 2D 渲染，不用于 3D。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-private-method-draw-rect"></target>
            <paragraph classes="classref-method" ids="class-texture2d-private-method-draw-rect" names="class_texture2d_private_method__draw_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw_rect</strong>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-private-method-draw-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求将 <strong>Texture2D</strong> 绘制到 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的指定 <literal>rect</literal> 上时调用。<literal>modulate</literal> 指定的是绘制时颜色的乘数，而 <literal>transpose</literal> 指定的是绘制时是否使用列优先顺序，而不是使用行优先顺序（产生顺时针 90 度旋转）。</paragraph>
            <paragraph><strong>注意：</strong>仅在 2D 渲染时使用，3D 不使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-private-method-draw-rect-region"></target>
            <paragraph classes="classref-method" ids="class-texture2d-private-method-draw-rect-region" names="class_texture2d_private_method__draw_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>_draw_rect_region</strong>(to_canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>, transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-private-method-draw-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求将 <strong>Texture2D</strong> 由 <literal>src_rect</literal> 的坐标指定的部分绘制到 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 的指定 <literal>rect</literal> 上时调用。<literal>modulate</literal> 指定的是绘制时颜色的乘数，而 <literal>transpose</literal> 指定的是绘制时是否使用列优先顺序，而不是使用行优先顺序（产生顺时针 90 度旋转）。</paragraph>
            <paragraph><strong>注意：</strong>仅在 2D 渲染时使用，3D 不使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-private-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-texture2d-private-method-get-height" names="class_texture2d_private_method__get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_height</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-private-method-get-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>Texture2D</strong> 的高度时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-private-method-get-width"></target>
            <paragraph classes="classref-method" ids="class-texture2d-private-method-get-width" names="class_texture2d_private_method__get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_width</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-private-method-get-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>Texture2D</strong> 的宽度时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-private-method-has-alpha"></target>
            <paragraph classes="classref-method" ids="class-texture2d-private-method-has-alpha" names="class_texture2d_private_method__has_alpha"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_has_alpha</strong>() <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-private-method-has-alpha"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询该 <strong>Texture2D</strong> 是否存在 alpha 通道时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-private-method-is-pixel-opaque"></target>
            <paragraph classes="classref-method" ids="class-texture2d-private-method-is-pixel-opaque" names="class_texture2d_private_method__is_pixel_opaque"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_pixel_opaque</strong>(x: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, y: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-private-method-is-pixel-opaque"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>查询 <strong>Texture2D</strong> 中指定位置 <literal>(x, y)</literal> 的像素的不透明状态时调用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-create-placeholder"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-create-placeholder" names="class_texture2d_method_create_placeholder"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>create_placeholder</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-create-placeholder"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建该资源的占位符版本（<reference internal="True" refuri="class_placeholdertexture2d#class-placeholdertexture2d"><inline classes="std std-ref">PlaceholderTexture2D</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-draw"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-draw" names="class_texture2d_method_draw"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw</strong>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-draw"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> API 在 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上的指定位置 <literal>position</literal> 绘制该纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-draw-rect"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-draw-rect" names="class_texture2d_method_draw_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_rect</strong>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, tile: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-draw-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> API 在 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制该纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-draw-rect-region"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-draw-rect-region" names="class_texture2d_method_draw_rect_region"><abbreviation explanation="无返回值。">void</abbreviation> <strong>draw_rect_region</strong>(canvas_item: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>, rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, src_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>, modulate: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> = Color(1, 1, 1, 1), transpose: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false, clip_uv: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-draw-rect-region"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_renderingserver#class-renderingserver"><inline classes="std std-ref">RenderingServer</inline></reference> API 在 <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 上绘制纹理的一部分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-get-height"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-get-height" names="class_texture2d_method_get_height"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_height</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-get-height"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该纹理的高度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-get-image"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-get-image" names="class_texture2d_method_get_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>get_image</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-get-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>，该对象是这个 <strong>Texture2D</strong> 中数据的副本（每次都会新建一个 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>）。可以直接访问并操作 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果该 <strong>Texture2D</strong> 无效，则会返回 <literal>null</literal>。</paragraph>
            <paragraph><strong>注意：</strong>这个函数会从 GPU 获取纹理数据，过度使用可能会引起性能问题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-get-size"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-get-size" names="class_texture2d_method_get_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-get-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该纹理的大小，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-get-width"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-get-width" names="class_texture2d_method_get_width"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_width</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-get-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该纹理的宽度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-texture2d-method-has-alpha"></target>
            <paragraph classes="classref-method" ids="class-texture2d-method-has-alpha" names="class_texture2d_method_has_alpha"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_alpha</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-texture2d-method-has-alpha"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 <strong>Texture2D</strong> 具有 Alpha 通道，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
