<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_configfile.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ConfigFile.xml.</comment>
    <target refid="class-configfile"></target>
    <section ids="configfile class-configfile" names="configfile class_configfile">
        <title>ConfigFile</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于处理 INI 样式文件的辅助类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>该辅助类可用于使用 INI 样式格式在文件系统上存储 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 值。存储的值由一个小节和一个键标识：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">[section]
some_key=42
string_example="Hello World3D!"
a_vector=Vector3(1, 0, 2)</literal_block>
            <paragraph>存储的数据可以被保存到文件中或从文件中解析出来，尽管 ConfigFile 对象也可以直接使用而无需访问文件系统。</paragraph>
            <paragraph>以下示例显示了如何创建一个简单的 <strong>ConfigFile</strong> 并将其保存在磁盘上：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 创建新的 ConfigFile 对象。
var config = ConfigFile.new()

# 存储一些值。
config.set_value("Player1", "player_name", "Steve")
config.set_value("Player1", "best_score", 10)
config.set_value("Player2", "player_name", "V3geta")
config.set_value("Player2", "best_score", 9001)

# 将其保存到文件中（如果已存在则覆盖）。
config.save("user://scores.cfg")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 创建新的 ConfigFile 对象。
var config = new ConfigFile();

// 存储一些值。
config.SetValue("Player1", "player_name", "Steve");
config.SetValue("Player1", "best_score", 10);
config.SetValue("Player2", "player_name", "V3geta");
config.SetValue("Player2", "best_score", 9001);

// 将其保存到文件中（如果已存在则覆盖）。
config.Save("user://scores.cfg");</literal_block>
                </div>
            </container>
            <paragraph>该示例展示了如何加载上面的文件：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var score_data = {}
var config = ConfigFile.new()

# 从文件加载数据。
var err = config.load("user://scores.cfg")

# 如果文件没有加载，忽略它。
if err != OK:
    return

# 迭代所有小节。
for player in config.get_sections():
    # 获取每个小节的数据。
    var player_name = config.get_value(player, "player_name")
    var player_score = config.get_value(player, "best_score")
    score_data[player_name] = player_score</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var score_data = new Godot.Collections.Dictionary();
var config = new ConfigFile();

// 从文件加载数据。
Error err = config.Load("user://scores.cfg");

// 如果文件没有加载，忽略它。
if (err != Error.Ok)
{
    return;
}

// 迭代所有小节。
foreach (String player in config.GetSections())
{
    // 获取每个小节的数据。
    var player_name = (String)config.GetValue(player, "player_name");
    var player_score = (int)config.GetValue(player, "best_score");
    score_data[player_name] = player_score;
}</literal_block>
                </div>
            </container>
            <paragraph>任何改变 ConfigFile 的操作，例如 <reference internal="True" refid="class-configfile-method-set-value"><inline classes="std std-ref">set_value</inline></reference>、<reference internal="True" refid="class-configfile-method-clear"><inline classes="std std-ref">clear</inline></reference>、或 <reference internal="True" refid="class-configfile-method-erase-section"><inline classes="std std-ref">erase_section</inline></reference>，只会改变加载到内存中的内容。如果要将更改写入文件，则必须使用 <reference internal="True" refid="class-configfile-method-save"><inline classes="std std-ref">save</inline></reference>、<reference internal="True" refid="class-configfile-method-save-encrypted"><inline classes="std std-ref">save_encrypted</inline></reference> 或 <reference internal="True" refid="class-configfile-method-save-encrypted-pass"><inline classes="std std-ref">save_encrypted_pass</inline></reference> 保存更改。</paragraph>
            <paragraph>请记住，小节和属性名称不能包含空格。保存和加载时将忽略空格后的任何内容。</paragraph>
            <paragraph>ConfigFiles 还可以包含以分号（<literal>;</literal>）开头的手动编写的注释行。解析文件时将忽略这些行。请注意，保存 ConfigFile 时注释将丢失。注释对于专用服务器配置文件仍然很有用，如果没有明确的用户操作，这些文件通常永远不会被覆盖。</paragraph>
            <paragraph><strong>注意：</strong>为 ConfigFile 指定的文件扩展名对其格式或行为没有任何影响。按照惯例，此处使用 <literal>.cfg</literal> 扩展名，但 <literal>.ini</literal> 等任何其他扩展名也有效。由于 <literal>.cfg</literal> 和 <literal>.ini</literal> 都不是标准化的格式，Godot 的 ConfigFile 格式可能与其他程序编写的文件不同。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="189"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-encode-to-text"><inline classes="std std-ref">encode_to_text</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-erase-section"><inline classes="std std-ref">erase_section</inline></reference>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-erase-section-key"><inline classes="std std-ref">erase_section_key</inline></reference>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-get-section-keys"><inline classes="std std-ref">get_section_keys</inline></reference>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-get-sections"><inline classes="std std-ref">get_sections</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-get-value"><inline classes="std std-ref">get_value</inline></reference>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, default: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-has-section"><inline classes="std std-ref">has_section</inline></reference>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-has-section-key"><inline classes="std std-ref">has_section_key</inline></reference>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-load"><inline classes="std std-ref">load</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-load-encrypted"><inline classes="std std-ref">load_encrypted</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-load-encrypted-pass"><inline classes="std std-ref">load_encrypted_pass</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, password: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-parse"><inline classes="std std-ref">parse</inline></reference>(data: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-save"><inline classes="std std-ref">save</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-save-encrypted"><inline classes="std std-ref">save_encrypted</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-save-encrypted-pass"><inline classes="std std-ref">save_encrypted_pass</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, password: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-configfile-method-set-value"><inline classes="std std-ref">set_value</inline></reference>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-configfile-method-clear"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-clear" names="class_configfile_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-configfile-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除配置的全部内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-encode-to-text"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-encode-to-text" names="class_configfile_method_encode_to_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>encode_to_text</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-configfile-method-encode-to-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获得该配置文件的文本版本（与写入文件的文本相同）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-erase-section"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-erase-section" names="class_configfile_method_erase_section"><abbreviation explanation="无返回值。">void</abbreviation> <strong>erase_section</strong>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-configfile-method-erase-section"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除指定小节以及其中的所有键值对。如果该小节不存在，则会引发错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-erase-section-key"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-erase-section-key" names="class_configfile_method_erase_section_key"><abbreviation explanation="无返回值。">void</abbreviation> <strong>erase_section_key</strong>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-configfile-method-erase-section-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除小节中的指定键。如果该小节或键不存在，则会引发错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-get-section-keys"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-get-section-keys" names="class_configfile_method_get_section_keys"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_section_keys</strong>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-configfile-method-get-section-keys"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定小节中所有已定义键标识符的数组。如果该小节不存在，则会引发错误并返回一个空数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-get-sections"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-get-sections" names="class_configfile_method_get_sections"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_sections</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-configfile-method-get-sections"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回所有已定义小节的标识符的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-get-value"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-get-value" names="class_configfile_method_get_value"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_value</strong>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, default: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-configfile-method-get-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定小节和键的当前值。如果该小节或键不存在，则该方法返回后备值 <literal>default</literal>。如果未指定 <literal>default</literal> 或将其设置为 <literal>null</literal>，则会引发一个错误。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-has-section"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-has-section" names="class_configfile_method_has_section"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_section</strong>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-configfile-method-has-section"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果指定的小节存在，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-has-section-key"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-has-section-key" names="class_configfile_method_has_section_key"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_section_key</strong>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-configfile-method-has-section-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果指定的小节-键对存在，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-load"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-load" names="class_configfile_method_load"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-configfile-method-load"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>加载指定为参数的配置文件。解析文件的内容并将其加载到调用该方法的 <strong>ConfigFile</strong> 对象中。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果操作失败，则返回其他 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-load-encrypted"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-load-encrypted" names="class_configfile_method_load_encrypted"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_encrypted</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-configfile-method-load-encrypted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>加载指定为参数的加密配置文件，使用提供的 <literal>key</literal> 对其解密。解析文件的内容并将其加载到调用该方法的 <strong>ConfigFile</strong> 对象中。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果操作失败，则返回其他 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-load-encrypted-pass"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-load-encrypted-pass" names="class_configfile_method_load_encrypted_pass"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_encrypted_pass</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, password: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-configfile-method-load-encrypted-pass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>加载作为参数的加密配置文件，使用提供的 <literal>password</literal> 解密。该文件的内容被解析并加载到调用该方法的 <strong>ConfigFile</strong> 对象中。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果操作失败，则返回其他 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-parse"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-parse" names="class_configfile_method_parse"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>parse</strong>(data: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-configfile-method-parse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将传递的字符串解析为配置文件的内容。该字符串被解析并加载到调用该方法的 ConfigFile 对象中。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果操作失败，则返回其他 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-save"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-save" names="class_configfile_method_save"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-configfile-method-save"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <strong>ConfigFile</strong> 对象的内容保存到指定为参数的文件中。输出文件使用 INI 样式的结构。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果操作失败，则返回其他 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-save-encrypted"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-save-encrypted" names="class_configfile_method_save_encrypted"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save_encrypted</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>) <reference internal="True" refid="class-configfile-method-save-encrypted"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用提供的 <literal>key</literal> 将 <strong>ConfigFile</strong> 对象的内容保存到作为参数指定的 AES-256 加密文件中。输出文件使用 INI 样式的结构。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果操作失败，则返回其他 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-save-encrypted-pass"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-save-encrypted-pass" names="class_configfile_method_save_encrypted_pass"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>save_encrypted_pass</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, password: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-configfile-method-save-encrypted-pass"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <strong>ConfigFile</strong> 对象的内容保存到作为参数指定的 AES-256 加密文件中，使用提供的 <literal>password</literal> 进行加密。输出文件使用 INI 风格的结构。</paragraph>
            <paragraph>成功时返回 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-ok"><inline classes="std std-ref">@GlobalScope.OK</inline></reference>；如果操作失败，则返回其他 <reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> 值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-configfile-method-set-value"></target>
            <paragraph classes="classref-method" ids="class-configfile-method-set-value" names="class_configfile_method_set_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_value</strong>(section: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, key: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-configfile-method-set-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定小节的指定键赋值。如果小节或键不存在，则创建它们。如果指定的键存在，传递 <literal>null</literal> 值就会移除指定的键，如果键被移除后，小节最终是空的，就会移除小节。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
