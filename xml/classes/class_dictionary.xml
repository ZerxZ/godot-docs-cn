<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_dictionary.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Dictionary.xml.</comment>
    <target refid="class-dictionary"></target>
    <section ids="dictionary class-dictionary" names="dictionary class_dictionary">
        <title>Dictionary</title>
        <paragraph>包含键值对的内置数据结构。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>字典是关系容器，包含的值（Value）由唯一的键（Key）引用。添加新条目时，字典会保持插入顺序。在其他编程语言中，这种数据结构有时也称为哈希表或关联数组。</paragraph>
            <paragraph>在大括号 <literal>{}</literal> 中放置用逗号分隔的一对对 <literal>键: 值</literal> 列表就可以定义字典。</paragraph>
            <paragraph>字典的创建：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var my_dict = {} # 创建空字典。

var dict_variable_key = "Another key name"
var dict_variable_value = "value2"
var another_dict = {
    "Some key name": "value1",
    dict_variable_key: dict_variable_value,
}

var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}

# 备选 Lua 分隔语法。
# 不需要在键周围加引号，但键名只能为字符串常量。
# 另外，键名必须以字母或下划线开头。
# 此处的 `some_key` 是字符串字面量，不是变量！
another_dict = {
    some_key = 42,
}</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var myDict = new Godot.Collections.Dictionary(); // 创建空字典。
var pointsDict = new Godot.Collections.Dictionary
{
    {"White", 50},
    {"Yellow", 75},
    {"Orange", 100}
};</literal_block>
                </div>
            </container>
            <paragraph>你可以通过键来访问字典中对应的值。上面的例子中，<literal>points_dict["White"]</literal> 会返回 <literal>50</literal>。你也可以写 <literal>points_dict.White</literal>，和前面的写法是等价的。不过如果用来访问字典的键不是固定字符串的话（例如数字或者变量），那么就只能使用方括号语法。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@export_enum("White", "Yellow", "Orange") var my_color: String
var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}
func _ready():
    # 不能使用点语法，因为 `my_color` 是变量。
    var points = points_dict[my_color]</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">[Export(PropertyHint.Enum, "White,Yellow,Orange")]
public string MyColor { get; set; }
private Godot.Collections.Dictionary _pointsDict = new Godot.Collections.Dictionary
{
    {"White", 50},
    {"Yellow", 75},
    {"Orange", 100}
};

public override void _Ready()
{
    int points = (int)_pointsDict[MyColor];
}</literal_block>
                </div>
            </container>
            <paragraph>在上面的代码中，<literal>points</literal> 会被赋值为与 <literal>my_color</literal> 中选中的颜色相对应的值。</paragraph>
            <paragraph>字典可以包含更复杂的数据：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var my_dict = {
    "First Array": [1, 2, 3, 4] # 将 Array 赋给 String 键。
}</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var myDict = new Godot.Collections.Dictionary
{
    {"First Array", new Godot.Collections.Array{1, 2, 3, 4}}
};</literal_block>
                </div>
            </container>
            <paragraph>要往已有字典中添加键，请像已有键一样进行访问并赋值：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}
points_dict["Blue"] = 150 # 将 "Blue" 添加为键，并将 150 赋为它的值。</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var pointsDict = new Godot.Collections.Dictionary
{
    {"White", 50},
    {"Yellow", 75},
    {"Orange", 100}
};
pointsDict["Blue"] = 150; // 将 "Blue" 添加为键，并将 150 赋为它的值。</literal_block>
                </div>
            </container>
            <paragraph>最后，同一个字典里可以包含不同类型的键和值：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 这是有效的字典。
# 要访问下面的 "Nested value"，请使用 `my_dict.sub_dict.sub_key` 或 `my_dict["sub_dict"]["sub_key"]`。
# 索引风格可以按需混合使用。
var my_dict = {
    "String Key": 5,
    4: [1, 2, 3],
    7: "Hello",
    "sub_dict": {"sub_key": "Nested value"},
}</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 这是有效的字典。
// 要访问下面的 "Nested value"，请使用 `((Godot.Collections.Dictionary)myDict["sub_dict"])["sub_key"]`。
var myDict = new Godot.Collections.Dictionary {
    {"String Key", 5},
    {4, new Godot.Collections.Array{1,2,3}},
    {7, "Hello"},
    {"sub_dict", new Godot.Collections.Dictionary{{"sub_key", "Nested value"}}}
};</literal_block>
                </div>
            </container>
            <paragraph>字典中的键可以用 <literal>for</literal> 关键字进行遍历：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var groceries = {"Orange": 20, "Apple": 2, "Banana": 4}
for fruit in groceries:
    var amount = groceries[fruit]</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var groceries = new Godot.Collections.Dictionary{{"Orange", 20}, {"Apple", 2}, {"Banana", 4}};
foreach (var (fruit, amount) in groceries)
{
    // `fruit` 为键，`amount` 为值。
}</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>字典始终按引用传递。要获取字典的副本，能独立于原字典进行修改，请使用 <reference internal="True" refid="class-dictionary-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><strong>不支持</strong>在遍历字典时清除元素，可能造成无法预知的行为。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="GDScript 基础：字典" refuri="../tutorials/scripting/gdscript/gdscript_basics.html#dictionary">GDScript 基础：字典</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/2755">3D 体素演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="操作系统测试演示" refuri="https://godotengine.org/asset-library/asset/2789">操作系统测试演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="110"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-constructor-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-constructor-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>(from: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="170"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-clear"><inline classes="std std-ref">clear</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>(deep: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-erase"><inline classes="std std-ref">erase</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-find-key"><inline classes="std std-ref">find_key</inline></reference>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-get"><inline classes="std std-ref">get</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, default: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-get-or-add"><inline classes="std std-ref">get_or_add</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, default: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-has"><inline classes="std std-ref">has</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-has-all"><inline classes="std std-ref">has_all</inline></reference>(keys: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-hash"><inline classes="std std-ref">hash</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-is-read-only"><inline classes="std std-ref">is_read_only</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-keys"><inline classes="std std-ref">keys</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-make-read-only"><inline classes="std std-ref">make_read_only</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-merge"><inline classes="std std-ref">merge</inline></reference>(dictionary: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, overwrite: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-merged"><inline classes="std std-ref">merged</inline></reference>(dictionary: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, overwrite: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-recursive-equal"><inline classes="std std-ref">recursive_equal</inline></reference>(dictionary: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, recursion_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-size"><inline classes="std std-ref">size</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-method-values"><inline classes="std std-ref">values</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="113"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-operator-neq-dictionary"><inline classes="std std-ref">operator !=</inline></reference>(right: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-operator-eq-dictionary"><inline classes="std std-ref">operator ==</inline></reference>(right: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-dictionary-operator-idx-variant"><inline classes="std std-ref">operator []</inline></reference>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-dictionary-constructor-dictionary"></target>
            <paragraph classes="classref-constructor" ids="class-dictionary-constructor-dictionary" names="class_dictionary_constructor_dictionary"><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>Dictionary</strong>() <reference internal="True" refid="class-dictionary-constructor-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>构造空的 <strong>Dictionary</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>Dictionary</strong>(from: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
            <paragraph>返回与 <literal>from</literal> 相同的字典。如果你需要该字典的副本，请使用 <reference internal="True" refid="class-dictionary-method-duplicate"><inline classes="std std-ref">duplicate</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-dictionary-method-clear"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-clear" names="class_dictionary_method_clear"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear</strong>() <reference internal="True" refid="class-dictionary-method-clear"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>清空该字典，移除其中的所有条目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-duplicate"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-duplicate" names="class_dictionary_method_duplicate"><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>duplicate</strong>(deep: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-duplicate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>创建并返回该字典的副本。如果 <literal>deep</literal> 为 <literal>true</literal>，内部的 <strong>Dictionary</strong> 和 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 键和值也会被递归复制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-erase"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-erase" names="class_dictionary_method_erase"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>erase</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-dictionary-method-erase"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果字典中存在与键对应的条目，则将其移除。如果给定的键 <literal>key</literal> 在字典中存在，则返回 <literal>true</literal> ，否则返回 <literal>false</literal> 。</paragraph>
            <paragraph><strong>注意：</strong>请勿在遍历字典时擦除条目。你可以改为遍历 <reference internal="True" refid="class-dictionary-method-keys"><inline classes="std std-ref">keys</inline></reference> 数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-find-key"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-find-key" names="class_dictionary_method_find_key"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>find_key</strong>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-find-key"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>找到并返回关联值等于 <literal>value</literal> 的第一个键，如果没有找到，则返回 <literal>null</literal>。</paragraph>
            <paragraph><strong>注意：</strong><literal>null</literal> 也是有效的键。如果字典中包含这个键，则 <reference internal="True" refid="class-dictionary-method-find-key"><inline classes="std std-ref">find_key</inline></reference> 可能会给出误导性的结果。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-get"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-get" names="class_dictionary_method_get"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, default: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-get"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字典中与给定的键 <literal>key</literal> 对应的值。如果 <literal>key</literal> 不存在，则返回 <literal>default</literal>，如果省略了该参数则返回 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-get-or-add"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-get-or-add" names="class_dictionary_method_get_or_add"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_or_add</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, default: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> = null) <reference internal="True" refid="class-dictionary-method-get-or-add"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取一个值并确保设置了键。如果 <literal>key</literal> 存在于字典中，则其行为类似于 <reference internal="True" refid="class-dictionary-method-get"><inline classes="std std-ref">get</inline></reference>。否则，<literal>default</literal> 值将被插入到字典中并返回。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-has"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-has" names="class_dictionary_method_has"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-has"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该字典包含给定的键 <literal>key</literal>，则返回 <literal>true</literal>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var my_dict = {
    "Godot" : 4,
    210 : null,
}

print(my_dict.has("Godot")) # 输出 true
print(my_dict.has(210))     # 输出 true
print(my_dict.has(4))       # 输出 false</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var myDict = new Godot.Collections.Dictionary
{
    { "Godot", 4 },
    { 210, default },
};

GD.Print(myDict.ContainsKey("Godot")); // 输出 true
GD.Print(myDict.ContainsKey(210));     // 输出 true
GD.Print(myDict.ContainsKey(4));       // 输出 false</literal_block>
                </div>
            </container>
            <paragraph>在 GDScript 中等价于 <literal>in</literal> 运算符：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">if "Godot" in {"Godot": 4}:
    print("这个键存在！") # 会进行输出。</literal_block>
            <paragraph><strong>注意：</strong>只要键 <literal>key</literal> 存在，该方法就会返回 <literal>true</literal>，即便这个键对应的值为 <literal>null</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-has-all"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-has-all" names="class_dictionary_method_has_all"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_all</strong>(keys: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-has-all"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该字典包含给定数组 <literal>keys</literal> 中的所有键，则返回 <literal>true</literal>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var data = {"width" : 10, "height" : 20}
data.has_all(["height", "width"]) # 返回 true</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-hash"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-hash" names="class_dictionary_method_hash"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>hash</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-hash"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回代表该字典内容的 32 位整数哈希值。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var dict1 = {"A": 10, "B": 2}
var dict2 = {"A": 10, "B": 2}

print(dict1.hash() == dict2.hash()) # 输出 true</literal_block>
                </div>
                <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var dict1 = new Godot.Collections.Dictionary{{"A", 10}, {"B", 2}};
var dict2 = new Godot.Collections.Dictionary{{"A", 10}, {"B", 2}};

// Godot.Collections.Dictionary 没有 Hash() 方法。请改用 GD.Hash()。
GD.Print(GD.Hash(dict1) == GD.Hash(dict2)); // 输出 true</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong>如果两个字典条目相同，但顺序不同，则哈希值也不同。</paragraph>
            <paragraph><strong>注意：</strong>哈希值相同的字典<emphasis>不保证</emphasis>相同，因为可能存在哈希碰撞。相对地，哈希值不同的字典保证不同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-is-empty"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-is-empty" names="class_dictionary_method_is_empty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_empty</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-is-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该字典为空（大小为 <literal>0</literal>），则返回 <literal>true</literal>。另见 <reference internal="True" refid="class-dictionary-method-size"><inline classes="std std-ref">size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-is-read-only"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-is-read-only" names="class_dictionary_method_is_read_only"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_read_only</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-is-read-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该字典是只读的，则返回 <literal>true</literal> 。见 <reference internal="True" refid="class-dictionary-method-make-read-only"><inline classes="std std-ref">make_read_only</inline></reference>。用 <literal>const</literal> 关键字声明的字典自动只读。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-keys"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-keys" names="class_dictionary_method_keys"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>keys</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-keys"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字典中的键列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-make-read-only"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-make-read-only" names="class_dictionary_method_make_read_only"><abbreviation explanation="无返回值。">void</abbreviation> <strong>make_read_only</strong>() <reference internal="True" refid="class-dictionary-method-make-read-only"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使该字典只读，即禁用字典内容的修改。不适用于嵌套内容，例如内嵌字典的内容。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-merge"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-merge" names="class_dictionary_method_merge"><abbreviation explanation="无返回值。">void</abbreviation> <strong>merge</strong>(dictionary: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, overwrite: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-dictionary-method-merge"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>dictionary</literal> 中的条目添加到该字典中。默认情况下，不会复制重复的键，除非 <literal>overwrite</literal> 为 <literal>true</literal>。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var dict = { "item": "sword", "quantity": 2 }
var other_dict = { "quantity": 15, "color": "silver" }

# 默认情况下禁用覆盖已有键。
dict.merge(other_dict)
print(dict)  # { "item": "sword", "quantity": 2, "color": "silver" }

# 启用覆盖已有键。
dict.merge(other_dict, true)
print(dict)  # { "item": "sword", "quantity": 15, "color": "silver" }</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var dict = new Godot.Collections.Dictionary
{
    ["item"] = "sword",
    ["quantity"] = 2,
};

var otherDict = new Godot.Collections.Dictionary
{
    ["quantity"] = 15,
    ["color"] = "silver",
};

// 默认情况下禁用覆盖已有键。
dict.Merge(otherDict);
GD.Print(dict); // { "item": "sword", "quantity": 2, "color": "silver" }

// 启用覆盖已有键。
dict.Merge(otherDict, true);
GD.Print(dict); // { "item": "sword", "quantity": 15, "color": "silver" }</literal_block>
                </div>
            </container>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-dictionary-method-merge"><inline classes="std std-ref">merge</inline></reference> <emphasis>不</emphasis>是递归的。嵌套的字典是否可被视为键可以被覆盖，具体取决于 <literal>overwrite</literal> 的值，但它们永远不会被合并在一起。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-merged"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-merged" names="class_dictionary_method_merged"><reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>merged</strong>(dictionary: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, overwrite: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-merged"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字典与 <literal>dictionary</literal> 合并后的副本。默认情况下不会复制重复的键，除非 <literal>overwrite</literal> 为 <literal>true</literal>。另见 <reference internal="True" refid="class-dictionary-method-merge"><inline classes="std std-ref">merge</inline></reference>。</paragraph>
            <paragraph>该方法可以使用默认值快速制作字典：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var base = { "fruit": "apple", "vegetable": "potato" }
var extra = { "fruit": "orange", "dressing": "vinegar" }
# 输出 { "fruit": "orange", "vegetable": "potato", "dressing": "vinegar" }
print(extra.merged(base))
# 输出 { "fruit": "apple", "vegetable": "potato", "dressing": "vinegar" }
print(extra.merged(base, true))</literal_block>
            <paragraph>另见 <reference internal="True" refid="class-dictionary-method-merge"><inline classes="std std-ref">merge</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-recursive-equal"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-recursive-equal" names="class_dictionary_method_recursive_equal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>recursive_equal</strong>(dictionary: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>, recursion_count: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-recursive-equal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the two dictionaries contain the same keys and values, inner <strong>Dictionary</strong> and <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> keys and values are compared recursively.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-size"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-size" names="class_dictionary_method_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>size</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字典中条目的数量。空字典（<literal>{ }</literal>）始终返回 <literal>0</literal>。另见 <reference internal="True" refid="class-dictionary-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-method-values"></target>
            <paragraph classes="classref-method" ids="class-dictionary-method-values" names="class_dictionary_method_values"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>values</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-dictionary-method-values"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字典中的值列表。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-dictionary-operator-neq-dictionary"></target>
            <paragraph classes="classref-operator" ids="class-dictionary-operator-neq-dictionary" names="class_dictionary_operator_neq_dictionary"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong>(right: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-dictionary-operator-neq-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个字典包含的键、值不同，则返回 <literal>true</literal> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-operator-eq-dictionary"></target>
            <paragraph classes="classref-operator" ids="class-dictionary-operator-eq-dictionary" names="class_dictionary_operator_eq_dictionary"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong>(right: <reference internal="True" refid="class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-dictionary-operator-eq-dictionary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果两个字典包含的键、值心相同，则返回 <literal>true</literal> 。条目顺序并不重要。</paragraph>
            <paragraph><strong>注意：</strong>在 C# 中，按照惯例，这个操作符进行的是按<strong>引用</strong>比较。如果你需要按值比较，请遍历这两个字典。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-dictionary-operator-idx-variant"></target>
            <paragraph classes="classref-operator" ids="class-dictionary-operator-idx-variant" names="class_dictionary_operator_idx_variant"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>operator []</strong>(key: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-dictionary-operator-idx-variant"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该字典中与给定的键 <literal>key</literal> 对应的值。如果条目不存在或者失败，则返回 <literal>null</literal>。为了更安全的访问，请使用 <reference internal="True" refid="class-dictionary-method-get"><inline classes="std std-ref">get</inline></reference> 或 <reference internal="True" refid="class-dictionary-method-has"><inline classes="std std-ref">has</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
