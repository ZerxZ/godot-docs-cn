<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_xrcontroller3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/XRController3D.xml.</comment>
    <target refid="class-xrcontroller3d"></target>
    <section ids="xrcontroller3d class-xrcontroller3d" names="xrcontroller3d class_xrcontroller3d">
        <title>XRController3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_xrnode3d#class-xrnode3d"><inline classes="std std-ref">XRNode3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>表示空间跟踪控制器的空间节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这是一个辅助空间节点，链接到控制器的跟踪。它还为控制器上的按钮等状态，提供了几个方便的直通方式。</paragraph>
            <paragraph>控制器通过其 ID 链接。可以在控制器可用之前创建控制器节点。如果游戏总是使用两个控制器（每只手一个），可以预定义 ID 为 1 和 2 的控制器；一旦控制器被识别，它们将被立即激活。如果希望使用额外的控制器，应该对这些信号做出反应并将 XRController3D 节点添加到场景中。</paragraph>
            <paragraph>控制器节点的位置由 <reference internal="True" refuri="class_xrserver#class-xrserver"><inline classes="std std-ref">XRServer</inline></reference> 自动更新。这使得该节点非常适合添加子节点以可视化控制器。</paragraph>
            <paragraph>由于许多 XR 运行时现在使用可配置的动作映射，因此所有输入都被命名。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/xr/index"><inline classes="doc">XR 文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="58"></colspec>
                    <colspec colwidth="134"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrcontroller3d-method-get-float"><inline classes="std std-ref">get_float</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrcontroller3d-method-get-input"><inline classes="std std-ref">get_input</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_xrpositionaltracker#enum-xrpositionaltracker-trackerhand"><inline classes="std std-ref">TrackerHand</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrcontroller3d-method-get-tracker-hand"><inline classes="std std-ref">get_tracker_hand</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrcontroller3d-method-get-vector2"><inline classes="std std-ref">get_vector2</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrcontroller3d-method-is-button-pressed"><inline classes="std std-ref">is_button_pressed</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-xrcontroller3d-signal-button-pressed"></target>
            <paragraph classes="classref-signal" ids="class-xrcontroller3d-signal-button-pressed" names="class_xrcontroller3d_signal_button_pressed"><strong>button_pressed</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>当该控制器上的一个按钮被按下时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrcontroller3d-signal-button-released"></target>
            <paragraph classes="classref-signal" ids="class-xrcontroller3d-signal-button-released" names="class_xrcontroller3d_signal_button_released"><strong>button_released</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name <strong>)</strong></paragraph>
            <paragraph>当该控制器上的一个按钮被释放时触发。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrcontroller3d-signal-input-float-changed"></target>
            <paragraph classes="classref-signal" ids="class-xrcontroller3d-signal-input-float-changed" names="class_xrcontroller3d_signal_input_float_changed"><strong>input_float_changed</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>当该控制器上的触发器或类似输入更改值时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrcontroller3d-signal-input-vector2-changed"></target>
            <paragraph classes="classref-signal" ids="class-xrcontroller3d-signal-input-vector2-changed" names="class_xrcontroller3d_signal_input_vector2_changed"><strong>input_vector2_changed</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> name, <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>当该控制器上的拇指杆或拇指板被移动时发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="方法说明">
            <title>方法说明</title>
            <target refid="class-xrcontroller3d-method-get-float"></target>
            <paragraph classes="classref-method" ids="class-xrcontroller3d-method-get-float" names="class_xrcontroller3d_method_get_float"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_float</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回具有给定 <literal>name</literal> 的输入的数值。用于触发器和抓握传感器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrcontroller3d-method-get-input"></target>
            <paragraph classes="classref-method" ids="class-xrcontroller3d-method-get-input" names="class_xrcontroller3d_method_get_input"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>get_input</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回具有给定名称 <literal>name</literal> 的输入对应的变体 <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>。任何输入类型均可用，该变体会根据配置的动作设置类型。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrcontroller3d-method-get-tracker-hand"></target>
            <paragraph classes="classref-method" ids="class-xrcontroller3d-method-get-tracker-hand" names="class_xrcontroller3d_method_get_tracker_hand"><reference internal="True" refuri="class_xrpositionaltracker#enum-xrpositionaltracker-trackerhand"><inline classes="std std-ref">TrackerHand</inline></reference> <strong>get_tracker_hand</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回持握这个控制器的手，如果已知。见 <reference internal="True" refuri="class_xrpositionaltracker#enum-xrpositionaltracker-trackerhand"><inline classes="std std-ref">TrackerHand</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrcontroller3d-method-get-vector2"></target>
            <paragraph classes="classref-method" ids="class-xrcontroller3d-method-get-vector2" names="class_xrcontroller3d_method_get_vector2"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_vector2</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回名称为 <literal>name</literal> 的输入 <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>。适用于很多手柄上的摇杆和摇杆按钮。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrcontroller3d-method-is-button-pressed"></target>
            <paragraph classes="classref-method" ids="class-xrcontroller3d-method-is-button-pressed" names="class_xrcontroller3d_method_is_button_pressed"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_button_pressed</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> name <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果名称为 <literal>name</literal> 的按钮处于按下状态，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
