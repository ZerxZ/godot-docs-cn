<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_raycast3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/RayCast3D.xml.</comment>
    <target refid="class-raycast3d"></target>
    <section ids="raycast3d class-raycast3d" names="raycast3d class_raycast3d">
        <title>RayCast3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>3D 空间中的射线，用于查找第一个相交的 <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>Raycast 代表的是从它的原点到 <reference internal="True" refid="class-raycast3d-property-target-position"><inline classes="std std-ref">target_position</inline></reference> 的射线，如果与碰撞对象相交，就能找到路径上距离最近的 <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>。</paragraph>
            <paragraph>要让 <strong>RayCast3D</strong> 忽略某些对象，可以通过将它们加入例外列表，也可以通过让检测汇报忽略 <reference internal="True" refuri="class_area3d#class-area3d"><inline classes="std std-ref">Area3D</inline></reference>（<reference internal="True" refid="class-raycast3d-property-collide-with-areas"><inline classes="std std-ref">collide_with_areas</inline></reference>）或 <reference internal="True" refuri="class_physicsbody3d#class-physicsbody3d"><inline classes="std std-ref">PhysicsBody3D</inline></reference>（<reference internal="True" refid="class-raycast3d-property-collide-with-bodies"><inline classes="std std-ref">collide_with_bodies</inline></reference>），还可以通过配置物理层。</paragraph>
            <paragraph><strong>RayCast3D</strong> 每一个物理帧都会计算是否相交，且该计算结果会保留到下一个物理帧。如果要立即执行射线投射，或者你想要在同一个物理帧内多次配置 <strong>RayCast3D</strong>，请使用 <reference internal="True" refid="class-raycast3d-method-force-raycast-update"><inline classes="std std-ref">force_raycast_update</inline></reference>。</paragraph>
            <paragraph>要扫描 3D 空间中的某个区块，可以使用多个 <strong>RayCast3D</strong> 或使用 <reference internal="True" refuri="class_shapecast3d#class-shapecast3d"><inline classes="std std-ref">ShapeCast3D</inline></reference> 去近似该区块。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/physics/ray-casting"><inline classes="doc">发射射线</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="3D 体素演示" refuri="https://godotengine.org/asset-library/asset/2755">3D 体素演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="84"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-collide-with-areas"><inline classes="std std-ref">collide_with_areas</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-collide-with-bodies"><inline classes="std std-ref">collide_with_bodies</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-collision-mask"><inline classes="std std-ref">collision_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-debug-shape-custom-color"><inline classes="std std-ref">debug_shape_custom_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-debug-shape-thickness"><inline classes="std std-ref">debug_shape_thickness</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-enabled"><inline classes="std std-ref">enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-exclude-parent"><inline classes="std std-ref">exclude_parent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-hit-back-faces"><inline classes="std std-ref">hit_back_faces</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-hit-from-inside"><inline classes="std std-ref">hit_from_inside</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-property-target-position"><inline classes="std std-ref">target_position</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, -1, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="159"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-add-exception"><inline classes="std std-ref">add_exception</inline></reference>(node: <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-add-exception-rid"><inline classes="std std-ref">add_exception_rid</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-clear-exceptions"><inline classes="std std-ref">clear_exceptions</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-force-raycast-update"><inline classes="std std-ref">force_raycast_update</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-get-collider"><inline classes="std std-ref">get_collider</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-get-collider-rid"><inline classes="std std-ref">get_collider_rid</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-get-collider-shape"><inline classes="std std-ref">get_collider_shape</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-get-collision-face-index"><inline classes="std std-ref">get_collision_face_index</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-get-collision-mask-value"><inline classes="std std-ref">get_collision_mask_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-get-collision-normal"><inline classes="std std-ref">get_collision_normal</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-get-collision-point"><inline classes="std std-ref">get_collision_point</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-is-colliding"><inline classes="std std-ref">is_colliding</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-remove-exception"><inline classes="std std-ref">remove_exception</inline></reference>(node: <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-remove-exception-rid"><inline classes="std std-ref">remove_exception_rid</inline></reference>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-raycast3d-method-set-collision-mask-value"><inline classes="std std-ref">set_collision_mask_value</inline></reference>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-raycast3d-property-collide-with-areas"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-collide-with-areas" names="class_raycast3d_property_collide_with_areas"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>collide_with_areas</strong> = <literal>false</literal> <reference internal="True" refid="class-raycast3d-property-collide-with-areas"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collide_with_areas</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_collide_with_areas_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会报告与 <reference internal="True" refuri="class_area3d#class-area3d"><inline classes="std std-ref">Area3D</inline></reference> 的碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-collide-with-bodies"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-collide-with-bodies" names="class_raycast3d_property_collide_with_bodies"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>collide_with_bodies</strong> = <literal>true</literal> <reference internal="True" refid="class-raycast3d-property-collide-with-bodies"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collide_with_bodies</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_collide_with_bodies_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会报告与 <reference internal="True" refuri="class_physicsbody3d#class-physicsbody3d"><inline classes="std std-ref">PhysicsBody3D</inline></reference> 的碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-collision-mask"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-collision-mask" names="class_raycast3d_property_collision_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>collision_mask</strong> = <literal>1</literal> <reference internal="True" refid="class-raycast3d-property-collision-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_mask</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_collision_mask</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>射线的碰撞遮罩。只能检测到至少启用了一个遮罩中碰撞层的对象。详情请参阅文档中的<reference name="《碰撞层与掩码》" refuri="../tutorials/physics/physics_introduction.html#collision-layers-and-masks">《碰撞层与掩码》</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-debug-shape-custom-color"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-debug-shape-custom-color" names="class_raycast3d_property_debug_shape_custom_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>debug_shape_custom_color</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-raycast3d-property-debug-shape-custom-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_shape_custom_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_debug_shape_custom_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果在<strong>调试</strong>菜单中启用了<strong>可见碰撞形状</strong>，则用于在编辑器中和运行时中绘制形状的自定义颜色。如果 <strong>RayCast3D</strong> 与某物发生碰撞，该颜色将在运行时突出显示。</paragraph>
            <paragraph>如果设置为 <literal>Color(0.0, 0.0, 0.0)</literal>（默认情况下），则使用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-debug-shapes-collision-shape-color"><inline classes="std std-ref">ProjectSettings.debug/shapes/collision/shape_color</inline></reference> 中设置的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-debug-shape-thickness"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-debug-shape-thickness" names="class_raycast3d_property_debug_shape_thickness"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>debug_shape_thickness</strong> = <literal>2</literal> <reference internal="True" refid="class-raycast3d-property-debug-shape-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_debug_shape_thickness</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_debug_shape_thickness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>1</literal>，则使用一条线作为调试形状。否则，将绘制一个截断的金字塔来表示 <strong>RayCast3D</strong>。需要在<strong>调试</strong>菜单中启用<strong>可见碰撞形状</strong>，以便调试形状在运行时可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-enabled"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-enabled" names="class_raycast3d_property_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-raycast3d-property-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，将报告碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-exclude-parent"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-exclude-parent" names="class_raycast3d_property_exclude_parent"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>exclude_parent</strong> = <literal>true</literal> <reference internal="True" refid="class-raycast3d-property-exclude-parent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_exclude_parent_body</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_exclude_parent_body</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该 RayCast3D 的直接父级的碰撞将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-hit-back-faces"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-hit-back-faces" names="class_raycast3d_property_hit_back_faces"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>hit_back_faces</strong> = <literal>true</literal> <reference internal="True" refid="class-raycast3d-property-hit-back-faces"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_hit_back_faces</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_hit_back_faces_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，射线将命中背部面，这些背部面是启用了背面的凹多边形形状，或高度图形状。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-hit-from-inside"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-hit-from-inside" names="class_raycast3d_property_hit_from_inside"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>hit_from_inside</strong> = <literal>false</literal> <reference internal="True" refid="class-raycast3d-property-hit-from-inside"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_hit_from_inside</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_hit_from_inside_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，射线会在从形状内部开始时检测到命中。在此情况下，碰撞法线将为 <literal>Vector3(0, 0, 0)</literal>。不会影响无体积的形状，如凹多边形和高度图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-property-target-position"></target>
            <paragraph classes="classref-property" ids="class-raycast3d-property-target-position" names="class_raycast3d_property_target_position"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>target_position</strong> = <literal>Vector3(0, -1, 0)</literal> <reference internal="True" refid="class-raycast3d-property-target-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_target_position</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_target_position</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>射线的目标点，相对于该 RayCast 的 <literal>position</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-raycast3d-method-add-exception"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-add-exception" names="class_raycast3d_method_add_exception"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_exception</strong>(node: <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>) <reference internal="True" refid="class-raycast3d-method-add-exception"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加碰撞例外，这样射线就不会报告与指定 <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference> 节点的碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-add-exception-rid"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-add-exception-rid" names="class_raycast3d_method_add_exception_rid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_exception_rid</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-raycast3d-method-add-exception-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>添加碰撞例外，这样射线就不会报告与指定 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 的碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-clear-exceptions"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-clear-exceptions" names="class_raycast3d_method_clear_exceptions"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_exceptions</strong>() <reference internal="True" refid="class-raycast3d-method-clear-exceptions"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除此射线的所有碰撞例外。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-force-raycast-update"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-force-raycast-update" names="class_raycast3d_method_force_raycast_update"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_raycast_update</strong>() <reference internal="True" refid="class-raycast3d-method-force-raycast-update"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>立即更新射线的碰撞信息，不等待下一次的 <literal>_physics_process</literal> 调用。例如，请在射线或其父级更改状态后使用该方法。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-raycast3d-property-enabled"><inline classes="std std-ref">enabled</inline></reference> 不需要为 <literal>true</literal> 即可生效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-get-collider"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-get-collider" names="class_raycast3d_method_get_collider"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>get_collider</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-get-collider"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回射线相交的第一个对象，如果没有对象与射线相交，则返回 <literal>null</literal>（即 <reference internal="True" refid="class-raycast3d-method-is-colliding"><inline classes="std std-ref">is_colliding</inline></reference> 返回 <literal>false</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-get-collider-rid"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-get-collider-rid" names="class_raycast3d_method_get_collider_rid"><reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> <strong>get_collider_rid</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-get-collider-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该射线相交的第一个对象的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>，如果没有对象与该射线相交，则返回空 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>（即 <reference internal="True" refid="class-raycast3d-method-is-colliding"><inline classes="std std-ref">is_colliding</inline></reference> 返回 <literal>false</literal>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-get-collider-shape"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-get-collider-shape" names="class_raycast3d_method_get_collider_shape"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_collider_shape</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-get-collider-shape"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与射线相交的第一个对象的形状 ID，射线未与任何对象相交时返回 <literal>0</literal>（即 <reference internal="True" refid="class-raycast3d-method-is-colliding"><inline classes="std std-ref">is_colliding</inline></reference> 返回 <literal>false</literal> 时）。</paragraph>
            <paragraph>要获取相交的形状节点，比如假设目标是 <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>，可以使用：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var target = get_collider() # 是 CollisionObject3D 节点。
var shape_id = get_collider_shape() # 碰撞体中的形状索引。
var owner_id = target.shape_find_owner(shape_id) # 碰撞体中的所有者 ID。
var shape = target.shape_owner_get_owner(owner_id)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var target = (CollisionObject3D)GetCollider(); // 是 CollisionObject3D 节点。
var shapeId = GetColliderShape(); // 碰撞体中的形状索引。
var ownerId = target.ShapeFindOwner(shapeId); // 碰撞体中的所有者 ID。
var shape = target.ShapeOwnerGetOwner(ownerId);</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-get-collision-face-index"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-get-collision-face-index" names="class_raycast3d_method_get_collision_face_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_collision_face_index</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-get-collision-face-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回碰撞点处碰撞对象的面索引，如果与射线相交的形状不是 <reference internal="True" refuri="class_concavepolygonshape3d#class-concavepolygonshape3d"><inline classes="std std-ref">ConcavePolygonShape3D</inline></reference>，则返回 <literal>-1</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-get-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-get-collision-mask-value" names="class_raycast3d_method_get_collision_mask_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_collision_mask_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-get-collision-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-raycast3d-property-collision-mask"><inline classes="std std-ref">collision_mask</inline></reference> 中是否启用了指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-get-collision-normal"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-get-collision-normal" names="class_raycast3d_method_get_collision_normal"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_collision_normal</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-get-collision-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回相交对象的形状在碰撞点处的法线，如果射线从该形状内部发出并且 <reference internal="True" refid="class-raycast3d-property-hit-from-inside"><inline classes="std std-ref">hit_from_inside</inline></reference> 为 <literal>true</literal>，则为 <literal>Vector3(0, 0)</literal>。</paragraph>
            <paragraph><strong>注意：</strong>请在调用前检查 <reference internal="True" refid="class-raycast3d-method-is-colliding"><inline classes="std std-ref">is_colliding</inline></reference> 返回的是否为 <literal>true</literal>，这样返回的法线就是即时有效的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-get-collision-point"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-get-collision-point" names="class_raycast3d_method_get_collision_point"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_collision_point</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-get-collision-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回全局坐标系中射线与最近的物体相交的碰撞点。如果 <reference internal="True" refid="class-raycast3d-property-hit-from-inside"><inline classes="std std-ref">hit_from_inside</inline></reference> 为 <literal>true</literal> 并且射线从碰撞形状内部开始，则该函数将返回该射线的原点。</paragraph>
            <paragraph><strong>注意：</strong>在调用该方法之前，请检查 <reference internal="True" refid="class-raycast3d-method-is-colliding"><inline classes="std std-ref">is_colliding</inline></reference> 是否返回 <literal>true</literal>，以确保返回的点有效且最新。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-is-colliding"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-is-colliding" names="class_raycast3d_method_is_colliding"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_colliding</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-raycast3d-method-is-colliding"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回是否有任何对象与射线的向量相交（考虑向量长度）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-remove-exception"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-remove-exception" names="class_raycast3d_method_remove_exception"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_exception</strong>(node: <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference>) <reference internal="True" refid="class-raycast3d-method-remove-exception"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除一个碰撞例外，以便射线确实报告与指定 <reference internal="True" refuri="class_collisionobject3d#class-collisionobject3d"><inline classes="std std-ref">CollisionObject3D</inline></reference> 节点的碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-remove-exception-rid"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-remove-exception-rid" names="class_raycast3d_method_remove_exception_rid"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_exception_rid</strong>(rid: <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>) <reference internal="True" refid="class-raycast3d-method-remove-exception-rid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除碰撞例外，这样射线就会报告与指定的 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference> 的碰撞。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-raycast3d-method-set-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-raycast3d-method-set-collision-mask-value" names="class_raycast3d_method_set_collision_mask_value"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_collision_mask_value</strong>(layer_number: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-raycast3d-method-set-collision-mask-value"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据 <literal>value</literal>，启用或禁用 <reference internal="True" refid="class-raycast3d-property-collision-mask"><inline classes="std std-ref">collision_mask</inline></reference> 中指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
