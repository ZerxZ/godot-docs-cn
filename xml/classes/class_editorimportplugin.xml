<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_editorimportplugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorImportPlugin.xml.</comment>
    <target refid="class-editorimportplugin"></target>
    <section ids="editorimportplugin class-editorimportplugin" names="editorimportplugin class_editorimportplugin">
        <title>EditorImportPlugin</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resourceimporter#class-resourceimporter"><inline classes="std std-ref">ResourceImporter</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>在编辑器中注册一个自定义资源导入器。使用该类来解析任何文件，并将其作为新的资源类型导入。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EditorImportPlugin</strong> 提供了一种方法来扩展编辑器的资源导入功能。使用它们从自定义文件中导入资源，或为编辑器的现有导入器提供替代方案。</paragraph>
            <paragraph>EditorImportPlugin 通过与特定的文件扩展名和资源类型相关联来工作。请参见 <reference internal="True" refid="class-editorimportplugin-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference> 和 <reference internal="True" refid="class-editorimportplugin-private-method-get-resource-type"><inline classes="std std-ref">_get_resource_type</inline></reference>。它们可以选择性地指定一些影响导入过程的导入预设。EditorImportPlugin 负责创建资源并将它们保存在 <literal>.godot/imported</literal> 目录中（见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-config-use-hidden-project-data-directory"><inline classes="std std-ref">ProjectSettings.application/config/use_hidden_project_data_directory</inline></reference>）。</paragraph>
            <paragraph>下面是一个 EditorImportPlugin 的示例，它从扩展名为“.special”或“.spec”的文件中导入 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorImportPlugin

func _get_importer_name():
    return "my.special.plugin"

func _get_visible_name():
    return "Special Mesh"

func _get_recognized_extensions():
    return ["special", "spec"]

func _get_save_extension():
    return "mesh"

func _get_resource_type():
    return "Mesh"

func _get_preset_count():
    return 1

func _get_preset_name(preset_index):
    return "Default"

func _get_import_options(path, preset_index):
    return [{"name": "my_option", "default_value": false}]

func _import(source_file, save_path, options, platform_variants, gen_files):
    var file = FileAccess.open(source_file, FileAccess.READ)
    if file == null:
        return FAILED
    var mesh = ArrayMesh.new()
    # 使用从“file”中读取的数据填充 Mesh，留作读者的练习。

    var filename = save_path + "." + _get_save_extension()
    return ResourceSaver.save(mesh, filename)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MySpecialPlugin : EditorImportPlugin
{
    public override string _GetImporterName()
    {
        return "my.special.plugin";
    }

    public override string _GetVisibleName()
    {
        return "Special Mesh";
    }

    public override string[] _GetRecognizedExtensions()
    {
        return new string[] { "special", "spec" };
    }

    public override string _GetSaveExtension()
    {
        return "mesh";
    }

    public override string _GetResourceType()
    {
        return "Mesh";
    }

    public override int _GetPresetCount()
    {
        return 1;
    }

    public override string _GetPresetName(int presetIndex)
    {
        return "Default";
    }

    public override Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt; _GetImportOptions(string path, int presetIndex)
    {
        return new Godot.Collections.Array&lt;Godot.Collections.Dictionary&gt;
        {
            new Godot.Collections.Dictionary
            {
                { "name", "myOption" },
                { "default_value", false },
            }
        };
    }

    public override int _Import(string sourceFile, string savePath, Godot.Collections.Dictionary options, Godot.Collections.Array&lt;string&gt; platformVariants, Godot.Collections.Array&lt;string&gt; genFiles)
    {
        using var file = FileAccess.Open(sourceFile, FileAccess.ModeFlags.Read);
        if (file.GetError() != Error.Ok)
        {
            return (int)Error.Failed;
        }

        var mesh = new ArrayMesh();
        // 使用从“file”中读取的数据填充 Mesh，留作读者的练习
        string filename = $"{savePath}.{_GetSaveExtension()}";
        return (int)ResourceSaver.Save(mesh, filename);
    }
}</literal_block>
                </div>
            </container>
            <paragraph>要使用 <strong>EditorImportPlugin</strong>，请先使用 <reference internal="True" refuri="class_editorplugin#class-editorplugin-method-add-import-plugin"><inline classes="std std-ref">EditorPlugin.add_import_plugin</inline></reference> 方法注册它。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/plugins/editor/import_plugins"><inline classes="doc">导入插件</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="51"></colspec>
                    <colspec colwidth="310"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-import-options"><inline classes="std std-ref">_get_import_options</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> preset_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-import-order"><inline classes="std std-ref">_get_import_order</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-importer-name"><inline classes="std std-ref">_get_importer_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-option-visibility"><inline classes="std std-ref">_get_option_visibility</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> option_name, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> options <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-preset-count"><inline classes="std std-ref">_get_preset_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-preset-name"><inline classes="std std-ref">_get_preset_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> preset_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-priority"><inline classes="std std-ref">_get_priority</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-recognized-extensions"><inline classes="std std-ref">_get_recognized_extensions</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-resource-type"><inline classes="std std-ref">_get_resource_type</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-save-extension"><inline classes="std std-ref">_get_save_extension</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-get-visible-name"><inline classes="std std-ref">_get_visible_name</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-private-method-import"><inline classes="std std-ref">_import</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> source_file, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> save_path, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> options, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String[]</inline></reference> platform_variants, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String[]</inline></reference> gen_files <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-editorimportplugin-method-append-import-external-resource"><inline classes="std std-ref">append_import_external_resource</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> custom_options={}, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> custom_importer="", <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> generator_parameters=null <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="方法说明">
            <title>方法说明</title>
            <target refid="class-editorimportplugin-private-method-get-import-options"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-import-options" names="class_editorimportplugin_private_method__get_import_options"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary[]</inline></reference> <strong>_get_import_options</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> preset_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取该索引下预设的选项和默认值。返回一个字典数组，包含以下键名：<literal>name</literal>、<literal>default_value</literal>、<literal>property_hint</literal>（可选）、<literal>hint_string</literal>（可选）、<literal>usage</literal>（可选）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-import-order"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-import-order" names="class_editorimportplugin_private_method__get_import_order"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_import_order</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取该导入器在导入资源时的运行顺序。具有<emphasis>较低</emphasis>导入顺序的导入器将被首先调用，较高值的将被其后调用。使用这个来确保导入器在依赖项已经被导入后执行。默认的导入顺序是 <literal>0</literal>，除非被指定的导入器重写。参阅 <reference internal="True" refuri="class_resourceimporter#enum-resourceimporter-importorder"><inline classes="std std-ref">ImportOrder</inline></reference> 了解相关预定义的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-importer-name"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-importer-name" names="class_editorimportplugin_private_method__get_importer_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_importer_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取导入器的唯一名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-option-visibility"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-option-visibility" names="class_editorimportplugin_private_method__get_option_visibility"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_get_option_visibility</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> option_name, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> options <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>覆盖此方法就可以在满足条件时隐藏指定的导入选项。主要用于当某些选项存在依赖项时，如果禁用了某个依赖项就隐藏这些选项。例如：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _get_option_visibility(option, options):
    # 仅在压缩模式设为“Lossy”时显示有损压缩质量设置。
    if option == "compress/lossy_quality" and options.has("compress/mode"):
        return int(options["compress/mode"]) == COMPRESS_LOSSY # 这是你设置的常量

    return true</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void _GetOptionVisibility(string option, Godot.Collections.Dictionary options)
{
    // 仅在压缩模式设为“Lossy”时显示有损压缩质量设置。
    if (option == "compress/lossy_quality" &amp;&amp; options.ContainsKey("compress/mode"))
    {
        return (int)options["compress/mode"] == CompressLossy; // 这是你设置的常量
    }

    return true;
}</literal_block>
                </div>
            </container>
            <paragraph>返回 <literal>true</literal>，会让所有选项始终可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-preset-count"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-preset-count" names="class_editorimportplugin_private_method__get_preset_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>_get_preset_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取插件定义的初始预设的数量。使用 <reference internal="True" refid="class-editorimportplugin-private-method-get-import-options"><inline classes="std std-ref">_get_import_options</inline></reference> 获取预设的默认选项，使用 <reference internal="True" refid="class-editorimportplugin-private-method-get-preset-name"><inline classes="std std-ref">_get_preset_name</inline></reference> 获取预设的名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-preset-name"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-preset-name" names="class_editorimportplugin_private_method__get_preset_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_preset_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> preset_index <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取该索引处预设的选项名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-priority"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-priority" names="class_editorimportplugin_private_method__get_priority"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>_get_priority</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取该插件对识别的扩展的优先级。优先级越高的插件会被优先选择。默认的优先级是 <literal>1.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-recognized-extensions"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-recognized-extensions" names="class_editorimportplugin_private_method__get_recognized_extensions"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>_get_recognized_extensions</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取与该加载器相关联的文件扩展名列表（不区分大小写），例如 <literal>["obj"]</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-resource-type"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-resource-type" names="class_editorimportplugin_private_method__get_resource_type"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_resource_type</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取与此加载程序关联的 Godot 资源类型，例如 <literal>"Mesh"</literal> 或 <literal>"Animation"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-save-extension"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-save-extension" names="class_editorimportplugin_private_method__get_save_extension"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_save_extension</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取用于在 <literal>.godot/imported</literal> 目录中保存此资源的扩展名（请参阅 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-application-config-use-hidden-project-data-directory"><inline classes="std std-ref">ProjectSettings.application/config/use_hidden_project_data_directory</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-get-visible-name"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-get-visible-name" names="class_editorimportplugin_private_method__get_visible_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>_get_visible_name</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取在导入窗口中显示的名称。你应该选择这个名字作为“导入为”的延续，例如“导入为 Special Mesh”。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-private-method-import"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-private-method-import" names="class_editorimportplugin_private_method__import"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>_import</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> source_file, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> save_path, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> options, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String[]</inline></reference> platform_variants, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String[]</inline></reference> gen_files <strong>)</strong> <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>使用指定的导入选项 <literal>options</literal> 将 <literal>source_file</literal> 导入到 <literal>save_path</literal> 中。此函数将修改 <literal>platform_variants</literal> 和 <literal>gen_files</literal> 数组。</paragraph>
            <paragraph>必须重写这个方法才能完成实际的导入工作。参阅本类的描述以了解如何重写该方法。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-editorimportplugin-method-append-import-external-resource"></target>
            <paragraph classes="classref-method" ids="class-editorimportplugin-method-append-import-external-resource" names="class_editorimportplugin_method_append_import_external_resource"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>append_import_external_resource</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> path, <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> custom_options={}, <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> custom_importer="", <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> generator_parameters=null <strong>)</strong></paragraph>
            <paragraph>该函数只能在 <reference internal="True" refid="class-editorimportplugin-private-method-import"><inline classes="std std-ref">_import</inline></reference> 回调期间调用，它允许从中手动导入资源。当导入的文件生成需要导入的外部资源（例如图像）时，这很有用。“.import”文件的自定义参数可以通过 <literal>custom_options</literal> 传递。此外，在多个导入器可以处理一个文件的情况下，可以指定 <literal>custom_importer</literal> 以强制使用某个特定的导入器。该函数会执行一次资源导入并立即返回成功或错误代码。<literal>generator_parameters</literal> 定义可选的额外元数据，这些元数据将作为 <literal>generator_parameters</literal> 存储在 <literal>.import</literal> 文件的 <literal>remap</literal> 小节中，例如存储源数据的一个 md5 散列值。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
