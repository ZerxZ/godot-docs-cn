<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_multiplayerapi.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="network" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/MultiplayerAPI.xml.</comment>
    <target refid="class-multiplayerapi"></target>
    <section ids="multiplayerapi class-multiplayerapi" names="multiplayerapi class_multiplayerapi">
        <title>MultiplayerAPI</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_multiplayerapiextension#class-multiplayerapiextension"><inline classes="std std-ref">MultiplayerAPIExtension</inline></reference>, <reference internal="True" refuri="class_scenemultiplayer#class-scenemultiplayer"><inline classes="std std-ref">SceneMultiplayer</inline></reference></paragraph>
        <paragraph>高阶多人游戏 API 接口。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于高级多人游戏 API 实现的基类。另请参阅 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference>。</paragraph>
            <paragraph>默认情况下，<reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 引用了这个类的一个实现，并使用它来提供跨整个场景的多人游戏功能（即 RPC）。</paragraph>
            <paragraph>可以通过调用 <reference internal="True" refuri="class_scenetree#class-scenetree-method-set-multiplayer"><inline classes="std std-ref">SceneTree.set_multiplayer</inline></reference> 方法，覆盖特定树分支使用的 MultiplayerAPI 实例，从而有效地允许在同一场景中同时运行客户端和服务器。</paragraph>
            <paragraph>也可以通过脚本或本地扩展来扩展或替换默认实现。有关扩展的详细信息，请参阅 <reference internal="True" refuri="class_multiplayerapiextension#class-multiplayerapiextension"><inline classes="std std-ref">MultiplayerAPIExtension</inline></reference>；有关默认实现的详细信息，请参阅 <reference internal="True" refuri="class_scenemultiplayer#class-scenemultiplayer"><inline classes="std std-ref">SceneMultiplayer</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="73"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="209"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-create-default-interface"><inline classes="std std-ref">create_default_interface</inline></reference>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-get-default-interface"><inline classes="std std-ref">get_default_interface</inline></reference>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-get-peers"><inline classes="std std-ref">get_peers</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-get-remote-sender-id"><inline classes="std std-ref">get_remote_sender_id</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-get-unique-id"><inline classes="std std-ref">get_unique_id</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-has-multiplayer-peer"><inline classes="std std-ref">has_multiplayer_peer</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-is-server"><inline classes="std std-ref">is_server</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-object-configuration-add"><inline classes="std std-ref">object_configuration_add</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, configuration: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-object-configuration-remove"><inline classes="std std-ref">object_configuration_remove</inline></reference>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, configuration: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-poll"><inline classes="std std-ref">poll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-rpc"><inline classes="std std-ref">rpc</inline></reference>(peer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, arguments: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayerapi-method-set-default-interface"><inline classes="std std-ref">set_default_interface</inline></reference>(interface_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-multiplayerapi-signal-connected-to-server"></target>
            <paragraph classes="classref-signal" ids="class-multiplayerapi-signal-connected-to-server" names="class_multiplayerapi_signal_connected_to_server"><strong>connected_to_server</strong>() <reference internal="True" refid="class-multiplayerapi-signal-connected-to-server"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当此 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 成功连接到服务器时发出。仅在客户端上发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-signal-connection-failed"></target>
            <paragraph classes="classref-signal" ids="class-multiplayerapi-signal-connection-failed" names="class_multiplayerapi_signal_connection_failed"><strong>connection_failed</strong>() <reference internal="True" refid="class-multiplayerapi-signal-connection-failed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当此 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 无法与服务器建立连接时发出。仅在客户端上发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-signal-peer-connected"></target>
            <paragraph classes="classref-signal" ids="class-multiplayerapi-signal-peer-connected" names="class_multiplayerapi_signal_peer_connected"><strong>peer_connected</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-multiplayerapi-signal-peer-connected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当此 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 与新对等体连接时发出。ID 为新对等体的对等体 ID。当某个客户端连接到同一服务器时，其他客户端会收到通知。连接到服务器时，该客户端也会收到此信号，新对等体为服务器（ID 为 1）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-signal-peer-disconnected"></target>
            <paragraph classes="classref-signal" ids="class-multiplayerapi-signal-peer-disconnected" names="class_multiplayerapi_signal_peer_disconnected"><strong>peer_disconnected</strong>(id: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-multiplayerapi-signal-peer-disconnected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当此 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 与对等体断开连接时发出。当某个客户端从同一服务器断开连接时，其他客户端会收到通知。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-signal-server-disconnected"></target>
            <paragraph classes="classref-signal" ids="class-multiplayerapi-signal-server-disconnected" names="class_multiplayerapi_signal_server_disconnected"><strong>server_disconnected</strong>() <reference internal="True" refid="class-multiplayerapi-signal-server-disconnected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当此 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 与服务器断开连接时发出。仅在客户端上发出。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-multiplayerapi-rpcmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-multiplayerapi-rpcmode" names="enum_multiplayerapi_rpcmode">enum <strong>RPCMode</strong>: <reference internal="True" refid="enum-multiplayerapi-rpcmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-multiplayerapi-constant-rpc-mode-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerapi-constant-rpc-mode-disabled" names="class_multiplayerapi_constant_rpc_mode_disabled"><reference internal="True" refid="enum-multiplayerapi-rpcmode"><inline classes="std std-ref">RPCMode</inline></reference> <strong>RPC_MODE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>在 <reference internal="True" refuri="class_node#class-node-method-rpc-config"><inline classes="std std-ref">Node.rpc_config</inline></reference> 中使用，可以为所有 RPC 调用禁用某个方法或属性，使其不可用。所有方法的默认值。</paragraph>
            <target refid="class-multiplayerapi-constant-rpc-mode-any-peer"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerapi-constant-rpc-mode-any-peer" names="class_multiplayerapi_constant_rpc_mode_any_peer"><reference internal="True" refid="enum-multiplayerapi-rpcmode"><inline classes="std std-ref">RPCMode</inline></reference> <strong>RPC_MODE_ANY_PEER</strong> = <literal>1</literal></paragraph>
            <paragraph>在 <reference internal="True" refuri="class_node#class-node-method-rpc-config"><inline classes="std std-ref">Node.rpc_config</inline></reference> 中使用，可以将某个方法设置为能够被任何对等体远程调用。类似于 <literal>@rpc("any_peer")</literal> 注解。接受来自所有远程对等体的调用，无论是否为节点的控制者。</paragraph>
            <target refid="class-multiplayerapi-constant-rpc-mode-authority"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayerapi-constant-rpc-mode-authority" names="class_multiplayerapi_constant_rpc_mode_authority"><reference internal="True" refid="enum-multiplayerapi-rpcmode"><inline classes="std std-ref">RPCMode</inline></reference> <strong>RPC_MODE_AUTHORITY</strong> = <literal>2</literal></paragraph>
            <paragraph>在 <reference internal="True" refuri="class_node#class-node-method-rpc-config"><inline classes="std std-ref">Node.rpc_config</inline></reference> 中使用，可以将某个方法设置为仅能够被当前的多人控制者远程调用（默认为服务器）。类似于 <literal>@rpc("authority")</literal> 注解。见 <reference internal="True" refuri="class_node#class-node-method-set-multiplayer-authority"><inline classes="std std-ref">Node.set_multiplayer_authority</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-multiplayerapi-property-multiplayer-peer"></target>
            <paragraph classes="classref-property" ids="class-multiplayerapi-property-multiplayer-peer" names="class_multiplayerapi_property_multiplayer_peer"><reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> <strong>multiplayer_peer</strong> <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_multiplayer_peer</strong>(value: <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> <strong>get_multiplayer_peer</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>处理 RPC 系统的对等体对象（设置后会启用网络）。根据对等体本身的不同，该 MultiplayerAPI 可能会成为网络服务器（使用 <reference internal="True" refid="class-multiplayerapi-method-is-server"><inline classes="std std-ref">is_server</inline></reference> 判断）并将根节点的网络模式设置为控制者，也可能会成为普通的客户端对等体。所有子节点默认会继承其网络模式。网络相关事件（连接、断开连接、新客户端）的处理是通过连接 MultiplayerAPI 的信号来完成的。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-multiplayerapi-method-create-default-interface"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-create-default-interface" names="class_multiplayerapi_method_create_default_interface"><reference internal="True" refid="class-multiplayerapi"><inline classes="std std-ref">MultiplayerAPI</inline></reference> <strong>create_default_interface</strong>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-multiplayerapi-method-create-default-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回默认 MultiplayerAPI 的新实例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-get-default-interface"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-get-default-interface" names="class_multiplayerapi_method_get_default_interface"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_default_interface</strong>() <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-multiplayerapi-method-get-default-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回默认的 MultiplayerAPI 实现类名称。<reference internal="True" refuri="class_scenemultiplayer#class-scenemultiplayer"><inline classes="std std-ref">SceneMultiplayer</inline></reference> 可用时通常为 <literal>"SceneMultiplayer"</literal>。见 <reference internal="True" refid="class-multiplayerapi-method-set-default-interface"><inline classes="std std-ref">set_default_interface</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-get-peers"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-get-peers" names="class_multiplayerapi_method_get_peers"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_peers</strong>() <reference internal="True" refid="class-multiplayerapi-method-get-peers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 所有已连接对等体的对等体 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-get-remote-sender-id"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-get-remote-sender-id" names="class_multiplayerapi_method_get_remote_sender_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_remote_sender_id</strong>() <reference internal="True" refid="class-multiplayerapi-method-get-remote-sender-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the sender's peer ID for the RPC currently being executed.</paragraph>
            <paragraph><strong>Note:</strong> This method returns <literal>0</literal> when called outside of an RPC. As such, the original peer ID may be lost when code execution is delayed (such as with GDScript's <literal>await</literal> keyword).</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-get-unique-id"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-get-unique-id" names="class_multiplayerapi_method_get_unique_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_unique_id</strong>() <reference internal="True" refid="class-multiplayerapi-method-get-unique-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回这个 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 唯一对等体 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-has-multiplayer-peer"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-has-multiplayer-peer" names="class_multiplayerapi_method_has_multiplayer_peer"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_multiplayer_peer</strong>() <reference internal="True" refid="class-multiplayerapi-method-has-multiplayer-peer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果设置了 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-is-server"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-is-server" names="class_multiplayerapi_method_is_server"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_server</strong>() <reference internal="True" refid="class-multiplayerapi-method-is-server"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个 MultiplayerAPI 的 <reference internal="True" refid="class-multiplayerapi-property-multiplayer-peer"><inline classes="std std-ref">multiplayer_peer</inline></reference> 有效，且处于服务器模式（监听连接），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-object-configuration-add"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-object-configuration-add" names="class_multiplayerapi_method_object_configuration_add"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>object_configuration_add</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, configuration: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-multiplayerapi-method-object-configuration-add"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知该 MultiplayerAPI，以添加用于给定 <literal>object</literal> 的新的 <literal>configuration</literal>。该方法在内部被 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 使用，以配置该 MultiplayerAPI 的根路径（传入 <literal>null</literal> 并将一个有效的 <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> 作为 <literal>configuration</literal>）。该方法可以进一步被 MultiplayerAPI 实现使用，以提供其他功能，有关如何使用它的详细信息，请参阅具体实现（例如 <reference internal="True" refuri="class_scenemultiplayer#class-scenemultiplayer"><inline classes="std std-ref">SceneMultiplayer</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>当通过 <reference internal="True" refuri="class_multiplayerapiextension#class-multiplayerapiextension"><inline classes="std std-ref">MultiplayerAPIExtension</inline></reference> 扩展或重写 MultiplayerAPI 行为时，该方法最相关。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-object-configuration-remove"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-object-configuration-remove" names="class_multiplayerapi_method_object_configuration_remove"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>object_configuration_remove</strong>(object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, configuration: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-multiplayerapi-method-object-configuration-remove"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>通知该 MultiplayerAPI，以移除用于给定 <literal>object</literal> 的 <literal>configuration</literal>。该方法在内部被 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 使用，以配置该 MultiplayerAPI 的根路径（传入 <literal>null</literal> 并将一个空的 <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> 作为 <literal>configuration</literal>）。该方法可以进一步被 MultiplayerAPI 实现使用，以提供其他功能，有关如何使用它的详细信息，请参阅具体实现（例如 <reference internal="True" refuri="class_scenemultiplayer#class-scenemultiplayer"><inline classes="std std-ref">SceneMultiplayer</inline></reference>）。</paragraph>
            <paragraph><strong>注意：</strong>当通过 <reference internal="True" refuri="class_multiplayerapiextension#class-multiplayerapiextension"><inline classes="std std-ref">MultiplayerAPIExtension</inline></reference> 扩展或重写 MultiplayerAPI 行为时，该方法最相关。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-poll"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-poll" names="class_multiplayerapi_method_poll"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>poll</strong>() <reference internal="True" refid="class-multiplayerapi-method-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于轮询 MultiplayerAPI 的方法。将 <reference internal="True" refuri="class_scenetree#class-scenetree-property-multiplayer-poll"><inline classes="std std-ref">SceneTree.multiplayer_poll</inline></reference> 设置为 <literal>false</literal> 时才需要关心。默认情况下，<reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 将为你轮询其 MultiplayerAPI。</paragraph>
            <paragraph><strong>注意：</strong>该方法会导致 RPC 被调用，因此它们将在该函数的相同上下文中执行（例如 <literal>_process</literal>、<literal>physics</literal>、<reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-rpc"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-rpc" names="class_multiplayerapi_method_rpc"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>rpc</strong>(peer: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, object: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, method: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, arguments: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = []) <reference internal="True" refid="class-multiplayerapi-method-rpc"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向目标对等体 <literal>peer</literal> 发送 RPC。会使用提供的参数 <literal>arguments</literal> 在远程对象 <literal>object</literal> 上调用给定的方法 <literal>method</literal>。根据实现和 RPC 配置，RPC 可能也可以进行本地调用。见 <reference internal="True" refuri="class_node#class-node-method-rpc"><inline classes="std std-ref">Node.rpc</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-rpc-config"><inline classes="std std-ref">Node.rpc_config</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>请尽量使用 <reference internal="True" refuri="class_node#class-node-method-rpc"><inline classes="std std-ref">Node.rpc</inline></reference>、<reference internal="True" refuri="class_node#class-node-method-rpc-id"><inline classes="std std-ref">Node.rpc_id</inline></reference> 或 <literal>my_method.rpc(peer, arg1, arg2, ...)</literal>（适用于 GDScript），因为速度更快。这个方法主要用于 <reference internal="True" refuri="class_multiplayerapiextension#class-multiplayerapiextension"><inline classes="std std-ref">MultiplayerAPIExtension</inline></reference> 进行多人游戏能力的增强和替换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayerapi-method-set-default-interface"></target>
            <paragraph classes="classref-method" ids="class-multiplayerapi-method-set-default-interface" names="class_multiplayerapi_method_set_default_interface"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_default_interface</strong>(interface_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation> <reference internal="True" refid="class-multiplayerapi-method-set-default-interface"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置默认的 MultiplayerAPI 实现类。模块和扩展可以使用这个方法来配置引擎启动时 <reference internal="True" refuri="class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 将使用哪个实现。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
