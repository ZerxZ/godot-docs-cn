<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_basematerial3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/BaseMaterial3D.xml.</comment>
    <target refid="class-basematerial3d"></target>
    <section ids="basematerial3d class-basematerial3d" names="basematerial3d class_basematerial3d">
        <title>BaseMaterial3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_material#class-material"><inline classes="std std-ref">Material</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_ormmaterial3d#class-ormmaterial3d"><inline classes="std std-ref">ORMMaterial3D</inline></reference>, <reference internal="True" refuri="class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference></paragraph>
        <paragraph>用于定义网格 3D 渲染属性的抽象基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>这个类提供了默认的材质，具有多种渲染功能和属性，无需编写着色器代码。详情见下面的教程。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/standard_material_3d"><inline classes="doc">标准 3D 材质与 ORM 3D 材质</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="65"></colspec>
                    <colspec colwidth="115"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-albedo-color"><inline classes="std std-ref">albedo_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-albedo-texture"><inline classes="std std-ref">albedo_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-albedo-texture-force-srgb"><inline classes="std std-ref">albedo_texture_force_srgb</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-albedo-texture-msdf"><inline classes="std std-ref">albedo_texture_msdf</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-alpha-antialiasing-edge"><inline classes="std std-ref">alpha_antialiasing_edge</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-alpha-antialiasing-mode"><inline classes="std std-ref">alpha_antialiasing_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-alpha-hash-scale"><inline classes="std std-ref">alpha_hash_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-alpha-scissor-threshold"><inline classes="std std-ref">alpha_scissor_threshold</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-anisotropy"><inline classes="std std-ref">anisotropy</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-anisotropy-enabled"><inline classes="std std-ref">anisotropy_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-anisotropy-flowmap"><inline classes="std std-ref">anisotropy_flowmap</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-ao-enabled"><inline classes="std std-ref">ao_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-ao-light-affect"><inline classes="std std-ref">ao_light_affect</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-ao-on-uv2"><inline classes="std std-ref">ao_on_uv2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-ao-texture"><inline classes="std std-ref">ao_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-ao-texture-channel"><inline classes="std std-ref">ao_texture_channel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-backlight"><inline classes="std std-ref">backlight</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-backlight-enabled"><inline classes="std std-ref">backlight_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-backlight-texture"><inline classes="std std-ref">backlight_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-billboard-keep-scale"><inline classes="std std-ref">billboard_keep_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-billboard-mode"><inline classes="std std-ref">billboard_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-blend-mode"><inline classes="std std-ref">blend_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-clearcoat"><inline classes="std std-ref">clearcoat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-clearcoat-enabled"><inline classes="std std-ref">clearcoat_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-clearcoat-roughness"><inline classes="std std-ref">clearcoat_roughness</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-clearcoat-texture"><inline classes="std std-ref">clearcoat_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-cull-mode"><inline classes="std std-ref">cull_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-depth-draw-mode"><inline classes="std std-ref">depth_draw_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-detail-blend-mode"><inline classes="std std-ref">detail_blend_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-detail-enabled"><inline classes="std std-ref">detail_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-detail-mask"><inline classes="std std-ref">detail_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-detail-normal"><inline classes="std std-ref">detail_normal</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">DetailUV</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-detail-uv-layer"><inline classes="std std-ref">detail_uv_layer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-diffuse-mode"><inline classes="std std-ref">diffuse_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-disable-ambient-light"><inline classes="std std-ref">disable_ambient_light</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-disable-fog"><inline classes="std std-ref">disable_fog</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-disable-receive-shadows"><inline classes="std std-ref">disable_receive_shadows</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-distance-fade-max-distance"><inline classes="std std-ref">distance_fade_max_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-distance-fade-min-distance"><inline classes="std std-ref">distance_fade_min_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-distance-fade-mode"><inline classes="std std-ref">distance_fade_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-emission"><inline classes="std std-ref">emission</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-emission-enabled"><inline classes="std std-ref">emission_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-emission-energy-multiplier"><inline classes="std std-ref">emission_energy_multiplier</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-emission-intensity"><inline classes="std std-ref">emission_intensity</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-emission-on-uv2"><inline classes="std std-ref">emission_on_uv2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">EmissionOperator</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-emission-operator"><inline classes="std std-ref">emission_operator</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-emission-texture"><inline classes="std std-ref">emission_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-fixed-size"><inline classes="std std-ref">fixed_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-grow"><inline classes="std std-ref">grow</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-grow-amount"><inline classes="std std-ref">grow_amount</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-deep-parallax"><inline classes="std std-ref">heightmap_deep_parallax</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-enabled"><inline classes="std std-ref">heightmap_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-flip-binormal"><inline classes="std std-ref">heightmap_flip_binormal</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-flip-tangent"><inline classes="std std-ref">heightmap_flip_tangent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-flip-texture"><inline classes="std std-ref">heightmap_flip_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-max-layers"><inline classes="std std-ref">heightmap_max_layers</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-min-layers"><inline classes="std std-ref">heightmap_min_layers</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-scale"><inline classes="std std-ref">heightmap_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>5.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-heightmap-texture"><inline classes="std std-ref">heightmap_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-metallic"><inline classes="std std-ref">metallic</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-metallic-specular"><inline classes="std std-ref">metallic_specular</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-metallic-texture"><inline classes="std std-ref">metallic_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-metallic-texture-channel"><inline classes="std std-ref">metallic_texture_channel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-msdf-outline-size"><inline classes="std std-ref">msdf_outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-msdf-pixel-range"><inline classes="std std-ref">msdf_pixel_range</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-no-depth-test"><inline classes="std std-ref">no_depth_test</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-normal-enabled"><inline classes="std std-ref">normal_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-normal-scale"><inline classes="std std-ref">normal_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-normal-texture"><inline classes="std std-ref">normal_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-orm-texture"><inline classes="std std-ref">orm_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-particles-anim-h-frames"><inline classes="std std-ref">particles_anim_h_frames</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-particles-anim-loop"><inline classes="std std-ref">particles_anim_loop</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-particles-anim-v-frames"><inline classes="std std-ref">particles_anim_v_frames</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-point-size"><inline classes="std std-ref">point_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-proximity-fade-distance"><inline classes="std std-ref">proximity_fade_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-proximity-fade-enabled"><inline classes="std std-ref">proximity_fade_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-refraction-enabled"><inline classes="std std-ref">refraction_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-refraction-scale"><inline classes="std std-ref">refraction_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.05</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-refraction-texture"><inline classes="std std-ref">refraction_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-refraction-texture-channel"><inline classes="std std-ref">refraction_texture_channel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-rim"><inline classes="std std-ref">rim</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-rim-enabled"><inline classes="std std-ref">rim_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-rim-texture"><inline classes="std std-ref">rim_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-rim-tint"><inline classes="std std-ref">rim_tint</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-roughness"><inline classes="std std-ref">roughness</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-roughness-texture"><inline classes="std std-ref">roughness_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-roughness-texture-channel"><inline classes="std std-ref">roughness_texture_channel</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-shading-mode"><inline classes="std std-ref">shading_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-shadow-to-opacity"><inline classes="std std-ref">shadow_to_opacity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-specular-mode"><inline classes="std std-ref">specular_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-enabled"><inline classes="std std-ref">subsurf_scatter_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-skin-mode"><inline classes="std std-ref">subsurf_scatter_skin_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-strength"><inline classes="std std-ref">subsurf_scatter_strength</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-texture"><inline classes="std std-ref">subsurf_scatter_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-boost"><inline classes="std std-ref">subsurf_scatter_transmittance_boost</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-color"><inline classes="std std-ref">subsurf_scatter_transmittance_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-depth"><inline classes="std std-ref">subsurf_scatter_transmittance_depth</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-enabled"><inline classes="std std-ref">subsurf_scatter_transmittance_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-texture"><inline classes="std std-ref">subsurf_scatter_transmittance_texture</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-texture-filter"><inline classes="std std-ref">texture_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-texture-repeat"><inline classes="std std-ref">texture_repeat</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-transparency"><inline classes="std std-ref">transparency</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-use-particle-trails"><inline classes="std std-ref">use_particle_trails</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-use-point-size"><inline classes="std std-ref">use_point_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv1-offset"><inline classes="std std-ref">uv1_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv1-scale"><inline classes="std std-ref">uv1_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv1-triplanar"><inline classes="std std-ref">uv1_triplanar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv1-triplanar-sharpness"><inline classes="std std-ref">uv1_triplanar_sharpness</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv1-world-triplanar"><inline classes="std std-ref">uv1_world_triplanar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv2-offset"><inline classes="std std-ref">uv2_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(0, 0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv2-scale"><inline classes="std std-ref">uv2_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector3(1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv2-triplanar"><inline classes="std std-ref">uv2_triplanar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv2-triplanar-sharpness"><inline classes="std std-ref">uv2_triplanar_sharpness</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-uv2-world-triplanar"><inline classes="std std-ref">uv2_world_triplanar</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-vertex-color-is-srgb"><inline classes="std std-ref">vertex_color_is_srgb</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-property-vertex-color-use-as-albedo"><inline classes="std std-ref">vertex_color_use_as_albedo</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="175"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-method-get-feature"><inline classes="std std-ref">get_feature</inline></reference>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-method-get-flag"><inline classes="std std-ref">get_flag</inline></reference>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-method-get-texture"><inline classes="std std-ref">get_texture</inline></reference>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-method-set-feature"><inline classes="std std-ref">set_feature</inline></reference>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-method-set-flag"><inline classes="std std-ref">set_flag</inline></reference>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-basematerial3d-method-set-texture"><inline classes="std std-ref">set_texture</inline></reference>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-basematerial3d-textureparam"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-textureparam" names="enum_basematerial3d_textureparam">enum <strong>TextureParam</strong>: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-texture-albedo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-albedo" names="class_basematerial3d_constant_texture_albedo"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_ALBEDO</strong> = <literal>0</literal></paragraph>
            <paragraph>指定每个像素颜色的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-metallic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-metallic" names="class_basematerial3d_constant_texture_metallic"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_METALLIC</strong> = <literal>1</literal></paragraph>
            <paragraph>指定每个像素金属度值的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-roughness"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-roughness" names="class_basematerial3d_constant_texture_roughness"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_ROUGHNESS</strong> = <literal>2</literal></paragraph>
            <paragraph>指定每个像素粗糙度值的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-emission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-emission" names="class_basematerial3d_constant_texture_emission"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_EMISSION</strong> = <literal>3</literal></paragraph>
            <paragraph>指定每个像素自发光颜色的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-normal" names="class_basematerial3d_constant_texture_normal"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_NORMAL</strong> = <literal>4</literal></paragraph>
            <paragraph>指定每个像素法向量的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-rim"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-rim" names="class_basematerial3d_constant_texture_rim"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_RIM</strong> = <literal>5</literal></paragraph>
            <paragraph>指定每个像素边缘值的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-clearcoat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-clearcoat" names="class_basematerial3d_constant_texture_clearcoat"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_CLEARCOAT</strong> = <literal>6</literal></paragraph>
            <paragraph>指定每个像素清漆值的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-flowmap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-flowmap" names="class_basematerial3d_constant_texture_flowmap"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_FLOWMAP</strong> = <literal>7</literal></paragraph>
            <paragraph>指定每个像素流图方向的纹理，用于 <reference internal="True" refid="class-basematerial3d-property-anisotropy"><inline classes="std std-ref">anisotropy</inline></reference>。</paragraph>
            <target refid="class-basematerial3d-constant-texture-ambient-occlusion"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-ambient-occlusion" names="class_basematerial3d_constant_texture_ambient_occlusion"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_AMBIENT_OCCLUSION</strong> = <literal>8</literal></paragraph>
            <paragraph>指定每个像素环境光遮蔽的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-heightmap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-heightmap" names="class_basematerial3d_constant_texture_heightmap"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_HEIGHTMAP</strong> = <literal>9</literal></paragraph>
            <paragraph>指定每个像素高度的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-subsurface-scattering"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-subsurface-scattering" names="class_basematerial3d_constant_texture_subsurface_scattering"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_SUBSURFACE_SCATTERING</strong> = <literal>10</literal></paragraph>
            <paragraph>指定每个像素次表面散射的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-subsurface-transmittance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-subsurface-transmittance" names="class_basematerial3d_constant_texture_subsurface_transmittance"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_SUBSURFACE_TRANSMITTANCE</strong> = <literal>11</literal></paragraph>
            <paragraph>指定每个像素用于次表面散射的透射率的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-backlight"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-backlight" names="class_basematerial3d_constant_texture_backlight"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_BACKLIGHT</strong> = <literal>12</literal></paragraph>
            <paragraph>指定每个像素背光颜色的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-refraction"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-refraction" names="class_basematerial3d_constant_texture_refraction"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_REFRACTION</strong> = <literal>13</literal></paragraph>
            <paragraph>指定每个像素折射强度的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-detail-mask"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-detail-mask" names="class_basematerial3d_constant_texture_detail_mask"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_DETAIL_MASK</strong> = <literal>14</literal></paragraph>
            <paragraph>指定每个像素细节蒙版混合值的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-detail-albedo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-detail-albedo" names="class_basematerial3d_constant_texture_detail_albedo"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_DETAIL_ALBEDO</strong> = <literal>15</literal></paragraph>
            <paragraph>指定每个像素细节颜色的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-detail-normal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-detail-normal" names="class_basematerial3d_constant_texture_detail_normal"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_DETAIL_NORMAL</strong> = <literal>16</literal></paragraph>
            <paragraph>指定每个像素细节法线的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-orm"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-orm" names="class_basematerial3d_constant_texture_orm"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_ORM</strong> = <literal>17</literal></paragraph>
            <paragraph>保存环境光遮蔽、粗糙度和金属度信息的纹理。</paragraph>
            <target refid="class-basematerial3d-constant-texture-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-max" names="class_basematerial3d_constant_texture_max"><reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> <strong>TEXTURE_MAX</strong> = <literal>18</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-texturefilter"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-texturefilter" names="enum_basematerial3d_texturefilter">enum <strong>TextureFilter</strong>: <reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-texture-filter-nearest"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-filter-nearest" names="class_basematerial3d_constant_texture_filter_nearest"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_NEAREST</strong> = <literal>0</literal></paragraph>
            <paragraph>纹理过滤仅从最近的像素读取。这使得纹理从近距离看是像素化的，从远处看是颗粒状的（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-basematerial3d-constant-texture-filter-linear"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-filter-linear" names="class_basematerial3d_constant_texture_filter_linear"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_LINEAR</strong> = <literal>1</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合。这使得纹理从近处看起来很平滑，从远处看起来却有颗粒感（由于多级渐远纹理没有被采样）。</paragraph>
            <target refid="class-basematerial3d-constant-texture-filter-nearest-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-filter-nearest-with-mipmaps" names="class_basematerial3d_constant_texture_filter_nearest_with_mipmaps"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_NEAREST_WITH_MIPMAPS</strong> = <literal>2</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并在最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。</paragraph>
            <target refid="class-basematerial3d-constant-texture-filter-linear-with-mipmaps"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-filter-linear-with-mipmaps" names="class_basematerial3d_constant_texture_filter_linear_with_mipmaps"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_LINEAR_WITH_MIPMAPS</strong> = <literal>3</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素和最近的 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。</paragraph>
            <target refid="class-basematerial3d-constant-texture-filter-nearest-with-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-filter-nearest-with-mipmaps-anisotropic" names="class_basematerial3d_constant_texture_filter_nearest_with_mipmaps_anisotropic"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC</strong> = <literal>4</literal></paragraph>
            <paragraph>纹理过滤从最近的像素读取并根据表面和相机视图之间的角度在 2 个多级渐远纹理之间进行混合（或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来像素化，从远处看起来平滑。各向异性过滤提高了几乎与相机位于一条线上的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <target refid="class-basematerial3d-constant-texture-filter-linear-with-mipmaps-anisotropic"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-filter-linear-with-mipmaps-anisotropic" names="class_basematerial3d_constant_texture_filter_linear_with_mipmaps_anisotropic"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC</strong> = <literal>5</literal></paragraph>
            <paragraph>纹理过滤在最近的 4 个像素之间进行混合，并基于表面与相机视图之间的角度在 2 个多级渐远纹理之间进行混合 （或者如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-use-nearest-mipmap-filter"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</inline></reference> 为 <literal>true</literal>，则使用最近的多级渐远纹理）。这使得纹理从近处看起来平滑，从远处看起来也平滑。各向异性过滤提高了几乎与相机位于一条线的表面上的纹理质量，但速度稍慢。各向异性过滤级别可以通过调整 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-textures-default-filters-anisotropic-filtering-level"><inline classes="std std-ref">ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</inline></reference> 来改变。</paragraph>
            <target refid="class-basematerial3d-constant-texture-filter-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-filter-max" names="class_basematerial3d_constant_texture_filter_max"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>TEXTURE_FILTER_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-detailuv"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-detailuv" names="enum_basematerial3d_detailuv">enum <strong>DetailUV</strong>: <reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-detail-uv-1"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-detail-uv-1" names="class_basematerial3d_constant_detail_uv_1"><reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">DetailUV</inline></reference> <strong>DETAIL_UV_1</strong> = <literal>0</literal></paragraph>
            <paragraph>使用 <literal>UV</literal> 与细节纹理。</paragraph>
            <target refid="class-basematerial3d-constant-detail-uv-2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-detail-uv-2" names="class_basematerial3d_constant_detail_uv_2"><reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">DetailUV</inline></reference> <strong>DETAIL_UV_2</strong> = <literal>1</literal></paragraph>
            <paragraph>使用 <literal>UV2</literal> 与细节纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-transparency"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-transparency" names="enum_basematerial3d_transparency">enum <strong>Transparency</strong>: <reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-transparency-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-transparency-disabled" names="class_basematerial3d_constant_transparency_disabled"><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>TRANSPARENCY_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>该材质将不使用透明度。渲染最快。</paragraph>
            <target refid="class-basematerial3d-constant-transparency-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-transparency-alpha" names="class_basematerial3d_constant_transparency_alpha"><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>TRANSPARENCY_ALPHA</strong> = <literal>1</literal></paragraph>
            <paragraph>该材质将使用纹理的 Alpha 值作为透明度。渲染最慢，且会禁用阴影投射。</paragraph>
            <target refid="class-basematerial3d-constant-transparency-alpha-scissor"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-transparency-alpha-scissor" names="class_basematerial3d_constant_transparency_alpha_scissor"><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>TRANSPARENCY_ALPHA_SCISSOR</strong> = <literal>2</literal></paragraph>
            <paragraph>该材质会将所有低于阈值的值截断，其余部分将保持不透明。不透明部分将在深度预通道中渲染。这比 Alpha 混合的渲染速度更快，但比不透明渲染慢。支持投射阴影。</paragraph>
            <target refid="class-basematerial3d-constant-transparency-alpha-hash"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-transparency-alpha-hash" names="class_basematerial3d_constant_transparency_alpha_hash"><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>TRANSPARENCY_ALPHA_HASH</strong> = <literal>3</literal></paragraph>
            <paragraph>该材质会将所有低于空间确定性阈值的值截断，其余部分将保持不透明。这比 Alpha 混合的渲染速度更快，但比不透明渲染慢。支持投射阴影。Alpha 哈希适合毛发渲染。</paragraph>
            <target refid="class-basematerial3d-constant-transparency-alpha-depth-pre-pass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-transparency-alpha-depth-pre-pass" names="class_basematerial3d_constant_transparency_alpha_depth_pre_pass"><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>TRANSPARENCY_ALPHA_DEPTH_PRE_PASS</strong> = <literal>4</literal></paragraph>
            <paragraph>该材质将使用纹理的 Alpha 值作为透明度，但会在深度预通道阶段丢弃 Alpha 小于 0.99 的片段，并在阴影通道期间丢弃 Alpha 小于 0.1 的片段。支持投射阴影。</paragraph>
            <target refid="class-basematerial3d-constant-transparency-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-transparency-max" names="class_basematerial3d_constant_transparency_max"><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>TRANSPARENCY_MAX</strong> = <literal>5</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-shadingmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-shadingmode" names="enum_basematerial3d_shadingmode">enum <strong>ShadingMode</strong>: <reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-shading-mode-unshaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-shading-mode-unshaded" names="class_basematerial3d_constant_shading_mode_unshaded"><reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference> <strong>SHADING_MODE_UNSHADED</strong> = <literal>0</literal></paragraph>
            <paragraph>该对象不会接受阴影。渲染速度最快，但会禁用与灯光的所有交互。</paragraph>
            <target refid="class-basematerial3d-constant-shading-mode-per-pixel"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-shading-mode-per-pixel" names="class_basematerial3d_constant_shading_mode_per_pixel"><reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference> <strong>SHADING_MODE_PER_PIXEL</strong> = <literal>1</literal></paragraph>
            <paragraph>对象将逐像素进行着色。对于逼真的阴影效果很有用。</paragraph>
            <target refid="class-basematerial3d-constant-shading-mode-per-vertex"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-shading-mode-per-vertex" names="class_basematerial3d_constant_shading_mode_per_vertex"><reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference> <strong>SHADING_MODE_PER_VERTEX</strong> = <literal>2</literal></paragraph>
            <paragraph>对象将逐顶点进行着色。当想要更便宜的着色器并且不关心视觉质量时很有用。尚未实现（该模式的行为类似于 <reference internal="True" refid="class-basematerial3d-constant-shading-mode-per-pixel"><inline classes="std std-ref">SHADING_MODE_PER_PIXEL</inline></reference>）。</paragraph>
            <target refid="class-basematerial3d-constant-shading-mode-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-shading-mode-max" names="class_basematerial3d_constant_shading_mode_max"><reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference> <strong>SHADING_MODE_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-feature"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-feature" names="enum_basematerial3d_feature">enum <strong>Feature</strong>: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-feature-emission"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-emission" names="class_basematerial3d_constant_feature_emission"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_EMISSION</strong> = <literal>0</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-emission-enabled"><inline classes="std std-ref">emission_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-normal-mapping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-normal-mapping" names="class_basematerial3d_constant_feature_normal_mapping"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_NORMAL_MAPPING</strong> = <literal>1</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-normal-enabled"><inline classes="std std-ref">normal_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-rim"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-rim" names="class_basematerial3d_constant_feature_rim"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_RIM</strong> = <literal>2</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-rim-enabled"><inline classes="std std-ref">rim_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-clearcoat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-clearcoat" names="class_basematerial3d_constant_feature_clearcoat"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_CLEARCOAT</strong> = <literal>3</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-clearcoat-enabled"><inline classes="std std-ref">clearcoat_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-anisotropy"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-anisotropy" names="class_basematerial3d_constant_feature_anisotropy"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_ANISOTROPY</strong> = <literal>4</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-anisotropy-enabled"><inline classes="std std-ref">anisotropy_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-ambient-occlusion"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-ambient-occlusion" names="class_basematerial3d_constant_feature_ambient_occlusion"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_AMBIENT_OCCLUSION</strong> = <literal>5</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-ao-enabled"><inline classes="std std-ref">ao_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-height-mapping"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-height-mapping" names="class_basematerial3d_constant_feature_height_mapping"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_HEIGHT_MAPPING</strong> = <literal>6</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-heightmap-enabled"><inline classes="std std-ref">heightmap_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-subsurface-scattering"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-subsurface-scattering" names="class_basematerial3d_constant_feature_subsurface_scattering"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_SUBSURFACE_SCATTERING</strong> = <literal>7</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-enabled"><inline classes="std std-ref">subsurf_scatter_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-subsurface-transmittance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-subsurface-transmittance" names="class_basematerial3d_constant_feature_subsurface_transmittance"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_SUBSURFACE_TRANSMITTANCE</strong> = <literal>8</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-enabled"><inline classes="std std-ref">subsurf_scatter_transmittance_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-backlight"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-backlight" names="class_basematerial3d_constant_feature_backlight"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_BACKLIGHT</strong> = <literal>9</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-backlight-enabled"><inline classes="std std-ref">backlight_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-refraction"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-refraction" names="class_basematerial3d_constant_feature_refraction"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_REFRACTION</strong> = <literal>10</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-refraction-enabled"><inline classes="std std-ref">refraction_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-detail"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-detail" names="class_basematerial3d_constant_feature_detail"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_DETAIL</strong> = <literal>11</literal></paragraph>
            <paragraph>用于设置 <reference internal="True" refid="class-basematerial3d-property-detail-enabled"><inline classes="std std-ref">detail_enabled</inline></reference> 的常量。</paragraph>
            <target refid="class-basematerial3d-constant-feature-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-feature-max" names="class_basematerial3d_constant_feature_max"><reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> <strong>FEATURE_MAX</strong> = <literal>12</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-blendmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-blendmode" names="enum_basematerial3d_blendmode">enum <strong>BlendMode</strong>: <reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-blend-mode-mix"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-blend-mode-mix" names="class_basematerial3d_constant_blend_mode_mix"><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_MIX</strong> = <literal>0</literal></paragraph>
            <paragraph>默认的混合模式。根据对象的 Alpha 值，将对象的颜色混合到背景上。</paragraph>
            <target refid="class-basematerial3d-constant-blend-mode-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-blend-mode-add" names="class_basematerial3d_constant_blend_mode_add"><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_ADD</strong> = <literal>1</literal></paragraph>
            <paragraph>对象的颜色被加到背景中。</paragraph>
            <target refid="class-basematerial3d-constant-blend-mode-sub"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-blend-mode-sub" names="class_basematerial3d_constant_blend_mode_sub"><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_SUB</strong> = <literal>2</literal></paragraph>
            <paragraph>从背景中减去对象的颜色。</paragraph>
            <target refid="class-basematerial3d-constant-blend-mode-mul"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-blend-mode-mul" names="class_basematerial3d_constant_blend_mode_mul"><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_MUL</strong> = <literal>3</literal></paragraph>
            <paragraph>对象的颜色与背景相乘。</paragraph>
            <target refid="class-basematerial3d-constant-blend-mode-premult-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-blend-mode-premult-alpha" names="class_basematerial3d_constant_blend_mode_premult_alpha"><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>BLEND_MODE_PREMULT_ALPHA</strong> = <literal>4</literal></paragraph>
            <paragraph>对象的颜色被添加到背景中，而 alpha 通道用于遮盖背景。这实际上是混合模式和添加模式的混合，对于类似希望添加火焰但混合烟雾的火焰效果很有用。默认情况下，这适用于使用预乘纹理的未着色材质。对于着色材质，请使用内置的 <literal>PREMUL_ALPHA_FACTOR</literal>，以便也可以调节照明。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-alphaantialiasing"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-alphaantialiasing" names="enum_basematerial3d_alphaantialiasing">enum <strong>AlphaAntiAliasing</strong>: <reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-alpha-antialiasing-off"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-alpha-antialiasing-off" names="class_basematerial3d_constant_alpha_antialiasing_off"><reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>ALPHA_ANTIALIASING_OFF</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用该材质的 Alpha 抗锯齿。</paragraph>
            <target refid="class-basematerial3d-constant-alpha-antialiasing-alpha-to-coverage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-alpha-antialiasing-alpha-to-coverage" names="class_basematerial3d_constant_alpha_antialiasing_alpha_to_coverage"><reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE</strong> = <literal>1</literal></paragraph>
            <paragraph>启用 AlphaToCoverage。材质中的 Alpha 值会被传递到 AntiAliasing 采样遮罩。</paragraph>
            <target refid="class-basematerial3d-constant-alpha-antialiasing-alpha-to-coverage-and-to-one"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-alpha-antialiasing-alpha-to-coverage-and-to-one" names="class_basematerial3d_constant_alpha_antialiasing_alpha_to_coverage_and_to_one"><reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE_AND_TO_ONE</strong> = <literal>2</literal></paragraph>
            <paragraph>启用 AlphaToCoverage 并将所有非零的 alpha 值强制设为 <literal>1</literal>。材质中的 Alpha 值会被传递到 AntiAliasing 采样遮罩。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-depthdrawmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-depthdrawmode" names="enum_basematerial3d_depthdrawmode">enum <strong>DepthDrawMode</strong>: <reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-depth-draw-opaque-only"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-depth-draw-opaque-only" names="class_basematerial3d_constant_depth_draw_opaque_only"><reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference> <strong>DEPTH_DRAW_OPAQUE_ONLY</strong> = <literal>0</literal></paragraph>
            <paragraph>默认的深度绘制模式。在不透明预通道（如果有）和不透明通道期间，仅为不透明对象绘制深度。</paragraph>
            <target refid="class-basematerial3d-constant-depth-draw-always"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-depth-draw-always" names="class_basematerial3d_constant_depth_draw_always"><reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference> <strong>DEPTH_DRAW_ALWAYS</strong> = <literal>1</literal></paragraph>
            <paragraph>在不透明和透明通道期间，对象将写入深度。靠近相机的透明物体可能会遮挡它们后面的其他透明物体。</paragraph>
            <paragraph><strong>注意：</strong>这不影响透明对象是否包含在深度预通道中。为此，请参阅 <reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference>。</paragraph>
            <target refid="class-basematerial3d-constant-depth-draw-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-depth-draw-disabled" names="class_basematerial3d_constant_depth_draw_disabled"><reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference> <strong>DEPTH_DRAW_DISABLED</strong> = <literal>2</literal></paragraph>
            <paragraph>对象不会将其深度写入深度缓冲区，即使在深度预通道期间（如果启用）也是如此。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-cullmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-cullmode" names="enum_basematerial3d_cullmode">enum <strong>CullMode</strong>: <reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-cull-back"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-cull-back" names="class_basematerial3d_constant_cull_back"><reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference> <strong>CULL_BACK</strong> = <literal>0</literal></paragraph>
            <paragraph>默认剔除模式。对象的背面在不可见时被剔除。面对相机时，背面三角形将被剔除。这导致仅绘制三角形的正面。对于封闭表面网格，这意味着只有网格的外部可见。</paragraph>
            <target refid="class-basematerial3d-constant-cull-front"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-cull-front" names="class_basematerial3d_constant_cull_front"><reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference> <strong>CULL_FRONT</strong> = <literal>1</literal></paragraph>
            <paragraph>面对相机时，正面三角形将被剔除。这导致仅绘制三角形的背面。对于封闭表面网格，这意味着将绘制网格的内部而不是外部。</paragraph>
            <target refid="class-basematerial3d-constant-cull-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-cull-disabled" names="class_basematerial3d_constant_cull_disabled"><reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference> <strong>CULL_DISABLED</strong> = <literal>2</literal></paragraph>
            <paragraph>不执行面剔除；正反面均可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-flags"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-flags" names="enum_basematerial3d_flags">enum <strong>Flags</strong>: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-flag-disable-depth-test"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-disable-depth-test" names="class_basematerial3d_constant_flag_disable_depth_test"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_DISABLE_DEPTH_TEST</strong> = <literal>0</literal></paragraph>
            <paragraph>禁用深度测试，所以这个对象将被绘制到在它之前绘制的所有其他对象之上。这会将对象置于透明绘制通道中，并根据到相机的距离对其进行排序。按照绘制顺序在它之后绘制的对象可能会覆盖它。会禁用深度写入。</paragraph>
            <target refid="class-basematerial3d-constant-flag-albedo-from-vertex-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-albedo-from-vertex-color" names="class_basematerial3d_constant_flag_albedo_from_vertex_color"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_ALBEDO_FROM_VERTEX_COLOR</strong> = <literal>1</literal></paragraph>
            <paragraph>将 <literal>ALBEDO</literal> 设置为网格中指定的每顶点颜色。</paragraph>
            <target refid="class-basematerial3d-constant-flag-srgb-vertex-color"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-srgb-vertex-color" names="class_basematerial3d_constant_flag_srgb_vertex_color"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_SRGB_VERTEX_COLOR</strong> = <literal>2</literal></paragraph>
            <paragraph>顶点颜色被认为使用 sRGB 颜色空间存储，并在渲染期间转换为线性颜色空间。另见 <reference internal="True" refid="class-basematerial3d-property-vertex-color-is-srgb"><inline classes="std std-ref">vertex_color_is_srgb</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>仅在使用 Forward+ 和移动渲染方式时有效。</paragraph>
            <target refid="class-basematerial3d-constant-flag-use-point-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-use-point-size" names="class_basematerial3d_constant_flag_use_point_size"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_USE_POINT_SIZE</strong> = <literal>3</literal></paragraph>
            <paragraph>使用点大小来改变图元点的大小。同时改变反射率纹理查找，使用 <literal>POINT_COORD</literal> 而不是 <literal>UV</literal>。</paragraph>
            <target refid="class-basematerial3d-constant-flag-fixed-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-fixed-size" names="class_basematerial3d_constant_flag_fixed_size"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_FIXED_SIZE</strong> = <literal>4</literal></paragraph>
            <paragraph>按深度缩放对象，使其在屏幕上显示的大小始终相同。</paragraph>
            <target refid="class-basematerial3d-constant-flag-billboard-keep-scale"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-billboard-keep-scale" names="class_basematerial3d_constant_flag_billboard_keep_scale"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_BILLBOARD_KEEP_SCALE</strong> = <literal>5</literal></paragraph>
            <paragraph>着色器将保持网格的缩放设置。否则，在用作公告板时会丢失缩放。仅在 <reference internal="True" refid="class-basematerial3d-property-billboard-mode"><inline classes="std std-ref">billboard_mode</inline></reference> 为 <reference internal="True" refid="class-basematerial3d-constant-billboard-enabled"><inline classes="std std-ref">BILLBOARD_ENABLED</inline></reference> 时适用。</paragraph>
            <target refid="class-basematerial3d-constant-flag-uv1-use-triplanar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-uv1-use-triplanar" names="class_basematerial3d_constant_flag_uv1_use_triplanar"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_UV1_USE_TRIPLANAR</strong> = <literal>6</literal></paragraph>
            <paragraph>对所有通常会使用 <literal>UV</literal> 的纹理查找使用三平面纹理查找。</paragraph>
            <target refid="class-basematerial3d-constant-flag-uv2-use-triplanar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-uv2-use-triplanar" names="class_basematerial3d_constant_flag_uv2_use_triplanar"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_UV2_USE_TRIPLANAR</strong> = <literal>7</literal></paragraph>
            <paragraph>对所有通常会使用 <literal>UV2</literal> 的纹理查找使用三平面纹理查找。</paragraph>
            <target refid="class-basematerial3d-constant-flag-uv1-use-world-triplanar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-uv1-use-world-triplanar" names="class_basematerial3d_constant_flag_uv1_use_world_triplanar"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_UV1_USE_WORLD_TRIPLANAR</strong> = <literal>8</literal></paragraph>
            <paragraph>对所有通常会使用 <literal>UV</literal> 的纹理查找使用三平面纹理查找。</paragraph>
            <target refid="class-basematerial3d-constant-flag-uv2-use-world-triplanar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-uv2-use-world-triplanar" names="class_basematerial3d_constant_flag_uv2_use_world_triplanar"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_UV2_USE_WORLD_TRIPLANAR</strong> = <literal>9</literal></paragraph>
            <paragraph>对所有通常会使用 <literal>UV2</literal> 的纹理查找使用三平面纹理查找。</paragraph>
            <target refid="class-basematerial3d-constant-flag-ao-on-uv2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-ao-on-uv2" names="class_basematerial3d_constant_flag_ao_on_uv2"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_AO_ON_UV2</strong> = <literal>10</literal></paragraph>
            <paragraph>使用 <literal>UV2</literal> 坐标从 <reference internal="True" refid="class-basematerial3d-property-ao-texture"><inline classes="std std-ref">ao_texture</inline></reference> 中查找。</paragraph>
            <target refid="class-basematerial3d-constant-flag-emission-on-uv2"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-emission-on-uv2" names="class_basematerial3d_constant_flag_emission_on_uv2"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_EMISSION_ON_UV2</strong> = <literal>11</literal></paragraph>
            <paragraph>使用 <literal>UV2</literal> 坐标从 <reference internal="True" refid="class-basematerial3d-property-emission-texture"><inline classes="std std-ref">emission_texture</inline></reference> 中查找。</paragraph>
            <target refid="class-basematerial3d-constant-flag-albedo-texture-force-srgb"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-albedo-texture-force-srgb" names="class_basematerial3d_constant_flag_albedo_texture_force_srgb"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_ALBEDO_TEXTURE_FORCE_SRGB</strong> = <literal>12</literal></paragraph>
            <paragraph>强制着色器将反照率从 sRGB 空间转换为线性空间。另见 <reference internal="True" refid="class-basematerial3d-property-albedo-texture-force-srgb"><inline classes="std std-ref">albedo_texture_force_srgb</inline></reference>。</paragraph>
            <target refid="class-basematerial3d-constant-flag-dont-receive-shadows"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-dont-receive-shadows" names="class_basematerial3d_constant_flag_dont_receive_shadows"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_DONT_RECEIVE_SHADOWS</strong> = <literal>13</literal></paragraph>
            <paragraph>禁用从其他对象接收阴影。</paragraph>
            <target refid="class-basematerial3d-constant-flag-disable-ambient-light"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-disable-ambient-light" names="class_basematerial3d_constant_flag_disable_ambient_light"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_DISABLE_AMBIENT_LIGHT</strong> = <literal>14</literal></paragraph>
            <paragraph>禁用接收环境光。</paragraph>
            <target refid="class-basematerial3d-constant-flag-use-shadow-to-opacity"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-use-shadow-to-opacity" names="class_basematerial3d_constant_flag_use_shadow_to_opacity"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_USE_SHADOW_TO_OPACITY</strong> = <literal>15</literal></paragraph>
            <paragraph>启用阴影到不透明度功能。</paragraph>
            <target refid="class-basematerial3d-constant-flag-use-texture-repeat"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-use-texture-repeat" names="class_basematerial3d_constant_flag_use_texture_repeat"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_USE_TEXTURE_REPEAT</strong> = <literal>16</literal></paragraph>
            <paragraph>当 UV 坐标超出 0-1 范围时，使纹理能够重复。如果使用其中一种线性过滤模式，则当采样器过滤纹理边缘时，这可能会导致纹理边缘出现伪影。</paragraph>
            <target refid="class-basematerial3d-constant-flag-invert-heightmap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-invert-heightmap" names="class_basematerial3d_constant_flag_invert_heightmap"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_INVERT_HEIGHTMAP</strong> = <literal>17</literal></paragraph>
            <paragraph>反转从深度纹理读取的值以将它们转换为高度值（高度图）。</paragraph>
            <target refid="class-basematerial3d-constant-flag-subsurface-mode-skin"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-subsurface-mode-skin" names="class_basematerial3d_constant_flag_subsurface_mode_skin"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_SUBSURFACE_MODE_SKIN</strong> = <literal>18</literal></paragraph>
            <paragraph>启用用于次表面散射的皮肤模式，该模式用于改善被用于人体皮肤时的次表面散射的外观。</paragraph>
            <target refid="class-basematerial3d-constant-flag-particle-trails-mode"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-particle-trails-mode" names="class_basematerial3d_constant_flag_particle_trails_mode"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_PARTICLE_TRAILS_MODE</strong> = <literal>19</literal></paragraph>
            <paragraph>启用使 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference> 尾迹生效所需的部分着色器。这也需要使用具有适当蒙皮的网格，例如 <reference internal="True" refuri="class_ribbontrailmesh#class-ribbontrailmesh"><inline classes="std std-ref">RibbonTrailMesh</inline></reference> 或 <reference internal="True" refuri="class_tubetrailmesh#class-tubetrailmesh"><inline classes="std std-ref">TubeTrailMesh</inline></reference>。在 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference> 网格中使用的材质之外启用该功能将破坏材质的渲染。</paragraph>
            <target refid="class-basematerial3d-constant-flag-albedo-texture-msdf"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-albedo-texture-msdf" names="class_basematerial3d_constant_flag_albedo_texture_msdf"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_ALBEDO_TEXTURE_MSDF</strong> = <literal>20</literal></paragraph>
            <paragraph>启用多通道有符号距离场渲染着色器。</paragraph>
            <target refid="class-basematerial3d-constant-flag-disable-fog"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-disable-fog" names="class_basematerial3d_constant_flag_disable_fog"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_DISABLE_FOG</strong> = <literal>21</literal></paragraph>
            <paragraph>禁用接收基于深度或体积雾。</paragraph>
            <target refid="class-basematerial3d-constant-flag-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-flag-max" names="class_basematerial3d_constant_flag_max"><reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> <strong>FLAG_MAX</strong> = <literal>22</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-diffusemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-diffusemode" names="enum_basematerial3d_diffusemode">enum <strong>DiffuseMode</strong>: <reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-diffuse-burley"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-diffuse-burley" names="class_basematerial3d_constant_diffuse_burley"><reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference> <strong>DIFFUSE_BURLEY</strong> = <literal>0</literal></paragraph>
            <paragraph>默认的漫反射散射算法。</paragraph>
            <target refid="class-basematerial3d-constant-diffuse-lambert"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-diffuse-lambert" names="class_basematerial3d_constant_diffuse_lambert"><reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference> <strong>DIFFUSE_LAMBERT</strong> = <literal>1</literal></paragraph>
            <paragraph>漫散射忽略了粗糙度。</paragraph>
            <target refid="class-basematerial3d-constant-diffuse-lambert-wrap"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-diffuse-lambert-wrap" names="class_basematerial3d_constant_diffuse_lambert_wrap"><reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference> <strong>DIFFUSE_LAMBERT_WRAP</strong> = <literal>2</literal></paragraph>
            <paragraph>当粗糙度增加时，将 Lambert 延伸到 90 度以上。</paragraph>
            <target refid="class-basematerial3d-constant-diffuse-toon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-diffuse-toon" names="class_basematerial3d_constant_diffuse_toon"><reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference> <strong>DIFFUSE_TOON</strong> = <literal>3</literal></paragraph>
            <paragraph>使用硬切口进行照明，平滑度受粗糙度影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-specularmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-specularmode" names="enum_basematerial3d_specularmode">enum <strong>SpecularMode</strong>: <reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-specular-schlick-ggx"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-specular-schlick-ggx" names="class_basematerial3d_constant_specular_schlick_ggx"><reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference> <strong>SPECULAR_SCHLICK_GGX</strong> = <literal>0</literal></paragraph>
            <paragraph>默认镜面反射斑点。</paragraph>
            <target refid="class-basematerial3d-constant-specular-toon"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-specular-toon" names="class_basematerial3d_constant_specular_toon"><reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference> <strong>SPECULAR_TOON</strong> = <literal>1</literal></paragraph>
            <paragraph>基于粗糙度更改大小的 Toon 斑点。</paragraph>
            <target refid="class-basematerial3d-constant-specular-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-specular-disabled" names="class_basematerial3d_constant_specular_disabled"><reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference> <strong>SPECULAR_DISABLED</strong> = <literal>2</literal></paragraph>
            <paragraph>没有镜面反射斑点。这比其他镜面反射模式渲染速度稍快。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-billboardmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-billboardmode" names="enum_basematerial3d_billboardmode">enum <strong>BillboardMode</strong>: <reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-billboard-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-billboard-disabled" names="class_basematerial3d_constant_billboard_disabled"><reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>BILLBOARD_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>公告板模式已禁用。</paragraph>
            <target refid="class-basematerial3d-constant-billboard-enabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-billboard-enabled" names="class_basematerial3d_constant_billboard_enabled"><reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>BILLBOARD_ENABLED</strong> = <literal>1</literal></paragraph>
            <paragraph>对象的 Z 轴将始终面向相机。</paragraph>
            <target refid="class-basematerial3d-constant-billboard-fixed-y"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-billboard-fixed-y" names="class_basematerial3d_constant_billboard_fixed_y"><reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>BILLBOARD_FIXED_Y</strong> = <literal>2</literal></paragraph>
            <paragraph>对象的 X 轴将始终面向相机。</paragraph>
            <target refid="class-basematerial3d-constant-billboard-particles"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-billboard-particles" names="class_basematerial3d_constant_billboard_particles"><reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>BILLBOARD_PARTICLES</strong> = <literal>3</literal></paragraph>
            <paragraph>分配给 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference> 和 <reference internal="True" refuri="class_cpuparticles3d#class-cpuparticles3d"><inline classes="std std-ref">CPUParticles3D</inline></reference> 节点时被用于粒子系统（翻页动画）。启用 <literal>particles_anim_*</literal> 属性。</paragraph>
            <paragraph><reference internal="True" refuri="class_particleprocessmaterial#class-particleprocessmaterial-property-anim-speed-min"><inline classes="std std-ref">ParticleProcessMaterial.anim_speed_min</inline></reference> 或 <reference internal="True" refuri="class_cpuparticles3d#class-cpuparticles3d-property-anim-speed-min"><inline classes="std std-ref">CPUParticles3D.anim_speed_min</inline></reference> 也应设置为大于零的值，以便播放动画。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-texturechannel"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-texturechannel" names="enum_basematerial3d_texturechannel">enum <strong>TextureChannel</strong>: <reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-texture-channel-red"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-channel-red" names="class_basematerial3d_constant_texture_channel_red"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>TEXTURE_CHANNEL_RED</strong> = <literal>0</literal></paragraph>
            <paragraph>用来读取纹理的红色通道。</paragraph>
            <target refid="class-basematerial3d-constant-texture-channel-green"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-channel-green" names="class_basematerial3d_constant_texture_channel_green"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>TEXTURE_CHANNEL_GREEN</strong> = <literal>1</literal></paragraph>
            <paragraph>用来读取纹理的绿色通道。</paragraph>
            <target refid="class-basematerial3d-constant-texture-channel-blue"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-channel-blue" names="class_basematerial3d_constant_texture_channel_blue"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>TEXTURE_CHANNEL_BLUE</strong> = <literal>2</literal></paragraph>
            <paragraph>用来读取纹理的蓝色通道。</paragraph>
            <target refid="class-basematerial3d-constant-texture-channel-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-channel-alpha" names="class_basematerial3d_constant_texture_channel_alpha"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>TEXTURE_CHANNEL_ALPHA</strong> = <literal>3</literal></paragraph>
            <paragraph>用来读取纹理的 Alpha 通道。</paragraph>
            <target refid="class-basematerial3d-constant-texture-channel-grayscale"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-texture-channel-grayscale" names="class_basematerial3d_constant_texture_channel_grayscale"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>TEXTURE_CHANNEL_GRAYSCALE</strong> = <literal>4</literal></paragraph>
            <paragraph>用于读取纹理的红色、绿色和蓝色通道的线性（非感知）平均值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-emissionoperator"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-emissionoperator" names="enum_basematerial3d_emissionoperator">enum <strong>EmissionOperator</strong>: <reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-emission-op-add"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-emission-op-add" names="class_basematerial3d_constant_emission_op_add"><reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">EmissionOperator</inline></reference> <strong>EMISSION_OP_ADD</strong> = <literal>0</literal></paragraph>
            <paragraph>将自发光颜色加到自发光纹理的颜色上。</paragraph>
            <target refid="class-basematerial3d-constant-emission-op-multiply"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-emission-op-multiply" names="class_basematerial3d_constant_emission_op_multiply"><reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">EmissionOperator</inline></reference> <strong>EMISSION_OP_MULTIPLY</strong> = <literal>1</literal></paragraph>
            <paragraph>将自发光颜色乘以自发光纹理的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-basematerial3d-distancefademode"></target>
            <paragraph classes="classref-enumeration" ids="enum-basematerial3d-distancefademode" names="enum_basematerial3d_distancefademode">enum <strong>DistanceFadeMode</strong>: <reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-basematerial3d-constant-distance-fade-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-distance-fade-disabled" names="class_basematerial3d_constant_distance_fade_disabled"><reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference> <strong>DISTANCE_FADE_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>不使用距离淡化。</paragraph>
            <target refid="class-basematerial3d-constant-distance-fade-pixel-alpha"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-distance-fade-pixel-alpha" names="class_basematerial3d_constant_distance_fade_pixel_alpha"><reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference> <strong>DISTANCE_FADE_PIXEL_ALPHA</strong> = <literal>1</literal></paragraph>
            <paragraph>根据每个像素与相机的距离，使用 Alpha 通道平滑地淡出对象。</paragraph>
            <target refid="class-basematerial3d-constant-distance-fade-pixel-dither"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-distance-fade-pixel-dither" names="class_basematerial3d_constant_distance_fade_pixel_dither"><reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference> <strong>DISTANCE_FADE_PIXEL_DITHER</strong> = <literal>2</literal></paragraph>
            <paragraph>根据每个像素与相机的距离，使用一种抖动方法平滑地淡出对象。抖动会根据设定的模式丢弃像素，在不启用透明的情况下平滑淡化。在某些硬件上，该选项可能比 <reference internal="True" refid="class-basematerial3d-constant-distance-fade-pixel-alpha"><inline classes="std std-ref">DISTANCE_FADE_PIXEL_ALPHA</inline></reference> 更快。</paragraph>
            <target refid="class-basematerial3d-constant-distance-fade-object-dither"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-basematerial3d-constant-distance-fade-object-dither" names="class_basematerial3d_constant_distance_fade_object_dither"><reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference> <strong>DISTANCE_FADE_OBJECT_DITHER</strong> = <literal>3</literal></paragraph>
            <paragraph>根据对象与相机的距离，使用一种抖动方法平滑淡出对象。抖动根据设定的模式丢弃像素，在不启用透明的情况下平滑淡化。在某些硬件上，该选项可能比 <reference internal="True" refid="class-basematerial3d-constant-distance-fade-pixel-alpha"><inline classes="std std-ref">DISTANCE_FADE_PIXEL_ALPHA</inline></reference> 和 <reference internal="True" refid="class-basematerial3d-constant-distance-fade-pixel-dither"><inline classes="std std-ref">DISTANCE_FADE_PIXEL_DITHER</inline></reference> 更快。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-basematerial3d-property-albedo-color"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-albedo-color" names="class_basematerial3d_property_albedo_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>albedo_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-basematerial3d-property-albedo-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_albedo</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_albedo</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>材质的基础颜色。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-basematerial3d-property-detail-enabled"><inline classes="std std-ref">detail_enabled</inline></reference> 为 <literal>true</literal> 并且指定了 <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 纹理，则 <reference internal="True" refid="class-basematerial3d-property-albedo-color"><inline classes="std std-ref">albedo_color</inline></reference> <emphasis>不会</emphasis>调制细节纹理。可用于通过不指定反照率纹理并使用透明 <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 纹理，来为材质的部分区域着色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-albedo-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-albedo-texture" names="class_basematerial3d_property_albedo_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>albedo_texture</strong> <reference internal="True" refid="class-basematerial3d-property-albedo-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要乘以 <reference internal="True" refid="class-basematerial3d-property-albedo-color"><inline classes="std std-ref">albedo_color</inline></reference> 的纹理。用于对象的基本纹理。</paragraph>
            <paragraph>如果纹理意外地显得太暗或太亮，请检查 <reference internal="True" refid="class-basematerial3d-property-albedo-texture-force-srgb"><inline classes="std std-ref">albedo_texture_force_srgb</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-albedo-texture-force-srgb"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-albedo-texture-force-srgb" names="class_basematerial3d_property_albedo_texture_force_srgb"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>albedo_texture_force_srgb</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-albedo-texture-force-srgb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则强制将 <reference internal="True" refid="class-basematerial3d-property-albedo-texture"><inline classes="std std-ref">albedo_texture</inline></reference> 从 sRGB 颜色空间转换为线性颜色空间。另见 <reference internal="True" refid="class-basematerial3d-property-vertex-color-is-srgb"><inline classes="std std-ref">vertex_color_is_srgb</inline></reference>。</paragraph>
            <paragraph>该属性应该只在需要时启用（通常在使用 <reference internal="True" refuri="class_viewporttexture#class-viewporttexture"><inline classes="std std-ref">ViewportTexture</inline></reference> 作为 <reference internal="True" refid="class-basematerial3d-property-albedo-texture"><inline classes="std std-ref">albedo_texture</inline></reference> 时）。如果 <reference internal="True" refid="class-basematerial3d-property-albedo-texture-force-srgb"><inline classes="std std-ref">albedo_texture_force_srgb</inline></reference> 在不应该的情况下为 <literal>true</literal>，则纹理会显得太暗。如果 <reference internal="True" refid="class-basematerial3d-property-albedo-texture-force-srgb"><inline classes="std std-ref">albedo_texture_force_srgb</inline></reference> 在不应该的情况下为 <literal>false</literal>，则纹理会显得太亮。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-albedo-texture-msdf"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-albedo-texture-msdf" names="class_basematerial3d_property_albedo_texture_msdf"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>albedo_texture_msdf</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-albedo-texture-msdf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>启用多通道有符号距离场渲染着色器。使用 <reference internal="True" refid="class-basematerial3d-property-msdf-pixel-range"><inline classes="std std-ref">msdf_pixel_range</inline></reference> 和 <reference internal="True" refid="class-basematerial3d-property-msdf-outline-size"><inline classes="std std-ref">msdf_outline_size</inline></reference> 配置 MSDF 参数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-alpha-antialiasing-edge"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-alpha-antialiasing-edge" names="class_basematerial3d_property_alpha_antialiasing_edge"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_antialiasing_edge</strong> <reference internal="True" refid="class-basematerial3d-property-alpha-antialiasing-edge"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_antialiasing_edge</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_antialiasing_edge</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将在 Alpha 通道上应用抗锯齿的阈值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-alpha-antialiasing-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-alpha-antialiasing-mode" names="class_basematerial3d_property_alpha_antialiasing_mode"><reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>alpha_antialiasing_mode</strong> <reference internal="True" refid="class-basematerial3d-property-alpha-antialiasing-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_antialiasing</strong>(value: <reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>get_alpha_antialiasing</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要应用的 Alpha 抗锯齿类型。见 <reference internal="True" refid="enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-alpha-hash-scale"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-alpha-hash-scale" names="class_basematerial3d_property_alpha_hash_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_hash_scale</strong> <reference internal="True" refid="class-basematerial3d-property-alpha-hash-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_hash_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_hash_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Alpha Hash 的哈希比例。推荐 <literal>0</literal> 和 <literal>2</literal> 之间的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-alpha-scissor-threshold"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-alpha-scissor-threshold" names="class_basematerial3d_property_alpha_scissor_threshold"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_scissor_threshold</strong> <reference internal="True" refid="class-basematerial3d-property-alpha-scissor-threshold"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_scissor_threshold</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_scissor_threshold</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Alpha 剪刀将丢弃值的阈值。较高的值将导致更多像素被丢弃。如果材质在远处变得太不透明，请尝试增加 <reference internal="True" refid="class-basematerial3d-property-alpha-scissor-threshold"><inline classes="std std-ref">alpha_scissor_threshold</inline></reference>。如果材质在远处消失，请尝试降低 <reference internal="True" refid="class-basematerial3d-property-alpha-scissor-threshold"><inline classes="std std-ref">alpha_scissor_threshold</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-anisotropy"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-anisotropy" names="class_basematerial3d_property_anisotropy"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>anisotropy</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-anisotropy"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_anisotropy</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_anisotropy</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>各向异性效果的强度。如果 <reference internal="True" refid="class-basematerial3d-property-anisotropy-flowmap"><inline classes="std std-ref">anisotropy_flowmap</inline></reference> 是一张带有 Alpha 通道的纹理，那么这个值会与其 Alpha 通道相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-anisotropy-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-anisotropy-enabled" names="class_basematerial3d_property_anisotropy_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>anisotropy_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-anisotropy-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用各向异性。各向异性会改变镜面反射斑点的形状并将其与切线空间对齐。可用于拉丝铝材和毛发反射。</paragraph>
            <paragraph><strong>注意：</strong>各向异性需要网格切线才能正常工作。如果网格中不包含切线，则各向异性效果会显得破碎。</paragraph>
            <paragraph><strong>注意：</strong>材质的各向异性不应与各向异性纹理过滤相混淆，后者可以通过将 <reference internal="True" refid="class-basematerial3d-property-texture-filter"><inline classes="std std-ref">texture_filter</inline></reference> 设置为 <reference internal="True" refid="class-basematerial3d-constant-texture-filter-linear-with-mipmaps-anisotropic"><inline classes="std std-ref">TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC</inline></reference> 来启用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-anisotropy-flowmap"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-anisotropy-flowmap" names="class_basematerial3d_property_anisotropy_flowmap"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>anisotropy_flowmap</strong> <reference internal="True" refid="class-basematerial3d-property-anisotropy-flowmap"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于对切线图进行偏移的纹理，用于各向异性的计算，（如果存在 Alpha 通道）还可以控制各向异性的效果。Flowmap 方向图纹理应该是一张派生图，红色通道表示 X 轴上的变形、绿色通道表示 Y 轴上的变形。小于 0.5 的值会朝负方向进行变形，而大于 0.5 的值则朝正方向变形。</paragraph>
            <paragraph>纹理的 Alpha 通道如果存在，则会用于与 <reference internal="True" refid="class-basematerial3d-property-anisotropy"><inline classes="std std-ref">anisotropy</inline></reference> 效果的强度相乘。完全不透明的像素会保持原始强度，而完全透明的像素则会完全禁用各向异性效果。方向图纹理的蓝色通道会被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-ao-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-ao-enabled" names="class_basematerial3d_property_ao_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>ao_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-ao-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，启用环境遮挡。环境遮挡根据 <reference internal="True" refid="class-basematerial3d-property-ao-texture"><inline classes="std std-ref">ao_texture</inline></reference> 使区域变暗。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-ao-light-affect"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-ao-light-affect" names="class_basematerial3d_property_ao_light_affect"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>ao_light_affect</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-ao-light-affect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ao_light_affect</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_ao_light_affect</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>环境遮挡对灯光照明的影响程度。如果 <literal>0</literal>，环境遮挡只影响环境光。如果 <literal>1</literal>，环境遮挡对灯光的影响和对环境光的影响一样大。这可以用来影响环境遮挡效果的强度，但通常看起来不真实。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-ao-on-uv2"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-ao-on-uv2" names="class_basematerial3d_property_ao_on_uv2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>ao_on_uv2</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-ao-on-uv2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，请使用 <literal>UV2</literal> 坐标从 <reference internal="True" refid="class-basematerial3d-property-ao-texture"><inline classes="std std-ref">ao_texture</inline></reference> 中查找。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-ao-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-ao-texture" names="class_basematerial3d_property_ao_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>ao_texture</strong> <reference internal="True" refid="class-basematerial3d-property-ao-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义物体上给定点的环境遮挡量的纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-ao-texture-channel"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-ao-texture-channel" names="class_basematerial3d_property_ao_texture_channel"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>ao_texture_channel</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-ao-texture-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_ao_texture_channel</strong>(value: <reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>get_ao_texture_channel</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定 <reference internal="True" refid="class-basematerial3d-property-ao-texture"><inline classes="std std-ref">ao_texture</inline></reference> 的通道，其中存储环境遮挡信息。可以用来在一个纹理中存储多个效果的信息。例如，如果你将金属效果存储在 R 通道中，将粗糙度存储在 B 通道中，将环境遮挡存储在 G 通道中，就可以减少你使用的纹理数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-backlight"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-backlight" names="class_basematerial3d_property_backlight"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>backlight</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-basematerial3d-property-backlight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_backlight</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_backlight</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>背光效果使用的颜色。表示穿过物体的光。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-backlight-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-backlight-enabled" names="class_basematerial3d_property_backlight_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>backlight_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-backlight-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用背光效果。另请参阅 <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-enabled"><inline classes="std std-ref">subsurf_scatter_transmittance_enabled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-backlight-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-backlight-texture" names="class_basematerial3d_property_backlight_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>backlight_texture</strong> <reference internal="True" refid="class-basematerial3d-property-backlight-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于控制每像素背光效果的纹理。与 <reference internal="True" refid="class-basematerial3d-property-backlight"><inline classes="std std-ref">backlight</inline></reference> 相加。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-billboard-keep-scale"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-billboard-keep-scale" names="class_basematerial3d_property_billboard_keep_scale"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>billboard_keep_scale</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-billboard-keep-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则着色器将保持为网格设置的缩放。否则，在做公告板时会丢失缩放。仅在 <reference internal="True" refid="class-basematerial3d-property-billboard-mode"><inline classes="std std-ref">billboard_mode</inline></reference> 不为 <reference internal="True" refid="class-basematerial3d-constant-billboard-disabled"><inline classes="std std-ref">BILLBOARD_DISABLED</inline></reference> 时适用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-billboard-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-billboard-mode" names="class_basematerial3d_property_billboard_mode"><reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>billboard_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-billboard-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_billboard_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>get_billboard_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制该对象如何面对相机。见 <reference internal="True" refid="enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>当启用公告板并且材质也投射阴影时，渲染阴影时公告板将面向场景中的<strong>这个</strong>相机。在具有多个相机的场景中，无法确定预期的阴影，这将导致未定义的行为。有关详细信息，请参阅 <reference name="GitHub 拉取请求 #72638" refuri="https://github.com/godotengine/godot/pull/72638">GitHub 拉取请求 #72638</reference>。</paragraph>
            <paragraph><strong>注意：</strong>公告板模式不适合 VR，因为当屏幕贴在你的头上而不是在桌子上时，相机的左右向量不是水平的。详见 <reference name="GitHub issue #41567" refuri="https://github.com/godotengine/godot/issues/41567">GitHub issue #41567</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-blend-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-blend-mode" names="class_basematerial3d_property_blend_mode"><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>blend_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-blend-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_blend_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>get_blend_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>材质的混合模式。</paragraph>
            <paragraph><strong>注意：</strong>除 <literal>Mix</literal> 以外的值会强制对象进入透明管道。见 <reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-clearcoat"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-clearcoat" names="class_basematerial3d_property_clearcoat"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>clearcoat</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-clearcoat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clearcoat</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_clearcoat</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置清漆效果的强度。设置为 <literal>0</literal> 看起来与禁用清漆效果相同。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-clearcoat-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-clearcoat-enabled" names="class_basematerial3d_property_clearcoat_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>clearcoat_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-clearcoat-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用清漆渲染。将辅助透明通道添加到照明计算中，从而产生一个添加的镜面反射斑点。这使得材质看起来好像它们表面上有一层透明层，该透明层可以是有光泽的也可以是粗糙的。</paragraph>
            <paragraph><strong>注意：</strong>如果材质的 <reference internal="True" refid="class-basematerial3d-property-shading-mode"><inline classes="std std-ref">shading_mode</inline></reference> 为 <reference internal="True" refid="class-basematerial3d-constant-shading-mode-unshaded"><inline classes="std std-ref">SHADING_MODE_UNSHADED</inline></reference>，则清漆渲染不可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-clearcoat-roughness"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-clearcoat-roughness" names="class_basematerial3d_property_clearcoat_roughness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>clearcoat_roughness</strong> = <literal>0.5</literal> <reference internal="True" refid="class-basematerial3d-property-clearcoat-roughness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_clearcoat_roughness</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_clearcoat_roughness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置清漆通道的粗糙度。较高的值会产生较粗糙的清漆，而较低的值会产生更光滑的清漆。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-clearcoat-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-clearcoat-texture" names="class_basematerial3d_property_clearcoat_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>clearcoat_texture</strong> <reference internal="True" refid="class-basematerial3d-property-clearcoat-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义清漆效果的强度和清漆的光泽度的纹理。强度在红色通道中指定，光泽度在绿色通道中指定。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-cull-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-cull-mode" names="class_basematerial3d_property_cull_mode"><reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference> <strong>cull_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-cull-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cull_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference> <strong>get_cull_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>根据三角形是朝向还是背离相机，来确定要剔除三角形的哪一侧。请参阅 <reference internal="True" refid="enum-basematerial3d-cullmode"><inline classes="std std-ref">CullMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-depth-draw-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-depth-draw-mode" names="class_basematerial3d_property_depth_draw_mode"><reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference> <strong>depth_draw_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-depth-draw-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_depth_draw_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference> <strong>get_depth_draw_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>确定深度渲染发生的时间。参见 <reference internal="True" refid="enum-basematerial3d-depthdrawmode"><inline classes="std std-ref">DepthDrawMode</inline></reference>。另见 <reference internal="True" refid="class-basematerial3d-property-transparency"><inline classes="std std-ref">transparency</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-detail-albedo"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-detail-albedo" names="class_basematerial3d_property_detail_albedo"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>detail_albedo</strong> <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于指定细节覆盖层颜色的纹理。<reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 的 alpha 通道会被用作遮罩，即使该材质不透明。要将专用纹理用作遮罩，请参阅 <reference internal="True" refid="class-basematerial3d-property-detail-mask"><inline classes="std std-ref">detail_mask</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> <emphasis>不会</emphasis>被 <reference internal="True" refid="class-basematerial3d-property-albedo-color"><inline classes="std std-ref">albedo_color</inline></reference> 调制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-detail-blend-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-detail-blend-mode" names="class_basematerial3d_property_detail_blend_mode"><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>detail_blend_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-detail-blend-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_detail_blend_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> <strong>get_detail_blend_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定 <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 应如何与当前 <literal>ALBEDO</literal> 混合。参阅 <reference internal="True" refid="enum-basematerial3d-blendmode"><inline classes="std std-ref">BlendMode</inline></reference> 选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-detail-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-detail-enabled" names="class_basematerial3d_property_detail_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>detail_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-detail-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，启用细节叠加。细节是基于 <reference internal="True" refid="class-basematerial3d-property-detail-mask"><inline classes="std std-ref">detail_mask</inline></reference> 和 <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 的 Alpha 通道，在对象表面上混合的第二个纹理。这可用于为对象添加变化，或混合两种不同的反照率/法线纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-detail-mask"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-detail-mask" names="class_basematerial3d_property_detail_mask"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>detail_mask</strong> <reference internal="True" refid="class-basematerial3d-property-detail-mask"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理用于指定细节纹理如何与基础纹理混合。<reference internal="True" refid="class-basematerial3d-property-detail-mask"><inline classes="std std-ref">detail_mask</inline></reference> 可以与 <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 的 Alpha 通道（如果有）一起使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-detail-normal"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-detail-normal" names="class_basematerial3d_property_detail_normal"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>detail_normal</strong> <reference internal="True" refid="class-basematerial3d-property-detail-normal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于指定细节覆盖层逐像素法线的纹理。<reference internal="True" refid="class-basematerial3d-property-detail-normal"><inline classes="std std-ref">detail_normal</inline></reference> 纹理只使用红色和绿色通道；会忽略蓝色和 alpha 通道。从 <reference internal="True" refid="class-basematerial3d-property-detail-normal"><inline classes="std std-ref">detail_normal</inline></reference> 读取的法线是围绕 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 所提供的表面法线的进行朝向的。</paragraph>
            <paragraph><strong>注意：</strong>Godot 期望法线贴图使用 X+、Y+、Z+ 坐标系。比较流行的引擎所期望的法线贴图坐标系见<reference name="这个页面" refuri="http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates">这个页面</reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-detail-uv-layer"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-detail-uv-layer" names="class_basematerial3d_property_detail_uv_layer"><reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">DetailUV</inline></reference> <strong>detail_uv_layer</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-detail-uv-layer"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_detail_uv</strong>(value: <reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">DetailUV</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">DetailUV</inline></reference> <strong>get_detail_uv</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定细节层是使用 <literal>UV</literal> 还是 <literal>UV2</literal>。选项请参阅 <reference internal="True" refid="enum-basematerial3d-detailuv"><inline classes="std std-ref">DetailUV</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-diffuse-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-diffuse-mode" names="class_basematerial3d_property_diffuse_mode"><reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference> <strong>diffuse_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-diffuse-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_diffuse_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference> <strong>get_diffuse_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于漫反射光散射的算法。见 <reference internal="True" refid="enum-basematerial3d-diffusemode"><inline classes="std std-ref">DiffuseMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-disable-ambient-light"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-disable-ambient-light" names="class_basematerial3d_property_disable_ambient_light"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>disable_ambient_light</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-disable-ambient-light"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则对象不接收环境光。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-disable-fog"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-disable-fog" names="class_basematerial3d_property_disable_fog"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>disable_fog</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-disable-fog"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则对象不会受到雾的影响（包括体积雾和深度雾）。可用于不着色材质和透明材质（例如例子），不开启时即便完全透明也会受到影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-disable-receive-shadows"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-disable-receive-shadows" names="class_basematerial3d_property_disable_receive_shadows"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>disable_receive_shadows</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-disable-receive-shadows"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则对象不会收到投射到其上的阴影。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-distance-fade-max-distance"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-distance-fade-max-distance" names="class_basematerial3d_property_distance_fade_max_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_fade_max_distance</strong> = <literal>10.0</literal> <reference internal="True" refid="class-basematerial3d-property-distance-fade-max-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_distance_fade_max_distance</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_distance_fade_max_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>物体看起来完全不透明的距离。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-basematerial3d-property-distance-fade-max-distance"><inline classes="std std-ref">distance_fade_max_distance</inline></reference> 小于 <reference internal="True" refid="class-basematerial3d-property-distance-fade-min-distance"><inline classes="std std-ref">distance_fade_min_distance</inline></reference>，则行为相反。物体将在 <reference internal="True" refid="class-basematerial3d-property-distance-fade-max-distance"><inline classes="std std-ref">distance_fade_max_distance</inline></reference> 处开始逐渐消失，并在到达 <reference internal="True" refid="class-basematerial3d-property-distance-fade-min-distance"><inline classes="std std-ref">distance_fade_min_distance</inline></reference> 时完全消失。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-distance-fade-min-distance"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-distance-fade-min-distance" names="class_basematerial3d_property_distance_fade_min_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>distance_fade_min_distance</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-distance-fade-min-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_distance_fade_min_distance</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_distance_fade_min_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>物体开始变得可见的距离。如果物体的距离小于这个距离，它将是不可见的。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-basematerial3d-property-distance-fade-min-distance"><inline classes="std std-ref">distance_fade_min_distance</inline></reference> 大于 <reference internal="True" refid="class-basematerial3d-property-distance-fade-max-distance"><inline classes="std std-ref">distance_fade_max_distance</inline></reference>，则行为将相反。物体将在 <reference internal="True" refid="class-basematerial3d-property-distance-fade-max-distance"><inline classes="std std-ref">distance_fade_max_distance</inline></reference> 处开始逐渐消失，并在到达 <reference internal="True" refid="class-basematerial3d-property-distance-fade-min-distance"><inline classes="std std-ref">distance_fade_min_distance</inline></reference> 时完全消失。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-distance-fade-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-distance-fade-mode" names="class_basematerial3d_property_distance_fade_mode"><reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference> <strong>distance_fade_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-distance-fade-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_distance_fade</strong>(value: <reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference> <strong>get_distance_fade</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定要使用的淡入淡出类型。可以是任何一个 <reference internal="True" refid="enum-basematerial3d-distancefademode"><inline classes="std std-ref">DistanceFadeMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-emission"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-emission" names="class_basematerial3d_property_emission"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>emission</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-basematerial3d-property-emission"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_emission</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_emission</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>发出的光的颜色。见 <reference internal="True" refid="class-basematerial3d-property-emission-enabled"><inline classes="std std-ref">emission_enabled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-emission-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-emission-enabled" names="class_basematerial3d_property_emission_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>emission_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-emission-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则实体会发光。发光会使物体看起来更亮。如果使用 <reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference>、SDFGI 或 <reference internal="True" refuri="class_lightmapgi#class-lightmapgi"><inline classes="std std-ref">LightmapGI</inline></reference>，并且该对象用于烘焙光照，则该对象还可以将光投射到其他对象上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-emission-energy-multiplier"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-emission-energy-multiplier" names="class_basematerial3d_property_emission_energy_multiplier"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>emission_energy_multiplier</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-emission-energy-multiplier"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_emission_energy_multiplier</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_emission_energy_multiplier</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>发出的光的乘数。请参阅 <reference internal="True" refid="class-basematerial3d-property-emission-enabled"><inline classes="std std-ref">emission_enabled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-emission-intensity"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-emission-intensity" names="class_basematerial3d_property_emission_intensity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>emission_intensity</strong> <reference internal="True" refid="class-basematerial3d-property-emission-intensity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_emission_intensity</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_emission_intensity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>发出的光的亮度，单位是尼特（坎德拉/平方米）。仅在启用 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-lights-and-shadows-use-physical-light-units"><inline classes="std std-ref">ProjectSettings.rendering/lights_and_shadows/use_physical_light_units</inline></reference> 时可用。默认值大致相当于一个室内灯泡。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-emission-on-uv2"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-emission-on-uv2" names="class_basematerial3d_property_emission_on_uv2"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>emission_on_uv2</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-emission-on-uv2"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用 <literal>UV2</literal> 从 <reference internal="True" refid="class-basematerial3d-property-emission-texture"><inline classes="std std-ref">emission_texture</inline></reference> 中读取。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-emission-operator"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-emission-operator" names="class_basematerial3d_property_emission_operator"><reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">EmissionOperator</inline></reference> <strong>emission_operator</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-emission-operator"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_emission_operator</strong>(value: <reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">EmissionOperator</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">EmissionOperator</inline></reference> <strong>get_emission_operator</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 <reference internal="True" refid="class-basematerial3d-property-emission"><inline classes="std std-ref">emission</inline></reference> 与 <reference internal="True" refid="class-basematerial3d-property-emission-texture"><inline classes="std std-ref">emission_texture</inline></reference> 的交互方式。可以是加法或乘法。可选值见 <reference internal="True" refid="enum-basematerial3d-emissionoperator"><inline classes="std std-ref">EmissionOperator</inline></reference> 。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-emission-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-emission-texture" names="class_basematerial3d_property_emission_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>emission_texture</strong> <reference internal="True" refid="class-basematerial3d-property-emission-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理，指定某点的表面发光的程度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-fixed-size"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-fixed-size" names="class_basematerial3d_property_fixed_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>fixed_size</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-fixed-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则无论距离远近，对象都以相同的大小渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-grow"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-grow" names="class_basematerial3d_property_grow"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>grow</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-grow"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_grow_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_grow_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用顶点增长设置。可用于创建基于网格的轮廓，请在第二个材质阶段中使用，并将 <reference internal="True" refid="class-basematerial3d-property-cull-mode"><inline classes="std std-ref">cull_mode</inline></reference> 设置为 <reference internal="True" refid="class-basematerial3d-constant-cull-front"><inline classes="std std-ref">CULL_FRONT</inline></reference>。另见 <reference internal="True" refid="class-basematerial3d-property-grow-amount"><inline classes="std std-ref">grow_amount</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>顶点增长无法新建顶点，这意味着锐角可能会造成可见的缺口。缓解方法是在设计网格时就只用平滑的法线，在 3D 创作软件中使用 <reference name="面加权法线" refuri="https://wiki.polycount.com/wiki/Face_weighted_normals">面加权法线</reference>。这样增长就能够将所有轮廓连接到一起，和原始网格一致。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-grow-amount"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-grow-amount" names="class_basematerial3d_property_grow_amount"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>grow_amount</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-grow-amount"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_grow</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_grow</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将对象的顶点沿着对应的法线方向生长。仅在 <reference internal="True" refid="class-basematerial3d-property-grow"><inline classes="std std-ref">grow</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-deep-parallax"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-deep-parallax" names="class_basematerial3d_property_heightmap_deep_parallax"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>heightmap_deep_parallax</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-heightmap-deep-parallax"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_heightmap_deep_parallax</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_heightmap_deep_parallax_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则使用视差遮挡贴图来表示材质中的深度，而不是简单的偏移贴图（参见 <reference internal="True" refid="class-basematerial3d-property-heightmap-enabled"><inline classes="std std-ref">heightmap_enabled</inline></reference>）。这会产生更令人信服的深度效果，但在 GPU 上的成本要高得多。仅在具有显著视觉差异的材质上启用该功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-enabled" names="class_basematerial3d_property_heightmap_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>heightmap_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-heightmap-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用高度映射（也称为“视差映射”或“深度映射”）。另见 <reference internal="True" refid="class-basematerial3d-property-normal-enabled"><inline classes="std std-ref">normal_enabled</inline></reference>。高度映射是 GPU 上的一项要求很高的功能，因此它只能用于具有显著视觉差异的材质。</paragraph>
            <paragraph><strong>注意：</strong>如果在同一材质上使用三平面贴图，则不支持高度图。如果 <reference internal="True" refid="class-basematerial3d-property-uv1-triplanar"><inline classes="std std-ref">uv1_triplanar</inline></reference> 被启用，则 <reference internal="True" refid="class-basematerial3d-property-heightmap-enabled"><inline classes="std std-ref">heightmap_enabled</inline></reference> 的值将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-flip-binormal"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-flip-binormal" names="class_basematerial3d_property_heightmap_flip_binormal"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>heightmap_flip_binormal</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-heightmap-flip-binormal"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_heightmap_deep_parallax_flip_binormal</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_heightmap_deep_parallax_flip_binormal</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在解释高度图时翻转网格的副法线向量。如果相机移动时高度图效果看起来很奇怪（即使使用合理的 <reference internal="True" refid="class-basematerial3d-property-heightmap-scale"><inline classes="std std-ref">heightmap_scale</inline></reference>），请尝试将该属性设置为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-flip-tangent"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-flip-tangent" names="class_basematerial3d_property_heightmap_flip_tangent"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>heightmap_flip_tangent</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-heightmap-flip-tangent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_heightmap_deep_parallax_flip_tangent</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_heightmap_deep_parallax_flip_tangent</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则在解释高度图时翻转网格的切线向量。如果相机移动时高度图效果看起来很奇怪（即使使用合理的 <reference internal="True" refid="class-basematerial3d-property-heightmap-scale"><inline classes="std std-ref">heightmap_scale</inline></reference>），请尝试将该属性设置为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-flip-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-flip-texture" names="class_basematerial3d_property_heightmap_flip_texture"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>heightmap_flip_texture</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-heightmap-flip-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则将高度图纹理解释为深度图，与较暗的值相比，较亮的值在高度上显得“更低”。</paragraph>
            <paragraph>可以启用该功能以与为 Godot 3.x 编写的某些材质兼容。如果在 Godot 3.x 中使用反转导入选项来反转深度图，则不需要这样做，在这种情况下，<reference internal="True" refid="class-basematerial3d-property-heightmap-flip-texture"><inline classes="std std-ref">heightmap_flip_texture</inline></reference> 应该保持为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-max-layers"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-max-layers" names="class_basematerial3d_property_heightmap_max_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>heightmap_max_layers</strong> <reference internal="True" refid="class-basematerial3d-property-heightmap-max-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_heightmap_deep_parallax_max_layers</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_heightmap_deep_parallax_max_layers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当相机靠近材质时用于视差遮挡贴图的层数。较高的值会产生更令人信服的深度效果，尤其是在具有陡峭高度变化的材质中。较高的值会显著地增加 GPU 的成本，因此只能在会产生显著视觉差异的材质上增加它。</paragraph>
            <paragraph><strong>注意：</strong>仅当 <reference internal="True" refid="class-basematerial3d-property-heightmap-deep-parallax"><inline classes="std std-ref">heightmap_deep_parallax</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-min-layers"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-min-layers" names="class_basematerial3d_property_heightmap_min_layers"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>heightmap_min_layers</strong> <reference internal="True" refid="class-basematerial3d-property-heightmap-min-layers"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_heightmap_deep_parallax_min_layers</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_heightmap_deep_parallax_min_layers</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当相机远离材质时用于视差遮挡贴图的层数。较高的值会产生更令人信服的深度效果，尤其是在具有陡峭高度变化的材质中。较高的值会显著地增加 GPU 的成本，因此只能在会产生显著视觉差异的材质上增加它。</paragraph>
            <paragraph><strong>注意：</strong>仅当 <reference internal="True" refid="class-basematerial3d-property-heightmap-deep-parallax"><inline classes="std std-ref">heightmap_deep_parallax</inline></reference> 为 <literal>true</literal> 时有效。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-scale"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-scale" names="class_basematerial3d_property_heightmap_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>heightmap_scale</strong> = <literal>5.0</literal> <reference internal="True" refid="class-basematerial3d-property-heightmap-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_heightmap_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_heightmap_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于视差效果的高度图缩放（参见 <reference internal="True" refid="class-basematerial3d-property-heightmap-enabled"><inline classes="std std-ref">heightmap_enabled</inline></reference>）。调整默认值，使最高点（值 = 255）看起来比最低点（值 = 0）高 5 厘米。较高的值会导致更深的外观，但可能会导致从倾斜角度查看材质时出现伪影，尤其是在相机移动时。负值可用于反转视差效果，但这与使用 <reference internal="True" refid="class-basematerial3d-property-heightmap-flip-texture"><inline classes="std std-ref">heightmap_flip_texture</inline></reference> 反转纹理不同，因为材质也会看起来“更接近”相机。在大多数情况下，<reference internal="True" refid="class-basematerial3d-property-heightmap-scale"><inline classes="std std-ref">heightmap_scale</inline></reference> 应保持为正值。</paragraph>
            <paragraph><strong>注意：</strong>如果忽略这个值后高度图效果看起来很奇怪，请尝试调整 <reference internal="True" refid="class-basematerial3d-property-heightmap-flip-binormal"><inline classes="std std-ref">heightmap_flip_binormal</inline></reference> 和 <reference internal="True" refid="class-basematerial3d-property-heightmap-flip-tangent"><inline classes="std std-ref">heightmap_flip_tangent</inline></reference>。另请参阅 <reference internal="True" refid="class-basematerial3d-property-heightmap-texture"><inline classes="std std-ref">heightmap_texture</inline></reference> 以获取有关创作高度图纹理的建议，因为创作高度图纹理的方式会影响 <reference internal="True" refid="class-basematerial3d-property-heightmap-scale"><inline classes="std std-ref">heightmap_scale</inline></reference> 的行为方式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-heightmap-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-heightmap-texture" names="class_basematerial3d_property_heightmap_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>heightmap_texture</strong> <reference internal="True" refid="class-basematerial3d-property-heightmap-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用作高度图的纹理。另见 <reference internal="True" refid="class-basematerial3d-property-heightmap-enabled"><inline classes="std std-ref">heightmap_enabled</inline></reference>。</paragraph>
            <paragraph>为获得最佳效果，应将纹理归一化（减少 <reference internal="True" refid="class-basematerial3d-property-heightmap-scale"><inline classes="std std-ref">heightmap_scale</inline></reference> 以进行补偿）。在 <reference name="GIMP" refuri="https://gimp.org">GIMP</reference> 中，这可以使用<strong>颜色（Colors） &gt; 自动（Auto） &gt; 均衡（Equalize）</strong>来完成。如果纹理只使用其可用范围的一小部分，则视差效果可能看起来很奇怪，尤其是当相机移动时。</paragraph>
            <paragraph><strong>注意：</strong>为了减少内存使用和缩短加载时间，可以使用分辨率较低的高度图纹理，因为大多数高度图仅包含低频数据。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-metallic"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-metallic" names="class_basematerial3d_property_metallic"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>metallic</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-metallic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_metallic</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_metallic</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>高值使材质看起来更像金属。非金属使用其反射率作为漫射色，并在镜面反射上添加漫射。对于非金属，反射出现在反照率颜色之上。金属使用其反射率作为镜面反射的倍数，并将漫射色设置为黑色，从而产生有色反射。材质在全金属或全非金属时效果更好，介于 <literal>0</literal> 和 <literal>1</literal> 之间的值只能用于金属和非金属部分之间的混合。要改变反射量，请使用<reference internal="True" refid="class-basematerial3d-property-roughness"><inline classes="std std-ref">roughness</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-metallic-specular"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-metallic-specular" names="class_basematerial3d_property_metallic_specular"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>metallic_specular</strong> = <literal>0.5</literal> <reference internal="True" refid="class-basematerial3d-property-metallic-specular"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_specular</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_specular</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>调整镜面反射的强度。镜面反射由场景反射和镜面波瓣组成，镜面波瓣是从光源反射的亮点。当设置为 <literal>0.0</literal> 时，镜面反射将不可见。这与 <reference internal="True" refid="class-basematerial3d-constant-specular-disabled"><inline classes="std std-ref">SPECULAR_DISABLED</inline></reference> <reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference> 不同，因为 <reference internal="True" refid="class-basematerial3d-constant-specular-disabled"><inline classes="std std-ref">SPECULAR_DISABLED</inline></reference> 仅适用于来自光源的镜面反射波瓣。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refid="class-basematerial3d-property-metallic"><inline classes="std std-ref">metallic</inline></reference> 不同，这不是节能的，所以在大多数情况下应将其保留在 <literal>0.5</literal>。另见 <reference internal="True" refid="class-basematerial3d-property-roughness"><inline classes="std std-ref">roughness</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-metallic-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-metallic-texture" names="class_basematerial3d_property_metallic_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>metallic_texture</strong> <reference internal="True" refid="class-basematerial3d-property-metallic-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于指定对象的金属质感。这个值会与 <reference internal="True" refid="class-basematerial3d-property-metallic"><inline classes="std std-ref">metallic</inline></reference> 相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-metallic-texture-channel"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-metallic-texture-channel" names="class_basematerial3d_property_metallic_texture_channel"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>metallic_texture_channel</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-metallic-texture-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_metallic_texture_channel</strong>(value: <reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>get_metallic_texture_channel</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定存储金属度信息的 <reference internal="True" refid="class-basematerial3d-property-metallic-texture"><inline classes="std std-ref">metallic_texture</inline></reference> 的通道。当将多个效果的信息存储在单个纹理中时，这很有用。例如，如果在红色通道中存储金属度，在蓝色通道中存储粗糙度，在绿色通道中存储环境遮挡，则可以减少使用的纹理数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-msdf-outline-size"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-msdf-outline-size" names="class_basematerial3d_property_msdf_outline_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>msdf_outline_size</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-msdf-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_msdf_outline_size</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_msdf_outline_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>形状轮廓的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-msdf-pixel-range"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-msdf-pixel-range" names="class_basematerial3d_property_msdf_pixel_range"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>msdf_pixel_range</strong> = <literal>4.0</literal> <reference internal="True" refid="class-basematerial3d-property-msdf-pixel-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_msdf_pixel_range</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_msdf_pixel_range</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>围绕最小和最大可表示有符号距离之间的形状的范围的宽度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-no-depth-test"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-no-depth-test" names="class_basematerial3d_property_no_depth_test"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>no_depth_test</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-no-depth-test"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，深度测试被禁用，对象将按渲染顺序绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-normal-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-normal-enabled" names="class_basematerial3d_property_normal_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>normal_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-normal-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用法线映射。略微影响性能，尤其在移动 GPU 上。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-normal-scale"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-normal-scale" names="class_basematerial3d_property_normal_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>normal_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-normal-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_normal_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_normal_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>法线贴图的效果强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-normal-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-normal-texture" names="class_basematerial3d_property_normal_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>normal_texture</strong> <reference internal="True" refid="class-basematerial3d-property-normal-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于指定给定像素的法线的纹理。<reference internal="True" refid="class-basematerial3d-property-normal-texture"><inline classes="std std-ref">normal_texture</inline></reference> 只使用红色和绿色通道；会忽略蓝色和 alpha 通道。从 <reference internal="True" refid="class-basematerial3d-property-normal-texture"><inline classes="std std-ref">normal_texture</inline></reference> 读取的法线是围绕 <reference internal="True" refuri="class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 所提供的表面法线的进行朝向的。</paragraph>
            <paragraph><strong>注意：</strong>该网格必须在其顶点数据中同时定义法线和切线。否则法线贴图将无法正确渲染，只会使整个表面变暗。如果使用 <reference internal="True" refuri="class_surfacetool#class-surfacetool"><inline classes="std std-ref">SurfaceTool</inline></reference> 创建几何体，可以使用 <reference internal="True" refuri="class_surfacetool#class-surfacetool-method-generate-normals"><inline classes="std std-ref">SurfaceTool.generate_normals</inline></reference> 和 <reference internal="True" refuri="class_surfacetool#class-surfacetool-method-generate-tangents"><inline classes="std std-ref">SurfaceTool.generate_tangents</inline></reference> 分别自动生成法线和切线。</paragraph>
            <paragraph><strong>注意：</strong>Godot 期望法线贴图使用 X+、Y+、Z+ 坐标系。比较流行的引擎所期望的法线贴图坐标系见<reference name="这个页面" refuri="http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates">这个页面</reference>。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refid="class-basematerial3d-property-detail-enabled"><inline classes="std std-ref">detail_enabled</inline></reference> 为 <literal>true</literal>，则 <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 纹理将在 <reference internal="True" refid="class-basematerial3d-property-normal-texture"><inline classes="std std-ref">normal_texture</inline></reference> <emphasis>下方</emphasis>绘制。要在 <reference internal="True" refid="class-basematerial3d-property-detail-albedo"><inline classes="std std-ref">detail_albedo</inline></reference> 纹理<emphasis>之上</emphasis>显示法线贴图，请改用 <reference internal="True" refid="class-basematerial3d-property-detail-normal"><inline classes="std std-ref">detail_normal</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-orm-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-orm-texture" names="class_basematerial3d_property_orm_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>orm_texture</strong> <reference internal="True" refid="class-basematerial3d-property-orm-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要使用的遮挡/粗糙度/金属纹理。这是对 <reference internal="True" refuri="class_ormmaterial3d#class-ormmaterial3d"><inline classes="std std-ref">ORMMaterial3D</inline></reference> 中 <reference internal="True" refid="class-basematerial3d-property-ao-texture"><inline classes="std std-ref">ao_texture</inline></reference>、<reference internal="True" refid="class-basematerial3d-property-roughness-texture"><inline classes="std std-ref">roughness_texture</inline></reference> 和 <reference internal="True" refid="class-basematerial3d-property-metallic-texture"><inline classes="std std-ref">metallic_texture</inline></reference> 的更有效替代。环境遮挡被存储在红色通道中。粗糙度贴图被存储在绿色通道中。金属度贴图被存储在蓝色通道中。Alpha 通道将被忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-particles-anim-h-frames"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-particles-anim-h-frames" names="class_basematerial3d_property_particles_anim_h_frames"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>particles_anim_h_frames</strong> <reference internal="True" refid="class-basematerial3d-property-particles-anim-h-frames"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_particles_anim_h_frames</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_particles_anim_h_frames</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>粒子精灵表中的水平帧数。仅在使用 <reference internal="True" refid="class-basematerial3d-constant-billboard-particles"><inline classes="std std-ref">BILLBOARD_PARTICLES</inline></reference> 时启用。见 <reference internal="True" refid="class-basematerial3d-property-billboard-mode"><inline classes="std std-ref">billboard_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-particles-anim-loop"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-particles-anim-loop" names="class_basematerial3d_property_particles_anim_loop"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>particles_anim_loop</strong> <reference internal="True" refid="class-basematerial3d-property-particles-anim-loop"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_particles_anim_loop</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_particles_anim_loop</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则循环粒子动画。仅在使用 <reference internal="True" refid="class-basematerial3d-constant-billboard-particles"><inline classes="std std-ref">BILLBOARD_PARTICLES</inline></reference> 时启用。见 <reference internal="True" refid="class-basematerial3d-property-billboard-mode"><inline classes="std std-ref">billboard_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-particles-anim-v-frames"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-particles-anim-v-frames" names="class_basematerial3d_property_particles_anim_v_frames"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>particles_anim_v_frames</strong> <reference internal="True" refid="class-basematerial3d-property-particles-anim-v-frames"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_particles_anim_v_frames</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_particles_anim_v_frames</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>粒子精灵表中的垂直帧数。仅在使用 <reference internal="True" refid="class-basematerial3d-constant-billboard-particles"><inline classes="std std-ref">BILLBOARD_PARTICLES</inline></reference> 时启用。见 <reference internal="True" refid="class-basematerial3d-property-billboard-mode"><inline classes="std std-ref">billboard_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-point-size"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-point-size" names="class_basematerial3d_property_point_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>point_size</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-point-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_point_size</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_point_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>点大小，单位为像素。见 <reference internal="True" refid="class-basematerial3d-property-use-point-size"><inline classes="std std-ref">use_point_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-proximity-fade-distance"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-proximity-fade-distance" names="class_basematerial3d_property_proximity_fade_distance"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>proximity_fade_distance</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-proximity-fade-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_proximity_fade_distance</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_proximity_fade_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渐变效果发生的距离。距离越大，物体褪色的时间越长。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-proximity-fade-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-proximity-fade-enabled" names="class_basematerial3d_property_proximity_fade_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>proximity_fade_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-proximity-fade-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_proximity_fade_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_proximity_fade_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用接近淡出效果。邻近淡出效果会根据每个像素与另一个对象的距离淡出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-refraction-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-refraction-enabled" names="class_basematerial3d_property_refraction_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>refraction_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-refraction-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用折射效果。根据来自对象后面的光线来扭曲透明度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-refraction-scale"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-refraction-scale" names="class_basematerial3d_property_refraction_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>refraction_scale</strong> = <literal>0.05</literal> <reference internal="True" refid="class-basematerial3d-property-refraction-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_refraction</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_refraction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>折射效果的强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-refraction-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-refraction-texture" names="class_basematerial3d_property_refraction_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>refraction_texture</strong> <reference internal="True" refid="class-basematerial3d-property-refraction-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制每个像素折射强度的纹理。会与 <reference internal="True" refid="class-basematerial3d-property-refraction-scale"><inline classes="std std-ref">refraction_scale</inline></reference> 相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-refraction-texture-channel"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-refraction-texture-channel" names="class_basematerial3d_property_refraction_texture_channel"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>refraction_texture_channel</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-refraction-texture-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_refraction_texture_channel</strong>(value: <reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>get_refraction_texture_channel</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定存储折射信息的 <reference internal="True" refid="class-basematerial3d-property-refraction-texture"><inline classes="std std-ref">refraction_texture</inline></reference> 的通道。当将多个效果的信息存储在单个纹理中时，这很有用。例如，如果在红色通道中存储折射，在蓝色通道中存储粗糙度，在绿色通道中存储环境遮挡，则可以减少使用的纹理数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-rim"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-rim" names="class_basematerial3d_property_rim"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rim</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-rim"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rim</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_rim</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置边缘照明效果的强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-rim-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-rim-enabled" names="class_basematerial3d_property_rim_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>rim_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-rim-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用边缘效果。边缘照明会增加物体上掠射角度的亮度。</paragraph>
            <paragraph><strong>注意：</strong>如果材质的 <reference internal="True" refid="class-basematerial3d-property-shading-mode"><inline classes="std std-ref">shading_mode</inline></reference> 为 <reference internal="True" refid="class-basematerial3d-constant-shading-mode-unshaded"><inline classes="std std-ref">SHADING_MODE_UNSHADED</inline></reference>，则边缘照明不可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-rim-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-rim-texture" names="class_basematerial3d_property_rim_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>rim_texture</strong> <reference internal="True" refid="class-basematerial3d-property-rim-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理用于设置每个像素的边缘光照效果的强度。会与 <reference internal="True" refid="class-basematerial3d-property-rim"><inline classes="std std-ref">rim</inline></reference> 相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-rim-tint"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-rim-tint" names="class_basematerial3d_property_rim_tint"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>rim_tint</strong> = <literal>0.5</literal> <reference internal="True" refid="class-basematerial3d-property-rim-tint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_rim_tint</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_rim_tint</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渲染边缘效果时，混合光照色和反射色的数量。如果 <literal>0</literal> 表示使用光色，<literal>1</literal> 表示使用反照色。一般来说，中间值的效果最好。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-roughness"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-roughness" names="class_basematerial3d_property_roughness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>roughness</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-roughness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_roughness</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_roughness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>表面反射。<literal>0</literal> 值表示一面完美的镜像，而 <literal>1</literal> 值则完全模糊了反射。另请参阅 <reference internal="True" refid="class-basematerial3d-property-metallic"><inline classes="std std-ref">metallic</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-roughness-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-roughness-texture" names="class_basematerial3d_property_roughness_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>roughness_texture</strong> <reference internal="True" refid="class-basematerial3d-property-roughness-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于控制每个像素粗糙度的纹理。会与 <reference internal="True" refid="class-basematerial3d-property-roughness"><inline classes="std std-ref">roughness</inline></reference> 相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-roughness-texture-channel"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-roughness-texture-channel" names="class_basematerial3d_property_roughness_texture_channel"><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>roughness_texture_channel</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-roughness-texture-channel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_roughness_texture_channel</strong>(value: <reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-texturechannel"><inline classes="std std-ref">TextureChannel</inline></reference> <strong>get_roughness_texture_channel</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定存储粗糙度信息的<reference internal="True" refid="class-basematerial3d-property-roughness-texture"><inline classes="std std-ref">roughness_texture</inline></reference>的通道。当将多个效果的信息存储在单个纹理中时，这很有用。例如，如果在红色通道中存储金属度，在蓝色通道中存储粗糙度，在绿色通道中存储环境遮挡，则可以减少使用的纹理数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-shading-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-shading-mode" names="class_basematerial3d_property_shading_mode"><reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference> <strong>shading_mode</strong> = <literal>1</literal> <reference internal="True" refid="class-basematerial3d-property-shading-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_shading_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-shadingmode"><inline classes="std std-ref">ShadingMode</inline></reference> <strong>get_shading_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置是否发生着色，逐像素、逐顶点或无阴影。逐顶点时照明速度更快，使其成为移动应用程序的最佳选择，但它看起来比逐像素时差很多。无阴影渲染是最快的，但会禁用与灯光的所有交互。</paragraph>
            <paragraph><strong>注意：</strong>设置着色模式为顶点着色时目前没有效果，因为顶点着色还没有实现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-shadow-to-opacity"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-shadow-to-opacity" names="class_basematerial3d_property_shadow_to_opacity"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shadow_to_opacity</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-shadow-to-opacity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，启用“阴影到不透明度”的渲染模式，在该模式下，光照会修改 Alpha，使阴影区域不透明，非阴影区域透明。对于在 AR 中把阴影叠加到相机画面上很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-specular-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-specular-mode" names="class_basematerial3d_property_specular_mode"><reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference> <strong>specular_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-specular-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_specular_mode</strong>(value: <reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference> <strong>get_specular_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>渲染镜面反射斑点的方法。请参阅 <reference internal="True" refid="enum-basematerial3d-specularmode"><inline classes="std std-ref">SpecularMode</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-basematerial3d-property-specular-mode"><inline classes="std std-ref">specular_mode</inline></reference> 仅适用于镜面反射斑点。它不影响来自天空的镜面反射、屏幕空间反射、<reference internal="True" refuri="class_voxelgi#class-voxelgi"><inline classes="std std-ref">VoxelGI</inline></reference>、SDFGI 或 <reference internal="True" refuri="class_reflectionprobe#class-reflectionprobe"><inline classes="std std-ref">ReflectionProbe</inline></reference>。要同时禁用来自这些源的反射，请将 <reference internal="True" refid="class-basematerial3d-property-metallic-specular"><inline classes="std std-ref">metallic_specular</inline></reference> 设置为 <literal>0.0</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-enabled" names="class_basematerial3d_property_subsurf_scatter_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>subsurf_scatter_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用次表面散射。模拟光线穿透物体表面，被散射，然后出现。次表面散射质量由 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-subsurface-scattering-subsurface-scattering-quality"><inline classes="std std-ref">ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_quality</inline></reference> 控制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-skin-mode"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-skin-mode" names="class_basematerial3d_property_subsurf_scatter_skin_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>subsurf_scatter_skin_mode</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-skin-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则次表面散射将使用针对人类皮肤的颜色和密度进行优化的特殊模式，例如提升次表面散射中红色通道的强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-strength"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-strength" names="class_basematerial3d_property_subsurf_scatter_strength"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>subsurf_scatter_strength</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-strength"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_subsurface_scattering_strength</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_subsurface_scattering_strength</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>次表面散射效果的强度。效果的深度也受到全局的 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-environment-subsurface-scattering-subsurface-scattering-scale"><inline classes="std std-ref">ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_scale</inline></reference> 的控制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-texture" names="class_basematerial3d_property_subsurf_scatter_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>subsurf_scatter_texture</strong> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于控制次表面散射强度的纹理。存储在红色纹理通道中。会与 <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-strength"><inline classes="std std-ref">subsurf_scatter_strength</inline></reference> 相乘。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-transmittance-boost"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-transmittance-boost" names="class_basematerial3d_property_subsurf_scatter_transmittance_boost"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>subsurf_scatter_transmittance_boost</strong> = <literal>0.0</literal> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-boost"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transmittance_boost</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_transmittance_boost</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>次表面散射透射率效果的强度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-transmittance-color"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-transmittance-color" names="class_basematerial3d_property_subsurf_scatter_transmittance_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>subsurf_scatter_transmittance_color</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transmittance_color</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_transmittance_color</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与次表面散射透射率效果相乘的颜色。<reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-skin-mode"><inline classes="std std-ref">subsurf_scatter_skin_mode</inline></reference> 为 <literal>true</literal> 时忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-transmittance-depth"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-transmittance-depth" names="class_basematerial3d_property_subsurf_scatter_transmittance_depth"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>subsurf_scatter_transmittance_depth</strong> = <literal>0.1</literal> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-depth"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transmittance_depth</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_transmittance_depth</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>次表面散射透射率效果的深度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-transmittance-enabled"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-transmittance-enabled" names="class_basematerial3d_property_subsurf_scatter_transmittance_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>subsurf_scatter_transmittance_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用次表面散射透射率。仅当 <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-enabled"><inline classes="std std-ref">subsurf_scatter_enabled</inline></reference> 为 <literal>true</literal> 时有效。另请参见 <reference internal="True" refid="class-basematerial3d-property-backlight-enabled"><inline classes="std std-ref">backlight_enabled</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-subsurf-scatter-transmittance-texture"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-subsurf-scatter-transmittance-texture" names="class_basematerial3d_property_subsurf_scatter_transmittance_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>subsurf_scatter_transmittance_texture</strong> <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-transmittance-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于乘以次表面散射透射率强度的纹理。另请参见 <reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-texture"><inline classes="std std-ref">subsurf_scatter_texture</inline></reference>。<reference internal="True" refid="class-basematerial3d-property-subsurf-scatter-skin-mode"><inline classes="std std-ref">subsurf_scatter_skin_mode</inline></reference> 为 <literal>true</literal> 时忽略。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-texture-filter"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-texture-filter" names="class_basematerial3d_property_texture_filter"><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>texture_filter</strong> = <literal>3</literal> <reference internal="True" refid="class-basematerial3d-property-texture-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_filter</strong>(value: <reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>get_texture_filter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理的过滤标志。有关选项，请参阅 <reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>即便这里选择了最近邻过滤，<reference internal="True" refid="class-basematerial3d-property-heightmap-texture"><inline classes="std std-ref">heightmap_texture</inline></reference> 也始终使用线性过滤采样。这是为了确保高度图效果看起来符合预期。如果需要像素之间的高度过渡更加清晰，请在图像编辑器中使用最近邻过滤调整高度图纹理的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-texture-repeat"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-texture-repeat" names="class_basematerial3d_property_texture_repeat"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>texture_repeat</strong> = <literal>true</literal> <reference internal="True" refid="class-basematerial3d-property-texture-repeat"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理的重复标志。可选项见 <reference internal="True" refid="enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-transparency"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-transparency" names="class_basematerial3d_property_transparency"><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>transparency</strong> = <literal>0</literal> <reference internal="True" refid="class-basematerial3d-property-transparency"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transparency</strong>(value: <reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-basematerial3d-transparency"><inline classes="std std-ref">Transparency</inline></reference> <strong>get_transparency</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该材质的透明模式。一些透明模式将禁用阴影投射。除了 <reference internal="True" refid="class-basematerial3d-constant-transparency-disabled"><inline classes="std std-ref">TRANSPARENCY_DISABLED</inline></reference> 以外的任何透明模式都会对性能产生较大的影响。另见 <reference internal="True" refid="class-basematerial3d-property-blend-mode"><inline classes="std std-ref">blend_mode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-use-particle-trails"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-use-particle-trails" names="class_basematerial3d_property_use_particle_trails"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_particle_trails</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-use-particle-trails"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则启用 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference> 尾迹所需的部分着色器以发挥作用。这也需要使用具有适当蒙皮的网格，例如 <reference internal="True" refuri="class_ribbontrailmesh#class-ribbontrailmesh"><inline classes="std std-ref">RibbonTrailMesh</inline></reference> 或 <reference internal="True" refuri="class_tubetrailmesh#class-tubetrailmesh"><inline classes="std std-ref">TubeTrailMesh</inline></reference>。在 <reference internal="True" refuri="class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference> 网格中使用的材质之外启用该功能将破坏材质渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-use-point-size"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-use-point-size" names="class_basematerial3d_property_use_point_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>use_point_size</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-use-point-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，可以改变渲染点大小。</paragraph>
            <paragraph><strong>注意：</strong>这仅对几何形状基于点而非基于三角形的对象有效。另见 <reference internal="True" refid="class-basematerial3d-property-point-size"><inline classes="std std-ref">point_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv1-offset"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv1-offset" names="class_basematerial3d_property_uv1_offset"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>uv1_offset</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-basematerial3d-property-uv1-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv1_offset</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_uv1_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>UV</literal> 坐标的偏移量。这个量将被添加到顶点函数中的 <literal>UV</literal> 中。可以用来偏移纹理。Z 分量在启用 <reference internal="True" refid="class-basematerial3d-property-uv1-triplanar"><inline classes="std std-ref">uv1_triplanar</inline></reference> 时使用，在其他任何地方都不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv1-scale"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv1-scale" names="class_basematerial3d_property_uv1_scale"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>uv1_scale</strong> = <literal>Vector3(1, 1, 1)</literal> <reference internal="True" refid="class-basematerial3d-property-uv1-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv1_scale</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_uv1_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>UV</literal> 坐标的缩放值。将与顶点函数中的 <literal>UV</literal> 相乘。Z 分量在启用 <reference internal="True" refid="class-basematerial3d-property-uv1-triplanar"><inline classes="std std-ref">uv1_triplanar</inline></reference> 时使用，在其他任何地方都不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv1-triplanar"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv1-triplanar" names="class_basematerial3d_property_uv1_triplanar"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uv1_triplanar</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-uv1-triplanar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理将不使用 <literal>UV</literal>，而是使用三平面纹理查找来确定如何应用纹理。三平面纹理使用对象表面的方向来混合纹理坐标之间。它从源纹理中读取3次，每个轴一次，然后根据像素与每个轴的紧密程度在结果之间进行混合。这通常用于自然特征，以获得真实的材质混合。由于三平面纹理处理每一个像素需要更多的纹理读取，所以它比普通的UV纹理处理要慢得多。此外，由于它是在三个轴之间混合纹理，所以当你试图实现清晰的纹理时，它是不合适的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv1-triplanar-sharpness"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv1-triplanar-sharpness" names="class_basematerial3d_property_uv1_triplanar_sharpness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>uv1_triplanar_sharpness</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-uv1-triplanar-sharpness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv1_triplanar_blend_sharpness</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_uv1_triplanar_blend_sharpness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>数字越小使纹理混合得越柔和，数字越大使纹理混合得越锐利。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-basematerial3d-property-uv1-triplanar-sharpness"><inline classes="std std-ref">uv1_triplanar_sharpness</inline></reference> 被钳制在 <literal>0.0</literal> 和 <literal>150.0</literal>（包括）之间，因为超出该范围的值可能看起来会破损，具体取决于网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv1-world-triplanar"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv1-world-triplanar" names="class_basematerial3d_property_uv1_world_triplanar"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uv1_world_triplanar</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-uv1-world-triplanar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <literal>UV</literal> 的三平面映射是在世界空间而不是对象局部空间中计算的。另见 <reference internal="True" refid="class-basematerial3d-property-uv1-triplanar"><inline classes="std std-ref">uv1_triplanar</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv2-offset"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv2-offset" names="class_basematerial3d_property_uv2_offset"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>uv2_offset</strong> = <literal>Vector3(0, 0, 0)</literal> <reference internal="True" refid="class-basematerial3d-property-uv2-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv2_offset</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_uv2_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>UV2</literal> 坐标的偏移量。在顶点函数中这个量将被加到 <literal>UV2</literal> 中。这可以用来偏移纹理。Z 分量仅在启用 <reference internal="True" refid="class-basematerial3d-property-uv2-triplanar"><inline classes="std std-ref">uv2_triplanar</inline></reference> 时使用，在其他任何地方不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv2-scale"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv2-scale" names="class_basematerial3d_property_uv2_scale"><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>uv2_scale</strong> = <literal>Vector3(1, 1, 1)</literal> <reference internal="True" refid="class-basematerial3d-property-uv2-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv2_scale</strong>(value: <reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> <strong>get_uv2_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>UV2</literal> 坐标的缩放比例。在顶点函数中该属性乘以 <literal>UV2</literal>。Z 分量仅在启用 <reference internal="True" refid="class-basematerial3d-property-uv2-triplanar"><inline classes="std std-ref">uv2_triplanar</inline></reference> 时使用，在其他任何地方不会被使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv2-triplanar"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv2-triplanar" names="class_basematerial3d_property_uv2_triplanar"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uv2_triplanar</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-uv2-triplanar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，纹理将不使用 <literal>UV</literal>，而是使用三平面纹理查找来确定如何应用纹理。三平面纹理使用对象表面的方向来混合纹理坐标之间。它从源纹理中读取 3 次，每个轴一次，然后根据像素与每个轴的紧密程度在结果之间进行混合。这通常用于自然特征，以获得真实的材质混合。由于三平面纹理处理每一个像素需要更多的纹理读取，所以它比普通的 UV 纹理处理要慢得多。此外，由于它是在三个轴之间混合纹理，所以当你试图实现清晰的纹理时，它是不合适的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv2-triplanar-sharpness"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv2-triplanar-sharpness" names="class_basematerial3d_property_uv2_triplanar_sharpness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>uv2_triplanar_sharpness</strong> = <literal>1.0</literal> <reference internal="True" refid="class-basematerial3d-property-uv2-triplanar-sharpness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uv2_triplanar_blend_sharpness</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_uv2_triplanar_blend_sharpness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>数字越小使纹理混合得越柔和，数字越大使纹理混合得越锐利。</paragraph>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-basematerial3d-property-uv2-triplanar-sharpness"><inline classes="std std-ref">uv2_triplanar_sharpness</inline></reference> 被钳制在 <literal>0.0</literal> 和 <literal>150.0</literal>（包括）之间，因为超出该范围的值可能看起来会破损，具体取决于网格。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-uv2-world-triplanar"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-uv2-world-triplanar" names="class_basematerial3d_property_uv2_world_triplanar"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uv2_world_triplanar</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-uv2-world-triplanar"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <literal>UV2</literal> 的三平面映射是在世界空间而不是对象局部空间中计算的。另见 <reference internal="True" refid="class-basematerial3d-property-uv2-triplanar"><inline classes="std std-ref">uv2_triplanar</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-vertex-color-is-srgb"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-vertex-color-is-srgb" names="class_basematerial3d_property_vertex_color_is_srgb"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>vertex_color_is_srgb</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-vertex-color-is-srgb"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则顶点颜色被认为使用 sRGB 颜色空间存储，并在渲染期间被转换为线性颜色空间。如果为 <literal>false</literal>，则顶点颜色被认为使用线性颜色空间存储并按原样渲染。另见 <reference internal="True" refid="class-basematerial3d-property-albedo-texture-force-srgb"><inline classes="std std-ref">albedo_texture_force_srgb</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>仅在使用 Forward+ 和移动渲染方式时有效，不支持兼容模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-property-vertex-color-use-as-albedo"></target>
            <paragraph classes="classref-property" ids="class-basematerial3d-property-vertex-color-use-as-albedo" names="class_basematerial3d_property_vertex_color_use_as_albedo"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>vertex_color_use_as_albedo</strong> = <literal>false</literal> <reference internal="True" refid="class-basematerial3d-property-vertex-color-use-as-albedo"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则使用顶点颜色作为反射率颜色。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-basematerial3d-method-get-feature"></target>
            <paragraph classes="classref-method" ids="class-basematerial3d-method-get-feature" names="class_basematerial3d_method_get_feature"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-basematerial3d-method-get-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果指定的 <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference> 被启用，返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-method-get-flag"></target>
            <paragraph classes="classref-method" ids="class-basematerial3d-method-get-flag" names="class_basematerial3d_method_get_flag"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-basematerial3d-method-get-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果指定的标志被启用，返回 <literal>true</literal>。选项见 <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> 枚举值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-method-get-texture"></target>
            <paragraph classes="classref-method" ids="class-basematerial3d-method-get-texture" names="class_basematerial3d_method_get_texture"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>get_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-basematerial3d-method-get-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与指定 <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference> 关联的 <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-method-set-feature"></target>
            <paragraph classes="classref-method" ids="class-basematerial3d-method-set-feature" names="class_basematerial3d_method_set_feature"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_feature</strong>(feature: <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-basematerial3d-method-set-feature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则启用指定的 <reference internal="True" refid="enum-basematerial3d-feature"><inline classes="std std-ref">Feature</inline></reference>。<strong>BaseMaterial3D</strong> 中的许多功能都需要在使用前启用。这样，仅在指定时才会产生使用该功能的成本。也可以通过将相应的成员设置为 <literal>true</literal> 来启用功能。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-method-set-flag"></target>
            <paragraph classes="classref-method" ids="class-basematerial3d-method-set-flag" names="class_basematerial3d_method_set_flag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_flag</strong>(flag: <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-basematerial3d-method-set-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，则启用指定的标志。标志是可以打开和关闭的可选行为。使用该函数一次只能启用一个标志，不能将标志枚举值像位掩码一样进行合并，一次启用或禁用多个标志。也可以通过将相应成员设置为 <literal>true</literal> 来启用标志。选项见 <reference internal="True" refid="enum-basematerial3d-flags"><inline classes="std std-ref">Flags</inline></reference> 枚举值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-basematerial3d-method-set-texture"></target>
            <paragraph classes="classref-method" ids="class-basematerial3d-method-set-texture" names="class_basematerial3d_method_set_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture</strong>(param: <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>, texture: <reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference>) <reference internal="True" refid="class-basematerial3d-method-set-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置由 <literal>param</literal> 指定的插槽的纹理。有关可用插槽，请参阅 <reference internal="True" refid="enum-basematerial3d-textureparam"><inline classes="std std-ref">TextureParam</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
