<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_enetpacketpeer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/enet/doc_classes/ENetPacketPeer.xml.</comment>
    <target refid="class-enetpacketpeer"></target>
    <section ids="enetpacketpeer class-enetpacketpeer" names="enetpacketpeer class_enetpacketpeer">
        <title>ENetPacketPeer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><reference name="ENetPeer" refuri="http://enet.bespin.org/group__peer.html">ENetPeer</reference> 的包装类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>表示 <reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference> 对等体的 PacketPeer 实现。</paragraph>
            <paragraph>该类无法被直接实例化，但可以在 <reference internal="True" refuri="class_enetconnection#class-enetconnection-method-service"><inline classes="std std-ref">ENetConnection.service</inline></reference> 期间，或通过 <reference internal="True" refuri="class_enetconnection#class-enetconnection-method-get-peers"><inline classes="std std-ref">ENetConnection.get_peers</inline></reference> 进行检索。</paragraph>
            <paragraph><strong>注意：</strong>导出到 Android 时，在导出项目或使用一键部署之前，请确保在 Android 导出预设中，启用了 <literal>INTERNET</literal> 权限。否则，Android 将阻止任何类型的网络通信。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="ENet 网站上的 API 文档" refuri="http://enet.bespin.org/usergroup0.html">ENet 网站上的 API 文档</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="49"></colspec>
                    <colspec colwidth="191"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-get-channels"><inline classes="std std-ref">get_channels</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-get-remote-address"><inline classes="std std-ref">get_remote_address</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-get-remote-port"><inline classes="std std-ref">get_remote_port</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-get-state"><inline classes="std std-ref">get_state</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-get-statistic"><inline classes="std std-ref">get_statistic</inline></reference>(statistic: <reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-is-active"><inline classes="std std-ref">is_active</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-peer-disconnect"><inline classes="std std-ref">peer_disconnect</inline></reference>(data: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-peer-disconnect-later"><inline classes="std std-ref">peer_disconnect_later</inline></reference>(data: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-peer-disconnect-now"><inline classes="std std-ref">peer_disconnect_now</inline></reference>(data: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-ping"><inline classes="std std-ref">ping</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-ping-interval"><inline classes="std std-ref">ping_interval</inline></reference>(ping_interval: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-reset"><inline classes="std std-ref">reset</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-send"><inline classes="std std-ref">send</inline></reference>(channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, packet: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-set-timeout"><inline classes="std std-ref">set_timeout</inline></reference>(timeout: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, timeout_min: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, timeout_max: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enetpacketpeer-method-throttle-configure"><inline classes="std std-ref">throttle_configure</inline></reference>(interval: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, acceleration: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, deceleration: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="枚举">
            <title>枚举</title>
            <target refid="enum-enetpacketpeer-peerstate"></target>
            <paragraph classes="classref-enumeration" ids="enum-enetpacketpeer-peerstate" names="enum_enetpacketpeer_peerstate">enum <strong>PeerState</strong>: <reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-enetpacketpeer-constant-state-disconnected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-disconnected" names="class_enetpacketpeer_constant_state_disconnected"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_DISCONNECTED</strong> = <literal>0</literal></paragraph>
            <paragraph>该对等体已断开连接。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-connecting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-connecting" names="class_enetpacketpeer_constant_state_connecting"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_CONNECTING</strong> = <literal>1</literal></paragraph>
            <paragraph>该对等体正在尝试连接。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-acknowledging-connect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-acknowledging-connect" names="class_enetpacketpeer_constant_state_acknowledging_connect"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_ACKNOWLEDGING_CONNECT</strong> = <literal>2</literal></paragraph>
            <paragraph>该对等体已确认连接请求。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-connection-pending"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-connection-pending" names="class_enetpacketpeer_constant_state_connection_pending"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_CONNECTION_PENDING</strong> = <literal>3</literal></paragraph>
            <paragraph>该对等体正在连接。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-connection-succeeded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-connection-succeeded" names="class_enetpacketpeer_constant_state_connection_succeeded"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_CONNECTION_SUCCEEDED</strong> = <literal>4</literal></paragraph>
            <paragraph>该对等体已成功连接，但还没有准备好进行通讯（<reference internal="True" refid="class-enetpacketpeer-constant-state-connected"><inline classes="std std-ref">STATE_CONNECTED</inline></reference>）。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-connected"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-connected" names="class_enetpacketpeer_constant_state_connected"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_CONNECTED</strong> = <literal>5</literal></paragraph>
            <paragraph>该对等体已连接，可以进行通讯。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-disconnect-later"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-disconnect-later" names="class_enetpacketpeer_constant_state_disconnect_later"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_DISCONNECT_LATER</strong> = <literal>6</literal></paragraph>
            <paragraph>该对等体在没有更多的外发数据包可以发送后，将被预定断开连接。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-disconnecting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-disconnecting" names="class_enetpacketpeer_constant_state_disconnecting"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_DISCONNECTING</strong> = <literal>7</literal></paragraph>
            <paragraph>该对等体正在断开连接。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-acknowledging-disconnect"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-acknowledging-disconnect" names="class_enetpacketpeer_constant_state_acknowledging_disconnect"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_ACKNOWLEDGING_DISCONNECT</strong> = <literal>8</literal></paragraph>
            <paragraph>该对等体已确认断开请求。</paragraph>
            <target refid="class-enetpacketpeer-constant-state-zombie"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-state-zombie" names="class_enetpacketpeer_constant_state_zombie"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>STATE_ZOMBIE</strong> = <literal>9</literal></paragraph>
            <paragraph>该对等体已丢失连接，但并未真正断开连接（因为该对等体还没有对断开连接请求进行确认）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-enetpacketpeer-peerstatistic"></target>
            <paragraph classes="classref-enumeration" ids="enum-enetpacketpeer-peerstatistic" names="enum_enetpacketpeer_peerstatistic">enum <strong>PeerStatistic</strong>: <reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-loss"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-loss" names="class_enetpacketpeer_constant_peer_packet_loss"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_LOSS</strong> = <literal>0</literal></paragraph>
            <paragraph>可靠数据包的平均丢包率，即与 <reference internal="True" refid="class-enetpacketpeer-constant-packet-loss-scale"><inline classes="std std-ref">PACKET_LOSS_SCALE</inline></reference> 的比率。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-loss-variance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-loss-variance" names="class_enetpacketpeer_constant_peer_packet_loss_variance"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_LOSS_VARIANCE</strong> = <literal>1</literal></paragraph>
            <paragraph>丢包方差。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-loss-epoch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-loss-epoch" names="class_enetpacketpeer_constant_peer_packet_loss_epoch"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_LOSS_EPOCH</strong> = <literal>2</literal></paragraph>
            <paragraph>丢包统计信息上一次被更新的时间（从连接开始后的毫秒数）。丢包统计信息更新的时间间隔为 10 秒，自上次统计信息更新以来，至少必须有一个数据包被发送。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-round-trip-time"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-round-trip-time" names="class_enetpacketpeer_constant_peer_round_trip_time"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_ROUND_TRIP_TIME</strong> = <literal>3</literal></paragraph>
            <paragraph>可靠数据包的平均往返时间。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-round-trip-time-variance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-round-trip-time-variance" names="class_enetpacketpeer_constant_peer_round_trip_time_variance"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_ROUND_TRIP_TIME_VARIANCE</strong> = <literal>4</literal></paragraph>
            <paragraph>平均往返时间方差。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-last-round-trip-time"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-last-round-trip-time" names="class_enetpacketpeer_constant_peer_last_round_trip_time"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_LAST_ROUND_TRIP_TIME</strong> = <literal>5</literal></paragraph>
            <paragraph>可靠数据包的记录的上次行程时间。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-last-round-trip-time-variance"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-last-round-trip-time-variance" names="class_enetpacketpeer_constant_peer_last_round_trip_time_variance"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_LAST_ROUND_TRIP_TIME_VARIANCE</strong> = <literal>6</literal></paragraph>
            <paragraph>记录的上次行程时间方差。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-throttle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-throttle" names="class_enetpacketpeer_constant_peer_packet_throttle"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_THROTTLE</strong> = <literal>7</literal></paragraph>
            <paragraph>该对等体的当前节流状态。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-throttle-limit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-throttle-limit" names="class_enetpacketpeer_constant_peer_packet_throttle_limit"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_THROTTLE_LIMIT</strong> = <literal>8</literal></paragraph>
            <paragraph>不应被丢弃的不可靠数据包的最大数量。这个值总是大于或等于 <literal>1</literal> 。初始值等于 <reference internal="True" refid="class-enetpacketpeer-constant-packet-throttle-scale"><inline classes="std std-ref">PACKET_THROTTLE_SCALE</inline></reference>。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-throttle-counter"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-throttle-counter" names="class_enetpacketpeer_constant_peer_packet_throttle_counter"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_THROTTLE_COUNTER</strong> = <literal>9</literal></paragraph>
            <paragraph>用于增加数据包节流计数器的内部值。该值被硬编码为 <literal>7</literal> 且无法更改。你可能想查看 <reference internal="True" refid="class-enetpacketpeer-constant-peer-packet-throttle-acceleration"><inline classes="std std-ref">PEER_PACKET_THROTTLE_ACCELERATION</inline></reference>。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-throttle-epoch"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-throttle-epoch" names="class_enetpacketpeer_constant_peer_packet_throttle_epoch"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_THROTTLE_EPOCH</strong> = <literal>10</literal></paragraph>
            <paragraph>节流统计数据上一次被更新的时间（自连接开始以来的毫秒数）。节流统计更新的时间间隔是 <reference internal="True" refid="class-enetpacketpeer-constant-peer-packet-throttle-interval"><inline classes="std std-ref">PEER_PACKET_THROTTLE_INTERVAL</inline></reference>。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-throttle-acceleration"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-throttle-acceleration" names="class_enetpacketpeer_constant_peer_packet_throttle_acceleration"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_THROTTLE_ACCELERATION</strong> = <literal>11</literal></paragraph>
            <paragraph>节流的加速系数。更高的值将使 ENet 更快地适应波动的网络条件，从而导致不可靠的数据包<emphasis>更</emphasis>频繁地被发送。默认值为 <literal>2</literal>。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-throttle-deceleration"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-throttle-deceleration" names="class_enetpacketpeer_constant_peer_packet_throttle_deceleration"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_THROTTLE_DECELERATION</strong> = <literal>12</literal></paragraph>
            <paragraph>节流的减速系数。更高的值将使 ENet 更快地适应波动的网络条件，从而导致不可靠的数据包<emphasis>不会</emphasis>频繁地被发送。默认值为 <literal>2</literal>。</paragraph>
            <target refid="class-enetpacketpeer-constant-peer-packet-throttle-interval"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-enetpacketpeer-constant-peer-packet-throttle-interval" names="class_enetpacketpeer_constant_peer_packet_throttle_interval"><reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference> <strong>PEER_PACKET_THROTTLE_INTERVAL</strong> = <literal>13</literal></paragraph>
            <paragraph>测量最低平均往返时间的时间间隔，供节流机制使用（单位：毫秒）。默认值为 <literal>5000</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="常量">
            <title>常量</title>
            <target refid="class-enetpacketpeer-constant-packet-loss-scale"></target>
            <paragraph classes="classref-constant" ids="class-enetpacketpeer-constant-packet-loss-scale" names="class_enetpacketpeer_constant_packet_loss_scale"><strong>PACKET_LOSS_SCALE</strong> = <literal>65536</literal> <reference internal="True" refid="class-enetpacketpeer-constant-packet-loss-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>丢包的参考尺度。请参阅 <reference internal="True" refid="class-enetpacketpeer-method-get-statistic"><inline classes="std std-ref">get_statistic</inline></reference> 和 <reference internal="True" refid="class-enetpacketpeer-constant-peer-packet-loss"><inline classes="std std-ref">PEER_PACKET_LOSS</inline></reference>。</paragraph>
            <target refid="class-enetpacketpeer-constant-packet-throttle-scale"></target>
            <paragraph classes="classref-constant" ids="class-enetpacketpeer-constant-packet-throttle-scale" names="class_enetpacketpeer_constant_packet_throttle_scale"><strong>PACKET_THROTTLE_SCALE</strong> = <literal>32</literal> <reference internal="True" refid="class-enetpacketpeer-constant-packet-throttle-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>节流配置的参考值。默认值为 <literal>32</literal>。 请参阅 <reference internal="True" refid="class-enetpacketpeer-method-throttle-configure"><inline classes="std std-ref">throttle_configure</inline></reference>。</paragraph>
            <target refid="class-enetpacketpeer-constant-flag-reliable"></target>
            <paragraph classes="classref-constant" ids="class-enetpacketpeer-constant-flag-reliable" names="class_enetpacketpeer_constant_flag_reliable"><strong>FLAG_RELIABLE</strong> = <literal>1</literal> <reference internal="True" refid="class-enetpacketpeer-constant-flag-reliable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将要发送的数据包标记为可靠。</paragraph>
            <target refid="class-enetpacketpeer-constant-flag-unsequenced"></target>
            <paragraph classes="classref-constant" ids="class-enetpacketpeer-constant-flag-unsequenced" names="class_enetpacketpeer_constant_flag_unsequenced"><strong>FLAG_UNSEQUENCED</strong> = <literal>2</literal> <reference internal="True" refid="class-enetpacketpeer-constant-flag-unsequenced"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将要发送的数据包标记为无序（不可靠）。</paragraph>
            <target refid="class-enetpacketpeer-constant-flag-unreliable-fragment"></target>
            <paragraph classes="classref-constant" ids="class-enetpacketpeer-constant-flag-unreliable-fragment" names="class_enetpacketpeer_constant_flag_unreliable_fragment"><strong>FLAG_UNRELIABLE_FRAGMENT</strong> = <literal>8</literal> <reference internal="True" refid="class-enetpacketpeer-constant-flag-unreliable-fragment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将要发送的数据包标记为不可靠，即使数据包太大且需要分片（增加其被丢弃的机会）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-enetpacketpeer-method-get-channels"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-get-channels" names="class_enetpacketpeer_method_get_channels"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_channels</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enetpacketpeer-method-get-channels"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回为与对等体通信而分配的通道数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-get-remote-address"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-get-remote-address" names="class_enetpacketpeer_method_get_remote_address"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_remote_address</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enetpacketpeer-method-get-remote-address"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该对等体的 IP 地址。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-get-remote-port"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-get-remote-port" names="class_enetpacketpeer_method_get_remote_port"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_remote_port</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enetpacketpeer-method-get-remote-port"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该对等体的远程端口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-get-state"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-get-state" names="class_enetpacketpeer_method_get_state"><reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference> <strong>get_state</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enetpacketpeer-method-get-state"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该对等体的当前状态。见 <reference internal="True" refid="enum-enetpacketpeer-peerstate"><inline classes="std std-ref">PeerState</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-get-statistic"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-get-statistic" names="class_enetpacketpeer_method_get_statistic"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_statistic</strong>(statistic: <reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference>) <reference internal="True" refid="class-enetpacketpeer-method-get-statistic"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回此对等体请求的 <literal>statistic</literal>。见 <reference internal="True" refid="enum-enetpacketpeer-peerstatistic"><inline classes="std std-ref">PeerStatistic</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-is-active"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-is-active" names="class_enetpacketpeer_method_is_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_active</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enetpacketpeer-method-is-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果对等体当前处于活动状态（即关联的 <reference internal="True" refuri="class_enetconnection#class-enetconnection"><inline classes="std std-ref">ENetConnection</inline></reference> 仍然有效），则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-peer-disconnect"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-peer-disconnect" names="class_enetpacketpeer_method_peer_disconnect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>peer_disconnect</strong>(data: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-enetpacketpeer-method-peer-disconnect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求与对等体断开连接。一旦断开连接完成，在 <reference internal="True" refuri="class_enetconnection#class-enetconnection-method-service"><inline classes="std std-ref">ENetConnection.service</inline></reference> 期间，将生成一个 <reference internal="True" refuri="class_enetconnection#class-enetconnection-constant-event-disconnect"><inline classes="std std-ref">ENetConnection.EVENT_DISCONNECT</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-peer-disconnect-later"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-peer-disconnect-later" names="class_enetpacketpeer_method_peer_disconnect_later"><abbreviation explanation="无返回值。">void</abbreviation> <strong>peer_disconnect_later</strong>(data: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-enetpacketpeer-method-peer-disconnect-later"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请求与对等体断开连接，但仅在发送完所有队列的传出数据包之后。一旦断开连接完成，在 <reference internal="True" refuri="class_enetconnection#class-enetconnection-method-service"><inline classes="std std-ref">ENetConnection.service</inline></reference> 期间，将生成一个 <reference internal="True" refuri="class_enetconnection#class-enetconnection-constant-event-disconnect"><inline classes="std std-ref">ENetConnection.EVENT_DISCONNECT</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-peer-disconnect-now"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-peer-disconnect-now" names="class_enetpacketpeer_method_peer_disconnect_now"><abbreviation explanation="无返回值。">void</abbreviation> <strong>peer_disconnect_now</strong>(data: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-enetpacketpeer-method-peer-disconnect-now"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制立即断开与对等体的连接。不会生成 <reference internal="True" refuri="class_enetconnection#class-enetconnection-constant-event-disconnect"><inline classes="std std-ref">ENetConnection.EVENT_DISCONNECT</inline></reference>。不保证外部对等体会收到断开连接通知，并会在从此函数返回后立即重置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-ping"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-ping" names="class_enetpacketpeer_method_ping"><abbreviation explanation="无返回值。">void</abbreviation> <strong>ping</strong>() <reference internal="True" refid="class-enetpacketpeer-method-ping"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>向对等体发送 ping 请求。ENet 会定期自动 ping 所有连接的对等体，但也可以手动调用此函数，确保进行更频繁的 ping 请求。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-ping-interval"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-ping-interval" names="class_enetpacketpeer_method_ping_interval"><abbreviation explanation="无返回值。">void</abbreviation> <strong>ping_interval</strong>(ping_interval: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-enetpacketpeer-method-ping-interval"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置向对等体发送 ping 的间隔 <literal>ping_interval</literal>，单位为毫秒。Ping 既用于监控连接的有效性，也用于在低流量期间动态调整节流，以便在流量高峰期节流具有合理的响应能力。默认的 ping 间隔为 <literal>500</literal> 毫秒。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-reset"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-reset" names="class_enetpacketpeer_method_reset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>reset</strong>() <reference internal="True" refid="class-enetpacketpeer-method-reset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>强制断开对等体。对等体代表的外部主机不会收到断开连接的通知，并且会在与本地主机的连接上超时。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-send"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-send" names="class_enetpacketpeer_method_send"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>send</strong>(channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, packet: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>, flags: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-enetpacketpeer-method-send"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将数据包 <literal>packet</literal> 加入通过通道 <literal>channel</literal> 发送的队列。可用的数据包标志见 <literal>FLAG_*</literal> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-set-timeout"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-set-timeout" names="class_enetpacketpeer_method_set_timeout"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_timeout</strong>(timeout: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, timeout_min: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, timeout_max: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-enetpacketpeer-method-set-timeout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置对等体的超时参数。超时参数控制对等体因无法确认可靠流量而超时的方式和时间。超时值以毫秒表示。</paragraph>
            <paragraph><literal>timeout</literal> 是一个系数，乘以基于平均往返时间的值，将确定可靠数据包的超时限制。当达到该限制时，超时将加倍，如果该限制已达到 <literal>timeout_min</literal>，则对等体将断开连接。另一方面，<literal>timeout_max</literal> 参数定义了一个固定的超时时间，在该时间内必须确认所有数据包，否则对等体将被丢弃。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enetpacketpeer-method-throttle-configure"></target>
            <paragraph classes="classref-method" ids="class-enetpacketpeer-method-throttle-configure" names="class_enetpacketpeer_method_throttle_configure"><abbreviation explanation="无返回值。">void</abbreviation> <strong>throttle_configure</strong>(interval: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, acceleration: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, deceleration: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-enetpacketpeer-method-throttle-configure"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为对等体配置节流参数。</paragraph>
            <paragraph>不可靠的数据包会被 ENet 丢弃，以应对与对等体的互联网连接的各种情况。节流表示一个不可靠数据包不应被丢弃并因此由 ENet 将其发送到对等体的概率。通过测量指定 <literal>interval</literal> 内可靠数据包往返时间的波动，ENet 将按照 <literal>acceleration</literal> 参数中指定的量增加概率，或者按照 <literal>deceleration</literal> 参数中指定的量降低概率（两者都是与 <reference internal="True" refid="class-enetpacketpeer-constant-packet-throttle-scale"><inline classes="std std-ref">PACKET_THROTTLE_SCALE</inline></reference> 的比率）。</paragraph>
            <paragraph>当节流的值为 <reference internal="True" refid="class-enetpacketpeer-constant-packet-throttle-scale"><inline classes="std std-ref">PACKET_THROTTLE_SCALE</inline></reference> 时，ENet 不会丢弃任何不可靠的数据包，因此所有不可靠数据包以 100% 的概率将被发送。</paragraph>
            <paragraph>当节流的值为 <literal>0</literal> 时，ENet 将丢弃所有不可靠的数据包，因此所有不可靠数据包以 0% 的概率将被发送。</paragraph>
            <paragraph>节流的中间值表示发送不可靠数据包的 0% 到 100% 之间的中间概率。考虑本地和外部主机的带宽限制，以确定节流概率的合理限制，即使在最好的条件下也不应超过该限制。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
