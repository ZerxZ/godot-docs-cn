<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_navigationpolygon.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/NavigationPolygon.xml.</comment>
    <target refid="class-navigationpolygon"></target>
    <section ids="navigationpolygon class-navigationpolygon" names="navigationpolygon class_navigationpolygon">
        <title>NavigationPolygon</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>2D 导航网格，描述用于寻路的可穿越表面。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>导航网格可以通过在 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d"><inline classes="std std-ref">NavigationServer2D</inline></reference> 的帮助下烘焙它来创建，也可以通过手动添加顶点和凸多边形索引数组来创建。</paragraph>
            <paragraph>要烘焙导航网格，至少需要添加一个轮廓来定义烘焙区域的外部边界。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var new_navigation_mesh = NavigationPolygon.new()
var bounding_outline = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
new_navigation_mesh.add_outline(bounding_outline)
NavigationServer2D.bake_from_source_geometry_data(new_navigation_mesh, NavigationMeshSourceGeometryData2D.new());
$NavigationRegion2D.navigation_polygon = new_navigation_mesh</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var newNavigationMesh = new NavigationPolygon();
var boundingOutline = new Vector2[] { new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0) };
newNavigationMesh.AddOutline(boundingOutline);
NavigationServer2D.BakeFromSourceGeometryData(newNavigationMesh, new NavigationMeshSourceGeometryData2D());
GetNode&lt;NavigationRegion2D&gt;("NavigationRegion2D").NavigationPolygon = newNavigationMesh;</literal_block>
                </div>
            </container>
            <paragraph>手动添加顶点和多边形索引。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var new_navigation_mesh = NavigationPolygon.new()
var new_vertices = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
new_navigation_mesh.vertices = new_vertices
var new_polygon_indices = PackedInt32Array([0, 1, 2, 3])
new_navigation_mesh.add_polygon(new_polygon_indices)
$NavigationRegion2D.navigation_polygon = new_navigation_mesh</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var newNavigationMesh = new NavigationPolygon();
var newVertices = new Vector2[] { new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0) };
newNavigationMesh.Vertices = newVertices;
var newPolygonIndices = new int[] { 0, 1, 2, 3 };
newNavigationMesh.AddPolygon(newPolygonIndices);
GetNode&lt;NavigationRegion2D&gt;("NavigationRegion2D").NavigationPolygon = newNavigationMesh;</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="2D 导航演示" refuri="https://godotengine.org/asset-library/asset/117">2D 导航演示</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/navigation/navigation_using_navigationmeshes"><inline classes="doc">使用 NavigationMesh</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="70"></colspec>
                    <colspec colwidth="96"></colspec>
                    <colspec colwidth="49"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-property-agent-radius"><inline classes="std std-ref">agent_radius</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>10.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-property-cell-size"><inline classes="std std-ref">cell_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-property-parsed-collision-mask"><inline classes="std std-ref">parsed_collision_mask</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4294967295</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-property-parsed-geometry-type"><inline classes="std std-ref">parsed_geometry_type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-property-source-geometry-group-name"><inline classes="std std-ref">source_geometry_group_name</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>&amp;"navigation_polygon_source_geometry_group"</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-property-source-geometry-mode"><inline classes="std std-ref">source_geometry_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="53"></colspec>
                    <colspec colwidth="183"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-add-outline"><inline classes="std std-ref">add_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> outline <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-add-outline-at-index"><inline classes="std std-ref">add_outline_at_index</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> outline, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-add-polygon"><inline classes="std std-ref">add_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> polygon <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-clear"><inline classes="std std-ref">clear</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-clear-outlines"><inline classes="std std-ref">clear_outlines</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-clear-polygons"><inline classes="std std-ref">clear_polygons</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-get-navigation-mesh"><inline classes="std std-ref">get_navigation_mesh</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-get-outline"><inline classes="std std-ref">get_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-get-outline-count"><inline classes="std std-ref">get_outline_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-get-parsed-collision-mask-value"><inline classes="std std-ref">get_parsed_collision_mask_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-get-polygon"><inline classes="std std-ref">get_polygon</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-get-polygon-count"><inline classes="std std-ref">get_polygon_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-get-vertices"><inline classes="std std-ref">get_vertices</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-make-polygons-from-outlines"><inline classes="std std-ref">make_polygons_from_outlines</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-remove-outline"><inline classes="std std-ref">remove_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-set-outline"><inline classes="std std-ref">set_outline</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> outline <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-set-parsed-collision-mask-value"><inline classes="std std-ref">set_parsed_collision_mask_value</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-navigationpolygon-method-set-vertices"><inline classes="std std-ref">set_vertices</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> vertices <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-navigationpolygon-parsedgeometrytype"></target>
            <paragraph classes="classref-enumeration" ids="enum-navigationpolygon-parsedgeometrytype" names="enum_navigationpolygon_parsedgeometrytype">enum <strong>ParsedGeometryType</strong>:</paragraph>
            <target refid="class-navigationpolygon-constant-parsed-geometry-mesh-instances"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-parsed-geometry-mesh-instances" names="class_navigationpolygon_constant_parsed_geometry_mesh_instances"><reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_MESH_INSTANCES</strong> = <literal>0</literal></paragraph>
            <paragraph>将网格实例解析为障碍几何体。这包括 <reference internal="True" refuri="class_polygon2d#class-polygon2d"><inline classes="std std-ref">Polygon2D</inline></reference>、<reference internal="True" refuri="class_meshinstance2d#class-meshinstance2d"><inline classes="std std-ref">MeshInstance2D</inline></reference>、<reference internal="True" refuri="class_multimeshinstance2d#class-multimeshinstance2d"><inline classes="std std-ref">MultiMeshInstance2D</inline></reference> 和 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 节点。</paragraph>
            <paragraph>仅当网格使用 2D 顶点表面格式时才会对其进行解析。</paragraph>
            <target refid="class-navigationpolygon-constant-parsed-geometry-static-colliders"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-parsed-geometry-static-colliders" names="class_navigationpolygon_constant_parsed_geometry_static_colliders"><reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_STATIC_COLLIDERS</strong> = <literal>1</literal></paragraph>
            <paragraph>将 <reference internal="True" refuri="class_staticbody2d#class-staticbody2d"><inline classes="std std-ref">StaticBody2D</inline></reference> 和 <reference internal="True" refuri="class_tilemap#class-tilemap"><inline classes="std std-ref">TileMap</inline></reference> 碰撞器解析为障碍几何体。碰撞器应在由 <reference internal="True" refid="class-navigationpolygon-property-parsed-collision-mask"><inline classes="std std-ref">parsed_collision_mask</inline></reference> 指定的层中。</paragraph>
            <target refid="class-navigationpolygon-constant-parsed-geometry-both"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-parsed-geometry-both" names="class_navigationpolygon_constant_parsed_geometry_both"><reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_BOTH</strong> = <literal>2</literal></paragraph>
            <paragraph><reference internal="True" refid="class-navigationpolygon-constant-parsed-geometry-mesh-instances"><inline classes="std std-ref">PARSED_GEOMETRY_MESH_INSTANCES</inline></reference> 和 <reference internal="True" refid="class-navigationpolygon-constant-parsed-geometry-static-colliders"><inline classes="std std-ref">PARSED_GEOMETRY_STATIC_COLLIDERS</inline></reference>.</paragraph>
            <target refid="class-navigationpolygon-constant-parsed-geometry-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-parsed-geometry-max" names="class_navigationpolygon_constant_parsed_geometry_max"><reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>PARSED_GEOMETRY_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-navigationpolygon-sourcegeometrymode"></target>
            <paragraph classes="classref-enumeration" ids="enum-navigationpolygon-sourcegeometrymode" names="enum_navigationpolygon_sourcegeometrymode">enum <strong>SourceGeometryMode</strong>:</paragraph>
            <target refid="class-navigationpolygon-constant-source-geometry-root-node-children"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-source-geometry-root-node-children" names="class_navigationpolygon_constant_source_geometry_root_node_children"><reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_ROOT_NODE_CHILDREN</strong> = <literal>0</literal></paragraph>
            <paragraph>在根节点的子节点中递归扫描几何体。</paragraph>
            <target refid="class-navigationpolygon-constant-source-geometry-groups-with-children"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-source-geometry-groups-with-children" names="class_navigationpolygon_constant_source_geometry_groups_with_children"><reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN</strong> = <literal>1</literal></paragraph>
            <paragraph>以递归方式扫描组中的节点及其子节点以获取几何图形。该组由 <reference internal="True" refid="class-navigationpolygon-property-source-geometry-group-name"><inline classes="std std-ref">source_geometry_group_name</inline></reference> 指定。</paragraph>
            <target refid="class-navigationpolygon-constant-source-geometry-groups-explicit"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-source-geometry-groups-explicit" names="class_navigationpolygon_constant_source_geometry_groups_explicit"><reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_GROUPS_EXPLICIT</strong> = <literal>2</literal></paragraph>
            <paragraph>将组中的节点用于几何。该组由 <reference internal="True" refid="class-navigationpolygon-property-source-geometry-group-name"><inline classes="std std-ref">source_geometry_group_name</inline></reference> 指定。</paragraph>
            <target refid="class-navigationpolygon-constant-source-geometry-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-navigationpolygon-constant-source-geometry-max" names="class_navigationpolygon_constant_source_geometry_max"><reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>SOURCE_GEOMETRY_MAX</strong> = <literal>3</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-navigationpolygon-property-agent-radius"></target>
            <paragraph classes="classref-property" ids="class-navigationpolygon-property-agent-radius" names="class_navigationpolygon_property_agent_radius"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>agent_radius</strong> = <literal>10.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_agent_radius</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_agent_radius</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>烘焙导航网格时侵蚀/收缩可行走表面的距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-property-cell-size"></target>
            <paragraph classes="classref-property" ids="class-navigationpolygon-property-cell-size" names="class_navigationpolygon_property_cell_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>cell_size</strong> = <literal>1.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_cell_size</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cell_size</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于将导航网格顶点栅格化的单元格大小。必须与导航地图上的单元格大小相匹配。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-property-parsed-collision-mask"></target>
            <paragraph classes="classref-property" ids="class-navigationpolygon-property-parsed-collision-mask" names="class_navigationpolygon_property_parsed_collision_mask"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>parsed_collision_mask</strong> = <literal>4294967295</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_parsed_collision_mask</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_parsed_collision_mask</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于扫描静态碰撞器的物理层。</paragraph>
            <paragraph>仅在 <reference internal="True" refid="class-navigationpolygon-property-parsed-geometry-type"><inline classes="std std-ref">parsed_geometry_type</inline></reference> 是 <reference internal="True" refid="class-navigationpolygon-constant-parsed-geometry-static-colliders"><inline classes="std std-ref">PARSED_GEOMETRY_STATIC_COLLIDERS</inline></reference> 或 <reference internal="True" refid="class-navigationpolygon-constant-parsed-geometry-both"><inline classes="std std-ref">PARSED_GEOMETRY_BOTH</inline></reference> 时才使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-property-parsed-geometry-type"></target>
            <paragraph classes="classref-property" ids="class-navigationpolygon-property-parsed-geometry-type" names="class_navigationpolygon_property_parsed_geometry_type"><reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>parsed_geometry_type</strong> = <literal>2</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_parsed_geometry_type</strong> <strong>(</strong> <reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference> <strong>get_parsed_geometry_type</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>决定哪种类型的节点可解析为几何图形。可能的取值见 <reference internal="True" refid="enum-navigationpolygon-parsedgeometrytype"><inline classes="std std-ref">ParsedGeometryType</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-property-source-geometry-group-name"></target>
            <paragraph classes="classref-property" ids="class-navigationpolygon-property-source-geometry-group-name" names="class_navigationpolygon_property_source_geometry_group_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>source_geometry_group_name</strong> = <literal>&amp;"navigation_polygon_source_geometry_group"</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_source_geometry_group_name</strong> <strong>(</strong> <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_source_geometry_group_name</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>应被解析以烘焙源几何体的节点的组名称。</paragraph>
            <paragraph>只有当 <reference internal="True" refid="class-navigationpolygon-property-source-geometry-mode"><inline classes="std std-ref">source_geometry_mode</inline></reference> 是 <reference internal="True" refid="class-navigationpolygon-constant-source-geometry-groups-with-children"><inline classes="std std-ref">SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN</inline></reference> 或 <reference internal="True" refid="class-navigationpolygon-constant-source-geometry-groups-explicit"><inline classes="std std-ref">SOURCE_GEOMETRY_GROUPS_EXPLICIT</inline></reference> 时才使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-property-source-geometry-mode"></target>
            <paragraph classes="classref-property" ids="class-navigationpolygon-property-source-geometry-mode" names="class_navigationpolygon_property_source_geometry_mode"><reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>source_geometry_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_source_geometry_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference> <strong>get_source_geometry_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>烘焙时使用的几何体的来源。可能的取值见 <reference internal="True" refid="enum-navigationpolygon-sourcegeometrymode"><inline classes="std std-ref">SourceGeometryMode</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-navigationpolygon-method-add-outline"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-add-outline" names="class_navigationpolygon_method_add_outline">void <strong>add_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> outline <strong>)</strong></paragraph>
            <paragraph>将包含轮廓顶点的 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> 追加到包含所有轮廓的内部数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-add-outline-at-index"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-add-outline-at-index" names="class_navigationpolygon_method_add_outline_at_index">void <strong>add_outline_at_index</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> outline, <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> index <strong>)</strong></paragraph>
            <paragraph>将一个包含轮廓顶点的 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> 添加到包含固定位置处的所有轮廓的内部数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-add-polygon"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-add-polygon" names="class_navigationpolygon_method_add_polygon">void <strong>add_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> polygon <strong>)</strong></paragraph>
            <paragraph>使用调用 <reference internal="True" refid="class-navigationpolygon-method-get-vertices"><inline classes="std std-ref">get_vertices</inline></reference> 得到的顶点的索引添加一个多边形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-clear"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-clear" names="class_navigationpolygon_method_clear">void <strong>clear</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除顶点和多边形索引的内部数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-clear-outlines"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-clear-outlines" names="class_navigationpolygon_method_clear_outlines">void <strong>clear_outlines</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除轮廓数组，但不清除顶点和由顶点创建的多边形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-clear-polygons"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-clear-polygons" names="class_navigationpolygon_method_clear_polygons">void <strong>clear_polygons</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>清除多边形数组，但不清除轮廓和顶点数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-get-navigation-mesh"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-get-navigation-mesh" names="class_navigationpolygon_method_get_navigation_mesh"><reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> <strong>get_navigation_mesh</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>返回由该导航多边形产生的 <reference internal="True" refuri="class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference>。该导航网格可用于使用 <reference internal="True" refuri="class_navigationserver3d#class-navigationserver3d-method-region-set-navigation-mesh"><inline classes="std std-ref">NavigationServer3D.region_set_navigation_mesh</inline></reference> API 直接更新区块的导航网格（因为 2D 在幕后使用 3D 服务器）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-get-outline"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-get-outline" names="class_navigationpolygon_method_get_outline"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>，其中包含在编辑器中或通过脚本创建的轮廓的顶点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-get-outline-count"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-get-outline-count" names="class_navigationpolygon_method_get_outline_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_outline_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回在编辑器或脚本中创建的轮廓的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-get-parsed-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-get-parsed-collision-mask-value" names="class_navigationpolygon_method_get_parsed_collision_mask_value"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_parsed_collision_mask_value</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回 <reference internal="True" refid="class-navigationpolygon-property-parsed-collision-mask"><inline classes="std std-ref">parsed_collision_mask</inline></reference> 中是否启用了指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-get-polygon"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-get-polygon" names="class_navigationpolygon_method_get_polygon"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_polygon</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
            <paragraph>返回创建多边形的顶点索引，形式为 <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-get-polygon-count"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-get-polygon-count" names="class_navigationpolygon_method_get_polygon_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_polygon_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回多边形的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-get-vertices"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-get-vertices" names="class_navigationpolygon_method_get_vertices"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_vertices</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference>，其中包含用于创建多边形的所有顶点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-make-polygons-from-outlines"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-make-polygons-from-outlines" names="class_navigationpolygon_method_make_polygons_from_outlines">void <strong>make_polygons_from_outlines</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>从编辑器中或通过脚本添加的轮廓创建多边形。</paragraph>
            <paragraph><emphasis>已弃用。</emphasis>该函数已弃用，并且可能会在将来的版本中移除。请改用 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d-method-parse-source-geometry-data"><inline classes="std std-ref">NavigationServer2D.parse_source_geometry_data</inline></reference> 和 <reference internal="True" refuri="class_navigationserver2d#class-navigationserver2d-method-bake-from-source-geometry-data"><inline classes="std std-ref">NavigationServer2D.bake_from_source_geometry_data</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-remove-outline"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-remove-outline" names="class_navigationpolygon_method_remove_outline">void <strong>remove_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong></paragraph>
            <paragraph>删除在编辑器或脚本中创建的轮廓。你必须调用 <reference internal="True" refid="class-navigationpolygon-method-make-polygons-from-outlines"><inline classes="std std-ref">make_polygons_from_outlines</inline></reference> 来更新多边形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-set-outline"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-set-outline" names="class_navigationpolygon_method_set_outline">void <strong>set_outline</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx, <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> outline <strong>)</strong></paragraph>
            <paragraph>更改在编辑器或脚本中创建的轮廓。你必须调用 <reference internal="True" refid="class-navigationpolygon-method-make-polygons-from-outlines"><inline classes="std std-ref">make_polygons_from_outlines</inline></reference> 来更新多边形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-set-parsed-collision-mask-value"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-set-parsed-collision-mask-value" names="class_navigationpolygon_method_set_parsed_collision_mask_value">void <strong>set_parsed_collision_mask_value</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> layer_number, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
            <paragraph>根据 <literal>value</literal>，启用或禁用 <reference internal="True" refid="class-navigationpolygon-property-parsed-collision-mask"><inline classes="std std-ref">parsed_collision_mask</inline></reference> 中指定的层，给定的 <literal>layer_number</literal> 应在 1 和 32 之间。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-navigationpolygon-method-set-vertices"></target>
            <paragraph classes="classref-method" ids="class-navigationpolygon-method-set-vertices" names="class_navigationpolygon_method_set_vertices">void <strong>set_vertices</strong> <strong>(</strong> <reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> vertices <strong>)</strong></paragraph>
            <paragraph>设置顶点，可以使用 <reference internal="True" refid="class-navigationpolygon-method-add-polygon"><inline classes="std std-ref">add_polygon</inline></reference> 方法对其进行索引，创建多边形。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
