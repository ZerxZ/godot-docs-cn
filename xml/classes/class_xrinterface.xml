<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_xrinterface.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/XRInterface.xml.</comment>
    <target refid="class-xrinterface"></target>
    <section ids="xrinterface class-xrinterface" names="xrinterface class_xrinterface">
        <title>XRInterface</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph><strong>派生：</strong> <reference internal="True" refuri="class_mobilevrinterface#class-mobilevrinterface"><inline classes="std std-ref">MobileVRInterface</inline></reference>, <reference internal="True" refuri="class_openxrinterface#class-openxrinterface"><inline classes="std std-ref">OpenXRInterface</inline></reference>, <reference internal="True" refuri="class_webxrinterface#class-webxrinterface"><inline classes="std std-ref">WebXRInterface</inline></reference>, <reference internal="True" refuri="class_xrinterfaceextension#class-xrinterfaceextension"><inline classes="std std-ref">XRInterfaceExtension</inline></reference></paragraph>
        <paragraph>XR 接口实现的基类。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>需要实现该类以使 Godot 可以使用 AR 或 VR 平台，并且这些应作为 C++ 模块或 GDExtension 模块实现。部分接口公开给 GDScript，因此可以检测、启用和配置 AR 或 VR 平台。</paragraph>
            <paragraph>接口应该以这样一种方式编写，只要简单地启用它们就会提供一个工作设置。可以通过 <reference internal="True" refuri="class_xrserver#class-xrserver"><inline classes="std std-ref">XRServer</inline></reference> 查询可用的接口。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/xr/index"><inline classes="doc">XR 文档索引</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="98"></colspec>
                    <colspec colwidth="11"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-property-ar-is-anchor-detection-enabled"><inline classes="std std-ref">ar_is_anchor_detection_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-property-environment-blend-mode"><inline classes="std std-ref">environment_blend_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-property-interface-is-primary"><inline classes="std std-ref">interface_is_primary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-property-xr-play-area-mode"><inline classes="std std-ref">xr_play_area_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="56"></colspec>
                    <colspec colwidth="336"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-camera-feed-id"><inline classes="std std-ref">get_camera_feed_id</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-capabilities"><inline classes="std std-ref">get_capabilities</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-name"><inline classes="std std-ref">get_name</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-play-area"><inline classes="std std-ref">get_play_area</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-projection-for-view"><inline classes="std std-ref">get_projection_for_view</inline></reference>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, aspect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-render-target-size"><inline classes="std std-ref">get_render_target_size</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-supported-environment-blend-modes"><inline classes="std std-ref">get_supported_environment_blend_modes</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-system-info"><inline classes="std std-ref">get_system_info</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-tracking-status"><inline classes="std std-ref">get_tracking_status</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-transform-for-view"><inline classes="std std-ref">get_transform_for_view</inline></reference>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, cam_transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-get-view-count"><inline classes="std std-ref">get_view_count</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-initialize"><inline classes="std std-ref">initialize</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-is-initialized"><inline classes="std std-ref">is_initialized</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-is-passthrough-enabled"><inline classes="std std-ref">is_passthrough_enabled</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-is-passthrough-supported"><inline classes="std std-ref">is_passthrough_supported</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-set-environment-blend-mode"><inline classes="std std-ref">set_environment_blend_mode</inline></reference>(mode: <reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-set-play-area-mode"><inline classes="std std-ref">set_play_area_mode</inline></reference>(mode: <reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-start-passthrough"><inline classes="std std-ref">start_passthrough</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-stop-passthrough"><inline classes="std std-ref">stop_passthrough</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-supports-play-area-mode"><inline classes="std std-ref">supports_play_area_mode</inline></reference>(mode: <reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-trigger-haptic-pulse"><inline classes="std std-ref">trigger_haptic_pulse</inline></reference>(action_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, frequency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delay_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-xrinterface-method-uninitialize"><inline classes="std std-ref">uninitialize</inline></reference>()</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-xrinterface-signal-play-area-changed"></target>
            <paragraph classes="classref-signal" ids="class-xrinterface-signal-play-area-changed" names="class_xrinterface_signal_play_area_changed"><strong>play_area_changed</strong>(mode: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-xrinterface-signal-play-area-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当游玩区域改变时发出。这可能是玩家重置边界、进入新的游玩区域、更改游玩区域模式、重置其头戴式设备方向，或者世界比例改变的结果。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-xrinterface-capabilities"></target>
            <paragraph classes="classref-enumeration" ids="enum-xrinterface-capabilities" names="enum_xrinterface_capabilities">enum <strong>Capabilities</strong>: <reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-xrinterface-constant-xr-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-none" names="class_xrinterface_constant_xr_none"><reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> <strong>XR_NONE</strong> = <literal>0</literal></paragraph>
            <paragraph>没有 XR 功能。</paragraph>
            <target refid="class-xrinterface-constant-xr-mono"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-mono" names="class_xrinterface_constant_xr_mono"><reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> <strong>XR_MONO</strong> = <literal>1</literal></paragraph>
            <paragraph>此接口可以与正常的渲染输出一起工作（非基于 HMD 的 AR）。</paragraph>
            <target refid="class-xrinterface-constant-xr-stereo"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-stereo" names="class_xrinterface_constant_xr_stereo"><reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> <strong>XR_STEREO</strong> = <literal>2</literal></paragraph>
            <paragraph>该接口支持立体渲染。</paragraph>
            <target refid="class-xrinterface-constant-xr-quad"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-quad" names="class_xrinterface_constant_xr_quad"><reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> <strong>XR_QUAD</strong> = <literal>4</literal></paragraph>
            <paragraph>该接口支持四边形渲染（Godot 尚不支持）。</paragraph>
            <target refid="class-xrinterface-constant-xr-vr"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-vr" names="class_xrinterface_constant_xr_vr"><reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> <strong>XR_VR</strong> = <literal>8</literal></paragraph>
            <paragraph>该接口支持 VR。</paragraph>
            <target refid="class-xrinterface-constant-xr-ar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-ar" names="class_xrinterface_constant_xr_ar"><reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> <strong>XR_AR</strong> = <literal>16</literal></paragraph>
            <paragraph>该接口支持 AR（视频背景和真实世界跟踪）。</paragraph>
            <target refid="class-xrinterface-constant-xr-external"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-external" names="class_xrinterface_constant_xr_external"><reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> <strong>XR_EXTERNAL</strong> = <literal>32</literal></paragraph>
            <paragraph>该接口输出至外部设备。如果使用的是主视口，则屏幕上的输出是未经修改的左眼或右眼缓冲区（如果视口大小未更改至与 <reference internal="True" refid="class-xrinterface-method-get-render-target-size"><inline classes="std std-ref">get_render_target_size</inline></reference> 相同的纵横比，则会进行拉伸）。使用单独的视口节点能够将主视口让出来做别的事情。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-xrinterface-trackingstatus"></target>
            <paragraph classes="classref-enumeration" ids="enum-xrinterface-trackingstatus" names="enum_xrinterface_trackingstatus">enum <strong>TrackingStatus</strong>: <reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-xrinterface-constant-xr-normal-tracking"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-normal-tracking" names="class_xrinterface_constant_xr_normal_tracking"><reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference> <strong>XR_NORMAL_TRACKING</strong> = <literal>0</literal></paragraph>
            <paragraph>追踪行为符合预期。</paragraph>
            <target refid="class-xrinterface-constant-xr-excessive-motion"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-excessive-motion" names="class_xrinterface_constant_xr_excessive_motion"><reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference> <strong>XR_EXCESSIVE_MOTION</strong> = <literal>1</literal></paragraph>
            <paragraph>过度运动会阻碍追踪（玩家的移动速度大于追踪的速度）。</paragraph>
            <target refid="class-xrinterface-constant-xr-insufficient-features"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-insufficient-features" names="class_xrinterface_constant_xr_insufficient_features"><reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference> <strong>XR_INSUFFICIENT_FEATURES</strong> = <literal>2</literal></paragraph>
            <paragraph>跟踪受到功能不足的阻碍，太暗（对于基于相机的跟踪），玩家被阻碍等。</paragraph>
            <target refid="class-xrinterface-constant-xr-unknown-tracking"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-unknown-tracking" names="class_xrinterface_constant_xr_unknown_tracking"><reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference> <strong>XR_UNKNOWN_TRACKING</strong> = <literal>3</literal></paragraph>
            <paragraph>我们不知道跟踪的状态，或者这个接口未提供反馈。</paragraph>
            <target refid="class-xrinterface-constant-xr-not-tracking"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-not-tracking" names="class_xrinterface_constant_xr_not_tracking"><reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference> <strong>XR_NOT_TRACKING</strong> = <literal>4</literal></paragraph>
            <paragraph>追踪功能失效（相机未插电或被遮挡、灯塔关闭，等等）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-xrinterface-playareamode"></target>
            <paragraph classes="classref-enumeration" ids="enum-xrinterface-playareamode" names="enum_xrinterface_playareamode">enum <strong>PlayAreaMode</strong>: <reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-xrinterface-constant-xr-play-area-unknown"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-play-area-unknown" names="class_xrinterface_constant_xr_play_area_unknown"><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>XR_PLAY_AREA_UNKNOWN</strong> = <literal>0</literal></paragraph>
            <paragraph>游玩区域模式未设置或不可用。</paragraph>
            <target refid="class-xrinterface-constant-xr-play-area-3dof"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-play-area-3dof" names="class_xrinterface_constant_xr_play_area_3dof"><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>XR_PLAY_AREA_3DOF</strong> = <literal>1</literal></paragraph>
            <paragraph>游玩区域仅支持方向跟踪，不支持位置跟踪，区域以玩家为中心。</paragraph>
            <target refid="class-xrinterface-constant-xr-play-area-sitting"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-play-area-sitting" names="class_xrinterface_constant_xr_play_area_sitting"><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>XR_PLAY_AREA_SITTING</strong> = <literal>2</literal></paragraph>
            <paragraph>玩家处于坐姿，提供有限的位置跟踪，玩家周围有固定的防护。</paragraph>
            <target refid="class-xrinterface-constant-xr-play-area-roomscale"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-play-area-roomscale" names="class_xrinterface_constant_xr_play_area_roomscale"><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>XR_PLAY_AREA_ROOMSCALE</strong> = <literal>3</literal></paragraph>
            <paragraph>玩家可以自由移动，提供完整的位置跟踪。</paragraph>
            <target refid="class-xrinterface-constant-xr-play-area-stage"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-play-area-stage" names="class_xrinterface_constant_xr_play_area_stage"><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>XR_PLAY_AREA_STAGE</strong> = <literal>4</literal></paragraph>
            <paragraph>与 <reference internal="True" refid="class-xrinterface-constant-xr-play-area-roomscale"><inline classes="std std-ref">XR_PLAY_AREA_ROOMSCALE</inline></reference> 相同，但是原点固定在物理空间的中心。在这个模式下，可能会禁用通过 <reference internal="True" refuri="class_xrserver#class-xrserver-method-center-on-hmd"><inline classes="std std-ref">XRServer.center_on_hmd</inline></reference> 进行的系统级别的中心重定位。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-xrinterface-environmentblendmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-xrinterface-environmentblendmode" names="enum_xrinterface_environmentblendmode">enum <strong>EnvironmentBlendMode</strong>: <reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-xrinterface-constant-xr-env-blend-mode-opaque"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-env-blend-mode-opaque" names="class_xrinterface_constant_xr_env_blend_mode_opaque"><reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference> <strong>XR_ENV_BLEND_MODE_OPAQUE</strong> = <literal>0</literal></paragraph>
            <paragraph>不透明混合模式。通常用于 VR 设备。</paragraph>
            <target refid="class-xrinterface-constant-xr-env-blend-mode-additive"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-env-blend-mode-additive" names="class_xrinterface_constant_xr_env_blend_mode_additive"><reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference> <strong>XR_ENV_BLEND_MODE_ADDITIVE</strong> = <literal>1</literal></paragraph>
            <paragraph>加法混合模式。通常用于带有穿透功能的 AR 或 VR 设备。</paragraph>
            <target refid="class-xrinterface-constant-xr-env-blend-mode-alpha-blend"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-xrinterface-constant-xr-env-blend-mode-alpha-blend" names="class_xrinterface_constant_xr_env_blend_mode_alpha_blend"><reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference> <strong>XR_ENV_BLEND_MODE_ALPHA_BLEND</strong> = <literal>2</literal></paragraph>
            <paragraph>Alpha 混合模式。通常用于带有穿透功能的 AR 或 VR 设备。Alpha 通道控制穿透的可见程度。Alpha 为 0.0 表示穿透可见、该像素处于加法模式。Alpha 为 1.0 表示穿透不可见，该像素处于不透明模式。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-xrinterface-property-ar-is-anchor-detection-enabled"></target>
            <paragraph classes="classref-property" ids="class-xrinterface-property-ar-is-anchor-detection-enabled" names="class_xrinterface_property_ar_is_anchor_detection_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>ar_is_anchor_detection_enabled</strong> = <literal>false</literal> <reference internal="True" refid="class-xrinterface-property-ar-is-anchor-detection-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_anchor_detection_is_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_anchor_detection_is_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在 AR 接口上，如果启用锚点检测，则为 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-property-environment-blend-mode"></target>
            <paragraph classes="classref-property" ids="class-xrinterface-property-environment-blend-mode" names="class_xrinterface_property_environment_blend_mode"><reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference> <strong>environment_blend_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-xrinterface-property-environment-blend-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>set_environment_blend_mode</strong>(mode: <reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference> <strong>get_environment_blend_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定 XR 应如何融入环境。这是特定于某些 AR 和直通设备的，其中相机图像由 XR 合成器混合。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-property-interface-is-primary"></target>
            <paragraph classes="classref-property" ids="class-xrinterface-property-interface-is-primary" names="class_xrinterface_property_interface_is_primary"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>interface_is_primary</strong> = <literal>false</literal> <reference internal="True" refid="class-xrinterface-property-interface-is-primary"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_primary</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_primary</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>true</literal> 如果这是个主接口。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-property-xr-play-area-mode"></target>
            <paragraph classes="classref-property" ids="class-xrinterface-property-xr-play-area-mode" names="class_xrinterface_property_xr_play_area_mode"><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>xr_play_area_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-xrinterface-property-xr-play-area-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>set_play_area_mode</strong>(mode: <reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference> <strong>get_play_area_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该接口的游玩区域模式。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-xrinterface-method-get-camera-feed-id"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-camera-feed-id" names="class_xrinterface_method_get_camera_feed_id"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_camera_feed_id</strong>() <reference internal="True" refid="class-xrinterface-method-get-camera-feed-id"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果该 AR 接口要求将相机画面作为背景显示，那么该方法就会返回该接口 <reference internal="True" refuri="class_cameraserver#class-cameraserver"><inline classes="std std-ref">CameraServer</inline></reference> 的画面 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-capabilities"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-capabilities" names="class_xrinterface_method_get_capabilities"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_capabilities</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterface-method-get-capabilities"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <reference internal="True" refid="enum-xrinterface-capabilities"><inline classes="std std-ref">Capabilities</inline></reference> 标签的组合，提供关于这个接口功能的信息。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-name" names="class_xrinterface_method_get_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_name</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterface-method-get-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该接口的名称（<literal>"OpenXR"</literal>、<literal>"OpenVR"</literal>、<literal>"OpenHMD"</literal>、<literal>"ARKit"</literal> 等）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-play-area"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-play-area" names="class_xrinterface_method_get_play_area"><reference internal="True" refuri="class_packedvector3array#class-packedvector3array"><inline classes="std std-ref">PackedVector3Array</inline></reference> <strong>get_play_area</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterface-method-get-play-area"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个向量数组，表示映射到 <reference internal="True" refuri="class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> 点周围的虚拟空间的物理游玩区域。这些点形成一个凸多边形，可被用于对游玩区域做出反应或可视化。如果该功能不受支持或信息尚不可用，则返回一个空数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-projection-for-view"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-projection-for-view" names="class_xrinterface_method_get_projection_for_view"><reference internal="True" refuri="class_projection#class-projection"><inline classes="std std-ref">Projection</inline></reference> <strong>get_projection_for_view</strong>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, aspect: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, near: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, far: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-xrinterface-method-get-projection-for-view"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回视图/眼睛的投影矩阵。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-render-target-size"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-render-target-size" names="class_xrinterface_method_get_render_target_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_render_target_size</strong>() <reference internal="True" refid="class-xrinterface-method-get-render-target-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回在VR平台应用镜头失真等内容之前渲染的中间结果的分辨率。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-supported-environment-blend-modes"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-supported-environment-blend-modes" names="class_xrinterface_method_get_supported_environment_blend_modes"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_supported_environment_blend_modes</strong>() <reference internal="True" refid="class-xrinterface-method-get-supported-environment-blend-modes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回支持的环境混合模式数组，见 <reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-system-info"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-system-info" names="class_xrinterface_method_get_system_info"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_system_info</strong>() <reference internal="True" refid="class-xrinterface-method-get-system-info"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含额外系统信息的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。接口应该返回 <literal>XRRuntimeName</literal> 和 <literal>XRRuntimeVersion</literal>，表示所使用的 XR 运行时信息。还可以额外提供关于特定接口的条目。</paragraph>
            <paragraph><strong>注意：</strong>这个信息可能只在成功调用 <reference internal="True" refid="class-xrinterface-method-initialize"><inline classes="std std-ref">initialize</inline></reference> 后可用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-tracking-status"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-tracking-status" names="class_xrinterface_method_get_tracking_status"><reference internal="True" refid="enum-xrinterface-trackingstatus"><inline classes="std std-ref">TrackingStatus</inline></reference> <strong>get_tracking_status</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterface-method-get-tracking-status"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果支持，返回我们的跟踪状态。这将使你能够向用户反馈，是否存在位置跟踪的问题。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-transform-for-view"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-transform-for-view" names="class_xrinterface_method_get_transform_for_view"><reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> <strong>get_transform_for_view</strong>(view: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, cam_transform: <reference internal="True" refuri="class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference>) <reference internal="True" refid="class-xrinterface-method-get-transform-for-view"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回视图/眼睛的变换。</paragraph>
            <paragraph><literal>view</literal> 是视图/眼睛的索引。</paragraph>
            <paragraph><literal>cam_transform</literal> 是将设备坐标映射至场景坐标的变换，通常是当前 XROrigin3D 的 <reference internal="True" refuri="class_node3d#class-node3d-property-global-transform"><inline classes="std std-ref">Node3D.global_transform</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-get-view-count"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-get-view-count" names="class_xrinterface_method_get_view_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_view_count</strong>() <reference internal="True" refid="class-xrinterface-method-get-view-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回该设备渲染所需的视图数量。1 代表单目平面视图，2 代表双目立体视图。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-initialize"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-initialize" names="class_xrinterface_method_initialize"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>initialize</strong>() <reference internal="True" refid="class-xrinterface-method-initialize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>调用它来初始化这个接口。被初始化的第一个接口被识别为主接口，它将用于渲染输出。</paragraph>
            <paragraph>初始化想要使用的接口后，需要启用视口的 AR/VR 模式，并且渲染应该开始。</paragraph>
            <paragraph><strong>注意：</strong>对于任何使用 Godot 主输出的设备，例如移动 VR，必须在主视口上启用 XR 模式。</paragraph>
            <paragraph>如果为处理自己输出的平台（例如 OpenVR）执行该操作，则 Godot 将只显示一只眼睛而不会在屏幕上失真。或者，可以将单独的视口节点添加到场景并在该视口上启用 AR/VR。它将被用于输出到 HMD，让你可以在主窗口中自由地做任何你喜欢的事情，例如使用单独的相机作为旁观者相机或渲染完全不同的东西。</paragraph>
            <paragraph>虽然当前未使用，但可以激活其他接口。如果想跟踪来自其他平台的控制器，可能会希望这样做。但是，此时只有一个接口可以渲染到 HMD。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-is-initialized"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-is-initialized" names="class_xrinterface_method_is_initialized"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_initialized</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-xrinterface-method-is-initialized"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果这个接口已初始化，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-is-passthrough-enabled"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-is-passthrough-enabled" names="class_xrinterface_method_is_passthrough_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_passthrough_enabled</strong>() <reference internal="True" refid="class-xrinterface-method-is-passthrough-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Check if <reference internal="True" refid="class-xrinterface-property-environment-blend-mode"><inline classes="std std-ref">environment_blend_mode</inline></reference> is <reference internal="True" refid="class-xrinterface-constant-xr-env-blend-mode-alpha-blend"><inline classes="std std-ref">XR_ENV_BLEND_MODE_ALPHA_BLEND</inline></reference>, instead.</paragraph>
            <paragraph>如果已启用穿透，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-is-passthrough-supported"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-is-passthrough-supported" names="class_xrinterface_method_is_passthrough_supported"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_passthrough_supported</strong>() <reference internal="True" refid="class-xrinterface-method-is-passthrough-supported"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Check that <reference internal="True" refid="class-xrinterface-constant-xr-env-blend-mode-alpha-blend"><inline classes="std std-ref">XR_ENV_BLEND_MODE_ALPHA_BLEND</inline></reference> is supported using <reference internal="True" refid="class-xrinterface-method-get-supported-environment-blend-modes"><inline classes="std std-ref">get_supported_environment_blend_modes</inline></reference>, instead.</paragraph>
            <paragraph>如果该接口支持穿透，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-set-environment-blend-mode"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-set-environment-blend-mode" names="class_xrinterface_method_set_environment_blend_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>set_environment_blend_mode</strong>(mode: <reference internal="True" refid="enum-xrinterface-environmentblendmode"><inline classes="std std-ref">EnvironmentBlendMode</inline></reference>) <reference internal="True" refid="class-xrinterface-method-set-environment-blend-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Sets the active environment blend mode.</paragraph>
            <paragraph><literal>mode</literal> is the environment blend mode starting with the next frame.</paragraph>
            <paragraph><strong>Note:</strong> Not all runtimes support all environment blend modes, so it is important to check this at startup. For example:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var xr_interface: XRInterface = XRServer.find_interface("OpenXR")
    if xr_interface and xr_interface.is_initialized():
        var vp: Viewport = get_viewport()
        vp.use_xr = true
        var acceptable_modes = [XRInterface.XR_ENV_BLEND_MODE_OPAQUE, XRInterface.XR_ENV_BLEND_MODE_ADDITIVE]
        var modes = xr_interface.get_supported_environment_blend_modes()
        for mode in acceptable_modes:
            if mode in modes:
                xr_interface.set_environment_blend_mode(mode)
                break</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-set-play-area-mode"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-set-play-area-mode" names="class_xrinterface_method_set_play_area_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>set_play_area_mode</strong>(mode: <reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>) <reference internal="True" refid="class-xrinterface-method-set-play-area-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置活动的游玩区域模式，如果该模式不能与该接口一起使用，将返回 <literal>false</literal>。</paragraph>
            <paragraph><strong>注意：</strong>在接口初始化后更改该设置可能会让玩家感到不舒服，因此建议使用 <reference internal="True" refuri="class_xrserver#class-xrserver-method-center-on-hmd"><inline classes="std std-ref">XRServer.center_on_hmd</inline></reference> 在 HMD 上重新居中（如果切换到 <reference internal="True" refid="class-xrinterface-constant-xr-play-area-stage"><inline classes="std std-ref">XR_PLAY_AREA_STAGE</inline></reference>）或在场景改变时进行切换。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-start-passthrough"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-start-passthrough" names="class_xrinterface_method_start_passthrough"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>start_passthrough</strong>() <reference internal="True" refid="class-xrinterface-method-start-passthrough"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Set the <reference internal="True" refid="class-xrinterface-property-environment-blend-mode"><inline classes="std std-ref">environment_blend_mode</inline></reference> to <reference internal="True" refid="class-xrinterface-constant-xr-env-blend-mode-alpha-blend"><inline classes="std std-ref">XR_ENV_BLEND_MODE_ALPHA_BLEND</inline></reference>, instead.</paragraph>
            <paragraph>启动穿透，如果无法启动则会返回 <literal>false</literal>。</paragraph>
            <paragraph><strong>注意：</strong>XR 所使用的视口必须有透明背景，否则穿透可能无法正确渲染。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-stop-passthrough"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-stop-passthrough" names="class_xrinterface_method_stop_passthrough"><abbreviation explanation="无返回值。">void</abbreviation> <strong>stop_passthrough</strong>() <reference internal="True" refid="class-xrinterface-method-stop-passthrough"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Set the <reference internal="True" refid="class-xrinterface-property-environment-blend-mode"><inline classes="std std-ref">environment_blend_mode</inline></reference> to <reference internal="True" refid="class-xrinterface-constant-xr-env-blend-mode-opaque"><inline classes="std std-ref">XR_ENV_BLEND_MODE_OPAQUE</inline></reference>, instead.</paragraph>
            <paragraph>停止穿透。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-supports-play-area-mode"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-supports-play-area-mode" names="class_xrinterface_method_supports_play_area_mode"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>supports_play_area_mode</strong>(mode: <reference internal="True" refid="enum-xrinterface-playareamode"><inline classes="std std-ref">PlayAreaMode</inline></reference>) <reference internal="True" refid="class-xrinterface-method-supports-play-area-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>请调用这个方法来查询此接口是否支持给定的游玩区域模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-trigger-haptic-pulse"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-trigger-haptic-pulse" names="class_xrinterface_method_trigger_haptic_pulse"><abbreviation explanation="无返回值。">void</abbreviation> <strong>trigger_haptic_pulse</strong>(action_name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, tracker_name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, frequency: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, amplitude: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, duration_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, delay_sec: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-xrinterface-method-trigger-haptic-pulse"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在与该接口相关联的设备上触发一次触觉脉冲。</paragraph>
            <paragraph><literal>action_name</literal> 是该脉冲的动作名称。</paragraph>
            <paragraph><literal>tracker_name</literal> 是可选的，可用于将脉冲引导至特定设备，前提是该设备被绑定到此触觉。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-xrinterface-method-uninitialize"></target>
            <paragraph classes="classref-method" ids="class-xrinterface-method-uninitialize" names="class_xrinterface_method_uninitialize"><abbreviation explanation="无返回值。">void</abbreviation> <strong>uninitialize</strong>() <reference internal="True" refid="class-xrinterface-method-uninitialize"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>关闭接口。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
