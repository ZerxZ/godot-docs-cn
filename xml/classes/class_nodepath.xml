<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_nodepath.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/NodePath.xml.</comment>
    <target refid="class-nodepath"></target>
    <section ids="nodepath class-nodepath" names="nodepath class_nodepath">
        <title>NodePath</title>
        <paragraph>预先解析的场景树路径。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>场景树中预先解析的相对或绝对路径，用于 <reference internal="True" refuri="class_node#class-node-method-get-node"><inline classes="std std-ref">Node.get_node</inline></reference> 和类似函数。它可以引用节点、节点内的资源、或节点或资源的属性。例如，<literal>"Path2D/PathFollow2D/Sprite2D:texture:size"</literal> 将引用名为 <literal>"Sprite2D"</literal> 节点上的 <literal>texture</literal> 资源的 <literal>size</literal> 属性，该节点是路径中其他命名节点的一个子节点。</paragraph>
            <paragraph>通常只需将一个字符串传递给 <reference internal="True" refuri="class_node#class-node-method-get-node"><inline classes="std std-ref">Node.get_node</inline></reference>，它将会被自动转换，但可能偶尔想要使用 <strong>NodePath</strong> 或文字语法 <literal>^"path"</literal> 提前解析路径。导出 <strong>NodePath</strong> 变量会在编辑器的属性面板中，为你提供一个节点选择小部件，这通常很有用。</paragraph>
            <paragraph><strong>NodePath</strong> 由斜线分隔的节点名称列表（如文件系统路径）和可选的冒号分隔的“子名称”列表组成，这些“子名称”可以是资源或属性。</paragraph>
            <paragraph>NodePath 的一些示例包括：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 没有前导斜杠意味着它是相对于当前节点的。
^"A" # 直接子节点 A
^"A/B" # A 的子节点 B
^"." # 当前节点。
^".." # 父节点。
^"../C" # 兄弟节点 C。
^"../.." # 祖父节点。
# 前导斜杠意味着它是来自 SceneTree 的绝对路径。
^"/root" # 等同于 get_tree().get_root()。
^"/root/Main" # 如果你的主场景的根节点被命名为“Main”。
^"/root/MyAutoload" # 如果你有一个自动加载的节点或场景。</literal_block>
            <paragraph>另见 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>，它是通用字符串的类似概念。</paragraph>
            <paragraph><strong>注意：</strong>在编辑器中，<strong>NodePath</strong> 属性在场景树中移动、重命名或删除节点时会自动更新，但它们不会在运行时更新。</paragraph>
            <paragraph><strong>注意：</strong>在布尔上下文中，如果 <strong>NodePath</strong> 为空（<literal>NodePath("")</literal>），则它将评估为 <literal>false</literal>。否则，<strong>NodePath</strong> 将始终评估为 <literal>true</literal>。</paragraph>
            <note>
                <paragraph>通过 C# 使用这个 API 时有显著的不同。详见 <reference internal="True" refuri="../tutorials/scripting/c_sharp/c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference>。</paragraph>
            </note>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="2D 角色扮演游戏演示" refuri="https://godotengine.org/asset-library/asset/520">2D 角色扮演游戏演示</reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="构造函数">
            <title>构造函数</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="103"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-constructor-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>(</strong> <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-constructor-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>(</strong> <reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-constructor-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> from <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="103"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-get-as-property-path"><inline classes="std std-ref">get_as_property_path</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-get-concatenated-names"><inline classes="std std-ref">get_concatenated_names</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-get-concatenated-subnames"><inline classes="std std-ref">get_concatenated_subnames</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-get-name"><inline classes="std std-ref">get_name</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-get-name-count"><inline classes="std std-ref">get_name_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-get-subname"><inline classes="std std-ref">get_subname</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-get-subname-count"><inline classes="std std-ref">get_subname_count</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-hash"><inline classes="std std-ref">hash</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-is-absolute"><inline classes="std std-ref">is_absolute</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-method-is-empty"><inline classes="std std-ref">is_empty</inline></reference> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id5" names="操作符">
            <title>操作符</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="108"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-operator-neq-nodepath"><inline classes="std std-ref">operator !=</inline></reference> <strong>(</strong> <reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-nodepath-operator-eq-nodepath"><inline classes="std std-ref">operator ==</inline></reference> <strong>(</strong> <reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> right <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="构造函数说明">
            <title>构造函数说明</title>
            <target refid="class-nodepath-constructor-nodepath"></target>
            <paragraph classes="classref-constructor" ids="class-nodepath-constructor-nodepath" names="class_nodepath_constructor_nodepath"><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>NodePath</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>构造空的 <strong>NodePath</strong>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>NodePath</strong> <strong>(</strong> <reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>构造给定 <strong>NodePath</strong> 的副本。<literal>NodePath("example")</literal> 等价于 <literal>^"example"</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <paragraph classes="classref-constructor"><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>NodePath</strong> <strong>(</strong> <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> from <strong>)</strong></paragraph>
            <paragraph>从一个字符串，例如 <literal>"Path2D/PathFollow2D/Sprite2D:texture:size"</literal>，创建一个 NodePath。如果路径以斜杠开头，则该路径是绝对路径。绝对路径仅在全局场景树中有效，在单个场景中无效。在相对路径中，<literal>"."</literal> 和 <literal>".."</literal> 表示当前节点及其父节点。</paragraph>
            <paragraph>在到目标节点的路径后可以选择包含“子名称”，它可以指向资源或属性，也可以被嵌套。</paragraph>
            <paragraph>有效 NodePath 的示例（假设这些节点存在，并具有引用的资源或属性）：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 指向 Sprite2D 节点。
"Path2D/PathFollow2D/Sprite2D"
# 指向 Sprite2D 节点及其“纹理（texture）”资源。
# get_node() 将检索“Sprite2D”，而 get_node_and_resource()
# 将同时检索该 Sprite2D 节点和其“纹理（texture）”资源。
"Path2D/PathFollow2D/Sprite2D:texture"
# 指向 Sprite2D 节点及其“位置（position）”属性。
"Path2D/PathFollow2D/Sprite2D:position"
# 指向 Sprite2D 节点及其“位置（position）”属性的“x”分量。
"Path2D/PathFollow2D/Sprite2D:position:x"
# 绝对路径（从 “root” 开始）
“/root/Level/Path2D”</literal_block>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-nodepath-method-get-as-property-path"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-get-as-property-path" names="class_nodepath_method_get_as_property_path"><reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_as_property_path</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回前面带有冒号字符（<literal>:</literal>）的节点路径，将其转换为没有节点名称的纯属性路径（默认为从当前节点解析）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># 这将被解析为一个到“position”节点中“x”属性的节点路径。
var node_path = NodePath("position:x")
# 这将被解析为一个到当前节点中“position”属性的“x”分量的节点路径。
var property_path = node_path.get_as_property_path()
print(property_path) # :position:x</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// 这将被解析为一个到“position”节点中“x”属性的节点路径。
var nodePath = new NodePath("position:x");
// 这将被解析为一个到当前节点中“position”属性的“x”分量的节点路径。
NodePath propertyPath = nodePath.GetAsPropertyPath();
GD.Print(propertyPath); // :position:x</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-get-concatenated-names"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-get-concatenated-names" names="class_nodepath_method_get_concatenated_names"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_concatenated_names</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回所有以斜杠字符（<literal>/</literal>）作为分隔符连接的且不带子名称的路径。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-get-concatenated-subnames"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-get-concatenated-subnames" names="class_nodepath_method_get_concatenated_subnames"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_concatenated_subnames</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回所有以冒号字符（<literal>:</literal>）作为分隔符连接的子名称，即节点路径中第一个冒号的右侧。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var node_path = NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path")
print(node_path.get_concatenated_subnames()) # texture:load_path</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var nodePath = new NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path");
GD.Print(nodePath.GetConcatenatedSubnames()); // texture:load_path</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-get-name"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-get-name" names="class_nodepath_method_get_name"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_name</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取由 <literal>idx</literal>（0 到 <reference internal="True" refid="class-nodepath-method-get-name-count"><inline classes="std std-ref">get_name_count</inline></reference> - 1）指示的节点名称。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var node_path = NodePath("Path2D/PathFollow2D/Sprite2D")
print(node_path.get_name(0)) # Path2D
print(node_path.get_name(1)) # PathFollow2D
print(node_path.get_name(2)) # Sprite</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var nodePath = new NodePath("Path2D/PathFollow2D/Sprite2D");
GD.Print(nodePath.GetName(0)); // Path2D
GD.Print(nodePath.GetName(1)); // PathFollow2D
GD.Print(nodePath.GetName(2)); // Sprite</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-get-name-count"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-get-name-count" names="class_nodepath_method_get_name_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_name_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取组成路径的节点名称的数量。不包括子名称（见 <reference internal="True" refid="class-nodepath-method-get-subname-count"><inline classes="std std-ref">get_subname_count</inline></reference>）。</paragraph>
            <paragraph>例如，<literal>"Path2D/PathFollow2D/Sprite2D"</literal> 中有 3 个名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-get-subname"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-get-subname" names="class_nodepath_method_get_subname"><reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> <strong>get_subname</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> idx <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取由 <literal>idx</literal> 表示的资源或属性名称（0 到 <reference internal="True" refid="class-nodepath-method-get-subname-count"><inline classes="std std-ref">get_subname_count</inline></reference> - 1）。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var node_path = NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path")
print(node_path.get_subname(0)) # texture
print(node_path.get_subname(1)) # load_path</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var nodePath = new NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path");
GD.Print(nodePath.GetSubname(0)); // texture
GD.Print(nodePath.GetSubname(1)); // load_path</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-get-subname-count"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-get-subname-count" names="class_nodepath_method_get_subname_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_subname_count</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>获取路径中资源或属性名称（“子名称”）的数量。每个子名称都列在节点路径中的冒号字符（<literal>:</literal>）之后。</paragraph>
            <paragraph>例如，<literal>"Path2D/PathFollow2D/Sprite2D:texture:load_path"</literal> 中有 2 个子名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-hash"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-hash" names="class_nodepath_method_hash"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>hash</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>返回代表该 <strong>NodePath</strong> 内容的 32 位哈希值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-is-absolute"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-is-absolute" names="class_nodepath_method_is_absolute"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_absolute</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果节点路径是绝对的（而不是相对的），即以斜线字符（<literal>/</literal>）开始，返回 <literal>true</literal>。绝对节点路径可以用来访问根节点（<literal>"/root"</literal>）或自动加载（例如<literal>"/global"</literal> 如果注册了一个叫“global”的自动加载项）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-method-is-empty"></target>
            <paragraph classes="classref-method" ids="class-nodepath-method-is-empty" names="class_nodepath_method_is_empty"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_empty</strong> <strong>(</strong> <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>如果节点路径为空，则返回 <literal>true</literal>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="操作符说明">
            <title>操作符说明</title>
            <target refid="class-nodepath-operator-neq-nodepath"></target>
            <paragraph classes="classref-operator" ids="class-nodepath-operator-neq-nodepath" names="class_nodepath_operator_neq_nodepath"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator !=</strong> <strong>(</strong> <reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个节点路径不相等，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-nodepath-operator-eq-nodepath"></target>
            <paragraph classes="classref-operator" ids="class-nodepath-operator-eq-nodepath" names="class_nodepath_operator_eq_nodepath"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>operator ==</strong> <strong>(</strong> <reference internal="True" refid="class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> right <strong>)</strong></paragraph>
            <paragraph>如果两个节点路径相等，即路径中的所有节点名称都相同且顺序一致，则返回 <literal>true</literal>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
