<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_enginedebugger.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/EngineDebugger.xml.</comment>
    <target refid="class-enginedebugger"></target>
    <section ids="enginedebugger class-enginedebugger" names="enginedebugger class_enginedebugger">
        <title>EngineDebugger</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>暴露内部调试器。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>EngineDebugger</strong> 处理编辑器与正在运行的游戏之间的通信。它会在运行游戏时激活，可以通过它收发消息，还负责管理性能分析器。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="227"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-clear-breakpoints"><inline classes="std std-ref">clear_breakpoints</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-debug"><inline classes="std std-ref">debug</inline></reference>(can_continue: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, is_error_breakpoint: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-get-depth"><inline classes="std std-ref">get_depth</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-get-lines-left"><inline classes="std std-ref">get_lines_left</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-has-capture"><inline classes="std std-ref">has_capture</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-has-profiler"><inline classes="std std-ref">has_profiler</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-insert-breakpoint"><inline classes="std std-ref">insert_breakpoint</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-is-active"><inline classes="std std-ref">is_active</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-is-breakpoint"><inline classes="std std-ref">is_breakpoint</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-is-profiling"><inline classes="std std-ref">is_profiling</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-is-skipping-breakpoints"><inline classes="std std-ref">is_skipping_breakpoints</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-line-poll"><inline classes="std std-ref">line_poll</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-profiler-add-frame-data"><inline classes="std std-ref">profiler_add_frame_data</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-profiler-enable"><inline classes="std std-ref">profiler_enable</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, arguments: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = [])</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-register-message-capture"><inline classes="std std-ref">register_message_capture</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-register-profiler"><inline classes="std std-ref">register_profiler</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, profiler: <reference internal="True" refuri="class_engineprofiler#class-engineprofiler"><inline classes="std std-ref">EngineProfiler</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-remove-breakpoint"><inline classes="std std-ref">remove_breakpoint</inline></reference>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-script-debug"><inline classes="std std-ref">script_debug</inline></reference>(language: <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference>, can_continue: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, is_error_breakpoint: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-send-message"><inline classes="std std-ref">send_message</inline></reference>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-set-depth"><inline classes="std std-ref">set_depth</inline></reference>(depth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-set-lines-left"><inline classes="std std-ref">set_lines_left</inline></reference>(lines: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-unregister-message-capture"><inline classes="std std-ref">unregister_message_capture</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-enginedebugger-method-unregister-profiler"><inline classes="std std-ref">unregister_profiler</inline></reference>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="方法说明">
            <title>方法说明</title>
            <target refid="class-enginedebugger-method-clear-breakpoints"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-clear-breakpoints" names="class_enginedebugger_method_clear_breakpoints"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_breakpoints</strong>() <reference internal="True" refid="class-enginedebugger-method-clear-breakpoints"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Clears all breakpoints.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-debug"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-debug" names="class_enginedebugger_method_debug"><abbreviation explanation="无返回值。">void</abbreviation> <strong>debug</strong>(can_continue: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, is_error_breakpoint: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-enginedebugger-method-debug"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Starts a debug break in script execution, optionally specifying whether the program can continue based on <literal>can_continue</literal> and whether the break was due to a breakpoint.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-get-depth"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-get-depth" names="class_enginedebugger_method_get_depth"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_depth</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enginedebugger-method-get-depth"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Returns the current debug depth.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-get-lines-left"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-get-lines-left" names="class_enginedebugger_method_get_lines_left"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_lines_left</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enginedebugger-method-get-lines-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Returns the number of lines that remain.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-has-capture"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-has-capture" names="class_enginedebugger_method_has_capture"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_capture</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-has-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果存在具有给定名称的捕获，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-has-profiler"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-has-profiler" names="class_enginedebugger_method_has_profiler"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>has_profiler</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-has-profiler"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果存在具有给定名称的分析器，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-insert-breakpoint"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-insert-breakpoint" names="class_enginedebugger_method_insert_breakpoint"><abbreviation explanation="无返回值。">void</abbreviation> <strong>insert_breakpoint</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-insert-breakpoint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Inserts a new breakpoint with the given <literal>source</literal> and <literal>line</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-is-active"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-is-active" names="class_enginedebugger_method_is_active"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_active</strong>() <reference internal="True" refid="class-enginedebugger-method-is-active"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果调试器处于活动状态，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-is-breakpoint"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-is-breakpoint" names="class_enginedebugger_method_is_breakpoint"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_breakpoint</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enginedebugger-method-is-breakpoint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the given <literal>source</literal> and <literal>line</literal> represent an existing breakpoint.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-is-profiling"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-is-profiling" names="class_enginedebugger_method_is_profiling"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_profiling</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-is-profiling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果存在具有给定名称的分析器，并且该分析器处于活动状态，则返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-is-skipping-breakpoints"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-is-skipping-breakpoints" names="class_enginedebugger_method_is_skipping_breakpoints"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_skipping_breakpoints</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-enginedebugger-method-is-skipping-breakpoints"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns <literal>true</literal> if the debugger is skipping breakpoints otherwise <literal>false</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-line-poll"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-line-poll" names="class_enginedebugger_method_line_poll"><abbreviation explanation="无返回值。">void</abbreviation> <strong>line_poll</strong>() <reference internal="True" refid="class-enginedebugger-method-line-poll"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Forces a processing loop of debugger events. The purpose of this method is just processing events every now and then when the script might get too busy, so that bugs like infinite loops can be caught</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-profiler-add-frame-data"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-profiler-add-frame-data" names="class_enginedebugger_method_profiler_add_frame_data"><abbreviation explanation="无返回值。">void</abbreviation> <strong>profiler_add_frame_data</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-profiler-add-frame-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <literal>name</literal> 和 <literal>data</literal> 调用分析器中的 <literal>add</literal> 可调用体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-profiler-enable"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-profiler-enable" names="class_enginedebugger_method_profiler_enable"><abbreviation explanation="无返回值。">void</abbreviation> <strong>profiler_enable</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, enable: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, arguments: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> = []) <reference internal="True" refid="class-enginedebugger-method-profiler-enable"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的 <literal>name</literal> 和 <literal>arguments</literal> 调用分析器中的 <literal>toggle</literal> 可调用体。会根据 <literal>enable</literal> 参数启用/禁用同一分析器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-register-message-capture"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-register-message-capture" names="class_enginedebugger_method_register_message_capture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>register_message_capture</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, callable: <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-register-message-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的名称 <literal>name</literal> 注册消息捕获。如果 <literal>name</literal> 为“my_message”则会为“my_message:”开头的消息调用给定的可调用体。</paragraph>
            <paragraph>Callable 必须接受消息字符串和数据数组参数。如果消息和数据有效，则可调用体必须返回 <literal>true</literal>，否则返回 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-register-profiler"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-register-profiler" names="class_enginedebugger_method_register_profiler"><abbreviation explanation="无返回值。">void</abbreviation> <strong>register_profiler</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, profiler: <reference internal="True" refuri="class_engineprofiler#class-engineprofiler"><inline classes="std std-ref">EngineProfiler</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-register-profiler"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用给定的名称 <literal>name</literal> 注册分析器。详情见 <reference internal="True" refuri="class_engineprofiler#class-engineprofiler"><inline classes="std std-ref">EngineProfiler</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-remove-breakpoint"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-remove-breakpoint" names="class_enginedebugger_method_remove_breakpoint"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_breakpoint</strong>(line: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, source: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-remove-breakpoint"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Removes a breakpoint with the given <literal>source</literal> and <literal>line</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-script-debug"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-script-debug" names="class_enginedebugger_method_script_debug"><abbreviation explanation="无返回值。">void</abbreviation> <strong>script_debug</strong>(language: <reference internal="True" refuri="class_scriptlanguage#class-scriptlanguage"><inline classes="std std-ref">ScriptLanguage</inline></reference>, can_continue: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = true, is_error_breakpoint: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> = false) <reference internal="True" refid="class-enginedebugger-method-script-debug"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Starts a debug break in script execution, optionally specifying whether the program can continue based on <literal>can_continue</literal> and whether the break was due to a breakpoint.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-send-message"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-send-message" names="class_enginedebugger_method_send_message"><abbreviation explanation="无返回值。">void</abbreviation> <strong>send_message</strong>(message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, data: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-send-message"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>发送消息，内容为给定的 <literal>message</literal> 和 <literal>data</literal> 数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-set-depth"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-set-depth" names="class_enginedebugger_method_set_depth"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_depth</strong>(depth: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-set-depth"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Sets the current debugging depth.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-set-lines-left"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-set-lines-left" names="class_enginedebugger_method_set_lines_left"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_lines_left</strong>(lines: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-set-lines-left"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>实验性：</strong> 未来版本中可能修改或移除该方法。</paragraph>
            <paragraph>Sets the current debugging lines that remain.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-unregister-message-capture"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-unregister-message-capture" names="class_enginedebugger_method_unregister_message_capture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unregister_message_capture</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-unregister-message-capture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将具有给定名称 <literal>name</literal> 的消息捕获解除注册。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-enginedebugger-method-unregister-profiler"></target>
            <paragraph classes="classref-method" ids="class-enginedebugger-method-unregister-profiler" names="class_enginedebugger_method_unregister_profiler"><abbreviation explanation="无返回值。">void</abbreviation> <strong>unregister_profiler</strong>(name: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-enginedebugger-method-unregister-profiler"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将具有给定名称 <literal>name</literal> 的分析器解除注册。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
