<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_@gdscript.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/modules/gdscript/doc_classes/@GDScript.xml.</comment>
    <target refid="class-gdscript"></target>
    <section ids="gdscript class-gdscript" names="@gdscript class_@gdscript">
        <title>@GDScript</title>
        <paragraph>内置 GDScript 常量、函数、注解。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>GDScript 专用的实用函数及注解列表，可在任何脚本中访问。</paragraph>
            <paragraph>全局函数和常量的列表见 <reference internal="True" refuri="class_@globalscope#class-globalscope"><inline classes="std std-ref">@GlobalScope</inline></reference>。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/scripting/gdscript/gdscript_exports"><inline classes="doc">GDScript 的导出</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="37"></colspec>
                    <colspec colwidth="170"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-color8"><inline classes="std std-ref">Color8</inline></reference>(r8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, g8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, b8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, a8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 255)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-assert"><inline classes="std std-ref">assert</inline></reference>(condition: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "")</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-char"><inline classes="std std-ref">char</inline></reference>(char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-convert"><inline classes="std std-ref">convert</inline></reference>(what: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-dict-to-inst"><inline classes="std std-ref">dict_to_inst</inline></reference>(dictionary: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-get-stack"><inline classes="std std-ref">get_stack</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-inst-to-dict"><inline classes="std std-ref">inst_to_dict</inline></reference>(instance: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-is-instance-of"><inline classes="std std-ref">is_instance_of</inline></reference>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, type: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-len"><inline classes="std std-ref">len</inline></reference>(var: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-load"><inline classes="std std-ref">load</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-preload"><inline classes="std std-ref">preload</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-print-debug"><inline classes="std std-ref">print_debug</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-print-stack"><inline classes="std std-ref">print_stack</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-range"><inline classes="std std-ref">range</inline></reference>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-gdscript-method-type-exists"><inline classes="std std-ref">type_exists</inline></reference>(type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="常量">
            <title>常量</title>
            <target refid="class-gdscript-constant-pi"></target>
            <paragraph classes="classref-constant" ids="class-gdscript-constant-pi" names="class_@gdscript_constant_pi"><strong>PI</strong> = <literal>3.14159265358979</literal> <reference internal="True" refid="class-gdscript-constant-pi"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>常量，表示圆的周长是直径的多少倍。相当于 <literal>TAU / 2</literal>，或以弧度表示的180度。</paragraph>
            <target refid="class-gdscript-constant-tau"></target>
            <paragraph classes="classref-constant" ids="class-gdscript-constant-tau" names="class_@gdscript_constant_tau"><strong>TAU</strong> = <literal>6.28318530717959</literal> <reference internal="True" refid="class-gdscript-constant-tau"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>圆常量，单位圆的周长，单位为弧度。相当于 <literal>PI * 2</literal>，即 360 度的弧度值。</paragraph>
            <target refid="class-gdscript-constant-inf"></target>
            <paragraph classes="classref-constant" ids="class-gdscript-constant-inf" names="class_@gdscript_constant_inf"><strong>INF</strong> = <literal>inf</literal> <reference internal="True" refid="class-gdscript-constant-inf"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>正浮点无穷大。这是除数为 <literal>0.0</literal> 时浮点除法的结果。对于负无穷大，使用 <literal>-INF</literal>。如果分子为正，除以 <literal>-0.0</literal> 将导致负无穷大，因此除以 <literal>0.0</literal> 与除以 <literal>-0.0</literal> 不同（尽管 <literal>0.0 == -0.0</literal> 返回 <literal>true</literal>）。</paragraph>
            <paragraph><strong>警告：</strong>数值无穷大只是浮点数的一个概念，对于整数来说没有对应的概念。将整数除以 <literal>0</literal> 不会产生 <reference internal="True" refid="class-gdscript-constant-inf"><inline classes="std std-ref">INF</inline></reference>，而是会产生一个运行时错误。</paragraph>
            <target refid="class-gdscript-constant-nan"></target>
            <paragraph classes="classref-constant" ids="class-gdscript-constant-nan" names="class_@gdscript_constant_nan"><strong>NAN</strong> = <literal>nan</literal> <reference internal="True" refid="class-gdscript-constant-nan"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>“Not a Number”（非数），一个无效的浮点数值。<reference internal="True" refid="class-gdscript-constant-nan"><inline classes="std std-ref">NAN</inline></reference> 有许多特殊的性质，比如 <literal>!=</literal> 始终返回 <literal>true</literal>，而其他比较运算符都始终返回 <literal>false</literal>。即便是和自己比较也是如此（<literal>NAN == NAN</literal> 返回 <literal>false</literal>，而 <literal>NAN != NAN</literal> 返回 <literal>true</literal>）。部分无效运算会返回这个值，例如将浮点数 <literal>0.0</literal> 除以 <literal>0.0</literal>。</paragraph>
            <paragraph><strong>警告：</strong>“非数”只是浮点数的概念，整数中没有对应的概念。将整数 <literal>0</literal> 除以 <literal>0</literal> 不会得到 <reference internal="True" refid="class-gdscript-constant-nan"><inline classes="std std-ref">NAN</inline></reference>，而是会产生运行时错误。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section ids="id5" names="注解">
            <title>注解</title>
            <target refid="class-gdscript-annotation-export"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export" names="class_@gdscript_annotation_@export"><strong>@export</strong>() <reference internal="True" refid="class-gdscript-annotation-export"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将后续的属性标记为导出属性（可以在检查器面板中编辑并保存至磁盘）。要控制导出属性的类型，请使用类型提示标记。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">extends Node

enum Direction {LEFT, RIGHT, UP, DOWN}

# 内置类型。
@export var string = ""
@export var int_number = 5
@export var float_number: float = 5

# 枚举。
@export var type: Variant.Type
@export var format: Image.Format
@export var direction: Direction

# 资源。
@export var image: Image
@export var custom_resource: CustomResource

# 节点。
@export var node: Node
@export var custom_node: CustomNode

# 类型数组。
@export var int_array: Array[int]
@export var direction_array: Array[Direction]
@export var image_array: Array[Image]
@export var node_array: Array[Node]</literal_block>
            <paragraph><strong>注意：</strong>自定义资源和自定义节点必须使用 <literal>class_name</literal> 注册为全局类。</paragraph>
            <paragraph><strong>注意：</strong>节点的导出只有派生自 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 的类才支持，并且还有一些其他限制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-category"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-category" names="class_@gdscript_annotation_@export_category"><strong>@export_category</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdscript-annotation-export-category"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为后续导出属性定义一个新类别。方便在检查器面板中组织属性。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-category"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_CATEGORY</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_category("Statistics")
@export var hp = 30
@export var speed = 1.25</literal_block>
            <paragraph><strong>注意：</strong>检查器面板中的列表通常会按类别将来自不同类（如 Node、Node2D、Sprite 等）的属性分隔开来。为了让属性组织更明确，推荐改用 <reference internal="True" refid="class-gdscript-annotation-export-group"><inline classes="std std-ref">@export_group</inline></reference> 和 <reference internal="True" refid="class-gdscript-annotation-export-subgroup"><inline classes="std std-ref">@export_subgroup</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-color-no-alpha"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-color-no-alpha" names="class_@gdscript_annotation_@export_color_no_alpha"><strong>@export_color_no_alpha</strong>() <reference internal="True" refid="class-gdscript-annotation-export-color-no-alpha"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>] 或 <reference internal="True" refuri="class_packedcolorarray#class-packedcolorarray"><inline classes="std std-ref">PackedColorArray</inline></reference> 属性，不允许编辑透明度（<reference internal="True" refuri="class_color#class-color-property-a"><inline classes="std std-ref">Color.a</inline></reference>）。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-color-no-alpha"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_COLOR_NO_ALPHA</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_color_no_alpha var dye_color: Color
@export_color_no_alpha var dye_colors: Array[Color]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-custom"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-custom" names="class_@gdscript_annotation_@export_custom"><strong>@export_custom</strong>(hint: <reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyhint"><inline classes="std std-ref">PropertyHint</inline></reference>, hint_string: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, usage: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_@globalscope#enum-globalscope-propertyusageflags"><inline classes="std std-ref">PropertyUsageFlags</inline></reference>] = 6) <reference internal="True" refid="class-gdscript-annotation-export-custom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Allows you to set a custom hint, hint string, and usage flags for the exported property. Note that there's no validation done in GDScript, it will just pass the parameters to the editor.</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_custom(PROPERTY_HINT_NONE, "suffix:m") var suffix: Vector3</literal_block>
            <paragraph><strong>Note:</strong> Regardless of the <literal>usage</literal> value, the <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-script-variable"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_SCRIPT_VARIABLE</inline></reference> flag is always added, as with any explicitly declared script variable.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-dir"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-dir" names="class_@gdscript_annotation_@export_dir"><strong>@export_dir</strong>() <reference internal="True" refid="class-gdscript-annotation-export-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] 或 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 属性，用作指向目录的路径。该路径会被限制在项目文件夹及其子文件夹中。要允许在整个文件系统中选取，见 <reference internal="True" refid="class-gdscript-annotation-export-global-dir"><inline classes="std std-ref">@export_global_dir</inline></reference>。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-dir"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_DIR</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_dir var sprite_folder_path: String
@export_dir var sprite_folder_paths: Array[String]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-enum"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-enum" names="class_@gdscript_annotation_@export_enum"><strong>@export_enum</strong>(names: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-export-enum"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>]、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]、<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>、<reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>、<reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> 或 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 属性，用作枚举选项列表（或选项的数组）。如果属性为 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，则存储的是值的索引，与值的顺序相同。你可以使用冒号来显式添加枚举项的取值。如果属性为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>，则存储的是值。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-enum"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_ENUM</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_enum("Warrior", "Magician", "Thief") var character_class: int
@export_enum("Slow:30", "Average:60", "Very Fast:200") var character_speed: int
@export_enum("Rebecca", "Mary", "Leah") var character_name: String

@export_enum("Sword", "Spear", "Mace") var character_items: Array[int]
@export_enum("double_jump", "climb", "dash") var character_skills: Array[String]</literal_block>
            <paragraph>如果需要设置初始值，则必须显式指定：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_enum("Rebecca", "Mary", "Leah") var character_name: String = "Rebecca"</literal_block>
            <paragraph>如果需要使用具名 GDScript 枚举，请改用 <reference internal="True" refid="class-gdscript-annotation-export"><inline classes="std std-ref">@export</inline></reference>：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">enum CharacterName {REBECCA, MARY, LEAH}
@export var character_name: CharacterName

enum CharacterItem {SWORD, SPEAR, MACE}
@export var character_items: Array[CharacterItem]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-exp-easing"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-exp-easing" names="class_@gdscript_annotation_@export_exp_easing"><strong>@export_exp_easing</strong>(hints: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-export-exp-easing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用缓动编辑器小部件导出浮点属性。可以提供额外的提示来调整小部件的行为。通过使用<literal>"attenuation"</literal> 提示来翻转曲线，使编辑衰减属性更加直观；通过使用<literal>"positive_only"</literal> 提示来将取值范围限制为仅大于等于零。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-exp-easing"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_EXP_EASING</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_exp_easing var transition_speed
@export_exp_easing("attenuation") var fading_attenuation
@export_exp_easing("positive_only") var effect_power
@export_exp_easing var speeds: Array[float]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-file"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-file" names="class_@gdscript_annotation_@export_file"><strong>@export_file</strong>(filter: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-export-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>[ 或 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 属性，用作指向文件的路径。该路径会被限制在项目文件夹及其子文件夹中。要允许在整个文件系统中选取，见 <reference internal="True" refid="class-gdscript-annotation-export-global-file"><inline classes="std std-ref">@export_global_file</inline></reference>。</paragraph>
            <paragraph>如果提供了 <literal>filter</literal>，则只有匹配的文件可供选取。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-file"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_FILE</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_file var sound_effect_path: String
@export_file("*.txt") var notes_path: String
@export_file var level_paths: Array[String]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags" names="class_@gdscript_annotation_@export_flags"><strong>@export_flags</strong>(names: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-export-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为位标志字段，能够在单个属性中保存多个“勾选项”（即 <literal>true</literal> 值），可以很方便地在检查器面板中进行选择。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-flags"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_FLAGS</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags("Fire", "Water", "Earth", "Wind") var spell_elements = 0</literal_block>
            <paragraph>可以通过冒号来显式添加取值：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags("Self:4", "Allies:8", "Foes:16") var spell_targets = 0</literal_block>
            <paragraph>还可以对标志进行组合：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags("Self:4", "Allies:8", "Self and Allies:12", "Foes:16")
var spell_targets = 0</literal_block>
            <paragraph><strong>注意：</strong>标志值的最小值为 <literal>1</literal>，最大值为 <literal>2 ** 32 - 1</literal>。</paragraph>
            <paragraph><strong>注意：</strong>与 <reference internal="True" refid="class-gdscript-annotation-export-enum"><inline classes="std std-ref">@export_enum</inline></reference> 不同，位标志不会考虑其前一个位标志的显式值。下面的例子中，A 为 16、B 为 2、C 为 4。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags("A:16", "B", "C") var x</literal_block>
            <paragraph>还可以对 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>]、<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>、<reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> 和 <reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference> 使用该注解。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags("Fire", "Water", "Earth", "Wind") var phase_elements: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags-2d-navigation"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags-2d-navigation" names="class_@gdscript_annotation_@export_flags_2d_navigation"><strong>@export_flags_2d_navigation</strong>() <reference internal="True" refid="class-gdscript-annotation-export-flags-2d-navigation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为 2D 导航层的位标志字段。检查器面板中对应的部件会使用在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-layer-names-2d-navigation-layer-1"><inline classes="std std-ref">ProjectSettings.layer_names/2d_navigation/layer_1</inline></reference> 中定义的层名称。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-layers-2d-navigation"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_LAYERS_2D_NAVIGATION</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_2d_navigation var navigation_layers: int
@export_flags_2d_navigation var navigation_layers_array: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags-2d-physics"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags-2d-physics" names="class_@gdscript_annotation_@export_flags_2d_physics"><strong>@export_flags_2d_physics</strong>() <reference internal="True" refid="class-gdscript-annotation-export-flags-2d-physics"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为 2D 物理层的位标志字段。检查器面板中对应的部件会使用在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-layer-names-2d-physics-layer-1"><inline classes="std std-ref">ProjectSettings.layer_names/2d_physics/layer_1</inline></reference> 中定义的层名称。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-layers-2d-physics"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_LAYERS_2D_PHYSICS</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_2d_physics var physics_layers: int
@export_flags_2d_physics var physics_layers_array: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags-2d-render"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags-2d-render" names="class_@gdscript_annotation_@export_flags_2d_render"><strong>@export_flags_2d_render</strong>() <reference internal="True" refid="class-gdscript-annotation-export-flags-2d-render"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为 2D 渲染层的位标志字段。检查器面板中对应的部件会使用在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-layer-names-2d-render-layer-1"><inline classes="std std-ref">ProjectSettings.layer_names/2d_render/layer_1</inline></reference> 中定义的层名称。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-layers-2d-render"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_LAYERS_2D_RENDER</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_2d_render var render_layers: int
@export_flags_2d_render var render_layers_array: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags-3d-navigation"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags-3d-navigation" names="class_@gdscript_annotation_@export_flags_3d_navigation"><strong>@export_flags_3d_navigation</strong>() <reference internal="True" refid="class-gdscript-annotation-export-flags-3d-navigation"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为 3D 导航层的位标志字段。检查器面板中对应的部件会使用在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-layer-names-3d-navigation-layer-1"><inline classes="std std-ref">ProjectSettings.layer_names/3d_navigation/layer_1</inline></reference> 中定义的层名称。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-layers-3d-navigation"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_LAYERS_3D_NAVIGATION</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_3d_navigation var navigation_layers: int
@export_flags_3d_navigation var navigation_layers_array: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags-3d-physics"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags-3d-physics" names="class_@gdscript_annotation_@export_flags_3d_physics"><strong>@export_flags_3d_physics</strong>() <reference internal="True" refid="class-gdscript-annotation-export-flags-3d-physics"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为 3D 物理层的位标志字段。检查器面板中对应的部件会使用在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-layer-names-3d-physics-layer-1"><inline classes="std std-ref">ProjectSettings.layer_names/3d_physics/layer_1</inline></reference> 中定义的层名称。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-layers-3d-physics"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_LAYERS_3D_PHYSICS</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_3d_physics var physics_layers: int
@export_flags_3d_physics var physics_layers_array: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags-3d-render"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags-3d-render" names="class_@gdscript_annotation_@export_flags_3d_render"><strong>@export_flags_3d_render</strong>() <reference internal="True" refid="class-gdscript-annotation-export-flags-3d-render"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为 3D 渲染层的位标志字段。检查器面板中对应的部件会使用在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-layer-names-3d-render-layer-1"><inline classes="std std-ref">ProjectSettings.layer_names/3d_render/layer_1</inline></reference> 中定义的层名称。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-layers-3d-render"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_LAYERS_3D_RENDER</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_3d_render var render_layers: int
@export_flags_3d_render var render_layers_array: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-flags-avoidance"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-flags-avoidance" names="class_@gdscript_annotation_@export_flags_avoidance"><strong>@export_flags_avoidance</strong>() <reference internal="True" refid="class-gdscript-annotation-export-flags-avoidance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将整数属性导出为导航避障层的位标志字段。检查器面板中对应的部件会使用在 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-layer-names-avoidance-layer-1"><inline classes="std std-ref">ProjectSettings.layer_names/avoidance/layer_1</inline></reference> 中定义的层名称。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-layers-avoidance"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_LAYERS_AVOIDANCE</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_avoidance var avoidance_layers: int
@export_flags_avoidance var avoidance_layers_array: Array[int]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-global-dir"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-global-dir" names="class_@gdscript_annotation_@export_global_dir"><strong>@export_global_dir</strong>() <reference internal="True" refid="class-gdscript-annotation-export-global-dir"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] 或 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 属性，用作指向目录的绝对路径，该路径可以从整个文件系统中选取。要限制为项目文件夹及其子文件夹，见 <reference internal="True" refid="class-gdscript-annotation-export-dir"><inline classes="std std-ref">@export_dir</inline></reference>。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-global-dir"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_GLOBAL_DIR</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_global_dir var sprite_folder_path: String
@export_global_dir var sprite_folder_paths: Array[String]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-global-file"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-global-file" names="class_@gdscript_annotation_@export_global_file"><strong>@export_global_file</strong>(filter: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-export-global-file"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] 或 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 属性，用作指向文件的绝对路径，该路径可以从整个文件系统中选取。要限制为项目文件夹及其子文件夹，见 <reference internal="True" refid="class-gdscript-annotation-export-file"><inline classes="std std-ref">@export_file</inline></reference>。</paragraph>
            <paragraph>如果提供了 <literal>filter</literal>，则只有匹配的文件可供选取。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-global-file"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_GLOBAL_FILE</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_global_file var sound_effect_path: String
@export_global_file("*.txt") var notes_path: String
@export_global_file var multiple_paths: Array[String]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-group"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-group" names="class_@gdscript_annotation_@export_group"><strong>@export_group</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, prefix: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-gdscript-annotation-export-group"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为以下导出的属性定义一个新分组，分组有助于在检查器面板中组织属性。添加新分组时可以选择性地提供 <literal>prefix</literal> 前缀，此时分组将仅考虑具有此前缀的属性。分组将在第一个没有该前缀的属性处结束，前缀也将从检查器面板中的属性名称当中移除。</paragraph>
            <paragraph>如果未提供 <literal>prefix</literal>，则该注解后续的每个属性都将添加到该分组中，在定义下一个分组或类别时，该分组结束。你还可以通过将此注解与空字符串的参数一起使用来强制结束分组：<literal>@export_group("", "")</literal>。</paragraph>
            <paragraph>分组不能嵌套使用，请使用 <reference internal="True" refid="class-gdscript-annotation-export-subgroup"><inline classes="std std-ref">@export_subgroup</inline></reference> 在分组内添加子分组。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-group"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_GROUP</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_group("Racer Properties")
@export var nickname = "Nick"
@export var age = 26

@export_group("Car Properties", "car_")
@export var car_label = "Speedy"
@export var car_number = 3

@export_group("", "")
@export var ungrouped_number = 3</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-multiline"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-multiline" names="class_@gdscript_annotation_@export_multiline"><strong>@export_multiline</strong>() <reference internal="True" refid="class-gdscript-annotation-export-multiline"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>代替普通的 <reference internal="True" refuri="class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference> 组件，并使用较大的 <reference internal="True" refuri="class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference> 组件来导出 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>]、<reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference>、<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 或 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] 属性，这样就能够支持编辑多行内容，便于在编辑属性中存储大量文本。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-multiline-text"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_MULTILINE_TEXT</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_multiline var character_biography
@export_multiline var npc_dialogs: Array[String]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-node-path"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-node-path" names="class_@gdscript_annotation_@export_node_path"><strong>@export_node_path</strong>(type: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-export-node-path"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> 或 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference>] 属性，能够指定要过滤的节点类型。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-node-path-valid-types"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_NODE_PATH_VALID_TYPES</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_node_path("Button", "TouchScreenButton") var some_button
@export_node_path("Button", "TouchScreenButton") var many_buttons: Array[NodePath]</literal_block>
            <paragraph><strong>注意：</strong>类型必须是原生类型或（通过使用 <literal>[class_name]</literal> 关键字）全局注册的继承自 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 的脚本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-placeholder"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-placeholder" names="class_@gdscript_annotation_@export_placeholder"><strong>@export_placeholder</strong>(placeholder: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdscript-annotation-export-placeholder"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>] 或 <reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> 属性，当值不存在时会在编辑器小部件中显示占位文本。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-placeholder-text"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_PLACEHOLDER_TEXT</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_placeholder("Name in lowercase") var character_id: String
@export_placeholder("Name in lowercase") var friend_ids: Array[String]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-range"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-range" names="class_@gdscript_annotation_@export_range"><strong>@export_range</strong>(min: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, max: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>, step: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 1.0, extra_hints: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "", ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-export-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>导出 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>、<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>]、<reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>]、<reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>、<reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>、<reference internal="True" refuri="class_packedint64array#class-packedint64array"><inline classes="std std-ref">PackedInt64Array</inline></reference>、<reference internal="True" refuri="class_packedfloat32array#class-packedfloat32array"><inline classes="std std-ref">PackedFloat32Array</inline></reference> 或 <reference internal="True" refuri="class_packedfloat64array#class-packedfloat64array"><inline classes="std std-ref">PackedFloat64Array</inline></reference> 属性，能够指定取值范围。范围必须由最小值提示 <literal>min</literal> 和最大值提示 <literal>max</literal> 定义，还有一个可选的步长提示 <literal>step</literal> 和各种额外的提示。对于整数属性，<literal>step</literal> 的默认值是 <literal>1</literal> 。对于浮点数，这个值取决于你的 <reference internal="True" refuri="class_editorsettings#class-editorsettings-property-interface-inspector-default-float-step"><inline classes="std std-ref">EditorSettings.interface/inspector/default_float_step</inline></reference> 所设置的值。</paragraph>
            <paragraph>如果提供了 <literal>"or_greater"</literal> 和 <literal>"or_less"</literal> 提示，则编辑器部件将不会在其范围边界处对数值进行限制。<literal>"exp"</literal> 提示将使范围内的编辑值以指数形式变化。<literal>"hide_slider"</literal> 提示可将编辑器部件中的滑块隐藏。</paragraph>
            <paragraph>提示还允许指示编辑的值的单位。通过使用 <literal>"radians_as_degrees"</literal> 提示，你可以指定实际值以弧度为单位，在检查器中以角度为单位显示的值（其范围值也使用角度）。<literal>"degrees"</literal> 提示允许添加一个角度符号作为单位后缀。最后，还可以使用 <literal>"suffix:单位"</literal> 这种提示来提供一个自定义后缀，其中“单位”可以是任意字符串。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-hint-range"><inline classes="std std-ref">@GlobalScope.PROPERTY_HINT_RANGE</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_range(0, 20) var number
@export_range(-10, 20) var number
@export_range(-10, 20, 0.2) var number: float
@export_range(0, 20) var numbers: Array[float]

@export_range(0, 100, 1, "or_greater") var power_percent
@export_range(0, 100, 1, "or_greater", "or_less") var health_delta

@export_range(-180, 180, 0.001, "radians_as_degrees") var angle_radians
@export_range(0, 360, 1, "degrees") var angle_degrees
@export_range(-8, 8, 2, "suffix:px") var target_offset</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-storage"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-storage" names="class_@gdscript_annotation_@export_storage"><strong>@export_storage</strong>() <reference internal="True" refid="class-gdscript-annotation-export-storage"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-storage"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_STORAGE</inline></reference> 标志导出属性，让该属性不会在编辑器中显示，但是会将其序列化并存储到场景或资源文件中。常用于 <reference internal="True" refid="class-gdscript-annotation-tool"><inline classes="std std-ref">@tool</inline></reference> 脚本当中。调用 <reference internal="True" refuri="class_resource#class-resource-method-duplicate"><inline classes="std std-ref">Resource.duplicate</inline></reference> 和 <reference internal="True" refuri="class_node#class-node-method-duplicate"><inline classes="std std-ref">Node.duplicate</inline></reference> 时也会复制该属性的值，而其他非导出变量则不会。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a # 不保存进文件，不在编辑器中显示。
@export_storage var b # 保存进文件，不在编辑器中显示。
@export var c: int # 保存进文件，在编辑器中显示。</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-export-subgroup"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-export-subgroup" names="class_@gdscript_annotation_@export_subgroup"><strong>@export_subgroup</strong>(name: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, prefix: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-gdscript-annotation-export-subgroup"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为接下来的导出属性定义一个新的子分组，有助于在检查器面板中组织属性。子分组的运作方式与分组类似，不过需要依赖于一个父级分组。见 <reference internal="True" refid="class-gdscript-annotation-export-group"><inline classes="std std-ref">@export_group</inline></reference>。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-property-usage-subgroup"><inline classes="std std-ref">@GlobalScope.PROPERTY_USAGE_SUBGROUP</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_group("Racer Properties")
@export var nickname = "Nick"
@export var age = 26

@export_subgroup("Car Properties", "car_")
@export var car_label = "Speedy"
@export var car_number = 3</literal_block>
            <paragraph><strong>注意：</strong>子分组不能嵌套，仅提供一层额外的分组深度。新的分组会结束前一个分组，类似地，后续的子分组也会打断之前的子分组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-icon"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-icon" names="class_@gdscript_annotation_@icon"><strong>@icon</strong>(icon_path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdscript-annotation-icon"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为当前脚本添加自定义图标。<literal>icon_path</literal> 所指向的图标会在“场景”面板中该类的所有节点上显示，也会显示在各种编辑器对话框当中。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@icon("res://path/to/class/icon.svg")</literal_block>
            <paragraph><strong>注意：</strong>只有脚本可以带有自定义图标，不支持内部类。</paragraph>
            <paragraph><strong>注意：</strong>由于注解描述的是它们的对象，因此 <reference internal="True" refid="class-gdscript-annotation-icon"><inline classes="std std-ref">@icon</inline></reference> 注解必须放在类定义语句和继承语句之前。</paragraph>
            <paragraph><strong>注意：</strong>与其他注解不同，<reference internal="True" refid="class-gdscript-annotation-icon"><inline classes="std std-ref">@icon</inline></reference> 注解的参数必须是字符串字面量（不支持常量表达式）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-onready"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-onready" names="class_@gdscript_annotation_@onready"><strong>@onready</strong>() <reference internal="True" refid="class-gdscript-annotation-onready"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>标记后续属性会在 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 就绪时赋值。节点初始化（<reference internal="True" refuri="class_object#class-object-private-method-init"><inline classes="std std-ref">Object._init</inline></reference>）时不会立即对这些属性赋值，而是会在即将调用 <reference internal="True" refuri="class_node#class-node-private-method-ready"><inline classes="std std-ref">Node._ready</inline></reference> 之前进行计算与储存。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@onready var character_name: Label = $Label</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-rpc"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-rpc" names="class_@gdscript_annotation_@rpc"><strong>@rpc</strong>(mode: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "authority", sync: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "call_remote", transfer_mode: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "unreliable", transfer_channel: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 0) <reference internal="True" refid="class-gdscript-annotation-rpc"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将后续方法标记为远程过程调用。见<reference internal="True" refuri="../tutorials/networking/high_level_multiplayer"><inline classes="doc">《高阶多人游戏》</inline></reference>。</paragraph>
            <paragraph>如果将 <literal>mode</literal> 提示设为 <literal>"any_peer"</literal>，则会允许所有对等体调用该 RPC 函数。若只允许该对等体的控制方调用，则应该让 <literal>mode</literal> 提示保持为 <literal>"authority"</literal>。使用 <reference internal="True" refuri="class_node#class-node-method-rpc-config"><inline classes="std std-ref">Node.rpc_config</inline></reference> 将函数配置为 RPC 时，这些模式分别对应的是 RPC 模式 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-constant-rpc-mode-any-peer"><inline classes="std std-ref">MultiplayerAPI.RPC_MODE_ANY_PEER</inline></reference> 和 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-constant-rpc-mode-authority"><inline classes="std std-ref">MultiplayerAPI.RPC_MODE_AUTHORITY</inline></reference> 。如果非控制方的对等体尝试调用仅限控制方调用的函数，则不会执行该函数，且如果本地能够检测到错误（本地与远程对等体的 RPC 配置一致），则发送方对等体会显示错误消息，否则该对等体会检测到该错误并将其输出。</paragraph>
            <paragraph>如果将 <literal>sync</literal> 提示设为 <literal>"call_remote"</literal>，则该函数只会在远程对等体上执行，不会在本地执行。要让这个函数在本地也能够执行，请将 <literal>sync</literal> 设置为 <literal>"call_local"</literal>，使用 <reference internal="True" refuri="class_node#class-node-method-rpc-config"><inline classes="std std-ref">Node.rpc_config</inline></reference> 将函数配置为 RPC 时，等价于将 <literal>call_local</literal> 设置为 <literal>true</literal>。</paragraph>
            <paragraph><literal>transfer_mode</literal> 提示能够接受的值为 <literal>"unreliable"</literal>、<literal>"unreliable_ordered"</literal>、<literal>"reliable"</literal>，会设置底层 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 的传输模式。见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-transfer-mode"><inline classes="std std-ref">MultiplayerPeer.transfer_mode</inline></reference>。</paragraph>
            <paragraph><literal>transfer_channel</literal> 定义的是底层 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer"><inline classes="std std-ref">MultiplayerPeer</inline></reference> 的通道。见 <reference internal="True" refuri="class_multiplayerpeer#class-multiplayerpeer-property-transfer-channel"><inline classes="std std-ref">MultiplayerPeer.transfer_channel</inline></reference>。</paragraph>
            <paragraph><literal>mode</literal>、<literal>sync</literal> 和 <literal>transfer_mode</literal> 的顺序是无关的，但是相同参数的取值不能出现多次。<literal>transfer_channel</literal> 必须始终为第四个参数（同时前三个参数也必须指定）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@rpc
func fn(): pass

@rpc("any_peer", "unreliable_ordered")
func fn_update_pos(): pass

@rpc("authority", "call_remote", "unreliable", 0) # 等价于 @rpc
func fn_default(): pass</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-static-unload"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-static-unload" names="class_@gdscript_annotation_@static_unload"><strong>@static_unload</strong>() <reference internal="True" refid="class-gdscript-annotation-static-unload"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使具有静态变量的脚本在所有引用丢失后不持久化。如果再次加载脚本，静态变量将恢复为默认值。</paragraph>
            <paragraph>** 注意：<problematic ids="id7" refid="id6">**</problematic>当注释描述其主题时，<reference internal="True" refid="class-gdscript-annotation-static-unload"><inline classes="std std-ref">@static_unload</inline></reference>注释必须放在类定义和继承之前。</paragraph>
            <paragraph>** 警告：<problematic ids="id9" refid="id8">**</problematic>目前，由于一个错误，即使使用了<reference internal="True" refid="class-gdscript-annotation-static-unload"><inline classes="std std-ref">@static_unload</inline></reference> 注释，脚本也永远不会释放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-tool"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-tool" names="class_@gdscript_annotation_@tool"><strong>@tool</strong>() <reference internal="True" refid="class-gdscript-annotation-tool"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将当前脚本标记为工具脚本，允许它被编辑器加载和执行。见<reference internal="True" refuri="../tutorials/plugins/running_code_in_the_editor"><inline classes="doc">《在编辑器中运行代码》</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@tool
extends Node</literal_block>
            <paragraph><strong>注意：</strong>因为注解描述对象的关系，必须把 <reference internal="True" refid="class-gdscript-annotation-tool"><inline classes="std std-ref">@tool</inline></reference> 注解放在类定义和继承之前。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-annotation-warning-ignore"></target>
            <paragraph classes="classref-annotation" ids="class-gdscript-annotation-warning-ignore" names="class_@gdscript_annotation_@warning_ignore"><strong>@warning_ignore</strong>(warning: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, ...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-annotation-warning-ignore"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将后续语句标记为忽略指定的 <literal>warning</literal> 警告。见<reference internal="True" refuri="../tutorials/scripting/gdscript/warning_system"><inline classes="doc">《GDScript 警告系统》</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func test():
    print("你好")
    return
    @warning_ignore("unreachable_code")
    print("无法到达")</literal_block>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id10" names="方法说明">
            <title>方法说明</title>
            <target refid="class-gdscript-method-color8"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-color8" names="class_@gdscript_method_color8"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>Color8</strong>(r8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, g8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, b8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, a8: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> = 255) <reference internal="True" refid="class-gdscript-method-color8"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个由整数红通道（<literal>r8</literal>）、绿通道（<literal>g8</literal>）、蓝通道（<literal>b8</literal>）和可选的 Alpha 通道（<literal>a8</literal>）构造的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>，每个通道的最终值都会除以 <literal>255.0</literal>。如果你需要精确匹配 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> 中的颜色值，<reference internal="True" refid="class-gdscript-method-color8"><inline classes="std std-ref">Color8</inline></reference> 比标准的 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 构造函数更有用。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var red = Color8(255, 0, 0)             # 与 Color(1, 0, 0) 相同
var dark_blue = Color8(0, 0, 51)        # 与 Color(0, 0, 0.2) 相同。
var my_color = Color8(306, 255, 0, 102) # 与 Color(1.2, 1, 0, 0.4) 相同。</literal_block>
            <paragraph><strong>注意：</strong>因为 <reference internal="True" refid="class-gdscript-method-color8"><inline classes="std std-ref">Color8</inline></reference> 比标准 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 构造函数精度更低，所以使用 <reference internal="True" refid="class-gdscript-method-color8"><inline classes="std std-ref">Color8</inline></reference> 创建的颜色通常与使用标准 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> 构造函数创建的相同颜色不相等。请使用 <reference internal="True" refuri="class_color#class-color-method-is-equal-approx"><inline classes="std std-ref">Color.is_equal_approx</inline></reference> 进行比较，避免浮点数精度误差。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-assert"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-assert" names="class_@gdscript_method_assert"><abbreviation explanation="无返回值。">void</abbreviation> <strong>assert</strong>(condition: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>, message: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> = "") <reference internal="True" refid="class-gdscript-method-assert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>断言条件 <literal>condition</literal> 为 <literal>true</literal>。如果条件 <literal>condition</literal> 为 <literal>false</literal> ，则会生成错误。如果是从编辑器运行的，正在运行的项目还会被暂停，直到手动恢复。该函数可以作为 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-push-error"><inline classes="std std-ref">@GlobalScope.push_error</inline></reference> 的加强版，用于向项目开发者和插件用户报错。</paragraph>
            <paragraph>如果给出了可选的 <literal>message</literal> 参数，该信息会和通用的“Assertion failed”消息一起显示。你可以使用它来提供关于断言失败原因的其他详细信息。</paragraph>
            <paragraph><strong>警告：</strong>出于对性能的考虑，<reference internal="True" refid="class-gdscript-method-assert"><inline classes="std std-ref">assert</inline></reference> 中的代码只会在调试版本或者从编辑器运行项目时执行。请勿在 <reference internal="True" refid="class-gdscript-method-assert"><inline classes="std std-ref">assert</inline></reference> 调用中加入具有副作用的代码。否则，项目在以发布模式导出后将有不一致的行为。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 比如说我们希望 speed 始终在 0 和 20 之间。
speed = -10
assert(speed &lt; 20) # True，程序会继续执行
assert(speed &gt;= 0) # False，程序会停止
assert(speed &gt;= 0 and speed &lt; 20) # 你还可以在单次检查中合并两个条件语句
assert(speed &lt; 20, "限速为 20") # 显示消息。</literal_block>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-gdscript-method-assert"><inline classes="std std-ref">assert</inline></reference> 是关键字而非函数，无法作为 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 访问，也无法在表达式中使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-char"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-char" names="class_@gdscript_method_char"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>char</strong>(char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-gdscript-method-char"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定的 Unicode 码位（与ASCII码兼容）的单字符字符串（作为一个<reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">a = char(65)      # a 是“A”
a = char(65 + 32) # a 是“a”
a = char(8364)    # a 是“€”</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-convert"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-convert" names="class_@gdscript_method_convert"><reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> <strong>convert</strong>(what: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-gdscript-method-convert"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph><strong>已弃用：</strong> Use <reference internal="True" refuri="class_@globalscope#class-globalscope-method-type-convert"><inline classes="std std-ref">@GlobalScope.type_convert</inline></reference> instead.</paragraph>
            <paragraph>在可能的情况下将 <literal>what</literal> 转换为 <literal>type</literal> 。 <literal>type</literal> 使用 <reference internal="True" refuri="class_@globalscope#enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> 值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var a = [4, 2.5, 1.2]
print(a is Array) # 输出 true

var b = convert(a, TYPE_PACKED_BYTE_ARRAY)
print(b)          # 输出 [4, 2, 1]
print(b is Array) # 输出 false</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-dict-to-inst"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-dict-to-inst" names="class_@gdscript_method_dict_to_inst"><reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> <strong>dict_to_inst</strong>(dictionary: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-gdscript-method-dict-to-inst"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将一个 <literal>dictionary</literal> （用 <reference internal="True" refid="class-gdscript-method-inst-to-dict"><inline classes="std std-ref">inst_to_dict</inline></reference> 创建的）转换回为一个 Object 实例。在反序列化时可能很有用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-get-stack"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-get-stack" names="class_@gdscript_method_get_stack"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_stack</strong>() <reference internal="True" refid="class-gdscript-method-get-stack"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个表示当前调用堆栈的字典数组。另请参阅 <reference internal="True" refid="class-gdscript-method-print-stack"><inline classes="std std-ref">print_stack</inline></reference>。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    foo()

func foo():
    bar()

func bar():
    print(get_stack())</literal_block>
            <paragraph>从 <literal>_ready()</literal> 开始，<literal>bar()</literal> 将打印：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">[{function:bar, line:12, source:res://script.gd}, {function:foo, line:9, source:res://script.gd}, {function:_ready, line:6, source:res://script.gd}]</literal_block>
            <paragraph><strong>注意：</strong>只有在运行的实例连接到调试服务器（即编辑器实例）后，该函数才有效。<reference internal="True" refid="class-gdscript-method-get-stack"><inline classes="std std-ref">get_stack</inline></reference> 不适用于以发布模式导出的项目；或者在未连接到调试服务器的情况下，以调试模式导出的项目。</paragraph>
            <paragraph><strong>注意：</strong>不支持从 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 调用此函数。这样做将返回一个空数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-inst-to-dict"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-inst-to-dict" names="class_@gdscript_method_inst_to_dict"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>inst_to_dict</strong>(instance: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>) <reference internal="True" refid="class-gdscript-method-inst-to-dict"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回传入的 <literal>instance</literal> 转换为的字典。可用于序列化。</paragraph>
            <paragraph><strong>注意：</strong>不能用于序列化附加了内置脚本的对象，或在内置脚本中分配的对象。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var foo = "bar"
func _ready():
    var d = inst_to_dict(self)
    print(d.keys())
    print(d.values())</literal_block>
            <paragraph>输出：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">[@subpath, @path, foo]
[, res://test.gd, bar]</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-is-instance-of"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-is-instance-of" names="class_@gdscript_method_is_instance_of"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_instance_of</strong>(value: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>, type: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-gdscript-method-is-instance-of"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>value</literal> 为 <literal>type</literal> 类型的实例，则返回 <literal>true</literal>。<literal>type</literal> 的值必须为下列值之一：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-variant-type"><inline classes="std std-ref">Variant.Type</inline></reference> 枚举常量，例如 <reference internal="True" refuri="class_@globalscope#class-globalscope-constant-type-int"><inline classes="std std-ref">@GlobalScope.TYPE_INT</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> 中存在的派生自 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 的类，例如 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_script#class-script"><inline classes="std std-ref">Script</inline></reference>（可以用任何类，包括内部类）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><literal>type</literal> 可以不是常量，这一点与 <literal>is</literal> 的右操作数不同。<literal>is</literal> 运算符支持的功能更多（例如类型化数组）。如果你不需要动态类型检查，请使用该运算符，不要使用此方法。</paragraph>
            <paragraph>示例：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(is_instance_of(a, TYPE_INT))
print(is_instance_of(a, Node))
print(is_instance_of(a, MyClass))
print(is_instance_of(a, MyClass.InnerClass))</literal_block>
            <paragraph><strong>注意：</strong>如果 <literal>value</literal> 和/或 <literal>type</literal> 为已释放的对象（见 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-is-instance-valid"><inline classes="std std-ref">@GlobalScope.is_instance_valid</inline></reference>），或者 <literal>type</literal> 不是以上选项之一，则此方法会报运行时错误。</paragraph>
            <paragraph>另见 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-typeof"><inline classes="std std-ref">@GlobalScope.typeof</inline></reference>、<reference internal="True" refid="class-gdscript-method-type-exists"><inline classes="std std-ref">type_exists</inline></reference>、<reference internal="True" refuri="class_array#class-array-method-is-same-typed"><inline classes="std std-ref">Array.is_same_typed</inline></reference>（以及其他 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> 方法）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-len"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-len" names="class_@gdscript_method_len"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>len</strong>(var: <reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference>) <reference internal="True" refid="class-gdscript-method-len"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回给定 Variant <literal>var</literal> 的长度。长度可以是 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 或 <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference> 的字符数、任意数组类型的元素数或 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> 的大小等。对于所有其他 Variant 类型，都会生成运行时错误并停止执行。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">a = [1, 2, 3, 4]
len(a) # 返回 4

b = "Hello!"
len(b) # 返回 6</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-load"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-load" names="class_@gdscript_method_load"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>load</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdscript-method-load"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个位于文件系统绝对路径 <literal>path</literal> 下的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>。该资源除非已在其他地方引用（例如在另一个脚本或场景中），否则将在函数调用时从磁盘加载，可能会导致轻微的延迟，尤其是在加载大型场景时。为避免在多次加载某些内容时出现不必要的延迟，可以将资源存储在变量中，也可使用预加载 <reference internal="True" refid="class-gdscript-method-preload"><inline classes="std std-ref">preload</inline></reference> 方法加载，该方法相当于使用 <reference internal="True" refuri="class_resourceloader#class-resourceloader-constant-cache-mode-reuse"><inline classes="std std-ref">ResourceLoader.CACHE_MODE_REUSE</inline></reference> 模式调用 <reference internal="True" refuri="class_resourceloader#class-resourceloader-method-load"><inline classes="std std-ref">ResourceLoader.load</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>资源路径可以通过右键单击文件系统停靠面板中的资源并选择“复制路径”，或将文件从文件系统停靠面板拖到脚本中获得。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 加载位于项目根目录的一个名为“main”的场景，并将其缓存在一个变量中。
var main = load("res://main.tscn") # main 将包含一个 PackedScene 资源。</literal_block>
            <paragraph><strong>重要：</strong>相对路径相对的<emphasis>不是</emphasis>调用该方法的脚本，而是会使用 <literal>"res://"</literal> 前缀。加载时使用相对路径可能与预期行为不符。</paragraph>
            <paragraph>这个方法是 <reference internal="True" refuri="class_resourceloader#class-resourceloader-method-load"><inline classes="std std-ref">ResourceLoader.load</inline></reference> 的简化版，原方法可以用于更高级的场景。</paragraph>
            <paragraph><strong>注意：</strong>必须先将文件导入引擎才能使用此函数加载它们。如果你想在运行时加载 <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>，你可以使用 <reference internal="True" refuri="class_image#class-image-method-load"><inline classes="std std-ref">Image.load</inline></reference>。如果要导入音频文件，可以使用 <reference internal="True" refuri="class_audiostreammp3#class-audiostreammp3-property-data"><inline classes="std std-ref">AudioStreamMP3.data</inline></reference> 中描述的代码片段。</paragraph>
            <paragraph><strong>注意：</strong>如果 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-editor-export-convert-text-resources-to-binary"><inline classes="std std-ref">ProjectSettings.editor/export/convert_text_resources_to_binary</inline></reference> 为 <literal>true</literal>，则 <reference internal="True" refid="class-gdscript-method-load"><inline classes="std std-ref">load</inline></reference> 无法在导出后的项目中读取已转换的文件。如果你需要在运行时加载存在于 PCK 中的文件，请将 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-editor-export-convert-text-resources-to-binary"><inline classes="std std-ref">ProjectSettings.editor/export/convert_text_resources_to_binary</inline></reference> 设置为 <literal>false</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-preload"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-preload" names="class_@gdscript_method_preload"><reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>preload</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-gdscript-method-preload"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个位于文件系统绝对路径 <literal>path</literal> 的 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference>。运行时，该资源将在解析脚本时加载，实际上可以将这个函数视作对该资源的引用。请注意：此函数要求 <literal>path</literal> 为 <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> 常量。如果要动态/可变的路径加载资源，请使用 <reference internal="True" refid="class-gdscript-method-load"><inline classes="std std-ref">load</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>资源路径可以通过右键单击资产面板中的资源并选择“复制路径”，或通过将文件从文件系统停靠面板拖到脚本中来获得。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># 创建场景的实例。
var diamond = preload("res://diamond.tscn").instantiate()</literal_block>
            <paragraph><strong>注意：</strong><reference internal="True" refid="class-gdscript-method-preload"><inline classes="std std-ref">preload</inline></reference> 是关键字而非函数，无法作为 <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> 访问。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-print-debug"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-print-debug" names="class_@gdscript_method_print_debug"><abbreviation explanation="无返回值。">void</abbreviation> <strong>print_debug</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-method-print-debug"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>与 <reference internal="True" refuri="class_@globalscope#class-globalscope-method-print"><inline classes="std std-ref">@GlobalScope.print</inline></reference> 类似，但在打开调试器运行时还会包含当前栈帧。</paragraph>
            <paragraph>控制台中的输出应该是类似这样的：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Test print
At: res://test.gd:15:_process()</literal_block>
            <paragraph><strong>注意：</strong>不支持从 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 中调用此方法。调用时会输出线程 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-print-stack"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-print-stack" names="class_@gdscript_method_print_stack"><abbreviation explanation="无返回值。">void</abbreviation> <strong>print_stack</strong>() <reference internal="True" refid="class-gdscript-method-print-stack"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>输出当前代码位置的栈追踪。另请参阅 <reference internal="True" refid="class-gdscript-method-get-stack"><inline classes="std std-ref">get_stack</inline></reference>。</paragraph>
            <paragraph>控制台中的输出是类似这样的：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">Frame 0 - res://test.gd:16 in function '_process'</literal_block>
            <paragraph><strong>注意：</strong>只有在运行的实例连接到调试服务器（即编辑器实例）后，该函数才有效。<reference internal="True" refid="class-gdscript-method-print-stack"><inline classes="std std-ref">print_stack</inline></reference> 不适用于以发布模式导出的项目；或者在未连接到调试服务器的情况下，以调试模式导出的项目。</paragraph>
            <paragraph><strong>注意：</strong>不支持从 <reference internal="True" refuri="class_thread#class-thread"><inline classes="std std-ref">Thread</inline></reference> 调用此函数。这样做将改为打印线程 ID。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-range"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-range" names="class_@gdscript_method_range"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>range</strong>(...) <abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation> <reference internal="True" refid="class-gdscript-method-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回具有给定范围的数组。<reference internal="True" refid="class-gdscript-method-range"><inline classes="std std-ref">range</inline></reference> 可以通过三种方式调用：</paragraph>
            <paragraph><literal>range(n: int)</literal>：从 0 开始，每次加 1，在到达 <literal>n</literal> <emphasis>之前</emphasis>停止。<strong>不包含</strong>参数 <literal>n</literal>。</paragraph>
            <paragraph><literal>range(b: int, n: int)</literal>：从 <literal>b</literal> 开始，每次加 1，在到达 <literal>n</literal> <emphasis>之前</emphasis>停止。<strong>包含</strong>参数 <literal>b</literal>，<strong>不包含</strong>参数 <literal>n</literal>。</paragraph>
            <paragraph><literal>range(b: int, n: int, s: int)</literal>：从 <literal>b</literal> 开始，以 <literal>s</literal> 为步长递增/递减，在到达 <literal>n</literal> <emphasis>之前</emphasis>停止。<strong>包含</strong>参数 <literal>b</literal>，<strong>不包含</strong>参数 <literal>n</literal>。参数 <literal>s</literal> <strong>可以</strong>为负数，但不能为 <literal>0</literal>。如果 <literal>s</literal> 为 <literal>0</literal>，则会输出一条错误消息。</paragraph>
            <paragraph><reference internal="True" refid="class-gdscript-method-range"><inline classes="std std-ref">range</inline></reference> 会先将所有参数转换为 <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> 再进行处理。</paragraph>
            <paragraph><strong>注意：</strong>如果没有满足条件的值，则返回空数组（例如 <literal>range(2, 5, -1)</literal> 和 <literal>range(5, 5, 1)</literal>）。</paragraph>
            <paragraph>示例：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">print(range(4))        # 输出 [0, 1, 2, 3]
print(range(2, 5))     # 输出 [2, 3, 4]
print(range(0, 6, 2))  # 输出 [0, 2, 4]
print(range(4, 1, -1)) # 输出 [4, 3, 2]</literal_block>
            <paragraph>要反向遍历 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，请使用：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var array = [3, 6, 9]
for i in range(array.size() - 1, -1, -1):
    print(array[i])</literal_block>
            <paragraph>输出：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">9
6
3</literal_block>
            <paragraph>要遍历 <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>，请在循环中进行转换。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">for i in range (3, 0, -1):
    print(i / 10.0)</literal_block>
            <paragraph>输出：</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">0.3
0.2
0.1</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-gdscript-method-type-exists"></target>
            <paragraph classes="classref-method" ids="class-gdscript-method-type-exists" names="class_@gdscript_method_type_exists"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>type_exists</strong>(type: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-gdscript-method-type-exists"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> 中存在给定的 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 派生类，则返回 <literal>true</literal>。请注意，<reference internal="True" refuri="class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 数据类型未在 <reference internal="True" refuri="class_classdb#class-classdb"><inline classes="std std-ref">ClassDB</inline></reference> 中注册。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">type_exists("Sprite2D") # 返回 true
type_exists("NonExistentClass") # 返回 false</literal_block>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
