<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_fontfile.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/FontFile.xml.</comment>
    <target refid="class-fontfile"></target>
    <section ids="fontfile class-fontfile" names="fontfile class_fontfile">
        <title>FontFile</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>存放字体源数据和预渲染字形的缓存，从动态字体或位图字体导入。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>FontFile</strong> 包含了一组字形，代表从字体文件中导入的 Unicode 字符，还包含了光栅化字形的缓存，以及一组备用的回退 <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>。</paragraph>
            <paragraph>要访问字体的 OpenType 变体，创建模拟的粗体/斜体版本，或者绘制文本行，请使用 <reference internal="True" refuri="class_fontvariation#class-fontvariation"><inline classes="std std-ref">FontVariation</inline></reference>。</paragraph>
            <paragraph>要进行更复杂的文本处理，请将 <reference internal="True" refuri="class_fontvariation#class-fontvariation"><inline classes="std std-ref">FontVariation</inline></reference> 与 <reference internal="True" refuri="class_textline#class-textline"><inline classes="std std-ref">TextLine</inline></reference> 或 <reference internal="True" refuri="class_textparagraph#class-textparagraph"><inline classes="std std-ref">TextParagraph</inline></reference> 结合使用。</paragraph>
            <paragraph>支持的字体格式：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>动态字体导入器：TrueType（.ttf）、TrueType 合集（.ttc）、OpenType（.otf）、OpenType 合集（.otc）、WOFF（.woff）、WOFF2（.woff2）、Type 1（.pfb，.pfm）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>位图字体导入器：AngelCode BMFont（.fnt，.font），支持文本和二进制（版本 3）格式变体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>等宽图像字体导入器：所有支持的图像格式。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>注意：</strong>字符（character）是一种表示某个项目（字母、数字等）的抽象符号。</paragraph>
            <paragraph><strong>注意：</strong>字形（glphy）是一种位图或形状，用于根据上下文绘制一个或多个字符。字形索引绑定的是某个字体数据源。</paragraph>
            <paragraph><strong>注意：</strong>如果所有字体数据源都不包含字符串中某个字符的字形，那么该字符就会被替换为一个中间是对应十六进制码的方框。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var f = load("res://BarlowCondensed-Bold.ttf")
$Label.add_theme_font_override("font", f)
$Label.add_theme_font_size_override("font_size", 64)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var f = ResourceLoader.Load&lt;FontFile&gt;("res://BarlowCondensed-Bold.ttf");
GetNode("Label").AddThemeFontOverride("font", f);
GetNode("Label").AddThemeFontSizeOverride("font_size", 64);</literal_block>
                </div>
            </container>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving"><inline classes="doc">运行时文件加载与保存</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="65"></colspec>
                    <colspec colwidth="103"></colspec>
                    <colspec colwidth="23"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-allow-system-fallback"><inline classes="std std-ref">allow_system_fallback</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-antialiasing"><inline classes="std std-ref">antialiasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-data"><inline classes="std std-ref">data</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>PackedByteArray()</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-disable-embedded-bitmaps"><inline classes="std std-ref">disable_embedded_bitmaps</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-fixed-size"><inline classes="std std-ref">fixed_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-fixed-size-scale-mode"><inline classes="std std-ref">fixed_size_scale_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-font-name"><inline classes="std std-ref">font_name</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-font-stretch"><inline classes="std std-ref">font_stretch</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>100</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-font-style"><inline classes="std std-ref">font_style</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-font-weight"><inline classes="std std-ref">font_weight</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>400</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-force-autohinter"><inline classes="std std-ref">force_autohinter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-generate-mipmaps"><inline classes="std std-ref">generate_mipmaps</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-hinting"><inline classes="std std-ref">hinting</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">msdf_pixel_range</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>16</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-msdf-size"><inline classes="std std-ref">msdf_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>48</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">multichannel_signed_distance_field</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-opentype-feature-overrides"><inline classes="std std-ref">opentype_feature_overrides</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>{}</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-oversampling"><inline classes="std std-ref">oversampling</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-style-name"><inline classes="std std-ref">style_name</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-property-subpixel-positioning"><inline classes="std std-ref">subpixel_positioning</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="62"></colspec>
                    <colspec colwidth="251"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-clear-cache"><inline classes="std std-ref">clear_cache</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-clear-glyphs"><inline classes="std std-ref">clear_glyphs</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-clear-kerning-map"><inline classes="std std-ref">clear_kerning_map</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-clear-size-cache"><inline classes="std std-ref">clear_size_cache</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-clear-textures"><inline classes="std std-ref">clear_textures</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-cache-ascent"><inline classes="std std-ref">get_cache_ascent</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-cache-count"><inline classes="std std-ref">get_cache_count</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-cache-descent"><inline classes="std std-ref">get_cache_descent</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-cache-scale"><inline classes="std std-ref">get_cache_scale</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-cache-underline-position"><inline classes="std std-ref">get_cache_underline_position</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-cache-underline-thickness"><inline classes="std std-ref">get_cache_underline_thickness</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-char-from-glyph-index"><inline classes="std std-ref">get_char_from_glyph_index</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-embolden"><inline classes="std std-ref">get_embolden</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-extra-baseline-offset"><inline classes="std std-ref">get_extra_baseline_offset</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-extra-spacing"><inline classes="std std-ref">get_extra_spacing</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-face-index"><inline classes="std std-ref">get_face_index</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-glyph-advance"><inline classes="std std-ref">get_glyph_advance</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-glyph-index"><inline classes="std std-ref">get_glyph_index</inline></reference>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_selector: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-glyph-list"><inline classes="std std-ref">get_glyph_list</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-glyph-offset"><inline classes="std std-ref">get_glyph_offset</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-glyph-size"><inline classes="std std-ref">get_glyph_size</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-glyph-texture-idx"><inline classes="std std-ref">get_glyph_texture_idx</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-glyph-uv-rect"><inline classes="std std-ref">get_glyph_uv_rect</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-kerning"><inline classes="std std-ref">get_kerning</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-kerning-list"><inline classes="std std-ref">get_kerning_list</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-language-support-override"><inline classes="std std-ref">get_language_support_override</inline></reference>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-language-support-overrides"><inline classes="std std-ref">get_language_support_overrides</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-script-support-override"><inline classes="std std-ref">get_script_support_override</inline></reference>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-script-support-overrides"><inline classes="std std-ref">get_script_support_overrides</inline></reference>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-size-cache-list"><inline classes="std std-ref">get_size_cache_list</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-texture-count"><inline classes="std std-ref">get_texture_count</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-texture-image"><inline classes="std std-ref">get_texture_image</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-texture-offsets"><inline classes="std std-ref">get_texture_offsets</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-transform"><inline classes="std std-ref">get_transform</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-get-variation-coordinates"><inline classes="std std-ref">get_variation_coordinates</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-load-bitmap-font"><inline classes="std std-ref">load_bitmap_font</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-load-dynamic-font"><inline classes="std std-ref">load_dynamic_font</inline></reference>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-remove-cache"><inline classes="std std-ref">remove_cache</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-remove-glyph"><inline classes="std std-ref">remove_glyph</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-remove-kerning"><inline classes="std std-ref">remove_kerning</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-remove-language-support-override"><inline classes="std std-ref">remove_language_support_override</inline></reference>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-remove-script-support-override"><inline classes="std std-ref">remove_script_support_override</inline></reference>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-remove-size-cache"><inline classes="std std-ref">remove_size_cache</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-remove-texture"><inline classes="std std-ref">remove_texture</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-render-glyph"><inline classes="std std-ref">render_glyph</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-render-range"><inline classes="std std-ref">render_range</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-cache-ascent"><inline classes="std std-ref">set_cache_ascent</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ascent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-cache-descent"><inline classes="std std-ref">set_cache_descent</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, descent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-cache-scale"><inline classes="std std-ref">set_cache_scale</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-cache-underline-position"><inline classes="std std-ref">set_cache_underline_position</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-cache-underline-thickness"><inline classes="std std-ref">set_cache_underline_thickness</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_thickness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-embolden"><inline classes="std std-ref">set_embolden</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-extra-baseline-offset"><inline classes="std std-ref">set_extra_baseline_offset</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, baseline_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-extra-spacing"><inline classes="std std-ref">set_extra_spacing</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-face-index"><inline classes="std std-ref">set_face_index</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, face_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-glyph-advance"><inline classes="std std-ref">set_glyph_advance</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, advance: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-glyph-offset"><inline classes="std std-ref">set_glyph_offset</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-glyph-size"><inline classes="std std-ref">set_glyph_size</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gl_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-glyph-texture-idx"><inline classes="std std-ref">set_glyph_texture_idx</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-glyph-uv-rect"><inline classes="std std-ref">set_glyph_uv_rect</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, uv_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-kerning"><inline classes="std std-ref">set_kerning</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, kerning: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-language-support-override"><inline classes="std std-ref">set_language_support_override</inline></reference>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-script-support-override"><inline classes="std std-ref">set_script_support_override</inline></reference>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-texture-image"><inline classes="std std-ref">set_texture_image</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-texture-offsets"><inline classes="std std-ref">set_texture_offsets</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-transform"><inline classes="std std-ref">set_transform</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-fontfile-method-set-variation-coordinates"><inline classes="std std-ref">set_variation_coordinates</inline></reference>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_coordinates: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="属性说明">
            <title>属性说明</title>
            <target refid="class-fontfile-property-allow-system-fallback"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-allow-system-fallback" names="class_fontfile_property_allow_system_fallback"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>allow_system_fallback</strong> = <literal>true</literal> <reference internal="True" refid="class-fontfile-property-allow-system-fallback"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_allow_system_fallback</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_allow_system_fallback</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>true</literal>，则可以自动将系统字体作为回退使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-antialiasing"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-antialiasing" names="class_fontfile_property_antialiasing"><reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>antialiasing</strong> = <literal>1</literal> <reference internal="True" refid="class-fontfile-property-antialiasing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_antialiasing</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fontantialiasing"><inline classes="std std-ref">FontAntialiasing</inline></reference> <strong>get_antialiasing</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体抗锯齿模式。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-data"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-data" names="class_fontfile_property_data"><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>data</strong> = <literal>PackedByteArray()</literal> <reference internal="True" refid="class-fontfile-property-data"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_data</strong>(value: <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> <strong>get_data</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>动态字体源文件的内容。</paragraph>
            <paragraph><strong>Note:</strong> The returned array is <emphasis>copied</emphasis> and any changes to it will not update the original property value. See <reference internal="True" refuri="class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference> for more details.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-disable-embedded-bitmaps"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-disable-embedded-bitmaps" names="class_fontfile_property_disable_embedded_bitmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>disable_embedded_bitmaps</strong> = <literal>true</literal> <reference internal="True" refid="class-fontfile-property-disable-embedded-bitmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_disable_embedded_bitmaps</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_disable_embedded_bitmaps</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则会禁用内嵌字体位图的加载（仅包含位图的字体以及彩色字体会禁用该属性）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-fixed-size"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-fixed-size" names="class_fontfile_property_fixed_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>fixed_size</strong> = <literal>0</literal> <reference internal="True" refid="class-fontfile-property-fixed-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fixed_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_fixed_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体大小，仅用于位图字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-fixed-size-scale-mode"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-fixed-size-scale-mode" names="class_fontfile_property_fixed_size_scale_mode"><reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>fixed_size_scale_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-fontfile-property-fixed-size-scale-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_fixed_size_scale_mode</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-fixedsizescalemode"><inline classes="std std-ref">FixedSizeScaleMode</inline></reference> <strong>get_fixed_size_scale_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>缩放模式，只有 <reference internal="True" refid="class-fontfile-property-fixed-size"><inline classes="std std-ref">fixed_size</inline></reference> 大于零的位图字体会使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-font-name"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-font-name" names="class_fontfile_property_font_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>font_name</strong> = <literal>""</literal> <reference internal="True" refid="class-fontfile-property-font-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font_name</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_font_name</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体家族名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-font-stretch"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-font-stretch" names="class_fontfile_property_font_stretch"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_stretch</strong> = <literal>100</literal> <reference internal="True" refid="class-fontfile-property-font-stretch"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font_stretch</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_font_stretch</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>与正常宽度相比的字体的拉伸量。 一个介于 <literal>50%</literal> 和 <literal>200%</literal> 之间的百分比值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-font-style"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-font-style" names="class_fontfile_property_font_style"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>] <strong>font_style</strong> = <literal>0</literal> <reference internal="True" refid="class-fontfile-property-font-style"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font_style</strong>(value: <abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>] <strong>get_font_style</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体样式标志，见 <reference internal="True" refuri="class_textserver#enum-textserver-fontstyle"><inline classes="std std-ref">FontStyle</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-font-weight"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-font-weight" names="class_fontfile_property_font_weight"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_weight</strong> = <literal>400</literal> <reference internal="True" refid="class-fontfile-property-font-weight"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font_weight</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_font_weight</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该字体的字重（粗度）。一个在 <literal>100...999</literal> 范围内的值，正常字体字重为 <literal>400</literal>，粗体字体字重为 <literal>700</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-force-autohinter"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-force-autohinter" names="class_fontfile_property_force_autohinter"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>force_autohinter</strong> = <literal>false</literal> <reference internal="True" refid="class-fontfile-property-force-autohinter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_force_autohinter</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_force_autohinter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>true</literal>，则支持自动提示并且优先于字体内置提示。仅由动态字体使用（MSDF 字体不支持提示）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-generate-mipmaps"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-generate-mipmaps" names="class_fontfile_property_generate_mipmaps"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>generate_mipmaps</strong> = <literal>false</literal> <reference internal="True" refid="class-fontfile-property-generate-mipmaps"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_generate_mipmaps</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_generate_mipmaps</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <literal>true</literal>，则为字体纹理生成 mipmap。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-hinting"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-hinting" names="class_fontfile_property_hinting"><reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>hinting</strong> = <literal>1</literal> <reference internal="True" refid="class-fontfile-property-hinting"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_hinting</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-hinting"><inline classes="std std-ref">Hinting</inline></reference> <strong>get_hinting</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体微调模式。仅由动态字体使用。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-msdf-pixel-range"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-msdf-pixel-range" names="class_fontfile_property_msdf_pixel_range"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>msdf_pixel_range</strong> = <literal>16</literal> <reference internal="True" refid="class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_msdf_pixel_range</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_msdf_pixel_range</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>最小和最大可表示的有符号距离之间的形状周围的范围宽度。如果使用字体轮廓，<reference internal="True" refid="class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">msdf_pixel_range</inline></reference> 必须至少设置为最大字体轮廓大小的<emphasis>两倍</emphasis>。<reference internal="True" refid="class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">msdf_pixel_range</inline></reference> 的默认值为 <literal>16</literal>，允许大小最大到 <literal>8</literal> 的轮廓看起来正确。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-msdf-size"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-msdf-size" names="class_fontfile_property_msdf_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>msdf_size</strong> = <literal>48</literal> <reference internal="True" refid="class-fontfile-property-msdf-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_msdf_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_msdf_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于生成 MSDF 纹理的源字体大小。较高的值允许更高的精度，但渲染速度较慢并且需要更多内存。只有当注意到字形渲染中明显缺乏精度时，才增加该属性的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-multichannel-signed-distance-field"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-multichannel-signed-distance-field" names="class_fontfile_property_multichannel_signed_distance_field"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>multichannel_signed_distance_field</strong> = <literal>false</literal> <reference internal="True" refid="class-fontfile-property-multichannel-signed-distance-field"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_multichannel_signed_distance_field</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_multichannel_signed_distance_field</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果被设置为 <literal>true</literal>，则所有大小的字形进行渲染时，都使用从动态字体矢量数据中生成的单个多通道带符号距离场（MSDF）。由于这种方法不依赖于在每次字体大小发生变化时，对字体进行栅格化，因此可以实时调整字体大小而不会造成任何性能损失。对于按比例缩小的 <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference>（或从远距离查看的 <reference internal="True" refuri="class_label3d#class-label3d"><inline classes="std std-ref">Label3D</inline></reference>），文本也不会看起来有颗粒感。有一个缺点，MSDF 不提供字体提示。缺少字体提示可能会导致大小较小的字体的清晰度和可读性较差。</paragraph>
            <paragraph><strong>注意：</strong>如果使用字体轮廓，<reference internal="True" refid="class-fontfile-property-msdf-pixel-range"><inline classes="std std-ref">msdf_pixel_range</inline></reference> 必须至少设置为最大字体轮廓大小的<emphasis>两倍</emphasis>。</paragraph>
            <paragraph><strong>注意：</strong>MSDF 字体渲染不能正确渲染具有重叠形状的字形。根据 OpenType 标准，重叠形状是无效的，但在许多字体文件中仍然很常见，尤其是那些由 Google 字体转换的字体文件。为避免字形重叠的问题，请考虑直接从字体开发公司下载字体文件，而不是依赖 Google 字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-opentype-feature-overrides"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-opentype-feature-overrides" names="class_fontfile_property_opentype_feature_overrides"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>opentype_feature_overrides</strong> = <literal>{}</literal> <reference internal="True" refid="class-fontfile-property-opentype-feature-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_opentype_feature_overrides</strong>(value: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_opentype_feature_overrides</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体 OpenType 特性集覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-oversampling"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-oversampling" names="class_fontfile_property_oversampling"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>oversampling</strong> = <literal>0.0</literal> <reference internal="True" refid="class-fontfile-property-oversampling"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_oversampling</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_oversampling</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体过采样系数。如果设置为 <literal>0.0</literal> ，则使用全局过采样系数。仅由动态字体使用（MSDF 字体忽略过采样）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-style-name"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-style-name" names="class_fontfile_property_style_name"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>style_name</strong> = <literal>""</literal> <reference internal="True" refid="class-fontfile-property-style-name"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font_style_name</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_font_style_name</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体样式名称。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-property-subpixel-positioning"></target>
            <paragraph classes="classref-property" ids="class-fontfile-property-subpixel-positioning" names="class_fontfile_property_subpixel_positioning"><reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>subpixel_positioning</strong> = <literal>1</literal> <reference internal="True" refid="class-fontfile-property-subpixel-positioning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_subpixel_positioning</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-subpixelpositioning"><inline classes="std std-ref">SubpixelPositioning</inline></reference> <strong>get_subpixel_positioning</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>字体字形的子像素定位模式。子像素定位为较小的字体提供了更清晰的文本和更好的字距调整，但代价是更高的内存占用和更低的字体光栅化速度。使用 <reference internal="True" refuri="class_textserver#class-textserver-constant-subpixel-positioning-auto"><inline classes="std std-ref">TextServer.SUBPIXEL_POSITIONING_AUTO</inline></reference> 来根据字体大小自动启用它。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="方法说明">
            <title>方法说明</title>
            <target refid="class-fontfile-method-clear-cache"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-clear-cache" names="class_fontfile_method_clear_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_cache</strong>() <reference internal="True" refid="class-fontfile-method-clear-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有字体缓存条目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-clear-glyphs"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-clear-glyphs" names="class_fontfile_method_clear_glyphs"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_glyphs</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-fontfile-method-clear-glyphs"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从字体缓存条目中，移除所有渲染的字形信息。</paragraph>
            <paragraph><strong>注意：</strong>该函数不会移除与字形相关的纹理，请使用 <reference internal="True" refid="class-fontfile-method-remove-texture"><inline classes="std std-ref">remove_texture</inline></reference> 手动移除它们。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-clear-kerning-map"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-clear-kerning-map" names="class_fontfile_method_clear_kerning_map"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_kerning_map</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-clear-kerning-map"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除所有字距调整覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-clear-size-cache"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-clear-size-cache" names="class_fontfile_method_clear_size_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_size_cache</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-clear-size-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除所有字体大小</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-clear-textures"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-clear-textures" names="class_fontfile_method_clear_textures"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_textures</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-fontfile-method-clear-textures"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从字体缓存条目中，移除所有纹理。</paragraph>
            <paragraph><strong>注意：</strong>该函数不会移除与纹理相关的字形，请使用 <reference internal="True" refid="class-fontfile-method-remove-glyph"><inline classes="std std-ref">remove_glyph</inline></reference> 手动移除它们。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-cache-ascent"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-cache-ascent" names="class_fontfile_method_get_cache_ascent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cache_ascent</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-cache-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体的上升幅度（超出基线的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-cache-count"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-cache-count" names="class_fontfile_method_get_cache_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_cache_count</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-cache-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体缓存条目的数量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-cache-descent"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-cache-descent" names="class_fontfile_method_get_cache_descent"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cache_descent</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-cache-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体的减少量（低于基线的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-cache-scale"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-cache-scale" names="class_fontfile_method_get_cache_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cache_scale</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-cache-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回颜色位图字体的缩放系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-cache-underline-position"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-cache-underline-position" names="class_fontfile_method_get_cache_underline_position"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cache_underline_position</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-cache-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-cache-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-cache-underline-thickness" names="class_fontfile_method_get_cache_underline_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_cache_underline_thickness</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-cache-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回下划线的粗细度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-char-from-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-char-from-glyph-index" names="class_fontfile_method_get_char_from_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_char_from_glyph_index</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-char-from-glyph-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回与 <literal>glyph_index</literal> 关联的字符代码，如果 <literal>glyph_index</literal> 无效则返回 <literal>0</literal>。见 <reference internal="True" refid="class-fontfile-method-get-glyph-index"><inline classes="std std-ref">get_glyph_index</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-embolden"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-embolden" names="class_fontfile_method_get_embolden"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_embolden</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-embolden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回加粗强度，如果不等于零，则加粗字体轮廓。负值会减小轮廓粗细。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-extra-baseline-offset"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-extra-baseline-offset" names="class_fontfile_method_get_extra_baseline_offset"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_extra_baseline_offset</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-extra-baseline-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回额外的基线偏移（作为字体高度的一部分）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-extra-spacing"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-extra-spacing" names="class_fontfile_method_get_extra_spacing"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_extra_spacing</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-extra-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>spacing</literal> 的间距（见 <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>），单位为像素（与字体大小无关）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-face-index"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-face-index" names="class_fontfile_method_get_face_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_face_index</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-face-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 TrueType / OpenType 集合中的活动字体索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-glyph-advance" names="class_fontfile_method_get_glyph_advance"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_glyph_advance</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-glyph-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形前进量（下一个字形的偏移量）。</paragraph>
            <paragraph><strong>注意：</strong>字形轮廓的前进量，与基础字形的前进量相同，不会被保存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-glyph-index"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-glyph-index" names="class_fontfile_method_get_glyph_index"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_glyph_index</strong>(size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, char: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_selector: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-glyph-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>char</literal> 的字形索引，可以用 <literal>variation_selector</literal> 修改。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-glyph-list"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-glyph-list" names="class_fontfile_method_get_glyph_list"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_glyph_list</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-glyph-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回缓存条目中的已渲染字形列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-glyph-offset" names="class_fontfile_method_get_glyph_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_glyph_offset</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-glyph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形的基线偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-glyph-size" names="class_fontfile_method_get_glyph_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_glyph_size</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-glyph-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-glyph-texture-idx" names="class_fontfile_method_get_glyph_texture_idx"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_glyph_texture_idx</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-glyph-texture-idx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含该字形的缓存纹理的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-glyph-uv-rect" names="class_fontfile_method_get_glyph_uv_rect"><reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> <strong>get_glyph_uv_rect</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-glyph-uv-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含该字形的缓存纹理中的矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-kerning"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-kerning" names="class_fontfile_method_get_kerning"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_kerning</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字形对的字距调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-kerning-list"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-kerning-list" names="class_fontfile_method_get_kerning_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>get_kerning_list</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-kerning-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字距调整覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-language-support-override" names="class_fontfile_method_get_language_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_language_support_override</strong>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>language</literal> 启用了支持覆盖，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-language-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-language-support-overrides" names="class_fontfile_method_get_language_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_language_support_overrides</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-language-support-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回语言支持覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-script-support-override" names="class_fontfile_method_get_script_support_override"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_script_support_override</strong>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>script</literal> 启用了支持覆盖，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-script-support-overrides"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-script-support-overrides" names="class_fontfile_method_get_script_support_overrides"><reference internal="True" refuri="class_packedstringarray#class-packedstringarray"><inline classes="std std-ref">PackedStringArray</inline></reference> <strong>get_script_support_overrides</strong>() <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-script-support-overrides"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回文字支持覆盖的列表。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-size-cache-list"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-size-cache-list" names="class_fontfile_method_get_size_cache_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>] <strong>get_size_cache_list</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-size-cache-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回缓存中字体大小的列表。每个大小都是由字体大小和轮廓大小组成的 <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-texture-count"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-texture-count" names="class_fontfile_method_get_texture_count"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_texture_count</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-texture-count"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体缓存条目所使用的纹理数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-texture-image"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-texture-image" names="class_fontfile_method_get_texture_image"><reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference> <strong>get_texture_image</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-texture-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回字体缓存纹理图像的副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-texture-offsets" names="class_fontfile_method_get_texture_offsets"><reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference> <strong>get_texture_offsets</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-texture-offsets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含字形打包数据的数组副本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-transform"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-transform" names="class_fontfile_method_get_transform"><reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> <strong>get_transform</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回应用于字体轮廓的 2D 变换，可用于倾斜、翻转和旋转字形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-get-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-get-variation-coordinates" names="class_fontfile_method_get_variation_coordinates"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_variation_coordinates</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-fontfile-method-get-variation-coordinates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定字体缓存条目的变体坐标。有关详细信息，请参阅 <reference internal="True" refuri="class_font#class-font-method-get-supported-variation-list"><inline classes="std std-ref">Font.get_supported_variation_list</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-load-bitmap-font"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-load-bitmap-font" names="class_fontfile_method_load_bitmap_font"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_bitmap_font</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-fontfile-method-load-bitmap-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从文件 <literal>path</literal> 中加载一个 AngelCode BMFont (.fnt, .font) 位图字体。</paragraph>
            <paragraph><strong>警告：</strong>该方法只能在编辑器中或需要在运行时加载外部字体的情况下使用，例如位于 <literal>user://</literal> 目录的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-load-dynamic-font"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-load-dynamic-font" names="class_fontfile_method_load_dynamic_font"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>load_dynamic_font</strong>(path: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-fontfile-method-load-dynamic-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从文件 <literal>path</literal> 中加载 TrueType（.ttf）、OpenType（.otf）、WOFF（.woff）、WOFF2（.woff2）或 Type 1（.pfb、.pfm）动态字体。</paragraph>
            <paragraph><strong>警告：</strong>该方法只能在编辑器中或需要在运行时加载外部字体的情况下使用，例如位于 <literal>user://</literal> 目录的字体。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-remove-cache"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-remove-cache" names="class_fontfile_method_remove_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_cache</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-remove-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>删除指定的字体缓存条目。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-remove-glyph"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-remove-glyph" names="class_fontfile_method_remove_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_glyph</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-remove-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除指定的渲染的字形信息。</paragraph>
            <paragraph><strong>注意：</strong>该函数不会移除与字形相关的纹理，请使用 <reference internal="True" refid="class-fontfile-method-remove-texture"><inline classes="std std-ref">remove_texture</inline></reference> 手动移除它们。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-remove-kerning"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-remove-kerning" names="class_fontfile_method_remove_kerning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_kerning</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-fontfile-method-remove-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除字形对的字距调整覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-remove-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-remove-language-support-override" names="class_fontfile_method_remove_language_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_language_support_override</strong>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-fontfile-method-remove-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除语言支持覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-remove-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-remove-script-support-override" names="class_fontfile_method_remove_script_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_script_support_override</strong>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>) <reference internal="True" refid="class-fontfile-method-remove-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除文字支持覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-remove-size-cache"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-remove-size-cache" names="class_fontfile_method_remove_size_cache"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_size_cache</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>) <reference internal="True" refid="class-fontfile-method-remove-size-cache"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除指定的字体大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-remove-texture"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-remove-texture" names="class_fontfile_method_remove_texture"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_texture</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-remove-texture"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>从缓存条目中移除指定的纹理。</paragraph>
            <paragraph><strong>注意：</strong>该函数不会移除与纹理相关的字形，请使用 <reference internal="True" refid="class-fontfile-method-remove-glyph"><inline classes="std std-ref">remove_glyph</inline></reference> 手动移除它们。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-render-glyph"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-render-glyph" names="class_fontfile_method_render_glyph"><abbreviation explanation="无返回值。">void</abbreviation> <strong>render_glyph</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-render-glyph"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定的字符渲染到字体缓存纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-render-range"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-render-range" names="class_fontfile_method_render_range"><abbreviation explanation="无返回值。">void</abbreviation> <strong>render_range</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, start: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, end: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-render-range"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将范围内的字符渲染到字体缓存纹理。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-cache-ascent"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-cache-ascent" names="class_fontfile_method_set_cache_ascent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cache_ascent</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, ascent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-cache-ascent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的升部（基线上方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-cache-descent"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-cache-descent" names="class_fontfile_method_set_cache_descent"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cache_descent</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, descent: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-cache-descent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体的降部（基线下方的像素数）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-cache-scale"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-cache-scale" names="class_fontfile_method_set_cache_scale"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cache_scale</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, scale: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-cache-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置彩色位图字体的缩放系数。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-cache-underline-position"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-cache-underline-position" names="class_fontfile_method_set_cache_underline_position"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cache_underline_position</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_position: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-cache-underline-position"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置基线下方下划线的像素偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-cache-underline-thickness"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-cache-underline-thickness" names="class_fontfile_method_set_cache_underline_thickness"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_cache_underline_thickness</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, underline_thickness: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-cache-underline-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置下划线的粗细度，单位为像素。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-embolden"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-embolden" names="class_fontfile_method_set_embolden"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_embolden</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, strength: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-embolden"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置加粗强度，如果不等于零，则会加粗字体的轮廓。负值会减小轮廓的厚度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-extra-baseline-offset"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-extra-baseline-offset" names="class_fontfile_method_set_extra_baseline_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_extra_baseline_offset</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, baseline_offset: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-extra-baseline-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置额外的基线偏移（作为字体高度的一部分）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-extra-spacing"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-extra-spacing" names="class_fontfile_method_set_extra_spacing"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_extra_spacing</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, spacing: <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>, value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-extra-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将 <literal>spacing</literal> 的间距（见 <reference internal="True" refuri="class_textserver#enum-textserver-spacingtype"><inline classes="std std-ref">SpacingType</inline></reference>）设置为 <literal>value</literal>，单位为像素（与字体大小无关）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-face-index"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-face-index" names="class_fontfile_method_set_face_index"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_face_index</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, face_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-face-index"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 TrueType / OpenType 集合中设置活动字体索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-glyph-advance"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-glyph-advance" names="class_fontfile_method_set_glyph_advance"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_glyph_advance</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, advance: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-glyph-advance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形前进量（下一个字形的偏移量）。</paragraph>
            <paragraph><strong>注意：</strong>字形轮廓的前进量与基础字形的前进量相同，不会被保存。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-glyph-offset"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-glyph-offset" names="class_fontfile_method_set_glyph_offset"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_glyph_offset</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-glyph-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形相对于基线的偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-glyph-size"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-glyph-size" names="class_fontfile_method_set_glyph_size"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_glyph_size</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, gl_size: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-glyph-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-glyph-texture-idx"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-glyph-texture-idx" names="class_fontfile_method_set_glyph_texture_idx"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_glyph_texture_idx</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, texture_idx: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-glyph-texture-idx"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置包含该字形的缓存纹理的索引。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-glyph-uv-rect"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-glyph-uv-rect" names="class_fontfile_method_set_glyph_uv_rect"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_glyph_uv_rect</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, glyph: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, uv_rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-glyph-uv-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置包含该字形的缓存纹理中，该字形的矩形区域。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-kerning"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-kerning" names="class_fontfile_method_set_kerning"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_kerning</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, glyph_pair: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, kerning: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-kerning"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字形对的字距调整。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-language-support-override"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-language-support-override" names="class_fontfile_method_set_language_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language_support_override</strong>(language: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-language-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_font#class-font-method-is-language-supported"><inline classes="std std-ref">Font.is_language_supported</inline></reference> 添加覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-script-support-override"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-script-support-override" names="class_fontfile_method_set_script_support_override"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_script_support_override</strong>(script: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>, supported: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-script-support-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为 <reference internal="True" refuri="class_font#class-font-method-is-script-supported"><inline classes="std std-ref">Font.is_script_supported</inline></reference> 添加覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-texture-image"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-texture-image" names="class_fontfile_method_set_texture_image"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_image</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, image: <reference internal="True" refuri="class_image#class-image"><inline classes="std std-ref">Image</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-texture-image"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置字体缓存纹理图像。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-texture-offsets"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-texture-offsets" names="class_fontfile_method_set_texture_offsets"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_offsets</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, size: <reference internal="True" refuri="class_vector2i#class-vector2i"><inline classes="std std-ref">Vector2i</inline></reference>, texture_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, offset: <reference internal="True" refuri="class_packedint32array#class-packedint32array"><inline classes="std std-ref">PackedInt32Array</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-texture-offsets"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置包含字形打包数据的数组。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-transform"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-transform" names="class_fontfile_method_set_transform"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_transform</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, transform: <reference internal="True" refuri="class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-transform"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>设置应用于字体轮廓的 2D 变换，可用于倾斜、翻转、旋转字形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-fontfile-method-set-variation-coordinates"></target>
            <paragraph classes="classref-method" ids="class-fontfile-method-set-variation-coordinates" names="class_fontfile_method_set_variation_coordinates"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_variation_coordinates</strong>(cache_index: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, variation_coordinates: <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>) <reference internal="True" refid="class-fontfile-method-set-variation-coordinates"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>为指定的字体缓存条目设置变体坐标。有关详细信息，请参阅 <reference internal="True" refuri="class_font#class-font-method-get-supported-variation-list"><inline classes="std std-ref">Font.get_supported_variation_list</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法无副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效运算符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列位标志构成位掩码的整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
