<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_label3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="text" name="keywords">
    </meta>
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Label3D.xml.</comment>
    <target refid="class-label3d"></target>
    <section ids="label3d class-label3d" names="label3d class_label3d">
        <title>Label3D</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d"><inline classes="std std-ref">GeometryInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_visualinstance3d#class-visualinstance3d"><inline classes="std std-ref">VisualInstance3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于在 3D 空间显示纯文本的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>用于在 3D 空间显示纯文本的节点。通过调整该节点的各种属性，可以配置文本外观、是否面朝相机等特性。</paragraph>
        </section>
        <section classes="classref-introduction-group" ids="id2" names="教程">
            <title>教程</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/3d_text"><inline classes="doc">3D 文本</inline></reference></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="75"></colspec>
                    <colspec colwidth="108"></colspec>
                    <colspec colwidth="92"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-alpha-antialiasing-edge"><inline classes="std std-ref">alpha_antialiasing_edge</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-alpha-antialiasing-mode"><inline classes="std std-ref">alpha_antialiasing_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-alpha-cut"><inline classes="std std-ref">alpha_cut</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-alpha-hash-scale"><inline classes="std std-ref">alpha_hash_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-alpha-scissor-threshold"><inline classes="std std-ref">alpha_scissor_threshold</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-autowrap-mode"><inline classes="std std-ref">autowrap_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-billboard"><inline classes="std std-ref">billboard</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_geometryinstance3d#enum-geometryinstance3d-shadowcastingsetting"><inline classes="std std-ref">ShadowCastingSetting</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>cast_shadow</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal> (overrides <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-cast-shadow"><inline classes="std std-ref">GeometryInstance3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-double-sided"><inline classes="std std-ref">double_sided</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-fixed-size"><inline classes="std std-ref">fixed_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-font"><inline classes="std std-ref">font</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-font-size"><inline classes="std std-ref">font_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>32</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_geometryinstance3d#enum-geometryinstance3d-gimode"><inline classes="std std-ref">GIMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>gi_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal> (overrides <reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-gi-mode"><inline classes="std std-ref">GeometryInstance3D</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-horizontal-alignment"><inline classes="std std-ref">horizontal_alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-justification-flags"><inline classes="std std-ref">justification_flags</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>163</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-language"><inline classes="std std-ref">language</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-line-spacing"><inline classes="std std-ref">line_spacing</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-modulate"><inline classes="std std-ref">modulate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-no-depth-test"><inline classes="std std-ref">no_depth_test</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-offset"><inline classes="std std-ref">offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-outline-modulate"><inline classes="std std-ref">outline_modulate</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-outline-render-priority"><inline classes="std std-ref">outline_render_priority</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-outline-size"><inline classes="std std-ref">outline_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>12</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-pixel-size"><inline classes="std std-ref">pixel_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.005</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-render-priority"><inline classes="std std-ref">render_priority</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-shaded"><inline classes="std std-ref">shaded</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-structured-text-bidi-override"><inline classes="std std-ref">structured_text_bidi_override</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-structured-text-bidi-override-options"><inline classes="std std-ref">structured_text_bidi_override_options</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-text"><inline classes="std std-ref">text</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>""</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-text-direction"><inline classes="std std-ref">text_direction</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-texture-filter"><inline classes="std std-ref">texture_filter</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-uppercase"><inline classes="std std-ref">uppercase</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-vertical-alignment"><inline classes="std std-ref">vertical_alignment</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-property-width"><inline classes="std std-ref">width</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>500.0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="41"></colspec>
                    <colspec colwidth="148"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-method-generate-triangle-mesh"><inline classes="std std-ref">generate_triangle_mesh</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-method-get-draw-flag"><inline classes="std std-ref">get_draw_flag</inline></reference>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-label3d-method-set-draw-flag"><inline classes="std std-ref">set_draw_flag</inline></reference>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-label3d-drawflags"></target>
            <paragraph classes="classref-enumeration" ids="enum-label3d-drawflags" names="enum_label3d_drawflags">enum <strong>DrawFlags</strong>: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-label3d-constant-flag-shaded"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-flag-shaded" names="class_label3d_constant_flag_shaded"><reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_SHADED</strong> = <literal>0</literal></paragraph>
            <paragraph>如果打开，环境中的灯光会影响该标签。</paragraph>
            <target refid="class-label3d-constant-flag-double-sided"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-flag-double-sided" names="class_label3d_constant_flag_double_sided"><reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_DOUBLE_SIDED</strong> = <literal>1</literal></paragraph>
            <paragraph>如果打开，从后面也可以看到文本。如果不打开，从后面看该文本是不可见的。</paragraph>
            <target refid="class-label3d-constant-flag-disable-depth-test"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-flag-disable-depth-test" names="class_label3d_constant_flag_disable_depth_test"><reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_DISABLE_DEPTH_TEST</strong> = <literal>2</literal></paragraph>
            <paragraph>禁用深度测试，所以这个对象被画在所有其他对象的上面。但是，在绘制顺序中，在它之后绘制的对象可能会覆盖它。</paragraph>
            <target refid="class-label3d-constant-flag-fixed-size"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-flag-fixed-size" names="class_label3d_constant_flag_fixed_size"><reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_FIXED_SIZE</strong> = <literal>3</literal></paragraph>
            <paragraph>标签会根据深度进行缩放，从而在屏幕上始终以相同的大小显示。</paragraph>
            <target refid="class-label3d-constant-flag-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-flag-max" names="class_label3d_constant_flag_max"><reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> <strong>FLAG_MAX</strong> = <literal>4</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-label3d-alphacutmode"></target>
            <paragraph classes="classref-enumeration" ids="enum-label3d-alphacutmode" names="enum_label3d_alphacutmode">enum <strong>AlphaCutMode</strong>: <reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-label3d-constant-alpha-cut-disabled"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-alpha-cut-disabled" names="class_label3d_constant_alpha_cut_disabled"><reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_DISABLED</strong> = <literal>0</literal></paragraph>
            <paragraph>该模式会执行标准的 Alpha 混合。它可以显示半透明区域，但当多个透明材质重叠时，可能会出现透明度排序问题。<reference internal="True" refuri="class_geometryinstance3d#class-geometryinstance3d-property-cast-shadow"><inline classes="std std-ref">GeometryInstance3D.cast_shadow</inline></reference> 在使用该透明模式时无效；<strong>Label3D</strong> 永远不会投射阴影。</paragraph>
            <target refid="class-label3d-constant-alpha-cut-discard"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-alpha-cut-discard" names="class_label3d_constant_alpha_cut_discard"><reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_DISCARD</strong> = <literal>1</literal></paragraph>
            <paragraph>该模式仅允许完全透明或完全不透明的像素。除非启用了某种形式的屏幕空间抗锯齿（见 <reference internal="True" refuri="class_projectsettings#class-projectsettings-property-rendering-anti-aliasing-quality-screen-space-aa"><inline classes="std std-ref">ProjectSettings.rendering/anti_aliasing/quality/screen_space_aa</inline></reference>），否则会看到粗糙的边缘。该模式也被称为 <emphasis>Alpha 测试</emphasis> 或 <emphasis>1 位透明度</emphasis>。</paragraph>
            <paragraph><strong>注意：</strong>该模式可能会出现抗锯齿字体和轮廓问题，请尝试调整 <reference internal="True" refid="class-label3d-property-alpha-scissor-threshold"><inline classes="std std-ref">alpha_scissor_threshold</inline></reference> 或使用 MSDF 字体。</paragraph>
            <paragraph><strong>注意：</strong>当使用具有重叠字形的文本（例如草书）时，该模式可能会在正文和轮廓之间，出现透明度排序问题。</paragraph>
            <target refid="class-label3d-constant-alpha-cut-opaque-prepass"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-alpha-cut-opaque-prepass" names="class_label3d_constant_alpha_cut_opaque_prepass"><reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_OPAQUE_PREPASS</strong> = <literal>2</literal></paragraph>
            <paragraph>这个模式会在深度预处理时绘制完全不透明的像素。比 <reference internal="True" refid="class-label3d-constant-alpha-cut-disabled"><inline classes="std std-ref">ALPHA_CUT_DISABLED</inline></reference> 或 <reference internal="True" refid="class-label3d-constant-alpha-cut-discard"><inline classes="std std-ref">ALPHA_CUT_DISCARD</inline></reference> 要慢，但能够对半透明区域和平滑边缘进行正确的排序。</paragraph>
            <paragraph><strong>注意：</strong>文本中存在重叠的字形时（例如手写体），这个模式可能会造成主文本和轮廓的透明度排序问题。</paragraph>
            <target refid="class-label3d-constant-alpha-cut-hash"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-label3d-constant-alpha-cut-hash" names="class_label3d_constant_alpha_cut_hash"><reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>ALPHA_CUT_HASH</strong> = <literal>3</literal></paragraph>
            <paragraph>该模式绘制时会截断所有低于空间确定性阈值的值，其余值将保持不透明。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-label3d-property-alpha-antialiasing-edge"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-alpha-antialiasing-edge" names="class_label3d_property_alpha_antialiasing_edge"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_antialiasing_edge</strong> = <literal>0.0</literal> <reference internal="True" refid="class-label3d-property-alpha-antialiasing-edge"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_antialiasing_edge</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_antialiasing_edge</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>将在 Alpha 通道上应用抗锯齿的阈值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-alpha-antialiasing-mode"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-alpha-antialiasing-mode" names="class_label3d_property_alpha_antialiasing_mode"><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>alpha_antialiasing_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-label3d-property-alpha-antialiasing-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_antialiasing</strong>(value: <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference> <strong>get_alpha_antialiasing</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要应用的 Alpha 抗锯齿类型。见 <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-alphaantialiasing"><inline classes="std std-ref">AlphaAntiAliasing</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-alpha-cut"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-alpha-cut" names="class_label3d_property_alpha_cut"><reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>alpha_cut</strong> = <literal>0</literal> <reference internal="True" refid="class-label3d-property-alpha-cut"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_cut_mode</strong>(value: <reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference> <strong>get_alpha_cut_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该精灵的 Alpha 裁剪模式。可能的取值见 <reference internal="True" refid="enum-label3d-alphacutmode"><inline classes="std std-ref">AlphaCutMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-alpha-hash-scale"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-alpha-hash-scale" names="class_label3d_property_alpha_hash_scale"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_hash_scale</strong> = <literal>1.0</literal> <reference internal="True" refid="class-label3d-property-alpha-hash-scale"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_hash_scale</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_hash_scale</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Alpha Hash 的哈希比例。推荐 <literal>0</literal> 和 <literal>2</literal> 之间的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-alpha-scissor-threshold"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-alpha-scissor-threshold" names="class_label3d_property_alpha_scissor_threshold"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>alpha_scissor_threshold</strong> = <literal>0.5</literal> <reference internal="True" refid="class-label3d-property-alpha-scissor-threshold"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_alpha_scissor_threshold</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_alpha_scissor_threshold</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Alpha 裁剪丢弃数值的阈值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-autowrap-mode"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-autowrap-mode" names="class_label3d_property_autowrap_mode"><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>autowrap_mode</strong> = <literal>0</literal> <reference internal="True" refid="class-label3d-property-autowrap-mode"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_autowrap_mode</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference> <strong>get_autowrap_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果设置为 <reference internal="True" refuri="class_textserver#class-textserver-constant-autowrap-off"><inline classes="std std-ref">TextServer.AUTOWRAP_OFF</inline></reference> 以外的值，则文本将在节点的边界矩形内自动换行。如果你调整节点大小，就会自动更改其高度，从而显示所有文本。要了解每种模式的行为方式，请参阅 <reference internal="True" refuri="class_textserver#enum-textserver-autowrapmode"><inline classes="std std-ref">AutowrapMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-billboard"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-billboard" names="class_label3d_property_billboard"><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>billboard</strong> = <literal>0</literal> <reference internal="True" refid="class-label3d-property-billboard"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_billboard_mode</strong>(value: <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference> <strong>get_billboard_mode</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该标签的公告板模式。可能的值见 <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-billboardmode"><inline classes="std std-ref">BillboardMode</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-double-sided"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-double-sided" names="class_label3d_property_double_sided"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>double_sided</strong> = <literal>true</literal> <reference internal="True" refid="class-label3d-property-double-sided"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则从后面也可以看到文本，如果为 <literal>false</literal>，则从后面看它是不可见的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-fixed-size"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-fixed-size" names="class_label3d_property_fixed_size"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>fixed_size</strong> = <literal>false</literal> <reference internal="True" refid="class-label3d-property-fixed-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则无论距离远近，标签都以相同的尺寸呈现。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-font"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-font" names="class_label3d_property_font"><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>font</strong> <reference internal="True" refid="class-label3d-property-font"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font</strong>(value: <reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_font#class-font"><inline classes="std std-ref">Font</inline></reference> <strong>get_font</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>用于显示文本的字体配置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-font-size"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-font-size" names="class_label3d_property_font_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>font_size</strong> = <literal>32</literal> <reference internal="True" refid="class-label3d-property-font-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_font_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_font_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>Label3D</strong> 文本的字体大小。为了让字体在近距离时看起来更细腻，可增加 <reference internal="True" refid="class-label3d-property-font-size"><inline classes="std std-ref">font_size</inline></reference>，同时减小 <reference internal="True" refid="class-label3d-property-pixel-size"><inline classes="std std-ref">pixel_size</inline></reference>。</paragraph>
            <paragraph>较大的字体大小需要更多时间来渲染新字符，这可能会导致在游戏过程中卡顿。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-horizontal-alignment"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-horizontal-alignment" names="class_label3d_property_horizontal_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>horizontal_alignment</strong> = <literal>1</literal> <reference internal="True" refid="class-label3d-property-horizontal-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_horizontal_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> <strong>get_horizontal_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制文本的水平对齐方式。支持左对齐、居中对齐、右对齐、填充（即两端对齐）。请将其设置为 <reference internal="True" refuri="class_@globalscope#enum-globalscope-horizontalalignment"><inline classes="std std-ref">HorizontalAlignment</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-justification-flags"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-justification-flags" names="class_label3d_property_justification_flags"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>justification_flags</strong> = <literal>163</literal> <reference internal="True" refid="class-label3d-property-justification-flags"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_justification_flags</strong>(value: <abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>])</paragraph>
                </list_item>
                <list_item>
                    <paragraph><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation>[<reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>] <strong>get_justification_flags</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>行两端对齐规则。详见 <reference internal="True" refuri="class_textserver#enum-textserver-justificationflag"><inline classes="std std-ref">JustificationFlag</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-language"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-language" names="class_label3d_property_language"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>language</strong> = <literal>""</literal> <reference internal="True" refid="class-label3d-property-language"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_language</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_language</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>语言代码，用于断行和文本塑形算法，如果留空则使用当前区域设置。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-line-spacing"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-line-spacing" names="class_label3d_property_line_spacing"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>line_spacing</strong> = <literal>0.0</literal> <reference internal="True" refid="class-label3d-property-line-spacing"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_line_spacing</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_line_spacing</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>多行 <strong>Label3D</strong> 中，行与行之间的垂直间距。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-modulate"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-modulate" names="class_label3d_property_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>modulate</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-label3d-property-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_modulate</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_modulate</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>该 <strong>Label3D</strong> 的文本颜色 <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-no-depth-test"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-no-depth-test" names="class_label3d_property_no_depth_test"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>no_depth_test</strong> = <literal>false</literal> <reference internal="True" refid="class-label3d-property-no-depth-test"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，深度测试被禁用，对象将按渲染顺序绘制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-offset"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-offset" names="class_label3d_property_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-label3d-property-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本绘制偏移（单位为像素）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-outline-modulate"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-outline-modulate" names="class_label3d_property_outline_modulate"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>outline_modulate</strong> = <literal>Color(0, 0, 0, 1)</literal> <reference internal="True" refid="class-label3d-property-outline-modulate"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_outline_modulate</strong>(value: <reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>get_outline_modulate</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本轮廓的色调。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-outline-render-priority"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-outline-render-priority" names="class_label3d_property_outline_render_priority"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_render_priority</strong> = <literal>-1</literal> <reference internal="True" refid="class-label3d-property-outline-render-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_outline_render_priority</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_outline_render_priority</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置文本轮廓的渲染优先级。优先级高的物体将被排序在优先级低的物体前面。</paragraph>
            <paragraph><strong>注意：</strong>仅在 <reference internal="True" refid="class-label3d-property-alpha-cut"><inline classes="std std-ref">alpha_cut</inline></reference> 为 <reference internal="True" refid="class-label3d-constant-alpha-cut-disabled"><inline classes="std std-ref">ALPHA_CUT_DISABLED</inline></reference>（默认值）时适用。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于透明物体的排序。这不会影响透明物体相对于不透明物体的排序方式。这是因为不透明对象不被排序，而透明对象则从后往前排序（取决于优先级）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-outline-size"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-outline-size" names="class_label3d_property_outline_size"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>outline_size</strong> = <literal>12</literal> <reference internal="True" refid="class-label3d-property-outline-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_outline_size</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_outline_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本轮廓大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-pixel-size"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-pixel-size" names="class_label3d_property_pixel_size"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>pixel_size</strong> = <literal>0.005</literal> <reference internal="True" refid="class-label3d-property-pixel-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_pixel_size</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_pixel_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>标签中一个像素宽度对应缩放至的 3D 大小。要让字体在较近距离时也能够看到细节，请在减小 <reference internal="True" refid="class-label3d-property-pixel-size"><inline classes="std std-ref">pixel_size</inline></reference> 的同时增大 <reference internal="True" refid="class-label3d-property-font-size"><inline classes="std std-ref">font_size</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-render-priority"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-render-priority" names="class_label3d_property_render_priority"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>render_priority</strong> = <literal>0</literal> <reference internal="True" refid="class-label3d-property-render-priority"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_render_priority</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_render_priority</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置文本的渲染优先级。优先级高的物体将被排序在优先级低的物体前面。</paragraph>
            <paragraph><strong>注意：</strong>仅在 <reference internal="True" refid="class-label3d-property-alpha-cut"><inline classes="std std-ref">alpha_cut</inline></reference> 为 <reference internal="True" refid="class-label3d-constant-alpha-cut-disabled"><inline classes="std std-ref">ALPHA_CUT_DISABLED</inline></reference>（默认值）时适用。</paragraph>
            <paragraph><strong>注意：</strong>仅适用于透明物体的排序。这不会影响透明物体相对于不透明物体的排序方式。这是因为不透明对象不被排序，而透明对象则从后往前排序（取决于优先级）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-shaded"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-shaded" names="class_label3d_property_shaded"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>shaded</strong> = <literal>false</literal> <reference internal="True" refid="class-label3d-property-shaded"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则 <reference internal="True" refuri="class_environment#class-environment"><inline classes="std std-ref">Environment</inline></reference> 中的 <reference internal="True" refuri="class_light3d#class-light3d"><inline classes="std std-ref">Light3D</inline></reference> 会影响该标签。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-structured-text-bidi-override"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-structured-text-bidi-override" names="class_label3d_property_structured_text_bidi_override"><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>structured_text_bidi_override</strong> = <literal>0</literal> <reference internal="True" refid="class-label3d-property-structured-text-bidi-override"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-structuredtextparser"><inline classes="std std-ref">StructuredTextParser</inline></reference> <strong>get_structured_text_bidi_override</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为结构化文本设置 BiDi 算法覆盖。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-structured-text-bidi-override-options"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-structured-text-bidi-override-options" names="class_label3d_property_structured_text_bidi_override_options"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>structured_text_bidi_override_options</strong> = <literal>[]</literal> <reference internal="True" refid="class-label3d-property-structured-text-bidi-override-options"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_structured_text_bidi_override_options</strong>(value: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference> <strong>get_structured_text_bidi_override_options</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>设置 BiDi 覆盖的附加选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-text"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-text" names="class_label3d_property_text"><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>text</strong> = <literal>""</literal> <reference internal="True" refid="class-label3d-property-text"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text</strong>(value: <reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_string#class-string"><inline classes="std std-ref">String</inline></reference> <strong>get_text</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要在屏幕上显示的文本。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-text-direction"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-text-direction" names="class_label3d_property_text_direction"><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>text_direction</strong> = <literal>0</literal> <reference internal="True" refid="class-label3d-property-text-direction"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_text_direction</strong>(value: <reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_textserver#enum-textserver-direction"><inline classes="std std-ref">Direction</inline></reference> <strong>get_text_direction</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>基础文本书写方向。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-texture-filter"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-texture-filter" names="class_label3d_property_texture_filter"><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>texture_filter</strong> = <literal>3</literal> <reference internal="True" refid="class-label3d-property-texture-filter"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_texture_filter</strong>(value: <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference> <strong>get_texture_filter</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>纹理的过滤标志。选项见 <reference internal="True" refuri="class_basematerial3d#enum-basematerial3d-texturefilter"><inline classes="std std-ref">TextureFilter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-uppercase"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-uppercase" names="class_label3d_property_uppercase"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>uppercase</strong> = <literal>false</literal> <reference internal="True" refid="class-label3d-property-uppercase"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_uppercase</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_uppercase</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，所有文本都将显示为大写。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-vertical-alignment"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-vertical-alignment" names="class_label3d_property_vertical_alignment"><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>vertical_alignment</strong> = <literal>1</literal> <reference internal="True" refid="class-label3d-property-vertical-alignment"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_vertical_alignment</strong>(value: <reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> <strong>get_vertical_alignment</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>控制文本的垂直对齐方式。支持顶部对齐、居中对齐、底部对齐。请将其设置为 <reference internal="True" refuri="class_@globalscope#enum-globalscope-verticalalignment"><inline classes="std std-ref">VerticalAlignment</inline></reference> 常量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-property-width"></target>
            <paragraph classes="classref-property" ids="class-label3d-property-width" names="class_label3d_property_width"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>width</strong> = <literal>500.0</literal> <reference internal="True" refid="class-label3d-property-width"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_width</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_width</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>文本宽度（单位为像素），用于自动换行和填充对齐。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-label3d-method-generate-triangle-mesh"></target>
            <paragraph classes="classref-method" ids="class-label3d-method-generate-triangle-mesh" names="class_label3d_method_generate_triangle_mesh"><reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference> <strong>generate_triangle_mesh</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-label3d-method-generate-triangle-mesh"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回使用该标签的顶点组成的 <reference internal="True" refuri="class_trianglemesh#class-trianglemesh"><inline classes="std std-ref">TriangleMesh</inline></reference>，遵循当前的配置（例如 <reference internal="True" refid="class-label3d-property-pixel-size"><inline classes="std std-ref">pixel_size</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-method-get-draw-flag"></target>
            <paragraph classes="classref-method" ids="class-label3d-method-get-draw-flag" names="class_label3d_method_get_draw_flag"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-label3d-method-get-draw-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回指定标志的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-label3d-method-set-draw-flag"></target>
            <paragraph classes="classref-method" ids="class-label3d-method-set-draw-flag" names="class_label3d_method_set_draw_flag"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_draw_flag</strong>(flag: <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>, enabled: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-label3d-method-set-draw-flag"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果为 <literal>true</literal>，会启用指定的标志。标志列表请参阅 <reference internal="True" refid="enum-label3d-drawflags"><inline classes="std std-ref">DrawFlags</inline></reference>。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
