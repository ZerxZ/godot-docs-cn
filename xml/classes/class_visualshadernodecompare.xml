<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_visualshadernodecompare.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/VisualShaderNodeCompare.xml.</comment>
    <target refid="class-visualshadernodecompare"></target>
    <section ids="visualshadernodecompare class-visualshadernodecompare" names="visualshadernodecompare class_visualshadernodecompare">
        <title>VisualShaderNodeCompare</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_visualshadernode#class-visualshadernode"><inline classes="std std-ref">VisualShaderNode</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>可视化着色器图内常见类型的比较函数。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>通过 <reference internal="True" refid="class-visualshadernodecompare-property-function"><inline classes="std std-ref">function</inline></reference> 比较 <literal>a</literal> 和 <literal>b</literal> 的 <reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">type</inline></reference>。返回一个布尔标量。在着色器代码中转换成 <literal>if</literal> 指令。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="68"></colspec>
                    <colspec colwidth="7"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecompare-property-condition"><inline classes="std std-ref">condition</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecompare-property-function"><inline classes="std std-ref">function</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">type</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="枚举">
            <title>枚举</title>
            <target refid="enum-visualshadernodecompare-comparisontype"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodecompare-comparisontype" names="enum_visualshadernodecompare_comparisontype">enum <strong>ComparisonType</strong>: <reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-scalar"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-scalar" names="class_visualshadernodecompare_constant_ctype_scalar"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_SCALAR</strong> = <literal>0</literal></paragraph>
            <paragraph>浮点标量。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-scalar-int"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-scalar-int" names="class_visualshadernodecompare_constant_ctype_scalar_int"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_SCALAR_INT</strong> = <literal>1</literal></paragraph>
            <paragraph>整数标量。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-scalar-uint"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-scalar-uint" names="class_visualshadernodecompare_constant_ctype_scalar_uint"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_SCALAR_UINT</strong> = <literal>2</literal></paragraph>
            <paragraph>无符号整数标量。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-vector-2d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-vector-2d" names="class_visualshadernodecompare_constant_ctype_vector_2d"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_VECTOR_2D</strong> = <literal>3</literal></paragraph>
            <paragraph>2D 向量类型。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-vector-3d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-vector-3d" names="class_visualshadernodecompare_constant_ctype_vector_3d"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_VECTOR_3D</strong> = <literal>4</literal></paragraph>
            <paragraph>3D向量类型。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-vector-4d"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-vector-4d" names="class_visualshadernodecompare_constant_ctype_vector_4d"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_VECTOR_4D</strong> = <literal>5</literal></paragraph>
            <paragraph>4D 向量类型。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-boolean"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-boolean" names="class_visualshadernodecompare_constant_ctype_boolean"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_BOOLEAN</strong> = <literal>6</literal></paragraph>
            <paragraph>布林类型。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-transform"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-transform" names="class_visualshadernodecompare_constant_ctype_transform"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_TRANSFORM</strong> = <literal>7</literal></paragraph>
            <paragraph>变换类型，即 <literal>mat4</literal>。</paragraph>
            <target refid="class-visualshadernodecompare-constant-ctype-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-ctype-max" names="class_visualshadernodecompare_constant_ctype_max"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>CTYPE_MAX</strong> = <literal>8</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshadernodecompare-function"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodecompare-function" names="enum_visualshadernodecompare_function">enum <strong>Function</strong>: <reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernodecompare-constant-func-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-func-equal" names="class_visualshadernodecompare_constant_func_equal"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_EQUAL</strong> = <literal>0</literal></paragraph>
            <paragraph>相等比较（<literal>a == b</literal>）。</paragraph>
            <target refid="class-visualshadernodecompare-constant-func-not-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-func-not-equal" names="class_visualshadernodecompare_constant_func_not_equal"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_NOT_EQUAL</strong> = <literal>1</literal></paragraph>
            <paragraph>不等比较（<literal>a != b</literal>）。</paragraph>
            <target refid="class-visualshadernodecompare-constant-func-greater-than"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-func-greater-than" names="class_visualshadernodecompare_constant_func_greater_than"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_GREATER_THAN</strong> = <literal>2</literal></paragraph>
            <paragraph>大于比较（<literal>a &gt; b</literal>）。如果 <reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">type</inline></reference> 设置为 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-boolean"><inline classes="std std-ref">CTYPE_BOOLEAN</inline></reference> 或 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-transform"><inline classes="std std-ref">CTYPE_TRANSFORM</inline></reference>，则无法使用。</paragraph>
            <target refid="class-visualshadernodecompare-constant-func-greater-than-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-func-greater-than-equal" names="class_visualshadernodecompare_constant_func_greater_than_equal"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_GREATER_THAN_EQUAL</strong> = <literal>3</literal></paragraph>
            <paragraph>大于或等于的比较（<literal>a &gt;= b</literal>）。如果 <reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">type</inline></reference> 设置为 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-boolean"><inline classes="std std-ref">CTYPE_BOOLEAN</inline></reference> 或 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-transform"><inline classes="std std-ref">CTYPE_TRANSFORM</inline></reference>，则无法使用。</paragraph>
            <target refid="class-visualshadernodecompare-constant-func-less-than"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-func-less-than" names="class_visualshadernodecompare_constant_func_less_than"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_LESS_THAN</strong> = <literal>4</literal></paragraph>
            <paragraph>小于比较（<literal>a &lt; b</literal>）。如果 <reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">type</inline></reference> 设置为 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-boolean"><inline classes="std std-ref">CTYPE_BOOLEAN</inline></reference> 或 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-transform"><inline classes="std std-ref">CTYPE_TRANSFORM</inline></reference>，则无法使用。</paragraph>
            <target refid="class-visualshadernodecompare-constant-func-less-than-equal"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-func-less-than-equal" names="class_visualshadernodecompare_constant_func_less_than_equal"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_LESS_THAN_EQUAL</strong> = <literal>5</literal></paragraph>
            <paragraph>小于或等于的比较（<literal>a &lt;= b</literal>）。如果 <reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">type</inline></reference> 设置为 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-boolean"><inline classes="std std-ref">CTYPE_BOOLEAN</inline></reference> 或 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-transform"><inline classes="std std-ref">CTYPE_TRANSFORM</inline></reference>，则无法使用。</paragraph>
            <target refid="class-visualshadernodecompare-constant-func-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-func-max" names="class_visualshadernodecompare_constant_func_max"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>FUNC_MAX</strong> = <literal>6</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> 枚举的大小。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-visualshadernodecompare-condition"></target>
            <paragraph classes="classref-enumeration" ids="enum-visualshadernodecompare-condition" names="enum_visualshadernodecompare_condition">enum <strong>Condition</strong>: <reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-visualshadernodecompare-constant-cond-all"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-cond-all" names="class_visualshadernodecompare_constant_cond_all"><reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference> <strong>COND_ALL</strong> = <literal>0</literal></paragraph>
            <paragraph>如果向量中的所有分量都满足比较条件，则结果为 true。</paragraph>
            <target refid="class-visualshadernodecompare-constant-cond-any"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-cond-any" names="class_visualshadernodecompare_constant_cond_any"><reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference> <strong>COND_ANY</strong> = <literal>1</literal></paragraph>
            <paragraph>如果向量中的任何一个分量满足比较条件，则结果为 true。</paragraph>
            <target refid="class-visualshadernodecompare-constant-cond-max"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-visualshadernodecompare-constant-cond-max" names="class_visualshadernodecompare_constant_cond_max"><reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference> <strong>COND_MAX</strong> = <literal>2</literal></paragraph>
            <paragraph>代表 <reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference> 枚举的大小。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="属性说明">
            <title>属性说明</title>
            <target refid="class-visualshadernodecompare-property-condition"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodecompare-property-condition" names="class_visualshadernodecompare_property_condition"><reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference> <strong>condition</strong> = <literal>0</literal> <reference internal="True" refid="class-visualshadernodecompare-property-condition"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_condition</strong>(value: <reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodecompare-condition"><inline classes="std std-ref">Condition</inline></reference> <strong>get_condition</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">type</inline></reference> 被设置为 <reference internal="True" refid="class-visualshadernodecompare-constant-ctype-vector-3d"><inline classes="std std-ref">CTYPE_VECTOR_3D</inline></reference> 时应用的额外条件。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecompare-property-function"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodecompare-property-function" names="class_visualshadernodecompare_property_function"><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>function</strong> = <literal>0</literal> <reference internal="True" refid="class-visualshadernodecompare-property-function"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_function</strong>(value: <reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference> <strong>get_function</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>比较函数。参阅<reference internal="True" refid="enum-visualshadernodecompare-function"><inline classes="std std-ref">Function</inline></reference>的选项。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-visualshadernodecompare-property-type"></target>
            <paragraph classes="classref-property" ids="class-visualshadernodecompare-property-type" names="class_visualshadernodecompare_property_type"><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>type</strong> = <literal>0</literal> <reference internal="True" refid="class-visualshadernodecompare-property-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_comparison_type</strong>(value: <reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference> <strong>get_comparison_type</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在比较中要使用的类型。参阅<reference internal="True" refid="enum-visualshadernodecompare-comparisontype"><inline classes="std std-ref">ComparisonType</inline></reference>的选项。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
