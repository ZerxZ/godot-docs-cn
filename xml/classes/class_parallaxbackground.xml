<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_parallaxbackground.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ParallaxBackground.xml.</comment>
    <target refid="class-parallaxbackground"></target>
    <section ids="parallaxbackground class-parallaxbackground" names="parallaxbackground class_parallaxbackground">
        <title>ParallaxBackground</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>用于创建视差滚动背景的节点。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>ParallaxBackground 使用一个或多个 <reference internal="True" refuri="class_parallaxlayer#class-parallaxlayer"><inline classes="std std-ref">ParallaxLayer</inline></reference> 子节点来创建视差效果。每个 <reference internal="True" refuri="class_parallaxlayer#class-parallaxlayer"><inline classes="std std-ref">ParallaxLayer</inline></reference> 可以使用 <reference internal="True" refuri="class_parallaxlayer#class-parallaxlayer-property-motion-offset"><inline classes="std std-ref">ParallaxLayer.motion_offset</inline></reference> 以不同的速度移动。这在 2D 游戏中可以创造一种深度错觉。如果没有与 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 一起使用，你必须手动计算 <reference internal="True" refid="class-parallaxbackground-property-scroll-offset"><inline classes="std std-ref">scroll_offset</inline></reference>。</paragraph>
            <paragraph><strong>注意：</strong>每个 <strong>ParallaxBackground</strong> 都是在各自的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 中绘制的，无法在不同 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 之间共享，见 <reference internal="True" refuri="class_canvaslayer#class-canvaslayer-property-custom-viewport"><inline classes="std std-ref">CanvasLayer.custom_viewport</inline></reference>。在分屏游戏等使用多个 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 的场景下，你需要每个需要绘制的 <reference internal="True" refuri="class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 创建单独的 <strong>ParallaxBackground</strong>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="95"></colspec>
                    <colspec colwidth="75"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>layer</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>-100</literal> (overrides <reference internal="True" refuri="class_canvaslayer#class-canvaslayer-property-layer"><inline classes="std std-ref">CanvasLayer</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-parallaxbackground-property-scroll-base-offset"><inline classes="std std-ref">scroll_base_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-parallaxbackground-property-scroll-base-scale"><inline classes="std std-ref">scroll_base_scale</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-parallaxbackground-property-scroll-ignore-camera-zoom"><inline classes="std std-ref">scroll_ignore_camera_zoom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-parallaxbackground-property-scroll-limit-begin"><inline classes="std std-ref">scroll_limit_begin</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-parallaxbackground-property-scroll-limit-end"><inline classes="std std-ref">scroll_limit_end</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-parallaxbackground-property-scroll-offset"><inline classes="std std-ref">scroll_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id3" names="属性说明">
            <title>属性说明</title>
            <target refid="class-parallaxbackground-property-scroll-base-offset"></target>
            <paragraph classes="classref-property" ids="class-parallaxbackground-property-scroll-base-offset" names="class_parallaxbackground_property_scroll_base_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scroll_base_offset</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_scroll_base_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scroll_base_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所有 <reference internal="True" refuri="class_parallaxlayer#class-parallaxlayer"><inline classes="std std-ref">ParallaxLayer</inline></reference> 子元素的基本位置偏移。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-parallaxbackground-property-scroll-base-scale"></target>
            <paragraph classes="classref-property" ids="class-parallaxbackground-property-scroll-base-scale" names="class_parallaxbackground_property_scroll_base_scale"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scroll_base_scale</strong> = <literal>Vector2(1, 1)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_scroll_base_scale</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scroll_base_scale</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>所有 <reference internal="True" refuri="class_parallaxlayer#class-parallaxlayer"><inline classes="std std-ref">ParallaxLayer</inline></reference> 子元素的基本移动比例。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-parallaxbackground-property-scroll-ignore-camera-zoom"></target>
            <paragraph classes="classref-property" ids="class-parallaxbackground-property-scroll-ignore-camera-zoom" names="class_parallaxbackground_property_scroll_ignore_camera_zoom"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>scroll_ignore_camera_zoom</strong> = <literal>false</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_ignore_camera_zoom</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_ignore_camera_zoom</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为 <literal>true</literal> 时，<reference internal="True" refuri="class_parallaxlayer#class-parallaxlayer"><inline classes="std std-ref">ParallaxLayer</inline></reference> 子元素将不受相机缩放级别的影响。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-parallaxbackground-property-scroll-limit-begin"></target>
            <paragraph classes="classref-property" ids="class-parallaxbackground-property-scroll-limit-begin" names="class_parallaxbackground_property_scroll_limit_begin"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scroll_limit_begin</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_limit_begin</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_limit_begin</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>开始滚动的左上角限制。如果相机超出这个限制，背景将停止滚动。必须低于 <reference internal="True" refid="class-parallaxbackground-property-scroll-limit-end"><inline classes="std std-ref">scroll_limit_end</inline></reference> 才能工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-parallaxbackground-property-scroll-limit-end"></target>
            <paragraph classes="classref-property" ids="class-parallaxbackground-property-scroll-limit-end" names="class_parallaxbackground_property_scroll_limit_end"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scroll_limit_end</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_limit_end</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_limit_end</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>右下角限制滚动结束。如果相机超出这个限制，背景将停止滚动。必须高于 <reference internal="True" refid="class-parallaxbackground-property-scroll-limit-begin"><inline classes="std std-ref">scroll_limit_begin</inline></reference> 才能工作。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-parallaxbackground-property-scroll-offset"></target>
            <paragraph classes="classref-property" ids="class-parallaxbackground-property-scroll-offset" names="class_parallaxbackground_property_scroll_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scroll_offset</strong> = <literal>Vector2(0, 0)</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_scroll_offset</strong> <strong>(</strong> <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scroll_offset</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>视差背景的滚动值。使用 <reference internal="True" refuri="class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 时会自动计算，但也可用于手动管理无相机时的滚动。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
