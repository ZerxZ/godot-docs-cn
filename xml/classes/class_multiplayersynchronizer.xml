<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_multiplayersynchronizer.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/4.2/modules/multiplayer/doc_classes/MultiplayerSynchronizer.xml.</comment>
    <target refid="class-multiplayersynchronizer"></target>
    <section ids="multiplayersynchronizer class-multiplayersynchronizer" names="multiplayersynchronizer class_multiplayersynchronizer">
        <title>MultiplayerSynchronizer</title>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>将属性从多人游戏权威同步到远程对等体。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph>默认情况下，<strong>MultiplayerSynchronizer</strong> 会将配置的属性同步到所有对等体。</paragraph>
            <paragraph>可以使用 <reference internal="True" refid="class-multiplayersynchronizer-method-set-visibility-for"><inline classes="std std-ref">set_visibility_for</inline></reference> 直接处理可见性，也可以通过 <reference internal="True" refid="class-multiplayersynchronizer-method-add-visibility-filter"><inline classes="std std-ref">add_visibility_filter</inline></reference> 和 <reference internal="True" refid="class-multiplayersynchronizer-method-update-visibility"><inline classes="std std-ref">update_visibility</inline></reference> 在需要时进行处理。</paragraph>
            <paragraph><reference internal="True" refuri="class_multiplayerspawner#class-multiplayerspawner"><inline classes="std std-ref">MultiplayerSpawner</inline></reference> 会根据同步器的可见性来处理节点，只要 <reference internal="True" refid="class-multiplayersynchronizer-property-root-path"><inline classes="std std-ref">root_path</inline></reference> 的节点是出生出来的。</paragraph>
            <paragraph>内部而言，<strong>MultiplayerSynchronizer</strong> 使用 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-object-configuration-add"><inline classes="std std-ref">MultiplayerAPI.object_configuration_add</inline></reference> 来通知同步开始，将位于 <reference internal="True" refid="class-multiplayersynchronizer-property-root-path"><inline classes="std std-ref">root_path</inline></reference> 的 <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 作为 <literal>object</literal> 传入、将自己作为 <literal>configuration</literal> 传入。使用 <reference internal="True" refuri="class_multiplayerapi#class-multiplayerapi-method-object-configuration-remove"><inline classes="std std-ref">MultiplayerAPI.object_configuration_remove</inline></reference> 通知同步结束的方法相同。</paragraph>
            <paragraph><strong>注意：</strong>不支持对 <reference internal="True" refuri="class_resource#class-resource"><inline classes="std std-ref">Resource</inline></reference> 等 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 类型属性进行同步。对等体的唯一属性也无法进行同步，例如 <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference> 的实例 ID（见 <reference internal="True" refuri="class_object#class-object-method-get-instance-id"><inline classes="std std-ref">Object.get_instance_id</inline></reference>）或 <reference internal="True" refuri="class_rid#class-rid"><inline classes="std std-ref">RID</inline></reference>。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="80"></colspec>
                    <colspec colwidth="94"></colspec>
                    <colspec colwidth="20"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-property-delta-interval"><inline classes="std std-ref">delta_interval</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-property-public-visibility"><inline classes="std std-ref">public_visibility</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_scenereplicationconfig#class-scenereplicationconfig"><inline classes="std std-ref">SceneReplicationConfig</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-property-replication-config"><inline classes="std std-ref">replication_config</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-property-replication-interval"><inline classes="std std-ref">replication_interval</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-property-root-path"><inline classes="std std-ref">root_path</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>NodePath("..")</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-property-visibility-update-mode"><inline classes="std std-ref">visibility_update_mode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="25"></colspec>
                    <colspec colwidth="156"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-method-add-visibility-filter"><inline classes="std std-ref">add_visibility_filter</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> filter <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-method-get-visibility-for"><inline classes="std std-ref">get_visibility_for</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-method-remove-visibility-filter"><inline classes="std std-ref">remove_visibility_filter</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> filter <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-method-set-visibility-for"><inline classes="std std-ref">set_visibility_for</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> visible <strong>)</strong></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>void</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-multiplayersynchronizer-method-update-visibility"><inline classes="std std-ref">update_visibility</inline></reference> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> for_peer=0 <strong>)</strong></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id4" names="信号">
            <title>信号</title>
            <target refid="class-multiplayersynchronizer-signal-delta-synchronized"></target>
            <paragraph classes="classref-signal" ids="class-multiplayersynchronizer-signal-delta-synchronized" names="class_multiplayersynchronizer_signal_delta_synchronized"><strong>delta_synchronized</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>属性发生更新后，该同步器收到新的增量同步状态时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-signal-synchronized"></target>
            <paragraph classes="classref-signal" ids="class-multiplayersynchronizer-signal-synchronized" names="class_multiplayersynchronizer_signal_synchronized"><strong>synchronized</strong> <strong>(</strong> <strong>)</strong></paragraph>
            <paragraph>属性发生更新后，该同步器收到新的同步状态时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-signal-visibility-changed"></target>
            <paragraph classes="classref-signal" ids="class-multiplayersynchronizer-signal-visibility-changed" names="class_multiplayersynchronizer_signal_visibility_changed"><strong>visibility_changed</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> for_peer <strong>)</strong></paragraph>
            <paragraph>当 <literal>for_peer</literal> 的可见性发生更新时发出。见 <reference internal="True" refid="class-multiplayersynchronizer-method-update-visibility"><inline classes="std std-ref">update_visibility</inline></reference>。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="枚举">
            <title>枚举</title>
            <target refid="enum-multiplayersynchronizer-visibilityupdatemode"></target>
            <paragraph classes="classref-enumeration" ids="enum-multiplayersynchronizer-visibilityupdatemode" names="enum_multiplayersynchronizer_visibilityupdatemode">enum <strong>VisibilityUpdateMode</strong>:</paragraph>
            <target refid="class-multiplayersynchronizer-constant-visibility-process-idle"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayersynchronizer-constant-visibility-process-idle" names="class_multiplayersynchronizer_constant_visibility_process_idle"><reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference> <strong>VISIBILITY_PROCESS_IDLE</strong> = <literal>0</literal></paragraph>
            <paragraph>可见性过滤器的更新发生在处理帧中（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PROCESS</inline></reference>）。</paragraph>
            <target refid="class-multiplayersynchronizer-constant-visibility-process-physics"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayersynchronizer-constant-visibility-process-physics" names="class_multiplayersynchronizer_constant_visibility_process_physics"><reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference> <strong>VISIBILITY_PROCESS_PHYSICS</strong> = <literal>1</literal></paragraph>
            <paragraph>可见性过滤器的更新发生在物理帧中（见 <reference internal="True" refuri="class_node#class-node-constant-notification-internal-physics-process"><inline classes="std std-ref">Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS</inline></reference>）。</paragraph>
            <target refid="class-multiplayersynchronizer-constant-visibility-process-none"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-multiplayersynchronizer-constant-visibility-process-none" names="class_multiplayersynchronizer_constant_visibility_process_none"><reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference> <strong>VISIBILITY_PROCESS_NONE</strong> = <literal>2</literal></paragraph>
            <paragraph>可见性过滤器不会自动更新，必须通过调用 <reference internal="True" refid="class-multiplayersynchronizer-method-update-visibility"><inline classes="std std-ref">update_visibility</inline></reference> 手动更新。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="属性说明">
            <title>属性说明</title>
            <target refid="class-multiplayersynchronizer-property-delta-interval"></target>
            <paragraph classes="classref-property" ids="class-multiplayersynchronizer-property-delta-interval" names="class_multiplayersynchronizer_property_delta_interval"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>delta_interval</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_delta_interval</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_delta_interval</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>两次增量同步之间的时间间隔。当设置为 <literal>0.0</literal>（默认值）时，每个网络处理帧都会发生增量同步。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-property-public-visibility"></target>
            <paragraph classes="classref-property" ids="class-multiplayersynchronizer-property-public-visibility" names="class_multiplayersynchronizer_property_public_visibility"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>public_visibility</strong> = <literal>true</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visibility_public</strong> <strong>(</strong> <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_visibility_public</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>默认情况下，同步是否应该对所有对等体可见。有关配置细粒度可见性选项的方法，请参阅 <reference internal="True" refid="class-multiplayersynchronizer-method-set-visibility-for"><inline classes="std std-ref">set_visibility_for</inline></reference> 和 <reference internal="True" refid="class-multiplayersynchronizer-method-add-visibility-filter"><inline classes="std std-ref">add_visibility_filter</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-property-replication-config"></target>
            <paragraph classes="classref-property" ids="class-multiplayersynchronizer-property-replication-config" names="class_multiplayersynchronizer_property_replication_config"><reference internal="True" refuri="class_scenereplicationconfig#class-scenereplicationconfig"><inline classes="std std-ref">SceneReplicationConfig</inline></reference> <strong>replication_config</strong></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_replication_config</strong> <strong>(</strong> <reference internal="True" refuri="class_scenereplicationconfig#class-scenereplicationconfig"><inline classes="std std-ref">SceneReplicationConfig</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_scenereplicationconfig#class-scenereplicationconfig"><inline classes="std std-ref">SceneReplicationConfig</inline></reference> <strong>get_replication_config</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>包含要同步的属性的资源。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-property-replication-interval"></target>
            <paragraph classes="classref-property" ids="class-multiplayersynchronizer-property-replication-interval" names="class_multiplayersynchronizer_property_replication_interval"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>replication_interval</strong> = <literal>0.0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_replication_interval</strong> <strong>(</strong> <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_replication_interval</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>两次同步之间的时间间隔。当设置为 <literal>0.0</literal>（默认值）时，每个网络处理帧都会发生同步。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-property-root-path"></target>
            <paragraph classes="classref-property" ids="class-multiplayersynchronizer-property-root-path" names="class_multiplayersynchronizer_property_root_path"><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>root_path</strong> = <literal>NodePath("..")</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_root_path</strong> <strong>(</strong> <reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_nodepath#class-nodepath"><inline classes="std std-ref">NodePath</inline></reference> <strong>get_root_path</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>复制属性相对的节点路径。</paragraph>
            <paragraph>如果 <reference internal="True" refid="class-multiplayersynchronizer-property-root-path"><inline classes="std std-ref">root_path</inline></reference> 是由 <reference internal="True" refuri="class_multiplayerspawner#class-multiplayerspawner"><inline classes="std std-ref">MultiplayerSpawner</inline></reference> 生成的，则该节点也将根据此同步器可见性选项生成和消失。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-property-visibility-update-mode"></target>
            <paragraph classes="classref-property" ids="class-multiplayersynchronizer-property-visibility-update-mode" names="class_multiplayersynchronizer_property_visibility_update_mode"><reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference> <strong>visibility_update_mode</strong> = <literal>0</literal></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph>void <strong>set_visibility_update_mode</strong> <strong>(</strong> <reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference> value <strong>)</strong></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference> <strong>get_visibility_update_mode</strong> <strong>(</strong> <strong>)</strong></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>指定何时更新可见性过滤器（有关选项见 <reference internal="True" refid="enum-multiplayersynchronizer-visibilityupdatemode"><inline classes="std std-ref">VisibilityUpdateMode</inline></reference>）。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="方法说明">
            <title>方法说明</title>
            <target refid="class-multiplayersynchronizer-method-add-visibility-filter"></target>
            <paragraph classes="classref-method" ids="class-multiplayersynchronizer-method-add-visibility-filter" names="class_multiplayersynchronizer_method_add_visibility_filter">void <strong>add_visibility_filter</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> filter <strong>)</strong></paragraph>
            <paragraph>为该同步器添加对等体可见性过滤器。</paragraph>
            <paragraph><literal>filter</literal> 应该接受对等体 ID <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>，返回 <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-method-get-visibility-for"></target>
            <paragraph classes="classref-method" ids="class-multiplayersynchronizer-method-get-visibility-for" names="class_multiplayersynchronizer_method_get_visibility_for"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>get_visibility_for</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer <strong>)</strong> <abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
            <paragraph>查询对等体 <literal>peer</literal> 的当前可见性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-method-remove-visibility-filter"></target>
            <paragraph classes="classref-method" ids="class-multiplayersynchronizer-method-remove-visibility-filter" names="class_multiplayersynchronizer_method_remove_visibility_filter">void <strong>remove_visibility_filter</strong> <strong>(</strong> <reference internal="True" refuri="class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference> filter <strong>)</strong></paragraph>
            <paragraph>从该同步器中移除某个对等体的可见性过滤器。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-method-set-visibility-for"></target>
            <paragraph classes="classref-method" ids="class-multiplayersynchronizer-method-set-visibility-for" names="class_multiplayersynchronizer_method_set_visibility_for">void <strong>set_visibility_for</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> peer, <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> visible <strong>)</strong></paragraph>
            <paragraph>将 <literal>peer</literal> 的可见性设置为 <literal>visible</literal>。如果 <literal>peer</literal> 为 <literal>0</literal>，则会改为更新 <reference internal="True" refid="class-multiplayersynchronizer-property-public-visibility"><inline classes="std std-ref">public_visibility</inline></reference> 的值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-multiplayersynchronizer-method-update-visibility"></target>
            <paragraph classes="classref-method" ids="class-multiplayersynchronizer-method-update-visibility" names="class_multiplayersynchronizer_method_update_visibility">void <strong>update_visibility</strong> <strong>(</strong> <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> for_peer=0 <strong>)</strong></paragraph>
            <paragraph>根据可见性过滤器更新 <literal>for_peer</literal> 的可见性。如果 <literal>for_peer</literal> 为 <literal>0</literal>（默认值），则更新所有对等体的可见性。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用。不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，所以可以直接使用类名调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
