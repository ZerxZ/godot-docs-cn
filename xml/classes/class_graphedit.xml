<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/classes/class_graphedit.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">DO NOT EDIT THIS FILE!!!</comment>
    <comment xml:space="preserve">Generated automatically from Godot engine sources.</comment>
    <comment xml:space="preserve">Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.</comment>
    <comment xml:space="preserve">XML source: https://github.com/godotengine/godot/tree/master/doc/classes/GraphEdit.xml.</comment>
    <target refid="class-graphedit"></target>
    <section ids="graphedit class-graphedit" names="graphedit class_graphedit">
        <title>GraphEdit</title>
        <paragraph><strong>实验性：</strong> This class may be changed or removed in future versions.</paragraph>
        <paragraph><strong>继承：</strong> <reference internal="True" refuri="class_control#class-control"><inline classes="std std-ref">Control</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference> <strong>&lt;</strong> <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference></paragraph>
        <paragraph>图结构编辑器，使用 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference>。</paragraph>
        <section classes="classref-introduction-group" ids="id1" names="描述">
            <title>描述</title>
            <paragraph><strong>GraphEdit</strong> 提供了用于对各种图进行创建、操作、显示的工具。它在引擎中的主要目的是驱动可视化编程系统，例如可视化着色器，但也可以在用户项目中使用。</paragraph>
            <paragraph><strong>GraphEdit</strong> 本身只是一个空容器，表示一个可以放置 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的无限栅格。每个 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 代表图中的一个节点，是连接方案中的单个数据单元。而 <strong>GraphEdit</strong> 则有助于控制节点和节点之间的各种交互。当用户尝试连接、断开或删除一个 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 时，<strong>GraphEdit</strong> 中会发出对应的信号，但默认情况下不执行任何动作。使用此控件的程序员负责实现必要的逻辑，来确定应如何处理每个请求。</paragraph>
            <paragraph><strong>性能：</strong>强烈建议在使用 GraphEdit 时启用低处理器使用模式（见 <reference internal="True" refuri="class_os#class-os-property-low-processor-usage-mode"><inline classes="std std-ref">OS.low_processor_usage_mode</inline></reference>）。</paragraph>
        </section>
        <section classes="classref-reftable-group" ids="id2" names="属性">
            <title>属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="52"></colspec>
                    <colspec colwidth="92"></colspec>
                    <colspec colwidth="75"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>clip_contents</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-clip-contents"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-connection-lines-antialiased"><inline classes="std std-ref">connection_lines_antialiased</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-connection-lines-curvature"><inline classes="std std-ref">connection_lines_curvature</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.5</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-connection-lines-thickness"><inline classes="std std-ref">connection_lines_thickness</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>4.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_control#enum-control-focusmode"><inline classes="std std-ref">FocusMode</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph>focus_mode</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2</literal> (overrides <reference internal="True" refuri="class_control#class-control-property-focus-mode"><inline classes="std std-ref">Control</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-graphedit-gridpattern"><inline classes="std std-ref">GridPattern</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-grid-pattern"><inline classes="std std-ref">grid_pattern</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-minimap-enabled"><inline classes="std std-ref">minimap_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-minimap-opacity"><inline classes="std std-ref">minimap_opacity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.65</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-minimap-size"><inline classes="std std-ref">minimap_size</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(240, 160)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refid="enum-graphedit-panningscheme"><inline classes="std std-ref">PanningScheme</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-panning-scheme"><inline classes="std std-ref">panning_scheme</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-right-disconnects"><inline classes="std std-ref">right_disconnects</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-scroll-offset"><inline classes="std std-ref">scroll_offset</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Vector2(0, 0)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-show-arrange-button"><inline classes="std std-ref">show_arrange_button</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-show-grid"><inline classes="std std-ref">show_grid</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-show-grid-buttons"><inline classes="std std-ref">show_grid_buttons</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-show-menu"><inline classes="std std-ref">show_menu</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-show-minimap-button"><inline classes="std std-ref">show_minimap_button</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-show-zoom-buttons"><inline classes="std std-ref">show_zoom_buttons</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-show-zoom-label"><inline classes="std std-ref">show_zoom_label</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>false</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-snapping-distance"><inline classes="std std-ref">snapping_distance</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>20</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-snapping-enabled"><inline classes="std std-ref">snapping_enabled</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>true</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-zoom"><inline classes="std std-ref">zoom</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.0</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-zoom-max"><inline classes="std std-ref">zoom_max</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>2.0736</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-zoom-min"><inline classes="std std-ref">zoom_min</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>0.232568</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-property-zoom-step"><inline classes="std std-ref">zoom_step</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>1.2</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id3" names="方法">
            <title>方法</title>
            <table classes="colwidths-auto">
                <tgroup cols="2">
                    <colspec colwidth="66"></colspec>
                    <colspec colwidth="286"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-private-method-get-connection-line"><inline classes="std std-ref">_get_connection_line</inline></reference>(from_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-private-method-is-in-input-hotzone"><inline classes="std std-ref">_is_in_input_hotzone</inline></reference>(in_node: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, in_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mouse_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-private-method-is-in-output-hotzone"><inline classes="std std-ref">_is_in_output_hotzone</inline></reference>(in_node: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, in_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mouse_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-private-method-is-node-hover-valid"><inline classes="std std-ref">_is_node_hover_valid</inline></reference>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-add-valid-connection-type"><inline classes="std std-ref">add_valid_connection_type</inline></reference>(from_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-add-valid-left-disconnect-type"><inline classes="std std-ref">add_valid_left_disconnect_type</inline></reference>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-add-valid-right-disconnect-type"><inline classes="std std-ref">add_valid_right_disconnect_type</inline></reference>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-arrange-nodes"><inline classes="std std-ref">arrange_nodes</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-attach-graph-element-to-frame"><inline classes="std std-ref">attach_graph_element_to_frame</inline></reference>(element: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, frame: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-clear-connections"><inline classes="std std-ref">clear_connections</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-connect-node"><inline classes="std std-ref">connect_node</inline></reference>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-detach-graph-element-from-frame"><inline classes="std std-ref">detach_graph_element_from_frame</inline></reference>(element: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-disconnect-node"><inline classes="std std-ref">disconnect_node</inline></reference>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-force-connection-drag-end"><inline classes="std std-ref">force_connection_drag_end</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-get-attached-nodes-of-frame"><inline classes="std std-ref">get_attached_nodes_of_frame</inline></reference>(frame: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-get-closest-connection-at-point"><inline classes="std std-ref">get_closest_connection_at_point</inline></reference>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, max_distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4.0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-get-connection-line"><inline classes="std std-ref">get_connection_line</inline></reference>(from_node: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to_node: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-get-connection-list"><inline classes="std std-ref">get_connection_list</inline></reference>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>]</paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-get-connections-intersecting-with-rect"><inline classes="std std-ref">get_connections_intersecting_with_rect</inline></reference>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-get-element-frame"><inline classes="std std-ref">get_element_frame</inline></reference>(element: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_hboxcontainer#class-hboxcontainer"><inline classes="std std-ref">HBoxContainer</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-get-menu-hbox"><inline classes="std std-ref">get_menu_hbox</inline></reference>()</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-is-node-connected"><inline classes="std std-ref">is_node_connected</inline></reference>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-is-valid-connection-type"><inline classes="std std-ref">is_valid_connection_type</inline></reference>(from_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-remove-valid-connection-type"><inline classes="std std-ref">remove_valid_connection_type</inline></reference>(from_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-remove-valid-left-disconnect-type"><inline classes="std std-ref">remove_valid_left_disconnect_type</inline></reference>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-remove-valid-right-disconnect-type"><inline classes="std std-ref">remove_valid_right_disconnect_type</inline></reference>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-set-connection-activity"><inline classes="std std-ref">set_connection_activity</inline></reference>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><abbreviation explanation="无返回值。">void</abbreviation></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-method-set-selected"><inline classes="std std-ref">set_selected</inline></reference>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>)</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section classes="classref-reftable-group" ids="id4" names="主题属性">
            <title>主题属性</title>
            <table classes="colwidths-auto">
                <tgroup cols="3">
                    <colspec colwidth="35"></colspec>
                    <colspec colwidth="107"></colspec>
                    <colspec colwidth="31"></colspec>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-activity"><inline classes="std std-ref">activity</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 1)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-connection-hover-tint-color"><inline classes="std std-ref">connection_hover_tint_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0, 0, 0, 0.3)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-connection-rim-color"><inline classes="std std-ref">connection_rim_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(0.1, 0.1, 0.1, 0.6)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-connection-valid-target-tint-color"><inline classes="std std-ref">connection_valid_target_tint_color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 0.4)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-grid-major"><inline classes="std std-ref">grid_major</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 0.2)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-grid-minor"><inline classes="std std-ref">grid_minor</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 0.05)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-selection-fill"><inline classes="std std-ref">selection_fill</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 0.3)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-color-selection-stroke"><inline classes="std std-ref">selection_stroke</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Color(1, 1, 1, 0.8)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-constant-port-hotzone-inner-extent"><inline classes="std std-ref">port_hotzone_inner_extent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>22</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-constant-port-hotzone-outer-extent"><inline classes="std std-ref">port_hotzone_outer_extent</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>26</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-icon-grid-toggle"><inline classes="std std-ref">grid_toggle</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-icon-layout"><inline classes="std std-ref">layout</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-icon-minimap-toggle"><inline classes="std std-ref">minimap_toggle</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-icon-snapping-toggle"><inline classes="std std-ref">snapping_toggle</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-icon-zoom-in"><inline classes="std std-ref">zoom_in</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-icon-zoom-out"><inline classes="std std-ref">zoom_out</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-icon-zoom-reset"><inline classes="std std-ref">zoom_reset</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-style-menu-panel"><inline classes="std std-ref">menu_panel</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference></paragraph>
                            </entry>
                            <entry>
                                <paragraph><reference internal="True" refid="class-graphedit-theme-style-panel"><inline classes="std std-ref">panel</inline></reference></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id5" names="信号">
            <title>信号</title>
            <target refid="class-graphedit-signal-begin-node-move"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-begin-node-move" names="class_graphedit_signal_begin_node_move"><strong>begin_node_move</strong>() <reference internal="True" refid="class-graphedit-signal-begin-node-move"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> 移动开始时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-connection-drag-ended"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-connection-drag-ended" names="class_graphedit_signal_connection_drag_ended"><strong>connection_drag_ended</strong>() <reference internal="True" refid="class-graphedit-signal-connection-drag-ended"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在连接拖动结束时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-connection-drag-started"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-connection-drag-started" names="class_graphedit_signal_connection_drag_started"><strong>connection_drag_started</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, is_output: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>) <reference internal="True" refid="class-graphedit-signal-connection-drag-started"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在连接拖动开始时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-connection-from-empty"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-connection-from-empty" names="class_graphedit_signal_connection_from_empty"><strong>connection_from_empty</strong>(to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, release_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-graphedit-signal-connection-from-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户将连接从输入端口拖动到图形的空白区域时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-connection-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-connection-request" names="class_graphedit_signal_connection_request"><strong>connection_request</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-signal-connection-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当尝试创建 <literal>from_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>from_port</literal> 和 <literal>to_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>to_port</literal> 之间的连接时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-connection-to-empty"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-connection-to-empty" names="class_graphedit_signal_connection_to_empty"><strong>connection_to_empty</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, release_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-graphedit-signal-connection-to-empty"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户将连接从输出端口拖动到图形的空白区域时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-copy-nodes-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-copy-nodes-request" names="class_graphedit_signal_copy_nodes_request"><strong>copy_nodes_request</strong>() <reference internal="True" refid="class-graphedit-signal-copy-nodes-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 <strong>GraphEdit</strong> 捕获 <literal>ui_copy</literal> 动作（默认情况下为 <literal classes="kbd">Ctrl + C</literal>）时发出。一般来说，该信号指示所选的 <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> 应被复制。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-delete-nodes-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-delete-nodes-request" names="class_graphedit_signal_delete_nodes_request"><strong>delete_nodes_request</strong>(nodes: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>]) <reference internal="True" refid="class-graphedit-signal-delete-nodes-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 <strong>GraphEdit</strong> 捕获 <literal>ui_graph_delete</literal> 动作（默认为 <literal classes="kbd">Delete</literal>）时触发。</paragraph>
            <paragraph><literal>nodes</literal> 是应被移除的节点的名称的数组。这些通常包括所有选定的节点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-disconnection-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-disconnection-request" names="class_graphedit_signal_disconnection_request"><strong>disconnection_request</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-signal-disconnection-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当试图移除 <literal>from_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>from_port</literal> 和 <literal>to_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>to_port</literal> 之间的连接时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-duplicate-nodes-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-duplicate-nodes-request" names="class_graphedit_signal_duplicate_nodes_request"><strong>duplicate_nodes_request</strong>() <reference internal="True" refid="class-graphedit-signal-duplicate-nodes-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 <strong>GraphEdit</strong> 捕获 <literal>ui_graph_duplicate</literal> 动作（默认为 <literal classes="kbd">Ctrl + D</literal>）时触发。一般来说，该信号指示应被复制的所选的 <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-end-node-move"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-end-node-move" names="class_graphedit_signal_end_node_move"><strong>end_node_move</strong>() <reference internal="True" refid="class-graphedit-signal-end-node-move"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在 <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> 移动结束时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-frame-rect-changed"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-frame-rect-changed" names="class_graphedit_signal_frame_rect_changed"><strong>frame_rect_changed</strong>(frame: <reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference>, new_rect: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-graphedit-signal-frame-rect-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Emitted when the <reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference> <literal>frame</literal> is resized to <literal>new_rect</literal>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-graph-elements-linked-to-frame-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-graph-elements-linked-to-frame-request" names="class_graphedit_signal_graph_elements_linked_to_frame_request"><strong>graph_elements_linked_to_frame_request</strong>(elements: <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>, frame: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-graphedit-signal-graph-elements-linked-to-frame-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Emitted when one or more <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference>s are dropped onto the <reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference> named <literal>frame</literal>, when they were not previously attached to any other one.</paragraph>
            <paragraph><literal>elements</literal> is an array of <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference>s to be attached.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-node-deselected"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-node-deselected" names="class_graphedit_signal_node_deselected"><strong>node_deselected</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-graphedit-signal-node-deselected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当给定的 <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> 节点被取消选择时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-node-selected"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-node-selected" names="class_graphedit_signal_node_selected"><strong>node_selected</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-graphedit-signal-node-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当给定的 <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> 节点被选中时发出。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-paste-nodes-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-paste-nodes-request" names="class_graphedit_signal_paste_nodes_request"><strong>paste_nodes_request</strong>() <reference internal="True" refid="class-graphedit-signal-paste-nodes-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当该 <strong>GraphEdit</strong> 捕获 <literal>ui_paste</literal> 动作（默认为 <literal classes="kbd">Ctrl + V</literal>）时触发。一般来说，该信号指示应被粘贴的先前复制的 <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-popup-request"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-popup-request" names="class_graphedit_signal_popup_request"><strong>popup_request</strong>(at_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-graphedit-signal-popup-request"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Emitted when a popup is requested. Happens on right-clicking in the GraphEdit. <literal>at_position</literal> is the position of the mouse pointer when the signal is sent.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-signal-scroll-offset-changed"></target>
            <paragraph classes="classref-signal" ids="class-graphedit-signal-scroll-offset-changed" names="class_graphedit_signal_scroll_offset_changed"><strong>scroll_offset_changed</strong>(offset: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <reference internal="True" refid="class-graphedit-signal-scroll-offset-changed"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户改变滚动偏移量时发出。在代码中改变滚动偏移量时，它不会被触发。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id6" names="枚举">
            <title>枚举</title>
            <target refid="enum-graphedit-panningscheme"></target>
            <paragraph classes="classref-enumeration" ids="enum-graphedit-panningscheme" names="enum_graphedit_panningscheme">enum <strong>PanningScheme</strong>: <reference internal="True" refid="enum-graphedit-panningscheme"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-graphedit-constant-scroll-zooms"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-graphedit-constant-scroll-zooms" names="class_graphedit_constant_scroll_zooms"><reference internal="True" refid="enum-graphedit-panningscheme"><inline classes="std std-ref">PanningScheme</inline></reference> <strong>SCROLL_ZOOMS</strong> = <literal>0</literal></paragraph>
            <paragraph><literal classes="kbd">鼠标滚轮</literal>进行缩放，<literal classes="kbd">Ctrl + 鼠标滚轮</literal>进行视图的移动。</paragraph>
            <target refid="class-graphedit-constant-scroll-pans"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-graphedit-constant-scroll-pans" names="class_graphedit_constant_scroll_pans"><reference internal="True" refid="enum-graphedit-panningscheme"><inline classes="std std-ref">PanningScheme</inline></reference> <strong>SCROLL_PANS</strong> = <literal>1</literal></paragraph>
            <paragraph><literal classes="kbd">鼠标滚轮</literal>进行视图的移动，<literal classes="kbd">Ctrl + 鼠标滚轮</literal>进行缩放。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="enum-graphedit-gridpattern"></target>
            <paragraph classes="classref-enumeration" ids="enum-graphedit-gridpattern" names="enum_graphedit_gridpattern">enum <strong>GridPattern</strong>: <reference internal="True" refid="enum-graphedit-gridpattern"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <target refid="class-graphedit-constant-grid-pattern-lines"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-graphedit-constant-grid-pattern-lines" names="class_graphedit_constant_grid_pattern_lines"><reference internal="True" refid="enum-graphedit-gridpattern"><inline classes="std std-ref">GridPattern</inline></reference> <strong>GRID_PATTERN_LINES</strong> = <literal>0</literal></paragraph>
            <paragraph>使用实线绘制网格。</paragraph>
            <target refid="class-graphedit-constant-grid-pattern-dots"></target>
            <paragraph classes="classref-enumeration-constant" ids="class-graphedit-constant-grid-pattern-dots" names="class_graphedit_constant_grid_pattern_dots"><reference internal="True" refid="enum-graphedit-gridpattern"><inline classes="std std-ref">GridPattern</inline></reference> <strong>GRID_PATTERN_DOTS</strong> = <literal>1</literal></paragraph>
            <paragraph>使用点线绘制网格。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id7" names="属性说明">
            <title>属性说明</title>
            <target refid="class-graphedit-property-connection-lines-antialiased"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-connection-lines-antialiased" names="class_graphedit_property_connection_lines_antialiased"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>connection_lines_antialiased</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-connection-lines-antialiased"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_connection_lines_antialiased</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_connection_lines_antialiased</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，节点之间的线将使用抗锯齿。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-connection-lines-curvature"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-connection-lines-curvature" names="class_graphedit_property_connection_lines_curvature"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>connection_lines_curvature</strong> = <literal>0.5</literal> <reference internal="True" refid="class-graphedit-property-connection-lines-curvature"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_connection_lines_curvature</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_connection_lines_curvature</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>节点之间连线的曲率。0 得到的是直线。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-connection-lines-thickness"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-connection-lines-thickness" names="class_graphedit_property_connection_lines_thickness"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>connection_lines_thickness</strong> = <literal>4.0</literal> <reference internal="True" refid="class-graphedit-property-connection-lines-thickness"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_connection_lines_thickness</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_connection_lines_thickness</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>节点之间连线的粗细。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-grid-pattern"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-grid-pattern" names="class_graphedit_property_grid_pattern"><reference internal="True" refid="enum-graphedit-gridpattern"><inline classes="std std-ref">GridPattern</inline></reference> <strong>grid_pattern</strong> = <literal>0</literal> <reference internal="True" refid="class-graphedit-property-grid-pattern"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_grid_pattern</strong>(value: <reference internal="True" refid="enum-graphedit-gridpattern"><inline classes="std std-ref">GridPattern</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-graphedit-gridpattern"><inline classes="std std-ref">GridPattern</inline></reference> <strong>get_grid_pattern</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>绘制网格时使用的图案。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-minimap-enabled"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-minimap-enabled" names="class_graphedit_property_minimap_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>minimap_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-minimap-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_minimap_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_minimap_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，小图是可见的。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-minimap-opacity"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-minimap-opacity" names="class_graphedit_property_minimap_opacity"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>minimap_opacity</strong> = <literal>0.65</literal> <reference internal="True" refid="class-graphedit-property-minimap-opacity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_minimap_opacity</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_minimap_opacity</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>小图矩形的不透明度。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-minimap-size"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-minimap-size" names="class_graphedit_property_minimap_size"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>minimap_size</strong> = <literal>Vector2(240, 160)</literal> <reference internal="True" refid="class-graphedit-property-minimap-size"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_minimap_size</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_minimap_size</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>小图矩形的大小。地图自身基于网格区域的大小，并被缩放以适应这个矩形。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-panning-scheme"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-panning-scheme" names="class_graphedit_property_panning_scheme"><reference internal="True" refid="enum-graphedit-panningscheme"><inline classes="std std-ref">PanningScheme</inline></reference> <strong>panning_scheme</strong> = <literal>0</literal> <reference internal="True" refid="class-graphedit-property-panning-scheme"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_panning_scheme</strong>(value: <reference internal="True" refid="enum-graphedit-panningscheme"><inline classes="std std-ref">PanningScheme</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refid="enum-graphedit-panningscheme"><inline classes="std std-ref">PanningScheme</inline></reference> <strong>get_panning_scheme</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>定义使用鼠标滚轮平移的控制方案。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-right-disconnects"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-right-disconnects" names="class_graphedit_property_right_disconnects"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>right_disconnects</strong> = <literal>false</literal> <reference internal="True" refid="class-graphedit-property-right-disconnects"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_right_disconnects</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_right_disconnects_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，通过拖动右端，可以断开 GraphEdit 中现有的连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-scroll-offset"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-scroll-offset" names="class_graphedit_property_scroll_offset"><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>scroll_offset</strong> = <literal>Vector2(0, 0)</literal> <reference internal="True" refid="class-graphedit-property-scroll-offset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_scroll_offset</strong>(value: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> <strong>get_scroll_offset</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>滚动偏移量。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-show-arrange-button"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-show-arrange-button" names="class_graphedit_property_show_arrange_button"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_arrange_button</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-show-arrange-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_arrange_button</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_showing_arrange_button</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则自动排列图形节点的按钮可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-show-grid"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-show-grid" names="class_graphedit_property_show_grid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_grid</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-show-grid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_grid</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_showing_grid</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则该网格可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-show-grid-buttons"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-show-grid-buttons" names="class_graphedit_property_show_grid_buttons"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_grid_buttons</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-show-grid-buttons"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_grid_buttons</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_showing_grid_buttons</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则允许配置栅格和吸附选项的按钮可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-show-menu"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-show-menu" names="class_graphedit_property_show_menu"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_menu</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-show-menu"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_menu</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_showing_menu</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则菜单栏可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-show-minimap-button"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-show-minimap-button" names="class_graphedit_property_show_minimap_button"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_minimap_button</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-show-minimap-button"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_minimap_button</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_showing_minimap_button</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则切换小地图的按钮可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-show-zoom-buttons"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-show-zoom-buttons" names="class_graphedit_property_show_zoom_buttons"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_zoom_buttons</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-show-zoom-buttons"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_zoom_buttons</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_showing_zoom_buttons</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则允许更改和重置缩放级别的按钮可见。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-show-zoom-label"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-show-zoom-label" names="class_graphedit_property_show_zoom_label"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>show_zoom_label</strong> = <literal>false</literal> <reference internal="True" refid="class-graphedit-property-show-zoom-label"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_show_zoom_label</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_showing_zoom_label</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，则使带有当前缩放级别的标签可见。缩放级别以百分比显示。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-snapping-distance"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-snapping-distance" names="class_graphedit_property_snapping_distance"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>snapping_distance</strong> = <literal>20</literal> <reference internal="True" refid="class-graphedit-property-snapping-distance"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_snapping_distance</strong>(value: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>get_snapping_distance</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>吸附距离，单位为像素，也决定了栅格线距离。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-snapping-enabled"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-snapping-enabled" names="class_graphedit_property_snapping_enabled"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>snapping_enabled</strong> = <literal>true</literal> <reference internal="True" refid="class-graphedit-property-snapping-enabled"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_snapping_enabled</strong>(value: <reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_snapping_enabled</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果为 <literal>true</literal>，启用自动吸附。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-zoom"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-zoom" names="class_graphedit_property_zoom"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>zoom</strong> = <literal>1.0</literal> <reference internal="True" refid="class-graphedit-property-zoom"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_zoom</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_zoom</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>当前缩放值。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-zoom-max"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-zoom-max" names="class_graphedit_property_zoom_max"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>zoom_max</strong> = <literal>2.0736</literal> <reference internal="True" refid="class-graphedit-property-zoom-max"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_zoom_max</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_zoom_max</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>缩放上限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-zoom-min"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-zoom-min" names="class_graphedit_property_zoom_min"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>zoom_min</strong> = <literal>0.232568</literal> <reference internal="True" refid="class-graphedit-property-zoom-min"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_zoom_min</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_zoom_min</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>缩放下限。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-property-zoom-step"></target>
            <paragraph classes="classref-property" ids="class-graphedit-property-zoom-step" names="class_graphedit_property_zoom_step"><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>zoom_step</strong> = <literal>1.2</literal> <reference internal="True" refid="class-graphedit-property-zoom-step"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <bullet_list bullet="-" classes="classref-property-setget">
                <list_item>
                    <paragraph><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_zoom_step</strong>(value: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> <strong>get_zoom_step</strong>()</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>每个缩放级别的步长。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id8" names="方法说明">
            <title>方法说明</title>
            <target refid="class-graphedit-private-method-get-connection-line"></target>
            <paragraph classes="classref-method" ids="class-graphedit-private-method-get-connection-line" names="class_graphedit_private_method__get_connection_line"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>_get_connection_line</strong>(from_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphedit-private-method-get-connection-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>可以重写的虚方法，以自定义如何绘制连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-private-method-is-in-input-hotzone"></target>
            <paragraph classes="classref-method" ids="class-graphedit-private-method-is-in-input-hotzone" names="class_graphedit_private_method__is_in_input_hotzone"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_in_input_hotzone</strong>(in_node: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, in_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mouse_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-graphedit-private-method-is-in-input-hotzone"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>mouse_position</literal> 是否在输入热区。</paragraph>
            <paragraph>默认情况下，热区是一个 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>，其中心位于 <literal>in_node</literal>.<reference internal="True" refuri="class_graphnode#class-graphnode-method-get-input-port-position"><inline classes="std std-ref">GraphNode.get_input_port_position</inline></reference>(<literal>in_port</literal>)（对于输出的情况，请改为调用 <reference internal="True" refuri="class_graphnode#class-graphnode-method-get-output-port-position"><inline classes="std std-ref">GraphNode.get_output_port_position</inline></reference>）。热区的宽度是主题属性 <literal>port_grab_distance_horizontal</literal> 的两倍，高度是 <literal>port_grab_distance_vertical</literal> 的两倍。</paragraph>
            <paragraph>下面是一个示例代码，以帮助入门：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _is_in_input_hotzone(in_node, in_port, mouse_position):
    var port_size: Vector2 = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
    var port_pos: Vector2 = in_node.get_position() + in_node.get_input_port_position(in_port) - port_size / 2
    var rect = Rect2(port_pos, port_size)

    return rect.has_point(mouse_position)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-private-method-is-in-output-hotzone"></target>
            <paragraph classes="classref-method" ids="class-graphedit-private-method-is-in-output-hotzone" names="class_graphedit_private_method__is_in_output_hotzone"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_in_output_hotzone</strong>(in_node: <reference internal="True" refuri="class_object#class-object"><inline classes="std std-ref">Object</inline></reference>, in_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, mouse_position: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-graphedit-private-method-is-in-output-hotzone"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回 <literal>mouse_position</literal> 是否在输出热区。有关热区的更多信息，请参阅 <reference internal="True" refid="class-graphedit-private-method-is-in-input-hotzone"><inline classes="std std-ref">_is_in_input_hotzone</inline></reference>。</paragraph>
            <paragraph>下面是一个示例代码，以帮助入门：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func _is_in_output_hotzone(in_node, in_port, mouse_position):
    var port_size: Vector2 = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
    var port_pos: Vector2 = in_node.get_position() + in_node.get_output_port_position(in_port) - port_size / 2
    var rect = Rect2(port_pos, port_size)

    return rect.has_point(mouse_position)</literal_block>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-private-method-is-node-hover-valid"></target>
            <paragraph classes="classref-method" ids="class-graphedit-private-method-is-node-hover-valid" names="class_graphedit_private_method__is_node_hover_valid"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>_is_node_hover_valid</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation> <reference internal="True" refid="class-graphedit-private-method-is-node-hover-valid"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当用户在有效端口上拖动连接时，该虚拟方法可用于插入额外的错误检测。</paragraph>
            <paragraph>如果连接确实有效，则返回 <literal>true</literal>；如果连接不可能，则返回 <literal>false</literal>。如果连接是不可能的，则不会捕捉到该端口，因此不会发起对该端口的连接请求。</paragraph>
            <paragraph>在该示例中，抑制了与同一节点的连接：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _is_node_hover_valid(from, from_port, to, to_port):
    return from != to</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override bool _IsNodeHoverValid(StringName fromNode, int fromPort, StringName toNode, int toPort)
{
    return fromNode != toNode;
}</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-add-valid-connection-type"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-add-valid-connection-type" names="class_graphedit_method_add_valid_connection_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_valid_connection_type</strong>(from_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-add-valid-connection-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>允许两种不同端口类型之间的连接。端口类型是使用 <reference internal="True" refuri="class_graphnode#class-graphnode-method-set-slot"><inline classes="std std-ref">GraphNode.set_slot</inline></reference> 方法为每个插槽的左右端口单独定义的。</paragraph>
            <paragraph>另请参阅 <reference internal="True" refid="class-graphedit-method-is-valid-connection-type"><inline classes="std std-ref">is_valid_connection_type</inline></reference> 和 <reference internal="True" refid="class-graphedit-method-remove-valid-connection-type"><inline classes="std std-ref">remove_valid_connection_type</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-add-valid-left-disconnect-type"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-add-valid-left-disconnect-type" names="class_graphedit_method_add_valid_left_disconnect_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_valid_left_disconnect_type</strong>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-add-valid-left-disconnect-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 插槽的左侧端口具有指定的类型，则允许在从该端口拖动时断开节点。另请参阅 <reference internal="True" refid="class-graphedit-method-remove-valid-left-disconnect-type"><inline classes="std std-ref">remove_valid_left_disconnect_type</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-add-valid-right-disconnect-type"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-add-valid-right-disconnect-type" names="class_graphedit_method_add_valid_right_disconnect_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>add_valid_right_disconnect_type</strong>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-add-valid-right-disconnect-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 插槽的右侧端口具有指定的类型，则允许在从该端口拖动时断开节点。另请参阅 <reference internal="True" refid="class-graphedit-method-remove-valid-right-disconnect-type"><inline classes="std std-ref">remove_valid_right_disconnect_type</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-arrange-nodes"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-arrange-nodes" names="class_graphedit_method_arrange_nodes"><abbreviation explanation="无返回值。">void</abbreviation> <strong>arrange_nodes</strong>() <reference internal="True" refid="class-graphedit-method-arrange-nodes"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>重新排列布局中的选定节点，使连接之间的交叉最少，节点之间的水平和垂直间隙保持一致。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-attach-graph-element-to-frame"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-attach-graph-element-to-frame" names="class_graphedit_method_attach_graph_element_to_frame"><abbreviation explanation="无返回值。">void</abbreviation> <strong>attach_graph_element_to_frame</strong>(element: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, frame: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-graphedit-method-attach-graph-element-to-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Attaches the <literal>element</literal> <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> to the <literal>frame</literal> <reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference>.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-clear-connections"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-clear-connections" names="class_graphedit_method_clear_connections"><abbreviation explanation="无返回值。">void</abbreviation> <strong>clear_connections</strong>() <reference internal="True" refid="class-graphedit-method-clear-connections"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除节点之间的所有连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-connect-node"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-connect-node" names="class_graphedit_method_connect_node"><reference internal="True" refuri="class_@globalscope#enum-globalscope-error"><inline classes="std std-ref">Error</inline></reference> <strong>connect_node</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-connect-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>在来源 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 节点 <literal>from_node</literal> 的 <literal>from_port</literal> 端口和目标 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 节点 <literal>to_node</literal> 的 <literal>to_port</literal> 端口之间创建连接。如果已存在连接，则不会创建连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-detach-graph-element-from-frame"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-detach-graph-element-from-frame" names="class_graphedit_method_detach_graph_element_from_frame"><abbreviation explanation="无返回值。">void</abbreviation> <strong>detach_graph_element_from_frame</strong>(element: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-graphedit-method-detach-graph-element-from-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Detaches the <literal>element</literal> <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> from the <reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference> it is currently attached to.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-disconnect-node"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-disconnect-node" names="class_graphedit_method_disconnect_node"><abbreviation explanation="无返回值。">void</abbreviation> <strong>disconnect_node</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-disconnect-node"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>移除 <literal>from_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>from_port</literal> 和 <literal>to_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>to_port</literal> 之间的连接。如果该连接不存在，则不移除任何连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-force-connection-drag-end"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-force-connection-drag-end" names="class_graphedit_method_force_connection_drag_end"><abbreviation explanation="无返回值。">void</abbreviation> <strong>force_connection_drag_end</strong>() <reference internal="True" refid="class-graphedit-method-force-connection-drag-end"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>结束当前连接的创建。换句话说，如果正在拖动一个连接，可以使用该方法中止该过程，并移除鼠标光标后面的线。</paragraph>
            <paragraph>这最好与 <reference internal="True" refid="class-graphedit-signal-connection-drag-started"><inline classes="std std-ref">connection_drag_started</inline></reference> 和 <reference internal="True" refid="class-graphedit-signal-connection-drag-ended"><inline classes="std std-ref">connection_drag_ended</inline></reference> 一起使用，以添加自定义的行为，如通过快捷方式添加节点。</paragraph>
            <paragraph><strong>注意：</strong>该方法会抑制除 <reference internal="True" refid="class-graphedit-signal-connection-drag-ended"><inline classes="std std-ref">connection_drag_ended</inline></reference> 之外的任何其他连接请求信号。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-get-attached-nodes-of-frame"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-get-attached-nodes-of-frame" names="class_graphedit_method_get_attached_nodes_of_frame"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>] <strong>get_attached_nodes_of_frame</strong>(frame: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-graphedit-method-get-attached-nodes-of-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns an array of node names that are attached to the <reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference> with the given name.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-get-closest-connection-at-point"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-get-closest-connection-at-point" names="class_graphedit_method_get_closest_connection_at_point"><reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference> <strong>get_closest_connection_at_point</strong>(point: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, max_distance: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference> = 4.0) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphedit-method-get-closest-connection-at-point"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回到屏幕空间中给定点的最近连接。如果在 <literal>max_distance</literal> 像素内未找到连接，则返回空的 <reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>。</paragraph>
            <paragraph>连接由以下形式的结构组成：<literal>{ from_port: 0, from_node: "GraphNode name 0", to_port: 1, to_node: "GraphNode name 1" }</literal>。</paragraph>
            <paragraph>例如，可以像这样实现获取在给定鼠标位置处的连接：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var connection = get_closest_connection_at_point(mouse_event.get_position())</literal_block>
                </div>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-get-connection-line"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-get-connection-line" names="class_graphedit_method_get_connection_line"><reference internal="True" refuri="class_packedvector2array#class-packedvector2array"><inline classes="std std-ref">PackedVector2Array</inline></reference> <strong>get_connection_line</strong>(from_node: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>, to_node: <reference internal="True" refuri="class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphedit-method-get-connection-line"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回构成 <literal>from_node</literal> 和 <literal>to_node</literal> 之间的连接的点。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-get-connection-list"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-get-connection-list" names="class_graphedit_method_get_connection_list"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_connection_list</strong>() <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphedit-method-get-connection-list"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回包含连接列表的 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>。连接由以下形式的结构组成：<literal>{ from_port: 0, from_node: "GraphNode name 0", to_port: 1, to_node: "GraphNode name 1" }</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-get-connections-intersecting-with-rect"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-get-connections-intersecting-with-rect" names="class_graphedit_method_get_connections_intersecting_with_rect"><reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>[<reference internal="True" refuri="class_dictionary#class-dictionary"><inline classes="std std-ref">Dictionary</inline></reference>] <strong>get_connections_intersecting_with_rect</strong>(rect: <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphedit-method-get-connections-intersecting-with-rect"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回一个 <reference internal="True" refuri="class_array#class-array"><inline classes="std std-ref">Array</inline></reference>，其中包含与给定 <reference internal="True" refuri="class_rect2#class-rect2"><inline classes="std std-ref">Rect2</inline></reference> 相交的连接列表。连接由以下形式的结构组成：<literal>{ from_port: 0, from_node: "GraphNode name 0", to_port: 1, to_node: "GraphNode name 1" }</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-get-element-frame"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-get-element-frame" names="class_graphedit_method_get_element_frame"><reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference> <strong>get_element_frame</strong>(element: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>) <reference internal="True" refid="class-graphedit-method-get-element-frame"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>Returns the <reference internal="True" refuri="class_graphframe#class-graphframe"><inline classes="std std-ref">GraphFrame</inline></reference> that contains the <reference internal="True" refuri="class_graphelement#class-graphelement"><inline classes="std std-ref">GraphElement</inline></reference> with the given name.</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-get-menu-hbox"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-get-menu-hbox" names="class_graphedit_method_get_menu_hbox"><reference internal="True" refuri="class_hboxcontainer#class-hboxcontainer"><inline classes="std std-ref">HBoxContainer</inline></reference> <strong>get_menu_hbox</strong>() <reference internal="True" refid="class-graphedit-method-get-menu-hbox"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>获取包含图形左上角的缩放和网格捕捉控件的 <reference internal="True" refuri="class_hboxcontainer#class-hboxcontainer"><inline classes="std std-ref">HBoxContainer</inline></reference>。你可以使用此方法重新定位工具栏或向其添加自定义控件。</paragraph>
            <paragraph><strong>警告：</strong>这是一个必需的内部节点，删除和释放它可能会导致崩溃。如果你希望隐藏它或其任何子项，请使用它们的 <reference internal="True" refuri="class_canvasitem#class-canvasitem-property-visible"><inline classes="std std-ref">CanvasItem.visible</inline></reference> 属性。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-is-node-connected"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-is-node-connected" names="class_graphedit_method_is_node_connected"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_node_connected</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-is-node-connected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <literal>from_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>from_port</literal> 连接到 <literal>to_node</literal> <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 的 <literal>to_port</literal>，则返回 <literal>true</literal>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-is-valid-connection-type"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-is-valid-connection-type" names="class_graphedit_method_is_valid_connection_type"><reference internal="True" refuri="class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> <strong>is_valid_connection_type</strong>(from_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation> <reference internal="True" refid="class-graphedit-method-is-valid-connection-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>返回是否可以在两种不同的端口类型之间建立连接。端口类型是使用 <reference internal="True" refuri="class_graphnode#class-graphnode-method-set-slot"><inline classes="std std-ref">GraphNode.set_slot</inline></reference> 方法为每个插槽的左右端口单独定义的。</paragraph>
            <paragraph>另请参阅 <reference internal="True" refid="class-graphedit-method-add-valid-connection-type"><inline classes="std std-ref">add_valid_connection_type</inline></reference> 和 <reference internal="True" refid="class-graphedit-method-remove-valid-connection-type"><inline classes="std std-ref">remove_valid_connection_type</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-remove-valid-connection-type"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-remove-valid-connection-type" names="class_graphedit_method_remove_valid_connection_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_valid_connection_type</strong>(from_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-remove-valid-connection-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>不允许先前由 <reference internal="True" refid="class-graphedit-method-add-valid-connection-type"><inline classes="std std-ref">add_valid_connection_type</inline></reference> 允许的两种不同端口类型之间的连接。端口类型是通过 <reference internal="True" refuri="class_graphnode#class-graphnode-method-set-slot"><inline classes="std std-ref">GraphNode.set_slot</inline></reference> 方法为每个插槽的左右端口单独定义的。</paragraph>
            <paragraph>另请参阅 <reference internal="True" refid="class-graphedit-method-is-valid-connection-type"><inline classes="std std-ref">is_valid_connection_type</inline></reference>。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-remove-valid-left-disconnect-type"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-remove-valid-left-disconnect-type" names="class_graphedit_method_remove_valid_left_disconnect_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_valid_left_disconnect_type</strong>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-remove-valid-left-disconnect-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 插槽的左侧端口具有指定类型，当从该端口拖动时，则不允许断开节点的连接。使用该方法来禁用以前使用 <reference internal="True" refid="class-graphedit-method-add-valid-left-disconnect-type"><inline classes="std std-ref">add_valid_left_disconnect_type</inline></reference> 允许的断开连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-remove-valid-right-disconnect-type"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-remove-valid-right-disconnect-type" names="class_graphedit_method_remove_valid_right_disconnect_type"><abbreviation explanation="无返回值。">void</abbreviation> <strong>remove_valid_right_disconnect_type</strong>(type: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>) <reference internal="True" refid="class-graphedit-method-remove-valid-right-disconnect-type"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>如果 <reference internal="True" refuri="class_graphnode#class-graphnode"><inline classes="std std-ref">GraphNode</inline></reference> 插槽的右侧端口具有指定类型，当从该端口拖动时，则不允许断开节点的连接。使用该方法来禁用以前使用 <reference internal="True" refid="class-graphedit-method-add-valid-right-disconnect-type"><inline classes="std std-ref">add_valid_right_disconnect_type</inline></reference> 允许的断开连接。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-set-connection-activity"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-set-connection-activity" names="class_graphedit_method_set_connection_activity"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_connection_activity</strong>(from_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, from_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, to_node: <reference internal="True" refuri="class_stringname#class-stringname"><inline classes="std std-ref">StringName</inline></reference>, to_port: <reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference>, amount: <reference internal="True" refuri="class_float#class-float"><inline classes="std std-ref">float</inline></reference>) <reference internal="True" refid="class-graphedit-method-set-connection-activity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>使用 <reference internal="True" refid="class-graphedit-theme-color-activity"><inline classes="std std-ref">activity</inline></reference> 主题属性中提供的颜色，设置 <literal>from_node</literal> 的 <literal>from_port</literal> 和 <literal>to_node</literal> 的 <literal>to_port</literal> 之间的连接的颜色。使用 <literal>amount</literal> 作为权重，在连接颜色和活动颜色之间线性插值颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-method-set-selected"></target>
            <paragraph classes="classref-method" ids="class-graphedit-method-set-selected" names="class_graphedit_method_set_selected"><abbreviation explanation="无返回值。">void</abbreviation> <strong>set_selected</strong>(node: <reference internal="True" refuri="class_node#class-node"><inline classes="std std-ref">Node</inline></reference>) <reference internal="True" refid="class-graphedit-method-set-selected"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>将指定的 <literal>node</literal> 节点设置为选中的节点。</paragraph>
        </section>
        <transition classes="classref-section-separator"></transition>
        <section classes="classref-descriptions-group" ids="id9" names="主题属性说明">
            <title>主题属性说明</title>
            <target refid="class-graphedit-theme-color-activity"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-activity" names="class_graphedit_theme_color_activity"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>activity</strong> = <literal>Color(1, 1, 1, 1)</literal> <reference internal="True" refid="class-graphedit-theme-color-activity"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>根据连接的活动值插入连接线的颜色（请参阅 <reference internal="True" refid="class-graphedit-method-set-connection-activity"><inline classes="std std-ref">set_connection_activity</inline></reference>）。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-color-connection-hover-tint-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-connection-hover-tint-color" names="class_graphedit_theme_color_connection_hover_tint_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>connection_hover_tint_color</strong> = <literal>Color(0, 0, 0, 0.3)</literal> <reference internal="True" refid="class-graphedit-theme-color-connection-hover-tint-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当鼠标悬停在连接线上时与该连接线混合的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-color-connection-rim-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-connection-rim-color" names="class_graphedit_theme_color_connection_rim_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>connection_rim_color</strong> = <literal>Color(0.1, 0.1, 0.1, 0.6)</literal> <reference internal="True" refid="class-graphedit-theme-color-connection-rim-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>每条连接线周围的边缘颜色，用于使相交线更容易区分。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-color-connection-valid-target-tint-color"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-connection-valid-target-tint-color" names="class_graphedit_theme_color_connection_valid_target_tint_color"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>connection_valid_target_tint_color</strong> = <literal>Color(1, 1, 1, 0.4)</literal> <reference internal="True" refid="class-graphedit-theme-color-connection-valid-target-tint-color"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>当前拖动的连接悬停在有效目标端口上时与该连接线混合的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-color-grid-major"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-grid-major" names="class_graphedit_theme_color_grid_major"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>grid_major</strong> = <literal>Color(1, 1, 1, 0.2)</literal> <reference internal="True" refid="class-graphedit-theme-color-grid-major"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>主要栅格线/点的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-color-grid-minor"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-grid-minor" names="class_graphedit_theme_color_grid_minor"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>grid_minor</strong> = <literal>Color(1, 1, 1, 0.05)</literal> <reference internal="True" refid="class-graphedit-theme-color-grid-minor"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>次要栅格线/点的颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-color-selection-fill"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-selection-fill" names="class_graphedit_theme_color_selection_fill"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>selection_fill</strong> = <literal>Color(1, 1, 1, 0.3)</literal> <reference internal="True" refid="class-graphedit-theme-color-selection-fill"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选定的矩形的填充颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-color-selection-stroke"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-color-selection-stroke" names="class_graphedit_theme_color_selection_stroke"><reference internal="True" refuri="class_color#class-color"><inline classes="std std-ref">Color</inline></reference> <strong>selection_stroke</strong> = <literal>Color(1, 1, 1, 0.8)</literal> <reference internal="True" refid="class-graphedit-theme-color-selection-stroke"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>选择的矩形的轮廓颜色。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-constant-port-hotzone-inner-extent"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-constant-port-hotzone-inner-extent" names="class_graphedit_theme_constant_port_hotzone_inner_extent"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>port_hotzone_inner_extent</strong> = <literal>22</literal> <reference internal="True" refid="class-graphedit-theme-constant-port-hotzone-inner-extent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>能够抓取端口的（内侧）横向范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-constant-port-hotzone-outer-extent"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-constant-port-hotzone-outer-extent" names="class_graphedit_theme_constant_port_hotzone_outer_extent"><reference internal="True" refuri="class_int#class-int"><inline classes="std std-ref">int</inline></reference> <strong>port_hotzone_outer_extent</strong> = <literal>26</literal> <reference internal="True" refid="class-graphedit-theme-constant-port-hotzone-outer-extent"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>能够抓取端口的（外侧）横向范围。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-icon-grid-toggle"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-icon-grid-toggle" names="class_graphedit_theme_icon_grid_toggle"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>grid_toggle</strong> <reference internal="True" refid="class-graphedit-theme-icon-grid-toggle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>网格开关按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-icon-layout"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-icon-layout" names="class_graphedit_theme_icon_layout"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>layout</strong> <reference internal="True" refid="class-graphedit-theme-icon-layout"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>用于自动排列图形的布局按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-icon-minimap-toggle"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-icon-minimap-toggle" names="class_graphedit_theme_icon_minimap_toggle"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>minimap_toggle</strong> <reference internal="True" refid="class-graphedit-theme-icon-minimap-toggle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>小地图开关按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-icon-snapping-toggle"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-icon-snapping-toggle" names="class_graphedit_theme_icon_snapping_toggle"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>snapping_toggle</strong> <reference internal="True" refid="class-graphedit-theme-icon-snapping-toggle"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>吸附开关按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-icon-zoom-in"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-icon-zoom-in" names="class_graphedit_theme_icon_zoom_in"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>zoom_in</strong> <reference internal="True" refid="class-graphedit-theme-icon-zoom-in"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>放大按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-icon-zoom-out"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-icon-zoom-out" names="class_graphedit_theme_icon_zoom_out"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>zoom_out</strong> <reference internal="True" refid="class-graphedit-theme-icon-zoom-out"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>缩小按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-icon-zoom-reset"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-icon-zoom-reset" names="class_graphedit_theme_icon_zoom_reset"><reference internal="True" refuri="class_texture2d#class-texture2d"><inline classes="std std-ref">Texture2D</inline></reference> <strong>zoom_reset</strong> <reference internal="True" refid="class-graphedit-theme-icon-zoom-reset"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>缩放重置按钮的图标。</paragraph>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-style-menu-panel"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-style-menu-panel" names="class_graphedit_theme_style_menu_panel"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>menu_panel</strong> <reference internal="True" refid="class-graphedit-theme-style-menu-panel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <container classes="contribute">
                <paragraph>目前没有这个主题属性的描述。请帮我们<reference internal="True" refuri="../contributing/documentation/updating_the_class_reference#doc-updating-the-class-reference"><inline classes="std std-ref">贡献一个</inline></reference>！</paragraph>
            </container>
            <transition classes="classref-item-separator"></transition>
            <target refid="class-graphedit-theme-style-panel"></target>
            <paragraph classes="classref-themeproperty" ids="class-graphedit-theme-style-panel" names="class_graphedit_theme_style_panel"><reference internal="True" refuri="class_stylebox#class-stylebox"><inline classes="std std-ref">StyleBox</inline></reference> <strong>panel</strong> <reference internal="True" refid="class-graphedit-theme-style-panel"><inline classes="std std-ref">🔗</inline></reference></paragraph>
            <paragraph>绘制在栅格下方的背景。</paragraph>
            <substitution_definition names="virtual"><abbreviation explanation="本方法通常需要用户覆盖才能生效。">virtual</abbreviation></substitution_definition>
            <substitution_definition names="const"><abbreviation explanation="本方法没有副作用，不会修改该实例的任何成员变量。">const</abbreviation></substitution_definition>
            <substitution_definition names="vararg"><abbreviation explanation="本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。">vararg</abbreviation></substitution_definition>
            <substitution_definition names="constructor"><abbreviation explanation="本方法用于构造某个类型。">constructor</abbreviation></substitution_definition>
            <substitution_definition names="static"><abbreviation explanation="调用本方法无需实例，可直接使用类名进行调用。">static</abbreviation></substitution_definition>
            <substitution_definition names="operator"><abbreviation explanation="本方法描述的是使用本类型作为左操作数的有效操作符。">operator</abbreviation></substitution_definition>
            <substitution_definition names="bitfield"><abbreviation explanation="这个值是由下列标志构成的位掩码整数。">BitField</abbreviation></substitution_definition>
            <substitution_definition names="void"><abbreviation explanation="无返回值。">void</abbreviation></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="Translation status" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
